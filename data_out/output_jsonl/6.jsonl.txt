{"ID": "362", "Name": "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product contains a code sequence that can run concurrently with other code, and the code sequence requires temporary, exclusive access to a shared resource, but a timing window exists in which the shared resource can be modified by another code sequence that is operating concurrently.", "ExtendedDescription": "\n\nThis can have security implications when the expected synchronization is in security-critical code, such as recording whether a user is authenticated or modifying important state information that should not be influenced by an outsider.\n\n\nA race condition occurs within concurrent environments, and is effectively a property of a code sequence. Depending on the context, a code sequence may be in the form of a function call, a small number of instructions, a series of program invocations, etc.\n\n\nA race condition violates these properties, which are closely related:\n\n\n  - Exclusivity - the code sequence is given exclusive access to the shared resource, i.e., no other code sequence can modify properties of the shared resource before the original sequence has completed execution.\n\n  - Atomicity - the code sequence is behaviorally atomic, i.e., no other thread or process can concurrently execute the same sequence of instructions (or a subset) against the same resource.\n\nA race condition exists when an \"interfering code sequence\" can still access the shared resource, violating exclusivity. Programmers may assume that certain code sequences execute too quickly to be affected by an interfering code sequence; when they are not, this violates atomicity. For example, the single \"x++\" statement may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read (the original value of x), followed by a computation (x+1), followed by a write (save the result to x).\n\nThe interfering code sequence could be \"trusted\" or \"untrusted.\" A trusted interfering code sequence occurs within the product; it cannot be modified by the attacker, and it can only be invoked indirectly. An untrusted interfering code sequence can be authored directly by the attacker, and typically it is external to the vulnerable product.\n", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "691", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "416", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "476", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Sometimes"}, {"Type": "Language", "Name": "C++", "Prevalence": "Sometimes"}, {"Type": "Language", "Name": "Java", "Prevalence": "Sometimes"}, {"Type": "Technology", "Class": "Mobile", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "ICS/OT", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)", "DoS: Resource Consumption (Other)"], "Note": "When a race condition makes it possible to bypass a resource cleanup routine or trigger multiple initialization routines, it may lead to resource exhaustion (CWE-400)."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart", "DoS: Instability"], "Note": "When a race condition allows multiple control flows to access a resource simultaneously, it might lead the product(s) into unexpected states, possibly resulting in a crash."}, {"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Read Application Data"], "Note": "When a race condition is combined with predictable resource names and loose permissions, it may be possible for an attacker to overwrite or access confidential data (CWE-59)."}], "DetectionMethods": [{"Method": "Black Box", "Description": "Black box methods may be able to identify evidence of race conditions via methods such as multiple simultaneous connections, which may cause the software to become instable or crash. However, race conditions with very narrow timing windows would not be detectable."}, {"Method": "White Box", "Description": "Common idioms are detectable in white box analysis, such as time-of-check-time-of-use (TOCTOU) file operations (CWE-367), or double-checked locking (CWE-609)."}, {"DetectionMethodID": "DM-2", "Method": "Automated Dynamic Analysis", "Description": "\n\nThis weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\n\nRace conditions may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.\n\n\nInsert breakpoints or delays in between relevant code statements to artificially expand the race window so that it will be easier to detect.\n", "Effectiveness": "Moderate"}, {"Method": "Automated Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary Weakness Analysis - including disassembler + source code weakness analysis", "Effectiveness": "High"}, {"Method": "Dynamic Analysis with Automated Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tWeb Application Scanner\n\t\tWeb Services Scanner\n\t\tDatabase Scanners", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFramework-based Fuzzer\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFuzz Tester\n\t\tMonitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious", "Effectiveness": "High"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tManual Source Code Review (not inspections)\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source", "Effectiveness": "High"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer", "Effectiveness": "High"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "In languages that support it, use synchronization primitives. Only wrap these around critical code to minimize the impact on performance."}, {"Phase": ["Architecture and Design"], "Description": "Use thread-safe capabilities such as the data access abstraction in Spring."}, {"Phase": ["Architecture and Design"], "Description": "\n\nMinimize the usage of shared resources in order to remove as much complexity as possible from the control flow and to reduce the likelihood of unexpected conditions occurring.\n\n\nAdditionally, this will minimize the amount of synchronization necessary and may even help to reduce the likelihood of a denial of service where an attacker may be able to repeatedly trigger a critical section (CWE-400).\n"}, {"Phase": ["Implementation"], "Description": "When using multithreading and operating on shared variables, only use thread-safe functions."}, {"Phase": ["Implementation"], "Description": "Use atomic operations on shared variables. Be wary of innocent-looking constructs such as \"x++\". This may appear atomic at the code layer, but it is actually non-atomic at the instruction layer, since it involves a read, followed by a computation, followed by a write."}, {"Phase": ["Implementation"], "Description": "Use a mutex if available, but be sure to avoid related weaknesses such as CWE-412."}, {"Phase": ["Implementation"], "Description": "Avoid double-checked locking (CWE-609) and other implementation errors that arise when trying to avoid the overhead of synchronization."}, {"Phase": ["Implementation"], "Description": "Disable interrupts or signals over critical parts of the code, but also make sure that the code does not go into a large or infinite loop."}, {"Phase": ["Implementation"], "Description": "Use the volatile type modifier for critical variables to avoid unexpected compiler optimization or reordering. This does not necessarily solve the synchronization problem, but it can help."}, {"MitigationID": "MIT-17", "Phase": ["Architecture and Design", "Operation"], "Strategy": "Environment Hardening", "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This code could be used in an e-commerce application that supports transfers between accounts. It takes the total amount of the transfer, sends it to the new account, and deducts the amount from the original account."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\t$transfer_amount = GetTransferAmount();\n\t$balance = GetBalanceFromDatabase();\n\tif ($transfer_amount < 0) {\n\t\tFatalError(\"Bad Transfer Amount\");\n\t}\n\t$newbalance = $balance - $transfer_amount;\n\tif (($balance - $transfer_amount) < 0) {\n\t\tFatalError(\"Insufficient Funds\");\n\t}\n\tSendNewBalanceToDatabase($newbalance);\n\tNotifyUser(\"Transfer of $transfer_amount succeeded.\");\n\tNotifyUser(\"New balance: $newbalance\");\n```"}, {"BodyText": "A race condition could occur between the calls to GetBalanceFromDatabase() and SendNewBalanceToDatabase()."}, {"BodyText": "Suppose the balance is initially 100.00. An attack could be constructed as follows:"}, {"Nature": "Attack", "Language": "Other", "ExampleCode": "```\n\tIn the following pseudocode, the attacker makes two simultaneous calls of the program, CALLER-1 and CALLER-2. Both callers are for the same user account.\n\tCALLER-1 (the attacker) is associated with PROGRAM-1 (the instance that handles CALLER-1). CALLER-2 is associated with PROGRAM-2.\n\tCALLER-1 makes a transfer request of 80.00.\n\tPROGRAM-1 calls GetBalanceFromDatabase and sets $balance to 100.00\n\tPROGRAM-1 calculates $newbalance as 20.00, then calls SendNewBalanceToDatabase().\n\tDue to high server load, the PROGRAM-1 call to SendNewBalanceToDatabase() encounters a delay.\n\tCALLER-2 makes a transfer request of 1.00.\n\tPROGRAM-2 calls GetBalanceFromDatabase() and sets $balance to 100.00. This happens because the previous PROGRAM-1 request was not processed yet.\n\tPROGRAM-2 determines the new balance as 99.00.\n\tAfter the initial delay, PROGRAM-1 commits its balance to the database, setting it to 20.00.\n\tPROGRAM-2 sends a request to update the database, setting the balance to 99.00\n```"}, {"BodyText": "At this stage, the attacker should have a balance of 19.00 (due to 81.00 worth of transfers), but the balance is 99.00, as recorded in the database."}, {"BodyText": "To prevent this weakness, the programmer has several options, including using a lock to prevent multiple simultaneous requests to the web application, or using a synchronization mechanism that includes all the code between GetBalanceFromDatabase() and SendNewBalanceToDatabase()."}]}, {"ID": "DX-24", "Entries": [{"IntroText": "The following function attempts to acquire a lock in order to perform operations on a shared resource."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid f(pthread_mutex_t *mutex) {\n\t\t\tpthread_mutex_lock(mutex);\n```\n/* access shared resource */* \n\t\t\t\n\t\t\t\n\t\t\tpthread_mutex_unlock(mutex);}"}, {"BodyText": "However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior."}, {"BodyText": "In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n\tint f(pthread_mutex_t *mutex) {\n\t\t\tint result;\n\t\t\tresult = pthread_mutex_lock(mutex);\n\t\t\tif (0 != result)\n\t\t\t\treturn result;\n```\n/* access shared resource */* \n\t\t\t\n\t\t\t\n\t\t\treturn pthread_mutex_unlock(mutex);}"}]}, {"ID": "DX-132", "Entries": [{"IntroText": "Suppose a processor's Memory Management Unit (MMU) has 5 other shadow MMUs to distribute its workload for its various cores. Each MMU has the start address and end address of \"accessible\" memory. Any time this accessible range changes (as per the processor's boot status), the main MMU sends an update message to all the shadow MMUs."}, {"BodyText": "Suppose the interconnect fabric does not prioritize such \"update\" packets over other general traffic packets. This introduces a race condition. If an attacker can flood the target with enough messages so that some of those attack packets reach the target before the new access ranges gets updated, then the attacker can leverage this scenario."}]}], "ObservedExamples": [{"Reference": "CVE-2022-29527", "Description": "Go application for cloud management creates a world-writable sudoers file that allows local attackers to inject sudo rules and escalate privileges to root by winning a race condition.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-29527"}, {"Reference": "CVE-2021-1782", "Description": "Chain: improper locking (CWE-667) leads to race condition (CWE-362), as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-1782"}, {"Reference": "CVE-2021-0920", "Description": "Chain: mobile platform race condition (CWE-362) leading to use-after-free (CWE-416), as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-0920"}, {"Reference": "CVE-2020-6819", "Description": "Chain: race condition (CWE-362) leads to use-after-free (CWE-416), as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-6819"}, {"Reference": "CVE-2019-18827", "Description": "chain: JTAG interface is not disabled (CWE-1191) during ROM code execution, introducing a race condition (CWE-362) to extract encryption keys", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-18827"}, {"Reference": "CVE-2019-1161", "Description": "Chain: race condition (CWE-362) in anti-malware product allows deletion of files by creating a junction (CWE-1386) and using hard links during the time window in which a temporary file is created and deleted.", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-1161"}, {"Reference": "CVE-2015-1743", "Description": "TOCTOU in sandbox process allows installation of untrusted browser add-ons by replacing a file after it has been verified, but before it is executed", "Link": "https://www.cve.org/CVERecord?id=CVE-2015-1743"}, {"Reference": "CVE-2014-8273", "Description": "Chain: chipset has a race condition (CWE-362) between when an interrupt handler detects an attempt to write-enable the BIOS (in violation of the lock bit), and when the handler resets the write-enable bit back to 0, allowing attackers to issue BIOS writes during the timing window [REF-1237].", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-8273"}, {"Reference": "CVE-2008-5044", "Description": "Race condition leading to a crash by calling a hook removal procedure while other activities are occurring at the same time.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5044"}, {"Reference": "CVE-2008-2958", "Description": "chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2958"}, {"Reference": "CVE-2008-1570", "Description": "chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1570"}, {"Reference": "CVE-2008-0058", "Description": "Unsynchronized caching operation enables a race condition that causes messages to be sent to a deallocated object.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0058"}, {"Reference": "CVE-2008-0379", "Description": "Race condition during initialization triggers a buffer overflow.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0379"}, {"Reference": "CVE-2007-6599", "Description": "Daemon crash by quickly performing operations and undoing them, which eventually leads to an operation that does not acquire a lock.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-6599"}, {"Reference": "CVE-2007-6180", "Description": "chain: race condition triggers NULL pointer dereference", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-6180"}, {"Reference": "CVE-2007-5794", "Description": "Race condition in library function could cause data to be sent to the wrong process.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-5794"}, {"Reference": "CVE-2007-3970", "Description": "Race condition in file parser leads to heap corruption.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-3970"}, {"Reference": "CVE-2008-5021", "Description": "chain: race condition allows attacker to access an object while it is still being initialized, causing software to access uninitialized memory.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5021"}, {"Reference": "CVE-2009-4895", "Description": "chain: race condition for an argument value, possibly resulting in NULL dereference", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-4895"}, {"Reference": "CVE-2009-3547", "Description": "chain: race condition might allow resource to be released before operating on it, leading to NULL dereference", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-3547"}, {"Reference": "CVE-2006-5051", "Description": "Chain: Signal handler contains too much functionality (CWE-828), introducing a race condition (CWE-362) that leads to a double free (CWE-415).", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-5051"}], "RelatedAttackPatterns": ["26", "29"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Maintenance", "Note": "The relationship between race conditions and synchronization problems (CWE-662) needs to be further developed. They are not necessarily two perspectives of the same core concept, since synchronization is only one technique for avoiding race conditions, and synchronization can be used for other purposes besides race condition prevention."}, {"Type": "Research Gap", "Note": "Race conditions in web applications are under-studied and probably under-reported. However, in 2008 there has been growing interest in this area."}, {"Type": "Research Gap", "Note": "Much of the focus of race condition research has been in Time-of-check Time-of-use (TOCTOU) variants (CWE-367), but many race conditions are related to synchronization problems that do not necessarily require a time-of-check."}, {"Type": "Research Gap", "Note": "From a classification/taxonomy perspective, the relationships between concurrency and program state need closer investigation and may be useful in organizing related issues."}], "Top25Examples": [{"Reference": "CVE-2021-0955", "Description": "In pf_write_buf of FuseDaemon.cpp, there is possible memory corruption due to a race condition. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-11Android ID: A-192085766"}, {"Reference": "CVE-2021-30982", "Description": "A race condition was addressed with improved locking. This issue is fixed in macOS Monterey 12.1, Security Update 2021-008 Catalina, macOS Big Sur 11.6.2. A remote attacker may be able to cause unexpected application termination or heap corruption."}, {"Reference": "CVE-2021-3609", "Description": ".A flaw was found in the CAN BCM networking protocol in the Linux kernel, where a local attacker can abuse a flaw in the CAN subsystem to corrupt memory, crash the system or escalate privileges. This race condition in net/can/bcm.c in the Linux kernel allows for local privilege escalation to root."}, {"Reference": "CVE-2021-3752", "Description": "A use-after-free flaw was found in the Linux kernel\u2019s Bluetooth subsystem in the way user calls connect to the socket and disconnect simultaneously due to a race condition. This flaw allows a user to crash the system or escalate their privileges. The highest threat from this vulnerability is to confidentiality, integrity, as well as system availability."}, {"Reference": "CVE-2021-39642", "Description": "In synchronous_process_io_entries of lwis_ioctl.c, there is a possible out of bounds write due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-195731663References: N/A"}, {"Reference": "CVE-2021-39712", "Description": "In TBD of TBD, there is a possible user after free vulnerability due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-176918884References: N/A"}, {"Reference": "CVE-2021-39735", "Description": "In gasket_alloc_coherent_memory of gasket_page_table.c, there is a possible memory corruption due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-151455484References: N/A"}, {"Reference": "CVE-2021-4083", "Description": "A read-after-free memory flaw was found in the Linux kernel's garbage collection for Unix domain socket file handlers in the way users call close() and fget() simultaneously and can potentially trigger a race condition. This flaw allows a local user to crash the system or escalate their privileges on the system. This flaw affects Linux kernel versions prior to 5.16-rc4."}, {"Reference": "CVE-2021-4207", "Description": "A flaw was found in the QXL display device emulation in QEMU. A double fetch of guest controlled values `cursor->header.width` and `cursor->header.height` can lead to the allocation of a small cursor object followed by a subsequent heap-based buffer overflow. A malicious privileged guest user could use this flaw to crash the QEMU process on the host or potentially execute arbitrary code within the context of the QEMU process."}, {"Reference": "CVE-2021-45710", "Description": "An issue was discovered in the tokio crate before 1.8.4, and 1.9.x through 1.13.x before 1.13.1, for Rust. In certain circumstances involving a closed oneshot channel, there is a data race and memory corruption."}, {"Reference": "CVE-2022-1462", "Description": "An out-of-bounds read flaw was found in the Linux kernel\u2019s TeleTYpe subsystem. The issue occurs in how a user triggers a race condition using ioctls TIOCSPTLCK and TIOCGPTPEER and TIOCSTI and TCXONC with leakage of memory in the flush_to_ldisc function. This flaw allows a local user to crash the system or read unauthorized random data from memory."}, {"Reference": "CVE-2022-20032", "Description": "In vow driver, there is a possible memory corruption due to a race condition. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05852822; Issue ID: ALPS05852822."}, {"Reference": "CVE-2022-20077", "Description": "In vow, there is a possible memory corruption due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is no needed for exploitation. Patch ID: ALPS05837742; Issue ID: ALPS05852812."}, {"Reference": "CVE-2022-20078", "Description": "In vow, there is a possible memory corruption due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is no needed for exploitation. Patch ID: ALPS05852819; Issue ID: ALPS05852819."}, {"Reference": "CVE-2022-20080", "Description": "In SUB2AF, there is a possible memory corruption due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is no needed for exploitation. Patch ID: ALPS05881290; Issue ID: ALPS05881290."}, {"Reference": "CVE-2022-20082", "Description": "In GPU, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07044730; Issue ID: ALPS07044730."}, {"Reference": "CVE-2022-20154", "Description": "In lock_sock_nested of sock.c, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-174846563References: Upstream kernel"}, {"Reference": "CVE-2022-20155", "Description": "In ipu_core_jqs_msg_transport_kernel_write_sync of ipu-core-jqs-msg-transport.c, there is a possible use-after-free due to a race condition. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-176754369References: N/A"}, {"Reference": "CVE-2022-20256", "Description": "In the Audio HAL, there is a possible out of bounds write due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-222572821"}, {"Reference": "CVE-2022-20373", "Description": "In st21nfc_loc_set_polaritymode of fc/st21nfc.c, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-208269510References: N/A"}, {"Reference": "CVE-2022-20567", "Description": "In pppol2tp_create of l2tp_ppp.c, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-186777253References: Upstream kernel"}, {"Reference": "CVE-2022-21771", "Description": "In GED driver, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06641585; Issue ID: ALPS06641585."}, {"Reference": "CVE-2022-21773", "Description": "In TEEI driver, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06641388; Issue ID: ALPS06641388."}, {"Reference": "CVE-2022-21774", "Description": "In TEEI driver, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06641447; Issue ID: ALPS06641447."}, {"Reference": "CVE-2022-21776", "Description": "In MDP, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06545450; Issue ID: ALPS06545450."}, {"Reference": "CVE-2022-21789", "Description": "In audio ipi, there is a possible memory corruption due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06478101; Issue ID: ALPS06478101."}, {"Reference": "CVE-2022-22057", "Description": "Use after free in graphics fence due to a race condition while closing fence file descriptor and destroy graphics timeline simultaneously in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Wearables"}, {"Reference": "CVE-2022-22208", "Description": "A Use After Free vulnerability in the Routing Protocol Daemon (rdp) of Juniper Networks Junos OS and Junos OS Evolved allows an unauthenticated network-based attacker to cause Denial of Service (DoS). When a BGP session flap happens, a Use After Free of a memory location that was assigned to another object can occur, which will lead to an rpd crash. This is a race condition that is outside of the attacker's control and cannot be deterministically exploited. Continued flapping of BGP sessions can create a sustained Denial of Service (DoS) condition. This issue affects Juniper Networks Junos OS: All versions prior to 18.4R2-S9, 18.4R3-S11; 19.1 versions prior to 19.1R3-S8; 19.2 version 19.2R1 and later versions; 19.3 versions prior to 19.3R3-S5; 19.4 versions prior to 19.4R2-S6, 19.4R3-S6; 20.1 version 20.1R1 and later versions; 20.2 versions prior to 20.2R3-S3; 20.3 versions prior to 20.3R3-S2; 20.4 versions prior to 20.4R3-S1; 21.1 versions prior to 21.1R3-S3; 21.2 versions prior to 21.2R2-S1, 21.2R3. Juniper Networks Junos OS Evolved All versions prior to 20.4R3-S4-EVO; 21.1-EVO versions prior to 21.1R3-S2-EVO; 21.2-EVO versions prior to 21.2R3-EVO; 21.3-EVO versions prior to 21.3R2-EVO."}, {"Reference": "CVE-2022-22737", "Description": "Constructing audio sinks could have lead to a race condition when playing audio files and closing windows. This could have lead to a use-after-free causing a potentially exploitable crash. This vulnerability affects Firefox ESR < 91.5, Firefox < 96, and Thunderbird < 91.5."}, {"Reference": "CVE-2022-24949", "Description": "A privilege escalation to root exists in Eternal Terminal prior to version 6.2.0. This is due to the combination of a race condition, buffer overflow, and logic bug all in PipeSocketHandler::listen()."}, {"Reference": "CVE-2022-2623", "Description": "Use after free in Offline in Google Chrome on Android prior to 104.0.5112.79 allowed a remote attacker who convinced a user to engage in specific user interactions to potentially exploit heap corruption via specific UI interactions."}, {"Reference": "CVE-2022-26428", "Description": "In video codec, there is a possible memory corruption due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06521260; Issue ID: ALPS06521260."}, {"Reference": "CVE-2022-26450", "Description": "In apusys, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07177801; Issue ID: ALPS07177801."}, {"Reference": "CVE-2022-28796", "Description": "jbd2_journal_wait_updates in fs/jbd2/transaction.c in the Linux kernel before 5.17.1 has a use-after-free caused by a transaction_t race condition."}, {"Reference": "CVE-2022-29582", "Description": "In the Linux kernel before 5.17.3, fs/io_uring.c has a use-after-free due to a race condition in io_uring timeouts. This can be triggered by a local user who has no access to any user namespace; however, the race condition perhaps can only be exploited infrequently."}, {"Reference": "CVE-2022-2961", "Description": "A use-after-free flaw was found in the Linux kernel\u2019s PLP Rose functionality in the way a user triggers a race condition by calling bind while simultaneously triggering the rose_bind() function. This flaw allows a local user to crash or potentially escalate their privileges on the system."}, {"Reference": "CVE-2022-3028", "Description": "A race condition was found in the Linux kernel's IP framework for transforming packets (XFRM subsystem) when multiple calls to xfrm_probe_algs occurred simultaneously. This flaw could allow a local attacker to potentially trigger an out-of-bounds write or leak kernel heap memory by performing an out-of-bounds read and copying it into a socket."}, {"Reference": "CVE-2022-3042", "Description": "Use after free in PhoneHub in Google Chrome on Chrome OS prior to 105.0.5195.52 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-31748", "Description": "Mozilla developers Gabriele Svelto, Timothy Nikkel, Randell Jesup, Jon Coppeard, and the Mozilla Fuzzing Team reported memory safety bugs present in Firefox 100. Some of these bugs showed evidence of memory corruption and we presume that with enough effort some of these could have been exploited to run arbitrary code. This vulnerability affects Firefox < 101."}, {"Reference": "CVE-2022-3307", "Description": "Use after free in media in Google Chrome prior to 106.0.5249.62 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-37035", "Description": "An issue was discovered in bgpd in FRRouting (FRR) 8.3. In bgp_notify_send_with_data() and bgp_process_packet() in bgp_packet.c, there is a possible use-after-free due to a race condition. This could lead to Remote Code Execution or Information Disclosure by sending crafted BGP packets. User interaction is not needed for exploitation."}, {"Reference": "CVE-2022-39134", "Description": "In audio driver, there is a use after free due to a race condition. This could lead to local denial of service in kernel."}, {"Reference": "CVE-2022-40307", "Description": "An issue was discovered in the Linux kernel through 5.19.8. drivers/firmware/efi/capsule-loader.c has a race condition with a resultant use-after-free."}, {"Reference": "CVE-2022-44032", "Description": "An issue was discovered in the Linux kernel through 6.0.6. drivers/char/pcmcia/cm4000_cs.c has a race condition and resultant use-after-free if a physically proximate attacker removes a PCMCIA device while calling open(), aka a race condition between cmm_open() and cm4000_detach()."}, {"Reference": "CVE-2022-44033", "Description": "An issue was discovered in the Linux kernel through 6.0.6. drivers/char/pcmcia/cm4040_cs.c has a race condition and resultant use-after-free if a physically proximate attacker removes a PCMCIA device while calling open(), aka a race condition between cm4040_open() and reader_detach()."}, {"Reference": "CVE-2022-44034", "Description": "An issue was discovered in the Linux kernel through 6.0.6. drivers/char/pcmcia/scr24x_cs.c has a race condition and resultant use-after-free if a physically proximate attacker removes a PCMCIA device while calling open(), aka a race condition between scr24x_open() and scr24x_remove()."}, {"Reference": "CVE-2022-45869", "Description": "A race condition in the x86 KVM subsystem in the Linux kernel through 6.1-rc6 allows guest OS users to cause a denial of service (host OS crash or host OS memory corruption) when nested virtualisation and the TDP MMU are enabled."}, {"Reference": "CVE-2022-32612", "Description": "In vcu, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07203500; Issue ID: ALPS07203500."}, {"Reference": "CVE-2022-32613", "Description": "In vcu, there is a possible memory corruption due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07206340; Issue ID: ALPS07206340."}, {"Reference": "CVE-2021-35095", "Description": "Improper serialization of message queue client registration can lead to race condition allowing multiple gunyah message clients to register with same label in Snapdragon Connectivity, Snapdragon Mobile"}, {"Reference": "CVE-2022-20724", "Description": "Multiple vulnerabilities in the Cisco IOx application hosting environment on multiple Cisco platforms could allow an attacker to inject arbitrary commands into the underlying host operating system, execute arbitrary code on the underlying host operating system, install applications without being authenticated, or conduct a cross-site scripting (XSS) attack against a user of the affected software. For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2022-27626", "Description": "A vulnerability regarding concurrent execution using shared resource with improper synchronization ('Race Condition') is found in the session processing functionality of Out-of-Band (OOB) Management. This allows remote attackers to execute arbitrary commands via unspecified vectors. The following models with Synology DiskStation Manager (DSM) versions before 7.1.1-42962-2 may be affected: DS3622xs+, FS3410, and HD6500."}, {"Reference": "CVE-2022-32645", "Description": "In vow, there is a possible information disclosure due to a race condition. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07494477; Issue ID: ALPS07494477."}, {"Reference": "CVE-2022-23036", "Description": "Linux PV device frontends vulnerable to attacks by backends T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Several Linux PV device frontends are using the grant table interfaces for removing access rights of the backends in ways being subject to race conditions, resulting in potential data leaks, data corruption by malicious backends, and denial of service triggered by malicious backends: blkfront, netfront, scsifront and the gntalloc driver are testing whether a grant reference is still in use. If this is not the case, they assume that a following removal of the granted access will always succeed, which is not true in case the backend has mapped the granted page between those two operations. As a result the backend can keep access to the memory page of the guest no matter how the page will be used after the frontend I/O has finished. The xenbus driver has a similar problem, as it doesn't check the success of removing the granted access of a shared ring buffer. blkfront: CVE-2022-23036 netfront: CVE-2022-23037 scsifront: CVE-2022-23038 gntalloc: CVE-2022-23039 xenbus: CVE-2022-23040 blkfront, netfront, scsifront, usbfront, dmabuf, xenbus, 9p, kbdfront, and pvcalls are using a functionality to delay freeing a grant reference until it is no longer in use, but the freeing of the related data page is not synchronized with dropping the granted access. As a result the backend can keep access to the memory page even after it has been freed and then re-used for a different purpose. CVE-2022-23041 netfront will fail a BUG_ON() assertion if it fails to revoke access in the rx path. This will result in a Denial of Service (DoS) situation of the guest which can be triggered by the backend. CVE-2022-23042"}, {"Reference": "CVE-2022-23037", "Description": "Linux PV device frontends vulnerable to attacks by backends T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Several Linux PV device frontends are using the grant table interfaces for removing access rights of the backends in ways being subject to race conditions, resulting in potential data leaks, data corruption by malicious backends, and denial of service triggered by malicious backends: blkfront, netfront, scsifront and the gntalloc driver are testing whether a grant reference is still in use. If this is not the case, they assume that a following removal of the granted access will always succeed, which is not true in case the backend has mapped the granted page between those two operations. As a result the backend can keep access to the memory page of the guest no matter how the page will be used after the frontend I/O has finished. The xenbus driver has a similar problem, as it doesn't check the success of removing the granted access of a shared ring buffer. blkfront: CVE-2022-23036 netfront: CVE-2022-23037 scsifront: CVE-2022-23038 gntalloc: CVE-2022-23039 xenbus: CVE-2022-23040 blkfront, netfront, scsifront, usbfront, dmabuf, xenbus, 9p, kbdfront, and pvcalls are using a functionality to delay freeing a grant reference until it is no longer in use, but the freeing of the related data page is not synchronized with dropping the granted access. As a result the backend can keep access to the memory page even after it has been freed and then re-used for a different purpose. CVE-2022-23041 netfront will fail a BUG_ON() assertion if it fails to revoke access in the rx path. This will result in a Denial of Service (DoS) situation of the guest which can be triggered by the backend. CVE-2022-23042"}, {"Reference": "CVE-2022-23038", "Description": "Linux PV device frontends vulnerable to attacks by backends T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Several Linux PV device frontends are using the grant table interfaces for removing access rights of the backends in ways being subject to race conditions, resulting in potential data leaks, data corruption by malicious backends, and denial of service triggered by malicious backends: blkfront, netfront, scsifront and the gntalloc driver are testing whether a grant reference is still in use. If this is not the case, they assume that a following removal of the granted access will always succeed, which is not true in case the backend has mapped the granted page between those two operations. As a result the backend can keep access to the memory page of the guest no matter how the page will be used after the frontend I/O has finished. The xenbus driver has a similar problem, as it doesn't check the success of removing the granted access of a shared ring buffer. blkfront: CVE-2022-23036 netfront: CVE-2022-23037 scsifront: CVE-2022-23038 gntalloc: CVE-2022-23039 xenbus: CVE-2022-23040 blkfront, netfront, scsifront, usbfront, dmabuf, xenbus, 9p, kbdfront, and pvcalls are using a functionality to delay freeing a grant reference until it is no longer in use, but the freeing of the related data page is not synchronized with dropping the granted access. As a result the backend can keep access to the memory page even after it has been freed and then re-used for a different purpose. CVE-2022-23041 netfront will fail a BUG_ON() assertion if it fails to revoke access in the rx path. This will result in a Denial of Service (DoS) situation of the guest which can be triggered by the backend. CVE-2022-23042"}, {"Reference": "CVE-2022-23039", "Description": "Linux PV device frontends vulnerable to attacks by backends T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Several Linux PV device frontends are using the grant table interfaces for removing access rights of the backends in ways being subject to race conditions, resulting in potential data leaks, data corruption by malicious backends, and denial of service triggered by malicious backends: blkfront, netfront, scsifront and the gntalloc driver are testing whether a grant reference is still in use. If this is not the case, they assume that a following removal of the granted access will always succeed, which is not true in case the backend has mapped the granted page between those two operations. As a result the backend can keep access to the memory page of the guest no matter how the page will be used after the frontend I/O has finished. The xenbus driver has a similar problem, as it doesn't check the success of removing the granted access of a shared ring buffer. blkfront: CVE-2022-23036 netfront: CVE-2022-23037 scsifront: CVE-2022-23038 gntalloc: CVE-2022-23039 xenbus: CVE-2022-23040 blkfront, netfront, scsifront, usbfront, dmabuf, xenbus, 9p, kbdfront, and pvcalls are using a functionality to delay freeing a grant reference until it is no longer in use, but the freeing of the related data page is not synchronized with dropping the granted access. As a result the backend can keep access to the memory page even after it has been freed and then re-used for a different purpose. CVE-2022-23041 netfront will fail a BUG_ON() assertion if it fails to revoke access in the rx path. This will result in a Denial of Service (DoS) situation of the guest which can be triggered by the backend. CVE-2022-23042"}, {"Reference": "CVE-2022-23040", "Description": "Linux PV device frontends vulnerable to attacks by backends T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Several Linux PV device frontends are using the grant table interfaces for removing access rights of the backends in ways being subject to race conditions, resulting in potential data leaks, data corruption by malicious backends, and denial of service triggered by malicious backends: blkfront, netfront, scsifront and the gntalloc driver are testing whether a grant reference is still in use. If this is not the case, they assume that a following removal of the granted access will always succeed, which is not true in case the backend has mapped the granted page between those two operations. As a result the backend can keep access to the memory page of the guest no matter how the page will be used after the frontend I/O has finished. The xenbus driver has a similar problem, as it doesn't check the success of removing the granted access of a shared ring buffer. blkfront: CVE-2022-23036 netfront: CVE-2022-23037 scsifront: CVE-2022-23038 gntalloc: CVE-2022-23039 xenbus: CVE-2022-23040 blkfront, netfront, scsifront, usbfront, dmabuf, xenbus, 9p, kbdfront, and pvcalls are using a functionality to delay freeing a grant reference until it is no longer in use, but the freeing of the related data page is not synchronized with dropping the granted access. As a result the backend can keep access to the memory page even after it has been freed and then re-used for a different purpose. CVE-2022-23041 netfront will fail a BUG_ON() assertion if it fails to revoke access in the rx path. This will result in a Denial of Service (DoS) situation of the guest which can be triggered by the backend. CVE-2022-23042"}, {"Reference": "CVE-2022-23041", "Description": "Linux PV device frontends vulnerable to attacks by backends T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Several Linux PV device frontends are using the grant table interfaces for removing access rights of the backends in ways being subject to race conditions, resulting in potential data leaks, data corruption by malicious backends, and denial of service triggered by malicious backends: blkfront, netfront, scsifront and the gntalloc driver are testing whether a grant reference is still in use. If this is not the case, they assume that a following removal of the granted access will always succeed, which is not true in case the backend has mapped the granted page between those two operations. As a result the backend can keep access to the memory page of the guest no matter how the page will be used after the frontend I/O has finished. The xenbus driver has a similar problem, as it doesn't check the success of removing the granted access of a shared ring buffer. blkfront: CVE-2022-23036 netfront: CVE-2022-23037 scsifront: CVE-2022-23038 gntalloc: CVE-2022-23039 xenbus: CVE-2022-23040 blkfront, netfront, scsifront, usbfront, dmabuf, xenbus, 9p, kbdfront, and pvcalls are using a functionality to delay freeing a grant reference until it is no longer in use, but the freeing of the related data page is not synchronized with dropping the granted access. As a result the backend can keep access to the memory page even after it has been freed and then re-used for a different purpose. CVE-2022-23041 netfront will fail a BUG_ON() assertion if it fails to revoke access in the rx path. This will result in a Denial of Service (DoS) situation of the guest which can be triggered by the backend. CVE-2022-23042"}, {"Reference": "CVE-2022-23042", "Description": "Linux PV device frontends vulnerable to attacks by backends T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Several Linux PV device frontends are using the grant table interfaces for removing access rights of the backends in ways being subject to race conditions, resulting in potential data leaks, data corruption by malicious backends, and denial of service triggered by malicious backends: blkfront, netfront, scsifront and the gntalloc driver are testing whether a grant reference is still in use. If this is not the case, they assume that a following removal of the granted access will always succeed, which is not true in case the backend has mapped the granted page between those two operations. As a result the backend can keep access to the memory page of the guest no matter how the page will be used after the frontend I/O has finished. The xenbus driver has a similar problem, as it doesn't check the success of removing the granted access of a shared ring buffer. blkfront: CVE-2022-23036 netfront: CVE-2022-23037 scsifront: CVE-2022-23038 gntalloc: CVE-2022-23039 xenbus: CVE-2022-23040 blkfront, netfront, scsifront, usbfront, dmabuf, xenbus, 9p, kbdfront, and pvcalls are using a functionality to delay freeing a grant reference until it is no longer in use, but the freeing of the related data page is not synchronized with dropping the granted access. As a result the backend can keep access to the memory page even after it has been freed and then re-used for a different purpose. CVE-2022-23041 netfront will fail a BUG_ON() assertion if it fails to revoke access in the rx path. This will result in a Denial of Service (DoS) situation of the guest which can be triggered by the backend. CVE-2022-23042"}, {"Reference": "CVE-2021-0920", "Description": "In unix_scm_to_skb of af_unix.c, there is a possible use after free bug due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-196926917References: Upstream kernel"}, {"Reference": "CVE-2021-1782", "Description": "A race condition was addressed with improved locking. This issue is fixed in macOS Big Sur 11.2, Security Update 2021-001 Catalina, Security Update 2021-001 Mojave, watchOS 7.3, tvOS 14.4, iOS 14.4 and iPadOS 14.4. A malicious application may be able to elevate privileges. Apple is aware of a report that this issue may have been actively exploited.."}, {"Reference": "CVE-2021-21166", "Description": "Data race in audio in Google Chrome prior to 89.0.4389.72 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-22600", "Description": "A double free bug in packet_set_ring() in net/packet/af_packet.c can be exploited by a local user through crafted syscalls to escalate privileges or deny service. We recommend upgrading kernel past the effected versions or rebuilding past ec6af094ea28f0f2dda1a6a33b14cd57e36a9755"}, {"Reference": "CVE-2022-26904", "Description": "Windows User Profile Service Elevation of Privilege Vulnerability"}, {"Reference": "CVE-2022-25090", "Description": "Printix Secure Cloud Print Management through 1.3.1106.0 creates a temporary temp.ini file in a directory with insecure permissions, leading to privilege escalation because of a race condition."}, {"Reference": "CVE-2022-29527", "Description": "Amazon AWS amazon-ssm-agent before 3.1.1208.0 creates a world-writable sudoers file, which allows local attackers to inject Sudo rules and escalate privileges to root. This occurs in certain situations involving a race condition."}, {"Reference": "CVE-2022-38170", "Description": "In Apache Airflow prior to 2.3.4, an insecure umask was configured for numerous Airflow components when running with the `--daemon` flag which could result in a race condition giving world-writable files in the Airflow home directory and allowing local users to expose arbitrary file contents via the webserver."}, {"Reference": "CVE-2022-42951", "Description": "An issue was discovered in Couchbase Server 6.5.x and 6.6.x before 6.6.6, 7.x before 7.0.5, and 7.1.x before 7.1.2. During the start-up of a Couchbase Server node, there is a small window of time (before the cluster management authentication has started) where an attacker can connect to the cluster manager using default credentials."}, {"Reference": "CVE-2022-0207", "Description": "A race condition was found in vdsm. Functionality to obfuscate sensitive values in log files that may lead to values being stored in clear text."}, {"Reference": "CVE-2022-21772", "Description": "In TEEI driver, there is a possible type confusion due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06493842; Issue ID: ALPS06493842."}, {"Reference": "CVE-2022-22220", "Description": "A Time-of-check Time-of-use (TOCTOU) Race Condition vulnerability in Routing Protocol Daemon (rpd) of Juniper Networks Junos OS, Junos OS Evolved allows a network-based unauthenticated attacker to cause a Denial of Service (DoS). When a BGP flow route with redirect IP extended community is received, and the reachability to the next-hop of the corresponding redirect IP is flapping, the rpd process might crash. Whether the crash occurs depends on the timing of the internally processing of these two events and is outside the attackers control. Please note that this issue also affects Route-Reflectors unless 'routing-options flow firewall-install-disable' is configured. This issue affects: Juniper Networks Junos OS: 18.4 versions prior to 18.4R2-S10, 18.4R3-S10; 19.1 versions prior to 19.1R3-S7; 19.2 versions prior to 19.2R1-S8, 19.2R3-S4; 19.4 versions prior to 19.4R3-S8; 20.2 versions prior to 20.2R3-S3; 20.3 versions prior to 20.3R3-S2; 20.4 versions prior to 20.4R3; 21.1 versions prior to 21.1R2. Juniper Networks Junos OS Evolved: All versions prior to 20.4R2-EVO; 21.1-EVO versions prior to 21.1R2-EVO. This issue does not affect Juniper Networks Junos OS versions prior to 18.4R1."}, {"Reference": "CVE-2022-22225", "Description": "A Time-of-check Time-of-use (TOCTOU) Race Condition vulnerability in the Routing Protocol Daemon (rpd) of Juniper Networks Junos OS and Junos OS Evolved allows an unauthenticated attacker with an established BGP session to cause a Denial of Service (DoS). In a BGP multipath scenario, when one of the contributing routes is flapping often and rapidly, rpd may crash. As this crash depends on whether a route is a contributing route, and on the internal timing of the events triggered by the flap this vulnerability is outside the direct control of a potential attacker. This issue affects: Juniper Networks Junos OS 19.2 versions prior to 19.2R3-S6; 20.2 versions prior to 20.2R3-S4; 20.3 versions prior to 20.3R3-S3; 20.4 versions prior to 20.4R3-S4; 21.1 versions prior to 21.1R3; 21.2 versions prior to 21.2R2; 21.3 versions prior to 21.3R2. Juniper Networks Junos OS Evolved All versions prior to 20.4R3-S4-EVO; 21.1-EVO version 21.1R1-EVO and later versions; 21.2-EVO versions prior to 21.2R2-EVO; 21.3-EVO versions prior to 21.3R2-EVO. This issue does not affect: Juniper Networks Junos OS versions 19.2 versions prior to 19.2R2, 19.3R1 and above prior to 20.2R1. Juniper Networks Junos OS Evolved versions prior to 20.2R1-EVO."}, {"Reference": "CVE-2022-32844", "Description": "A race condition was addressed with improved state handling. This issue is fixed in tvOS 15.6, watchOS 8.7, iOS 15.6 and iPadOS 15.6. An app with arbitrary kernel read and write capability may be able to bypass Pointer Authentication."}, {"Reference": "CVE-2021-24000", "Description": "A race condition with requestPointerLock() and setTimeout() could have resulted in a user interacting with one tab when they believed they were on a separate tab. In conjunction with certain elements (such as &lt;input type=\"file\"&gt;) this could have led to an attack where a user was confused about the origin of the webpage and potentially disclosed information they did not intend to. This vulnerability affects Firefox < 88."}, {"Reference": "CVE-2022-2160", "Description": "Insufficient policy enforcement in DevTools in Google Chrome on Windows prior to 103.0.5060.53 allowed an attacker who convinced a user to install a malicious extension to obtain potentially sensitive information from a user's local files via a crafted HTML page."}, {"Reference": "CVE-2022-21881", "Description": "Windows Kernel Elevation of Privilege Vulnerability"}, {"Reference": "CVE-2022-21896", "Description": "Windows DWM Core Library Elevation of Privilege Vulnerability"}, {"Reference": "CVE-2022-24986", "Description": "KDE KCron through 21.12.2 uses a temporary file in /tmp when saving, but reuses the filename during an editing session. Thus, someone watching it be created the first time could potentially intercept the file the following time, enabling that person to run unauthorized commands."}, {"Reference": "CVE-2021-31797", "Description": "The user identification mechanism used by CyberArk Credential Provider prior to 12.1 is susceptible to a local host race condition, leading to password disclosure."}, {"Reference": "CVE-2022-3564", "Description": "A vulnerability classified as critical was found in Linux Kernel. Affected by this vulnerability is the function l2cap_reassemble_sdu of the file net/bluetooth/l2cap_core.c of the component Bluetooth. The manipulation leads to use after free. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-211087."}, {"Reference": "CVE-2022-3635", "Description": "A vulnerability, which was classified as critical, has been found in Linux Kernel. Affected by this issue is the function tst_timer of the file drivers/atm/idt77252.c of the component IPsec. The manipulation leads to use after free. It is recommended to apply a patch to fix this issue. VDB-211934 is the identifier assigned to this vulnerability."}]}
{"ID": "363", "Name": "Race Condition Enabling Link Following", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the product to access the wrong file.", "ExtendedDescription": "While developers might expect that there is a very narrow time window between the time of check and time of use, there is still a race condition. An attacker could cause the product to slow down (e.g. with memory consumption), causing the time window to become larger. Alternately, in some situations, the attacker could win the race by performing a large number of attacks.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "367", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "59", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Modify Files or Directories"]}], "DemonstrativeExamples": [{"ID": "DX-49", "Entries": [{"IntroText": "This code prints the contents of a file if a user has permission."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\tfunction readFile($filename){\n\t\t\t$user = getCurrentUser();\n```\n//resolve file if its a symbolic link* \n\t\t\tif(is_link($filename)){\n\t\t\t```\n\t\t\t\t$filename = readlink($filename);\n\t\t\t}\n\t\t\tif(fileowner($filename) == $user){\n\t\t\t\techo file_get_contents($realFile);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse{\n\t\t\t\techo 'Access denied';\n\t\t\t\treturn false;\n\t\t\t}\n\t}\n```"}, {"BodyText": "This code attempts to resolve symbolic links before checking the file and printing its contents. However, an attacker may be able to change the file from a real file to a symbolic link between the calls to is_link() and file_get_contents(), allowing the reading of arbitrary files. Note that this code fails to log the attempted access (CWE-778)."}]}], "RelatedAttackPatterns": ["26"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This is already covered by the \"Link Following\" weakness (CWE-59). It is included here because so many people associate race conditions with link problems; however, not all link following issues involve race conditions."}]}
{"ID": "364", "Name": "Signal Handler Race Condition", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses a signal handler that introduces a race condition.", "ExtendedDescription": "\n\nRace conditions frequently occur in signal handlers, since signal handlers support asynchronous actions. These race conditions have a variety of root causes and symptoms. Attackers may be able to exploit a signal handler race condition to cause the product state to be corrupted, possibly leading to a denial of service or even code execution.\n\n\nThese issues occur when non-reentrant functions, or state-sensitive actions occur in the signal handler, where they may be called at any time. These behaviors can violate assumptions being made by the \"regular\" code that is interrupted, or by other signal handlers that may also be invoked. If these functions are called at an inopportune moment - such as while a non-reentrant function is already running - memory corruption could occur that may be exploitable for code execution. Another signal race condition commonly found occurs when free is called within a signal handler, resulting in a double free and therefore a write-what-where condition. Even if a given pointer is set to NULL after it has been freed, a race condition still exists between the time the memory was freed and the pointer was set to NULL. This is especially problematic if the same signal handler has been set for more than one signal -- since it means that the signal handler itself may be reentered.\n\n\nThere are several known behaviors related to signal handlers that have received the label of \"signal handler race condition\":\n\n\n  - Shared state (e.g. global data or static variables) that are accessible to both a signal handler and \"regular\" code\n\n  - Shared state between a signal handler and other signal handlers\n\n  - Use of non-reentrant functionality within a signal handler - which generally implies that shared state is being used. For example, malloc() and free() are non-reentrant because they may use global or static data structures for managing memory, and they are indirectly used by innocent-seeming functions such as syslog(); these functions could be exploited for memory corruption and, possibly, code execution.\n\n  - Association of the same signal handler function with multiple signals - which might imply shared state, since the same code and resources are accessed. For example, this can be a source of double-free and use-after-free weaknesses.\n\n  - Use of setjmp and longjmp, or other mechanisms that prevent a signal handler from returning control back to the original functionality\n\n  - While not technically a race condition, some signal handlers are designed to be called at most once, and being called more than once can introduce security problems, even when there are not any concurrent calls to the signal handler. This can be a source of double-free and use-after-free weaknesses.\n\nSignal handler vulnerabilities are often classified based on the absence of a specific protection mechanism, although this style of classification is discouraged in CWE because programmers often have a choice of several different mechanisms for addressing the weakness. Such protection mechanisms may preserve exclusivity of access to the shared resource, and behavioral atomicity for the relevant code:\n\n  - Avoiding shared state\n\n  - Using synchronization in the signal handler\n\n  - Using synchronization in the regular code\n\n  - Disabling or masking other signals, which provides atomicity (which effectively ensures exclusivity)\n\n", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "362", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "415", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "416", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "123", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Sometimes"}, {"Type": "Language", "Name": "C++", "Prevalence": "Sometimes"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Modify Application Data", "Modify Memory", "DoS: Crash, Exit, or Restart", "Execute Unauthorized Code or Commands"], "Note": "It may be possible to cause data corruption and possibly execute arbitrary code by modifying global variables or data structures at unexpected times, violating the assumptions of code that uses this global data."}, {"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "If a signal handler interrupts code that is executing with privileges, it may be possible that the signal handler will also be executed with elevated privileges, possibly making subsequent exploits more severe."}], "PotentialMitigations": [{"MitigationID": "MIT-3", "Phase": ["Requirements"], "Strategy": "Language Selection", "Description": "Use a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid."}, {"Phase": ["Architecture and Design"], "Description": "Design signal handlers to only set flags, rather than perform complex functionality. These flags can then be checked and acted upon within the main program loop."}, {"Phase": ["Implementation"], "Description": "Only use reentrant functions within signal handlers. Also, use validation to ensure that state is consistent while performing asynchronous actions that affect the state of execution."}], "DemonstrativeExamples": [{"ID": "DX-26", "Entries": [{"IntroText": "This code registers the same signal handler function with two different signals (CWE-831). If those signals are sent to the process, the handler creates a log message (specified in the first argument to the program) and exits."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar *logMessage;\n\tvoid handler (int sigNum) {\n\t\t\tsyslog(LOG_NOTICE, \"%s\\n\", logMessage);\n\t\t\tfree(logMessage);\n```\n/* artificially increase the size of the timing window to make demonstration of this weakness easier. */* \n\t\t\t\n\t\t\tsleep(10);\n\t\t\texit(0);}\n\t\n\tint main (int argc, char* argv[]) {\n\t```\n\t\t\tlogMessage = strdup(argv[1]);\n```\n/* Register signal handlers. */* \n\t\t\t\n\t\t\tsignal(SIGHUP, handler);\n\t\t\tsignal(SIGTERM, handler);\n\t\t\t\n\t\t\t */* artificially increase the size of the timing window to make demonstration of this weakness easier. */* \n\t\t\t\n\t\t\tsleep(10);}"}, {"BodyText": "The handler function uses global state (globalVar and logMessage), and it can be called by both the SIGHUP and SIGTERM signals. An attack scenario might follow these lines:"}, {"BodyText": "- The program begins execution, initializes logMessage, and registers the signal handlers for SIGHUP and SIGTERM.\n\n  - The program begins its \"normal\" functionality, which is simplified as sleep(), but could be any functionality that consumes some time.\n\n  - The attacker sends SIGHUP, which invokes handler (call this \"SIGHUP-handler\").\n\n  - SIGHUP-handler begins to execute, calling syslog().\n\n  - syslog() calls malloc(), which is non-reentrant. malloc() begins to modify metadata to manage the heap.\n\n  - The attacker then sends SIGTERM.\n\n  - SIGHUP-handler is interrupted, but syslog's malloc call is still executing and has not finished modifying its metadata.\n\n  - The SIGTERM handler is invoked.\n\n  - SIGTERM-handler records the log message using syslog(), then frees the logMessage variable."}, {"BodyText": "At this point, the state of the heap is uncertain, because malloc is still modifying the metadata for the heap; the metadata might be in an inconsistent state. The SIGTERM-handler call to free() is assuming that the metadata is inconsistent, possibly causing it to write data to the wrong location while managing the heap. The result is memory corruption, which could lead to a crash or even code execution, depending on the circumstances under which the code is running."}, {"BodyText": "Note that this is an adaptation of a classic example as originally presented by Michal Zalewski [REF-360]; the original example was shown to be exploitable for code execution."}, {"BodyText": "Also note that the strdup(argv[1]) call contains a potential buffer over-read (CWE-126) if the program is called without any arguments, because argc would be 0, and argv[1] would point outside the bounds of the array."}]}, {"ID": "DX-48", "Entries": [{"IntroText": "The following code registers a signal handler with multiple signals in order to log when a specific event occurs and to free associated memory before exiting."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t#include <signal.h>\n\t#include <syslog.h>\n\t#include <string.h>\n\t#include <stdlib.h>\n\tvoid *global1, *global2;\n\tchar *what;\n\tvoid sh (int dummy) {\n\t\t\tsyslog(LOG_NOTICE,\"%s\\n\",what);\n\t\t\tfree(global2);\n\t\t\tfree(global1);\n```\n/* Sleep statements added to expand timing window for race condition */* \n\t\t\t\n\t\t\tsleep(10);\n\t\t\texit(0);}\n\t\n\tint main (int argc,char* argv[]) {\n\t```\n\t\t\twhat=argv[1];\n\t\t\tglobal1=strdup(argv[2]);\n\t\t\tglobal2=malloc(340);\n\t\t\tsignal(SIGHUP,sh);\n\t\t\tsignal(SIGTERM,sh);\n```\n/* Sleep statements added to expand timing window for race condition */* \n\t\t\t\n\t\t\tsleep(10);\n\t\t\texit(0);}"}, {"BodyText": "However, the following sequence of events may result in a double-free (CWE-415):"}, {"BodyText": "1. a SIGHUP is delivered to the process\n\n  1. sh() is invoked to process the SIGHUP\n\n  1. This first invocation of sh() reaches the point where global1 is freed\n\n  1. At this point, a SIGTERM is sent to the process\n\n  1. the second invocation of sh() might do another free of global1\n\n  1. this results in a double-free (CWE-415)"}, {"BodyText": "This is just one possible exploitation of the above code. As another example, the syslog call may use malloc calls which are not async-signal safe. This could cause corruption of the heap management structures. For more details, consult the example within \"Delivering Signals for Fun and Profit\" [REF-360]."}]}], "ObservedExamples": [{"Reference": "CVE-1999-0035", "Description": "Signal handler does not disable other signal handlers, allowing it to be interrupted, causing other functionality to access files/etc. with raised privileges", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0035"}, {"Reference": "CVE-2001-0905", "Description": "Attacker can send a signal while another signal handler is already running, leading to crash or execution with root privileges", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0905"}, {"Reference": "CVE-2001-1349", "Description": "unsafe calls to library functions from signal handler", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1349"}, {"Reference": "CVE-2004-0794", "Description": "SIGURG can be used to remotely interrupt signal handler; other variants exist", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0794"}, {"Reference": "CVE-2004-2259", "Description": "SIGCHLD signal to FTP server can cause crash under heavy load while executing non-reentrant functions like malloc/free.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2259"}], "FunctionalAreas": ["Signals", "Interprocess Communication"], "AffectedResources": ["System Process"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "365", "Name": "DEPRECATED: Race Condition in Switch", "Abstraction": "Base", "Structure": "Simple", "Status": "Deprecated", "Description": "This entry has been deprecated. There are no documented cases in which a switch's control expression is evaluated more than once.", "ExtendedDescription": "It is likely that this entry was initially created based on a misinterpretation of the original source material. The original source intended to explain how switches could be unpredictable when using threads, if the control expressions used data or variables that could change between execution of different threads. That weakness is already covered by CWE-367. Despite the ambiguity in the documentation for some languages and compilers, in practice, they all evaluate the switch control expression only once. If future languages state that the code explicitly evaluates the control expression more than once, then this would not be a weakness, but the language performing as designed.", "MappingNotes": {"Usage": "Prohibited", "Rationale": "This CWE has been deprecated.", "Comments": "See description and name for possible suggestions of other CWEs to consider.", "Reasons": ["Deprecated"]}}
{"ID": "366", "Name": "Race Condition within a Thread", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "If two threads of execution use a resource simultaneously, there exists the possibility that resources may be used while invalid, in turn making the state of execution undefined.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "362", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "662", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "662", "ViewID": "1340", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C#", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Alter Execution Logic", "Unexpected State"], "Note": "The main problem is that -- if a lock is overcome -- data could be altered in a bad state."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Use locking functionality. This is the recommended solution. Implement some form of locking mechanism around code which alters or reads persistent data in a multithreaded environment."}, {"Phase": ["Architecture and Design"], "Description": "Create resource-locking validation checks. If no inherent locking mechanisms exist, use flags and signals to enforce your own blocking scheme when resources are being used by other threads of execution."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following example demonstrates the weakness."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint foo = 0;\n\tint storenum(int num) {\n\t\tstatic int counter = 0;\n\t\tcounter++;\n\t\tif (num > foo) foo = num;\n\t\treturn foo;\n\t}\n```"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic classRace {\n\t\t\tstatic int foo = 0;\n\t\t\tpublic static void main() {\n\t\t\t\t\tnew Threader().start();\n\t\t\t\t\tfoo = 1;\n\t\t\t}\n\t\t\tpublic static class Threader extends Thread {\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tSystem.out.println(foo);\n\t\t\t\t\t}\n\t\t\t}\n\t}\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2022-2621", "Description": "Chain: two threads in a web browser use the same resource (CWE-366), but one of those threads can destroy the resource before the other has completed (CWE-416).", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-2621"}], "AffectedResources": ["System Process"], "RelatedAttackPatterns": ["26", "29"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-44733", "Description": "A use-after-free exists in drivers/tee/tee_shm.c in the TEE subsystem in the Linux kernel through 5.15.11. This occurs because of a race condition in tee_shm_get_from_id during an attempt to free a shared memory object."}, {"Reference": "CVE-2022-20148", "Description": "In TBD of TBD, there is a possible use-after-free due to a race condition. This could lead to local escalation of privilege in the kernel with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-219513976References: Upstream kernel"}, {"Reference": "CVE-2022-2607", "Description": "Use after free in Tab Strip in Google Chrome on Chrome OS prior to 104.0.5112.79 allowed a remote attacker who convinced a user to engage in specific user interactions to potentially exploit heap corruption via specific UI interactions."}, {"Reference": "CVE-2022-2608", "Description": "Use after free in Overview Mode in Google Chrome on Chrome OS prior to 104.0.5112.79 allowed a remote attacker who convinced a user to engage in specific user interactions to potentially exploit heap corruption via specific UI interactions."}, {"Reference": "CVE-2022-2609", "Description": "Use after free in Nearby Share in Google Chrome on Chrome OS prior to 104.0.5112.79 allowed a remote attacker who convinced a user to engage in specific user interactions to potentially exploit heap corruption via specific UI interactions."}, {"Reference": "CVE-2022-2617", "Description": "Use after free in Extensions API in Google Chrome prior to 104.0.5112.79 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via specific UI interactions."}, {"Reference": "CVE-2022-2621", "Description": "Use after free in Extensions in Google Chrome prior to 104.0.5112.79 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via specific UI interactions."}, {"Reference": "CVE-2022-2857", "Description": "Use after free in Blink in Google Chrome prior to 104.0.5112.101 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-31748", "Description": "Mozilla developers Gabriele Svelto, Timothy Nikkel, Randell Jesup, Jon Coppeard, and the Mozilla Fuzzing Team reported memory safety bugs present in Firefox 100. Some of these bugs showed evidence of memory corruption and we presume that with enough effort some of these could have been exploited to run arbitrary code. This vulnerability affects Firefox < 101."}, {"Reference": "CVE-2022-2742", "Description": "Use after free in Exosphere in Google Chrome on Chrome OS and Lacros prior to 104.0.5112.79 allowed a remote attacker who convinced a user to engage in specific UI interactions to potentially exploit heap corruption via crafted UI interactions. (Chrome security severity: High)"}, {"Reference": "CVE-2022-2854", "Description": "Use after free in SwiftShader in Google Chrome prior to 104.0.5112.101 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-3049", "Description": "Use after free in SplitScreen in Google Chrome on Chrome OS, Lacros prior to 105.0.5195.52 allowed a remote attacker who convinced a user to engage in specific UI interactions to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-3071", "Description": "Use after free in Tab Strip in Google Chrome on Chrome OS, Lacros prior to 105.0.5195.52 allowed a remote attacker who convinced a user to engage in specific UI interactions to potentially exploit heap corruption via crafted UI interaction."}]}
{"ID": "367", "Name": "Time-of-check Time-of-use (TOCTOU) Race Condition", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product checks the state of a resource before using that resource, but the resource's state can change between the check and the use in a way that invalidates the results of the check. This can cause the product to perform invalid actions when the resource is in an unexpected state.", "ExtendedDescription": "This weakness can be security-relevant when an attacker can influence the state of the resource between check and use. This can happen with shared resources such as files, memory, or even variables in multithreaded programs.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "362", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "362", "ViewID": "1003", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "TOCTTOU", "Description": "The TOCTTOU acronym expands to \"Time Of Check To Time Of Use\"."}, {"Term": "TOCCTOU", "Description": "The TOCCTOU acronym is most likely a typo of TOCTTOU, but it has been used in some influential documents, so the typo is repeated fairly frequently."}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Alter Execution Logic", "Unexpected State"], "Note": "The attacker can gain access to otherwise unauthorized resources."}, {"Scope": ["Integrity", "Other"], "Impact": ["Modify Application Data", "Modify Files or Directories", "Modify Memory", "Other"], "Note": "Race conditions such as this kind may be employed to gain read or write access to resources which are not normally readable or writable by the user in question."}, {"Scope": ["Integrity", "Other"], "Impact": ["Other"], "Note": "The resource in question, or other resources (through the corrupted one), may be changed in undesirable ways by a malicious user."}, {"Scope": ["Non-Repudiation"], "Impact": ["Hide Activities"], "Note": "If a file or other resource is written in this method, as opposed to in a valid way, logging of the activity may not occur."}, {"Scope": ["Non-Repudiation", "Other"], "Impact": ["Other"], "Note": "In some cases it may be possible to delete files a malicious user might not otherwise have access to, such as log files."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "The most basic advice for TOCTOU vulnerabilities is to not perform a check before the use. This does not resolve the underlying issue of the execution of a function on a resource whose state and identity cannot be assured, but it does help to limit the false sense of security given by the check."}, {"Phase": ["Implementation"], "Description": "When the file being altered is owned by the current user and group, set the effective gid and uid to that of the current user and group when executing this statement."}, {"Phase": ["Architecture and Design"], "Description": "Limit the interleaving of operations on files from multiple processes."}, {"Phase": ["Implementation", "Architecture and Design"], "Description": "If you cannot perform operations atomically and you must share access to the resource between multiple processes or threads, then try to limit the amount of time (CPU cycles) between the check and use of the resource. This will not fix the problem, but it could make it more difficult for an attack to succeed."}, {"Phase": ["Implementation"], "Description": "Recheck the resource after the use call to verify that the action was taken appropriately."}, {"Phase": ["Architecture and Design"], "Description": "Ensure that some environmental locking mechanism can be used to protect resources effectively."}, {"Phase": ["Implementation"], "Description": "Ensure that locking occurs before the check, as opposed to afterwards, such that the resource, as checked, is the same as it is when in use."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code checks a file, then updates its contents."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tstruct stat *sb;\n\t...\n\tlstat(\"...\",sb); // it has not been updated since the last time it was read\n\tprintf(\"stated file\\n\");\n\tif (sb->st_mtimespec==...){\n\t\tprint(\"Now updating things\\n\");\n\t\tupdateThings();\n\t}\n```"}, {"BodyText": "Potentially the file could have been updated between the time of the check and the lstat, especially since the printf has latency."}]}, {"Entries": [{"IntroText": "The following code is from a program installed setuid root. The program performs certain file operations on behalf of non-privileged users, and uses access checks to ensure that it does not use its root privileges to perform operations that should otherwise be unavailable the current user. The program uses the access() system call to check if the person running the program has permission to access the specified file before it opens the file and performs the necessary operations."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tif(!access(file,W_OK)) {\n\t\tf = fopen(file,\"w+\");\n\t\toperate(f);\n\t\t...\n\t}\n\telse {\n\t\t\tfprintf(stderr,\"Unable to open file %s.\\n\",file);\n\t}\n```"}, {"BodyText": "The call to access() behaves as expected, and returns 0 if the user running the program has the necessary permissions to write to the file, and -1 otherwise. However, because both access() and fopen() operate on filenames rather than on file handles, there is no guarantee that the file variable still refers to the same file on disk when it is passed to fopen() that it did when it was passed to access(). If an attacker replaces file after the call to access() with a symbolic link to a different file, the program will use its root privileges to operate on the file even if it is a file that the attacker would otherwise be unable to modify. By tricking the program into performing an operation that would otherwise be impermissible, the attacker has gained elevated privileges. This type of vulnerability is not limited to programs with root privileges. If the application is capable of performing any operation that the attacker would not otherwise be allowed perform, then it is a possible target."}]}, {"ID": "DX-49", "Entries": [{"IntroText": "This code prints the contents of a file if a user has permission."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\tfunction readFile($filename){\n\t\t\t$user = getCurrentUser();\n```\n//resolve file if its a symbolic link* \n\t\t\tif(is_link($filename)){\n\t\t\t```\n\t\t\t\t$filename = readlink($filename);\n\t\t\t}\n\t\t\tif(fileowner($filename) == $user){\n\t\t\t\techo file_get_contents($realFile);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse{\n\t\t\t\techo 'Access denied';\n\t\t\t\treturn false;\n\t\t\t}\n\t}\n```"}, {"BodyText": "This code attempts to resolve symbolic links before checking the file and printing its contents. However, an attacker may be able to change the file from a real file to a symbolic link between the calls to is_link() and file_get_contents(), allowing the reading of arbitrary files. Note that this code fails to log the attempted access (CWE-778)."}]}, {"Entries": [{"IntroText": "This example is adapted from [REF-18]. Assume that this code block is invoked from multiple threads. The switch statement will execute different code depending on the time when MYFILE.txt was last changed."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t #include <sys/types.h>\n\t #include <sys/stat.h>\n\t ...\n\t struct stat sb;\n\t stat(\"MYFILE.txt\",&sb);\n\t printf(\"file change time: %d\\n\",sb->st_ctime);\n\t switch(sb->st_ctime % 2){\n\t\t case 0: printf(\"Option 1\\n\"); break;\n\t\t case 1: printf(\"Option 2\\n\"); break;\n\t\t default: printf(\"this should be unreachable?\\n\"); break;\n\t}\n```"}, {"BodyText": "If this code block were executed within multiple threads, and MYFILE.txt changed between the operation of one thread and another, then the switch could produce different, possibly unexpected results."}]}], "ObservedExamples": [{"Reference": "CVE-2015-1743", "Description": "TOCTOU in sandbox process allows installation of untrusted browser add-ons by replacing a file after it has been verified, but before it is executed", "Link": "https://www.cve.org/CVERecord?id=CVE-2015-1743"}, {"Reference": "CVE-2003-0813", "Description": "A multi-threaded race condition allows remote attackers to cause a denial of service (crash or reboot) by causing two threads to process the same RPC request, which causes one thread to use memory after it has been freed.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0813"}, {"Reference": "CVE-2004-0594", "Description": "PHP flaw allows remote attackers to execute arbitrary code by aborting execution before the initialization of key data structures is complete.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0594"}, {"Reference": "CVE-2008-2958", "Description": "chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2958"}, {"Reference": "CVE-2008-1570", "Description": "chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1570"}], "RelatedAttackPatterns": ["27", "29"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "TOCTOU issues do not always involve symlinks, and not every symlink issue is a TOCTOU problem."}, {"Type": "Research Gap", "Note": "Non-symlink TOCTOU issues are not reported frequently, but they are likely to occur in code that attempts to be secure."}], "Top25Examples": [{"Reference": "CVE-2021-22437", "Description": "There is a software integer overflow leading to a TOCTOU condition in smartphones. Successful exploitation of this vulnerability may cause random address access."}, {"Reference": "CVE-2021-35090", "Description": "Possible hypervisor memory corruption due to TOC TOU race condition when updating address mappings in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Industrial IOT, Snapdragon Mobile"}, {"Reference": "CVE-2022-1974", "Description": "A use-after-free flaw was found in the Linux kernel's NFC core functionality due to a race condition between kobject creation and delete. This vulnerability allows a local attacker with CAP_NET_ADMIN privilege to leak kernel information."}, {"Reference": "CVE-2022-20013", "Description": "In vow driver, there is a possible memory corruption due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05837742; Issue ID: ALPS05837742."}, {"Reference": "CVE-2022-20110", "Description": "In ion, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06399915; Issue ID: ALPS06399901."}, {"Reference": "CVE-2022-22093", "Description": "Memory corruption or temporary denial of service due to improper handling of concurrent hypervisor operations to attach or detach IRQs from virtual interrupt sources in Snapdragon Compute, Snapdragon Connectivity, Snapdragon Industrial IOT, Snapdragon Mobile"}, {"Reference": "CVE-2022-22094", "Description": "memory corruption in Kernel due to race condition while getting mapping reference in Snapdragon Compute, Snapdragon Connectivity, Snapdragon Industrial IOT, Snapdragon Mobile"}, {"Reference": "CVE-2022-25696", "Description": "Memory corruption in display due to time-of-check time-of-use race condition during map or unmap in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Wearables"}, {"Reference": "CVE-2022-25716", "Description": "Memory corruption in Multimedia Framework due to unsafe access to the data members"}, {"Reference": "CVE-2022-32608", "Description": "In jpeg, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07388753; Issue ID: ALPS07388753."}, {"Reference": "CVE-2022-32638", "Description": "In isp, there is a possible out of bounds write due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07494449; Issue ID: ALPS07494449."}, {"Reference": "CVE-2022-33214", "Description": "Memory corruption in display due to time-of-check time-of-use of metadata reserved size in Snapdragon Auto, Snapdragon Compute, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Wearables"}, {"Reference": "CVE-2022-33257", "Description": "Memory corruption in Core due to time-of-check time-of-use race condition during dump collection in trust zone."}, {"Reference": "CVE-2022-39908", "Description": "TOCTOU vulnerability in Samsung decoding library for video thumbnails prior to SMR Dec-2022 Release 1 allows local attacker to perform Out-Of-Bounds Write."}, {"Reference": "CVE-2022-33909", "Description": "DMA transactions which are targeted at input buffers used for the HddPassword software SMI handler could cause SMRAM corruption through a TOCTOU attack. DMA transactions which are targeted at input buffers used for the software SMI handler used by the HddPassword driver could cause SMRAM corruption through a TOCTOU attack..This issue was discovered by Insyde engineering based on the general description provided by Intel's iSTARE group. Fixed in kernel Kernel 5.2: 05.27.23, Kernel 5.3: 05.36.23, Kernel 5.4: 05.44.23, Kernel 5.5: 05.52.23 https://www.insyde.com/security-pledge/SA-2022051"}, {"Reference": "CVE-2021-26350", "Description": "A TOCTOU race condition in SMU may allow for the caller to obtain and manipulate the address of a message port register which may result in a potential denial of service."}, {"Reference": "CVE-2021-30342", "Description": "Improper integrity check can lead to race condition between tasks PDCP and RRC? after a valid RRC Command packet has been received in Snapdragon Auto, Snapdragon Compute, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Voice & Music, Snapdragon Wearables"}, {"Reference": "CVE-2021-30343", "Description": "Improper integrity check can lead to race condition between tasks PDCP and RRC? after a valid RRC Command packet has been received in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Industrial IOT, Snapdragon Mobile"}, {"Reference": "CVE-2021-30347", "Description": "Improper integrity check can lead to race condition between tasks PDCP and RRC? right after a valid RRC Command packet has been received in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Industrial IOT, Snapdragon Mobile"}, {"Reference": "CVE-2021-35082", "Description": "Improper integrity check can lead to race condition between tasks PDCP and RRC? right after a valid RRC security mode command packet has been received in Snapdragon Industrial IOT"}, {"Reference": "CVE-2021-35111", "Description": "Improper validation of tag id while RRC sending tag id to MAC can lead to TOCTOU race condition in Snapdragon Connectivity, Snapdragon Mobile"}, {"Reference": "CVE-2021-35937", "Description": "A race condition vulnerability was found in rpm. A local unprivileged user could use this flaw to bypass the checks that were introduced in response to CVE-2017-7500 and CVE-2017-7501, potentially gaining root privileges. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability."}, {"Reference": "CVE-2022-0280", "Description": "A race condition vulnerability exists in the QuickClean feature of McAfee Total Protection for Windows prior to 16.0.43 that allows a local user to gain privilege elevation and perform an arbitrary file delete. This could lead to sensitive files being deleted and potentially cause denial of service. This attack exploits the way symlinks are created and how the product works with them."}, {"Reference": "CVE-2022-0915", "Description": "There is a Time-of-check Time-of-use (TOCTOU) Race Condition Vulnerability in Logitech Sync for Windows prior to 2.4.574. Successful exploitation of these vulnerabilities may escalate the permission to the system user."}, {"Reference": "CVE-2022-21198", "Description": "Time-of-check time-of-use race condition in the BIOS firmware for some Intel(R) Processors may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-23651", "Description": "b2-sdk-python is a python library to access cloud storage provided by backblaze. Linux and Mac releases of the SDK version 1.14.0 and below contain a key disclosure vulnerability that, in certain conditions, can be exploited by local attackers through a time-of-check-time-of-use (TOCTOU) race condition. SDK users of the SqliteAccountInfo format are vulnerable while users of the InMemoryAccountInfo format are safe. The SqliteAccountInfo saves API keys (and bucket name-to-id mapping) in a local database file ($XDG_CONFIG_HOME/b2/account_info, ~/.b2_account_info or a user-defined path). When first created, the file is world readable and is (typically a few milliseconds) later altered to be private to the user. If the directory containing the file is readable by a local attacker then during the brief period between file creation and permission modification, a local attacker can race to open the file and maintain a handle to it. This allows the local attacker to read the contents after the file after the sensitive information has been saved to it. Consumers of this SDK who rely on it to save data using SqliteAccountInfo class should upgrade to the latest version of the SDK. Those who believe a local user might have opened a handle using this race condition, should remove the affected database files and regenerate all application keys. Users should upgrade to b2-sdk-python 1.14.1 or later."}, {"Reference": "CVE-2022-23653", "Description": "B2 Command Line Tool is the official command line tool for the backblaze cloud storage service. Linux and Mac releases of the B2 command-line tool version 3.2.0 and below contain a key disclosure vulnerability that, in certain conditions, can be exploited by local attackers through a time-of-check-time-of-use (TOCTOU) race condition. The command line tool saves API keys (and bucket name-to-id mapping) in a local database file (`$XDG_CONFIG_HOME/b2/account_info`, `~/.b2_account_info` or a user-defined path) when `b2 authorize-account` is first run. This happens regardless of whether a valid key is provided or not. When first created, the file is world readable and is (typically a few milliseconds) later altered to be private to the user. If the directory is readable by a local attacker and the user did not yet run `b2 authorize-account` then during the brief period between file creation and permission modification, a local attacker can race to open the file and maintain a handle to it. This allows the local attacker to read the contents after the file after the sensitive information has been saved to it. Users that have not yet run `b2 authorize-account` should upgrade to B2 Command-Line Tool v3.2.1 before running it. Users that have run `b2 authorize-account` are safe if at the time of the file creation no other local users had read access to the local configuration file. Users that have run `b2 authorize-account` where the designated path could be opened by another local user should upgrade to B2 Command-Line Tool v3.2.1 and remove the database and regenerate all application keys. Note that `b2 clear-account` does not remove the database file and it should not be used to ensure that all open handles to the file are invalidated. If B2 Command-Line Tool cannot be upgraded to v3.2.1 due to a dependency conflict, a binary release can be used instead. Alternatively a new version could be installed within a virtualenv, or the permissions can be changed to prevent local users from opening the database file."}, {"Reference": "CVE-2022-25165", "Description": "An issue was discovered in Amazon AWS VPN Client 2.0.0. A TOCTOU race condition exists during the validation of VPN configuration files. This allows parameters outside of the AWS VPN Client allow list to be injected into the configuration file prior to the AWS VPN Client service (running as SYSTEM) processing the file. Dangerous arguments can be injected by a low-level user such as log, which allows an arbitrary destination to be specified for writing log files. This leads to an arbitrary file write as SYSTEM with partial control over the files content. This can be abused to cause an elevation of privilege or denial of service."}, {"Reference": "CVE-2022-26859", "Description": "Dell BIOS contains a race condition vulnerability. A local attacker could exploit this vulnerability by sending malicious input via SMI in order to bypass security checks during SMM."}, {"Reference": "CVE-2022-28743", "Description": "Time-of-check Time-of-use (TOCTOU) Race Condition vulerability in Foscam R2C IP camera running System FW <= 1.13.1.6, and Application FW <= 2.91.2.66, allows an authenticated remote attacker with administrator permissions to execute arbitrary remote code via a malicious firmware patch. The impact of this vulnerability is that the remote attacker could gain full remote access to the IP camera and the underlying Linux system with root permissions. With root access to the camera's Linux OS, an attacker could effectively change the code that is running, add backdoor access, or invade the privacy of the user by accessing the live camera stream."}, {"Reference": "CVE-2022-29800", "Description": "A time-of-check-time-of-use (TOCTOU) race condition vulnerability was found in networkd-dispatcher. This flaw exists because there is a certain time between the scripts being discovered and them being run. An attacker can abuse this vulnerability to replace scripts that networkd-dispatcher believes to be owned by root with ones that are not."}, {"Reference": "CVE-2022-31466", "Description": "Time of Check - Time of Use (TOCTOU) vulnerability in Quick Heal Total Security prior to 12.1.1.27 allows a local attacker to achieve privilege escalation, potentially leading to deletion of system files. This is achieved through exploiting the time between detecting a file as malicious and when the action of quarantining or cleaning is performed, and using the time to replace the malicious file by a symlink."}, {"Reference": "CVE-2022-33691", "Description": "A possible race condition vulnerability in score driver prior to SMR Jul-2022 Release 1 can allow local attackers to interleave malicious operations."}, {"Reference": "CVE-2022-34830", "Description": "An Arm product family through 2022-06-29 has a TOCTOU Race Condition that allows non-privileged user to make improper GPU processing operations to gain access to already freed memory."}, {"Reference": "CVE-2022-34899", "Description": "This vulnerability allows local attackers to escalate privileges on affected installations of Parallels Access 6.5.4 (39316) Agent. An attacker must first obtain the ability to execute low-privileged code on the target host system in order to exploit this vulnerability. The specific flaw exists within the Parallels service. By creating a symbolic link, an attacker can abuse the service to execute a file. An attacker can leverage this vulnerability to escalate privileges and execute arbitrary code in the context of root. Was ZDI-CAN-16134."}, {"Reference": "CVE-2022-3590", "Description": "WordPress is affected by an unauthenticated blind SSRF in the pingback feature. Because of a TOCTOU race condition between the validation checks and the HTTP request, attackers can reach internal hosts that are explicitly forbidden."}, {"Reference": "CVE-2022-45842", "Description": "Unauth. Race Condition vulnerability in WP ULike Plugin <= 4.6.4 on WordPress allows attackers to increase/decrease rating scores. "}, {"Reference": "CVE-2022-1537", "Description": "file.copy operations in GruntJS are vulnerable to a TOCTOU race condition leading to arbitrary file write in GitHub repository gruntjs/grunt prior to 1.5.3. This vulnerability is capable of arbitrary file writes which can lead to local privilege escalation to the GruntJS user if a lower-privileged user has write access to both source and destination directories as the lower-privileged user can create a symlink to the GruntJS user's .bashrc file or replace /etc/shadow file if the GruntJS user is root."}, {"Reference": "CVE-2022-21658", "Description": "Rust is a multi-paradigm, general-purpose programming language designed for performance and safety, especially safe concurrency. The Rust Security Response WG was notified that the `std::fs::remove_dir_all` standard library function is vulnerable a race condition enabling symlink following (CWE-363). An attacker could use this security issue to trick a privileged program into deleting files and directories the attacker couldn't otherwise access or delete. Rust 1.0.0 through Rust 1.58.0 is affected by this vulnerability with 1.58.1 containing a patch. Note that the following build targets don't have usable APIs to properly mitigate the attack, and are thus still vulnerable even with a patched toolchain: macOS before version 10.10 (Yosemite) and REDOX. We recommend everyone to update to Rust 1.58.1 as soon as possible, especially people developing programs expected to run in privileged contexts (including system daemons and setuid binaries), as those have the highest risk of being affected by this. Note that adding checks in your codebase before calling remove_dir_all will not mitigate the vulnerability, as they would also be vulnerable to race conditions like remove_dir_all itself. The existing mitigation is working as intended outside of race conditions."}, {"Reference": "CVE-2022-20906", "Description": "Multiple vulnerabilities in Cisco Nexus Dashboard could allow an authenticated, local attacker to elevate privileges on an affected device. These vulnerabilities are due to insufficient input validation during CLI command execution on an affected device. An attacker could exploit these vulnerabilities by authenticating as the rescue-user and executing vulnerable CLI commands using a malicious payload. A successful exploit could allow the attacker to elevate privileges to root on an affected device."}, {"Reference": "CVE-2022-20907", "Description": "Multiple vulnerabilities in Cisco Nexus Dashboard could allow an authenticated, local attacker to elevate privileges on an affected device. These vulnerabilities are due to insufficient input validation during CLI command execution on an affected device. An attacker could exploit these vulnerabilities by authenticating as the rescue-user and executing vulnerable CLI commands using a malicious payload. A successful exploit could allow the attacker to elevate privileges to root on an affected device."}, {"Reference": "CVE-2022-23563", "Description": "Tensorflow is an Open Source Machine Learning Framework. In multiple places, TensorFlow uses `tempfile.mktemp` to create temporary files. While this is acceptable in testing, in utilities and libraries it is dangerous as a different process can create the file between the check for the filename in `mktemp` and the actual creation of the file by a subsequent operation (a TOC/TOU type of weakness). In several instances, TensorFlow was supposed to actually create a temporary directory instead of a file. This logic bug is hidden away by the `mktemp` function usage. We have patched the issue in several commits, replacing `mktemp` with the safer `mkstemp`/`mkdtemp` functions, according to the usage pattern. Users are advised to upgrade as soon as possible."}, {"Reference": "CVE-2022-20908", "Description": "Multiple vulnerabilities in Cisco Nexus Dashboard could allow an authenticated, local attacker to elevate privileges on an affected device. These vulnerabilities are due to insufficient input validation during CLI command execution on an affected device. An attacker could exploit these vulnerabilities by authenticating as the rescue-user and executing vulnerable CLI commands using a malicious payload. A successful exploit could allow the attacker to elevate privileges to root on an affected device."}, {"Reference": "CVE-2022-20909", "Description": "Multiple vulnerabilities in Cisco Nexus Dashboard could allow an authenticated, local attacker to elevate privileges on an affected device. These vulnerabilities are due to insufficient input validation during CLI command execution on an affected device. An attacker could exploit these vulnerabilities by authenticating as the rescue-user and executing vulnerable CLI commands using a malicious payload. A successful exploit could allow the attacker to elevate privileges to root on an affected device."}, {"Reference": "CVE-2021-4098", "Description": "Insufficient data validation in Mojo in Google Chrome prior to 96.0.4664.110 allowed a remote attacker who had compromised the renderer process to potentially perform a sandbox escape via a crafted HTML page."}]}
{"ID": "368", "Name": "Context Switching Race Condition", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "A product performs a series of non-atomic actions to switch between contexts that cross privilege or other security boundaries, but a race condition allows an attacker to modify or misrepresent the product's behavior during the switch.", "ExtendedDescription": "This is commonly seen in web browser vulnerabilities in which the attacker can perform certain actions while the browser is transitioning from a trusted to an untrusted domain, or vice versa, and the browser performs the actions on one domain using the trust level and resources of the other domain.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "362", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanAlsoBe", "CweID": "364", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary", "Description": "This weakness can be primary to almost anything, depending on the context of the race condition."}, {"Ordinality": "Resultant", "Description": "This weakness can be resultant from insufficient compartmentalization (CWE-653), incorrect locking, improper initialization or shutdown, or a number of other weaknesses."}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality"], "Impact": ["Modify Application Data", "Read Application Data"]}], "ObservedExamples": [{"Reference": "CVE-2009-1837", "Description": "Chain: race condition (CWE-362) from improper handling of a page transition in web client while an applet is loading (CWE-368) leads to use after free (CWE-416)", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1837"}, {"Reference": "CVE-2004-2260", "Description": "Browser updates address bar as soon as user clicks on a link instead of when the page has loaded, allowing spoofing by redirecting to another page using onUnload method. ** this is one example of the role of \"hooks\" and context switches, and should be captured somehow - also a race condition of sorts **", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2260"}, {"Reference": "CVE-2004-0191", "Description": "XSS when web browser executes Javascript events in the context of a new page while it's being loaded, allowing interaction with previous page in different domain.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0191"}, {"Reference": "CVE-2004-2491", "Description": "Web browser fills in address bar of clicked-on link before page has been loaded, and doesn't update afterward.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2491"}], "RelatedAttackPatterns": ["26", "29"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "Can overlap signal handler race conditions."}, {"Type": "Research Gap", "Note": "Under-studied as a concept. Frequency unknown; few vulnerability reports give enough detail to know when a context switching race condition is a factor."}]}
{"ID": "369", "Name": "Divide By Zero", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product divides a value by zero.", "ExtendedDescription": "This weakness typically occurs when an unexpected value is provided to the product, or if an error occurs that is not properly detected. It frequently occurs in calculations involving physical dimensions such as size, length, width, and height.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "682", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "682", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "682", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "682", "ViewID": "1340", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "A Divide by Zero results in a crash."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}, {"DetectionMethodID": "DM-13", "Method": "Fuzzing", "Description": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.", "Effectiveness": "High"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following Java example contains a function to compute an average but does not validate that the input value used as the denominator is not zero. This will create an exception for attempting to divide by zero. If this error is not handled by Java exception handling, unexpected results can occur."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic int computeAverageResponseTime (int totalTime, int numRequests) {\n\t\treturn totalTime / numRequests;\n\t}\n```"}, {"BodyText": "By validating the input value used as the denominator the following code will ensure that a divide by zero error will not cause unexpected results. The following Java code example will validate the input value, output an error message, and throw an exception."}, {"Nature": "Good", "ExampleCode": "```\n\tpublic int computeAverageResponseTime (int totalTime, int numRequests) throws ArithmeticException {\n\t\tif (numRequests == 0) {\n\t\t\tSystem.out.println(\"Division by zero attempted!\");\n\t\t\tthrow ArithmeticException;\n\t\t}\n\t\treturn totalTime / numRequests;\n\t}\n```"}]}, {"Entries": [{"IntroText": "The following C/C++ example contains a function that divides two numeric values without verifying that the input value used as the denominator is not zero. This will create an error for attempting to divide by zero, if this error is not caught by the error handling capabilities of the language, unexpected results can occur."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tdouble divide(double x, double y){\n\t\treturn x/y;\n\t}\n```"}, {"BodyText": "By validating the input value used as the denominator the following code will ensure that a divide by zero error will not cause unexpected results. If the method is called and a zero is passed as the second argument a DivideByZero error will be thrown and should be caught by the calling block with an output message indicating the error."}, {"Nature": "Good", "ExampleCode": "```\n\tconst int DivideByZero = 10;\n\tdouble divide(double x, double y){\n\t\tif ( 0 == y ){\n\t\t\tthrow DivideByZero;\n\t\t}\n\t\treturn x/y;\n\t}\n\t...\n\ttry{\n\t\tdivide(10, 0);\n\t}\n\tcatch( int i ){\n\t\tif(i==DivideByZero) {\n\t\t\tcerr<<\"Divide by zero error\";\n\t\t}\n\t}\n```"}, {"Reference": "REF-371"}]}, {"Entries": [{"IntroText": "The following C# example contains a function that divides two numeric values without verifying that the input value used as the denominator is not zero. This will create an error for attempting to divide by zero, if this error is not caught by the error handling capabilities of the language, unexpected results can occur."}, {"Nature": "Bad", "Language": "C#", "ExampleCode": "```\n\tint Division(int x, int y){\n\t\treturn (x / y);\n\t}\n```"}, {"BodyText": "The method can be modified to raise, catch and handle the DivideByZeroException if the input value used as the denominator is zero."}, {"Nature": "Good", "ExampleCode": "```\n\tint SafeDivision(int x, int y){\n\t\ttry{\n\t\t\treturn (x / y);\n\t\t}\n\t\tcatch (System.DivideByZeroException dbz){\n\t\t\tSystem.Console.WriteLine(\"Division by zero attempted!\");\n\t\t\treturn 0;\n\t\t}\n\t}\n```"}, {"Reference": "REF-372"}]}], "ObservedExamples": [{"Reference": "CVE-2007-3268", "Description": "Invalid size value leads to divide by zero.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-3268"}, {"Reference": "CVE-2007-2723", "Description": "\"Empty\" content triggers divide by zero.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-2723"}, {"Reference": "CVE-2007-2237", "Description": "Height value of 0 triggers divide by zero.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-2237"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-21729", "Description": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `UnravelIndex` is vulnerable to a division by zero caused by an integer overflow bug. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."}, {"Reference": "CVE-2022-39318", "Description": "FreeRDP is a free remote desktop protocol library and clients. Affected versions of FreeRDP are missing input validation in `urbdrc` channel. A malicious server can trick a FreeRDP based client to crash with division by zero. This issue has been addressed in version 2.9.0. All users are advised to upgrade. Users unable to upgrade should not use the `/usb` redirection switch."}]}
{"ID": "37", "Name": "Path Traversal: '/absolute/pathname/here'", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product accepts input in the form of a slash absolute path ('/absolute/pathname/here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "36", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "160", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Modify Files or Directories"]}], "PotentialMitigations": [{"MitigationID": "MIT-5.1", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\n\n\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n", "Effectiveness": "High"}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "ObservedExamples": [{"Reference": "CVE-2002-1345", "Description": "Multiple FTP clients write arbitrary files via absolute paths in server responses", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1345"}, {"Reference": "CVE-2001-1269", "Description": "ZIP file extractor allows full path", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1269"}, {"Reference": "CVE-2002-1818", "Description": "Path traversal using absolute pathname", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1818"}, {"Reference": "CVE-2002-1913", "Description": "Path traversal using absolute pathname", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1913"}, {"Reference": "CVE-2005-2147", "Description": "Path traversal using absolute pathname", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2147"}, {"Reference": "CVE-2000-0614", "Description": "Arbitrary files may be overwritten via compressed attachments that specify absolute path names for the decompressed output.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0614"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "370", "Name": "Missing Check for Certificate Revocation after Initial Check", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not check the revocation status of a certificate after its initial revocation check, which can cause the product to perform privileged actions even after the certificate is revoked at a later time.", "ExtendedDescription": "If the revocation status of a certificate is not checked before each action that requires privileges, the system may be subject to a race condition. If a certificate is revoked after the initial check, all subsequent actions taken with the owner of the revoked certificate will lose all benefits guaranteed by the certificate. In fact, it is almost certain that the use of a revoked certificate indicates malicious activity.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "299", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "296", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "297", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "298", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "Trust may be assigned to an entity who is not who it claims to be."}, {"Scope": ["Integrity"], "Impact": ["Modify Application Data"], "Note": "Data from an untrusted (and possibly malicious) source may be integrated."}, {"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "Data may be disclosed to an entity impersonating a trusted entity, resulting in information disclosure."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Ensure that certificates are checked for revoked status before each use of a protected resource. If the certificate is checked before each access of a protected resource, the delay subject to a possible race condition becomes almost negligible and significantly reduces the risk associated with this issue."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code checks a certificate before performing an action."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tif (cert = SSL_get_peer_certificate(ssl)) {\n\t\t\tfoo=SSL_get_verify_result(ssl);\n\t\t\tif (X509_V_OK==foo)\n```\n//do stuff* \n\t\t\t\t\tfoo=SSL_get_verify_result(ssl);\n\t\t\t\t\t\n\t\t\t\t\t *//do more stuff without the check.*"}, {"BodyText": "While the code performs the certificate verification before each action, it does not check the result of the verification after the initial attempt. The certificate may have been revoked in the time between the privileged actions."}]}], "RelatedAttackPatterns": ["26", "29"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "372", "Name": "Incomplete Internal State Distinction", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "664", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Varies by Context", "Unexpected State"]}], "RelatedAttackPatterns": ["140", "74"], "MappingNotes": {"Usage": "Discouraged", "Rationale": "This CWE entry could be deprecated in a future version of CWE.", "Comments": "See maintenance notes.", "Reasons": ["Potential Deprecation", "CWE Overlap"]}, "Notes": [{"Type": "Relationship", "Note": "This conceptually overlaps other categories such as insufficient verification, but this entry refers to the product's incorrect perception of its own state."}, {"Type": "Relationship", "Note": "This is probably resultant from other weaknesses such as unhandled error conditions, inability to handle out-of-order steps, multiple interpretation errors, etc."}, {"Type": "Maintenance", "Note": "This entry is being considered for deprecation. It was poorly-defined in PLOVER and is not easily described using the behavior/resource/property model of vulnerability theory."}], "Top25Examples": [{"Reference": "CVE-2021-25735", "Description": "A security issue was discovered in kube-apiserver that could allow node updates to bypass a Validating Admission Webhook. Clusters are only affected by this vulnerability if they run a Validating Admission Webhook for Nodes that denies admission based at least partially on the old state of the Node object. Validating Admission Webhook does not observe some previous fields."}]}
{"ID": "373", "Name": "DEPRECATED: State Synchronization Error", "Abstraction": "Base", "Structure": "Simple", "Status": "Deprecated", "Description": "This entry was deprecated because it overlapped the same concepts as race condition (CWE-362) and Improper Synchronization (CWE-662).", "MappingNotes": {"Usage": "Prohibited", "Rationale": "This CWE has been deprecated.", "Comments": "See description and name for possible suggestions of other CWEs to consider.", "Reasons": ["Deprecated"]}}
{"ID": "374", "Name": "Passing Mutable Objects to an Untrusted Method", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product sends non-cloned mutable data as an argument to a method or function.", "ExtendedDescription": "The function or method that has been called can alter or delete the mutable data. This could violate assumptions that the calling function has made about its state. In situations where unknown code is called with references to mutable data, this external code could make changes to the data sent. If this data was not previously cloned, the modified data might not be valid in the context of execution.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "668", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C#", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Modify Memory"], "Note": "Potentially data could be tampered with by another function which should not have been tampered with."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Pass in data which should not be altered as constant or immutable."}, {"Phase": ["Implementation"], "Description": "Clone all mutable data before passing it into an external function . This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following example demonstrates the weakness."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tprivate:\n\t\tint foo;\n\t\tcomplexType bar;\n\t\tString baz;\n\t\totherClass externalClass;\n\tpublic:\n\t\tvoid doStuff() {\n\t\t\texternalClass.doOtherStuff(foo, bar, baz)\n\t\t}\n```"}, {"BodyText": "In this example, bar and baz will be passed by reference to doOtherStuff() which may change them."}]}, {"Entries": [{"IntroText": "In the following Java example, the BookStore class manages the sale of books in a bookstore, this class includes the member objects for the bookstore inventory and sales database manager classes. The BookStore class includes a method for updating the sales database and inventory when a book is sold. This method retrieves a Book object from the bookstore inventory object using the supplied ISBN number for the book class, then calls a method for the sales object to update the sales information and then calls a method for the inventory object to update inventory for the BookStore."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class BookStore {\n\t\t\tprivate BookStoreInventory inventory;\n\t\t\tprivate SalesDBManager sales;\n\t\t\t...\n```\n// constructor for BookStore* \n\t\t\tpublic BookStore() {\n\t\t\t```\n\t\t\t\tthis.inventory = new BookStoreInventory();\n\t\t\t\tthis.sales = new SalesDBManager();\n\t\t\t\t...\n\t\t\t}\n\t\t\tpublic void updateSalesAndInventoryForBookSold(String bookISBN) {\n```\n// Get book object from inventory using ISBN* \n\t\t\t\t\tBook book = inventory.getBookWithISBN(bookISBN);\n\t\t\t\t\t\n\t\t\t\t\t *// update sales information for book sold* \n\t\t\t\t\tsales.updateSalesInformation(book);\n\t\t\t\t\t\n\t\t\t\t\t *// update inventory* \n\t\t\t\t\tinventory.updateInventory(book);}\n\t\t\t\n\t\t\t *// other BookStore methods* \n\t\t\t...}\n\tpublic class Book {\n\t```\n\t\tprivate String title;\n\t\tprivate String author;\n\t\tprivate String isbn;\n```\n// Book object constructors and get/set methods* \n\t\t...}"}, {"BodyText": "However, in this example the Book object that is retrieved and passed to the method of the sales object could have its contents modified by the method. This could cause unexpected results when the book object is sent to the method for the inventory object to update the inventory."}, {"BodyText": "In the Java programming language arguments to methods are passed by value, however in the case of objects a reference to the object is passed by value to the method. When an object reference is passed as a method argument a copy of the object reference is made within the method and therefore both references point to the same object. This allows the contents of the object to be modified by the method that holds the copy of the object reference. [REF-374]"}, {"BodyText": "In this case the contents of the Book object could be modified by the method of the sales object prior to the call to update the inventory."}, {"BodyText": "To prevent the contents of the Book object from being modified, a copy of the Book object should be made before the method call to the sales object. In the following example a copy of the Book object is made using the clone() method and the copy of the Book object is passed to the method of the sales object. This will prevent any changes being made to the original Book object."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\t...\n\tpublic void updateSalesAndInventoryForBookSold(String bookISBN) {\n```\n// Get book object from inventory using ISBN* \n\t\t\tBook book = inventory.getBookWithISBN(bookISBN);\n\t\t\t\n\t\t\t *// Create copy of book object to make sure contents are not changed* \n\t\t\tBook bookSold = (Book) book.clone();\n\t\t\t\n\t\t\t *// update sales information for book sold* \n\t\t\tsales.updateSalesInformation(bookSold);\n\t\t\t\n\t\t\t *// update inventory* \n\t\t\tinventory.updateInventory(book);}\n\t..."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-1488", "Description": "Inappropriate implementation in Extensions API in Google Chrome prior to 101.0.4951.41 allowed an attacker who convinced a user to install a malicious extension to leak cross-origin data via a crafted Chrome Extension."}]}
{"ID": "375", "Name": "Returning a Mutable Object to an Untrusted Caller", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "Sending non-cloned mutable data as a return value may result in that data being altered or deleted by the calling function.", "ExtendedDescription": "In situations where functions return references to mutable data, it is possible that the external code which called the function may make changes to the data sent. If this data was not previously cloned, the class will then be using modified data which may violate assumptions about its internal state.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "668", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C#", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control", "Integrity"], "Impact": ["Modify Memory"], "Note": "Potentially data could be tampered with by another function which should not have been tampered with."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Declare returned data which should not be altered as constant or immutable."}, {"Phase": ["Implementation"], "Description": "Clone all mutable data before returning references to it. This is the preferred mitigation. This way, regardless of what changes are made to the data, a valid copy is retained for use by the class."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This class has a private list of patients, but provides a way to see the list :"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class ClinicalTrial {\n\t\tprivate PatientClass[] patientList = new PatientClass[50];\n\t\tpublic getPatients(...){\n\t\t\treturn patientList;\n\t\t}\n\t}\n```"}, {"BodyText": "While this code only means to allow reading of the patient list, the getPatients() method returns a reference to the class's original patient list instead of a reference to a copy of the list. Any caller of this method can arbitrarily modify the contents of the patient list even though it is a private member of the class."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "377", "Name": "Insecure Temporary File", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "Creating and using insecure temporary files can leave application and system data vulnerable to attack.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "668", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Modify Files or Directories"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code uses a temporary file for storing intermediate data gathered from the network before it is processed."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tif (tmpnam_r(filename)) {\n\t\t\tFILE* tmp = fopen(filename,\"wb+\");\n\t\t\twhile((recv(sock,recvbuf,DATA_SIZE, 0) > 0)&(amt!=0)) amt = fwrite(recvbuf,1,DATA_SIZE,tmp);\n\t}\n\t...\n```"}, {"BodyText": "This otherwise unremarkable code is vulnerable to a number of different attacks because it relies on an insecure method for creating temporary files. The vulnerabilities introduced by this function and others are described in the following sections. The most egregious security problems related to temporary file creation have occurred on Unix-based operating systems, but Windows applications have parallel risks. This section includes a discussion of temporary file creation on both Unix and Windows systems. Methods and behaviors can vary between systems, but the fundamental risks introduced by each are reasonably constant."}]}], "ObservedExamples": [{"Reference": "CVE-2022-41954", "Description": "A library uses the Java File.createTempFile() method which creates a file with \"-rw-r--r--\" default permissions on Unix-like operating systems", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-41954"}], "RelatedAttackPatterns": ["149", "155"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Other", "Note": "\n\nApplications require temporary files so frequently that many different mechanisms exist for creating them in the C Library and Windows(R) API. Most of these functions are vulnerable to various forms of attacks.\n\n\nThe functions designed to aid in the creation of temporary files can be broken into two groups based whether they simply provide a filename or actually open a new file. - Group 1: \"Unique\" Filenames: The first group of C Library and WinAPI functions designed to help with the process of creating temporary files do so by generating a unique file name for a new temporary file, which the program is then supposed to open. This group includes C Library functions like tmpnam(), tempnam(), mktemp() and their C++ equivalents prefaced with an _ (underscore) as well as the GetTempFileName() function from the Windows API. This group of functions suffers from an underlying race condition on the filename chosen. Although the functions guarantee that the filename is unique at the time it is selected, there is no mechanism to prevent another process or an attacker from creating a file with the same name after it is selected but before the application attempts to open the file. Beyond the risk of a legitimate collision caused by another call to the same function, there is a high probability that an attacker will be able to create a malicious collision because the filenames generated by these functions are not sufficiently randomized to make them difficult to guess. If a file with the selected name is created, then depending on how the file is opened the existing contents or access permissions of the file may remain intact. If the existing contents of the file are malicious in nature, an attacker may be able to inject dangerous data into the application when it reads data back from the temporary file. If an attacker pre-creates the file with relaxed access permissions, then data stored in the temporary file by the application may be accessed, modified or corrupted by an attacker. On Unix based systems an even more insidious attack is possible if the attacker pre-creates the file as a link to another important file. Then, if the application truncates or writes data to the file, it may unwittingly perform damaging operations for the attacker. This is an especially serious threat if the program operates with elevated permissions. Finally, in the best case the file will be opened with the a call to open() using the O_CREAT and O_EXCL flags or to CreateFile() using the CREATE_NEW attribute, which will fail if the file already exists and therefore prevent the types of attacks described above. However, if an attacker is able to accurately predict a sequence of temporary file names, then the application may be prevented from opening necessary temporary storage causing a denial of service (DoS) attack. This type of attack would not be difficult to mount given the small amount of randomness used in the selection of the filenames generated by these functions. - Group 2: \"Unique\" Files: The second group of C Library functions attempts to resolve some of the security problems related to temporary files by not only generating a unique file name, but also opening the file. This group includes C Library functions like tmpfile() and its C++ equivalents prefaced with an _ (underscore), as well as the slightly better-behaved C Library function mkstemp(). The tmpfile() style functions construct a unique filename and open it in the same way that fopen() would if passed the flags \"wb+\", that is, as a binary file in read/write mode. If the file already exists, tmpfile() will truncate it to size zero, possibly in an attempt to assuage the security concerns mentioned earlier regarding the race condition that exists between the selection of a supposedly unique filename and the subsequent opening of the selected file. However, this behavior clearly does not solve the function's security problems. First, an attacker can pre-create the file with relaxed access-permissions that will likely be retained by the file opened by tmpfile(). Furthermore, on Unix based systems if the attacker pre-creates the file as a link to another important file, the application may use its possibly elevated permissions to truncate that file, thereby doing damage on behalf of the attacker. Finally, if tmpfile() does create a new file, the access permissions applied to that file will vary from one operating system to another, which can leave application data vulnerable even if an attacker is unable to predict the filename to be used in advance. Finally, mkstemp() is a reasonably safe way create temporary files. It will attempt to create and open a unique file based on a filename template provided by the user combined with a series of randomly generated characters. If it is unable to create such a file, it will fail and return -1. On modern systems the file is opened using mode 0600, which means the file will be secure from tampering unless the user explicitly changes its access permissions. However, mkstemp() still suffers from the use of predictable file names and can leave an application vulnerable to denial of service attacks if an attacker causes mkstemp() to fail by predicting and pre-creating the filenames to be used.\n"}], "Top25Examples": [{"Reference": "CVE-2022-40299", "Description": "In Singular before 4.3.1, a predictable /tmp pathname is used (e.g., by sdb.cc), which allows local users to gain the privileges of other users via a procedure in a file under /tmp. NOTE: this CVE Record is about sdb.cc and similar files in the Singular interface that have predictable /tmp pathnames; this CVE Record is not about the lack of a safe temporary-file creation capability in the Singular language."}, {"Reference": "CVE-2022-0315", "Description": "Insecure Temporary File in GitHub repository horovod/horovod prior to 0.24.0."}, {"Reference": "CVE-2022-0736", "Description": "Insecure Temporary File in GitHub repository mlflow/mlflow prior to 1.23.1."}, {"Reference": "CVE-2022-24913", "Description": "Versions of the package com.fasterxml.util:java-merge-sort before 1.1.0 are vulnerable to Insecure Temporary File in the StdTempFileProvider() function in StdTempFileProvider.java, which uses the permissive File.createTempFile() function, exposing temporary file contents."}, {"Reference": "CVE-2022-27772", "Description": "spring-boot versions prior to version v2.2.11.RELEASE was vulnerable to temporary directory hijacking. This vulnerability impacted the org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.createTempDir method. NOTE: This vulnerability only affects products and/or versions that are no longer supported by the maintainer"}, {"Reference": "CVE-2022-23563", "Description": "Tensorflow is an Open Source Machine Learning Framework. In multiple places, TensorFlow uses `tempfile.mktemp` to create temporary files. While this is acceptable in testing, in utilities and libraries it is dangerous as a different process can create the file between the check for the filename in `mktemp` and the actual creation of the file by a subsequent operation (a TOC/TOU type of weakness). In several instances, TensorFlow was supposed to actually create a temporary directory instead of a file. This logic bug is hidden away by the `mktemp` function usage. We have patched the issue in several commits, replacing `mktemp` with the safer `mkstemp`/`mkdtemp` functions, according to the usage pattern. Users are advised to upgrade as soon as possible."}, {"Reference": "CVE-2022-34387", "Description": " Dell SupportAssist for Home PCs (version 3.11.4 and prior) and SupportAssist for Business PCs (version 3.2.0 and prior) contain a privilege escalation vulnerability. A local authenticated malicious user could potentially exploit this vulnerability to elevate privileges and gain total control of the system. "}, {"Reference": "CVE-2022-24986", "Description": "KDE KCron through 21.12.2 uses a temporary file in /tmp when saving, but reuses the filename during an editing session. Thus, someone watching it be created the first time could potentially intercept the file the following time, enabling that person to run unauthorized commands."}, {"Reference": "CVE-2022-41954", "Description": "MPXJ is an open source library to read and write project plans from a variety of file formats and databases. On Unix-like operating systems (not Windows or macos), MPXJ's use of `File.createTempFile(..)` results in temporary files being created with the permissions `-rw-r--r--`. This means that any other user on the system can read the contents of this file. When MPXJ is reading a schedule file which requires the creation of a temporary file or directory, a knowledgeable local user could locate these transient files while they are in use and would then be able to read the schedule being processed by MPXJ. The problem has been patched, MPXJ version 10.14.1 and later includes the necessary changes. Users unable to upgrade may set `java.io.tmpdir` to a directory to which only the user running the application has access will prevent other users from accessing these temporary files."}]}
{"ID": "378", "Name": "Creation of Temporary File With Insecure Permissions", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "Opening temporary files without appropriate measures or controls can leave the file, its contents and any function that it impacts vulnerable to attack.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "377", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "If the temporary file can be read by the attacker, sensitive information may be in that file which could be revealed."}, {"Scope": ["Authorization", "Other"], "Impact": ["Other"], "Note": "If that file can be written to by the attacker, the file might be moved into a place to which the attacker does not have access. This will allow the attacker to gain selective resource access-control privileges."}, {"Scope": ["Integrity", "Other"], "Impact": ["Other"], "Note": "Depending on the data stored in the temporary file, there is the potential for an attacker to gain an additional input vector which is trusted as non-malicious. It may be possible to make arbitrary changes to data structures, user information, or even process ownership."}], "PotentialMitigations": [{"Phase": ["Requirements"], "Description": "Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible."}, {"Phase": ["Implementation"], "Description": "Ensure that you use proper file permissions. This can be achieved by using a safe temp file function. Temporary files should be writable and readable only by the process that owns the file."}, {"Phase": ["Implementation"], "Description": "Randomize temporary file names. This can also be achieved by using a safe temp-file function. This will ensure that temporary files will not be created in predictable places."}], "DemonstrativeExamples": [{"ID": "DX-139", "Entries": [{"IntroText": "In the following code examples a temporary file is created and written to. After using the temporary file, the file is closed and deleted from the file system."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tFILE *stream;\n\tif( (stream = tmpfile()) == NULL ) {\n\t\t\tperror(\"Could not open new temporary file\\n\");\n\t\t\treturn (-1);\n\t}\n```\n// write data to tmp file* \n\t...\n\t// remove tmp file\n\trmtmp();"}, {"BodyText": "However, within this C/C++ code the method tmpfile() is used to create and open the temp file. The tmpfile() method works the same way as the fopen() method would with read/write permission, allowing attackers to read potentially sensitive information contained in the temp file or modify the contents of the file."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\ttry {\n\t\tFile temp = File.createTempFile(\"pattern\", \".suffix\");\n\t\ttemp.deleteOnExit();\n\t\tBufferedWriter out = new BufferedWriter(new FileWriter(temp));\n\t\tout.write(\"aString\");\n\t\tout.close();\n\t}\n\tcatch (IOException e) {\n\t}\n```"}, {"BodyText": "Similarly, the createTempFile() method used in the Java code creates a temp file that may be readable and writable to all users."}, {"BodyText": "Additionally both methods used above place the file into a default directory. On UNIX systems the default directory is usually \"/tmp\" or \"/var/tmp\" and on Windows systems the default directory is usually \"C:\\\\Windows\\\\Temp\", which may be easily accessible to attackers, possibly enabling them to read and modify the contents of the temp file."}]}], "ObservedExamples": [{"Reference": "CVE-2022-24823", "Description": "A network application framework uses the Java function createTempFile(), which will create a file that is readable by other local users of the system", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-24823"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-21290", "Description": "Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. In Netty before version 4.1.59.Final there is a vulnerability on Unix-like systems involving an insecure temp file. When netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. On unix-like systems, the temporary directory is shared between all user. As such, writing to this directory using APIs that do not explicitly set the file/directory permissions can lead to information disclosure. Of note, this does not impact modern MacOS Operating Systems. The method \"File.createTempFile\" on unix-like systems creates a random file, but, by default will create this file with the permissions \"-rw-r--r--\". Thus, if sensitive information is written to this file, other local users can read this information. This is the case in netty's \"AbstractDiskHttpData\" is vulnerable. This has been fixed in version 4.1.59.Final. As a workaround, one may specify your own \"java.io.tmpdir\" when you start the JVM or use \"DefaultHttpDataFactory.setBaseDir(...)\" to set the directory to something that is only readable by the current user."}, {"Reference": "CVE-2022-45935", "Description": "Usage of temporary files with insecure permissions by the Apache James server allows an attacker with local access to access private user data in transit. Vulnerable components includes the SMTP stack and IMAP APPEND command. This issue affects Apache James server version 3.7.2 and prior versions."}, {"Reference": "CVE-2022-4817", "Description": "A vulnerability was found in centic9 jgit-cookbook. It has been declared as problematic. This vulnerability affects unknown code. The manipulation leads to insecure temporary file. The attack can be initiated remotely. The name of the patch is b8cb29b43dc704708d598c60ac1881db7cf8e9c3. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-216988."}, {"Reference": "CVE-2021-22572", "Description": "On unix-like systems, the system temporary directory is shared between all users on that system. The root cause is File.createTempFile creates files in the the system temporary directory with world readable permissions. Any sensitive information written to theses files is visible to all other local users on unix-like systems. We recommend upgrading past commit https://github.com/google/data-transfer-project/pull/969"}, {"Reference": "CVE-2022-24823", "Description": "Netty is an open-source, asynchronous event-driven network application framework. The package `io.netty:netty-codec-http` prior to version 4.1.77.Final contains an insufficient fix for CVE-2021-21290. When Netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. This only impacts applications running on Java version 6 and lower. Additionally, this vulnerability impacts code running on Unix-like systems, and very old versions of Mac OSX and Windows as they all share the system temporary directory between all users. Version 4.1.77.Final contains a patch for this vulnerability. As a workaround, specify one's own `java.io.tmpdir` when starting the JVM or use DefaultHttpDataFactory.setBaseDir(...) to set the directory to something that is only readable by the current user."}, {"Reference": "CVE-2022-24411", "Description": "Dell PowerScale OneFS 8.2.2 and above contain an elevation of privilege vulnerability. A local attacker with ISI_PRIV_LOGIN_SSH and/or ISI_PRIV_LOGIN_CONSOLE could potentially exploit this vulnerability, leading to elevation of privilege. This could potentially allow users to circumvent PowerScale Compliance Mode guarantees."}]}
{"ID": "379", "Name": "Creation of Temporary File in Directory with Insecure Permissions", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product creates a temporary file in a directory whose permissions allow unintended actors to determine the file's existence or otherwise access that file.", "ExtendedDescription": "On some operating systems, the fact that the temporary file exists may be apparent to any user with sufficient privileges to access that directory. Since the file is visible, the application that is using the temporary file could be known. If one has access to list the processes on the system, the attacker has gained information about what the user is doing at that time. By correlating this with the applications the user is running, an attacker could potentially discover what a user's actions are. From this, higher levels of security could be breached.", "LikelihoodOfExploit": "Low", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "377", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "Since the file is visible and the application which is using the temp file could be known, the attacker has gained information about what the user is doing at that time."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Requirements"], "Description": "Many contemporary languages have functions which properly handle this condition. Older C temp file functions are especially susceptible."}, {"Phase": ["Implementation"], "Description": "Try to store sensitive tempfiles in a directory which is not world readable -- i.e., per-user directories."}, {"Phase": ["Implementation"], "Description": "Avoid using vulnerable temp file functions."}], "DemonstrativeExamples": [{"ID": "DX-139", "Entries": [{"IntroText": "In the following code examples a temporary file is created and written to. After using the temporary file, the file is closed and deleted from the file system."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tFILE *stream;\n\tif( (stream = tmpfile()) == NULL ) {\n\t\t\tperror(\"Could not open new temporary file\\n\");\n\t\t\treturn (-1);\n\t}\n```\n// write data to tmp file* \n\t...\n\t// remove tmp file\n\trmtmp();"}, {"BodyText": "However, within this C/C++ code the method tmpfile() is used to create and open the temp file. The tmpfile() method works the same way as the fopen() method would with read/write permission, allowing attackers to read potentially sensitive information contained in the temp file or modify the contents of the file."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\ttry {\n\t\tFile temp = File.createTempFile(\"pattern\", \".suffix\");\n\t\ttemp.deleteOnExit();\n\t\tBufferedWriter out = new BufferedWriter(new FileWriter(temp));\n\t\tout.write(\"aString\");\n\t\tout.close();\n\t}\n\tcatch (IOException e) {\n\t}\n```"}, {"BodyText": "Similarly, the createTempFile() method used in the Java code creates a temp file that may be readable and writable to all users."}, {"BodyText": "Additionally both methods used above place the file into a default directory. On UNIX systems the default directory is usually \"/tmp\" or \"/var/tmp\" and on Windows systems the default directory is usually \"C:\\\\Windows\\\\Temp\", which may be easily accessible to attackers, possibly enabling them to read and modify the contents of the temp file."}]}], "ObservedExamples": [{"Reference": "CVE-2022-27818", "Description": "A hotkey daemon written in Rust creates a domain socket file underneath /tmp, which is accessible by any user.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-27818"}, {"Reference": "CVE-2021-21290", "Description": "A Java-based application for a rapid-development framework uses File.createTempFile() to create a random temporary file with insecure default permissions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-21290"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-41988", "Description": "Qlik NPrinting Designer through 21.14.3.0 creates a Temporary File in a Directory with Insecure Permissions."}, {"Reference": "CVE-2021-41989", "Description": "Qlik QlikView through 12.60.20100.0 creates a Temporary File in a Directory with Insecure Permissions."}, {"Reference": "CVE-2021-42713", "Description": "Splashtop Remote Client (Personal Edition) through 3.4.6.1 creates a Temporary File in a Directory with Insecure Permissions."}, {"Reference": "CVE-2021-42714", "Description": "Splashtop Remote Client (Business Edition) through 3.4.8.3 creates a Temporary File in a Directory with Insecure Permissions."}, {"Reference": "CVE-2022-21126", "Description": "The package com.github.samtools:htsjdk before 3.0.1 are vulnerable to Creation of Temporary File in Directory with Insecure Permissions due to the createTempDir() function in util/IOUtil.java not checking for the existence of the temporary directory before attempting to create it."}, {"Reference": "CVE-2022-25090", "Description": "Printix Secure Cloud Print Management through 1.3.1106.0 creates a temporary temp.ini file in a directory with insecure permissions, leading to privilege escalation because of a race condition."}, {"Reference": "CVE-2022-3952", "Description": "A vulnerability has been found in ManyDesigns Portofino 5.3.2 and classified as problematic. Affected by this vulnerability is the function createTempDir of the file WarFileLauncher.java. The manipulation leads to creation of temporary file in directory with insecure permissions. Upgrading to version 5.3.3 is able to address this issue. The name of the patch is 94653cb357806c9cf24d8d294e6afea33f8f0775. It is recommended to upgrade the affected component. The identifier VDB-213457 was assigned to this vulnerability."}, {"Reference": "CVE-2021-21290", "Description": "Netty is an open-source, asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers & clients. In Netty before version 4.1.59.Final there is a vulnerability on Unix-like systems involving an insecure temp file. When netty's multipart decoders are used local information disclosure can occur via the local system temporary directory if temporary storing uploads on the disk is enabled. On unix-like systems, the temporary directory is shared between all user. As such, writing to this directory using APIs that do not explicitly set the file/directory permissions can lead to information disclosure. Of note, this does not impact modern MacOS Operating Systems. The method \"File.createTempFile\" on unix-like systems creates a random file, but, by default will create this file with the permissions \"-rw-r--r--\". Thus, if sensitive information is written to this file, other local users can read this information. This is the case in netty's \"AbstractDiskHttpData\" is vulnerable. This has been fixed in version 4.1.59.Final. As a workaround, one may specify your own \"java.io.tmpdir\" when you start the JVM or use \"DefaultHttpDataFactory.setBaseDir(...)\" to set the directory to something that is only readable by the current user."}, {"Reference": "CVE-2021-28633", "Description": "Adobe Creative Cloud Desktop Application (installer) version 2.4 (and earlier) is affected by an Insecure temporary file creation vulnerability. An attacker could leverage this vulnerability to cause arbitrary file overwriting in the context of the current user. Exploitation of this issue requires physical interaction to the system."}, {"Reference": "CVE-2021-21428", "Description": "Openapi generator is a java tool which allows generation of API client libraries (SDK generation), server stubs, documentation and configuration automatically given an OpenAPI Spec. openapi-generator-online creates insecure temporary folders with File.createTempFile during the code generation process. The insecure temporary folders store the auto-generated files which can be read and appended to by any users on the system. The issue has been patched with `Files.createTempFile` and released in the v5.1.0 stable version."}, {"Reference": "CVE-2022-27818", "Description": "SWHKD 1.1.5 unsafely uses the /tmp/swhkd.sock pathname. There can be an information leak or denial of service."}, {"Reference": "CVE-2022-23950", "Description": "In Keylime before 6.3.0, Revocation Notifier uses a fixed /tmp path for UNIX domain socket which can allow unprivileged users a method to prohibit keylime operations."}, {"Reference": "CVE-2022-27772", "Description": "spring-boot versions prior to version v2.2.11.RELEASE was vulnerable to temporary directory hijacking. This vulnerability impacted the org.springframework.boot.web.server.AbstractConfigurableWebServerFactory.createTempDir method. NOTE: This vulnerability only affects products and/or versions that are no longer supported by the maintainer"}, {"Reference": "CVE-2022-23163", "Description": "Dell PowerScale OneFS, 8.2,x, 9.1.0.x, 9.2.1.x, and 9.3.0.x contain a denial of service vulnerability. A local malicious user could potentially exploit this vulnerability, leading to denial of service/data unavailability."}, {"Reference": "CVE-2022-26850", "Description": "When creating or updating credentials for single-user access, Apache NiFi wrote a copy of the Login Identity Providers configuration to the operating system temporary directory. On most platforms, the operating system temporary directory has global read permissions. NiFi immediately moved the temporary file to the final configuration directory, which significantly limited the window of opportunity for access. NiFi 1.16.0 includes updates to replace the Login Identity Providers configuration without writing a file to the operating system temporary directory."}, {"Reference": "CVE-2022-28226", "Description": "Local privilege vulnerability in Yandex Browser for Windows prior to 22.3.3.801 allows a local, low privileged, attacker to execute arbitary code with the SYSTEM privileges through manipulating temporary files in directory with insecure permissions during Yandex Browser update process."}, {"Reference": "CVE-2022-41946", "Description": "pgjdbc is an open source postgresql JDBC Driver. In affected versions a prepared statement using either `PreparedStatement.setText(int, InputStream)` or `PreparedStatemet.setBytea(int, InputStream)` will create a temporary file if the InputStream is larger than 2k. This will create a temporary file which is readable by other users on Unix like systems, but not MacOS. On Unix like systems, the system's temporary directory is shared between all users on that system. Because of this, when files and directories are written into this directory they are, by default, readable by other users on that same system. This vulnerability does not allow other users to overwrite the contents of these directories or files. This is purely an information disclosure vulnerability. Because certain JDK file system APIs were only added in JDK 1.7, this this fix is dependent upon the version of the JDK you are using. Java 1.7 and higher users: this vulnerability is fixed in 4.5.0. Java 1.6 and lower users: no patch is available. If you are unable to patch, or are stuck running on Java 1.6, specifying the java.io.tmpdir system environment variable to a directory that is exclusively owned by the executing user will mitigate this vulnerability."}]}
{"ID": "38", "Name": "Path Traversal: '\\absolute\\pathname\\here'", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product accepts input in the form of a backslash absolute path ('\\absolute\\pathname\\here') without appropriate validation, which can allow an attacker to traverse the file system to unintended locations or access arbitrary files.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "36", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Modify Files or Directories"]}], "PotentialMitigations": [{"MitigationID": "MIT-5.1", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\n\n\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n", "Effectiveness": "High"}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "ObservedExamples": [{"Reference": "CVE-1999-1263", "Description": "Mail client allows remote attackers to overwrite arbitrary files via an e-mail message containing a uuencoded attachment that specifies the full pathname for the file to be modified.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1263"}, {"Reference": "CVE-2003-0753", "Description": "Remote attackers can read arbitrary files via a full pathname to the target file in config parameter.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0753"}, {"Reference": "CVE-2002-1525", "Description": "Remote attackers can read arbitrary files via an absolute pathname.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1525"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "382", "Name": "J2EE Bad Practices: Use of System.exit()", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "A J2EE application uses System.exit(), which also shuts down its container.", "ExtendedDescription": "It is never a good idea for a web application to attempt to shut down the application container. Access to a function that can shut down the application is an avenue for Denial of Service (DoS) attacks.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "705", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "A call to System.exit() is probably part of leftover debug code or code imported from a non-J2EE application."}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Strategy": "Separation of Privilege", "Description": "The shutdown function should be a privileged function available only to a properly authorized administrative user"}, {"Phase": ["Implementation"], "Description": "Web applications should not call methods that cause the virtual machine to exit, such as System.exit()"}, {"Phase": ["Implementation"], "Description": "Web applications should also not throw any Throwables to the application server as this may adversely affect the container."}, {"Phase": ["Implementation"], "Description": "Non-web applications may have a main() method that contains a System.exit(), but generally should not call System.exit() from other locations in the code"}], "DemonstrativeExamples": [{"ID": "DX-199", "Entries": [{"IntroText": "Included in the doPost() method defined below is a call to System.exit() in the event of a specific exception."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tPublic void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\ttry {\n\t\t\t...\n\t\t} catch (ApplicationSpecificException ase) {\n\t\t\tlogger.error(\"Caught: \" + ase.toString());\n\t\t\tSystem.exit(1);\n\t\t}\n\t}\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "383", "Name": "J2EE Bad Practices: Direct Use of Threads", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "Thread management in a Web application is forbidden in some circumstances and is always highly error prone.", "ExtendedDescription": "Thread management in a web application is forbidden by the J2EE standard in some circumstances and is always highly error prone. Managing threads is difficult and is likely to interfere in unpredictable ways with the behavior of the application container. Even without interfering with the container, thread management usually leads to bugs that are hard to detect and diagnose like deadlock, race conditions, and other synchronization errors.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "695", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Quality Degradation"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "For EJB, use framework approaches for parallel execution, instead of using threads."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following example, a new Thread object is created and invoked directly from within the body of a doGet() method in a Java servlet."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n```\n// Perform servlet tasks.* \n\t\t\t...\n\t\t\t\n\t\t\t\n\t\t\t *// Create a new thread to handle background processing.* \n\t\t\tRunnable r = new Runnable() {\n\t\t\t```\n\t\t\t\t\tpublic void run() {\n```\n// Process and store request statistics.* \n\t\t\t\t\t\t\t...}};\n\t\t\t\n\t\t\tnew Thread(r).start();}"}]}], "AffectedResources": ["System Process"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "384", "Name": "Session Fixation", "Abstraction": "Compound", "Structure": "Composite", "Status": "Incomplete", "Description": "Authenticating a user, or otherwise establishing a new user session, without invalidating any existing session identifier gives an attacker the opportunity to steal authenticated sessions.", "ExtendedDescription": "\n\nSuch a scenario is commonly observed when:\n\n\n  - A web application authenticates a user without first invalidating the existing session, thereby continuing to use the session already associated with the user.\n\n  - An attacker is able to force a known session identifier on a user so that, once the user authenticates, the attacker has access to the authenticated session.\n\n  - The application or container uses predictable session identifiers.\n\nIn the generic exploit of session fixation vulnerabilities, an attacker creates a new session on a web application and records the associated session identifier. The attacker then causes the victim to associate, and possibly authenticate, against the server using that session identifier, giving the attacker access to the user's account through the active session.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "610", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "610", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "Requires", "CweID": "346", "ViewID": "1000"}, {"Nature": "Requires", "CweID": "472", "ViewID": "1000"}, {"Nature": "Requires", "CweID": "441", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Invalidate any existing session identifiers prior to authorizing a new user session."}, {"Phase": ["Architecture and Design"], "Description": "For platforms such as ASP that do not generate new values for sessionid cookies, utilize a secondary cookie. In this approach, set a secondary cookie on the user's browser to a random value and set a session variable to the same value. If the session variable and the cookie value ever don't match, invalidate the session, and force the user to log on again."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following example shows a snippet of code from a J2EE web application where the application authenticates users with LoginContext.login() without first calling HttpSession.invalidate()."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tprivate void auth(LoginContext lc, HttpSession session) throws LoginException {\n\t\t...\n\t\tlc.login();\n\t\t...\n\t}\n```"}, {"BodyText": "In order to exploit the code above, an attacker could first create a session (perhaps by logging into the application) from a public terminal, record the session identifier assigned by the application, and reset the browser to the login page. Next, a victim sits down at the same public terminal, notices the browser open to the login page of the site, and enters credentials to authenticate against the application. The code responsible for authenticating the victim continues to use the pre-existing session identifier, now the attacker simply uses the session identifier recorded earlier to access the victim's active session, providing nearly unrestricted access to the victim's account for the lifetime of the session. Even given a vulnerable application, the success of the specific attack described here is dependent on several factors working in the favor of the attacker: access to an unmonitored public terminal, the ability to keep the compromised session active and a victim interested in logging into the vulnerable application on the public terminal."}, {"BodyText": "In most circumstances, the first two challenges are surmountable given a sufficient investment of time. Finding a victim who is both using a public terminal and interested in logging into the vulnerable application is possible as well, so long as the site is reasonably popular. The less well known the site is, the lower the odds of an interested victim using the public terminal and the lower the chance of success for the attack vector described above. The biggest challenge an attacker faces in exploiting session fixation vulnerabilities is inducing victims to authenticate against the vulnerable application using a session identifier known to the attacker."}, {"BodyText": "In the example above, the attacker did this through a direct method that is not subtle and does not scale suitably for attacks involving less well-known web sites. However, do not be lulled into complacency; attackers have many tools in their belts that help bypass the limitations of this attack vector. The most common technique employed by attackers involves taking advantage of cross-site scripting or HTTP response splitting vulnerabilities in the target site [12]. By tricking the victim into submitting a malicious request to a vulnerable application that reflects JavaScript or other code back to the victim's browser, an attacker can create a cookie that will cause the victim to reuse a session identifier controlled by the attacker. It is worth noting that cookies are often tied to the top level domain associated with a given URL. If multiple applications reside on the same top level domain, such as bank.example.com and recipes.example.com, a vulnerability in one application can allow an attacker to set a cookie with a fixed session identifier that will be used in all interactions with any application on the domain example.com [29]."}]}, {"Entries": [{"IntroText": "The following example shows a snippet of code from a J2EE web application where the application authenticates users with a direct post to the <code>j_security_check</code>, which typically does not invalidate the existing session before processing the login request."}, {"Nature": "Bad", "Language": "HTML", "ExampleCode": "```\n\t<form method=\"POST\" action=\"j_security_check\">\n\t\t<input type=\"text\" name=\"j_username\">\n\t\t<input type=\"text\" name=\"j_password\">\n\t</form>\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2022-2820", "Description": "Website software for game servers does not proprerly terminate user sessions, allowing for possible session fixation", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-2820"}], "RelatedAttackPatterns": ["196", "21", "31", "39", "59", "60", "61"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.", "Comments": "While attack-oriented composites are supported in CWE, they have not been a focus of research. There is a chance that future research or CWE scope clarifications will change or deprecate them. Perform root-cause analysis to determine which weaknesses allow session fixation to occur, and map to those weaknesses. For example, predictable session identifiers might enable session fixation attacks to succeed; if this occurs, they might be better characterized as randomness/predictability weaknesses.", "Reasons": ["Other"]}, "Notes": [{"Type": "Other", "Note": "Other attack vectors include DNS poisoning and related network based attacks where an attacker causes the user to visit a malicious site by redirecting a request for a valid site. Network based attacks typically involve a physical presence on the victim's network or control of a compromised machine on the network, which makes them harder to exploit remotely, but their significance should not be overlooked. Less secure session management mechanisms, such as the default implementation in Apache Tomcat, allow session identifiers normally expected in a cookie to be specified on the URL as well, which enables an attacker to cause a victim to use a fixed session identifier simply by emailing a malicious URL."}], "Top25Examples": [{"Reference": "CVE-2021-29854", "Description": "IBM Maximo Asset Management 7.6.1.1 and 7.6.1.2 is vulnerable to HTTP header injection, caused by improper validation of input by the HOST headers. By sending a specially crafted HTTP request, a remote attacker could exploit this vulnerability to inject HTTP HOST header, which will allow the attacker to conduct various attacks against the vulnerable system, including cross-site scripting, cache poisoning or session hijacking. IBM X-Force ID: 205680."}, {"Reference": "CVE-2021-38997", "Description": "IBM API Connect V10.0.0.0 through V10.0.5.0, V10.0.1.0 through V10.0.1.7, and V2018.4.1.0 through 2018.4.1.19 is vulnerable to HTTP header injection, caused by improper validation of input by the HOST headers. This could allow an attacker to conduct various attacks against the vulnerable system, including cross-site scripting, cache poisoning or session hijacking. IBM X-Force ID: 213212."}, {"Reference": "CVE-2021-39028", "Description": "IBM Engineering Lifecycle Optimization - Publishing 6.0.6, 6.0.6.1, 7.0, 7.0.1, and 7.0.2 is vulnerable to HTTP header injection, caused by improper validation of input by the HOST headers. This could allow an attacker to conduct various attacks against the vulnerable system, including cross-site scripting, cache poisoning or session hijacking. IBM X-Force ID: 213866."}, {"Reference": "CVE-2022-2820", "Description": "Session Fixation in GitHub repository namelessmc/nameless prior to v2.0.2. "}, {"Reference": "CVE-2021-2351", "Description": "Vulnerability in the Advanced Networking Option component of Oracle Database Server. Supported versions that are affected are 12.1.0.2, 12.2.0.1 and 19c. Difficult to exploit vulnerability allows unauthenticated attacker with network access via Oracle Net to compromise Advanced Networking Option. Successful attacks require human interaction from a person other than the attacker and while the vulnerability is in Advanced Networking Option, attacks may significantly impact additional products. Successful attacks of this vulnerability can result in takeover of Advanced Networking Option. Note: The July 2021 Critical Patch Update introduces a number of Native Network Encryption changes to deal with vulnerability CVE-2021-2351 and prevent the use of weaker ciphers. Customers should review: \"Changes in Native Network Encryption with the July 2021 Critical Patch Update\" (Doc ID 2791571.1). CVSS 3.1 Base Score 8.3 (Confidentiality, Integrity and Availability impacts). CVSS Vector: (CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:H/I:H/A:H)."}, {"Reference": "CVE-2022-31798", "Description": "Nortek Linear eMerge E3-Series 0.32-07p devices are vulnerable to /card_scan.php?CardFormatNo= XSS with session fixation (via PHPSESSID) when they are chained together. This would allow an attacker to take over an admin account or a user account."}, {"Reference": "CVE-2022-38628", "Description": "Nortek Linear eMerge E3-Series 0.32-08f, 0.32-07p, 0.32-07e, 0.32-09c, 0.32-09b, 0.32-09a, and 0.32-08e were discovered to contain a cross-site scripting (XSS) vulnerability which is chained with a local session fixation. This vulnerability allows attackers to escalate privileges via unspecified vectors."}, {"Reference": "CVE-2022-26591", "Description": "FANTEC GmbH MWiD25-DS Firmware v2.000.030 allows unauthenticated attackers to access and download arbitrary files via a crafted GET request."}]}
{"ID": "385", "Name": "Covert Timing Channel", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information.", "ExtendedDescription": "\n\nIn some instances, knowing when data is transmitted between parties can provide a malicious user with privileged information. Also, externally monitoring the timing of operations can potentially reveal sensitive data. For example, a cryptographic operation can expose its internal state if the time it takes to perform the operation varies, based on the state.\n\n\nCovert channels are frequently classified as either storage or timing channels. Some examples of covert timing channels are the system's paging rate, the time a certain transaction requires to execute, and the time it takes to gain access to a shared bus.\n", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "514", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Other"], "Impact": ["Read Application Data", "Other"], "Note": "Information exposure."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Whenever possible, specify implementation strategies that do not introduce time variances in operations."}, {"Phase": ["Implementation"], "Description": "Often one can artificially manipulate the time which operations take or -- when operations occur -- can remove information from the attacker."}, {"Phase": ["Implementation"], "Description": "It is reasonable to add artificial or random delays so that the amount of CPU time consumed is independent of the action being taken by the application."}], "DemonstrativeExamples": [{"ID": "DX-193", "Entries": [{"IntroText": "In this example, the attacker observes how long an authentication takes when the user types in the correct password."}, {"BodyText": "When the attacker tries their own values, they can first try strings of various length. When they find a string of the right length, the computation will take a bit longer, because the for loop will run at least once. Additionally, with this code, the attacker can possibly learn one character of the password at a time, because when they guess the first character right, the computation will take longer than a wrong guesses. Such an attack can break even the most sophisticated password with a few hundred guesses."}, {"Nature": "Bad", "Language": "Python", "ExampleCode": "```\n\tdef validate_password(actual_pw, typed_pw): \n\t\t\tif len(actual_pw) <> len(typed_pw): \n\t\t\t\treturn 0\n\t\t\tfor i in len(actual_pw): \n\t\t\t\tif actual_pw[i] <> typed_pw[i]: \n\t\t\t\t\treturn 0\n\t\t\treturn 1\n```"}, {"BodyText": "Note that in this example, the actual password must be handled in constant time as far as the attacker is concerned, even if the actual password is of an unusual length. This is one reason why it is good to use an algorithm that, among other things, stores a seeded cryptographic one-way hash of the password, then compare the hashes, which will always be of the same length."}]}], "RelatedAttackPatterns": ["462"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "As of CWE 4.9, members of the CWE Hardware SIG are working to improve CWE's coverage of transient execution weaknesses, which include issues related to Spectre, Meltdown, and other attacks that create or exploit covert channels. As a result of that work, this entry might change in CWE 4.10."}], "Top25Examples": [{"Reference": "CVE-2022-24409", "Description": "Dell BSAFE SSL-J contains remediation for a covert timing channel vulnerability that may be exploited by malicious users to compromise the affected system. Only customers with active BSAFE maintenance contracts can receive details about this vulnerability. Public disclosure of the vulnerability details will be shared at a later date."}]}
{"ID": "386", "Name": "Symbolic Name not Mapping to Correct Object", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "A constant symbolic reference to an object is used, even though the reference can resolve to a different object over time.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "706", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "367", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "610", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "486", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "The attacker can gain access to otherwise unauthorized resources."}, {"Scope": ["Integrity", "Confidentiality", "Other"], "Impact": ["Modify Application Data", "Modify Files or Directories", "Read Application Data", "Read Files or Directories", "Other"], "Note": "Race conditions such as this kind may be employed to gain read or write access to resources not normally readable or writable by the user in question."}, {"Scope": ["Integrity", "Other"], "Impact": ["Modify Application Data", "Other"], "Note": "The resource in question, or other resources (through the corrupted one) may be changed in undesirable ways by a malicious user."}, {"Scope": ["Non-Repudiation"], "Impact": ["Hide Activities"], "Note": "If a file or other resource is written in this method, as opposed to a valid way, logging of the activity may not occur."}, {"Scope": ["Non-Repudiation", "Integrity"], "Impact": ["Modify Files or Directories"], "Note": "In some cases it may be possible to delete files that a malicious user might not otherwise have access to -- such as log files."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "39", "Name": "Path Traversal: 'C:dirname'", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product accepts input that contains a drive letter or Windows volume letter ('C:dirname') that potentially redirects access to an unintended location or arbitrary file.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "36", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries."}, {"Scope": ["Integrity"], "Impact": ["Modify Files or Directories"], "Note": "The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication."}, {"Scope": ["Confidentiality"], "Impact": ["Read Files or Directories"], "Note": "The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software."}], "PotentialMitigations": [{"MitigationID": "MIT-5.1", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\n\n\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n", "Effectiveness": "High"}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "ObservedExamples": [{"Reference": "CVE-2001-0038", "Description": "Remote attackers can read arbitrary files by specifying the drive letter in the requested URL.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0038"}, {"Reference": "CVE-2001-0255", "Description": "FTP server allows remote attackers to list arbitrary directories by using the \"ls\" command and including the drive letter name (e.g. C:) in the requested pathname.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0255"}, {"Reference": "CVE-2001-0687", "Description": "FTP server allows a remote attacker to retrieve privileged system information by specifying arbitrary paths.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0687"}, {"Reference": "CVE-2001-0933", "Description": "FTP server allows remote attackers to list the contents of arbitrary drives via a ls command that includes the drive letter as an argument.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0933"}, {"Reference": "CVE-2002-0466", "Description": "Server allows remote attackers to browse arbitrary directories via a full pathname in the arguments to certain dynamic pages.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0466"}, {"Reference": "CVE-2002-1483", "Description": "Remote attackers can read arbitrary files via an HTTP request whose argument is a filename of the form \"C:\" (Drive letter), \"//absolute/path\", or \"..\" .", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1483"}, {"Reference": "CVE-2004-2488", "Description": "FTP server read/access arbitrary files using \"C:\\\" filenames", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2488"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-27065", "Description": "Microsoft Exchange Server Remote Code Execution Vulnerability"}, {"Reference": "CVE-2022-29457", "Description": "Zoho ManageEngine ADSelfService Plus before 6121, ADAuditPlus 7060, Exchange Reporter Plus 5701, and ADManagerPlus 7131 allow NTLM Hash disclosure during certain storage-path configuration steps."}, {"Reference": "CVE-2022-32328", "Description": "Fast Food Ordering System v1.0 is vulnerable to Delete any file. via /ffos/classes/Master.php?f=delete_img."}, {"Reference": "CVE-2022-36687", "Description": "Ingredients Stock Management System v1.0 was discovered to contain an arbitrary file deletion vulnerability via the component /classes/Master.php?f=delete_img."}, {"Reference": "CVE-2022-44280", "Description": "Automotive Shop Management System v1.0 is vulnerable to Delete any file via /asms/classes/Master.php?f=delete_img."}]}
{"ID": "390", "Name": "Detection of Error Condition Without Action", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product detects a specific error, but takes no actions to handle the error.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "755", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "401", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Varies by Context", "Unexpected State", "Alter Execution Logic"], "Note": "An attacker could utilize an ignored error condition to place the system in an unexpected state that could lead to the execution of unintended logic and could cause other unintended behavior."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Properly handle each exception. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment."}, {"Phase": ["Implementation"], "Description": "If a function returns an error, it is important to either fix the problem and try again, alert the user that an error has happened and let the program continue, or alert the user and close and cleanup the program."}, {"Phase": ["Testing"], "Description": "Subject the product to extensive testing to discover some of the possible instances of where/how errors or return values are not handled. Consider testing techniques such as ad hoc, equivalence partitioning, robustness and fault tolerance, mutation, and fuzzing."}], "DemonstrativeExamples": [{"ID": "DX-201", "Entries": [{"IntroText": "The following example attempts to allocate memory for a character. After the call to malloc, an if statement is used to check whether the malloc function failed."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tfoo=malloc(sizeof(char)); //the next line checks to see if malloc failed\n\tif (foo==NULL) {\n\t\t//We do nothing so we just ignore the error.\n\t}\n```"}, {"BodyText": "The conditional successfully detects a NULL return value from malloc indicating a failure, however it does not do anything to handle the problem. Unhandled errors may have unexpected results and may cause the program to crash or terminate."}, {"BodyText": "Instead, the if block should contain statements that either attempt to fix the problem or notify the user that an error has occurred and continue processing or perform some cleanup and gracefully terminate the program. The following example notifies the user that the malloc function did not allocate the required memory resources and returns an error code."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n\tfoo=malloc(sizeof(char)); //the next line checks to see if malloc failed\n\tif (foo==NULL) {\n\t\tprintf(\"Malloc failed to allocate memory resources\");\n\t\treturn -1;\n\t}\n```"}]}, {"Entries": [{"IntroText": "In the following C++ example the method readFile() will read the file whose name is provided in the input parameter and will return the contents of the file in char string. The method calls open() and read() may result in errors if the file does not exist or does not contain any data to read. These errors will be thrown when the is_open() method and good() method indicate errors opening or reading the file. However, these errors are not handled within the catch statement. Catch statements that do not perform any processing will have unexpected results. In this case an empty char string will be returned, and the file will not be properly closed."}, {"Nature": "Bad", "Language": "C++", "ExampleCode": "```\n\tchar* readfile (char *filename) {\n\t\t\ttry {\n\t\t\t\t\t// open input file\n\t\t\t\t\tifstream infile;\n\t\t\t\t\tinfile.open(filename);\n\t\t\t\t\tif (!infile.is_open()) {\n\t\t\t\t\t\tthrow \"Unable to open file \" + filename;\n\t\t\t\t\t}\n\t\t\t\t\t// get length of file\n\t\t\t\t\tinfile.seekg (0, ios::end);\n\t\t\t\t\tint length = infile.tellg();\n\t\t\t\t\tinfile.seekg (0, ios::beg);\n\t\t\t\t\t// allocate memory\n\t\t\t\t\tchar *buffer = new char [length];\n\t\t\t\t\t// read data from file\n\t\t\t\t\tinfile.read (buffer,length);\n\t\t\t\t\tif (!infile.good()) {\n\t\t\t\t\t\tthrow \"Unable to read from file \" + filename;\n\t\t\t\t\t}\n\t\t\t\t\tinfile.close();\n\t\t\t\t\treturn buffer;\n\t\t\t}\n\t\t\tcatch (...) {\n\t\t\t\t/* bug: insert code to handle this later */\n\t\t\t}\n\t}\n```"}, {"BodyText": "The catch statement should contain statements that either attempt to fix the problem or notify the user that an error has occurred and continue processing or perform some cleanup and gracefully terminate the program. The following C++ example contains two catch statements. The first of these will catch a specific error thrown within the try block, and the second catch statement will catch all other errors from within the catch block. Both catch statements will notify the user that an error has occurred, close the file, and rethrow to the block that called the readFile() method for further handling or possible termination of the program."}, {"Nature": "Good", "Language": "C++", "ExampleCode": "```\n\tchar* readFile (char *filename) {\n\t\t\ttry {\n\t\t\t\t\t// open input file\n\t\t\t\t\tifstream infile;\n\t\t\t\t\tinfile.open(filename);\n\t\t\t\t\tif (!infile.is_open()) {\n\t\t\t\t\t\tthrow \"Unable to open file \" + filename;\n\t\t\t\t\t}\n\t\t\t\t\t// get length of file\n\t\t\t\t\tinfile.seekg (0, ios::end);\n\t\t\t\t\tint length = infile.tellg();\n\t\t\t\t\tinfile.seekg (0, ios::beg);\n\t\t\t\t\t// allocate memory\n\t\t\t\t\tchar *buffer = new char [length];\n\t\t\t\t\t// read data from file\n\t\t\t\t\tinfile.read (buffer,length);\n\t\t\t\t\tif (!infile.good()) {\n\t\t\t\t\t\tthrow \"Unable to read from file \" + filename;\n\t\t\t\t\t}\n\t\t\t\t\tinfile.close();\n\t\t\t\t\treturn buffer;\n\t\t\t}\n\t\t\tcatch (char *str) {\n\t\t\t\tprintf(\"Error: %s \\n\", str);\n\t\t\t\tinfile.close();\n\t\t\t\tthrow str;\n\t\t\t}\n\t\t\tcatch (...) {\n\t\t\t\tprintf(\"Error occurred trying to read from file \\n\");\n\t\t\t\tinfile.close();\n\t\t\t\tthrow;\n\t\t\t}\n\t}\n```"}]}, {"Entries": [{"IntroText": "In the following Java example the method readFile will read the file whose name is provided in the input parameter and will return the contents of the file in a String object. The constructor of the FileReader object and the read method call may throw exceptions and therefore must be within a try/catch block. While the catch statement in this example will catch thrown exceptions in order for the method to compile, no processing is performed to handle the thrown exceptions. Catch statements that do not perform any processing will have unexpected results. In this case, this will result in the return of a null String."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic String readFile(String filename) {\n\t\t\tString retString = null;\n\t\t\ttry {\n\t\t\t\t\t// initialize File and FileReader objects\n\t\t\t\t\tFile file = new File(filename);\n\t\t\t\t\tFileReader fr = new FileReader(file);\n\t\t\t\t\t// initialize character buffer\n\t\t\t\t\tlong fLen = file.length();\n\t\t\t\t\tchar[] cBuf = new char[(int) fLen];\n\t\t\t\t\t// read data from file\n\t\t\t\t\tint iRead = fr.read(cBuf, 0, (int) fLen);\n\t\t\t\t\t// close file\n\t\t\t\t\tfr.close();\n\t\t\t\t\tretString = new String(cBuf);\n\t\t\t} catch (Exception ex) {\n\t\t\t\t/* do nothing, but catch so it'll compile... */\n\t\t\t}\n\t\t\treturn retString;\n\t}\n```"}, {"BodyText": "The catch statement should contain statements that either attempt to fix the problem, notify the user that an exception has been raised and continue processing, or perform some cleanup and gracefully terminate the program. The following Java example contains three catch statements. The first of these will catch the FileNotFoundException that may be thrown by the FileReader constructor called within the try/catch block. The second catch statement will catch the IOException that may be thrown by the read method called within the try/catch block. The third catch statement will catch all other exceptions thrown within the try block. For all catch statements the user is notified that the exception has been thrown and the exception is rethrown to the block that called the readFile() method for further processing or possible termination of the program. Note that with Java it is usually good practice to use the getMessage() method of the exception class to provide more information to the user about the exception raised."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tpublic String readFile(String filename) throws FileNotFoundException, IOException, Exception {\n\t\t\tString retString = null;\n\t\t\ttry {\n\t\t\t\t\t// initialize File and FileReader objects\n\t\t\t\t\tFile file = new File(filename);\n\t\t\t\t\tFileReader fr = new FileReader(file);\n\t\t\t\t\t// initialize character buffer\n\t\t\t\t\tlong fLen = file.length();\n\t\t\t\t\tchar [] cBuf = new char[(int) fLen];\n\t\t\t\t\t// read data from file\n\t\t\t\t\tint iRead = fr.read(cBuf, 0, (int) fLen);\n\t\t\t\t\t// close file\n\t\t\t\t\tfr.close();\n\t\t\t\t\tretString = new String(cBuf);\n\t\t\t} catch (FileNotFoundException ex) {\n\t\t\t\tSystem.err.println (\"Error: FileNotFoundException opening the input file: \" + filename );\n\t\t\t\tSystem.err.println (\"\" + ex.getMessage() );\n\t\t\t\tthrow new FileNotFoundException(ex.getMessage());\n\t\t\t} catch (IOException ex) {\n\t\t\t\tSystem.err.println(\"Error: IOException reading the input file.\\n\" + ex.getMessage() );\n\t\t\t\tthrow new IOException(ex);\n\t\t\t} catch (Exception ex) {\n\t\t\t\tSystem.err.println(\"Error: Exception reading the input file.\\n\" + ex.getMessage() );\n\t\t\t\tthrow new Exception(ex);\n\t\t\t}\n\t\t\treturn retString;\n\t}\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2022-21820", "Description": "A GPU data center manager detects an error due to a malformed request but does not act on it, leading to memory corruption.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-21820"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-20057", "Description": "In btif, there is a possible memory corruption due to incorrect error handling. This could lead to local escalation of privilege with System execution privileges needed. User interaction is needed for exploitation. Patch ID: ALPS06271186; Issue ID: ALPS06271186."}, {"Reference": "CVE-2021-1906", "Description": "Improper handling of address deregistration on failure can lead to new GPU address allocation failure. in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables"}, {"Reference": "CVE-2022-21820", "Description": "NVIDIA DCGM contains a vulnerability in nvhostengine, where a network user can cause detection of error conditions without action, which may lead to limited code execution, some denial of service, escalation of privileges, and limited impacts to both data confidentiality and integrity."}]}
{"ID": "391", "Name": "Unchecked Error Condition", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "[PLANNED FOR DEPRECATION. SEE MAINTENANCE NOTES AND CONSIDER CWE-252, CWE-248, OR CWE-1069.] Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "754", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "703", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "703", "ViewID": "1340", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Varies by Context", "Unexpected State", "Alter Execution Logic"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Requirements"], "Description": "The choice between a language which has named or unnamed exceptions needs to be done. While unnamed exceptions exacerbate the chance of not properly dealing with an exception, named exceptions suffer from the up call version of the weak base class problem."}, {"Phase": ["Requirements"], "Description": "A language can be used which requires, at compile time, to catch all serious exceptions. However, one must make sure to use the most current version of the API as new exceptions could be added."}, {"Phase": ["Implementation"], "Description": "Catch all relevant exceptions. This is the recommended solution. Ensure that all exceptions are handled in such a way that you can be sure of the state of your system at any given moment."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code excerpt ignores a rarely-thrown exception from doExchange()."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\ttry {\n\t\tdoExchange();\n\t}\n\tcatch (RareException e) {\n```\n// this can never happen* \n\t\t\t}"}, {"BodyText": "If a RareException were to ever be thrown, the program would continue to execute as though nothing unusual had occurred. The program records no evidence indicating the special situation, potentially frustrating any later attempt to explain the program's behavior."}]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is slated for deprecation; it has multiple widespread interpretations by CWE analysts. It combines information from three different taxonomies, but each taxonomy is talking about a slightly different issue.", "Comments": "Consider CWE-252, CWE-1069, CWE-248, or other entries under CWE-754: Improper Check for Unusual or Exceptional Conditions or CWE-755: Improper Handling of Exceptional Conditions.", "Reasons": ["Potential Deprecation", "Frequent Misuse", "Frequent Misinterpretation"], "Suggestions": [{"CweID": "252", "Comment": "Unchecked Return Value"}, {"CweID": "1069", "Comment": "Empty Exception Block"}, {"CweID": "248", "Comment": "Uncaught Exception"}]}, "Notes": [{"Type": "Maintenance", "Note": "This entry is slated for deprecation; it has multiple widespread interpretations by CWE analysts. It currently combines information from three different taxonomies, but each taxonomy is talking about a slightly different issue. CWE analysts might map to this entry based on any of these issues. 7PK has \"Empty Catch Block\" which has an association with empty exception block (CWE-1069); in this case, the exception has performed the check, but does not handle. In PLOVER there is \"Unchecked Return Value\" which is CWE-252, but unlike \"Empty Catch Block\" there isn't even a check of the issue - and \"Unchecked Error Condition\" implies lack of a check. For CLASP, \"Uncaught Exception\" (CWE-248) is associated with incorrect error propagation - uncovered in CWE 3.2 and earlier, at least. There are other issues related to error handling and checks."}, {"Type": "Other", "Note": "\n\nWhen a programmer ignores an exception, they implicitly state that they are operating under one of two assumptions:\n\n\n  - This method call can never fail.\n\n  - It doesn't matter if this call fails.\n\n"}]}
{"ID": "392", "Name": "Missing Report of Error Condition", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product encounters an error but does not provide a status code or return value to indicate that an error has occurred.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "755", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "684", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "703", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "703", "ViewID": "1340", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}, {"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Varies by Context", "Unexpected State"], "Note": "Errors that are not properly reported could place the system in an unexpected state that could lead to unintended behaviors."}], "DemonstrativeExamples": [{"ID": "DX-185", "Entries": [{"IntroText": "In the following snippet from a doPost() servlet method, the server returns \"200 OK\" (default) even if an error occurs."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\ttry {\n```\n// Something that may throw an exception.* \n\t\t\t...} catch (Throwable t) {\n\t```\n\t\tlogger.error(\"Caught: \" + t.toString());\n\t\treturn;\n\t}\n```"}]}], "ObservedExamples": [{"Reference": "[REF-1374]", "Description": "Chain: JavaScript-based cryptocurrency library can fall back to the insecure Math.random() function instead of reporting a failure (CWE-392), thus reducing the entropy (CWE-332) and leading to generation of non-unique cryptographic keys for Bitcoin wallets (CWE-1391)", "Link": "https://www.unciphered.com/blog/randstorm-you-cant-patch-a-house-of-cards"}, {"Reference": "CVE-2004-0063", "Description": "Function returns \"OK\" even if another function returns a different status code than expected, leading to accepting an invalid PIN number.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0063"}, {"Reference": "CVE-2002-1446", "Description": "Error checking routine in PKCS#11 library returns \"OK\" status even when invalid signature is detected, allowing spoofed messages.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1446"}, {"Reference": "CVE-2002-0499", "Description": "Kernel function truncates long pathnames without generating an error, leading to operation on wrong directory.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0499"}, {"Reference": "CVE-2005-2459", "Description": "Function returns non-error value when a particular erroneous condition is encountered, leading to resultant NULL dereference.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2459"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-24448", "Description": "An issue was discovered in fs/nfs/dir.c in the Linux kernel before 5.16.5. If an application sets the O_DIRECTORY flag, and tries to open a regular file, nfs_atomic_open() performs a regular lookup. If a regular file is found, ENOTDIR should occur, but the server instead returns uninitialized data in the file descriptor."}]}
{"ID": "393", "Name": "Return of Wrong Status Code", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "A function or operation returns an incorrect return value or status code that does not indicate an error, but causes the product to modify its behavior based on the incorrect result.", "ExtendedDescription": "This can lead to unpredictable behavior. If the function is used to make security-critical decisions or provide security-critical information, then the wrong status code can cause the product to assume that an action is safe, even when it is not.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "684", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "703", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Unexpected State", "Alter Execution Logic"], "Note": "This weakness could place the system in a state that could lead unexpected logic to be executed or other unintended behaviors."}], "DetectionMethods": [{"DetectionMethodID": "DM-13", "Method": "Fuzzing", "Description": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.", "Effectiveness": "High"}], "DemonstrativeExamples": [{"ID": "DX-186", "Entries": [{"IntroText": "In the following example, an HTTP 404 status code is returned in the event of an IOException encountered in a Java servlet. A 404 code is typically meant to indicate a non-existent resource and would be somewhat misleading in this case."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\ttry {\n```\n// something that might throw IOException* \n\t\t\t...} catch (IOException ioe) {\n\t```\n\t\tresponse.sendError(SC_NOT_FOUND);\n\t}\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2003-1132", "Description": "DNS server returns wrong response code for non-existent AAAA record, which effectively says that the domain is inaccessible.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1132"}, {"Reference": "CVE-2001-1509", "Description": "Hardware-specific implementation of system call causes incorrect results from geteuid.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1509"}, {"Reference": "CVE-2001-1559", "Description": "Chain: System call returns wrong value (CWE-393), leading to a resultant NULL dereference (CWE-476).", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1559"}, {"Reference": "CVE-2014-1266", "Description": "chain: incorrect \"goto\" in Apple SSL product bypasses certificate validation, allowing Adversary-in-the-Middle (AITM) attack (Apple \"goto fail\" bug). CWE-705 (Incorrect Control Flow Scoping) -> CWE-561 (Dead Code) -> CWE-295 (Improper Certificate Validation) -> CWE-393 (Return of Wrong Status Code) -> CWE-300 (Channel Accessible by Non-Endpoint).", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-1266"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This can be primary or resultant, but it is probably most often primary to other issues."}]}
{"ID": "394", "Name": "Unexpected Status Code or Return Value", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product does not properly check when a function or operation returns a value that is legitimate for the function, but is not expected by the product.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "754", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Unexpected State", "Alter Execution Logic"]}], "ObservedExamples": [{"Reference": "CVE-2004-1395", "Description": "Certain packets (zero byte and other lengths) cause a recvfrom call to produce an unexpected return code that causes a server's listening loop to exit.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1395"}, {"Reference": "CVE-2002-2124", "Description": "Unchecked return code from recv() leads to infinite loop.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2124"}, {"Reference": "CVE-2005-2553", "Description": "Kernel function does not properly handle when a null is returned by a function call, causing it to call another function that it shouldn't.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2553"}, {"Reference": "CVE-2005-1858", "Description": "Memory not properly cleared when read() function call returns fewer bytes than expected.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1858"}, {"Reference": "CVE-2000-0536", "Description": "Bypass access restrictions when connecting from IP whose DNS reverse lookup does not return a hostname.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0536"}, {"Reference": "CVE-2001-0910", "Description": "Bypass access restrictions when connecting from IP whose DNS reverse lookup does not return a hostname.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0910"}, {"Reference": "CVE-2004-2371", "Description": "Game server doesn't check return values for functions that handle text strings and associated size values.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2371"}, {"Reference": "CVE-2005-1267", "Description": "Resultant infinite loop when function call returns -1 value.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1267"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "Usually primary, but can be resultant from issues such as behavioral change or API abuse. This can produce resultant vulnerabilities."}], "Top25Examples": [{"Reference": "CVE-2021-32846", "Description": "HyperKit is a toolkit for embedding hypervisor capabilities in an application. In versions 0.20210107, function `pci_vtsock_proc_tx` in `virtio-sock` can lead to to uninitialized memory use. In this situation, there is a check for the return value to be less or equal to `VTSOCK_MAXSEGS`, but that check is not sufficient because the function can return `-1` if it finds an error it cannot recover from. Moreover, the negative return value will be used by `iovec_pull` in a while condition that can further lead to more corruption because the function is not designed to handle a negative `iov_len`. This issue may lead to a guest crashing the host causing a denial of service and, under certain circumstance, memory corruption. This issue is fixed in commit af5eba2360a7351c08dfd9767d9be863a50ebaba."}]}
{"ID": "395", "Name": "Use of NullPointerException Catch to Detect NULL Pointer Dereference", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "Catching NullPointerException should not be used as an alternative to programmatic checks to prevent dereferencing a null pointer.", "ExtendedDescription": "\n\nProgrammers typically catch NullPointerException under three circumstances:\n\n\n  - The program contains a null pointer dereference. Catching the resulting exception was easier than fixing the underlying problem.\n\n  - The program explicitly throws a NullPointerException to signal an error condition.\n\n  - The code is part of a test harness that supplies unexpected input to the classes under test.\n\nOf these three circumstances, only the last is acceptable.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "705", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "755", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Resource Consumption (CPU)"]}], "DetectionMethods": [{"Method": "Automated Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis\n\t\tBinary Weakness Analysis - including disassembler + source code weakness analysis", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFramework-based Fuzzer", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tManual Source Code Review (not inspections)", "Effectiveness": "SOAR Partial"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer", "Effectiveness": "High"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "Do not extensively rely on catching exceptions (especially for validating user input) to handle errors. Handling exceptions can decrease the performance of an application."}], "DemonstrativeExamples": [{"ID": "DX-202", "Entries": [{"IntroText": "The following code mistakenly catches a NullPointerException."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\ttry { \n\t\t mysteryMethod(); \n\t } catch (NullPointerException npe) {\n\t }\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "396", "Name": "Declaration of Catch for Generic Exception", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "Catching overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.", "ExtendedDescription": "Multiple catch blocks can get ugly and repetitive, but \"condensing\" catch blocks by catching a high-level class like Exception can obscure exceptions that deserve special treatment or that should not be caught at this point in the program. Catching an overly broad exception essentially defeats the purpose of a language's typed exceptions, and can become particularly dangerous if the program grows and begins to throw new types of exceptions. The new exception types will not receive any attention.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "705", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "755", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "221", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C#", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Python", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Non-Repudiation", "Other"], "Impact": ["Hide Activities", "Alter Execution Logic"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code excerpt handles three types of exceptions in an identical fashion."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\ttry {\n\t\tdoExchange();\n\t}\n\tcatch (IOException e) {\n\t\tlogger.error(\"doExchange failed\", e);\n\t}\n\tcatch (InvocationTargetException e) {\n\t\t\tlogger.error(\"doExchange failed\", e);\n\t}\n\tcatch (SQLException e) {\n\t\t\tlogger.error(\"doExchange failed\", e);\n\t}\n```"}, {"BodyText": "At first blush, it may seem preferable to deal with these exceptions in a single catch block, as follows:"}, {"Nature": "Bad", "ExampleCode": "```\n\ttry {\n\t\tdoExchange();\n\t}\n\tcatch (Exception e) {\n\t\tlogger.error(\"doExchange failed\", e);\n\t}\n```"}, {"BodyText": "However, if doExchange() is modified to throw a new type of exception that should be handled in some different kind of way, the broad catch block will prevent the compiler from pointing out the situation. Further, the new catch block will now also handle exceptions derived from RuntimeException such as ClassCastException, and NullPointerException, which is not the programmer's intent."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "397", "Name": "Declaration of Throws for Generic Exception", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "Throwing overly broad exceptions promotes complex error handling code that is more likely to contain security vulnerabilities.", "ExtendedDescription": "Declaring a method to throw Exception or Throwable makes it difficult for callers to perform proper error handling and error recovery. Java's exception mechanism, for example, is set up to make it easy for callers to anticipate what can go wrong and write code to handle each specific exceptional circumstance. Declaring that a method throws a generic form of exception defeats this system.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "705", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "221", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "703", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C#", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Non-Repudiation", "Other"], "Impact": ["Hide Activities", "Alter Execution Logic"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "DemonstrativeExamples": [{"ID": "DX-198", "Entries": [{"IntroText": "The following method throws three types of exceptions."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tpublic void doExchange() throws IOException, InvocationTargetException, SQLException {\n\t\t...\n\t}\n```"}, {"BodyText": "While it might seem tidier to write"}, {"Nature": "Bad", "ExampleCode": "```\n\tpublic void doExchange() throws Exception {\n\t\t...\n\t}\n```"}, {"BodyText": "doing so hampers the caller's ability to understand and handle the exceptions that occur. Further, if a later revision of doExchange() introduces a new type of exception that should be treated differently than previous exceptions, there is no easy way to enforce this requirement."}]}, {"Entries": [{"IntroText": "Early versions of C++ (C++98, C++03, C++11) included a feature known as Dynamic Exception Specification. This allowed functions to declare what type of exceptions it may throw. It is possible to declare a general class of exception to cover any derived exceptions that may be throw."}, {"Nature": "Bad", "ExampleCode": "```\n\tint myfunction() throw(std::exception) {\n\t\tif (0) throw out_of_range();\n\t\tthrow length_error();\n\t}\n```"}, {"BodyText": "In the example above, the code declares that myfunction() can throw an exception of type \"std::exception\" thus hiding details about the possible derived exceptions that could potentially be thrown."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Applicable Platform", "Note": "For C++, this weakness only applies to C++98, C++03, and C++11. It relies on a feature known as Dynamic Exception Specification, which was part of early versions of C++ but was deprecated in C++11. It has been removed for C++17 and later."}]}
{"ID": "40", "Name": "Path Traversal: '\\\\UNC\\share\\name\\' (Windows UNC Share)", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product accepts input that identifies a Windows UNC share ('\\\\UNC\\share\\name') that potentially redirects access to an unintended location or arbitrary file.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "36", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Modify Files or Directories"]}], "PotentialMitigations": [{"MitigationID": "MIT-5.1", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\n\n\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n", "Effectiveness": "High"}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "ObservedExamples": [{"Reference": "CVE-2001-0687", "Description": "FTP server allows a remote attacker to retrieve privileged web server system information by specifying arbitrary paths in the UNC format (\\\\computername\\sharename).", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0687"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-39838", "Description": "Systematic FIX Adapter (ALFAFX) 2.4.0.25 13/09/2017 allows remote file inclusion via a UNC share pathname, and also allows absolute path traversal to local pathnames."}, {"Reference": "CVE-2022-21999", "Description": "Windows Print Spooler Elevation of Privilege Vulnerability"}, {"Reference": "CVE-2022-1128", "Description": "Inappropriate implementation in Web Share API in Google Chrome on Windows prior to 100.0.4896.60 allowed an attacker on the local network segment to leak cross-origin data via a crafted HTML page."}, {"Reference": "CVE-2022-29281", "Description": "Notable before 1.9.0-beta.8 doesn't effectively prevent the opening of executable files when clicking on a link. There is improper validation of the file URI scheme. A hyperlink to an SMB share could lead to execution of an arbitrary program (or theft of NTLM credentials via an SMB relay attack, because the application resolves UNC paths)."}]}
{"ID": "400", "Name": "Uncontrolled Resource Consumption", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product does not properly control the allocation and maintenance of a limited resource, thereby enabling an actor to influence the amount of resources consumed, eventually leading to the exhaustion of available resources.", "ExtendedDescription": "\n\nLimited resources include memory, file system storage, database connection pool entries, and CPU. If an attacker can trigger the allocation of these limited resources, but the number or size of the resources is not controlled, then the attacker could cause a denial of service that consumes all available resources. This would prevent valid users from accessing the product, and it could potentially have an impact on the surrounding environment. For example, a memory exhaustion attack against an application could slow down the application as well as its host operating system.\n\n\nThere are at least three distinct scenarios which can commonly lead to resource exhaustion:\n\n\n  - Lack of throttling for the number of allocated resources\n\n  - Losing all references to a resource before reaching the shutdown stage\n\n  - Not closing/returning a resource after processing\n\nResource exhaustion problems are often result due to an incorrect implementation of the following situations:\n\n  - Error conditions and other exceptional circumstances.\n\n  - Confusion over which part of the program is responsible for releasing the resource.\n\n", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "664", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Resource Exhaustion"}], "ModesOfIntroduction": [{"Phase": "Operation"}, {"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart", "DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)", "DoS: Resource Consumption (Other)"], "Note": "The most common result of resource exhaustion is denial of service. The product may slow down, crash due to unhandled errors, or lock out legitimate users."}, {"Scope": ["Access Control", "Other"], "Impact": ["Bypass Protection Mechanism", "Other"], "Note": "In some cases it may be possible to force the product to \"fail open\" in the event of resource exhaustion. The state of the product -- and possibly the security functionality - may then be compromised."}], "DetectionMethods": [{"Method": "Automated Static Analysis", "Description": "\n\nAutomated static analysis typically has limited utility in recognizing resource exhaustion problems, except for program-independent system resources such as files, sockets, and processes. For system resources, automated static analysis may be able to detect circumstances in which resources are not released after they have expired. Automated analysis of configuration files may be able to detect settings that do not specify a maximum value.\n\n\nAutomated static analysis tools will not be appropriate for detecting exhaustion of custom resources, such as an intended security policy in which a bulletin board user is only allowed to make a limited number of posts per day.\n", "Effectiveness": "Limited"}, {"Method": "Automated Dynamic Analysis", "Description": "Certain automated dynamic analysis techniques may be effective in spotting resource exhaustion problems, especially with resources such as processes, memory, and connections. The technique may involve generating a large number of requests to the product within a short time frame.", "Effectiveness": "Moderate"}, {"Method": "Fuzzing", "Description": "While fuzzing is typically geared toward finding low-level implementation bugs, it can inadvertently find resource exhaustion problems. This can occur when the fuzzer generates a large number of test cases but does not restart the targeted product in between test cases. If an individual test case produces a crash, but it does not do so reliably, then an inability to handle resource exhaustion may be the cause.", "Effectiveness": "Opportunistic"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Design throttling mechanisms into the system architecture. The best protection is to limit the amount of resources that an unauthorized user can cause to be expended. A strong authentication and access control model will help prevent such attacks from occurring in the first place. The login application should be protected against DoS attacks as much as possible. Limiting the database access, perhaps by caching result sets, can help minimize the resources expended. To further limit the potential for a DoS attack, consider tracking the rate of requests received from users and blocking requests that exceed a defined rate threshold."}, {"Phase": ["Architecture and Design"], "Description": "\n\nMitigation of resource exhaustion attacks requires that the target system either:\n\n\n  - recognizes the attack and denies that user further access for a given amount of time, or\n\n  - uniformly throttles all requests in order to make it more difficult to consume resources more quickly than they can again be freed.\n\nThe first of these solutions is an issue in itself though, since it may allow attackers to prevent the use of the system by a particular valid user. If the attacker impersonates the valid user, they may be able to prevent the user from accessing the server in question.\n\nThe second solution is simply difficult to effectively institute -- and even when properly done, it does not provide a full solution. It simply makes the attack require more resources on the part of the attacker.\n"}, {"Phase": ["Architecture and Design"], "Description": "Ensure that protocols have specific limits of scale placed on them."}, {"Phase": ["Implementation"], "Description": "Ensure that all failures in resource allocation place the system into a safe posture."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following example demonstrates the weakness."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tclass Worker implements Executor {\n\t\t\t...\n\t\t\tpublic void execute(Runnable r) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t...\n\t\t\t\t\t}\n\t\t\t\t\tcatch (InterruptedException ie) {\n```\n// postpone response* \n\t\t\t\t\t\t\tThread.currentThread().interrupt();}}\n\t\t\t\n\t\t\tpublic Worker(Channel ch, int nworkers) {\n\t\t\t```\n\t\t\t\t...\n\t\t\t}\n\t\t\tprotected void activate() {\n\t\t\t\t\tRunnable loop = new Runnable() {\n\t\t\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tfor (;;) {\n\t\t\t\t\t\t\t\t\t\t\tRunnable r = ...;\n\t\t\t\t\t\t\t\t\t\t\tr.run();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tcatch (InterruptedException ie) {\n\t\t\t\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tnew Thread(loop).start();\n\t\t\t}\n\t}\n```"}, {"BodyText": "There are no limits to runnables. Potentially an attacker could cause resource problems very quickly."}]}, {"ID": "DX-25", "Entries": [{"IntroText": "This code allocates a socket and forks each time it receives a new connection."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tsock=socket(AF_INET, SOCK_STREAM, 0);\n\twhile (1) {\n\t\tnewsock=accept(sock, ...);\n\t\tprintf(\"A connection has been accepted\\n\");\n\t\tpid = fork();\n\t}\n```"}, {"BodyText": "The program does not track how many connections have been made, and it does not limit the number of connections. Because forking is a relatively expensive operation, an attacker would be able to cause the system to run out of CPU, processes, or memory by making a large number of connections. Alternatively, an attacker could consume all available connections, preventing others from accessing the system remotely."}]}, {"ID": "DX-50", "Entries": [{"IntroText": "In the following example a server socket connection is used to accept a request to store data on the local file system using a specified filename. The method openSocketConnection establishes a server socket to accept requests from a client. When a client establishes a connection to this service the getNextMessage method is first used to retrieve from the socket the name of the file to store the data, the openFileToWrite method will validate the filename and open a file to write to on the local file system. The getNextMessage is then used within a while loop to continuously read data from the socket and output the data to the file until there is no longer any data from the socket."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint writeDataFromSocketToFile(char *host, int port)\n\t{\n\t\t\tchar filename[FILENAME_SIZE];\n\t\t\tchar buffer[BUFFER_SIZE];\n\t\t\tint socket = openSocketConnection(host, port);\n\t\t\tif (socket < 0) {\n\t\t\t\tprintf(\"Unable to open socket connection\");\n\t\t\t\treturn(FAIL);\n\t\t\t}\n\t\t\tif (getNextMessage(socket, filename, FILENAME_SIZE) > 0) {\n\t\t\t\t\tif (openFileToWrite(filename) > 0) {\n\t\t\t\t\t\t\twhile (getNextMessage(socket, buffer, BUFFER_SIZE) > 0){\n\t\t\t\t\t\t\t\tif (!(writeToFile(buffer) > 0))\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcloseFile();\n\t\t\t}\n\t\t\tcloseSocket(socket);\n\t}\n```"}, {"BodyText": "This example creates a situation where data can be dumped to a file on the local file system without any limits on the size of the file. This could potentially exhaust file or disk resources and/or limit other clients' ability to access the service."}]}, {"ID": "DX-51", "Entries": [{"IntroText": "In the following example, the processMessage method receives a two dimensional character array containing the message to be processed. The two-dimensional character array contains the length of the message in the first character array and the message body in the second character array. The getMessageLength method retrieves the integer value of the length from the first character array. After validating that the message length is greater than zero, the body character array pointer points to the start of the second character array of the two-dimensional character array and memory is allocated for the new body character array."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n```\n/* process message accepts a two-dimensional character array of the form [length][body] containing the message to be processed */* \n\tint processMessage(char **message)\n\t{\n\t```\n\t\t\tchar *body;\n\t\t\tint length = getMessageLength(message[0]);\n\t\t\tif (length > 0) {\n\t\t\t\tbody = &message[1][0];\n\t\t\t\tprocessMessageBody(body);\n\t\t\t\treturn(SUCCESS);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprintf(\"Unable to process message; invalid message length\");\n\t\t\t\treturn(FAIL);\n\t\t\t}\n\t}\n```"}, {"BodyText": "This example creates a situation where the length of the body character array can be very large and will consume excessive memory, exhausting system resources. This can be avoided by restricting the length of the second character array with a maximum length check"}, {"BodyText": "Also, consider changing the type from 'int' to 'unsigned int', so that you are always guaranteed that the number is positive. This might not be possible if the protocol specifically requires allowing negative values, or if you cannot control the return value from getMessageLength(), but it could simplify the check to ensure the input is positive, and eliminate other errors such as signed-to-unsigned conversion errors (CWE-195) that may occur elsewhere in the code."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n\tunsigned int length = getMessageLength(message[0]);\n\tif ((length > 0) && (length < MAX_LENGTH)) {...}\n```"}]}, {"ID": "DX-52", "Entries": [{"IntroText": "In the following example, a server object creates a server socket and accepts client connections to the socket. For every client connection to the socket a separate thread object is generated using the ClientSocketThread class that handles request made by the client through the socket."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic void acceptConnections() {\n\t\t\ttry {\n\t\t\t\tServerSocket serverSocket = new ServerSocket(SERVER_PORT);\n\t\t\t\tint counter = 0;\n\t\t\t\tboolean hasConnections = true;\n\t\t\t\twhile (hasConnections) {\n\t\t\t\t\tSocket client = serverSocket.accept();\n\t\t\t\t\tThread t = new Thread(new ClientSocketThread(client));\n\t\t\t\t\tt.setName(client.getInetAddress().getHostName() + \":\" + counter++);\n\t\t\t\t\tt.start();\n\t\t\t\t}\n\t\t\t\tserverSocket.close();\n\t\t\t} catch (IOException ex) {...}\n\t}\n```"}, {"BodyText": "In this example there is no limit to the number of client connections and client threads that are created. Allowing an unlimited number of client connections and threads could potentially overwhelm the system and system resources."}, {"BodyText": "The server should limit the number of client connections and the client threads that are created. This can be easily done by creating a thread pool object that limits the number of threads that are generated."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tpublic static final int SERVER_PORT = 4444;\n\tpublic static final int MAX_CONNECTIONS = 10;\n\t...\n\tpublic void acceptConnections() {\n\t\t\ttry {\n\t\t\t\tServerSocket serverSocket = new ServerSocket(SERVER_PORT);\n\t\t\t\tint counter = 0;\n\t\t\t\tboolean hasConnections = true;\n\t\t\t\twhile (hasConnections) {\n\t\t\t\t\thasConnections = checkForMoreConnections();\n\t\t\t\t\tSocket client = serverSocket.accept();\n\t\t\t\t\tThread t = new Thread(new ClientSocketThread(client));\n\t\t\t\t\tt.setName(client.getInetAddress().getHostName() + \":\" + counter++);\n\t\t\t\t\tExecutorService pool = Executors.newFixedThreadPool(MAX_CONNECTIONS);\n\t\t\t\t\tpool.execute(t);\n\t\t\t\t}\n\t\t\t\tserverSocket.close();\n\t\t\t} catch (IOException ex) {...}\n\t}\n```"}]}, {"Entries": [{"IntroText": "In the following example, the serve function receives an http request and an http response writer. It reads the entire request body."}, {"Nature": "Bad", "Language": "Go", "ExampleCode": "```\n\tfunc serve(w http.ResponseWriter, r *http.Request) { \n\t\t var body []byte\n\t\t if r.Body != nil {\n\t\t\t if data, err := io.ReadAll(r.Body); err == nil {\n\t\t\t\t body = data\n\t\t\t }\n\t\t }\n\t }\n```"}, {"BodyText": "Because ReadAll is defined to read from src until EOF, it does not treat an EOF from Read as an error to be reported. This example creates a situation where the length of the body supplied can be very large and will consume excessive memory, exhausting system resources. This can be avoided by ensuring the body does not exceed a predetermined length of bytes."}, {"BodyText": "MaxBytesReader prevents clients from accidentally or maliciously sending a large request and wasting server resources. If possible, the code could be changed to tell ResponseWriter to close the connection after the limit has been reached."}, {"Nature": "Good", "Language": "Go", "ExampleCode": "```\n\tfunc serve(w http.ResponseWriter, r *http.Request) { \n\t\t var body []byte\n\t\t const MaxRespBodyLength = 1e6\n\t\t if r.Body != nil {\n\t\t\t r.Body = http.MaxBytesReader(w, r.Body, MaxRespBodyLength)\n\t\t\t if data, err := io.ReadAll(r.Body); err == nil {\n\t\t\t\t body = data\n\t\t\t }\n\t\t }\n\t }\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2022-21668", "Description": "Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-21668"}, {"Reference": "CVE-2020-7218", "Description": "Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-7218"}, {"Reference": "CVE-2020-3566", "Description": "Resource exhaustion in distributed OS because of \"insufficient\" IGMP queue management, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-3566"}, {"Reference": "CVE-2009-2874", "Description": "Product allows attackers to cause a crash via a large number of connections.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2874"}, {"Reference": "CVE-2009-1928", "Description": "Malformed request triggers uncontrolled recursion, leading to stack exhaustion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1928"}, {"Reference": "CVE-2009-2858", "Description": "Chain: memory leak (CWE-404) leads to resource exhaustion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2858"}, {"Reference": "CVE-2009-2726", "Description": "Driver does not use a maximum width when invoking sscanf style functions, causing stack consumption.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2726"}, {"Reference": "CVE-2009-2540", "Description": "Large integer value for a length property in an object causes a large amount of memory allocation.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2540"}, {"Reference": "CVE-2009-2299", "Description": "Web application firewall consumes excessive memory when an HTTP request contains a large Content-Length value but no POST data.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2299"}, {"Reference": "CVE-2009-2054", "Description": "Product allows exhaustion of file descriptors when processing a large number of TCP packets.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2054"}, {"Reference": "CVE-2008-5180", "Description": "Communication product allows memory consumption with a large number of SIP requests, which cause many sessions to be created.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5180"}, {"Reference": "CVE-2008-2121", "Description": "TCP implementation allows attackers to consume CPU and prevent new connections using a TCP SYN flood attack.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2121"}, {"Reference": "CVE-2008-2122", "Description": "Port scan triggers CPU consumption with processes that attempt to read data from closed sockets.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2122"}, {"Reference": "CVE-2008-1700", "Description": "Product allows attackers to cause a denial of service via a large number of directives, each of which opens a separate window.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1700"}, {"Reference": "CVE-2007-4103", "Description": "Product allows resource exhaustion via a large number of calls that do not complete a 3-way handshake.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-4103"}, {"Reference": "CVE-2006-1173", "Description": "Mail server does not properly handle deeply nested multipart MIME messages, leading to stack exhaustion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-1173"}, {"Reference": "CVE-2007-0897", "Description": "Chain: anti-virus product encounters a malformed file but returns from a function without closing a file descriptor (CWE-775) leading to file descriptor consumption (CWE-400) and failed scans.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0897"}], "RelatedAttackPatterns": ["147", "227", "492"], "MappingNotes": {"Usage": "Discouraged", "Rationale": "CWE-400 is intended for incorrect behaviors in which the product is expected to track and restrict how many resources it consumes, but CWE-400 is often misused because it is conflated with the \"technical impact\" of vulnerabilities in which resource consumption occurs. It is sometimes used for low-information vulnerability reports. It is a level-1 Class (i.e., a child of a Pillar).", "Comments": "Closely analyze the specific mistake that is causing resource consumption, and perform a CWE mapping for that mistake. Consider children/descendants such as CWE-770: Allocation of Resources Without Limits or Throttling, CWE-771: Missing Reference to Active Allocated Resource, CWE-410: Insufficient Resource Pool, CWE-772: Missing Release of Resource after Effective Lifetime, CWE-834: Excessive Iteration, CWE-405: Asymmetric Resource Consumption (Amplification), and others.", "Reasons": ["Frequent Misuse"]}, "Notes": [{"Type": "Maintenance", "Note": "\"Resource consumption\" could be interpreted as a consequence instead of an insecure behavior, so this entry is being considered for modification. It appears to be referenced too frequently when more precise mappings are available. Some of its children, such as CWE-771, might be better considered as a chain."}, {"Type": "Theoretical", "Note": "Vulnerability theory is largely about how behaviors and resources interact. \"Resource exhaustion\" can be regarded as either a consequence or an attack, depending on the perspective. This entry is an attempt to reflect the underlying weaknesses that enable these attacks (or consequences) to take place."}, {"Type": "Other", "Note": "\n\nDatabase queries that take a long time to process are good DoS targets. An attacker would have to write a few lines of Perl code to generate enough traffic to exceed the site's ability to keep up. This would effectively prevent authorized users from using the site at all. Resources can be exploited simply by ensuring that the target machine must do much more work and consume more resources in order to service a request than the attacker must do to initiate a request.\n\n\nA prime example of this can be found in old switches that were vulnerable to \"macof\" attacks (so named for a tool developed by Dugsong). These attacks flooded a switch with random IP and MAC address combinations, therefore exhausting the switch's cache, which held the information of which port corresponded to which MAC addresses. Once this cache was exhausted, the switch would fail in an insecure way and would begin to act simply as a hub, broadcasting all traffic on all ports and allowing for basic sniffing attacks.\n"}, {"Type": "Maintenance", "Note": "The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions."}], "Top25Examples": [{"Reference": "CVE-2022-22155", "Description": "An Uncontrolled Resource Consumption vulnerability in the handling of IPv6 neighbor state change events in Juniper Networks Junos OS allows an adjacent attacker to cause a memory leak in the Flexible PIC Concentrator (FPC) of an ACX5448 router. The continuous flapping of an IPv6 neighbor with specific timing will cause the FPC to run out of resources, leading to a Denial of Service (DoS) condition. Once the condition occurs, further packet processing will be impacted, creating a sustained Denial of Service (DoS) condition, requiring a manual PFE restart to restore service. The following error messages will be seen after the FPC resources have been exhausted: fpc0 DNX_NH::dnx_nh_tag_ipv4_hw_install(),3135: dnx_nh_tag_ipv4_hw_install: BCM L3 Egress create object failed for NH 602 (-14:No resources for operation), BCM NH Params: unit:0 Port:41, L3_INTF:0 Flags: 0x40 fpc0 DNX_NH::dnx_nh_tag_ipv4_hw_install(),3135: dnx_nh_tag_ipv4_hw_install: BCM L3 Egress create object failed for NH 602 (-14:No resources for operation), BCM NH Params: unit:0 Port:41, L3_INTF:0 Flags: 0x40 fpc0 DNX_NH::dnx_nh_tag_ipv4_hw_install(),3135: dnx_nh_tag_ipv4_hw_install: BCM L3 Egress create object failed for NH 602 (-14:No resources for operation), BCM NH Params: unit:0 Port:41, L3_INTF:0 Flags: 0x40 fpc0 DNX_NH::dnx_nh_tag_ipv4_hw_install(),3135: dnx_nh_tag_ipv4_hw_install: BCM L3 Egress create object failed for NH 602 (-14:No resources for operation), BCM NH Params: unit:0 Port:41, L3_INTF:0 Flags: 0x40 This issue only affects the ACX5448 router. No other products or platforms are affected by this vulnerability. This issue affects Juniper Networks Junos OS on ACX5448: 18.4 versions prior to 18.4R3-S10; 19.1 versions prior to 19.1R3-S5; 19.2 versions prior to 19.2R1-S8, 19.2R3-S2; 19.3 versions prior to 19.3R2-S6, 19.3R3-S2; 19.4 versions prior to 19.4R1-S3, 19.4R2-S2, 19.4R3; 20.1 versions prior to 20.1R2; 20.2 versions prior to 20.2R1-S1, 20.2R2."}, {"Reference": "CVE-2022-40513", "Description": "Transient DOS due to uncontrolled resource consumption in WLAN firmware when peer is freed in non qos state."}, {"Reference": "CVE-2022-43572", "Description": "In Splunk Enterprise versions below 8.2.9, 8.1.12, and 9.0.2, sending a malformed file through the Splunk-to-Splunk (S2S) or HTTP Event Collector (HEC) protocols to an indexer results in a blockage or denial-of-service preventing further indexing. "}, {"Reference": "CVE-2022-1941", "Description": "A parsing vulnerability for the MessageSet type in the ProtocolBuffers versions prior to and including 3.16.1, 3.17.3, 3.18.2, 3.19.4, 3.20.1 and 3.21.5 for protobuf-cpp, and versions prior to and including 3.16.1, 3.17.3, 3.18.2, 3.19.4, 3.20.1 and 4.21.5 for protobuf-python can lead to out of memory failures. A specially crafted message with multiple key-value per elements creates parsing issues, and can lead to a Denial of Service against services receiving unsanitized input. We recommend upgrading to versions 3.18.3, 3.19.5, 3.20.2, 3.21.6 for protobuf-cpp and 3.18.3, 3.19.5, 3.20.2, 4.21.6 for protobuf-python. Versions for 3.16 and 3.17 are no longer updated."}, {"Reference": "CVE-2022-20624", "Description": "A vulnerability in the Cisco Fabric Services over IP (CFSoIP) feature of Cisco NX-OS Software could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition on an affected device. This vulnerability is due to insufficient validation of incoming CFSoIP packets. An attacker could exploit this vulnerability by sending crafted CFSoIP packets to an affected device. A successful exploit could allow the attacker to cause the affected device to reload, resulting in a DoS condition."}, {"Reference": "CVE-2021-22642", "Description": "An attacker could use specially crafted invalid Modbus frames to crash the Ovarro TBox system."}, {"Reference": "CVE-2021-3629", "Description": "A flaw was found in Undertow. A potential security issue in flow control handling by the browser over http/2 may potentially cause overhead or a denial of service in the server. The highest threat from this vulnerability is availability. This flaw affects Undertow versions prior to 2.0.40.Final and prior to 2.2.11.Final."}, {"Reference": "CVE-2022-0476", "Description": "Denial of Service in GitHub repository radareorg/radare2 prior to 5.6.4."}, {"Reference": "CVE-2022-0488", "Description": "An issue has been discovered in GitLab CE/EE affecting all versions starting with version 8.10. It was possible to trigger a timeout on a page with markdown by using a specific amount of block-quotes."}, {"Reference": "CVE-2022-0489", "Description": "An issue has been discovered in GitLab CE/EE affecting all versions starting with 8.15 . It was possible to trigger a DOS by using the math feature with a specific formula in issue comments."}, {"Reference": "CVE-2022-0671", "Description": "A flaw was found in vscode-xml in versions prior to 0.19.0. Schema download could lead to blind SSRF or DoS via a large file."}, {"Reference": "CVE-2022-0695", "Description": "Denial of Service in GitHub repository radareorg/radare2 prior to 5.6.4."}, {"Reference": "CVE-2022-1099", "Description": "Adding a very large number of tags to a runner in GitLab CE/EE affecting all versions prior to 14.7.7, 14.8 prior to 14.8.5, and 14.9 prior to 14.9.2 allows an attacker to impact the performance of GitLab"}, {"Reference": "CVE-2022-1174", "Description": "A potential DoS vulnerability was discovered in Gitlab CE/EE versions 13.7 before 14.7.7, all versions starting from 14.8 before 14.8.5, all versions starting from 14.9 before 14.9.2 allowed an attacker to trigger high CPU usage via a special crafted input added in Issues, Merge requests, Milestones, Snippets, Wiki pages, etc."}, {"Reference": "CVE-2022-1259", "Description": "A flaw was found in Undertow. A potential security issue in flow control handling by the browser over HTTP/2 may cause overhead or a denial of service in the server. This flaw exists because of an incomplete fix for CVE-2021-3629."}, {"Reference": "CVE-2022-1468", "Description": "On all versions of 17.0.x, 16.1.x, 15.1.x, 14.1.x, 13.1.x, 12.1.x, and 11.6.x on F5 BIG-IP, an authenticated iControl REST user with at least guest role privileges can cause processing delays to iControl REST requests via undisclosed requests. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated"}, {"Reference": "CVE-2022-1677", "Description": "In OpenShift Container Platform, a user with permissions to create or modify Routes can craft a payload that inserts a malformed entry into one of the cluster router's HAProxy configuration files. This malformed entry can match any arbitrary hostname, or all hostnames in the cluster, and direct traffic to an arbitrary application within the cluster, including one under attacker control."}, {"Reference": "CVE-2022-1797", "Description": "A malformed Class 3 common industrial protocol message with a cached connection can cause a denial-of-service condition in Rockwell Automation Logix Controllers, resulting in a major nonrecoverable fault. If the target device becomes unavailable, a user would have to clear the fault and redownload the user project file to bring the device back online."}, {"Reference": "CVE-2022-1982", "Description": "Uncontrolled resource consumption in Mattermost version 6.6.0 and earlier allows an authenticated attacker to crash the server via a crafted SVG attachment on a post."}, {"Reference": "CVE-2022-2004", "Description": "AutomationDirect DirectLOGIC is vulnerable to a a specially crafted packet can be sent continuously to the PLC to prevent access from DirectSoft and other devices, causing a denial-of-service condition. This issue affects: AutomationDirect DirectLOGIC D0-06 series CPUs D0-06DD1 versions prior to 2.72; D0-06DD2 versions prior to 2.72; D0-06DR versions prior to 2.72; D0-06DA versions prior to 2.72; D0-06AR versions prior to 2.72; D0-06AA versions prior to 2.72; D0-06DD1-D versions prior to 2.72; D0-06DD2-D versions prior to 2.72; D0-06DR-D versions prior to 2.72;"}, {"Reference": "CVE-2022-20425", "Description": "In addAutomaticZenRule of ZenModeHelper.java, there is a possible permanent degradation of performance due to resource exhaustion. This could lead to local denial of service with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12L Android-13Android ID: A-235823407"}, {"Reference": "CVE-2022-20482", "Description": "In createNotificationChannel of NotificationManager.java, there is a possible way to make the device unusable and require factory reset due to resource exhaustion. This could lead to local denial of service with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12 Android-12L Android-13Android ID: A-240422263"}, {"Reference": "CVE-2022-22101", "Description": "Denial of service in multimedia due to uncontrolled resource consumption while parsing an incoming HAB message in Snapdragon Auto"}, {"Reference": "CVE-2022-22145", "Description": "CAMS for HIS Log Server contained in the following Yokogawa Electric products is vulnerable to uncontrolled resource consumption. CENTUM CS 3000 versions from R3.08.10 to R3.09.00, CENTUM VP versions from R4.01.00 to R4.03.00, from R5.01.00 to R5.04.20, from R6.01.00 to R6.08.00, Exaopc versions from R3.72.00 to R3.79.00."}, {"Reference": "CVE-2022-22161", "Description": "An Uncontrolled Resource Consumption vulnerability in the kernel of Juniper Networks Junos OS allows an unauthenticated network based attacker to cause 100% CPU load and the device to become unresponsive by sending a flood of traffic to the out-of-band management ethernet port. Continued receipted of a flood will create a sustained Denial of Service (DoS) condition. Once the flood subsides the system will recover by itself. An indication that the system is affected by this issue would be that an irq handled by the fman process is shown to be using a high percentage of CPU cycles like in the following example output: user@host> show system processes extensive ... PID USERNAME PRI NICE SIZE RES STATE TIME WCPU COMMAND 31 root -84 -187 0K 16K WAIT 22.2H 56939.26% irq96: fman0 This issue affects Juniper Networks Junos OS: All versions prior to 18.3R3-S6; 18.4 versions prior to 18.4R2-S9, 18.4R3-S9; 19.1 versions prior to 19.1R2-S3, 19.1R3-S7; 19.2 versions prior to 19.2R1-S7, 19.2R3-S3; 19.3 versions prior to 19.3R2-S7, 19.3R3-S4; 19.4 versions prior to 19.4R2-S5, 19.4R3-S5; 20.1 versions prior to 20.1R3-S1; 20.2 versions prior to 20.2R3-S2; 20.3 versions prior to 20.3R3-S1; 20.4 versions prior to 20.4R2-S2, 20.4R3; 21.1 versions prior to 21.1R2; 21.2 versions prior to 21.2R1-S1, 21.2R2."}, {"Reference": "CVE-2022-2238", "Description": "A vulnerability was found in the search-api container in Red Hat Advanced Cluster Management for Kubernetes when a query in the search filter gets parsed by the backend. This flaw allows an attacker to craft specific strings containing special characters that lead to crashing the pod and affects system availability while restarting."}, {"Reference": "CVE-2022-22543", "Description": "SAP NetWeaver Application Server for ABAP (Kernel) and ABAP Platform (Kernel) - versions KERNEL 7.22, 8.04, 7.49, 7.53, 7.77, 7.81, 7.85, 7.86, 7.87, KRNL64UC 8.04, 7.22, 7.22EXT, 7.49, 7.53, KRNL64NUC 7.22, 7.22EXT, 7.49, does not sufficiently validate sap-passport information, which could lead to a Denial-of-Service attack. This allows an unauthorized remote user to provoke a breakdown of the SAP Web Dispatcher or Kernel work process. The crashed process can be restarted immediately, other processes are not affected."}, {"Reference": "CVE-2022-22556", "Description": "Dell PowerStore contains an Uncontrolled Resource Consumption Vulnerability in PowerStore User Interface. A remote unauthenticated attacker could potentially exploit this vulnerability, leading to the Denial of Service."}, {"Reference": "CVE-2022-22724", "Description": "A CWE-400: Uncontrolled Resource Consumption vulnerability exists that could cause a denial of service on ports 80 (HTTP) and 502 (Modbus), when sending a large number of TCP RST or FIN packets to any open TCP port of the PLC. Affected Product: Modicon M340 CPUs: BMXP34 (All Versions)"}, {"Reference": "CVE-2022-23015", "Description": "On BIG-IP versions 16.x before 16.1.0, 15.1.x before 15.1.4.1, and 14.1.2.6-14.1.4.4, when a Client SSL profile is configured on a virtual server with Client Certificate Authentication set to request/require and Session Ticket enabled and configured, processing SSL traffic can cause an increase in memory resource utilization. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated."}, {"Reference": "CVE-2022-23023", "Description": "On BIG-IP version 16.1.x before 16.1.2.1, 15.1.x before 15.1.5, 14.1.x before 14.1.4.5, and all versions of 13.1.x and 12.1.x, and BIG-IQ all versions of 8.x and 7.x, undisclosed requests by an authenticated iControl REST user can cause an increase in memory resource utilization. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated."}, {"Reference": "CVE-2022-23024", "Description": "On BIG-IP AFM version 16.x before 16.1.0, 15.1.x before 15.1.4.1, 14.1.x before 14.1.4.2, and all versions of 13.1.x, when the IPsec application layer gateway (ALG) logging profile is configured on an IPsec ALG virtual server, undisclosed IPsec traffic can cause the Traffic Management Microkernel (TMM) to terminate. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated."}, {"Reference": "CVE-2022-23030", "Description": "On version 16.1.x before 16.1.2, 15.1.x before 15.1.4.1, 14.1.x before 14.1.4.5, and all versions of 13.1.x, when the BIG-IP Virtual Edition (VE) uses the ixlv driver (which is used in SR-IOV mode and requires Intel X710/XL710/XXV710 family of network adapters on the Hypervisor) and TCP Segmentation Offload configuration is enabled, undisclosed requests may cause an increase in CPU resource utilization. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated."}, {"Reference": "CVE-2022-24118", "Description": "Certain General Electric Renewable Energy products allow attackers to use a code to trigger a reboot into the factory default configuration. This affects iNET and iNET II before 8.3.0, SD before 6.4.7, TD220X before 2.0.16, and TD220MAX before 1.2.6."}, {"Reference": "CVE-2022-2455", "Description": "A business logic issue in the handling of large repositories in all versions of GitLab CE/EE from 10.0 before 15.1.6, all versions starting from 15.2 before 15.2.4, all versions starting from 15.3 before 15.3.2 allowed an authenticated and authorized user to exhaust server resources by importing a malicious project."}, {"Reference": "CVE-2022-25622", "Description": "The PROFINET (PNIO) stack, when integrated with the Interniche IP stack, improperly handles internal resources for TCP segments where the minimum TCP-Header length is less than defined. This could allow an attacker to create a denial of service condition for TCP services on affected devices by sending specially crafted TCP segments."}, {"Reference": "CVE-2022-26372", "Description": "On F5 BIG-IP 15.1.x versions prior to 15.1.0.2, 14.1.x versions prior to 14.1.4.6, 13.1.x versions prior to 13.1.5, and all versions of 12.1.x and 11.6.x, when a DNS listener is configured on a virtual server with DNS queueing (default), undisclosed requests can cause an increase in memory resource utilization. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated."}, {"Reference": "CVE-2022-27181", "Description": "On F5 BIG-IP APM 16.1.x versions prior to 16.1.2.2, 15.1.x versions prior to 15.1.5.1, 14.1.x versions prior to 14.1.4.6, 13.1.x versions prior to 13.1.5, and all versions of 12.1.x and 11.6.x, when APM is configured on a virtual server and the associated access profile is configured with APM AAA NTLM Auth, undisclosed requests can cause an increase in internal resource utilization. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated"}, {"Reference": "CVE-2022-27182", "Description": "On F5 BIG-IP 16.1.x versions prior to 16.1.2.2, 15.1.x versions prior to 15.1.5.1, and 14.1.x versions prior to 14.1.4.6, when BIG-IP packet filters are enabled and a virtual server is configured with the type set to Reject, undisclosed requests can cause an increase in memory resource utilization. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated"}, {"Reference": "CVE-2022-27194", "Description": "A vulnerability has been identified in SIMATIC PCS neo (Administration Console) (All versions < V3.1 SP1), SINETPLAN (All versions), TIA Portal (V15, V15.1, V16 and V17). The affected system cannot properly process specially crafted packets sent to port 8888/tcp. A remote attacker could exploit this vulnerability to cause a Denial-of-Service condition. The affected devices must be restarted manually."}, {"Reference": "CVE-2022-2741", "Description": "The denial-of-service can be triggered by transmitting a carefully crafted CAN frame on the same CAN network as the vulnerable node. The frame must have a CAN ID matching an installed filter in the vulnerable node (this can easily be guessed based on CAN traffic analyses). The frame must contain the opposite RTR bit as what the filter installed in the vulnerable node contains (if the filter matches RTR frames, the frame must be a data frame or vice versa)."}, {"Reference": "CVE-2022-27507", "Description": "Authenticated denial of service"}, {"Reference": "CVE-2022-27508", "Description": "Unauthenticated denial of service"}, {"Reference": "CVE-2022-27640", "Description": "A vulnerability has been identified in SIMATIC CP 442-1 RNA (All versions < V1.5.18), SIMATIC CP 443-1 RNA (All versions < V1.5.18). The affected devices improperly handles excessive ARP broadcast requests. This could allow an attacker to create a denial of service condition by performing ARP storming attacks, which can cause the device to reboot."}, {"Reference": "CVE-2022-28191", "Description": "NVIDIA vGPU software contains a vulnerability in the Virtual GPU Manager (nvidia.ko), where uncontrolled resource consumption can be triggered by an unprivileged regular user, which may lead to denial of service."}, {"Reference": "CVE-2022-28691", "Description": "On F5 BIG-IP 16.1.x versions prior to 16.1.2.2, 15.1.x versions prior to 15.1.5, 14.1.x versions prior to 14.1.4.6, and 13.1.x versions prior to 13.1.5, when a Real Time Streaming Protocol (RTSP) profile is configured on a virtual server, undisclosed traffic can cause an increase in Traffic Management Microkernel (TMM) resource utilization. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated"}, {"Reference": "CVE-2022-28701", "Description": "On F5 BIG-IP 16.1.x versions prior to 16.1.2.2, when the stream profile is configured on a virtual server, undisclosed requests can cause an increase in memory resource utilization. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated"}, {"Reference": "CVE-2022-29480", "Description": "On F5 BIG-IP 13.1.x versions prior to 13.1.5, and all versions of 12.1.x and 11.6.x, when multiple route domains are configured, undisclosed requests to big3d can cause an increase in CPU resource utilization. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated"}, {"Reference": "CVE-2022-29864", "Description": "OPC UA .NET Standard Stack 1.04.368 allows a remote attacker to cause a server to crash via a large number of messages that trigger Uncontrolled Resource Consumption."}, {"Reference": "CVE-2022-29866", "Description": "OPC UA .NET Standard Stack 1.04.368 allows a remote attacker to exhaust the memory resources of a server via a crafted request that triggers Uncontrolled Resource Consumption."}, {"Reference": "CVE-2022-30551", "Description": "OPC UA Legacy Java Stack 2022-04-01 allows a remote attacker to cause a server to stop processing messages by sending crafted messages that exhaust available resources."}, {"Reference": "CVE-2022-30691", "Description": "Uncontrolled resource consumption in the Intel(R) Support Android application before version 22.02.28 may allow an authenticated user to potentially enable denial of service via local access."}, {"Reference": "CVE-2022-30791", "Description": "In CmpBlkDrvTcp of CODESYS V3 in multiple versions an uncontrolled ressource consumption allows an unauthorized attacker to block new TCP connections. Existing connections are not affected."}, {"Reference": "CVE-2022-30792", "Description": "In CmpChannelServer of CODESYS V3 in multiple versions an uncontrolled ressource consumption allows an unauthorized attacker to block new communication channel connections. Existing connections are not affected."}, {"Reference": "CVE-2022-31006", "Description": "indy-node is the server portion of Hyperledger Indy, a distributed ledger purpose-built for decentralized identity. In vulnerable versions of indy-node, an attacker can max out the number of client connections allowed by the ledger, leaving the ledger unable to be used for its intended purpose. However, the ledger content will not be impacted and the ledger will resume functioning after the attack. This attack exploits the trade-off between resilience and availability. Any protection against abusive client connections will also prevent the network being accessed by certain legitimate users. As a result, validator nodes must tune their firewall rules to ensure the right trade-off for their network's expected users. The guidance to network operators for the use of firewall rules in the deployment of Indy networks has been modified to better protect against denial of service attacks by increasing the cost and complexity in mounting such attacks. The mitigation for this vulnerability is not in the Hyperledger Indy code per se, but rather in the individual deployments of Indy. The mitigations should be applied to all deployments of Indy, and are not related to a particular release."}, {"Reference": "CVE-2022-31030", "Description": "containerd is an open source container runtime. A bug was found in the containerd's CRI implementation where programs inside a container can cause the containerd daemon to consume memory without bound during invocation of the `ExecSync` API. This can cause containerd to consume all available memory on the computer, denying service to other legitimate workloads. Kubernetes and crictl can both be configured to use containerd's CRI implementation; `ExecSync` may be used when running probes or when executing processes via an \"exec\" facility. This bug has been fixed in containerd 1.6.6 and 1.5.13. Users should update to these versions to resolve the issue. Users unable to upgrade should ensure that only trusted images and commands are used."}, {"Reference": "CVE-2022-31073", "Description": "KubeEdge is an open source system for extending native containerized application orchestration capabilities to hosts at Edge. Prior to versions 1.11.1, 1.10.2, and 1.9.4, the ServiceBus server on the edge side may be susceptible to a DoS attack if an HTTP request containing a very large Body is sent to it. It is possible for the node to be exhausted of memory. The consequence of the exhaustion is that other services on the node, e.g. other containers, will be unable to allocate memory and thus causing a denial of service. Malicious apps accidentally pulled by users on the host and have the access to send HTTP requests to localhost may make an attack. It will be affected only when users enable the `ServiceBus` module in the config file `edgecore.yaml`. This bug has been fixed in Kubeedge 1.11.1, 1.10.2, and 1.9.4. As a workaround, disable the `ServiceBus` module in the config file `edgecore.yaml`."}, {"Reference": "CVE-2022-31074", "Description": "KubeEdge is an open source system for extending native containerized application orchestration capabilities to hosts at Edge. Prior to versions 1.11.1, 1.10.2, and 1.9.4, several endpoints in the Cloud AdmissionController may be susceptible to a DoS attack if an HTTP request containing a very large Body is sent to it. The consequence of the exhaustion is that the Cloud AdmissionController will be in denial of service. This bug has been fixed in Kubeedge 1.11.1, 1.10.2, and 1.9.4. There is currently no known workaround."}, {"Reference": "CVE-2022-3283", "Description": "A potential DOS vulnerability was discovered in GitLab CE/EE affecting all versions before before 15.2.5, all versions starting from 15.3 before 15.3.4, all versions starting from 15.4 before 15.4.1 While cloning an issue with special crafted content added to the description could have been used to trigger high CPU usage."}, {"Reference": "CVE-2022-33203", "Description": "In BIG-IP Versions 16.1.x before 16.1.3, 15.1.x before 15.1.6.1, and 14.1.x before 14.1.5, when a BIG-IP APM access policy with Service Connect agent is configured on a virtual server, undisclosed requests can cause an increase in memory resource utilization. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated."}, {"Reference": "CVE-2022-34335", "Description": " IBM Sterling Partner Engagement Manager 6.1.2, 6.2.0, and 6.2.1 could allow an authenticated user to exhaust server resources which could lead to a denial of service. IBM X-Force ID: 229705. "}, {"Reference": "CVE-2022-35236", "Description": "In BIG-IP Versions 16.1.x before 16.1.2.2, 15.1.x before 15.1.6.1, and 14.1.x before 14.1.5, when an HTTP2 profile is configured on a virtual server, undisclosed traffic can cause an increase in memory resource utilization. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated."}, {"Reference": "CVE-2022-35241", "Description": "In versions 2.x before 2.3.1 and all versions of 1.x, when NGINX Instance Manager is in use, undisclosed requests can cause an increase in disk resource utilization. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated."}, {"Reference": "CVE-2022-3639", "Description": "A potential DOS vulnerability was discovered in GitLab CE/EE affecting all versions from 10.8 before 15.1.6, all versions starting from 15.2 before 15.2.4, all versions starting from 15.3 before 15.3.2. Improper data handling on branch creation could have been used to trigger high CPU usage."}, {"Reference": "CVE-2022-37311", "Description": "OX App Suite through 7.10.6 has Uncontrolled Resource Consumption via a large location request parameter to the redirect servlet."}, {"Reference": "CVE-2022-37312", "Description": "OX App Suite through 7.10.6 has Uncontrolled Resource Consumption via a large request body containing a redirect URL to the deferrer servlet."}, {"Reference": "CVE-2022-38100", "Description": "The CMS800 device fails while attempting to parse malformed network data sent by a threat actor. A threat actor with network access can remotely issue a specially formatted UDP request that will cause the entire device to crash and require a physical reboot. A UDP broadcast request could be sent that causes a mass denial-of-service attack on all CME8000 devices connected to the same network."}, {"Reference": "CVE-2022-3818", "Description": "An uncontrolled resource consumption issue when parsing URLs in GitLab CE/EE affecting all versions prior to 15.3.5, 15.4 prior to 15.4.4, and 15.5 prior to 15.5.2 allows an attacker to cause performance issues and potentially a denial of service on the GitLab instance."}, {"Reference": "CVE-2022-39278", "Description": "Istio is an open platform-independent service mesh that provides traffic management, policy enforcement, and telemetry collection. Prior to versions 1.15.2, 1.14.5, and 1.13.9, the Istio control plane, istiod, is vulnerable to a request processing error, allowing a malicious attacker that sends a specially crafted or oversized message which results in the control plane crashing when the Kubernetes validating or mutating webhook service is exposed publicly. This endpoint is served over TLS port 15017, but does not require any authentication from the attacker. For simple installations, Istiod is typically only reachable from within the cluster, limiting the blast radius. However, for some deployments, especially external istiod topologies, this port is exposed over the public internet. Versions 1.15.2, 1.14.5, and 1.13.9 contain patches for this issue. There are no effective workarounds, beyond upgrading. This bug is due to an error in `regexp.Compile` in Go."}, {"Reference": "CVE-2022-39294", "Description": "conduit-hyper integrates a conduit application with the hyper server. Prior to version 0.4.2, `conduit-hyper` did not check any limit on a request's length before calling [`hyper::body::to_bytes`](https://docs.rs/hyper/latest/hyper/body/fn.to_bytes.html). An attacker could send a malicious request with an abnormally large `Content-Length`, which could lead to a panic if memory allocation failed for that request. In version 0.4.2, `conduit-hyper` sets an internal limit of 128 MiB per request, otherwise returning status 400 (\"Bad Request\"). This crate is part of the implementation of Rust's [crates.io](https://crates.io/), but that service is not affected due to its existing cloud infrastructure, which already drops such malicious requests. Even with the new limit in place, `conduit-hyper` is not recommended for production use, nor to directly serve the public Internet."}, {"Reference": "CVE-2022-39330", "Description": "Nextcloud Server is the file server software for Nextcloud, a self-hosted productivity platform. Nextcloud Server prior to versions 23.0.10 and 24.0.6 and Nextcloud Enterprise Server prior to versions 22.2.10, 23.0.10, and 24.0.6 are vulnerable to a logged-in attacker slowing down the system by generating a lot of database/cpu load. Nextcloud Server versions 23.0.10 and 24.0.6 and Nextcloud Enterprise Server versions 22.2.10, 23.0.10, and 24.0.6 contain patches for this issue. As a workaround, disable the Circles app."}, {"Reference": "CVE-2022-40735", "Description": "The Diffie-Hellman Key Agreement Protocol allows use of long exponents that arguably make certain calculations unnecessarily expensive, because the 1996 van Oorschot and Wiener paper found that \"(appropriately) short exponents\" can be used when there are adequate subgroup constraints, and these short exponents can lead to less expensive calculations than for long exponents. This issue is different from CVE-2002-20001 because it is based on an observation about exponent size, rather than an observation about numbers that are not public keys. The specific situations in which calculation expense would constitute a server-side vulnerability depend on the protocol (e.g., TLS, SSH, or IKE) and the DHE implementation details. In general, there might be an availability concern because of server-side resource consumption from DHE modular-exponentiation calculations. Finally, it is possible for an attacker to exploit this vulnerability and CVE-2002-20001 together."}, {"Reference": "CVE-2022-41770", "Description": "In BIG-IP versions 17.0.x before 17.0.0.1, 16.1.x before 16.1.3.1, 15.1.x before 15.1.7, 14.1.x before 14.1.5.1, and all versions of 13.1.x, and BIG-IQ all versions of 8.x and 7.x, an authenticated iControl REST user can cause an increase in memory resource utilization, via undisclosed requests."}, {"Reference": "CVE-2022-41806", "Description": "In versions 16.1.x before 16.1.3.2 and 15.1.x before 15.1.5.1, when BIG-IP AFM Network Address Translation policy with IPv6/IPv4 translation rules is configured on a virtual server, undisclosed requests can cause an increase in memory resource utilization."}, {"Reference": "CVE-2022-41833", "Description": "In all BIG-IP 13.1.x versions, when an iRule containing the HTTP::collect command is configured on a virtual server, undisclosed requests can cause Traffic Management Microkernel (TMM) to terminate."}, {"Reference": "CVE-2022-41968", "Description": "Nextcloud Server is an open source personal cloud server. Prior to versions 23.0.10 and 24.0.5, calendar name lengths are not validated before writing to a database. As a result, an attacker can send unnecessary amounts of data against the database. Version 23.0.10 and 24.0.5 contain patches for the issue. No known workarounds are available."}, {"Reference": "CVE-2022-4344", "Description": "Memory exhaustion in the Kafka protocol dissector in Wireshark 4.0.0 to 4.0.1 and 3.6.0 to 3.6.9 allows denial of service via packet injection or crafted capture file"}, {"Reference": "CVE-2022-20692", "Description": "A vulnerability in the NETCONF over SSH feature of Cisco IOS XE Software could allow a low-privileged, authenticated, remote attacker to cause a denial of service condition (DoS) on an affected device. This vulnerability is due to insufficient resource management. An attacker could exploit this vulnerability by initiating a large number of NETCONF over SSH connections. A successful exploit could allow the attacker to exhaust resources, causing the device to reload and resulting in a DoS condition on an affected device."}, {"Reference": "CVE-2022-20760", "Description": "A vulnerability in the DNS inspection handler of Cisco Adaptive Security Appliance (ASA) Software and Firepower Threat Defense (FTD) Software could allow an unauthenticated, remote attacker to cause a denial of service condition (DoS) on an affected device. This vulnerability is due to a lack of proper processing of incoming requests. An attacker could exploit this vulnerability by sending crafted DNS requests at a high rate to an affected device. A successful exploit could allow the attacker to cause the device to stop responding, resulting in a DoS condition."}, {"Reference": "CVE-2022-20808", "Description": "A vulnerability in Cisco Smart Software Manager On-Prem (SSM On-Prem) could allow an authenticated, remote attacker to cause a denial of service (DoS) condition on an affected device. This vulnerability is due to incorrect handling of multiple simultaneous device registrations on Cisco SSM On-Prem. An attacker could exploit this vulnerability by sending multiple device registration requests to Cisco SSM On-Prem. A successful exploit could allow the attacker to cause a DoS condition on an affected device."}, {"Reference": "CVE-2022-20937", "Description": "A vulnerability in a feature that monitors RADIUS requests on Cisco Identity Services Engine (ISE) Software could allow an unauthenticated, remote attacker to negatively affect the performance of an affected device. This vulnerability is due to insufficient management of system resources. An attacker could exploit this vulnerability by taking actions that cause Cisco ISE Software to receive specific RADIUS traffic. A successful and sustained exploit of this vulnerability could allow the attacker to cause reduced performance of the affected device, resulting in significant delays to RADIUS authentications. There are workarounds that address this vulnerability."}, {"Reference": "CVE-2022-43564", "Description": "In Splunk Enterprise versions below 8.1.12, 8.2.9, and 9.0.2, a remote user who can create search macros and schedule search reports can cause a denial of service through the use of specially crafted search macros."}, {"Reference": "CVE-2022-44608", "Description": "Uncontrolled resource consumption vulnerability in Cybozu Remote Service 4.0.0 to 4.0.3 allows a remote authenticated attacker to consume huge storage space, which may result in a denial-of-service (DoS) condition."}, {"Reference": "CVE-2022-45044", "Description": "A vulnerability has been identified in SIPROTEC 5 6MD84 (CP300) (All versions < V9.50), SIPROTEC 5 6MD85 (CP200) (All versions), SIPROTEC 5 6MD85 (CP300) (All versions < V9.50), SIPROTEC 5 6MD86 (CP200) (All versions), SIPROTEC 5 6MD86 (CP300) (All versions < V9.50), SIPROTEC 5 6MD89 (CP300) (All versions < V9.64), SIPROTEC 5 6MU85 (CP300) (All versions < V9.50), SIPROTEC 5 7KE85 (CP200) (All versions), SIPROTEC 5 7KE85 (CP300) (All versions < V9.64), SIPROTEC 5 7SA82 (CP100) (All versions), SIPROTEC 5 7SA82 (CP150) (All versions < V9.50), SIPROTEC 5 7SA84 (CP200) (All versions), SIPROTEC 5 7SA86 (CP200) (All versions), SIPROTEC 5 7SA86 (CP300) (All versions < V9.50), SIPROTEC 5 7SA87 (CP200) (All versions), SIPROTEC 5 7SA87 (CP300) (All versions < V9.50), SIPROTEC 5 7SD82 (CP100) (All versions), SIPROTEC 5 7SD82 (CP150) (All versions < V9.50), SIPROTEC 5 7SD84 (CP200) (All versions), SIPROTEC 5 7SD86 (CP200) (All versions), SIPROTEC 5 7SD86 (CP300) (All versions < V9.50), SIPROTEC 5 7SD87 (CP200) (All versions), SIPROTEC 5 7SD87 (CP300) (All versions < V9.50), SIPROTEC 5 7SJ81 (CP100) (All versions < V8.89), SIPROTEC 5 7SJ81 (CP150) (All versions < V9.50), SIPROTEC 5 7SJ82 (CP100) (All versions < V8.89), SIPROTEC 5 7SJ82 (CP150) (All versions < V9.50), SIPROTEC 5 7SJ85 (CP200) (All versions), SIPROTEC 5 7SJ85 (CP300) (All versions < V9.50), SIPROTEC 5 7SJ86 (CP200) (All versions), SIPROTEC 5 7SJ86 (CP300) (All versions < V9.50), SIPROTEC 5 7SK82 (CP100) (All versions < V8.89), SIPROTEC 5 7SK82 (CP150) (All versions < V9.50), SIPROTEC 5 7SK85 (CP200) (All versions), SIPROTEC 5 7SK85 (CP300) (All versions < V9.50), SIPROTEC 5 7SL82 (CP100) (All versions), SIPROTEC 5 7SL82 (CP150) (All versions < V9.50), SIPROTEC 5 7SL86 (CP200) (All versions), SIPROTEC 5 7SL86 (CP300) (All versions < V9.50), SIPROTEC 5 7SL87 (CP200) (All versions), SIPROTEC 5 7SL87 (CP300) (All versions < V9.50), SIPROTEC 5 7SS85 (CP200) (All versions), SIPROTEC 5 7SS85 (CP300) (All versions < V9.50), SIPROTEC 5 7ST85 (CP200) (All versions), SIPROTEC 5 7ST85 (CP300) (All versions < V9.64), SIPROTEC 5 7ST86 (CP300) (All versions < V9.64), SIPROTEC 5 7SX82 (CP150) (All versions < V9.50), SIPROTEC 5 7SX85 (CP300) (All versions < V9.50), SIPROTEC 5 7UM85 (CP300) (All versions < V9.50), SIPROTEC 5 7UT82 (CP100) (All versions), SIPROTEC 5 7UT82 (CP150) (All versions < V9.50), SIPROTEC 5 7UT85 (CP200) (All versions), SIPROTEC 5 7UT85 (CP300) (All versions < V9.50), SIPROTEC 5 7UT86 (CP200) (All versions), SIPROTEC 5 7UT86 (CP300) (All versions < V9.50), SIPROTEC 5 7UT87 (CP200) (All versions), SIPROTEC 5 7UT87 (CP300) (All versions < V9.50), SIPROTEC 5 7VE85 (CP300) (All versions < V9.50), SIPROTEC 5 7VK87 (CP200) (All versions), SIPROTEC 5 7VK87 (CP300) (All versions < V9.50), SIPROTEC 5 7VU85 (CP300) (All versions < V9.50), SIPROTEC 5 Communication Module ETH-BA-2EL (All versions < V8.89 installed on CP100 devices), SIPROTEC 5 Communication Module ETH-BA-2EL (All versions < V9.50 installed on CP150 and CP300 devices), SIPROTEC 5 Communication Module ETH-BA-2EL (All versions installed on CP200 devices), SIPROTEC 5 Communication Module ETH-BB-2FO (All versions < V8.89 installed on CP100 devices), SIPROTEC 5 Communication Module ETH-BB-2FO (All versions < V9.50 installed on CP150 and CP300 devices), SIPROTEC 5 Communication Module ETH-BB-2FO (All versions installed on CP200 devices), SIPROTEC 5 Communication Module ETH-BD-2FO (All versions < V9.50), SIPROTEC 5 Compact 7SX800 (CP050) (All versions < V9.50). Affected devices do not properly restrict secure client-initiated renegotiations within the SSL and TLS protocols. This could allow an attacker to create a denial of service condition on the ports 443/tcp and 4443/tcp for the duration of the attack."}, {"Reference": "CVE-2022-45199", "Description": "Pillow before 9.3.0 allows denial of service via SAMPLESPERPIXEL."}, {"Reference": "CVE-2022-46351", "Description": "A vulnerability has been identified in SCALANCE X204RNA (HSR) (All versions < V3.2.7), SCALANCE X204RNA (PRP) (All versions < V3.2.7), SCALANCE X204RNA EEC (HSR) (All versions < V3.2.7), SCALANCE X204RNA EEC (PRP) (All versions < V3.2.7), SCALANCE X204RNA EEC (PRP/HSR) (All versions < V3.2.7). Specially crafted PROFINET DCP packets could cause a denial of service condition of affected products on a local Ethernet segment (Layer 2)."}, {"Reference": "CVE-2022-46352", "Description": "A vulnerability has been identified in SCALANCE X204RNA (HSR) (All versions < V3.2.7), SCALANCE X204RNA (PRP) (All versions < V3.2.7), SCALANCE X204RNA EEC (HSR) (All versions < V3.2.7), SCALANCE X204RNA EEC (PRP) (All versions < V3.2.7), SCALANCE X204RNA EEC (PRP/HSR) (All versions < V3.2.7). Specially crafted PROFINET DCP packets could cause a denial of service condition of affected products."}, {"Reference": "CVE-2022-4767", "Description": "Denial of Service in GitHub repository usememos/memos prior to 0.9.1."}, {"Reference": "CVE-2022-24040", "Description": "A vulnerability has been identified in Desigo DXR2 (All versions < V01.21.142.5-22), Desigo PXC3 (All versions < V01.21.142.4-18), Desigo PXC4 (All versions < V02.20.142.10-10884), Desigo PXC5 (All versions < V02.20.142.10-10884). The web application fails to enforce an upper bound to the cost factor of the PBKDF2 derived key during the creation or update of an account. An attacker with the user profile access privilege could cause a denial of service (DoS) condition through CPU consumption by setting a PBKDF2 derived key with a remarkably high cost effort and then attempting a login to the so-modified account."}, {"Reference": "CVE-2022-39158", "Description": "Affected devices improperly handle partial HTTP requests which makes them vulnerable to slowloris attacks. This could allow a remote attacker to create a denial of service condition that persists until the attack ends."}, {"Reference": "CVE-2022-41333", "Description": "An uncontrolled resource consumption vulnerability [CWE-400] in FortiRecorder version 6.4.3 and below, 6.0.11 and below login authentication mechanism may allow an unauthenticated attacker to make the device unavailable via crafted GET requests."}]}
{"ID": "401", "Name": "Missing Release of Memory after Effective Lifetime", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not sufficiently track and release allocated memory after it has been used, which slowly consumes remaining memory.", "ExtendedDescription": "This is often triggered by improper handling of malformed data or unexpectedly interrupted sessions. In some languages, developers are responsible for tracking memory allocation and releasing the memory. If there are no more pointers or references to the memory, then it can no longer be tracked and identified for release.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "772", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "404", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "404", "ViewID": "1305", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Memory Leak"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "\n\nMemory leaks have two common and sometimes overlapping causes:\n\n\n  - Error conditions and other exceptional circumstances\n\n  - Confusion over which part of the program is responsible for freeing the memory\n\n"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart", "DoS: Instability", "DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)"], "Note": "Most memory leaks result in general product reliability problems, but if an attacker can intentionally trigger a memory leak, the attacker might be able to launch a denial of service attack (by crashing or hanging the program) or take advantage of other unexpected program behavior resulting from a low memory condition."}, {"Scope": ["Other"], "Impact": ["Reduce Performance"]}], "DetectionMethods": [{"DetectionMethodID": "DM-13", "Method": "Fuzzing", "Description": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.", "Effectiveness": "High"}, {"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-41", "Phase": ["Implementation"], "Strategy": "Libraries or Frameworks", "Description": "\n\nChoose a language or tool that provides automatic memory management, or makes manual memory management less error-prone.\n\n\nFor example, glibc in Linux provides protection against free of invalid pointers.\n\n\nWhen using Xcode to target OS X or iOS, enable automatic reference counting (ARC) [REF-391].\n\n\nTo help correctly and consistently manage memory when programming in C++, consider using a smart pointer class such as std::auto_ptr (defined by ISO/IEC ISO/IEC 14882:2003), std::shared_ptr and std::unique_ptr (specified by an upcoming revision of the C++ standard, informally referred to as C++ 1x), or equivalent solutions such as Boost.\n"}, {"Phase": ["Architecture and Design"], "Description": "Use an abstraction library to abstract away risky APIs. Not a complete solution."}, {"Phase": ["Architecture and Design", "Build and Compilation"], "Description": "The Boehm-Demers-Weiser Garbage Collector or valgrind can be used to detect leaks in code.", "EffectivenessNotes": "This is not a complete solution as it is not 100% effective."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following C function leaks a block of allocated memory if the call to read() does not return the expected number of bytes:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar* getBlock(int fd) {\n\t\t\tchar* buf = (char*) malloc(BLOCK_SIZE);\n\t\t\tif (!buf) {\n\t\t\t\treturn NULL;\n\t\t\t}\n\t\t\tif (read(fd, buf, BLOCK_SIZE) != BLOCK_SIZE) {\n\t\t\t\t\treturn NULL;\n\t\t\t}\n\t\t\treturn buf;\n\t}\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2005-3119", "Description": "Memory leak because function does not free() an element of a data structure.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3119"}, {"Reference": "CVE-2004-0427", "Description": "Memory leak when counter variable is not decremented.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0427"}, {"Reference": "CVE-2002-0574", "Description": "chain: reference count is not decremented, leading to memory leak in OS by sending ICMP packets.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0574"}, {"Reference": "CVE-2005-3181", "Description": "Kernel uses wrong function to release a data structure, preventing data from being properly tracked by other code.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3181"}, {"Reference": "CVE-2004-0222", "Description": "Memory leak via unknown manipulations as part of protocol test suite.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0222"}, {"Reference": "CVE-2001-0136", "Description": "Memory leak via a series of the same command.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0136"}], "FunctionalAreas": ["Memory Management"], "AffectedResources": ["Memory"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This is often a resultant weakness due to improper handling of malformed data or early termination of sessions."}, {"Type": "Terminology", "Note": "\"memory leak\" has sometimes been used to describe other kinds of issues, e.g. for information leaks in which the contents of memory are inadvertently leaked (CVE-2003-0400 is one such example of this terminology conflict)."}], "Top25Examples": [{"Reference": "CVE-2022-20046", "Description": "In Bluetooth, there is a possible memory corruption due to a logic error. This could lead to local denial of service with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06142410; Issue ID: ALPS06142410."}, {"Reference": "CVE-2021-33437", "Description": "An issue was discovered in mjs (mJS: Restricted JavaScript engine), ES6 (JavaScript version 6). There are memory leaks in frozen_cb() in mjs.c."}, {"Reference": "CVE-2021-42197", "Description": "An issue was discovered in swftools through 20201222 through a memory leak in the swftools when swfdump is used. It allows an attacker to cause code execution."}, {"Reference": "CVE-2022-0854", "Description": "A memory leak flaw was found in the Linux kernel\u2019s DMA subsystem, in the way a user calls DMA_FROM_DEVICE. This flaw allows a local user to read random memory from the kernel space."}, {"Reference": "CVE-2022-22155", "Description": "An Uncontrolled Resource Consumption vulnerability in the handling of IPv6 neighbor state change events in Juniper Networks Junos OS allows an adjacent attacker to cause a memory leak in the Flexible PIC Concentrator (FPC) of an ACX5448 router. The continuous flapping of an IPv6 neighbor with specific timing will cause the FPC to run out of resources, leading to a Denial of Service (DoS) condition. Once the condition occurs, further packet processing will be impacted, creating a sustained Denial of Service (DoS) condition, requiring a manual PFE restart to restore service. The following error messages will be seen after the FPC resources have been exhausted: fpc0 DNX_NH::dnx_nh_tag_ipv4_hw_install(),3135: dnx_nh_tag_ipv4_hw_install: BCM L3 Egress create object failed for NH 602 (-14:No resources for operation), BCM NH Params: unit:0 Port:41, L3_INTF:0 Flags: 0x40 fpc0 DNX_NH::dnx_nh_tag_ipv4_hw_install(),3135: dnx_nh_tag_ipv4_hw_install: BCM L3 Egress create object failed for NH 602 (-14:No resources for operation), BCM NH Params: unit:0 Port:41, L3_INTF:0 Flags: 0x40 fpc0 DNX_NH::dnx_nh_tag_ipv4_hw_install(),3135: dnx_nh_tag_ipv4_hw_install: BCM L3 Egress create object failed for NH 602 (-14:No resources for operation), BCM NH Params: unit:0 Port:41, L3_INTF:0 Flags: 0x40 fpc0 DNX_NH::dnx_nh_tag_ipv4_hw_install(),3135: dnx_nh_tag_ipv4_hw_install: BCM L3 Egress create object failed for NH 602 (-14:No resources for operation), BCM NH Params: unit:0 Port:41, L3_INTF:0 Flags: 0x40 This issue only affects the ACX5448 router. No other products or platforms are affected by this vulnerability. This issue affects Juniper Networks Junos OS on ACX5448: 18.4 versions prior to 18.4R3-S10; 19.1 versions prior to 19.1R3-S5; 19.2 versions prior to 19.2R1-S8, 19.2R3-S2; 19.3 versions prior to 19.3R2-S6, 19.3R3-S2; 19.4 versions prior to 19.4R1-S3, 19.4R2-S2, 19.4R3; 20.1 versions prior to 20.1R2; 20.2 versions prior to 20.2R1-S1, 20.2R2."}, {"Reference": "CVE-2022-22228", "Description": "An Improper Validation of Specified Type of Input vulnerability in the routing protocol daemon (rpd) of Juniper Networks Junos OS allows an attacker to cause an RPD memory leak leading to a Denial of Service (DoS). This memory leak only occurs when the attacker's packets are destined to any configured IPv6 address on the device. This issue affects: Juniper Networks Junos OS 21.1 versions prior to 21.1R3-S2; 21.2 versions prior to 21.2R3-S1; 21.3 versions prior to 21.3R3; 21.4 versions prior to 21.4R2; 22.1 versions prior to 22.1R2. This issue does not affect Juniper Networks Junos OS versions prior to 21.1R1."}, {"Reference": "CVE-2022-26356", "Description": "Racy interactions between dirty vram tracking and paging log dirty hypercalls Activation of log dirty mode done by XEN_DMOP_track_dirty_vram (was named HVMOP_track_dirty_vram before Xen 4.9) is racy with ongoing log dirty hypercalls. A suitably timed call to XEN_DMOP_track_dirty_vram can enable log dirty while another CPU is still in the process of tearing down the structures related to a previously enabled log dirty mode (XEN_DOMCTL_SHADOW_OP_OFF). This is due to lack of mutually exclusive locking between both operations and can lead to entries being added in already freed slots, resulting in a memory leak."}, {"Reference": "CVE-2022-26878", "Description": "drivers/bluetooth/virtio_bt.c in the Linux kernel before 5.16.3 has a memory leak (socket buffers have memory allocated but not freed)."}, {"Reference": "CVE-2022-29695", "Description": "Unicorn Engine v2.0.0-rc7 contains memory leaks caused by an incomplete unicorn engine initialization."}, {"Reference": "CVE-2022-35110", "Description": "SWFTools commit 772e55a2 was discovered to contain a memory leak via /lib/mem.c."}, {"Reference": "CVE-2022-36152", "Description": "tifig v0.2.2 was discovered to contain a memory leak via operator new[](unsigned long) at /asan/asan_new_delete.cpp."}, {"Reference": "CVE-2022-38177", "Description": "By spoofing the target resolver with responses that have a malformed ECDSA signature, an attacker can trigger a small memory leak. It is possible to gradually erode available memory to the point where named crashes for lack of resources."}, {"Reference": "CVE-2022-38178", "Description": "By spoofing the target resolver with responses that have a malformed EdDSA signature, an attacker can trigger a small memory leak. It is possible to gradually erode available memory to the point where named crashes for lack of resources."}, {"Reference": "CVE-2022-23471", "Description": "containerd is an open source container runtime. A bug was found in containerd's CRI implementation where a user can exhaust memory on the host. In the CRI stream server, a goroutine is launched to handle terminal resize events if a TTY is requested. If the user's process fails to launch due to, for example, a faulty command, the goroutine will be stuck waiting to send without a receiver, resulting in a memory leak. Kubernetes and crictl can both be configured to use containerd's CRI implementation and the stream server is used for handling container IO. This bug has been fixed in containerd 1.6.12 and 1.5.16. Users should update to these versions to resolve the issue. Users unable to upgrade should ensure that only trusted images and commands are used and that only trusted users have permissions to execute commands in running containers. "}, {"Reference": "CVE-2021-42522", "Description": "There is a Information Disclosure vulnerability in anjuta/plugins/document-manager/anjuta-bookmarks.c. This issue was caused by the incorrect use of libxml2 API. The vendor forgot to call 'g_free()' to release the return value of 'xmlGetProp()'."}, {"Reference": "CVE-2021-42523", "Description": "There are two Information Disclosure vulnerabilities in colord, and they lie in colord/src/cd-device-db.c and colord/src/cd-profile-db.c separately. They exist because the 'err_msg' of 'sqlite3_exec' is not releasing after use, while libxml2 emphasizes that the caller needs to release it."}, {"Reference": "CVE-2022-26365", "Description": "Linux disk/nic frontends data leaks T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Linux Block and Network PV device frontends don't zero memory regions before sharing them with the backend (CVE-2022-26365, CVE-2022-33740). Additionally the granularity of the grant table doesn't allow sharing less than a 4K page, leading to unrelated data residing in the same 4K page as data shared with a backend being accessible by such backend (CVE-2022-33741, CVE-2022-33742)."}, {"Reference": "CVE-2021-3690", "Description": "A flaw was found in Undertow. A buffer leak on the incoming WebSocket PONG message may lead to memory exhaustion. This flaw allows an attacker to cause a denial of service. The highest threat from this vulnerability is availability."}, {"Reference": "CVE-2022-38371", "Description": "A vulnerability has been identified in APOGEE MBC (PPC) (BACnet) (All versions), APOGEE MBC (PPC) (P2 Ethernet) (All versions), APOGEE MEC (PPC) (BACnet) (All versions), APOGEE MEC (PPC) (P2 Ethernet) (All versions), APOGEE PXC Compact (BACnet) (All versions < V3.5.7), APOGEE PXC Compact (P2 Ethernet) (All versions < V2.8.21), APOGEE PXC Modular (BACnet) (All versions < V3.5.7), APOGEE PXC Modular (P2 Ethernet) (All versions < V2.8.21), Desigo PXC00-E.D (All versions >= V2.3), Desigo PXC00-U (All versions >= V2.3), Desigo PXC001-E.D (All versions >= V2.3), Desigo PXC100-E.D (All versions >= V2.3), Desigo PXC12-E.D (All versions >= V2.3), Desigo PXC128-U (All versions >= V2.3), Desigo PXC200-E.D (All versions >= V2.3), Desigo PXC22-E.D (All versions >= V2.3), Desigo PXC22.1-E.D (All versions >= V2.3), Desigo PXC36.1-E.D (All versions >= V2.3), Desigo PXC50-E.D (All versions >= V2.3), Desigo PXC64-U (All versions >= V2.3), Desigo PXM20-E (All versions >= V2.3), Nucleus NET for Nucleus PLUS V1 (All versions < V5.2a), Nucleus NET for Nucleus PLUS V2 (All versions < V5.4), Nucleus ReadyStart V3 V2012 (All versions < V2012.08.1), Nucleus ReadyStart V3 V2017 (All versions < V2017.02.4), Nucleus Source Code (All versions including affected FTP server), TALON TC Compact (BACnet) (All versions < V3.5.7), TALON TC Modular (BACnet) (All versions < V3.5.7). The FTP server does not properly release memory resources that were reserved for incomplete connection attempts by FTP clients. This could allow a remote attacker to generate a denial of service condition on devices that incorporate a vulnerable version of the FTP server."}]}
{"ID": "402", "Name": "Transmission of Private Resources into a New Sphere ('Resource Leak')", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product makes resources available to untrusted parties when those resources are only intended to be accessed by the product.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "668", "ViewID": "1000", "Ordinal": "Primary"}], "AlternateTerms": [{"Term": "Resource Leak"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "ObservedExamples": [{"Reference": "CVE-2003-0740", "Description": "Server leaks a privileged file descriptor, allowing the server to be hijacked.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0740"}, {"Reference": "CVE-2004-1033", "Description": "File descriptor leak allows read of restricted files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1033"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Top25Examples": [{"Reference": "CVE-2022-30231", "Description": "A vulnerability has been identified in SICAM GridEdge Essential ARM (All versions < V2.6.6), SICAM GridEdge Essential Intel (All versions < V2.6.6), SICAM GridEdge Essential with GDS ARM (All versions < V2.6.6), SICAM GridEdge Essential with GDS Intel (All versions < V2.6.6). The affected software discloses password hashes of other users upon request. This could allow an authenticated user to retrieve another users password hash."}]}
{"ID": "403", "Name": "Exposure of File Descriptor to Unintended Control Sphere ('File Descriptor Leak')", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "A process does not close sensitive file descriptors before invoking a child process, which allows the child to perform unauthorized I/O operations using those descriptors.", "ExtendedDescription": "When a new process is forked or executed, the child process inherits any open file descriptors. When the child process has fewer privileges than the parent process, this might introduce a vulnerability if the child process can access the file descriptor but does not have the privileges to access the associated file.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "402", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Unix", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "File descriptor leak", "Description": "While this issue is frequently called a file descriptor leak, the \"leak\" term is often used in two different ways - exposure of a resource, or consumption of a resource. Use of this term could cause confusion."}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Application Data", "Modify Application Data"]}], "ObservedExamples": [{"Reference": "CVE-2003-0740", "Description": "Server leaks a privileged file descriptor, allowing the server to be hijacked.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0740"}, {"Reference": "CVE-2004-1033", "Description": "File descriptor leak allows read of restricted files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1033"}, {"Reference": "CVE-2000-0094", "Description": "Access to restricted resource using modified file descriptor for stderr.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0094"}, {"Reference": "CVE-2002-0638", "Description": "Open file descriptor used as alternate channel in complex race condition.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0638"}, {"Reference": "CVE-2003-0489", "Description": "Program does not fully drop privileges after creating a file descriptor, which allows access to the descriptor via a separate vulnerability.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0489"}, {"Reference": "CVE-2003-0937", "Description": "User bypasses restrictions by obtaining a file descriptor then calling setuid program, which does not close the descriptor.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0937"}, {"Reference": "CVE-2004-2215", "Description": "Terminal manager does not properly close file descriptors, allowing attackers to access terminals of other users.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2215"}, {"Reference": "CVE-2006-5397", "Description": "Module opens a file for reading twice, allowing attackers to read files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-5397"}], "AffectedResources": ["System Process", "File or Directory"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "404", "Name": "Improper Resource Shutdown or Release", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product does not release or incorrectly releases a resource before it is made available for re-use.", "ExtendedDescription": "When a resource is created or allocated, the developer is responsible for properly releasing the resource as well as accounting for all potential paths of expiration or invalidation, such as a set period of time or revocation.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "664", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "405", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "619", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary", "Description": "Improper release or shutdown of resources can be primary to resource exhaustion, performance, and information confidentiality problems to name a few."}, {"Ordinality": "Resultant", "Description": "Improper release or shutdown of resources can be resultant from improper error handling or insufficient resource tracking."}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability", "Other"], "Impact": ["DoS: Resource Consumption (Other)", "Varies by Context"], "Note": "Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, the attacker might be able to launch a denial of service attack by depleting the resource pool."}, {"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "When a resource containing sensitive information is not correctly shutdown, it may expose the sensitive data in a subsequent allocation."}], "DetectionMethods": [{"DetectionMethodID": "DM-2", "Method": "Automated Dynamic Analysis", "Description": "\n\nThis weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\n\nResource clean up errors might be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n", "Effectiveness": "Moderate"}, {"DetectionMethodID": "DM-12", "Method": "Manual Dynamic Analysis", "Description": "Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the product under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself."}, {"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-3", "Phase": ["Requirements"], "Strategy": "Language Selection", "Description": "\n\nUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nFor example, languages such as Java, Ruby, and Lisp perform automatic garbage collection that releases memory for objects that have been deallocated.\n"}, {"Phase": ["Implementation"], "Description": "It is good practice to be responsible for freeing all resources you allocate and to be consistent with how and where you free memory in a function. If you allocate memory that you intend to free upon completion of the function, you must be sure to free the memory at all exit points for that function including error conditions."}, {"Phase": ["Implementation"], "Description": "Memory should be allocated/freed using matching functions such as malloc/free, new/delete, and new[]/delete[]."}, {"Phase": ["Implementation"], "Description": "When releasing a complex object or structure, ensure that you properly dispose of all of its member components, not just the object itself."}], "DemonstrativeExamples": [{"ID": "DX-81", "Entries": [{"IntroText": "The following method never closes the new file handle. Given enough time, the Finalize() method for BufferReader should eventually call Close(), but there is no guarantee as to how long this action will take. In fact, there is no guarantee that Finalize() will ever be invoked. In a busy environment, the Operating System could use up all of the available file handles before the Close() function is called."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tprivate void processFile(string fName)\n\t{\n\t\tBufferReader fil = new BufferReader(new FileReader(fName));\n\t\tString line;\n\t\twhile ((line = fil.ReadLine()) != null)\n\t\t{\n\t\t\tprocessLine(line);\n\t\t}\n\t}\n```"}, {"BodyText": "The good code example simply adds an explicit call to the Close() function when the system is done using the file. Within a simple example such as this the problem is easy to see and fix. In a real system, the problem may be considerably more obscure."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tprivate void processFile(string fName)\n\t{\n\t\tBufferReader fil = new BufferReader(new FileReader(fName));\n\t\tString line;\n\t\twhile ((line = fil.ReadLine()) != null)\n\t\t{\n\t\t\tprocessLine(line);\n\t\t}\n\t\tfil.Close();\n\t}\n```"}]}, {"ID": "DX-82", "Entries": [{"IntroText": "This code attempts to open a connection to a database and catches any exceptions that may occur."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\ttry {\n\t\tConnection con = DriverManager.getConnection(some_connection_string);\n\t}\n\tcatch ( Exception e ) {\n\t\tlog( e );\n\t}\n```"}, {"BodyText": "If an exception occurs after establishing the database connection and before the same connection closes, the pool of database connections may become exhausted. If the number of available connections is exceeded, other users cannot access this resource, effectively denying access to the application."}]}, {"ID": "DX-83", "Entries": [{"IntroText": "Under normal conditions the following C# code executes a database query, processes the results returned by the database, and closes the allocated SqlConnection object. But if an exception occurs while executing the SQL or processing the results, the SqlConnection object is not closed. If this happens often enough, the database will run out of available cursors and not be able to execute any more SQL queries."}, {"Nature": "Bad", "Language": "C#", "ExampleCode": "```\n\t...\n\tSqlConnection conn = new SqlConnection(connString);\n\tSqlCommand cmd = new SqlCommand(queryString);\n\tcmd.Connection = conn;\n\tconn.Open();\n\tSqlDataReader rdr = cmd.ExecuteReader();\n\tHarvestResults(rdr);\n\tconn.Connection.Close();\n\t...\n```"}]}, {"ID": "DX-84", "Entries": [{"IntroText": "The following C function does not close the file handle it opens if an error occurs. If the process is long-lived, the process can run out of file handles."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint decodeFile(char* fName) {\n\t\t\tchar buf[BUF_SZ];\n\t\t\tFILE* f = fopen(fName, \"r\");\n\t\t\tif (!f) {\n\t\t\t\tprintf(\"cannot open %s\\n\", fName);\n\t\t\t\treturn DECODE_FAIL;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t\twhile (fgets(buf, BUF_SZ, f)) {\n\t\t\t\t\t\tif (!checkChecksum(buf)) {\n\t\t\t\t\t\t\treturn DECODE_FAIL;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tdecodeBlock(buf);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t\tfclose(f);\n\t\t\treturn DECODE_SUCCESS;\n\t}\n```"}]}, {"ID": "DX-85", "Entries": [{"IntroText": "In this example, the program does not use matching functions such as malloc/free, new/delete, and new[]/delete[] to allocate/deallocate the resource."}, {"Nature": "Bad", "Language": "C++", "ExampleCode": "```\n\tclass A {\n\t\tvoid foo();\n\t};\n\tvoid A::foo(){\n\t\tint *ptr;\n\t\tptr = (int*)malloc(sizeof(int));\n\t\tdelete ptr;\n\t}\n```"}]}, {"ID": "DX-86", "Entries": [{"IntroText": "In this example, the program calls the delete[] function on non-heap memory."}, {"Nature": "Bad", "Language": "C++", "ExampleCode": "```\n\tclass A{\n\t\tvoid foo(bool);\n\t};\n\tvoid A::foo(bool heap) {\n\t\tint localArray[2] = {\n\t\t\t11,22\n\t\t};\n\t\tint *p = localArray;\n\t\tif (heap){\n\t\t\tp = new int[2];\n\t\t}\n\t\tdelete[] p;\n\t}\n```"}]}], "ObservedExamples": [{"Reference": "CVE-1999-1127", "Description": "Does not shut down named pipe connections if malformed data is sent.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1127"}, {"Reference": "CVE-2001-0830", "Description": "Sockets not properly closed when attacker repeatedly connects and disconnects from server.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0830"}, {"Reference": "CVE-2002-1372", "Description": "Chain: Return values of file/socket operations are not checked (CWE-252), allowing resultant consumption of file descriptors (CWE-772).", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1372"}], "RelatedAttackPatterns": ["125", "130", "131", "494", "495", "496", "666"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Relationship", "Note": "Overlaps memory leaks, asymmetric resource consumption, malformed input errors."}], "Top25Examples": [{"Reference": "CVE-2022-3318", "Description": "Use after free in ChromeOS Notifications in Google Chrome on ChromeOS prior to 106.0.5249.62 allowed a remote attacker who convinced a user to reboot Chrome OS to potentially exploit heap corruption via UI interaction. (Chromium security severity: Low)"}, {"Reference": "CVE-2021-0984", "Description": "In onNullBinding of ManagedServices.java, there is a possible permission bypass due to an incorrectly unbound service. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12Android ID: A-192475653"}, {"Reference": "CVE-2021-44717", "Description": "Go before 1.16.12 and 1.17.x before 1.17.5 on UNIX allows write operations to an unintended file or unintended network connection as a consequence of erroneous closing of file descriptor 0 after file-descriptor exhaustion."}, {"Reference": "CVE-2022-23033", "Description": "arm: guest_physmap_remove_page not removing the p2m mappings The functions to remove one or more entries from a guest p2m pagetable on Arm (p2m_remove_mapping, guest_physmap_remove_page, and p2m_set_entry with mfn set to INVALID_MFN) do not actually clear the pagetable entry if the entry doesn't have the valid bit set. It is possible to have a valid pagetable entry without the valid bit set when a guest operating system uses set/way cache maintenance instructions. For instance, a guest issuing a set/way cache maintenance instruction, then calling the XENMEM_decrease_reservation hypercall to give back memory pages to Xen, might be able to retain access to those pages even after Xen started reusing them for other purposes."}, {"Reference": "CVE-2022-23634", "Description": "Puma is a Ruby/Rack web server built for parallelism. Prior to `puma` version `5.6.2`, `puma` may not always call `close` on the response body. Rails, prior to version `7.0.2.2`, depended on the response body being closed in order for its `CurrentAttributes` implementation to work correctly. The combination of these two behaviors (Puma not closing the body + Rails' Executor implementation) causes information leakage. This problem is fixed in Puma versions 5.6.2 and 4.3.11. This problem is fixed in Rails versions 7.02.2, 6.1.4.6, 6.0.4.6, and 5.2.6.2. Upgrading to a patched Rails _or_ Puma version fixes the vulnerability."}, {"Reference": "CVE-2022-1210", "Description": "A vulnerability classified as problematic was found in LibTIFF 4.3.0. Affected by this vulnerability is the TIFF File Handler of tiff2ps. Opening a malicious file leads to a denial of service. The attack can be launched remotely but requires user interaction. The exploit has been disclosed to the public and may be used."}, {"Reference": "CVE-2022-33746", "Description": "P2M pool freeing may take excessively long The P2M pool backing second level address translation for guests may be of significant size. Therefore its freeing may take more time than is reasonable without intermediate preemption checks. Such checking for the need to preempt was so far missing."}, {"Reference": "CVE-2022-33747", "Description": "Arm: unbounded memory consumption for 2nd-level page tables Certain actions require e.g. removing pages from a guest's P2M (Physical-to-Machine) mapping. When large pages are in use to map guest pages in the 2nd-stage page tables, such a removal operation may incur a memory allocation (to replace a large mapping with individual smaller ones). These memory allocations are taken from the global memory pool. A malicious guest might be able to cause the global memory pool to be exhausted by manipulating its own P2M mappings."}]}
{"ID": "405", "Name": "Asymmetric Resource Consumption (Amplification)", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not properly control situations in which an adversary can cause the product to consume or produce excessive resources without requiring the adversary to invest equivalent work or otherwise prove authorization, i.e., the adversary's influence is \"asymmetric.\"", "ExtendedDescription": "This can lead to poor performance due to \"amplification\" of resource consumption, typically in a non-linear fashion. This situation is worsened if the product allows malicious users or attackers to consume more resources than their access level permits.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "400", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Client Server", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Amplification", "DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)", "DoS: Resource Consumption (Other)"], "Likelihood": ["High"], "Note": "Sometimes this is a factor in \"flood\" attacks, but other types of amplification exist."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "An application must make resources available to a client commensurate with the client's access level."}, {"Phase": ["Architecture and Design"], "Description": "An application must, at all times, keep track of allocated resources and meter their usage appropriately."}, {"Phase": ["System Configuration"], "Description": "Consider disabling resource-intensive algorithms on the server side, such as Diffie-Hellman key exchange.", "Effectiveness": "High", "EffectivenessNotes": "Business requirements may prevent disabling resource-intensive algorithms."}], "DemonstrativeExamples": [{"ID": "DX-113", "Entries": [{"IntroText": "This code listens on a port for DNS requests and sends the result to the requesting address."}, {"Nature": "Bad", "Language": "Python", "ExampleCode": "```\n\tsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\tsock.bind( (UDP_IP,UDP_PORT) )\n\twhile true:\n\t\t\tdata = sock.recvfrom(1024)\n\t\t\tif not data:\n\t\t\t\tbreak\n\t\t\t(requestIP, nameToResolve) = parseUDPpacket(data)\n\t\t\trecord = resolveName(nameToResolve)\n\t\t\tsendResponse(requestIP,record)\n```"}, {"BodyText": "This code sends a DNS record to a requesting IP address. UDP allows the source IP address to be easily changed ('spoofed'), thus allowing an attacker to redirect responses to a target, which may be then be overwhelmed by the network traffic."}]}, {"ID": "DX-157", "Entries": [{"IntroText": "This function prints the contents of a specified file requested by a user."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\tfunction printFile($username,$filename){\n```\n//read file into string* \n\t\t\t$file = file_get_contents($filename);\n\t\t\tif ($file && isOwnerOf($username,$filename)){\n\t\t\t```\n\t\t\t\techo $file;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\techo 'You are not authorized to view this file';\n\t\t\t}\n\t\t\treturn false;\n\t}\n```"}, {"BodyText": "This code first reads a specified file into memory, then prints the file if the user is authorized to see its contents. The read of the file into memory may be resource intensive and is unnecessary if the user is not allowed to see the file anyway."}]}, {"ID": "DX-53", "Entries": [{"IntroText": "The DTD and the very brief XML below illustrate what is meant by an XML bomb. The ZERO entity contains one character, the letter A. The choice of entity name ZERO is being used to indicate length equivalent to that exponent on two, that is, the length of ZERO is 2^0. Similarly, ONE refers to ZERO twice, therefore the XML parser will expand ONE to a length of 2, or 2^1. Ultimately, we reach entity THIRTYTWO, which will expand to 2^32 characters in length, or 4 GB, probably consuming far more data than expected."}, {"Nature": "Attack", "Language": "XML", "ExampleCode": "```\n\t<?xml version=\"1.0\"?>\n\t<!DOCTYPE MaliciousDTD [\n\t<!ENTITY ZERO \"A\">\n\t<!ENTITY ONE \"&ZERO;&ZERO;\">\n\t<!ENTITY TWO \"&ONE;&ONE;\">\n\t...\n\t<!ENTITY THIRTYTWO \"&THIRTYONE;&THIRTYONE;\">\n\t]>\n\t<data>&THIRTYTWO;</data>\n```"}]}, {"ID": "DX-158", "Entries": [{"IntroText": "This example attempts to check if an input string is a \"sentence\" [REF-1164]."}, {"Nature": "Bad", "Language": "JavaScript", "ExampleCode": "var test_string = \"Bad characters: $@#\";\n var bad_pattern = /^(\\w+\\s?)*$/i;\n var result = test_string.search(bad_pattern);"}, {"BodyText": "The regular expression has a vulnerable backtracking clause inside (\\w+\\s?)*$ which can be triggered to cause a Denial of Service by processing particular phrases.\n\n\nTo fix the backtracking problem, backtracking is removed with the ?= portion of the expression which changes it to a lookahead and the \\2 which prevents the backtracking. The modified example is:"}, {"Nature": "Good", "Language": "JavaScript", "ExampleCode": "var test_string = \"Bad characters: $@#\";\n var good_pattern = /^((?=(\\w+))\\2\\s?)*$/i;\n var result = test_string.search(good_pattern);"}, {"BodyText": "Note that [REF-1164] has a more thorough (and lengthy) explanation of everything going on within the RegEx."}]}, {"Entries": [{"IntroText": "An adversary can cause significant resource consumption on a server by filtering the cryptographic algorithms offered by the client to the ones that are the most resource-intensive on the server side. After discovering which cryptographic algorithms are supported by the server, a malicious client can send the initial cryptographic handshake messages that contains only the resource-intensive algorithms. For some cryptographic protocols, these messages can be completely prefabricated, as the resource-intensive part of the handshake happens on the server-side first (such as TLS), rather than on the client side. In the case of cryptographic protocols where the resource-intensive part should happen on the client-side first (such as SSH), a malicious client can send a forged/precalculated computation result, which seems correct to the server, so the resource-intensive part of the handshake is going to happen on the server side. A malicious client is required to send only the initial messages of a cryptographic handshake to initiate the resource-consuming part of the cryptographic handshake. These messages are usually small, and generating them requires minimal computational effort, enabling a denial-of-service attack. An additional risk is the fact that higher key size increases the effectiveness of the attack. Cryptographic protocols where the clients have influence over the size of the used key (such as TLS 1.3 or SSH) are most at risk, as the client can enforce the highest key size supported by the server."}]}], "ObservedExamples": [{"Reference": "CVE-1999-0513", "Description": "Classic \"Smurf\" attack, using spoofed ICMP packets to broadcast addresses.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0513"}, {"Reference": "CVE-2003-1564", "Description": "Parsing library allows XML bomb", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1564"}, {"Reference": "CVE-2004-2458", "Description": "Tool creates directories before authenticating user.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2458"}, {"Reference": "CVE-2020-10735", "Description": "Python has \"quadratic complexity\" issue when converting string to int with many digits in unexpected bases", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-10735"}, {"Reference": "CVE-2020-5243", "Description": "server allows ReDOS with crafted User-Agent strings, due to overlapping capture groups that cause excessive backtracking.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-5243"}, {"Reference": "CVE-2013-5211", "Description": "composite: NTP feature generates large responses (high amplification factor) with spoofed UDP source addresses.", "Link": "https://www.cve.org/CVERecord?id=CVE-2013-5211"}, {"Reference": "CVE-2002-20001", "Description": "Diffie-Hellman (DHE) Key Agreement Protocol allows attackers to send arbitrary numbers that are not public keys, which causes the server to perform expensive, unnecessary computation of modular exponentiation.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-20001"}, {"Reference": "CVE-2022-40735", "Description": "The Diffie-Hellman Key Agreement Protocol allows use of long exponents, which are more computationally expensive than using certain \"short exponents\" with particular properties.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-40735"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}}
{"ID": "406", "Name": "Insufficient Control of Network Message Volume (Network Amplification)", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not sufficiently monitor or control transmitted network traffic volume, so that an actor can cause the product to transmit more traffic than should be allowed for that actor.", "ExtendedDescription": "In the absence of a policy to restrict asymmetric resource consumption, the application or system cannot distinguish between legitimate transmissions and traffic intended to serve as an amplifying attack on target systems. Systems can often be configured to restrict the amount of traffic sent out on behalf of a client, based on the client's origin or access level. This is usually defined in a resource allocation policy. In the absence of a mechanism to keep track of transmissions, the system or application can be easily abused to transmit asymmetrically greater traffic than the request or client should be permitted to.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "405", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Operation"}, {"Phase": "Architecture and Design", "Note": "If the application uses UDP, then it could potentially be subject to spoofing attacks that use the inherent weaknesses of UDP to perform traffic amplification, although this problem can exist in other protocols or contexts."}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Amplification", "DoS: Crash, Exit, or Restart", "DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)", "DoS: Resource Consumption (Other)"], "Note": "System resources can be quickly consumed leading to poor application performance or system crash. This may affect network performance and could be used to attack other systems and applications relying on network performance."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Strategy": "Separation of Privilege", "Description": "An application must make network resources available to a client commensurate with the client's access level."}, {"Phase": ["Policy"], "Description": "Define a clear policy for network resource allocation and consumption."}, {"Phase": ["Implementation"], "Description": "An application must, at all times, keep track of network resources and meter their usage appropriately."}], "DemonstrativeExamples": [{"ID": "DX-113", "Entries": [{"IntroText": "This code listens on a port for DNS requests and sends the result to the requesting address."}, {"Nature": "Bad", "Language": "Python", "ExampleCode": "```\n\tsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\tsock.bind( (UDP_IP,UDP_PORT) )\n\twhile true:\n\t\t\tdata = sock.recvfrom(1024)\n\t\t\tif not data:\n\t\t\t\tbreak\n\t\t\t(requestIP, nameToResolve) = parseUDPpacket(data)\n\t\t\trecord = resolveName(nameToResolve)\n\t\t\tsendResponse(requestIP,record)\n```"}, {"BodyText": "This code sends a DNS record to a requesting IP address. UDP allows the source IP address to be easily changed ('spoofed'), thus allowing an attacker to redirect responses to a target, which may be then be overwhelmed by the network traffic."}]}], "ObservedExamples": [{"Reference": "CVE-1999-0513", "Description": "Classic \"Smurf\" attack, using spoofed ICMP packets to broadcast addresses.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0513"}, {"Reference": "CVE-1999-1379", "Description": "DNS query with spoofed source address causes more traffic to be returned to spoofed address than was sent by the attacker.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1379"}, {"Reference": "CVE-2000-0041", "Description": "Large datagrams are sent in response to malformed datagrams.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0041"}, {"Reference": "CVE-1999-1066", "Description": "Game server sends a large amount.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1066"}, {"Reference": "CVE-2013-5211", "Description": "composite: NTP feature generates large responses (high amplification factor) with spoofed UDP source addresses.", "Link": "https://www.cve.org/CVERecord?id=CVE-2013-5211"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Relationship", "Note": "This can be resultant from weaknesses that simplify spoofing attacks."}, {"Type": "Theoretical", "Note": "Network amplification, when performed with spoofing, is normally a multi-channel attack from attacker (acting as user) to amplifier, and amplifier to victim."}], "Top25Examples": [{"Reference": "CVE-2022-26143", "Description": "The TP-240 (aka tp240dvr) component in Mitel MiCollab before 9.4 SP1 FP1 and MiVoice Business Express through 8.1 allows remote attackers to obtain sensitive information and cause a denial of service (performance degradation and excessive outbound traffic). This was exploited in the wild in February and March 2022 for the TP240PhoneHome DDoS attack."}, {"Reference": "CVE-2022-0028", "Description": "A PAN-OS URL filtering policy misconfiguration could allow a network-based attacker to conduct reflected and amplified TCP denial-of-service (RDoS) attacks. The DoS attack would appear to originate from a Palo Alto Networks PA-Series (hardware), VM-Series (virtual) and CN-Series (container) firewall against an attacker-specified target. To be misused by an external attacker, the firewall configuration must have a URL filtering profile with one or more blocked categories assigned to a source zone that has an external facing interface. This configuration is not typical for URL filtering and, if set, is likely unintended by the administrator. If exploited, this issue would not impact the confidentiality, integrity, or availability of our products. However, the resulting denial-of-service (DoS) attack may help obfuscate the identity of the attacker and implicate the firewall as the source of the attack. We have taken prompt action to address this issue in our PAN-OS software. All software updates for this issue are expected to be released no later than the week of August 15, 2022. This issue does not impact Panorama M-Series or Panorama virtual appliances. This issue has been resolved for all Cloud NGFW and Prisma Access customers and no additional action is required from them."}, {"Reference": "CVE-2021-33959", "Description": "Plex media server 1.21 and before is vulnerable to ddos reflection attack via plex service."}]}
{"ID": "407", "Name": "Inefficient Algorithmic Complexity", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "An algorithm in a product has an inefficient worst-case computational complexity that may be detrimental to system performance and can be triggered by an attacker, typically using crafted manipulations that ensure that the worst case is being reached.", "LikelihoodOfExploit": "Low", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "405", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Quadratic Complexity", "Description": "Used when the algorithmic complexity is related to the square of the number of inputs (N^2)"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)", "DoS: Resource Consumption (Other)"], "Note": "The typical consequence is CPU consumption, but memory consumption and consumption of other resources can also occur."}], "DemonstrativeExamples": [{"ID": "DX-158", "Entries": [{"IntroText": "This example attempts to check if an input string is a \"sentence\" [REF-1164]."}, {"Nature": "Bad", "Language": "JavaScript", "ExampleCode": "var test_string = \"Bad characters: $@#\";\n var bad_pattern = /^(\\w+\\s?)*$/i;\n var result = test_string.search(bad_pattern);"}, {"BodyText": "The regular expression has a vulnerable backtracking clause inside (\\w+\\s?)*$ which can be triggered to cause a Denial of Service by processing particular phrases.\n\n\nTo fix the backtracking problem, backtracking is removed with the ?= portion of the expression which changes it to a lookahead and the \\2 which prevents the backtracking. The modified example is:"}, {"Nature": "Good", "Language": "JavaScript", "ExampleCode": "var test_string = \"Bad characters: $@#\";\n var good_pattern = /^((?=(\\w+))\\2\\s?)*$/i;\n var result = test_string.search(good_pattern);"}, {"BodyText": "Note that [REF-1164] has a more thorough (and lengthy) explanation of everything going on within the RegEx."}]}], "ObservedExamples": [{"Reference": "CVE-2021-32617", "Description": "C++ library for image metadata has \"quadratic complexity\" issue with unnecessarily repetitive parsing each time an invalid character is encountered", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-32617"}, {"Reference": "CVE-2020-10735", "Description": "Python has \"quadratic complexity\" issue when converting string to int with many digits in unexpected bases", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-10735"}, {"Reference": "CVE-2020-5243", "Description": "server allows ReDOS with crafted User-Agent strings, due to overlapping capture groups that cause excessive backtracking.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-5243"}, {"Reference": "CVE-2014-1474", "Description": "Perl-based email address parser has \"quadratic complexity\" issue via a string that does not contain a valid address", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-1474"}, {"Reference": "CVE-2003-0244", "Description": "CPU consumption via inputs that cause many hash table collisions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0244"}, {"Reference": "CVE-2003-0364", "Description": "CPU consumption via inputs that cause many hash table collisions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0364"}, {"Reference": "CVE-2002-1203", "Description": "Product performs unnecessary processing before dropping an invalid packet.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1203"}, {"Reference": "CVE-2001-1501", "Description": "CPU and memory consumption using many wildcards.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1501"}, {"Reference": "CVE-2004-2527", "Description": "Product allows attackers to cause multiple copies of a program to be loaded more quickly than the program can detect that other copies are running, then exit. This type of error should probably have its own category, where teardown takes more time than initialization.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2527"}, {"Reference": "CVE-2006-6931", "Description": "Network monitoring system allows remote attackers to cause a denial of service (CPU consumption and detection outage) via crafted network traffic, aka a \"backtracking attack.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6931"}, {"Reference": "CVE-2006-3380", "Description": "Wiki allows remote attackers to cause a denial of service (CPU consumption) by performing a diff between large, crafted pages that trigger the worst case algorithmic complexity.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-3380"}, {"Reference": "CVE-2006-3379", "Description": "Wiki allows remote attackers to cause a denial of service (CPU consumption) by performing a diff between large, crafted pages that trigger the worst case algorithmic complexity.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-3379"}, {"Reference": "CVE-2005-2506", "Description": "OS allows attackers to cause a denial of service (CPU consumption) via crafted Gregorian dates.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2506"}, {"Reference": "CVE-2005-1792", "Description": "Memory leak by performing actions faster than the software can clear them.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1792"}], "FunctionalAreas": ["Cryptography"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Top25Examples": [{"Reference": "CVE-2021-33582", "Description": "Cyrus IMAP before 3.4.2 allows remote attackers to cause a denial of service (multiple-minute daemon hang) via input that is mishandled during hash-table interaction. Because there are many insertions into a single bucket, strcmp becomes slow. This is fixed in 3.4.2, 3.2.8, and 3.0.16."}, {"Reference": "CVE-2021-41168", "Description": "Snudown is a reddit-specific fork of the Sundown Markdown parser used by GitHub, with Python integration added. In affected versions snudown was found to be vulnerable to denial of service attacks to its reference table implementation. References written in markdown ` [reference_name]: https://www.example.com` are inserted into a hash table which was found to have a weak hash function, meaning that an attacker can reliably generate a large number of collisions for it. This makes the hash table vulnerable to a hash-collision DoS attack, a type of algorithmic complexity attack. Further the hash table allowed for duplicate entries resulting in long retrieval times. Proofs of concept and further discussion of the hash collision issue are discussed on the snudown GHSA(https://github.com/reddit/snudown/security/advisories/GHSA-6gvv-9q92-w5f6). Users are advised to update to version 1.7.0."}, {"Reference": "CVE-2022-39209", "Description": "cmark-gfm is GitHub's fork of cmark, a CommonMark parsing and rendering library and program in C. In versions prior to 0.29.0.gfm.6 a polynomial time complexity issue in cmark-gfm's autolink extension may lead to unbounded resource exhaustion and subsequent denial of service. Users may verify the patch by running `python3 -c 'print(\"![l\"* 100000 + \"\\\\n\")' | ./cmark-gfm -e autolink`, which will resource exhaust on unpatched cmark-gfm but render correctly on patched cmark-gfm. This vulnerability has been patched in 0.29.0.gfm.6. Users are advised to upgrade. Users unable to upgrade should disable the use of the autolink extension."}, {"Reference": "CVE-2022-40188", "Description": "Knot Resolver before 5.5.3 allows remote attackers to cause a denial of service (CPU consumption) because of algorithmic complexity. During an attack, an authoritative server must return large NS sets or address sets."}, {"Reference": "CVE-2022-41723", "Description": "A maliciously crafted HTTP/2 stream could cause excessive CPU consumption in the HPACK decoder, sufficient to cause a denial of service from a small number of small requests."}, {"Reference": "CVE-2022-45061", "Description": "An issue was discovered in Python before 3.11.1. An unnecessary quadratic algorithm exists in one path when processing some inputs to the IDNA (RFC 3490) decoder, such that a crafted, unreasonably long name being presented to the decoder could lead to a CPU denial of service. Hostnames are often supplied by remote servers that could be controlled by a malicious actor; in such a scenario, they could trigger excessive CPU consumption on the client attempting to make use of an attacker-supplied supposed hostname. For example, the attack payload could be placed in the Location header of an HTTP response with status code 302. A fix is planned in 3.11.1, 3.10.9, 3.9.16, 3.8.16, and 3.7.16."}]}
{"ID": "408", "Name": "Incorrect Behavior Order: Early Amplification", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product allows an entity to perform a legitimate but expensive operation before authentication or authorization has taken place.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "405", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "696", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Amplification", "DoS: Crash, Exit, or Restart", "DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)"], "Note": "System resources, CPU and memory, can be quickly consumed. This can lead to poor system performance or system crash."}], "DemonstrativeExamples": [{"ID": "DX-157", "Entries": [{"IntroText": "This function prints the contents of a specified file requested by a user."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\tfunction printFile($username,$filename){\n```\n//read file into string* \n\t\t\t$file = file_get_contents($filename);\n\t\t\tif ($file && isOwnerOf($username,$filename)){\n\t\t\t```\n\t\t\t\techo $file;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\techo 'You are not authorized to view this file';\n\t\t\t}\n\t\t\treturn false;\n\t}\n```"}, {"BodyText": "This code first reads a specified file into memory, then prints the file if the user is authorized to see its contents. The read of the file into memory may be resource intensive and is unnecessary if the user is not allowed to see the file anyway."}]}], "ObservedExamples": [{"Reference": "CVE-2004-2458", "Description": "Tool creates directories before authenticating user.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2458"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "Overlaps authentication errors."}], "Top25Examples": [{"Reference": "CVE-2022-2576", "Description": "In Eclipse Californium version 2.0.0 to 2.7.2 and 3.0.0-3.5.0 a DTLS resumption handshake falls back to a DTLS full handshake on a parameter mismatch without using a HelloVerifyRequest. Especially, if used with certificate based cipher suites, that results in message amplification (DDoS other peers) and high CPU load (DoS own peer). The misbehavior occurs only with DTLS_VERIFY_PEERS_ON_RESUMPTION_THRESHOLD values larger than 0."}]}
{"ID": "409", "Name": "Improper Handling of Highly Compressed Data (Data Amplification)", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not handle or incorrectly handles a compressed input with a very high compression ratio that produces a large output.", "ExtendedDescription": "An example of data amplification is a \"decompression bomb,\" a small ZIP file that can produce a large amount of data when it is decompressed.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "405", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Amplification", "DoS: Crash, Exit, or Restart", "DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)"], "Note": "System resources, CPU and memory, can be quickly consumed. This can lead to poor system performance or system crash."}], "DemonstrativeExamples": [{"ID": "DX-53", "Entries": [{"IntroText": "The DTD and the very brief XML below illustrate what is meant by an XML bomb. The ZERO entity contains one character, the letter A. The choice of entity name ZERO is being used to indicate length equivalent to that exponent on two, that is, the length of ZERO is 2^0. Similarly, ONE refers to ZERO twice, therefore the XML parser will expand ONE to a length of 2, or 2^1. Ultimately, we reach entity THIRTYTWO, which will expand to 2^32 characters in length, or 4 GB, probably consuming far more data than expected."}, {"Nature": "Attack", "Language": "XML", "ExampleCode": "```\n\t<?xml version=\"1.0\"?>\n\t<!DOCTYPE MaliciousDTD [\n\t<!ENTITY ZERO \"A\">\n\t<!ENTITY ONE \"&ZERO;&ZERO;\">\n\t<!ENTITY TWO \"&ONE;&ONE;\">\n\t...\n\t<!ENTITY THIRTYTWO \"&THIRTYONE;&THIRTYONE;\">\n\t]>\n\t<data>&THIRTYTWO;</data>\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2009-1955", "Description": "XML bomb in web server module", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1955"}, {"Reference": "CVE-2003-1564", "Description": "Parsing library allows XML bomb", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1564"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-22780", "Description": "The Zoom Client for Meetings chat functionality was susceptible to Zip bombing attacks in the following product versions: Android before version 5.8.6, iOS before version 5.9.0, Linux before version 5.8.6, macOS before version 5.7.3, and Windows before version 5.6.3. This could lead to availability issues on the client host by exhausting system resources."}, {"Reference": "CVE-2022-29225", "Description": "Envoy is a cloud-native high-performance proxy. In versions prior to 1.22.1 secompressors accumulate decompressed data into an intermediate buffer before overwriting the body in the decode/encodeBody. This may allow an attacker to zip bomb the decompressor by sending a small highly compressed payload. Maliciously constructed zip files may exhaust system memory and cause a denial of service. Users are advised to upgrade. Users unable to upgrade may consider disabling decompression."}, {"Reference": "CVE-2022-36114", "Description": "Cargo is a package manager for the rust programming language. It was discovered that Cargo did not limit the amount of data extracted from compressed archives. An attacker could upload to an alternate registry a specially crafted package that extracts way more data than its size (also known as a \"zip bomb\"), exhausting the disk space on the machine using Cargo to download the package. Note that by design Cargo allows code execution at build time, due to build scripts and procedural macros. The vulnerabilities in this advisory allow performing a subset of the possible damage in a harder to track down way. Your dependencies must still be trusted if you want to be protected from attacks, as it's possible to perform the same attacks with build scripts and procedural macros. The vulnerability is present in all versions of Cargo. Rust 1.64, to be released on September 22nd, will include a fix for it. Since the vulnerability is just a more limited way to accomplish what a malicious build scripts or procedural macros can do, we decided not to publish Rust point releases backporting the security fix. Patch files are available for Rust 1.63.0 are available in the wg-security-response repository for people building their own toolchain. We recommend users of alternate registries to excercise care in which package they download, by only including trusted dependencies in their projects. Please note that even with these vulnerabilities fixed, by design Cargo allows arbitrary code execution at build time thanks to build scripts and procedural macros: a malicious dependency will be able to cause damage regardless of these vulnerabilities. crates.io implemented server-side checks to reject these kinds of packages years ago, and there are no packages on crates.io exploiting these vulnerabilities. crates.io users still need to excercise care in choosing their dependencies though, as the same concerns about build scripts and procedural macros apply here."}]}
{"ID": "41", "Name": "Improper Resolution of Path Equivalence", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product is vulnerable to file system contents disclosure through path equivalence. Path equivalence involves the use of special characters in file and directory names. The associated manipulations are intended to generate multiple names for the same object.", "ExtendedDescription": "Path equivalence is usually employed in order to circumvent access controls expressed using an incomplete set of file name or file path representations. This is different from path traversal, wherein the manipulations are performed to generate a name for a different object.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "706", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Access Control"], "Impact": ["Read Files or Directories", "Modify Files or Directories", "Bypass Protection Mechanism"], "Note": "An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism than an attacker may be able to bypass the mechanism."}], "DetectionMethods": [{"Method": "Automated Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Automated Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tWeb Application Scanner\n\t\tWeb Services Scanner\n\t\tDatabase Scanners", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source\n\t\tManual Source Code Review (not inspections)", "Effectiveness": "High"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer", "Effectiveness": "SOAR Partial"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-30", "Phase": ["Implementation"], "Strategy": "Output Encoding", "Description": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component."}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "ObservedExamples": [{"Reference": "CVE-2000-1114", "Description": "Source code disclosure using trailing dot", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1114"}, {"Reference": "CVE-2002-1986", "Description": "Source code disclosure using trailing dot", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1986"}, {"Reference": "CVE-2004-2213", "Description": "Source code disclosure using trailing dot or trailing encoding space \"%20\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2213"}, {"Reference": "CVE-2005-3293", "Description": "Source code disclosure using trailing dot", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3293"}, {"Reference": "CVE-2004-0061", "Description": "Bypass directory access restrictions using trailing dot in URL", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0061"}, {"Reference": "CVE-2000-1133", "Description": "Bypass directory access restrictions using trailing dot in URL", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1133"}, {"Reference": "CVE-2001-1386", "Description": "Bypass check for \".lnk\" extension using \".lnk.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1386"}, {"Reference": "CVE-2001-0693", "Description": "Source disclosure via trailing encoded space \"%20\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0693"}, {"Reference": "CVE-2001-0778", "Description": "Source disclosure via trailing encoded space \"%20\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0778"}, {"Reference": "CVE-2001-1248", "Description": "Source disclosure via trailing encoded space \"%20\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1248"}, {"Reference": "CVE-2004-0280", "Description": "Source disclosure via trailing encoded space \"%20\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0280"}, {"Reference": "CVE-2005-0622", "Description": "Source disclosure via trailing encoded space \"%20\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0622"}, {"Reference": "CVE-2005-1656", "Description": "Source disclosure via trailing encoded space \"%20\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1656"}, {"Reference": "CVE-2002-1603", "Description": "Source disclosure via trailing encoded space \"%20\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1603"}, {"Reference": "CVE-2001-0054", "Description": "Multi-Factor Vulnerability (MFV). directory traversal and other issues in FTP server using Web encodings such as \"%20\"; certain manipulations have unusual side effects.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0054"}, {"Reference": "CVE-2002-1451", "Description": "Trailing space (\"+\" in query string) leads to source code disclosure.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1451"}, {"Reference": "CVE-2000-0293", "Description": "Filenames with spaces allow arbitrary file deletion when the product does not properly quote them; some overlap with path traversal.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0293"}, {"Reference": "CVE-2001-1567", "Description": "\"+\" characters in query string converted to spaces before sensitive file/extension (internal space), leading to bypass of access restrictions to the file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1567"}, {"Reference": "CVE-2002-0253", "Description": "Overlaps infoleak", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0253"}, {"Reference": "CVE-2001-0446", "Description": "Application server allows remote attackers to read source code for .jsp files by appending a / to the requested URL.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0446"}, {"Reference": "CVE-2004-0334", "Description": "Bypass Basic Authentication for files using trailing \"/\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0334"}, {"Reference": "CVE-2001-0893", "Description": "Read sensitive files with trailing \"/\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0893"}, {"Reference": "CVE-2001-0892", "Description": "Web server allows remote attackers to view sensitive files under the document root (such as .htpasswd) via a GET request with a trailing /.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0892"}, {"Reference": "CVE-2004-1814", "Description": "Directory traversal vulnerability in server allows remote attackers to read protected files via .. (dot dot) sequences in an HTTP request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1814"}, {"Reference": "CVE-2002-1483", "Description": "Read files with full pathname using multiple internal slash.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1483"}, {"Reference": "CVE-1999-1456", "Description": "Server allows remote attackers to read arbitrary files via a GET request with more than one leading / (slash) character in the filename.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1456"}, {"Reference": "CVE-2004-0578", "Description": "Server allows remote attackers to read arbitrary files via leading slash (//) characters in a URL request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0578"}, {"Reference": "CVE-2002-0275", "Description": "Server allows remote attackers to bypass authentication and read restricted files via an extra / (slash) in the requested URL.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0275"}, {"Reference": "CVE-2004-1032", "Description": "Product allows local users to delete arbitrary files or create arbitrary empty files via a target filename with a large number of leading slash (/) characters.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1032"}, {"Reference": "CVE-2002-1238", "Description": "Server allows remote attackers to bypass access restrictions for files via an HTTP request with a sequence of multiple / (slash) characters such as http://www.example.com///file/.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1238"}, {"Reference": "CVE-2004-1878", "Description": "Product allows remote attackers to bypass authentication, obtain sensitive information, or gain access via a direct request to admin/user.pl preceded by // (double leading slash).", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1878"}, {"Reference": "CVE-2005-1365", "Description": "Server allows remote attackers to execute arbitrary commands via a URL with multiple leading \"/\" (slash) characters and \"..\" sequences.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1365"}, {"Reference": "CVE-2000-1050", "Description": "Access directory using multiple leading slash.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1050"}, {"Reference": "CVE-2001-1072", "Description": "Bypass access restrictions via multiple leading slash, which causes a regular expression to fail.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1072"}, {"Reference": "CVE-2004-0235", "Description": "Archive extracts to arbitrary files using multiple leading slash in filenames in the archive.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0235"}, {"Reference": "CVE-2002-1078", "Description": "Directory listings in web server using multiple trailing slash", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1078"}, {"Reference": "CVE-2004-0847", "Description": "ASP.NET allows remote attackers to bypass authentication for .aspx files in restricted directories via a request containing a (1) \"\\\" (backslash) or (2) \"%5C\" (encoded backslash), aka \"Path Validation Vulnerability.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0847"}, {"Reference": "CVE-2000-0004", "Description": "Server allows remote attackers to read source code for executable files by inserting a . (dot) into the URL.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0004"}, {"Reference": "CVE-2002-0304", "Description": "Server allows remote attackers to read password-protected files via a /./ in the HTTP request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0304"}, {"Reference": "CVE-1999-1083", "Description": "Possibly (could be a cleansing error)", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1083"}, {"Reference": "CVE-2004-0815", "Description": "\"/./////etc\" cleansed to \".///etc\" then \"/etc\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0815"}, {"Reference": "CVE-2002-0112", "Description": "Server allows remote attackers to view password protected files via /./ in the URL.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0112"}, {"Reference": "CVE-2004-0696", "Description": "List directories using desired path and \"*\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0696"}, {"Reference": "CVE-2002-0433", "Description": "List files in web server using \"*.ext\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0433"}, {"Reference": "CVE-2001-1152", "Description": "Proxy allows remote attackers to bypass denylist restrictions and connect to unauthorized web servers by modifying the requested URL, including (1) a // (double slash), (2) a /SUBDIR/.. where the desired file is in the parentdir, (3) a /./, or (4) URL-encoded characters.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1152"}, {"Reference": "CVE-2000-0191", "Description": "application check access for restricted URL before canonicalization", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0191"}, {"Reference": "CVE-2005-1366", "Description": "CGI source disclosure using \"dirname/../cgi-bin\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1366"}, {"Reference": "CVE-1999-0012", "Description": "Multiple web servers allow restriction bypass using 8.3 names instead of long names", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0012"}, {"Reference": "CVE-2001-0795", "Description": "Source code disclosure using 8.3 file name.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0795"}, {"Reference": "CVE-2005-0471", "Description": "Multi-Factor Vulnerability. Product generates temporary filenames using long filenames, which become predictable in 8.3 format.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0471"}], "AffectedResources": ["File or Directory"], "RelatedAttackPatterns": ["3"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "Some of these manipulations could be effective in path traversal issues, too."}], "Top25Examples": [{"Reference": "CVE-2021-37315", "Description": "Incorrect Access Control issue discoverd in Cloud Disk in ASUS RT-AC68U router firmware version before 3.0.0.4.386.41634 allows remote attackers to write arbitrary files via improper sanitation on the source for COPY and MOVE operations."}, {"Reference": "CVE-2021-29468", "Description": "Cygwin Git is a patch set for the git command line tool for the cygwin environment. A specially crafted repository that contains symbolic links as well as files with backslash characters in the file name may cause just-checked out code to be executed while checking out a repository using Git on Cygwin. The problem will be patched in the Cygwin Git v2.31.1-2 release. At time of writing, the vulnerability is present in the upstream Git source code; any Cygwin user who compiles Git for themselves from upstream sources should manually apply a patch to mitigate the vulnerability. As mitigation users should not clone or pull from repositories from untrusted sources. CVE-2019-1354 was an equivalent vulnerability in Git for Visual Studio."}]}
{"ID": "410", "Name": "Insufficient Resource Pool", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product's resource pool is not large enough to handle peak demand, which allows an attacker to prevent others from accessing the resource by using a (relatively) large number of requests for resources.", "ExtendedDescription": "Frequently the consequence is a \"flood\" of connection or sessions.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "664", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "400", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Availability", "Integrity", "Other"], "Impact": ["DoS: Crash, Exit, or Restart", "Other"], "Note": "Floods often cause a crash or other problem besides denial of the resource itself; these are likely examples of *other* vulnerabilities, not an insufficient resource pool."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Do not perform resource-intensive transactions for unauthenticated users and/or invalid requests."}, {"Phase": ["Architecture and Design"], "Description": "Consider implementing a velocity check mechanism which would detect abusive behavior."}, {"Phase": ["Operation"], "Description": "Consider load balancing as an option to handle heavy loads."}, {"Phase": ["Implementation"], "Description": "Make sure that resource handles are properly closed when no longer needed."}, {"Phase": ["Architecture and Design"], "Description": "Identify the system's resource intensive operations and consider protecting them from abuse (e.g. malicious automated script which runs the resources out)."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following snippet from a Tomcat configuration file, a JDBC connection pool is defined with a maximum of 5 simultaneous connections (with a 60 second timeout). In this case, it may be trivial for an attacker to instigate a denial of service (DoS) by using up all of the available connections in the pool."}, {"Nature": "Bad", "Language": "XML", "ExampleCode": "```\n\t<Resource name=\"jdbc/exampledb\"\n\tauth=\"Container\"\n\ttype=\"javax.sql.DataSource\"\n\tremoveAbandoned=\"true\"\n\tremoveAbandonedTimeout=\"30\"\n\tmaxActive=\"5\"\n\tmaxIdle=\"5\"\n\tmaxWait=\"60000\"\n\tusername=\"testuser\"\n\tpassword=\"testpass\"\n\tdriverClassName=\"com.mysql.jdbc.Driver\"\n\turl=\"jdbc:mysql://localhost/exampledb\"/>\n```"}]}], "ObservedExamples": [{"Reference": "CVE-1999-1363", "Description": "Large number of locks on file exhausts the pool and causes crash.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1363"}, {"Reference": "CVE-2001-1340", "Description": "Product supports only one connection and does not disconnect a user who does not provide credentials.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1340"}, {"Reference": "CVE-2002-0406", "Description": "Large number of connections without providing credentials allows connection exhaustion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0406"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-46679", "Description": " Dell PowerScale OneFS 8.2.x, 9.0.0.x - 9.4.0.x, contain an insufficient resource pool vulnerability. A remote unauthenticated attacker could potentially exploit this vulnerability, leading to denial of service. "}, {"Reference": "CVE-2022-2048", "Description": "In Eclipse Jetty HTTP/2 server implementation, when encountering an invalid HTTP/2 request, the error handling has a bug that can wind up not properly cleaning up the active connections and associated resources. This can lead to a Denial of Service scenario where there are no enough resources left to process good requests."}, {"Reference": "CVE-2022-22191", "Description": "A Denial of Service (DoS) vulnerability in the processing of a flood of specific ARP traffic in Juniper Networks Junos OS on the EX4300 switch, sent from the local broadcast domain, may allow an unauthenticated network-adjacent attacker to trigger a PFEMAN watchdog timeout, causing the Packet Forwarding Engine (PFE) to crash and restart. After the restart, transit traffic will be temporarily interrupted until the PFE is reprogrammed. In a virtual chassis (VC), the impacted Flexible PIC Concentrator (FPC) may split from the VC temporarily, and join back into the VC once the PFE restarts. Continued receipt and processing of these packets will create a sustained Denial of Service (DoS) condition. This issue affects Juniper Networks Junos OS on the EX4300: All versions prior to 15.1R7-S12; 18.4 versions prior to 18.4R2-S10, 18.4R3-S11; 19.1 versions prior to 19.1R3-S8; 19.2 versions prior to 19.2R1-S9, 19.2R3-S4; 19.3 versions prior to 19.3R3-S5; 19.4 versions prior to 19.4R2-S6, 19.4R3-S7; 20.1 versions prior to 20.1R3-S3; 20.2 versions prior to 20.2R3-S3; 20.3 versions prior to 20.3R3-S2; 20.4 versions prior to 20.4R3-S1; 21.1 versions prior to 21.1R3; 21.2 versions prior to 21.2R2-S1, 21.2R3; 21.3 versions prior to 21.3R1-S2, 21.3R2."}]}
{"ID": "412", "Name": "Unrestricted Externally Accessible Lock", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product properly checks for the existence of a lock, but the lock can be externally controlled or influenced by an actor that is outside of the intended sphere of control.", "ExtendedDescription": "This prevents the product from acting on associated resources or performing other behaviors that are controlled by the presence of the lock. Relevant locks might include an exclusive lock or mutex, or modifying a shared resource that is treated as a lock. If the lock can be held for an indefinite period of time, then the denial of service could be permanent.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "667", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanAlsoBe", "CweID": "410", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Resource Consumption (Other)"], "Note": "When an attacker can control a lock, the program may wait indefinitely until the attacker releases the lock, causing a denial of service to other users of the program. This is especially problematic if there is a blocking operation on the lock."}], "DetectionMethods": [{"Method": "White Box", "Description": "Automated code analysis techniques might not be able to reliably detect this weakness, since the application's behavior and general security model dictate which resource locks are critical. Interpretation of the weakness might require knowledge of the environment, e.g. if the existence of a file is used as a lock, but the file is created in a world-writable directory."}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "Use any access control that is offered by the functionality that is offering the lock."}, {"Phase": ["Architecture and Design", "Implementation"], "Description": "Use unpredictable names or identifiers for the locks. This might not always be possible or feasible."}, {"Phase": ["Architecture and Design"], "Description": "Consider modifying your code to use non-blocking synchronization methods."}], "DemonstrativeExamples": [{"ID": "DX-69", "Entries": [{"IntroText": "This code tries to obtain a lock for a file, then writes to it."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\tfunction writeToLog($message){\n\t\t$logfile = fopen(\"logFile.log\", \"a\");\n```\n//attempt to get logfile lock* \n\t\tif (flock($logfile, LOCK_EX)) {\n\t\t```\n\t\t\tfwrite($logfile,$message);\n```\n// unlock logfile* \n\t\t\tflock($logfile, LOCK_UN);}\n\t\telse {\n\t\t```\n\t\t\tprint \"Could not obtain lock on logFile.log, message not recorded\\n\";\n\t\t}\n\t}\n\tfclose($logFile);\n```"}, {"BodyText": "PHP by default will wait indefinitely until a file lock is released. If an attacker is able to obtain the file lock, this code will pause execution, possibly leading to denial of service for other users. Note that in this case, if an attacker can perform an flock() on the file, they may already have privileges to destroy the log file. However, this still impacts the execution of other programs that depend on flock()."}]}], "ObservedExamples": [{"Reference": "CVE-2001-0682", "Description": "Program can not execute when attacker obtains a mutex.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0682"}, {"Reference": "CVE-2002-1914", "Description": "Program can not execute when attacker obtains a lock on a critical output file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1914"}, {"Reference": "CVE-2002-1915", "Description": "Program can not execute when attacker obtains a lock on a critical output file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1915"}, {"Reference": "CVE-2002-0051", "Description": "Critical file can be opened with exclusive read access by user, preventing application of security policy. Possibly related to improper permissions, large-window race condition.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0051"}, {"Reference": "CVE-2000-0338", "Description": "Chain: predictable file names used for locking, allowing attacker to create the lock beforehand. Resultant from permissions and randomness.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0338"}, {"Reference": "CVE-2000-1198", "Description": "Chain: Lock files with predictable names. Resultant from randomness.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1198"}, {"Reference": "CVE-2002-1869", "Description": "Product does not check if it can write to a log file, allowing attackers to avoid logging by accessing the file using an exclusive lock. Overlaps unchecked error condition. This is not quite CWE-412, but close.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1869"}], "RelatedAttackPatterns": ["25"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This overlaps Insufficient Resource Pool when the \"pool\" is of size 1. It can also be resultant from race conditions, although the timing window could be quite large in some cases."}]}
{"ID": "413", "Name": "Improper Resource Locking", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product does not lock or does not correctly lock a resource when the product must have exclusive access to the resource.", "ExtendedDescription": "When a resource is not properly locked, an attacker could modify the resource while it is being operated on by the product. This might violate the product's assumption that the resource will not change, potentially leading to unexpected behaviors.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "667", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Availability"], "Impact": ["Modify Application Data", "DoS: Instability", "DoS: Crash, Exit, or Restart"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Use a non-conflicting privilege scheme."}, {"Phase": ["Architecture and Design", "Implementation"], "Description": "Use synchronization when locking a resource."}], "DemonstrativeExamples": [{"ID": "DX-24", "Entries": [{"IntroText": "The following function attempts to acquire a lock in order to perform operations on a shared resource."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid f(pthread_mutex_t *mutex) {\n\t\t\tpthread_mutex_lock(mutex);\n```\n/* access shared resource */* \n\t\t\t\n\t\t\t\n\t\t\tpthread_mutex_unlock(mutex);}"}, {"BodyText": "However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior."}, {"BodyText": "In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n\tint f(pthread_mutex_t *mutex) {\n\t\t\tint result;\n\t\t\tresult = pthread_mutex_lock(mutex);\n\t\t\tif (0 != result)\n\t\t\t\treturn result;\n```\n/* access shared resource */* \n\t\t\t\n\t\t\t\n\t\t\treturn pthread_mutex_unlock(mutex);}"}]}, {"Entries": [{"IntroText": "This Java example shows a simple BankAccount class with deposit and withdraw methods."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class BankAccount {\n```\n// variable for bank account balance* \n\t\t\tprivate double accountBalance;\n\t\t\t\n\t\t\t\n\t\t\t *// constructor for BankAccount* \n\t\t\tpublic BankAccount() {\n\t\t\t```\n\t\t\t\taccountBalance = 0;\n\t\t\t}\n```\n// method to deposit amount into BankAccount* \n\t\t\tpublic void deposit(double depositAmount) {\n\t\t\t```\n\t\t\t\t\tdouble newBalance = accountBalance + depositAmount;\n\t\t\t\t\taccountBalance = newBalance;\n\t\t\t}\n```\n// method to withdraw amount from BankAccount* \n\t\t\tpublic void withdraw(double withdrawAmount) {\n\t\t\t```\n\t\t\t\t\tdouble newBalance = accountBalance - withdrawAmount;\n\t\t\t\t\taccountBalance = newBalance;\n\t\t\t}\n```\n// other methods for accessing the BankAccount object* \n\t\t\t...}"}, {"BodyText": "However, the deposit and withdraw methods have shared access to the account balance private class variable. This can result in a race condition if multiple threads attempt to call the deposit and withdraw methods simultaneously where the account balance is modified by one thread before another thread has completed modifying the account balance. For example, if a thread attempts to withdraw funds using the withdraw method before another thread that is depositing funds using the deposit method completes the deposit then there may not be sufficient funds for the withdraw transaction."}, {"BodyText": "To prevent multiple threads from having simultaneous access to the account balance variable the deposit and withdraw methods should be synchronized using the synchronized modifier."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tpublic class BankAccount {\n\t\t\t...\n```\n// synchronized method to deposit amount into BankAccount* \n\t\t\tpublic synchronized void deposit(double depositAmount) {\n\t\t\t```\n\t\t\t\t...\n\t\t\t}\n```\n// synchronized method to withdraw amount from BankAccount* \n\t\t\tpublic synchronized void withdraw(double withdrawAmount) {\n\t\t\t```\n\t\t\t\t...\n\t\t\t}\n\t\t\t...\n\t}\n```"}, {"BodyText": "An alternative solution is to use a lock object to ensure exclusive access to the bank account balance variable. As shown below, the deposit and withdraw methods use the lock object to set a lock to block access to the BankAccount object from other threads until the method has completed updating the bank account balance variable."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tpublic class BankAccount {\n\t\t\t...\n```\n// lock object for thread access to methods* \n\t\t\tprivate ReentrantLock balanceChangeLock;\n\t\t\t\n\t\t\t\n\t\t\t *// condition object to temporarily release lock to other threads* \n\t\t\tprivate Condition sufficientFundsCondition;\n\t\t\t\n\t\t\t\n\t\t\t *// method to deposit amount into BankAccount* \n\t\t\tpublic void deposit(double amount) {\n\t\t\t```\n```\n// set lock to block access to BankAccount from other threads* \n\t\t\t\t\tbalanceChangeLock.lock();\n\t\t\t\t\ttry {\n\t\t\t\t\t```\n\t\t\t\t\t\t\tdouble newBalance = balance + amount;\n\t\t\t\t\t\t\tbalance = newBalance;\n```\n// inform other threads that funds are available* \n\t\t\t\t\t\t\tsufficientFundsCondition.signalAll();\n\t\t\t\t\t\t\t} catch (Exception e) {...}\n\t\t\t\t\tfinally {\n\t\t\t\t\t```\n\t\t\t\t\t\t// unlock lock object\n\t\t\t\t\t\tbalanceChangeLock.unlock();\n\t\t\t\t\t}\n\t\t\t}\n```\n// method to withdraw amount from bank account* \n\t\t\tpublic void withdraw(double amount) {\n\t\t\t```\n```\n// set lock to block access to BankAccount from other threads* \n\t\t\t\t\tbalanceChangeLock.lock();\n\t\t\t\t\ttry {\n\t\t\t\t\t```\n\t\t\t\t\t\t\twhile (balance < amount) {\n```\n// temporarily unblock access* \n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t *// until sufficient funds are available* \n\t\t\t\t\t\t\t\t\tsufficientFundsCondition.await();}\n\t\t\t\t\t\t\tdouble newBalance = balance - amount;\n\t\t\t\t\t\t\tbalance = newBalance;\n\t\t\t\t\t\t\t} catch (Exception e) {...}\n\t\t\t\t\tfinally {\n\t\t\t\t\t```\n\t\t\t\t\t\t// unlock lock object\n\t\t\t\t\t\tbalanceChangeLock.unlock();\n\t\t\t\t\t}\n\t\t\t}\n\t\t\t...\n\t}\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2022-20141", "Description": "Chain: an operating system kernel has insufficent resource locking (CWE-413) leading to a use after free (CWE-416).", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-20141"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-20141", "Description": "In ip_check_mc_rcu of igmp.c, there is a possible use after free due to improper locking. This could lead to local escalation of privilege when opening and closing inet sockets with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-112551163References: Upstream kernel"}, {"Reference": "CVE-2022-20371", "Description": "In dm_bow_dtr and related functions of dm-bow.c, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-195565510References: Upstream kernel"}, {"Reference": "CVE-2022-20422", "Description": "In emulation_proc_handler of armv8_deprecated.c, there is a possible way to corrupt memory due to a race condition. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-237540956References: Upstream kernel"}, {"Reference": "CVE-2022-24946", "Description": "Improper Resource Locking vulnerability in Mitsubishi Electric MELSEC iQ-R Series R12CCPU-V firmware versions \"16\" and prior, Mitsubishi Electric MELSEC-Q Series Q03UDECPU the first 5 digits of serial No. \"24061\" and prior, Mitsubishi Electric MELSEC-Q Series Q04/06/10/13/20/26/50/100UDEHCPU the first 5 digits of serial No. \"24061\" and prior, Mitsubishi Electric MELSEC-Q Series Q03/04/06/13/26UDVCPU the first 5 digits of serial number \"24051\" and prior, Mitsubishi Electric MELSEC-Q Series Q04/06/13/26UDPVCPU the first 5 digits of serial number \"24051\" and prior, Mitsubishi Electric MELSEC-Q Series Q12DCCPU-V all versions, Mitsubishi Electric MELSEC-Q Series Q24DHCCPU-V(G) all versions, Mitsubishi Electric MELSEC-Q Series Q24/26DHCCPU-LS all versions, Mitsubishi Electric MELSEC-L series L02/06/26CPU(-P) the first 5 digits of serial number \"24051\" and prior, Mitsubishi Electric MELSEC-L series L26CPU-(P)BT the first 5 digits of serial number \"24051\" and prior and Mitsubishi Electric MELIPC Series MI5122-VW firmware versions \"05\" and prior allows a remote unauthenticated attacker to cause a denial of service (DoS) condition in Ethernet communications by sending specially crafted packets. A system reset of the products is required for recovery."}]}
{"ID": "414", "Name": "Missing Lock Check", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "A product does not check to see if a lock is present before performing sensitive operations on a resource.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "667", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Availability"], "Impact": ["Modify Application Data", "DoS: Instability", "DoS: Crash, Exit, or Restart"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "Implement a reliable lock mechanism."}], "ObservedExamples": [{"Reference": "CVE-2004-1056", "Description": "Product does not properly check if a lock is present, allowing other attackers to access functionality.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1056"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "415", "Name": "Double Free", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product calls free() twice on the same memory address, potentially leading to modification of unexpected memory locations.", "ExtendedDescription": "When a program calls free() twice with the same argument, the program's memory management data structures become corrupted. This corruption can cause the program to crash or, in some circumstances, cause two later calls to malloc() to return the same pointer. If malloc() returns the same value twice and the program later gives the attacker control over the data that is written into this doubly-allocated memory, the program becomes vulnerable to a buffer overflow attack.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "825", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "1341", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "672", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "672", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "672", "ViewID": "1340", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "666", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "416", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "123", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Double-free"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Modify Memory", "Execute Unauthorized Code or Commands"], "Note": "Doubly freeing memory may result in a write-what-where condition, allowing an attacker to execute arbitrary code."}], "DetectionMethods": [{"DetectionMethodID": "DM-13", "Method": "Fuzzing", "Description": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.", "Effectiveness": "High"}, {"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Choose a language that provides automatic memory management."}, {"Phase": ["Implementation"], "Description": "Ensure that each allocation is freed only once. After freeing a chunk, set the pointer to NULL to ensure the pointer cannot be freed again. In complicated error conditions, be sure that clean-up routines respect the state of allocation properly. If the language is object oriented, ensure that object destructors delete each chunk of memory only once."}, {"Phase": ["Implementation"], "Description": "Use a static analysis tool to find double free instances."}], "DemonstrativeExamples": [{"ID": "DX-149", "Entries": [{"IntroText": "The following code shows a simple example of a double free vulnerability."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t char* ptr = (char*)malloc (SIZE);\n\t ...\n\t if (abrt) { \n\t\t free(ptr); \n\t }\n\t ...\n\t free(ptr); \n```"}, {"BodyText": "Double free vulnerabilities have two common (and sometimes overlapping) causes:"}, {"BodyText": "- Error conditions and other exceptional circumstances\n\n  - Confusion over which part of the program is responsible for freeing the memory"}, {"BodyText": "Although some double free vulnerabilities are not much more complicated than this example, most are spread out across hundreds of lines of code or even different files. Programmers seem particularly susceptible to freeing global variables more than once."}]}, {"Entries": [{"IntroText": "While contrived, this code should be exploitable on Linux distributions that do not ship with heap-chunk check summing turned on."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t#include <stdio.h>\n\t#include <unistd.h>\n\t#define BUFSIZE1 512\n\t#define BUFSIZE2 ((BUFSIZE1/2) - 8)\n\tint main(int argc, char **argv) {\n\t\tchar *buf1R1;\n\t\tchar *buf2R1;\n\t\tchar *buf1R2;\n\t\tbuf1R1 = (char *) malloc(BUFSIZE2);\n\t\tbuf2R1 = (char *) malloc(BUFSIZE2);\n\t\tfree(buf1R1);\n\t\tfree(buf2R1);\n\t\tbuf1R2 = (char *) malloc(BUFSIZE1);\n\t\tstrncpy(buf1R2, argv[1], BUFSIZE1-1);\n\t\tfree(buf2R1);\n\t\tfree(buf1R2);\n\t}\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2006-5051", "Description": "Chain: Signal handler contains too much functionality (CWE-828), introducing a race condition (CWE-362) that leads to a double free (CWE-415).", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-5051"}, {"Reference": "CVE-2004-0642", "Description": "Double free resultant from certain error conditions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0642"}, {"Reference": "CVE-2004-0772", "Description": "Double free resultant from certain error conditions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0772"}, {"Reference": "CVE-2005-1689", "Description": "Double free resultant from certain error conditions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1689"}, {"Reference": "CVE-2003-0545", "Description": "Double free from invalid ASN.1 encoding.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0545"}, {"Reference": "CVE-2003-1048", "Description": "Double free from malformed GIF.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1048"}, {"Reference": "CVE-2005-0891", "Description": "Double free from malformed GIF.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0891"}, {"Reference": "CVE-2002-0059", "Description": "Double free from malformed compressed data.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0059"}], "AffectedResources": ["Memory"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This is usually resultant from another weakness, such as an unhandled error or race condition between threads. It could also be primary to weaknesses such as buffer overflows."}, {"Type": "Theoretical", "Note": "It could be argued that Double Free would be most appropriately located as a child of \"Use after Free\", but \"Use\" and \"Release\" are considered to be distinct operations within vulnerability theory, therefore this is more accurately \"Release of a Resource after Expiration or Release\", which doesn't exist yet."}], "Top25Examples": [{"Reference": "CVE-2021-23158", "Description": "A flaw was found in htmldoc in v1.9.12. Double-free in function pspdf_export(),in ps-pdf.cxx may result in a write-what-where condition, allowing an attacker to execute arbitrary code and denial of service."}, {"Reference": "CVE-2022-2008", "Description": "Double free in WebGL in Google Chrome prior to 102.0.5005.115 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-32317", "Description": "The MPlayer Project v1.5 was discovered to contain a heap use-after-free resulting in a double free in the preinit function at libvo/vo_v4l2.c. This vulnerability can lead to a Denial of Service (DoS) via a crafted file. The device=strdup statement is not executed on every call. Note: This has been disputed by third parties as invalid and not reproduceable."}, {"Reference": "CVE-2022-40304", "Description": "An issue was discovered in libxml2 before 2.10.3. Certain invalid XML entity definitions can corrupt a hash table key, potentially leading to subsequent logic errors. In one case, a double-free can be provoked."}, {"Reference": "CVE-2022-23459", "Description": "Jsonxx or Json++ is a JSON parser, writer and reader written in C++. In affected versions of jsonxx use of the Value class may lead to memory corruption via a double free or via a use after free. The value class has a default assignment operator which may be used with pointer types which may point to alterable data where the pointer itself is not updated. This issue exists on the current commit of the jsonxx project. The project itself has been archived and updates are not expected. Users are advised to find a replacement."}, {"Reference": "CVE-2021-22600", "Description": "A double free bug in packet_set_ring() in net/packet/af_packet.c can be exploited by a local user through crafted syscalls to escalate privileges or deny service. We recommend upgrading kernel past the effected versions or rebuilding past ec6af094ea28f0f2dda1a6a33b14cd57e36a9755"}]}
{"ID": "416", "Name": "Use After Free", "Abstraction": "Variant", "Structure": "Simple", "Status": "Stable", "Diagram": "/data/images/CWE-416-Diagram.png", "Description": "The product reuses or references memory after it has been freed. At some point afterward, the memory may be allocated again and saved in another pointer, while the original pointer references a location somewhere within the new allocation. Any operations using the original pointer are no longer valid because the memory \"belongs\" to the code that operates on the new pointer.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "825", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "672", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "672", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "672", "ViewID": "1340", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "120", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "123", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant", "Description": "If the product accesses a previously-freed pointer, then it means that a separate weakness or error already occurred previously, such as a race condition, an unexpected or poorly handled error condition, confusion over which part of the program is responsible for freeing the memory, performing the free too soon, etc."}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Dangling pointer", "Description": "a pointer that no longer points to valid memory, often after it has been freed"}, {"Term": "UAF", "Description": "commonly used acronym for Use After Free"}, {"Term": "Use-After-Free"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Modify Memory"], "Note": "The use of previously freed memory may corrupt valid data, if the memory area in question has been allocated and used properly elsewhere."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "If chunk consolidation occurs after the use of previously freed data, the process may crash when invalid data is used as chunk information."}, {"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "If malicious data is entered before chunk consolidation can take place, it may be possible to take advantage of a write-what-where primitive to execute arbitrary code. If the newly allocated data happens to hold a class, in C++ for example, various function pointers may be scattered within the heap data. If one of these function pointers is overwritten with an address to valid shellcode, execution of arbitrary code can be achieved."}], "DetectionMethods": [{"DetectionMethodID": "DM-13", "Method": "Fuzzing", "Description": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.", "Effectiveness": "High"}, {"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Strategy": "Language Selection", "Description": "Choose a language that provides automatic memory management."}, {"Phase": ["Implementation"], "Strategy": "Attack Surface Reduction", "Description": "When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy.", "Effectiveness": "Defense in Depth", "EffectivenessNotes": "If a bug causes an attempted access of this pointer, then a NULL dereference could still lead to a crash or other unexpected behavior, but it will reduce or eliminate the risk of code execution."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following example demonstrates the weakness."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t#include <stdio.h>\n\t#include <unistd.h>\n\t#define BUFSIZER1 512\n\t#define BUFSIZER2 ((BUFSIZER1/2) - 8)\n\tint main(int argc, char **argv) {\n\t\tchar *buf1R1;\n\t\tchar *buf2R1;\n\t\tchar *buf2R2;\n\t\tchar *buf3R2;\n\t\tbuf1R1 = (char *) malloc(BUFSIZER1);\n\t\tbuf2R1 = (char *) malloc(BUFSIZER1);\n\t\tfree(buf2R1);\n\t\tbuf2R2 = (char *) malloc(BUFSIZER2);\n\t\tbuf3R2 = (char *) malloc(BUFSIZER2);\n\t\tstrncpy(buf2R1, argv[1], BUFSIZER1-1);\n\t\tfree(buf1R1);\n\t\tfree(buf2R2);\n\t\tfree(buf3R2);\n\t}\n```"}]}, {"Entries": [{"IntroText": "The following code illustrates a use after free error:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar* ptr = (char*)malloc (SIZE);\n\tif (err) {\n\t\tabrt = 1;\n\t\tfree(ptr);\n\t}\n\t...\n\tif (abrt) {\n\t\tlogError(\"operation aborted before commit\", ptr);\n\t}\n```"}, {"BodyText": "When an error occurs, the pointer is immediately freed. However, this pointer is later incorrectly used in the logError function."}]}], "ObservedExamples": [{"Reference": "CVE-2022-20141", "Description": "Chain: an operating system kernel has insufficent resource locking (CWE-413) leading to a use after free (CWE-416).", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-20141"}, {"Reference": "CVE-2022-2621", "Description": "Chain: two threads in a web browser use the same resource (CWE-366), but one of those threads can destroy the resource before the other has completed (CWE-416).", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-2621"}, {"Reference": "CVE-2021-0920", "Description": "Chain: mobile platform race condition (CWE-362) leading to use-after-free (CWE-416), as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-0920"}, {"Reference": "CVE-2020-6819", "Description": "Chain: race condition (CWE-362) leads to use-after-free (CWE-416), as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-6819"}, {"Reference": "CVE-2010-4168", "Description": "Use-after-free triggered by closing a connection while data is still being transmitted.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-4168"}, {"Reference": "CVE-2010-2941", "Description": "Improper allocation for invalid data leads to use-after-free.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2941"}, {"Reference": "CVE-2010-2547", "Description": "certificate with a large number of Subject Alternate Names not properly handled in realloc, leading to use-after-free", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2547"}, {"Reference": "CVE-2010-1772", "Description": "Timers are not disabled when a related object is deleted", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-1772"}, {"Reference": "CVE-2010-1437", "Description": "Access to a \"dead\" object that is being cleaned up", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-1437"}, {"Reference": "CVE-2010-1208", "Description": "object is deleted even with a non-zero reference count, and later accessed", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-1208"}, {"Reference": "CVE-2010-0629", "Description": "use-after-free involving request containing an invalid version number", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-0629"}, {"Reference": "CVE-2010-0378", "Description": "unload of an object that is currently being accessed by other functionality", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-0378"}, {"Reference": "CVE-2010-0302", "Description": "incorrectly tracking a reference count leads to use-after-free", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-0302"}, {"Reference": "CVE-2010-0249", "Description": "use-after-free related to use of uninitialized memory", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-0249"}, {"Reference": "CVE-2010-0050", "Description": "HTML document with incorrectly-nested tags", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-0050"}, {"Reference": "CVE-2009-3658", "Description": "Use after free in ActiveX object by providing a malformed argument to a method", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-3658"}, {"Reference": "CVE-2009-3616", "Description": "use-after-free by disconnecting during data transfer, or a message containing incorrect data types", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-3616"}, {"Reference": "CVE-2009-3553", "Description": "disconnect during a large data transfer causes incorrect reference count, leading to use-after-free", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-3553"}, {"Reference": "CVE-2009-2416", "Description": "use-after-free found by fuzzing", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2416"}, {"Reference": "CVE-2009-1837", "Description": "Chain: race condition (CWE-362) from improper handling of a page transition in web client while an applet is loading (CWE-368) leads to use after free (CWE-416)", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1837"}, {"Reference": "CVE-2009-0749", "Description": "realloc generates new buffer and pointer, but previous pointer is still retained, leading to use after free", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0749"}, {"Reference": "CVE-2010-3328", "Description": "Use-after-free in web browser, probably resultant from not initializing memory.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-3328"}, {"Reference": "CVE-2008-5038", "Description": "use-after-free when one thread accessed memory that was freed by another thread", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5038"}, {"Reference": "CVE-2008-0077", "Description": "assignment of malformed values to certain properties triggers use after free", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0077"}, {"Reference": "CVE-2006-4434", "Description": "mail server does not properly handle a long header.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4434"}, {"Reference": "CVE-2010-2753", "Description": "chain: integer overflow leads to use-after-free", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2753"}, {"Reference": "CVE-2006-4997", "Description": "freed pointer dereference", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4997"}], "AffectedResources": ["Memory"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-0955", "Description": "In pf_write_buf of FuseDaemon.cpp, there is possible memory corruption due to a race condition. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-11Android ID: A-192085766"}, {"Reference": "CVE-2021-34874", "Description": "This vulnerability allows remote attackers to execute arbitrary code on affected installations of Bentley View 10.15.0.75. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within the processing of 3DS files. The issue results from the lack of proper validation of user-supplied data, which can result in a memory corruption condition. An attacker can leverage this vulnerability to execute code in the context of the current process. Was ZDI-CAN-14736."}, {"Reference": "CVE-2021-34934", "Description": "This vulnerability allows remote attackers to execute arbitrary code on affected installations of Bentley View 10.15.0.75. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within the parsing of JT files. The issue results from the lack of proper validation of user-supplied data, which can result in a memory corruption condition. An attacker can leverage this vulnerability to execute code in the context of the current process. Was ZDI-CAN-14912."}, {"Reference": "CVE-2021-35120", "Description": "Improper handling between export and release functions on the same handle from client can lead to use after free in Snapdragon Compute, Snapdragon Connectivity, Snapdragon Industrial IOT, Snapdragon Mobile"}, {"Reference": "CVE-2021-35121", "Description": "An array index is improperly used to lock and unlock a mutex which can lead to a Use After Free condition In the Synx driver in Snapdragon Compute, Snapdragon Connectivity, Snapdragon Industrial IOT, Snapdragon Mobile"}, {"Reference": "CVE-2021-3609", "Description": ".A flaw was found in the CAN BCM networking protocol in the Linux kernel, where a local attacker can abuse a flaw in the CAN subsystem to corrupt memory, crash the system or escalate privileges. This race condition in net/can/bcm.c in the Linux kernel allows for local privilege escalation to root."}, {"Reference": "CVE-2021-3700", "Description": "A use-after-free vulnerability was found in usbredir in versions prior to 0.11.0 in the usbredirparser_serialize() in usbredirparser/usbredirparser.c. This issue occurs when serializing large amounts of buffered write data in the case of a slow or blocked destination."}, {"Reference": "CVE-2021-3752", "Description": "A use-after-free flaw was found in the Linux kernel\u2019s Bluetooth subsystem in the way user calls connect to the socket and disconnect simultaneously due to a race condition. This flaw allows a user to crash the system or escalate their privileges. The highest threat from this vulnerability is to confidentiality, integrity, as well as system availability."}, {"Reference": "CVE-2021-3782", "Description": "An internal reference count is held on the buffer pool, incremented every time a new buffer is created from the pool. The reference count is maintained as an int; on LP64 systems this can cause the reference count to overflow if the client creates a large number of wl_shm buffer objects, or if it can coerce the server to create a large number of external references to the buffer storage. With the reference count overflowing, a use-after-free can be constructed on the wl_shm_pool tracking structure, where values may be incremented or decremented; it may also be possible to construct a limited oracle to leak 4 bytes of server-side memory to the attacking client at a time."}, {"Reference": "CVE-2021-38005", "Description": "Use after free in loader in Google Chrome prior to 96.0.4664.45 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-38006", "Description": "Use after free in storage foundation in Google Chrome prior to 96.0.4664.45 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-38008", "Description": "Use after free in media in Google Chrome prior to 96.0.4664.45 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-38011", "Description": "Use after free in storage foundation in Google Chrome prior to 96.0.4664.45 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-39712", "Description": "In TBD of TBD, there is a possible user after free vulnerability due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-176918884References: N/A"}, {"Reference": "CVE-2021-39812", "Description": "In TBD of TBD, there is a possible out of bounds read due to a use after free. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-205522359References: N/A"}, {"Reference": "CVE-2021-40401", "Description": "A use-after-free vulnerability exists in the RS-274X aperture definition tokenization functionality of Gerbv 2.7.0 and dev (commit b5f1eacd) and Gerbv forked 2.7.1. A specially-crafted gerber file can lead to code execution. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2021-4052", "Description": "Use after free in web apps in Google Chrome prior to 96.0.4664.93 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via a crafted Chrome Extension."}, {"Reference": "CVE-2021-4053", "Description": "Use after free in UI in Google Chrome on Linux prior to 96.0.4664.93 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-4057", "Description": "Use after free in file API in Google Chrome prior to 96.0.4664.93 allowed a remote attacker who had compromised the renderer process to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-4063", "Description": "Use after free in developer tools in Google Chrome prior to 96.0.4664.93 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-4064", "Description": "Use after free in screen capture in Google Chrome on ChromeOS prior to 96.0.4664.93 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-4065", "Description": "Use after free in autofill in Google Chrome prior to 96.0.4664.93 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-4067", "Description": "Use after free in window manager in Google Chrome on ChromeOS prior to 96.0.4664.93 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-4083", "Description": "A read-after-free memory flaw was found in the Linux kernel's garbage collection for Unix domain socket file handlers in the way users call close() and fget() simultaneously and can potentially trigger a race condition. This flaw allows a local user to crash the system or escalate their privileges on the system. This flaw affects Linux kernel versions prior to 5.16-rc4."}, {"Reference": "CVE-2021-4099", "Description": "Use after free in Swiftshader in Google Chrome prior to 96.0.4664.110 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-4102", "Description": "Use after free in V8 in Google Chrome prior to 96.0.4664.110 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-44733", "Description": "A use-after-free exists in drivers/tee/tee_shm.c in the TEE subsystem in the Linux kernel through 5.15.11. This occurs because of a race condition in tee_shm_get_from_id during an attempt to free a shared memory object."}, {"Reference": "CVE-2022-0096", "Description": "Use after free in Storage in Google Chrome prior to 97.0.4692.71 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0098", "Description": "Use after free in Screen Capture in Google Chrome on Chrome OS prior to 97.0.4692.71 allowed an attacker who convinced a user to perform specific user gestures to potentially exploit heap corruption via specific user gestures."}, {"Reference": "CVE-2022-0099", "Description": "Use after free in Sign-in in Google Chrome prior to 97.0.4692.71 allowed a remote attacker who convinced a user to perform specific user gestures to potentially exploit heap corruption via specific user gesture."}, {"Reference": "CVE-2022-0103", "Description": "Use after free in SwiftShader in Google Chrome prior to 97.0.4692.71 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0105", "Description": "Use after free in PDF Accessibility in Google Chrome prior to 97.0.4692.71 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0106", "Description": "Use after free in Autofill in Google Chrome prior to 97.0.4692.71 allowed a remote attacker who convinced a user to perform specific user gesture to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0107", "Description": "Use after free in File Manager API in Google Chrome on Chrome OS prior to 97.0.4692.71 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0289", "Description": "Use after free in Safe browsing in Google Chrome prior to 97.0.4692.99 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0293", "Description": "Use after free in Web packaging in Google Chrome prior to 97.0.4692.99 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0295", "Description": "Use after free in Omnibox in Google Chrome prior to 97.0.4692.99 allowed a remote attacker who convinced the user to engage is specific user interactions to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0296", "Description": "Use after free in Printing in Google Chrome prior to 97.0.4692.99 allowed a remote attacker who convinced the user to engage is specific user interactions to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0297", "Description": "Use after free in Vulkan in Google Chrome prior to 97.0.4692.99 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0298", "Description": "Use after free in Scheduling in Google Chrome prior to 97.0.4692.99 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0300", "Description": "Use after free in Text Input Method Editor in Google Chrome on Android prior to 97.0.4692.99 allowed a remote attacker who convinced a user to engage in specific user interactions to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0301", "Description": "Heap buffer overflow in DevTools in Google Chrome prior to 97.0.4692.99 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0302", "Description": "Use after free in Omnibox in Google Chrome prior to 97.0.4692.99 allowed an attacker who convinced a user to engage in specific user interactions to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0304", "Description": "Use after free in Bookmarks in Google Chrome prior to 97.0.4692.99 allowed a remote attacker who convinced a user to engage in specific user interactions to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0307", "Description": "Use after free in Optimization Guide in Google Chrome prior to 97.0.4692.99 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0308", "Description": "Use after free in Data Transfer in Google Chrome on Chrome OS prior to 97.0.4692.99 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0453", "Description": "Use after free in Reader Mode in Google Chrome prior to 98.0.4758.80 allowed a remote attacker who had compromised the renderer process to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0456", "Description": "Use after free in Web Search in Google Chrome prior to 98.0.4758.80 allowed a remote attacker to potentially exploit heap corruption via profile destruction."}, {"Reference": "CVE-2022-0458", "Description": "Use after free in Thumbnail Tab Strip in Google Chrome prior to 98.0.4758.80 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0459", "Description": "Use after free in Screen Capture in Google Chrome prior to 98.0.4758.80 allowed a remote attacker who had compromised the renderer process and convinced a user to engage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0460", "Description": "Use after free in Window Dialogue in Google Chrome prior to 98.0.4758.80 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0463", "Description": "Use after free in Accessibility in Google Chrome prior to 98.0.4758.80 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via user interaction."}, {"Reference": "CVE-2022-0464", "Description": "Use after free in Accessibility in Google Chrome prior to 98.0.4758.80 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via user interaction."}, {"Reference": "CVE-2022-0465", "Description": "Use after free in Extensions in Google Chrome prior to 98.0.4758.80 allowed a remote attacker to potentially exploit heap corruption via user interaction."}, {"Reference": "CVE-2022-0468", "Description": "Use after free in Payments in Google Chrome prior to 98.0.4758.80 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0469", "Description": "Use after free in Cast in Google Chrome prior to 98.0.4758.80 allowed a remote attacker who convinced a user to engage in specific interactions to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0603", "Description": "Use after free in File Manager in Google Chrome on Chrome OS prior to 98.0.4758.102 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0605", "Description": "Use after free in Webstore API in Google Chrome prior to 98.0.4758.102 allowed an attacker who convinced a user to install a malicious extension and convinced a user to enage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0606", "Description": "Use after free in ANGLE in Google Chrome prior to 98.0.4758.102 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0607", "Description": "Use after free in GPU in Google Chrome prior to 98.0.4758.102 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0609", "Description": "Use after free in Animation in Google Chrome prior to 98.0.4758.102 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0646", "Description": "A flaw use after free in the Linux kernel Management Component Transport Protocol (MCTP) subsystem was found in the way user triggers cancel_work_sync after the unregister_netdev during removing device. A local user could use this flaw to crash the system or escalate their privileges on the system. It is actual from Linux Kernel 5.17-rc1 (when mctp-serial.c introduced) till 5.17-rc5."}, {"Reference": "CVE-2022-0791", "Description": "Use after free in Omnibox in Google Chrome prior to 99.0.4844.51 allowed a remote attacker who convinced a user to engage in specific user interactions to potentially exploit heap corruption via user interactions."}, {"Reference": "CVE-2022-0793", "Description": "Use after free in Cast in Google Chrome prior to 99.0.4844.51 allowed an attacker who convinced a user to install a malicious extension and engage in specific user interaction to potentially exploit heap corruption via a crafted Chrome Extension."}, {"Reference": "CVE-2022-0794", "Description": "Use after free in WebShare in Google Chrome prior to 99.0.4844.51 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0796", "Description": "Use after free in Media in Google Chrome prior to 99.0.4844.51 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0798", "Description": "Use after free in MediaStream in Google Chrome prior to 99.0.4844.51 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via a crafted Chrome Extension."}, {"Reference": "CVE-2022-0805", "Description": "Use after free in Browser Switcher in Google Chrome prior to 99.0.4844.51 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via user interaction."}, {"Reference": "CVE-2022-0808", "Description": "Use after free in Chrome OS Shell in Google Chrome on Chrome OS prior to 99.0.4844.51 allowed a remote attacker who convinced a user to engage in a series of user interaction to potentially exploit heap corruption via user interactions."}, {"Reference": "CVE-2022-0971", "Description": "Use after free in Blink Layout in Google Chrome on Android prior to 99.0.4844.74 allowed a remote attacker who had compromised the renderer process to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0972", "Description": "Use after free in Extensions in Google Chrome prior to 99.0.4844.74 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0973", "Description": "Use after free in Safe Browsing in Google Chrome prior to 99.0.4844.74 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0974", "Description": "Use after free in Splitscreen in Google Chrome on Chrome OS prior to 99.0.4844.74 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0975", "Description": "Use after free in ANGLE in Google Chrome prior to 99.0.4844.74 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0977", "Description": "Use after free in Browser UI in Google Chrome on Chrome OS prior to 99.0.4844.74 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0978", "Description": "Use after free in ANGLE in Google Chrome prior to 99.0.4844.74 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0979", "Description": "Use after free in Safe Browsing in Google Chrome on Android prior to 99.0.4844.74 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0980", "Description": "Use after free in New Tab Page in Google Chrome prior to 99.0.4844.74 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via specific user interactions."}, {"Reference": "CVE-2022-1016", "Description": "A flaw was found in the Linux kernel in net/netfilter/nf_tables_core.c:nft_do_chain, which can cause a use-after-free. This issue needs to handle 'return' with proper preconditions, as it can lead to a kernel information leak problem caused by a local, unprivileged attacker."}, {"Reference": "CVE-2022-1125", "Description": "Use after free in Portals in Google Chrome prior to 100.0.4896.60 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via user interaction."}, {"Reference": "CVE-2022-1127", "Description": "Use after free in QR Code Generator in Google Chrome prior to 100.0.4896.60 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via user interaction."}, {"Reference": "CVE-2022-1131", "Description": "Use after free in Cast UI in Google Chrome prior to 100.0.4896.60 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1133", "Description": "Use after free in WebRTC Perf in Google Chrome prior to 100.0.4896.60 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1135", "Description": "Use after free in Shopping Cart in Google Chrome prior to 100.0.4896.60 allowed a remote attacker to potentially exploit heap corruption via standard feature user interaction."}, {"Reference": "CVE-2022-1136", "Description": "Use after free in Tab Strip in Google Chrome prior to 100.0.4896.60 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via specific set of user gestures."}, {"Reference": "CVE-2022-1141", "Description": "Use after free in File Manager in Google Chrome prior to 100.0.4896.60 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via specific user gesture."}, {"Reference": "CVE-2022-1144", "Description": "Use after free in WebUI in Google Chrome prior to 100.0.4896.60 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via specific input into DevTools."}, {"Reference": "CVE-2022-1145", "Description": "Use after free in Extensions in Google Chrome prior to 100.0.4896.60 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via specific user interaction and profile destruction."}, {"Reference": "CVE-2022-1305", "Description": "Use after free in storage in Google Chrome prior to 100.0.4896.88 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1308", "Description": "Use after free in BFCache in Google Chrome prior to 100.0.4896.88 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1310", "Description": "Use after free in regular expressions in Google Chrome prior to 100.0.4896.88 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1311", "Description": "Use after free in shell in Google Chrome on ChromeOS prior to 100.0.4896.88 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1313", "Description": "Use after free in tab groups in Google Chrome prior to 100.0.4896.88 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1477", "Description": "Use after free in Vulkan in Google Chrome prior to 101.0.4951.41 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1478", "Description": "Use after free in SwiftShader in Google Chrome prior to 101.0.4951.41 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1479", "Description": "Use after free in ANGLE in Google Chrome prior to 101.0.4951.41 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1481", "Description": "Use after free in Sharing in Google Chrome on Mac prior to 101.0.4951.41 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1485", "Description": "Use after free in File System API in Google Chrome prior to 101.0.4951.41 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1487", "Description": "Use after free in Ozone in Google Chrome prior to 101.0.4951.41 allowed a remote attacker to potentially exploit heap corruption via running a Wayland test."}, {"Reference": "CVE-2022-1490", "Description": "Use after free in Browser Switcher in Google Chrome prior to 101.0.4951.41 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1491", "Description": "Use after free in Bookmarks in Google Chrome prior to 101.0.4951.41 allowed a remote attacker to potentially exploit heap corruption via specific and direct user interaction."}, {"Reference": "CVE-2022-1493", "Description": "Use after free in Dev Tools in Google Chrome prior to 101.0.4951.41 allowed a remote attacker to potentially exploit heap corruption via specific and direct user interaction."}, {"Reference": "CVE-2022-1496", "Description": "Use after free in File Manager in Google Chrome prior to 101.0.4951.41 allowed a remote attacker to potentially exploit heap corruption via specific and direct user interaction."}, {"Reference": "CVE-2022-1633", "Description": "Use after free in Sharesheet in Google Chrome on Chrome OS prior to 101.0.4951.64 allowed a remote attacker who convinced a user to engage in specific UI interactions to potentially exploit heap corruption via specific user interactions."}, {"Reference": "CVE-2022-1634", "Description": "Use after free in Browser UI in Google Chrome prior to 101.0.4951.64 allowed a remote attacker who had convinced a user to engage in specific UI interaction to potentially exploit heap corruption via specific user interactions."}, {"Reference": "CVE-2022-1635", "Description": "Use after free in Permission Prompts in Google Chrome prior to 101.0.4951.64 allowed a remote attacker who convinced a user to engage in specific UI interactions to potentially exploit heap corruption via specific user interactions."}, {"Reference": "CVE-2022-1636", "Description": "Use after free in Performance APIs in Google Chrome prior to 101.0.4951.64 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1639", "Description": "Use after free in ANGLE in Google Chrome prior to 101.0.4951.64 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1640", "Description": "Use after free in Sharing in Google Chrome prior to 101.0.4951.64 allowed a remote attacker who convinced a user to engage in specific UI interactions to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1641", "Description": "Use after free in Web UI Diagnostics in Google Chrome on Chrome OS prior to 101.0.4951.64 allowed a remote attacker who convinced a user to engage in specific UI interactions to potentially exploit heap corruption via specific user interaction."}, {"Reference": "CVE-2022-1734", "Description": "A flaw in Linux Kernel found in nfcmrvl_nci_unregister_dev() in drivers/nfc/nfcmrvl/main.c can lead to use after free both read or write when non synchronized between cleanup routine and firmware download routine."}, {"Reference": "CVE-2022-1854", "Description": "Use after free in ANGLE in Google Chrome prior to 102.0.5005.61 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1855", "Description": "Use after free in Messaging in Google Chrome prior to 102.0.5005.61 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1856", "Description": "Use after free in User Education in Google Chrome prior to 102.0.5005.61 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via a crafted Chrome Extension or specific user interaction."}, {"Reference": "CVE-2022-1859", "Description": "Use after free in Performance Manager in Google Chrome prior to 102.0.5005.61 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1860", "Description": "Use after free in UI Foundations in Google Chrome on Chrome OS prior to 102.0.5005.61 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via specific user interactions."}, {"Reference": "CVE-2022-1861", "Description": "Use after free in Sharing in Google Chrome on Chrome OS prior to 102.0.5005.61 allowed a remote attacker who convinced a user to enage in specific user interactions to potentially exploit heap corruption via specific user interaction."}, {"Reference": "CVE-2022-1863", "Description": "Use after free in Tab Groups in Google Chrome prior to 102.0.5005.61 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via a crafted Chrome Extension and specific user interaction."}, {"Reference": "CVE-2022-1864", "Description": "Use after free in WebApp Installs in Google Chrome prior to 102.0.5005.61 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via a crafted Chrome Extension and specific user interaction."}, {"Reference": "CVE-2022-1865", "Description": "Use after free in Bookmarks in Google Chrome prior to 102.0.5005.61 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via a crafted Chrome Extension and specific user interaction."}, {"Reference": "CVE-2022-1866", "Description": "Use after free in Tablet Mode in Google Chrome on Chrome OS prior to 102.0.5005.61 allowed a remote attacker who convinced a user to engage in specific user interactions to potentially exploit heap corruption via specific user interactions."}, {"Reference": "CVE-2022-1870", "Description": "Use after free in App Service in Google Chrome prior to 102.0.5005.61 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via a crafted Chrome Extension."}, {"Reference": "CVE-2022-1919", "Description": "Use after free in Codecs in Google Chrome prior to 101.0.4951.41 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1974", "Description": "A use-after-free flaw was found in the Linux kernel's NFC core functionality due to a race condition between kobject creation and delete. This vulnerability allows a local attacker with CAP_NET_ADMIN privilege to leak kernel information."}, {"Reference": "CVE-2022-2007", "Description": "Use after free in WebGPU in Google Chrome prior to 102.0.5005.115 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-20082", "Description": "In GPU, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07044730; Issue ID: ALPS07044730."}, {"Reference": "CVE-2022-2011", "Description": "Use after free in ANGLE in Google Chrome prior to 102.0.5005.115 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-20110", "Description": "In ion, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06399915; Issue ID: ALPS06399901."}, {"Reference": "CVE-2022-20111", "Description": "In ion, there is a possible use after free due to incorrect error handling. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06366069; Issue ID: ALPS06366069."}, {"Reference": "CVE-2022-20141", "Description": "In ip_check_mc_rcu of igmp.c, there is a possible use after free due to improper locking. This could lead to local escalation of privilege when opening and closing inet sockets with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-112551163References: Upstream kernel"}, {"Reference": "CVE-2022-20148", "Description": "In TBD of TBD, there is a possible use-after-free due to a race condition. This could lead to local escalation of privilege in the kernel with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-219513976References: Upstream kernel"}, {"Reference": "CVE-2022-20154", "Description": "In lock_sock_nested of sock.c, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-174846563References: Upstream kernel"}, {"Reference": "CVE-2022-20155", "Description": "In ipu_core_jqs_msg_transport_kernel_write_sync of ipu-core-jqs-msg-transport.c, there is a possible use-after-free due to a race condition. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-176754369References: N/A"}, {"Reference": "CVE-2022-20371", "Description": "In dm_bow_dtr and related functions of dm-bow.c, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-195565510References: Upstream kernel"}, {"Reference": "CVE-2022-20373", "Description": "In st21nfc_loc_set_polaritymode of fc/st21nfc.c, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-208269510References: N/A"}, {"Reference": "CVE-2022-20447", "Description": "In PAN_WriteBuf of pan_api.cc, there is a possible out of bounds read due to a use after free. This could lead to remote information disclosure over Bluetooth with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-233604485"}, {"Reference": "CVE-2022-20552", "Description": "In btif_a2dp_sink_command_ready of btif_a2dp_sink.cc, there is a possible out of bounds read due to a use after free. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-243922806"}, {"Reference": "CVE-2022-20554", "Description": "In removeEventHubDevice of InputDevice.cpp, there is a possible OOB read due to a use after free. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-245770596"}, {"Reference": "CVE-2022-20567", "Description": "In pppol2tp_create of l2tp_ppp.c, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-186777253References: Upstream kernel"}, {"Reference": "CVE-2022-20581", "Description": "In the Pixel camera driver, there is a possible use after free due to a logic error in the code. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-245916120References: N/A"}, {"Reference": "CVE-2022-2156", "Description": "Use after free in Core in Google Chrome prior to 103.0.5060.53 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-2157", "Description": "Use after free in Interest groups in Google Chrome prior to 103.0.5060.53 allowed a remote attacker who had compromised the renderer process to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-2158", "Description": "Type confusion in V8 in Google Chrome prior to 103.0.5060.53 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-2161", "Description": "Use after free in WebApp Provider in Google Chrome prior to 103.0.5060.53 allowed a remote attacker who convinced the user to engage in specific user interactions to potentially exploit heap corruption via specific UI interactions."}, {"Reference": "CVE-2022-2163", "Description": "Use after free in Cast UI and Toolbar in Google Chrome prior to 103.0.5060.134 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via UI interaction."}, {"Reference": "CVE-2022-21743", "Description": "In ion, there is a possible use after free due to an integer overflow. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06371108; Issue ID: ALPS06371108."}, {"Reference": "CVE-2022-21771", "Description": "In GED driver, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06641585; Issue ID: ALPS06641585."}, {"Reference": "CVE-2022-21773", "Description": "In TEEI driver, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06641388; Issue ID: ALPS06641388."}, {"Reference": "CVE-2022-21774", "Description": "In TEEI driver, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06641447; Issue ID: ALPS06641447."}, {"Reference": "CVE-2022-21775", "Description": "In sched driver, there is a possible use after free due to improper locking. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06479032; Issue ID: ALPS06479032."}, {"Reference": "CVE-2022-21776", "Description": "In MDP, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06545450; Issue ID: ALPS06545450."}, {"Reference": "CVE-2022-22057", "Description": "Use after free in graphics fence due to a race condition while closing fence file descriptor and destroy graphics timeline simultaneously in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Wearables"}, {"Reference": "CVE-2022-22208", "Description": "A Use After Free vulnerability in the Routing Protocol Daemon (rdp) of Juniper Networks Junos OS and Junos OS Evolved allows an unauthenticated network-based attacker to cause Denial of Service (DoS). When a BGP session flap happens, a Use After Free of a memory location that was assigned to another object can occur, which will lead to an rpd crash. This is a race condition that is outside of the attacker's control and cannot be deterministically exploited. Continued flapping of BGP sessions can create a sustained Denial of Service (DoS) condition. This issue affects Juniper Networks Junos OS: All versions prior to 18.4R2-S9, 18.4R3-S11; 19.1 versions prior to 19.1R3-S8; 19.2 version 19.2R1 and later versions; 19.3 versions prior to 19.3R3-S5; 19.4 versions prior to 19.4R2-S6, 19.4R3-S6; 20.1 version 20.1R1 and later versions; 20.2 versions prior to 20.2R3-S3; 20.3 versions prior to 20.3R3-S2; 20.4 versions prior to 20.4R3-S1; 21.1 versions prior to 21.1R3-S3; 21.2 versions prior to 21.2R2-S1, 21.2R3. Juniper Networks Junos OS Evolved All versions prior to 20.4R3-S4-EVO; 21.1-EVO versions prior to 21.1R3-S2-EVO; 21.2-EVO versions prior to 21.2R3-EVO; 21.3-EVO versions prior to 21.3R2-EVO."}, {"Reference": "CVE-2022-22737", "Description": "Constructing audio sinks could have lead to a race condition when playing audio files and closing windows. This could have lead to a use-after-free causing a potentially exploitable crash. This vulnerability affects Firefox ESR < 91.5, Firefox < 96, and Thunderbird < 91.5."}, {"Reference": "CVE-2022-2296", "Description": "Use after free in Chrome OS Shell in Google Chrome on Chrome OS prior to 103.0.5060.114 allowed a remote attacker who convinced a user to engage in specific user interactions to potentially exploit heap corruption via direct UI interactions."}, {"Reference": "CVE-2022-23035", "Description": "Insufficient cleanup of passed-through device IRQs The management of IRQs associated with physical devices exposed to x86 HVM guests involves an iterative operation in particular when cleaning up after the guest's use of the device. In the case where an interrupt is not quiescent yet at the time this cleanup gets invoked, the cleanup attempt may be scheduled to be retried. When multiple interrupts are involved, this scheduling of a retry may get erroneously skipped. At the same time pointers may get cleared (resulting in a de-reference of NULL) and freed (resulting in a use-after-free), while other code would continue to assume them to be valid."}, {"Reference": "CVE-2022-23608", "Description": "PJSIP is a free and open source multimedia communication library written in C language implementing standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE. In versions up to and including 2.11.1 when in a dialog set (or forking) scenario, a hash key shared by multiple UAC dialogs can potentially be prematurely freed when one of the dialogs is destroyed . The issue may cause a dialog set to be registered in the hash table multiple times (with different hash keys) leading to undefined behavior such as dialog list collision which eventually leading to endless loop. A patch is available in commit db3235953baa56d2fb0e276ca510fefca751643f which will be included in the next release. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-2399", "Description": "Use after free in WebGPU in Google Chrome prior to 100.0.4896.88 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-2477", "Description": "Use after free in Guest View in Google Chrome prior to 103.0.5060.134 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-2478", "Description": "Use after free in PDF in Google Chrome prior to 103.0.5060.134 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-2480", "Description": "Use after free in Service Worker API in Google Chrome prior to 103.0.5060.134 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-2481", "Description": "Use after free in Views in Google Chrome prior to 103.0.5060.134 allowed a remote attacker who convinced a user to engage in specific user interactions to potentially exploit heap corruption via UI interaction."}, {"Reference": "CVE-2022-2603", "Description": "Use after free in Omnibox in Google Chrome prior to 104.0.5112.79 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-2604", "Description": "Use after free in Safe Browsing in Google Chrome prior to 104.0.5112.79 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-2606", "Description": "Use after free in Managed devices API in Google Chrome prior to 104.0.5112.79 allowed a remote attacker who convinced a user to enable a specific Enterprise policy to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-2607", "Description": "Use after free in Tab Strip in Google Chrome on Chrome OS prior to 104.0.5112.79 allowed a remote attacker who convinced a user to engage in specific user interactions to potentially exploit heap corruption via specific UI interactions."}, {"Reference": "CVE-2022-2608", "Description": "Use after free in Overview Mode in Google Chrome on Chrome OS prior to 104.0.5112.79 allowed a remote attacker who convinced a user to engage in specific user interactions to potentially exploit heap corruption via specific UI interactions."}, {"Reference": "CVE-2022-2609", "Description": "Use after free in Nearby Share in Google Chrome on Chrome OS prior to 104.0.5112.79 allowed a remote attacker who convinced a user to engage in specific user interactions to potentially exploit heap corruption via specific UI interactions."}, {"Reference": "CVE-2022-2613", "Description": "Use after free in Input in Google Chrome on Chrome OS prior to 104.0.5112.79 allowed a remote attacker who convinced a user to enage in specific user interactions to potentially exploit heap corruption via specific UI interactions."}, {"Reference": "CVE-2022-2614", "Description": "Use after free in Sign-In Flow in Google Chrome prior to 104.0.5112.79 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-2617", "Description": "Use after free in Extensions API in Google Chrome prior to 104.0.5112.79 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via specific UI interactions."}, {"Reference": "CVE-2022-2621", "Description": "Use after free in Extensions in Google Chrome prior to 104.0.5112.79 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via specific UI interactions."}, {"Reference": "CVE-2022-2623", "Description": "Use after free in Offline in Google Chrome on Android prior to 104.0.5112.79 allowed a remote attacker who convinced a user to engage in specific user interactions to potentially exploit heap corruption via specific UI interactions."}, {"Reference": "CVE-2022-26450", "Description": "In apusys, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07177801; Issue ID: ALPS07177801."}, {"Reference": "CVE-2022-26452", "Description": "In isp, there is a possible use after free due to improper locking. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07262305; Issue ID: ALPS07262305."}, {"Reference": "CVE-2022-26473", "Description": "In vdec fmt, there is a possible use after free due to improper locking. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07342197; Issue ID: ALPS07342197."}, {"Reference": "CVE-2022-28269", "Description": "Acrobat Reader DC versions 22.001.20085 (and earlier), 20.005.3031x (and earlier) and 17.012.30205 (and earlier) are affected by a use-after-free vulnerability in the processing of Annotation objects that could result in a memory leak in the context of the current user. Exploitation of this issue requires user interaction in that a victim must open a malicious file."}, {"Reference": "CVE-2022-2852", "Description": "Use after free in FedCM in Google Chrome prior to 104.0.5112.101 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-2855", "Description": "Use after free in ANGLE in Google Chrome prior to 104.0.5112.101 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-2857", "Description": "Use after free in Blink in Google Chrome prior to 104.0.5112.101 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-2858", "Description": "Use after free in Sign-In Flow in Google Chrome prior to 104.0.5112.101 allowed a remote attacker to potentially exploit heap corruption via specific UI interaction."}, {"Reference": "CVE-2022-2859", "Description": "Use after free in Chrome OS Shell in Google Chrome prior to 104.0.5112.101 allowed a remote attacker who convinced a user to engage in specific UI interactions to potentially exploit heap corruption via specific UI interactions."}, {"Reference": "CVE-2022-28796", "Description": "jbd2_journal_wait_updates in fs/jbd2/transaction.c in the Linux kernel before 5.17.1 has a use-after-free caused by a transaction_t race condition."}, {"Reference": "CVE-2022-2896", "Description": "Measuresoft ScadaPro Server (All Versions) allows use after free while processing a specific project file."}, {"Reference": "CVE-2022-29582", "Description": "In the Linux kernel before 5.17.3, fs/io_uring.c has a use-after-free due to a race condition in io_uring timeouts. This can be triggered by a local user who has no access to any user namespace; however, the race condition perhaps can only be exploited infrequently."}, {"Reference": "CVE-2022-2961", "Description": "A use-after-free flaw was found in the Linux kernel\u2019s PLP Rose functionality in the way a user triggers a race condition by calling bind while simultaneously triggering the rose_bind() function. This flaw allows a local user to crash or potentially escalate their privileges on the system."}, {"Reference": "CVE-2022-2998", "Description": "Use after free in Browser Creation in Google Chrome prior to 104.0.5112.101 allowed a remote attacker who had convinced a user to engage in a specific UI interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-3038", "Description": "Use after free in Network Service in Google Chrome prior to 105.0.5195.52 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-3039", "Description": "Use after free in WebSQL in Google Chrome prior to 105.0.5195.52 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-3041", "Description": "Use after free in WebSQL in Google Chrome prior to 105.0.5195.52 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-3042", "Description": "Use after free in PhoneHub in Google Chrome on Chrome OS prior to 105.0.5195.52 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-3046", "Description": "Use after free in Browser Tag in Google Chrome prior to 105.0.5195.52 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-3055", "Description": "Use after free in Passwords in Google Chrome prior to 105.0.5195.52 allowed a remote attacker who convinced a user to engage in specific UI interactions to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-3058", "Description": "Use after free in Sign-In Flow in Google Chrome prior to 105.0.5195.52 allowed a remote attacker who convinced a user to engage in specific UI interactions to potentially exploit heap corruption via crafted UI interaction."}, {"Reference": "CVE-2022-31747", "Description": "Mozilla developers Andrew McCreight, Nicolas B. Pierron, and the Mozilla Fuzzing Team reported memory safety bugs present in Firefox 100 and Firefox ESR 91.9. Some of these bugs showed evidence of memory corruption and we presume that with enough effort some of these could have been exploited to run arbitrary code. This vulnerability affects Thunderbird < 91.10, Firefox < 101, and Firefox ESR < 91.10."}, {"Reference": "CVE-2022-31748", "Description": "Mozilla developers Gabriele Svelto, Timothy Nikkel, Randell Jesup, Jon Coppeard, and the Mozilla Fuzzing Team reported memory safety bugs present in Firefox 100. Some of these bugs showed evidence of memory corruption and we presume that with enough effort some of these could have been exploited to run arbitrary code. This vulnerability affects Firefox < 101."}, {"Reference": "CVE-2022-3196", "Description": "Use after free in PDF in Google Chrome prior to 105.0.5195.125 allowed a remote attacker to potentially exploit heap corruption via a crafted PDF file. (Chromium security severity: High)"}, {"Reference": "CVE-2022-3197", "Description": "Use after free in PDF in Google Chrome prior to 105.0.5195.125 allowed a remote attacker to potentially exploit heap corruption via a crafted PDF file. (Chromium security severity: High)"}, {"Reference": "CVE-2022-3198", "Description": "Use after free in PDF in Google Chrome prior to 105.0.5195.125 allowed a remote attacker to potentially exploit heap corruption via a crafted PDF file. (Chromium security severity: High)"}, {"Reference": "CVE-2022-3199", "Description": "Use after free in Frames in Google Chrome prior to 105.0.5195.125 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-32317", "Description": "The MPlayer Project v1.5 was discovered to contain a heap use-after-free resulting in a double free in the preinit function at libvo/vo_v4l2.c. This vulnerability can lead to a Denial of Service (DoS) via a crafted file. The device=strdup statement is not executed on every call. Note: This has been disputed by third parties as invalid and not reproduceable."}, {"Reference": "CVE-2022-32590", "Description": "In wlan, there is a possible use after free due to an incorrect status check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07299425; Issue ID: ALPS07299425."}, {"Reference": "CVE-2022-32608", "Description": "In jpeg, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07388753; Issue ID: ALPS07388753."}, {"Reference": "CVE-2022-32649", "Description": "In jpeg, there is a possible use after free due to a logic error. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07225840; Issue ID: ALPS07225840."}, {"Reference": "CVE-2022-32650", "Description": "In mtk-isp, there is a possible use after free due to a logic error. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07225853; Issue ID: ALPS07225853."}, {"Reference": "CVE-2022-32651", "Description": "In mtk-aie, there is a possible use after free due to a logic error. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07225857; Issue ID: ALPS07225857."}, {"Reference": "CVE-2022-3304", "Description": "Use after free in CSS in Google Chrome prior to 106.0.5249.62 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-3307", "Description": "Use after free in media in Google Chrome prior to 106.0.5249.62 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-3318", "Description": "Use after free in ChromeOS Notifications in Google Chrome on ChromeOS prior to 106.0.5249.62 allowed a remote attacker who convinced a user to reboot Chrome OS to potentially exploit heap corruption via UI interaction. (Chromium security severity: Low)"}, {"Reference": "CVE-2022-3445", "Description": "Use after free in Skia in Google Chrome prior to 106.0.5249.119 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-3448", "Description": "Use after free in Permissions API in Google Chrome prior to 106.0.5249.119 allowed a remote attacker who convinced a user to engage in specific UI gestures to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-34484", "Description": "The Mozilla Fuzzing Team reported potential vulnerabilities present in Thunderbird 91.10. Some of these bugs showed evidence of memory corruption and we presume that with enough effort some of these could have been exploited to run arbitrary code. This vulnerability affects Firefox < 102, Firefox ESR < 91.11, Thunderbird < 102, and Thunderbird < 91.11."}, {"Reference": "CVE-2022-3449", "Description": "Use after free in Safe Browsing in Google Chrome prior to 106.0.5249.119 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via a crafted Chrome Extension. (Chromium security severity: High)"}, {"Reference": "CVE-2022-34568", "Description": "SDL v1.2 was discovered to contain a use-after-free via the XFree function at /src/video/x11/SDL_x11yuv.c."}, {"Reference": "CVE-2022-3654", "Description": "Use after free in Layout in Google Chrome prior to 107.0.5304.62 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-3657", "Description": "Use after free in Extensions in Google Chrome prior to 107.0.5304.62 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via a crafted Chrome Extension. (Chromium security severity: Medium)"}, {"Reference": "CVE-2022-3658", "Description": "Use after free in Feedback service on Chrome OS in Google Chrome on Chrome OS prior to 107.0.5304.62 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via specific UI interaction. (Chromium security severity: Medium)"}, {"Reference": "CVE-2022-3659", "Description": "Use after free in Accessibility in Google Chrome on Chrome OS prior to 107.0.5304.62 allowed a remote attacker who convinced a user to engage in specific UI interactions to potentially exploit heap corruption via specific UI interactions. (Chromium security severity: Medium)"}, {"Reference": "CVE-2022-37035", "Description": "An issue was discovered in bgpd in FRRouting (FRR) 8.3. In bgp_notify_send_with_data() and bgp_process_packet() in bgp_packet.c, there is a possible use-after-free due to a race condition. This could lead to Remote Code Execution or Information Disclosure by sending crafted BGP packets. User interaction is not needed for exploitation."}, {"Reference": "CVE-2022-3842", "Description": "Use after free in Passwords in Google Chrome prior to 105.0.5195.125 allowed a remote attacker who had compromised the renderer process to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-3863", "Description": "Use after free in Browser History in Google Chrome prior to 100.0.4896.75 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chrome security severity: High)"}, {"Reference": "CVE-2022-3885", "Description": "Use after free in V8 in Google Chrome prior to 107.0.5304.106 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-3886", "Description": "Use after free in Speech Recognition in Google Chrome prior to 107.0.5304.106 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-3887", "Description": "Use after free in Web Workers in Google Chrome prior to 107.0.5304.106 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-3888", "Description": "Use after free in WebCodecs in Google Chrome prior to 107.0.5304.106 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-39134", "Description": "In audio driver, there is a use after free due to a race condition. This could lead to local denial of service in kernel."}, {"Reference": "CVE-2022-40307", "Description": "An issue was discovered in the Linux kernel through 5.19.8. drivers/firmware/efi/capsule-loader.c has a race condition with a resultant use-after-free."}, {"Reference": "CVE-2022-4175", "Description": "Use after free in Camera Capture in Google Chrome prior to 108.0.5359.71 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-4177", "Description": "Use after free in Extensions in Google Chrome prior to 108.0.5359.71 allowed an attacker who convinced a user to install an extension to potentially exploit heap corruption via a crafted Chrome Extension and UI interaction. (Chromium security severity: High)"}, {"Reference": "CVE-2022-4178", "Description": "Use after free in Mojo in Google Chrome prior to 108.0.5359.71 allowed a remote attacker who had compromised the renderer process to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-4179", "Description": "Use after free in Audio in Google Chrome prior to 108.0.5359.71 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via a crafted Chrome Extension. (Chromium security severity: High)"}, {"Reference": "CVE-2022-4180", "Description": "Use after free in Mojo in Google Chrome prior to 108.0.5359.71 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via a crafted Chrome Extension. (Chromium security severity: High)"}, {"Reference": "CVE-2022-4181", "Description": "Use after free in Forms in Google Chrome prior to 108.0.5359.71 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-4191", "Description": "Use after free in Sign-In in Google Chrome prior to 108.0.5359.71 allowed a remote attacker who convinced a user to engage in specific UI interaction to potentially exploit heap corruption via profile destruction. (Chromium security severity: Medium)"}, {"Reference": "CVE-2022-4192", "Description": "Use after free in Live Caption in Google Chrome prior to 108.0.5359.71 allowed a remote attacker who convinced a user to engage in specific UI interaction to potentially exploit heap corruption via UI interaction. (Chromium security severity: Medium)"}, {"Reference": "CVE-2022-4194", "Description": "Use after free in Accessibility in Google Chrome prior to 108.0.5359.71 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: Medium)"}, {"Reference": "CVE-2022-42332", "Description": "x86 shadow plus log-dirty mode use-after-free In environments where host assisted address translation is necessary but Hardware Assisted Paging (HAP) is unavailable, Xen will run guests in so called shadow mode. Shadow mode maintains a pool of memory used for both shadow page tables as well as auxiliary data structures. To migrate or snapshot guests, Xen additionally runs them in so called log-dirty mode. The data structures needed by the log-dirty tracking are part of aformentioned auxiliary data. In order to keep error handling efforts within reasonable bounds, for operations which may require memory allocations shadow mode logic ensures up front that enough memory is available for the worst case requirements. Unfortunately, while page table memory is properly accounted for on the code path requiring the potential establishing of new shadows, demands by the log-dirty infrastructure were not taken into consideration. As a result, just established shadow page tables could be freed again immediately, while other code is still accessing them on the assumption that they would remain allocated."}, {"Reference": "CVE-2022-44032", "Description": "An issue was discovered in the Linux kernel through 6.0.6. drivers/char/pcmcia/cm4000_cs.c has a race condition and resultant use-after-free if a physically proximate attacker removes a PCMCIA device while calling open(), aka a race condition between cmm_open() and cm4000_detach()."}, {"Reference": "CVE-2022-44033", "Description": "An issue was discovered in the Linux kernel through 6.0.6. drivers/char/pcmcia/cm4040_cs.c has a race condition and resultant use-after-free if a physically proximate attacker removes a PCMCIA device while calling open(), aka a race condition between cm4040_open() and reader_detach()."}, {"Reference": "CVE-2022-44034", "Description": "An issue was discovered in the Linux kernel through 6.0.6. drivers/char/pcmcia/scr24x_cs.c has a race condition and resultant use-after-free if a physically proximate attacker removes a PCMCIA device while calling open(), aka a race condition between scr24x_open() and scr24x_remove()."}, {"Reference": "CVE-2022-4436", "Description": "Use after free in Blink Media in Google Chrome prior to 108.0.5359.124 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-4437", "Description": "Use after free in Mojo IPC in Google Chrome prior to 108.0.5359.124 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-4438", "Description": "Use after free in Blink Frames in Google Chrome prior to 108.0.5359.124 allowed a remote attacker who convinced the user to engage in specific UI interactions to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-4439", "Description": "Use after free in Aura in Google Chrome on Windows prior to 108.0.5359.124 allowed a remote attacker who convinced the user to engage in specific UI interactions to potentially exploit heap corruption via specific UI interactions. (Chromium security severity: High)"}, {"Reference": "CVE-2022-4440", "Description": "Use after free in Profiles in Google Chrome prior to 108.0.5359.124 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: Medium)"}, {"Reference": "CVE-2022-44550", "Description": "The graphics display module has a UAF vulnerability when traversing graphic layers. Successful exploitation of this vulnerability may affect system availability."}, {"Reference": "CVE-2022-45406", "Description": "If an out-of-memory condition occurred when creating a JavaScript global, a JavaScript realm may be deleted while references to it lived on in a BaseShape. This could lead to a use-after-free causing a potentially exploitable crash. This vulnerability affects Firefox ESR < 102.5, Thunderbird < 102.5, and Firefox < 107."}, {"Reference": "CVE-2022-32609", "Description": "In vcu, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07203410; Issue ID: ALPS07203410."}, {"Reference": "CVE-2022-32610", "Description": "In vcu, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07203476; Issue ID: ALPS07203476."}, {"Reference": "CVE-2022-32612", "Description": "In vcu, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07203500; Issue ID: ALPS07203500."}, {"Reference": "CVE-2022-32613", "Description": "In vcu, there is a possible memory corruption due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07206340; Issue ID: ALPS07206340."}, {"Reference": "CVE-2022-32643", "Description": "In ccd, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07341261; Issue ID: ALPS07341261."}, {"Reference": "CVE-2022-32644", "Description": "In vow, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07494473; Issue ID: ALPS07494473."}, {"Reference": "CVE-2022-32648", "Description": "In disp, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06535964; Issue ID: ALPS06535964."}, {"Reference": "CVE-2022-2742", "Description": "Use after free in Exosphere in Google Chrome on Chrome OS and Lacros prior to 104.0.5112.79 allowed a remote attacker who convinced a user to engage in specific UI interactions to potentially exploit heap corruption via crafted UI interactions. (Chrome security severity: High)"}, {"Reference": "CVE-2022-2854", "Description": "Use after free in SwiftShader in Google Chrome prior to 104.0.5112.101 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-29228", "Description": "Envoy is a cloud-native high-performance proxy. In versions prior to 1.22.1 the OAuth filter would try to invoke the remaining filters in the chain after emitting a local response, which triggers an ASSERT() in newer versions and corrupts memory on earlier versions. continueDecoding() shouldn\u2019t ever be called from filters after a local reply has been sent. Users are advised to upgrade. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-23459", "Description": "Jsonxx or Json++ is a JSON parser, writer and reader written in C++. In affected versions of jsonxx use of the Value class may lead to memory corruption via a double free or via a use after free. The value class has a default assignment operator which may be used with pointer types which may point to alterable data where the pointer itself is not updated. This issue exists on the current commit of the jsonxx project. The project itself has been archived and updates are not expected. Users are advised to find a replacement."}, {"Reference": "CVE-2022-3370", "Description": "Use after free in Custom Elements in Google Chrome prior to 106.0.5249.91 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-3049", "Description": "Use after free in SplitScreen in Google Chrome on Chrome OS, Lacros prior to 105.0.5195.52 allowed a remote attacker who convinced a user to engage in specific UI interactions to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-3071", "Description": "Use after free in Tab Strip in Google Chrome on Chrome OS, Lacros prior to 105.0.5195.52 allowed a remote attacker who convinced a user to engage in specific UI interactions to potentially exploit heap corruption via crafted UI interaction."}, {"Reference": "CVE-2022-43945", "Description": "The Linux kernel NFSD implementation prior to versions 5.19.17 and 6.0.2 are vulnerable to buffer overflow. NFSD tracks the number of pages held by each NFSD thread by combining the receive and send buffers of a remote procedure call (RPC) into a single array of pages. A client can force the send buffer to shrink by sending an RPC message over TCP with garbage data added at the end of the message. The RPC message with garbage data is still correctly formed according to the specification and is passed forward to handlers. Vulnerable code in NFSD is not expecting the oversized request and writes beyond the allocated buffer space. CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"}, {"Reference": "CVE-2022-23036", "Description": "Linux PV device frontends vulnerable to attacks by backends T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Several Linux PV device frontends are using the grant table interfaces for removing access rights of the backends in ways being subject to race conditions, resulting in potential data leaks, data corruption by malicious backends, and denial of service triggered by malicious backends: blkfront, netfront, scsifront and the gntalloc driver are testing whether a grant reference is still in use. If this is not the case, they assume that a following removal of the granted access will always succeed, which is not true in case the backend has mapped the granted page between those two operations. As a result the backend can keep access to the memory page of the guest no matter how the page will be used after the frontend I/O has finished. The xenbus driver has a similar problem, as it doesn't check the success of removing the granted access of a shared ring buffer. blkfront: CVE-2022-23036 netfront: CVE-2022-23037 scsifront: CVE-2022-23038 gntalloc: CVE-2022-23039 xenbus: CVE-2022-23040 blkfront, netfront, scsifront, usbfront, dmabuf, xenbus, 9p, kbdfront, and pvcalls are using a functionality to delay freeing a grant reference until it is no longer in use, but the freeing of the related data page is not synchronized with dropping the granted access. As a result the backend can keep access to the memory page even after it has been freed and then re-used for a different purpose. CVE-2022-23041 netfront will fail a BUG_ON() assertion if it fails to revoke access in the rx path. This will result in a Denial of Service (DoS) situation of the guest which can be triggered by the backend. CVE-2022-23042"}, {"Reference": "CVE-2022-23037", "Description": "Linux PV device frontends vulnerable to attacks by backends T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Several Linux PV device frontends are using the grant table interfaces for removing access rights of the backends in ways being subject to race conditions, resulting in potential data leaks, data corruption by malicious backends, and denial of service triggered by malicious backends: blkfront, netfront, scsifront and the gntalloc driver are testing whether a grant reference is still in use. If this is not the case, they assume that a following removal of the granted access will always succeed, which is not true in case the backend has mapped the granted page between those two operations. As a result the backend can keep access to the memory page of the guest no matter how the page will be used after the frontend I/O has finished. The xenbus driver has a similar problem, as it doesn't check the success of removing the granted access of a shared ring buffer. blkfront: CVE-2022-23036 netfront: CVE-2022-23037 scsifront: CVE-2022-23038 gntalloc: CVE-2022-23039 xenbus: CVE-2022-23040 blkfront, netfront, scsifront, usbfront, dmabuf, xenbus, 9p, kbdfront, and pvcalls are using a functionality to delay freeing a grant reference until it is no longer in use, but the freeing of the related data page is not synchronized with dropping the granted access. As a result the backend can keep access to the memory page even after it has been freed and then re-used for a different purpose. CVE-2022-23041 netfront will fail a BUG_ON() assertion if it fails to revoke access in the rx path. This will result in a Denial of Service (DoS) situation of the guest which can be triggered by the backend. CVE-2022-23042"}, {"Reference": "CVE-2022-23038", "Description": "Linux PV device frontends vulnerable to attacks by backends T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Several Linux PV device frontends are using the grant table interfaces for removing access rights of the backends in ways being subject to race conditions, resulting in potential data leaks, data corruption by malicious backends, and denial of service triggered by malicious backends: blkfront, netfront, scsifront and the gntalloc driver are testing whether a grant reference is still in use. If this is not the case, they assume that a following removal of the granted access will always succeed, which is not true in case the backend has mapped the granted page between those two operations. As a result the backend can keep access to the memory page of the guest no matter how the page will be used after the frontend I/O has finished. The xenbus driver has a similar problem, as it doesn't check the success of removing the granted access of a shared ring buffer. blkfront: CVE-2022-23036 netfront: CVE-2022-23037 scsifront: CVE-2022-23038 gntalloc: CVE-2022-23039 xenbus: CVE-2022-23040 blkfront, netfront, scsifront, usbfront, dmabuf, xenbus, 9p, kbdfront, and pvcalls are using a functionality to delay freeing a grant reference until it is no longer in use, but the freeing of the related data page is not synchronized with dropping the granted access. As a result the backend can keep access to the memory page even after it has been freed and then re-used for a different purpose. CVE-2022-23041 netfront will fail a BUG_ON() assertion if it fails to revoke access in the rx path. This will result in a Denial of Service (DoS) situation of the guest which can be triggered by the backend. CVE-2022-23042"}, {"Reference": "CVE-2022-23039", "Description": "Linux PV device frontends vulnerable to attacks by backends T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Several Linux PV device frontends are using the grant table interfaces for removing access rights of the backends in ways being subject to race conditions, resulting in potential data leaks, data corruption by malicious backends, and denial of service triggered by malicious backends: blkfront, netfront, scsifront and the gntalloc driver are testing whether a grant reference is still in use. If this is not the case, they assume that a following removal of the granted access will always succeed, which is not true in case the backend has mapped the granted page between those two operations. As a result the backend can keep access to the memory page of the guest no matter how the page will be used after the frontend I/O has finished. The xenbus driver has a similar problem, as it doesn't check the success of removing the granted access of a shared ring buffer. blkfront: CVE-2022-23036 netfront: CVE-2022-23037 scsifront: CVE-2022-23038 gntalloc: CVE-2022-23039 xenbus: CVE-2022-23040 blkfront, netfront, scsifront, usbfront, dmabuf, xenbus, 9p, kbdfront, and pvcalls are using a functionality to delay freeing a grant reference until it is no longer in use, but the freeing of the related data page is not synchronized with dropping the granted access. As a result the backend can keep access to the memory page even after it has been freed and then re-used for a different purpose. CVE-2022-23041 netfront will fail a BUG_ON() assertion if it fails to revoke access in the rx path. This will result in a Denial of Service (DoS) situation of the guest which can be triggered by the backend. CVE-2022-23042"}, {"Reference": "CVE-2022-23040", "Description": "Linux PV device frontends vulnerable to attacks by backends T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Several Linux PV device frontends are using the grant table interfaces for removing access rights of the backends in ways being subject to race conditions, resulting in potential data leaks, data corruption by malicious backends, and denial of service triggered by malicious backends: blkfront, netfront, scsifront and the gntalloc driver are testing whether a grant reference is still in use. If this is not the case, they assume that a following removal of the granted access will always succeed, which is not true in case the backend has mapped the granted page between those two operations. As a result the backend can keep access to the memory page of the guest no matter how the page will be used after the frontend I/O has finished. The xenbus driver has a similar problem, as it doesn't check the success of removing the granted access of a shared ring buffer. blkfront: CVE-2022-23036 netfront: CVE-2022-23037 scsifront: CVE-2022-23038 gntalloc: CVE-2022-23039 xenbus: CVE-2022-23040 blkfront, netfront, scsifront, usbfront, dmabuf, xenbus, 9p, kbdfront, and pvcalls are using a functionality to delay freeing a grant reference until it is no longer in use, but the freeing of the related data page is not synchronized with dropping the granted access. As a result the backend can keep access to the memory page even after it has been freed and then re-used for a different purpose. CVE-2022-23041 netfront will fail a BUG_ON() assertion if it fails to revoke access in the rx path. This will result in a Denial of Service (DoS) situation of the guest which can be triggered by the backend. CVE-2022-23042"}, {"Reference": "CVE-2022-23041", "Description": "Linux PV device frontends vulnerable to attacks by backends T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Several Linux PV device frontends are using the grant table interfaces for removing access rights of the backends in ways being subject to race conditions, resulting in potential data leaks, data corruption by malicious backends, and denial of service triggered by malicious backends: blkfront, netfront, scsifront and the gntalloc driver are testing whether a grant reference is still in use. If this is not the case, they assume that a following removal of the granted access will always succeed, which is not true in case the backend has mapped the granted page between those two operations. As a result the backend can keep access to the memory page of the guest no matter how the page will be used after the frontend I/O has finished. The xenbus driver has a similar problem, as it doesn't check the success of removing the granted access of a shared ring buffer. blkfront: CVE-2022-23036 netfront: CVE-2022-23037 scsifront: CVE-2022-23038 gntalloc: CVE-2022-23039 xenbus: CVE-2022-23040 blkfront, netfront, scsifront, usbfront, dmabuf, xenbus, 9p, kbdfront, and pvcalls are using a functionality to delay freeing a grant reference until it is no longer in use, but the freeing of the related data page is not synchronized with dropping the granted access. As a result the backend can keep access to the memory page even after it has been freed and then re-used for a different purpose. CVE-2022-23041 netfront will fail a BUG_ON() assertion if it fails to revoke access in the rx path. This will result in a Denial of Service (DoS) situation of the guest which can be triggered by the backend. CVE-2022-23042"}, {"Reference": "CVE-2022-23042", "Description": "Linux PV device frontends vulnerable to attacks by backends T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Several Linux PV device frontends are using the grant table interfaces for removing access rights of the backends in ways being subject to race conditions, resulting in potential data leaks, data corruption by malicious backends, and denial of service triggered by malicious backends: blkfront, netfront, scsifront and the gntalloc driver are testing whether a grant reference is still in use. If this is not the case, they assume that a following removal of the granted access will always succeed, which is not true in case the backend has mapped the granted page between those two operations. As a result the backend can keep access to the memory page of the guest no matter how the page will be used after the frontend I/O has finished. The xenbus driver has a similar problem, as it doesn't check the success of removing the granted access of a shared ring buffer. blkfront: CVE-2022-23036 netfront: CVE-2022-23037 scsifront: CVE-2022-23038 gntalloc: CVE-2022-23039 xenbus: CVE-2022-23040 blkfront, netfront, scsifront, usbfront, dmabuf, xenbus, 9p, kbdfront, and pvcalls are using a functionality to delay freeing a grant reference until it is no longer in use, but the freeing of the related data page is not synchronized with dropping the granted access. As a result the backend can keep access to the memory page even after it has been freed and then re-used for a different purpose. CVE-2022-23041 netfront will fail a BUG_ON() assertion if it fails to revoke access in the rx path. This will result in a Denial of Service (DoS) situation of the guest which can be triggered by the backend. CVE-2022-23042"}, {"Reference": "CVE-2021-0920", "Description": "In unix_scm_to_skb of af_unix.c, there is a possible use after free bug due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-196926917References: Upstream kernel"}, {"Reference": "CVE-2021-1048", "Description": "In ep_loop_check_proc of eventpoll.c, there is a possible way to corrupt memory due to a use after free. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-204573007References: Upstream kernel"}, {"Reference": "CVE-2021-1905", "Description": "Possible use after free due to improper handling of memory mapping of multiple processes simultaneously. in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables"}, {"Reference": "CVE-2021-21193", "Description": "Use after free in Blink in Google Chrome prior to 89.0.4389.90 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-21206", "Description": "Use after free in Blink in Google Chrome prior to 89.0.4389.128 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-25370", "Description": "An incorrect implementation handling file descriptor in dpu driver prior to SMR Mar-2021 Release 1 results in memory corruption leading to kernel panic."}, {"Reference": "CVE-2021-26411", "Description": "Internet Explorer Memory Corruption Vulnerability"}, {"Reference": "CVE-2021-28550", "Description": "Acrobat Reader DC versions versions 2021.001.20150 (and earlier), 2020.001.30020 (and earlier) and 2017.011.30194 (and earlier) are affected by a Use After Free vulnerability. An unauthenticated attacker could leverage this vulnerability to achieve arbitrary code execution in the context of the current user. Exploitation of this issue requires user interaction in that a victim must open a malicious file."}, {"Reference": "CVE-2021-28663", "Description": "The Arm Mali GPU kernel driver allows privilege escalation or information disclosure because GPU memory operations are mishandled, leading to a use-after-free. This affects Bifrost r0p0 through r28p0 before r29p0, Valhall r19p0 through r28p0 before r29p0, and Midgard r4p0 through r30p0."}, {"Reference": "CVE-2021-30554", "Description": "Use after free in WebGL in Google Chrome prior to 91.0.4472.114 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-30633", "Description": "Use after free in Indexed DB API in Google Chrome prior to 93.0.4577.82 allowed a remote attacker who had compromised the renderer process to potentially perform a sandbox escape via a crafted HTML page."}, {"Reference": "CVE-2021-30661", "Description": "A use after free issue was addressed with improved memory management. This issue is fixed in Safari 14.1, iOS 12.5.3, iOS 14.5 and iPadOS 14.5, watchOS 7.4, tvOS 14.5, macOS Big Sur 11.3. Processing maliciously crafted web content may lead to arbitrary code execution. Apple is aware of a report that this issue may have been actively exploited.."}, {"Reference": "CVE-2021-30762", "Description": "A use after free issue was addressed with improved memory management. This issue is fixed in iOS 12.5.4. Processing maliciously crafted web content may lead to arbitrary code execution. Apple is aware of a report that this issue may have been actively exploited.."}, {"Reference": "CVE-2021-30858", "Description": "A use after free issue was addressed with improved memory management. This issue is fixed in iOS 14.8 and iPadOS 14.8, macOS Big Sur 11.6. Processing maliciously crafted web content may lead to arbitrary code execution. Apple is aware of a report that this issue may have been actively exploited."}, {"Reference": "CVE-2021-31166", "Description": "HTTP Protocol Stack Remote Code Execution Vulnerability"}, {"Reference": "CVE-2021-34486", "Description": "Windows Event Tracing Elevation of Privilege Vulnerability"}, {"Reference": "CVE-2021-37973", "Description": "Use after free in Portals in Google Chrome prior to 94.0.4606.61 allowed a remote attacker who had compromised the renderer process to potentially perform a sandbox escape via a crafted HTML page."}, {"Reference": "CVE-2021-37975", "Description": "Use after free in V8 in Google Chrome prior to 94.0.4606.71 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-40449", "Description": "Win32k Elevation of Privilege Vulnerability"}, {"Reference": "CVE-2022-22620", "Description": "A use after free issue was addressed with improved memory management. This issue is fixed in macOS Monterey 12.2.1, iOS 15.3.1 and iPadOS 15.3.1, Safari 15.3 (v. 16612.4.9.1.8 and 15612.4.9.1.8). Processing maliciously crafted web content may lead to arbitrary code execution. Apple is aware of a report that this issue may have been actively exploited.."}, {"Reference": "CVE-2022-26485", "Description": "Removing an XSLT parameter during processing could have lead to an exploitable use-after-free. We have had reports of attacks in the wild abusing this flaw. This vulnerability affects Firefox < 97.0.2, Firefox ESR < 91.6.1, Firefox for Android < 97.3.0, Thunderbird < 91.6.2, and Focus < 97.3.0."}, {"Reference": "CVE-2022-26486", "Description": "An unexpected message in the WebGPU IPC framework could lead to a use-after-free and exploitable sandbox escape. We have had reports of attacks in the wild abusing this flaw. This vulnerability affects Firefox < 97.0.2, Firefox ESR < 91.6.1, Firefox for Android < 97.3.0, Thunderbird < 91.6.2, and Focus < 97.3.0."}, {"Reference": "CVE-2022-38181", "Description": "The Arm Mali GPU kernel driver allows unprivileged users to access freed memory because GPU memory operations are mishandled. This affects Bifrost r0p0 through r38p1, and r39p0; Valhall r19p0 through r38p1, and r39p0; and Midgard r4p0 through r32p0."}, {"Reference": "CVE-2021-39649", "Description": "In regmap_exit of regmap.c, there is a possible use-after-free due to improper locking. This could lead to local escalation of privilege in the kernel with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-174049006References: N/A"}, {"Reference": "CVE-2022-0523", "Description": "Use After Free in GitHub repository radareorg/radare2 prior to 5.6.2."}, {"Reference": "CVE-2022-20109", "Description": "In ion, there is a possible use after free due to improper update of reference count. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06399915; Issue ID: ALPS06399915."}, {"Reference": "CVE-2022-20153", "Description": "In rcu_cblist_dequeue of rcu_segcblist.c, there is a possible use-after-free due to improper locking. This could lead to local escalation of privilege in the kernel with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-222091980References: Upstream kernel"}, {"Reference": "CVE-2022-20376", "Description": "In trusty_log_seq_start of trusty-log.c, there is a possible use after free due to improper locking. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-216130110References: N/A"}, {"Reference": "CVE-2022-26451", "Description": "In ged, there is a possible use after free due to improper locking. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07202966; Issue ID: ALPS07202966."}, {"Reference": "CVE-2022-3910", "Description": "Use After Free vulnerability in Linux Kernel allows Privilege Escalation. An improper Update of Reference Count in io_uring leads to Use-After-Free and Local Privilege Escalation. When io_msg_ring was invoked with a fixed file, it called io_fput_file() which improperly decreased its reference count (leading to Use-After-Free and Local Privilege Escalation). Fixed files are permanently registered to the ring, and should not be put separately. We recommend upgrading past commit https://github.com/torvalds/linux/commit/fc7222c3a9f56271fba02aabbfbae999042f1679 https://github.com/torvalds/linux/commit/fc7222c3a9f56271fba02aabbfbae999042f1679 "}, {"Reference": "CVE-2022-22034", "Description": "Windows Graphics Component Elevation of Privilege Vulnerability"}, {"Reference": "CVE-2022-21881", "Description": "Windows Kernel Elevation of Privilege Vulnerability"}, {"Reference": "CVE-2022-0581", "Description": "Crash in the CMS protocol dissector in Wireshark 3.6.0 to 3.6.1 and 3.4.0 to 3.4.11 allows denial of service via packet injection or crafted capture file"}, {"Reference": "CVE-2022-3541", "Description": "A vulnerability classified as critical has been found in Linux Kernel. This affects the function spl2sw_nvmem_get_mac_address of the file drivers/net/ethernet/sunplus/spl2sw_driver.c of the component BPF. The manipulation leads to use after free. It is recommended to apply a patch to fix this issue. The identifier VDB-211041 was assigned to this vulnerability."}, {"Reference": "CVE-2022-3545", "Description": "A vulnerability has been found in Linux Kernel and classified as critical. Affected by this vulnerability is the function area_cache_get of the file drivers/net/ethernet/netronome/nfp/nfpcore/nfp_cppcore.c of the component IPsec. The manipulation leads to use after free. It is recommended to apply a patch to fix this issue. The identifier VDB-211045 was assigned to this vulnerability."}, {"Reference": "CVE-2022-3559", "Description": "A vulnerability was found in Exim and classified as problematic. This issue affects some unknown processing of the component Regex Handler. The manipulation leads to use after free. The name of the patch is 4e9ed49f8f12eb331b29bd5b6dc3693c520fddc2. It is recommended to apply a patch to fix this issue. The identifier VDB-211073 was assigned to this vulnerability."}, {"Reference": "CVE-2022-3564", "Description": "A vulnerability classified as critical was found in Linux Kernel. Affected by this vulnerability is the function l2cap_reassemble_sdu of the file net/bluetooth/l2cap_core.c of the component Bluetooth. The manipulation leads to use after free. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-211087."}, {"Reference": "CVE-2022-3565", "Description": "A vulnerability, which was classified as critical, has been found in Linux Kernel. Affected by this issue is the function del_timer of the file drivers/isdn/mISDN/l1oip_core.c of the component Bluetooth. The manipulation leads to use after free. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-211088."}, {"Reference": "CVE-2022-3620", "Description": "A vulnerability was found in Exim and classified as problematic. This issue affects the function dmarc_dns_lookup of the file dmarc.c of the component DMARC Handler. The manipulation leads to use after free. The attack may be initiated remotely. The name of the patch is 12fb3842f81bcbd4a4519d5728f2d7e0e3ca1445. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-211919."}, {"Reference": "CVE-2022-3625", "Description": "A vulnerability was found in Linux Kernel. It has been classified as critical. This affects the function devlink_param_set/devlink_param_get of the file net/core/devlink.c of the component IPsec. The manipulation leads to use after free. It is recommended to apply a patch to fix this issue. The identifier VDB-211929 was assigned to this vulnerability."}, {"Reference": "CVE-2022-3635", "Description": "A vulnerability, which was classified as critical, has been found in Linux Kernel. Affected by this issue is the function tst_timer of the file drivers/atm/idt77252.c of the component IPsec. The manipulation leads to use after free. It is recommended to apply a patch to fix this issue. VDB-211934 is the identifier assigned to this vulnerability."}, {"Reference": "CVE-2022-3636", "Description": "A vulnerability, which was classified as critical, was found in Linux Kernel. This affects the function __mtk_ppe_check_skb of the file drivers/net/ethernet/mediatek/mtk_ppe.c of the component Ethernet Handler. The manipulation leads to use after free. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-211935."}, {"Reference": "CVE-2022-3640", "Description": "A vulnerability, which was classified as critical, was found in Linux Kernel. Affected is the function l2cap_conn_del of the file net/bluetooth/l2cap_core.c of the component Bluetooth. The manipulation leads to use after free. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-211944."}, {"Reference": "CVE-2022-3649", "Description": "A vulnerability was found in Linux Kernel. It has been classified as problematic. Affected is the function nilfs_new_inode of the file fs/nilfs2/inode.c of the component BPF. The manipulation leads to use after free. It is possible to launch the attack remotely. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-211992."}, {"Reference": "CVE-2022-3705", "Description": "A vulnerability was found in vim and classified as problematic. Affected by this issue is the function qf_update_buffer of the file quickfix.c of the component autocmd Handler. The manipulation leads to use after free. The attack may be launched remotely. Upgrading to version 9.0.0805 is able to address this issue. The name of the patch is d0fab10ed2a86698937e3c3fed2f10bd9bb5e731. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-212324."}, {"Reference": "CVE-2021-30262", "Description": "Improper validation of a socket state when socket events are being sent to clients can lead to invalid access of memory in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables"}, {"Reference": "CVE-2022-35254", "Description": "An unauthenticated attacker can cause a denial-of-service to the following products: Ivanti Connect Secure (ICS) in versions prior to 9.1R14.3, 9.1R15.2, 9.1R16.2, and 22.2R4, Ivanti Policy Secure (IPS) in versions prior to 9.1R17 and 22.3R1, and Ivanti Neurons for Zero-Trust Access in versions prior to 22.3R1."}]}
{"ID": "419", "Name": "Unprotected Primary Channel", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "923", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity", "Bypass Protection Mechanism"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Do not expose administrative functionnality on the user UI."}, {"Phase": ["Architecture and Design"], "Description": "Protect the administrative/restricted functionality with a strong authentication mechanism."}], "RelatedAttackPatterns": ["383"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-33932", "Description": "Dell PowerScale OneFS, versions 9.0.0 up to and including 9.1.0.19, 9.2.1.12, 9.3.0.6, and 9.4.0.2, contain an unprotected primary channel vulnerability. An unauthenticated network malicious attacker may potentially exploit this vulnerability, leading to a denial of filesystem services."}]}
{"ID": "42", "Name": "Path Equivalence: 'filename.' (Trailing Dot)", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product accepts path input in the form of trailing dot ('filedir.') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "41", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "162", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"]}], "ObservedExamples": [{"Reference": "CVE-2000-1114", "Description": "Source code disclosure using trailing dot", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1114"}, {"Reference": "CVE-2002-1986", "Description": "Source code disclosure using trailing dot", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1986"}, {"Reference": "CVE-2004-2213", "Description": "Source code disclosure using trailing dot", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2213"}, {"Reference": "CVE-2005-3293", "Description": "Source code disclosure using trailing dot", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3293"}, {"Reference": "CVE-2004-0061", "Description": "Bypass directory access restrictions using trailing dot in URL", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0061"}, {"Reference": "CVE-2000-1133", "Description": "Bypass directory access restrictions using trailing dot in URL", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1133"}, {"Reference": "CVE-2001-1386", "Description": "Bypass check for \".lnk\" extension using \".lnk.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1386"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "420", "Name": "Unprotected Alternate Channel", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product protects a primary channel, but it does not use the same level of protection for an alternate channel.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "923", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."}, {"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity", "Bypass Protection Mechanism"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Identify all alternate channels and use the same protection mechanisms that are used for the primary channels."}], "DemonstrativeExamples": [{"ID": "DX-176", "Entries": [{"IntroText": "Register SECURE_ME is located at address 0xF00. A mirror of this register called COPY_OF_SECURE_ME is at location 0x800F00. The register SECURE_ME is protected from malicious agents and only allows access to select, while COPY_OF_SECURE_ME is not. \n\n\n Access control is implemented using an allowlist (as indicated by acl_oh_allowlist). The identity of the initiator of the transaction is indicated by the one hot input, incoming_id. This is checked against the acl_oh_allowlist (which contains a list of initiators that are allowed to access the asset). \n\n\n Though this example is shown in Verilog, it will apply to VHDL as well."}, {"Nature": "Informative", "Language": "Verilog", "ExampleCode": "module foo_bar(data_out, data_in, incoming_id, address, clk, rst_n);\n output [31:0] data_out;\n input [31:0] data_in, incoming_id, address;\n input clk, rst_n;\n wire write_auth, addr_auth;\n reg [31:0] data_out, acl_oh_allowlist, q;\n assign write_auth = | (incoming_id & acl_oh_allowlist) ? 1 : 0; \n always @*\n\n```\n\t acl_oh_allowlist <= 32'h8312; \n assign addr_auth = (address == 32'hF00) ? 1: 0;\n always @ (posedge clk or negedge rst_n)\n\t if (!rst_n)\n\t\t begin\n\t\t\t q <= 32'h0;\n\t\t\t data_out <= 32'h0;\n\t\t end\n\t else\n\t\t begin\n\t\t\t q <= (addr_auth & write_auth) ? data_in: q;\n\t\t\t data_out <= q;\n\t\t end\n\t end\n endmodule\n```"}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "assign addr_auth = (address == 32'hF00) ? 1: 0;"}, {"BodyText": "The bugged line of code is repeated in the Bad example above. The weakness arises from the fact that the SECURE_ME register can be modified by writing to the shadow register COPY_OF_SECURE_ME. The address of COPY_OF_SECURE_ME should also be included in the check. That buggy line of code should instead be replaced as shown in the Good Code Snippet below."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "assign addr_auth = (address == 32'hF00 || address == 32'h800F00) ? 1: 0;"}]}], "ObservedExamples": [{"Reference": "CVE-2020-8004", "Description": "When the internal flash is protected by blocking access on the Data Bus (DBUS), it can still be indirectly accessed through the Instruction Bus (IBUS).", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-8004"}, {"Reference": "CVE-2002-0567", "Description": "DB server assumes that local clients have performed authentication, allowing attacker to directly connect to a process to load libraries and execute commands; a socket interface also exists (another alternate channel), so attack can be remote.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0567"}, {"Reference": "CVE-2002-1578", "Description": "Product does not restrict access to underlying database, so attacker can bypass restrictions by directly querying the database.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1578"}, {"Reference": "CVE-2003-1035", "Description": "User can avoid lockouts by using an API instead of the GUI to conduct brute force password guessing.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1035"}, {"Reference": "CVE-2002-1863", "Description": "FTP service can not be disabled even when other access controls would require it.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1863"}, {"Reference": "CVE-2002-0066", "Description": "Windows named pipe created without authentication/access control, allowing configuration modification.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0066"}, {"Reference": "CVE-2004-1461", "Description": "Router management interface spawns a separate TCP connection after authentication, allowing hijacking by attacker coming from the same IP address.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1461"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This can be primary to authentication errors, and resultant from unhandled error conditions."}], "Top25Examples": [{"Reference": "CVE-2022-25786", "Description": "Unprotected Alternate Channel vulnerability in debug console of GateManager allows system administrator to obtain sensitive information. This issue affects: GateManager all versions prior to 9.7."}]}
{"ID": "421", "Name": "Race Condition During Access to Alternate Channel", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product opens an alternate channel to communicate with an authorized user, but the channel is accessible to other actors.", "ExtendedDescription": "This creates a race condition that allows an attacker to access the channel before the authorized user does.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "420", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "362", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity", "Bypass Protection Mechanism"]}], "ObservedExamples": [{"Reference": "CVE-1999-0351", "Description": "FTP \"Pizza Thief\" vulnerability. Attacker can connect to a port that was intended for use by another client.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0351"}, {"Reference": "CVE-2003-0230", "Description": "Product creates Windows named pipe during authentication that another attacker can hijack by connecting to it.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0230"}], "AffectedResources": ["System Process"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "422", "Name": "Unprotected Windows Messaging Channel ('Shatter')", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not properly verify the source of a message in the Windows Messaging System while running at elevated privileges, creating an alternate channel through which an attacker can directly send a message to the product.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "420", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "360", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity", "Bypass Protection Mechanism"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Always verify and authenticate the source of the message."}], "ObservedExamples": [{"Reference": "CVE-2002-0971", "Description": "Bypass GUI and access restricted dialog box.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0971"}, {"Reference": "CVE-2002-1230", "Description": "Gain privileges via Windows message.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1230"}, {"Reference": "CVE-2003-0350", "Description": "A control allows a change to a pointer for a callback function using Windows message.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0350"}, {"Reference": "CVE-2003-0908", "Description": "Product launches Help functionality while running with raised privileges, allowing command execution using Windows message to access \"open file\" dialog.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0908"}, {"Reference": "CVE-2004-0213", "Description": "Attacker uses Shatter attack to bypass GUI-enforced protection for CVE-2003-0908.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0213"}, {"Reference": "CVE-2004-0207", "Description": "User can call certain API functions to modify certain properties of privileged programs.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0207"}], "AffectedResources": ["System Process"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "Overlaps privilege errors and UI errors."}, {"Type": "Research Gap", "Note": "\n\nPossibly under-reported, probably under-studied. It is suspected that a number of publicized vulnerabilities that involve local privilege escalation on Windows systems may be related to Shatter attacks, but they are not labeled as such.\n\n\nAlternate channel attacks likely exist in other operating systems and messaging models, e.g. in privileged X Windows applications, but examples are not readily available.\n"}]}
{"ID": "423", "Name": "DEPRECATED: Proxied Trusted Channel", "Abstraction": "Base", "Structure": "Simple", "Status": "Deprecated", "Description": "This entry has been deprecated because it was a duplicate of CWE-441. All content has been transferred to CWE-441.", "MappingNotes": {"Usage": "Prohibited", "Rationale": "This CWE has been deprecated.", "Comments": "See description and name for possible suggestions of other CWEs to consider.", "Reasons": ["Deprecated"]}}
{"ID": "424", "Name": "Improper Protection of Alternate Path", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product does not sufficiently protect all possible paths that a user can take to access restricted functionality or resources.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "693", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "638", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism", "Gain Privileges or Assume Identity"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Deploy different layers of protection to implement security in depth."}], "ObservedExamples": [{"Reference": "CVE-2022-29238", "Description": "Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-29238"}], "RelatedAttackPatterns": ["127", "554"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Top25Examples": [{"Reference": "CVE-2022-24932", "Description": "Improper Protection of Alternate Path vulnerability in Setup wizard process prior to SMR Mar-2022 Release 1 allows physical attacker package installation before finishing Setup wizard."}]}
{"ID": "425", "Name": "Direct Request ('Forced Browsing')", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The web application does not adequately enforce appropriate authorization on all restricted URLs, scripts, or files.", "ExtendedDescription": "Web applications susceptible to direct request attacks often make the false assumption that such resources can only be reached through a given navigation path and so only apply authorization at certain points in the path.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "862", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "862", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "288", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "424", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "471", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "98", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Web Based", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "forced browsing", "Description": "The \"forced browsing\" term could be misinterpreted to include weaknesses such as CSRF or XSS, so its use is discouraged."}], "ModesOfIntroduction": [{"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control"], "Impact": ["Read Application Data", "Modify Application Data", "Execute Unauthorized Code or Commands", "Gain Privileges or Assume Identity"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Operation"], "Description": "Apply appropriate access control authorizations for each access to all restricted URLs, scripts or files."}, {"Phase": ["Architecture and Design"], "Description": "Consider using MVC based frameworks such as Struts."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "If forced browsing is possible, an attacker may be able to directly access a sensitive page by entering a URL similar to the following."}, {"Nature": "Attack", "Language": "JSP", "ExampleCode": "```\n\thttp://somesite.com/someapplication/admin.jsp\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2022-29238", "Description": "Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-29238"}, {"Reference": "CVE-2022-23607", "Description": "Python-based HTTP library did not scope cookies to a particular domain such that \"supercookies\" could be sent to any domain on redirect.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-23607"}, {"Reference": "CVE-2004-2144", "Description": "Bypass authentication via direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2144"}, {"Reference": "CVE-2005-1892", "Description": "Infinite loop or infoleak triggered by direct requests.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1892"}, {"Reference": "CVE-2004-2257", "Description": "Bypass auth/auth via direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2257"}, {"Reference": "CVE-2005-1688", "Description": "Direct request leads to infoleak by error.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1688"}, {"Reference": "CVE-2005-1697", "Description": "Direct request leads to infoleak by error.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1697"}, {"Reference": "CVE-2005-1698", "Description": "Direct request leads to infoleak by error.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1698"}, {"Reference": "CVE-2005-1685", "Description": "Authentication bypass via direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1685"}, {"Reference": "CVE-2005-1827", "Description": "Authentication bypass via direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1827"}, {"Reference": "CVE-2005-1654", "Description": "Authorization bypass using direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1654"}, {"Reference": "CVE-2005-1668", "Description": "Access privileged functionality using direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1668"}, {"Reference": "CVE-2002-1798", "Description": "Upload arbitrary files via direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1798"}], "RelatedAttackPatterns": ["127", "143", "144", "668", "87"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "Overlaps Modification of Assumed-Immutable Data (MAID), authorization errors, container errors; often primary to other weaknesses such as XSS and SQL injection."}, {"Type": "Theoretical", "Note": "\"Forced browsing\" is a step-based manipulation involving the omission of one or more steps, whose order is assumed to be immutable. The application does not verify that the first step was performed successfully before the second step. The consequence is typically \"authentication bypass\" or \"path disclosure,\" although it can be primary to all kinds of weaknesses, especially in languages such as PHP, which allow external modification of assumed-immutable variables."}], "Top25Examples": [{"Reference": "CVE-2021-26085", "Description": "Affected versions of Atlassian Confluence Server allow remote attackers to view restricted resources via a Pre-Authorization Arbitrary File Read vulnerability in the /s/ endpoint. The affected versions are before version 7.4.10, and from version 7.5.0 before 7.12.3."}, {"Reference": "CVE-2022-36158", "Description": "Contec FXA3200 version 1.13.00 and under suffers from Insecure Permissions in the Wireless LAN Manager interface which allows malicious actors to execute Linux commands with root privilege via a hidden web page (/usr/www/ja/mnt_cmd.cgi)."}, {"Reference": "CVE-2022-40845", "Description": "The Tenda AC1200 Router model W15Ev2 V15.11.0.10(1576) is affected by a password exposure vulnerability. When combined with the improper authorization/improper session management vulnerability, an attacker with access to the router may be able to expose sensitive information which they're not explicitly authorized to have."}, {"Reference": "CVE-2022-47700", "Description": "COMFAST (Shenzhen Sihai Zhonglian Network Technology Co., Ltd) CF-WR623N Router firmware V2.3.0.1 and before is vulnerable to Incorrect Access Control. Improper authentication allows requests to be made to back-end scripts without a valid session or authentication."}, {"Reference": "CVE-2022-29330", "Description": "Missing access control in the backup system of Telesoft VitalPBX before 3.2.1 allows attackers to access the PJSIP and SIP extension credentials, cryptographic keys and voicemails files via unspecified vectors."}, {"Reference": "CVE-2022-31480", "Description": "An unauthenticated attacker could arbitrarily upload firmware files to the target device, ultimately causing a Denial-of-Service (DoS). This vulnerability impacts products based on HID Mercury Intelligent Controllers LP1501, LP1502, LP2500, LP4502, and EP4502 which contain firmware versions prior to 1.302 for the LP series and 1.296 for the EP series. The attacker needs to have a properly signed and encrypted binary, loading the firmware to the device ultimately triggers a reboot."}, {"Reference": "CVE-2022-1077", "Description": "A vulnerability was found in TEM FLEX-1080 and FLEX-1085 1.6.0. It has been declared as problematic. This vulnerability log.cgi of the component Log Handler. A direct request leads to information disclosure of hardware information. The attack can be initiated remotely and does not require any form of authentication."}, {"Reference": "CVE-2022-42197", "Description": "In Simple Exam Reviewer Management System v1.0 the User List function has improper access control that allows low privileged users to modify user permissions to higher privileges."}, {"Reference": "CVE-2021-42748", "Description": "In Beaver Builder through 2.5.0.3, attackers can bypass the visibility controls protection mechanism via the REST API."}, {"Reference": "CVE-2022-26159", "Description": "The auto-completion plugin in Ametys CMS before 4.5.0 allows a remote unauthenticated attacker to read documents such as plugins/web/service/search/auto-completion/<domain>/en.xml (and similar pathnames for other languages), which contain all characters typed by all users, including the content of private pages. For example, a private page may contain usernames, e-mail addresses, and possibly passwords."}, {"Reference": "CVE-2022-26653", "Description": "Zoho ManageEngine Remote Access Plus before 10.1.2137.15 allows guest users to view domain details (such as the username and GUID of an administrator)."}, {"Reference": "CVE-2022-26777", "Description": "Zoho ManageEngine Remote Access Plus before 10.1.2137.15 allows guest users to view license details."}, {"Reference": "CVE-2022-28365", "Description": "Reprise License Manager 14.2 is affected by an Information Disclosure vulnerability via a GET request to /goforms/rlminfo. No authentication is required. The information disclosed is associated with software versions, process IDs, network configuration, hostname(s), system architecture, and file/directory details."}, {"Reference": "CVE-2022-42953", "Description": "Certain ZKTeco products (ZEM500-510-560-760, ZEM600-800, ZEM720, ZMM) allow access to sensitive information via direct requests for the form/DataApp?style=1 and form/DataApp?style=0 URLs. The affected versions may be before 8.88 (ZEM500-510-560-760, ZEM600-800, ZEM720) and 15.00 (ZMM200-220-210). The fixed versions are firmware version 8.88 (ZEM500-510-560-760, ZEM600-800, ZEM720) and firmware version 15.00 (ZMM200-220-210)."}, {"Reference": "CVE-2022-42238", "Description": "A Vertical Privilege Escalation issue in Merchandise Online Store v.1.0 allows an attacker to get access to the admin dashboard."}, {"Reference": "CVE-2022-42438", "Description": "IBM Cloud Pak for Multicloud Management Monitoring 2.0 and 2.3 allows users without admin roles access to admin functions by specifying direct URL paths. IBM X-Force ID: 238210."}, {"Reference": "CVE-2022-28991", "Description": "Multi Store Inventory Management System v1.0 was discovered to contain an information disclosure vulnerability which allows attackers to access sensitive files."}, {"Reference": "CVE-2022-31847", "Description": "A vulnerability in /cgi-bin/ExportAllSettings.sh of WAVLINK WN579 X3 M79X3.V5030.180719 allows attackers to obtain sensitive router information via a crafted POST request."}, {"Reference": "CVE-2022-45276", "Description": "An issue in the /index/user/user_edit.html component of YJCMS v1.0.9 allows unauthenticated attackers to obtain the Administrator account password."}, {"Reference": "CVE-2021-24831", "Description": "All AJAX actions of the Tab WordPress plugin before 1.3.2 are available to both unauthenticated and authenticated users, allowing unauthenticated attackers to modify various data in the plugin, such as add/edit/delete arbitrary tabs."}, {"Reference": "CVE-2021-24890", "Description": "The Scripts Organizer WordPress plugin before 3.0 does not have capability and CSRF checks in the saveScript AJAX action, available to both unauthenticated and authenticated users, and does not validate user input in any way, which could allow unauthenticated users to put arbitrary PHP code in a file"}, {"Reference": "CVE-2022-27480", "Description": "A vulnerability has been identified in SICAM A8000 CP-8031 (All versions < V4.80), SICAM A8000 CP-8050 (All versions < V4.80). Affected devices do not require an user to be authenticated to access certain files. This could allow unauthenticated attackers to download these files."}, {"Reference": "CVE-2022-34572", "Description": "An access control issue in Wavlink WiFi-Repeater RPTA2-77W.M4300.01.GD.2017Sep19 allows attackers to obtain the telnet password via accessing the page tftp.txt."}, {"Reference": "CVE-2022-34573", "Description": "An access control issue in Wavlink WiFi-Repeater RPTA2-77W.M4300.01.GD.2017Sep19 allows attackers to arbitrarily configure device settings via accessing the page mb_wifibasic.shtml."}, {"Reference": "CVE-2022-34574", "Description": "An access control issue in Wavlink WiFi-Repeater RPTA2-77W.M4300.01.GD.2017Sep19 allows attackers to obtain the key information of the device via accessing Tftpd32.ini."}, {"Reference": "CVE-2021-30144", "Description": "The Dashboard plugin through 1.0.2 for GLPI allows remote low-privileged users to bypass access control on viewing information about the last ten events, the connected users, and the users in the tech category. For example, plugins/dashboard/front/main2.php can be used."}, {"Reference": "CVE-2022-26279", "Description": "EyouCMS v1.5.5 was discovered to have no access control in the component /data/sqldata."}, {"Reference": "CVE-2022-34570", "Description": "WAVLINK WN579 X3 M79X3.V5030.191012/M79X3.V5030.191012 contains an information leak which allows attackers to obtain the key information via accessing the messages.txt page."}, {"Reference": "CVE-2022-34571", "Description": "An access control issue in Wavlink WiFi-Repeater RPTA2-77W.M4300.01.GD.2017Sep19 allows attackers to obtain the system key information and execute arbitrary commands via accessing the page syslog.shtml."}, {"Reference": "CVE-2021-40616", "Description": "thinkcmf v5.1.7 has an unauthorized vulnerability. The attacker can modify the password of the administrator account with id 1 through the background user management group permissions. The use condition is that the background user management group authority is required."}, {"Reference": "CVE-2022-1551", "Description": "The SP Project & Document Manager WordPress plugin before 4.58 uses an easily guessable path to store user files, bad actors could use that to access other users' sensitive files."}, {"Reference": "CVE-2022-4057", "Description": "The Autoptimize WordPress plugin before 3.1.0 uses an easily guessable path to store plugin's exported settings and logs."}]}
{"ID": "426", "Name": "Untrusted Search Path", "Abstraction": "Base", "Structure": "Simple", "Status": "Stable", "Description": "The product searches for critical resources using an externally-supplied search path that can point to resources that are not under the product's direct control.", "ExtendedDescription": "\n\nThis might allow attackers to execute their own programs, access unauthorized data files, or modify configuration in unexpected ways. If the product uses a search path to locate critical resources such as programs, then an attacker could modify that search path to point to a malicious program, which the targeted product would then execute. The problem extends to any type of critical resource that the product trusts.\n\n\nSome of the most common variants of untrusted search path are:\n\n\n  - In various UNIX and Linux-based systems, the PATH environment variable may be consulted to locate executable programs, and LD_PRELOAD may be used to locate a separate library.\n\n  - In various Microsoft-based systems, the PATH environment variable is consulted to locate a DLL, if the DLL is not found in other paths that appear earlier in the search order.\n\n", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "642", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "668", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "673", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "427", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "428", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Untrusted Path"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability", "Access Control"], "Impact": ["Gain Privileges or Assume Identity", "Execute Unauthorized Code or Commands"], "Note": "There is the potential for arbitrary code execution with privileges of the vulnerable program."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "The program could be redirected to the wrong files, potentially triggering a crash or hang when the targeted file is too large or does not have the expected format."}, {"Scope": ["Confidentiality"], "Impact": ["Read Files or Directories"], "Note": "The program could send the output of unauthorized files to the attacker."}], "DetectionMethods": [{"DetectionMethodID": "DM-11", "Method": "Black Box", "Description": "\n\nUse monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.\n\n\nAttach the monitor to the process and look for library functions and system calls that suggest when a search path is being used. One pattern is when the program performs multiple accesses of the same file but in different directories, with repeated failures until the proper filename is found. Library calls such as getenv() or their equivalent can be checked to see if any path-related variables are being accessed.\n"}, {"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}, {"Method": "Manual Analysis", "Description": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Strategy": "Attack Surface Reduction", "Description": "Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428."}, {"Phase": ["Implementation"], "Description": "When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths."}, {"Phase": ["Implementation"], "Description": "Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths."}, {"Phase": ["Implementation"], "Description": "Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory."}, {"Phase": ["Implementation"], "Description": "Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of it, while execl() and execv() require a full path."}], "DemonstrativeExamples": [{"ID": "DX-67", "Entries": [{"IntroText": "This program is intended to execute a command that lists the contents of a restricted directory, then performs other actions. Assume that it runs with setuid privileges in order to bypass the permissions check by the operating system."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t#define DIR \"/restricted/directory\"\n\tchar cmd[500];\n\tsprintf(cmd, \"ls -l %480s\", DIR);\n```\n/* Raise privileges to those needed for accessing DIR. */* \n\t\n\tRaisePrivileges(...);\n\tsystem(cmd);\n\tDropPrivileges(...);\n\t..."}, {"BodyText": "This code may look harmless at first, since both the directory and the command are set to fixed values that the attacker can't control. The attacker can only see the contents for DIR, which is the intended program behavior. Finally, the programmer is also careful to limit the code that executes with raised privileges."}, {"BodyText": "However, because the program does not modify the PATH environment variable, the following attack would work:"}, {"Nature": "Attack", "ExampleCode": "- The user sets the PATH to reference a directory under the attacker's control, such as \"/my/dir/\".\n\n  - The attacker creates a malicious program called \"ls\", and puts that program in /my/dir\n\n  - The user executes the program.\n\n  - When system() is executed, the shell consults the PATH to find the ls program\n\n  - The program finds the attacker's malicious program, \"/my/dir/ls\". It doesn't find \"/bin/ls\" because PATH does not contain \"/bin/\".\n\n  - The program executes the attacker's malicious program with the raised privileges."}]}, {"Entries": [{"IntroText": "The following code from a system utility uses the system property APPHOME to determine the directory in which it is installed and then executes an initialization script based on a relative path from the specified directory."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t...\n\tString home = System.getProperty(\"APPHOME\");\n\tString cmd = home + INITCMD;\n\tjava.lang.Runtime.getRuntime().exec(cmd);\n\t...\n```"}, {"BodyText": "The code above allows an attacker to execute arbitrary commands with the elevated privilege of the application by modifying the system property APPHOME to point to a different path containing a malicious version of INITCMD. Because the program does not validate the value read from the environment, if an attacker can control the value of the system property APPHOME, then they can fool the application into running malicious code and take control of the system."}]}, {"ID": "DX-68", "Entries": [{"IntroText": "This code prints all of the running processes belonging to the current user."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n```\n//assume getCurrentUser() returns a username that is guaranteed to be alphanumeric (avoiding CWE-78)* \n\t$userName = getCurrentUser();\n\t$command = 'ps aux | grep ' . $userName;\n\tsystem($command);"}, {"BodyText": "If invoked by an unauthorized web user, it is providing a web page of potentially sensitive information on the underlying system, such as command-line arguments (CWE-497). This program is also potentially vulnerable to a PATH based attack (CWE-426), as an attacker may be able to create malicious versions of the ps or grep commands. While the program does not explicitly raise privileges to run the system commands, the PHP interpreter may by default be running with higher privileges than users."}]}, {"ID": "DX-29", "Entries": [{"IntroText": "The following code is from a web application that allows users access to an interface through which they can update their password on the system. In this environment, user passwords can be managed using the Network Information System (NIS), which is commonly used on UNIX systems. When performing NIS updates, part of the process for updating passwords is to run a make command in the /var/yp directory. Performing NIS updates requires extra privileges."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t...\n\tSystem.Runtime.getRuntime().exec(\"make\");\n\t...\n```"}, {"BodyText": "The problem here is that the program does not specify an absolute path for make and does not clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system."}]}], "ObservedExamples": [{"Reference": "CVE-1999-1120", "Description": "Application relies on its PATH environment variable to find and execute program.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1120"}, {"Reference": "CVE-2008-1810", "Description": "Database application relies on its PATH environment variable to find and execute program.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1810"}, {"Reference": "CVE-2007-2027", "Description": "Chain: untrusted search path enabling resultant format string by loading malicious internationalization messages.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-2027"}, {"Reference": "CVE-2008-3485", "Description": "Untrusted search path using malicious .EXE in Windows environment.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3485"}, {"Reference": "CVE-2008-2613", "Description": "setuid program allows compromise using path that finds and loads a malicious library.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2613"}, {"Reference": "CVE-2008-1319", "Description": "Server allows client to specify the search path, which can be modified to point to a program that the client has uploaded.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1319"}], "FunctionalAreas": ["Program Invocation", "Code Libraries"], "AffectedResources": ["System Process"], "RelatedAttackPatterns": ["38"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-22047", "Description": "Windows Client Server Run-time Subsystem (CSRSS) Elevation of Privilege Vulnerability"}, {"Reference": "CVE-2021-3305", "Description": "Beijing Feishu Technology Co., Ltd Feishu v3.40.3 was discovered to contain an untrusted search path vulnerability."}, {"Reference": "CVE-2022-36403", "Description": "Untrusted search path vulnerability in the installer of Device Software Manager prior to Ver.2.20.3.0 allows an attacker to gain privileges via a Trojan horse DLL in an unspecified directory."}, {"Reference": "CVE-2021-36666", "Description": "An issue was discovered in Druva 6.9.0 for MacOS, allows attackers to gain escalated local privileges via the inSyncDecommission."}, {"Reference": "CVE-2022-38060", "Description": "A privilege escalation vulnerability exists in the sudo functionality of OpenStack Kolla git master 05194e7618. A misconfiguration in /etc/sudoers within a container can lead to increased privileges."}, {"Reference": "CVE-2022-25366", "Description": "Cryptomator through 1.6.5 allows DYLIB injection because, although it has the flag 0x1000 for Hardened Runtime, it has the com.apple.security.cs.disable-library-validation and com.apple.security.cs.allow-dyld-environment-variables entitlements. An attacker can exploit this by creating a malicious .dylib file that can be executed via the DYLD_INSERT_LIBRARIES environment variable."}, {"Reference": "CVE-2022-39245", "Description": "Mist is the command-line interface for the makedeb Package Repository. Prior to version 0.9.5, a user-provided `sudo` binary via the `PATH` variable can allow a local user to run arbitrary commands on the user's system with root permissions. Versions 0.9.5 and later contain a patch. No known workarounds exist."}, {"Reference": "CVE-2021-21817", "Description": "An information disclosure vulnerability exists in the Zebra IP Routing Manager functionality of D-LINK DIR-3040 1.13B03. A specially crafted network request can lead to the disclosure of sensitive information. An attacker can send a sequence of requests to trigger this vulnerability."}]}
{"ID": "427", "Name": "Uncontrolled Search Path Element", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product uses a fixed or controlled search path to find resources, but one or more locations in that path can be under the control of unintended actors.", "ExtendedDescription": "\n\nAlthough this weakness can occur with any type of resource, it is frequently introduced when a product uses a directory search path to find executables or code libraries, but the path contains a directory that can be modified by an attacker, such as \"/tmp\" or the current working directory.\n\n\nIn Windows-based systems, when the LoadLibrary or LoadLibraryEx function is called with a DLL name that does not contain a fully qualified path, the function follows a search order that includes two path elements that might be uncontrolled:\n\n\n  - the directory from which the program has been loaded\n\n  - the current working directory\n\nIn some cases, the attack can be conducted remotely, such as when SMB or WebDAV network shares are used.\n\nOne or more locations in that path could include the Windows drive root or its subdirectories. This often exists in Linux-based code assuming the controlled nature of the root directory (/) or its subdirectories (/etc, etc), or a code that recursively accesses the parent directory. In Windows, the drive root and some of its subdirectories have weak permissions by default, which makes them uncontrolled.\n\n\nIn some Unix-based systems, a PATH might be created that contains an empty element, e.g. by splicing an empty variable into the PATH. This empty element can be interpreted as equivalent to the current working directory, which might be an untrusted search element.\n\n\nIn software package management frameworks (e.g., npm, RubyGems, or PyPi), the framework may identify dependencies on third-party libraries or other packages, then consult a repository that contains the desired package. The framework may search a public repository before a private repository. This could be exploited by attackers by placing a malicious package in the public repository that has the same name as a package from the private repository. The search path might not be directly under control of the developer relying on the framework, but this search order effectively contains an untrusted element.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "668", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "668", "ViewID": "1003", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "DLL preloading", "Description": "This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427."}, {"Term": "Binary planting", "Description": "This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427."}, {"Term": "Insecure library loading", "Description": "This term is one of several that are used to describe exploitation of untrusted search path elements in Windows systems, which received wide attention in August 2010. From a weakness perspective, the term is imprecise because it can apply to both CWE-426 and CWE-427."}, {"Term": "Dependency confusion", "Description": "As of February 2021, this term is used to describe CWE-427 in the context of managing installation of software package dependencies, in which attackers release packages on public sites where the names are the same as package names used by private repositories, and the search for the dependent package tries the public site first, downloading untrusted code. It may also be referred to as a \"substitution attack.\""}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Strategy": "Attack Surface Reduction", "Description": "Hard-code the search path to a set of known-safe values (such as system directories), or only allow them to be specified by the administrator in a configuration file. Do not allow these settings to be modified by an external party. Be careful to avoid related weaknesses such as CWE-426 and CWE-428."}, {"Phase": ["Implementation"], "Strategy": "Attack Surface Reduction", "Description": "When invoking other programs, specify those programs using fully-qualified pathnames. While this is an effective approach, code that uses fully-qualified pathnames might not be portable to other systems that do not use the same pathnames. The portability can be improved by locating the full-qualified paths in a centralized, easily-modifiable location within the source code, and having the code refer to these paths."}, {"Phase": ["Implementation"], "Strategy": "Attack Surface Reduction", "Description": "Remove or restrict all environment settings before invoking other programs. This includes the PATH environment variable, LD_LIBRARY_PATH, and other settings that identify the location of code libraries, and any application-specific search paths."}, {"Phase": ["Implementation"], "Description": "Check your search path before use and remove any elements that are likely to be unsafe, such as the current working directory or a temporary files directory. Since this is a denylist approach, it might not be a complete solution."}, {"Phase": ["Implementation"], "Description": "Use other functions that require explicit paths. Making use of any of the other readily available functions that require explicit paths is a safe way to avoid this problem. For example, system() in C does not require a full path since the shell can take care of finding the program using the PATH environment variable, while execl() and execv() require a full path."}], "DemonstrativeExamples": [{"ID": "DX-29", "Entries": [{"IntroText": "The following code is from a web application that allows users access to an interface through which they can update their password on the system. In this environment, user passwords can be managed using the Network Information System (NIS), which is commonly used on UNIX systems. When performing NIS updates, part of the process for updating passwords is to run a make command in the /var/yp directory. Performing NIS updates requires extra privileges."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t...\n\tSystem.Runtime.getRuntime().exec(\"make\");\n\t...\n```"}, {"BodyText": "The problem here is that the program does not specify an absolute path for make and does not clean its environment prior to executing the call to Runtime.exec(). If an attacker can modify the $PATH variable to point to a malicious binary called make and cause the program to be executed in their environment, then the malicious binary will be loaded instead of the one intended. Because of the nature of the application, it runs with the privileges necessary to perform system operations, which means the attacker's make will now be run with these privileges, possibly giving the attacker complete control of the system."}]}, {"Entries": [{"IntroText": "In versions of Go prior to v1.19, the LookPath function would follow the conventions of the runtime OS and look for a program in the directiories listed in the current path [REF-1325]."}, {"BodyText": "Therefore, Go would prioritize searching the current directory when the provided command name does not contain a directory separator and continued to search for programs even when the specified program name is empty."}, {"BodyText": "Consider the following where an application executes a git command to run on the system."}, {"Nature": "Bad", "Language": "Go", "ExampleCode": "```\n\tfunc ExecuteGitCommand(name string, arg []string) error { \n\t\t c := exec.Command(name, arg...)\n\t\t var err error\n\t\t c.Path, err = exec.LookPath(name)\n\t\t if err != nil {\n\t\t\t return err\n\t\t }\n\t }\n```"}, {"BodyText": "An attacker could create a malicious repository with a file named ..exe and another file named git.exe. If git.exe is not found in the system PATH, then ..exe would execute [REF-1326]."}]}, {"Entries": [{"IntroText": "In February 2021 [REF-1169], a researcher was able to demonstrate the ability to breach major technology companies by using \"dependency confusion\" where the companies would download and execute untrusted packages."}, {"BodyText": "The researcher discovered the names of some internal, private packages by looking at dependency lists in public source code, such as package.json. The researcher then created new, untrusted packages with the same name as the internal packages, then uploaded them to package hosting services. These services included the npm registry for Node, PyPi for Python, and RubyGems. In affected companies, their dependency resolution would search the public hosting services first before consulting their internal service, causing the untrusted packages to be automatically downloaded and executed."}]}], "ObservedExamples": [{"Reference": "CVE-2023-25815", "Description": "chain: a change in an underlying package causes the gettext function to use implicit initialization with a hard-coded path (CWE-1419) under the user-writable C:\\ drive, introducing an untrusted search path element (CWE-427) that enables spoofing of messages.", "Link": "https://www.cve.org/CVERecord?id=CVE-2023-25815"}, {"Reference": "CVE-2022-4826", "Description": "Go-based git extension on Windows can search for and execute a malicious \"..exe\" in a repository because Go searches the current working directory if git.exe is not found in the PATH", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-4826"}, {"Reference": "CVE-2020-26284", "Description": "A Static Site Generator built in Go, when running on Windows, searches the current working directory for a command, possibly allowing code execution using a malicious .exe or .bat file with the name being searched", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-26284"}, {"Reference": "CVE-2022-24765", "Description": "Windows-based fork of git creates a \".git\" folder in the C: drive, allowing local attackers to create a .git folder with a malicious config file", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-24765"}, {"Reference": "CVE-2019-1552", "Description": "SSL package searches under \"C:/usr/local\" for configuration files and other critical data, but C:/usr/local might be world-writable.", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-1552"}, {"Reference": "CVE-2010-3402", "Description": "\"DLL hijacking\" issue in document editor.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-3402"}, {"Reference": "CVE-2010-3397", "Description": "\"DLL hijacking\" issue in encryption software.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-3397"}, {"Reference": "CVE-2010-3138", "Description": "\"DLL hijacking\" issue in library used by multiple media players.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-3138"}, {"Reference": "CVE-2010-3152", "Description": "\"DLL hijacking\" issue in illustration program.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-3152"}, {"Reference": "CVE-2010-3147", "Description": "\"DLL hijacking\" issue in address book.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-3147"}, {"Reference": "CVE-2010-3135", "Description": "\"DLL hijacking\" issue in network monitoring software.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-3135"}, {"Reference": "CVE-2010-3131", "Description": "\"DLL hijacking\" issue in web browser.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-3131"}, {"Reference": "CVE-2010-1795", "Description": "\"DLL hijacking\" issue in music player/organizer.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-1795"}, {"Reference": "CVE-2002-1576", "Description": "Product uses the current working directory to find and execute a program, which allows local users to gain privileges by creating a symlink that points to a malicious version of the program.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1576"}, {"Reference": "CVE-1999-1461", "Description": "Product trusts the PATH environmental variable to find and execute a program, which allows local users to obtain root access by modifying the PATH to point to a malicous version of that program.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1461"}, {"Reference": "CVE-1999-1318", "Description": "Software uses a search path that includes the current working directory (.), which allows local users to gain privileges via malicious programs.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1318"}, {"Reference": "CVE-2003-0579", "Description": "Admin software trusts the user-supplied -uv.install command line option to find and execute the uv.install program, which allows local users to gain privileges by providing a pathname that is under control of the user.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0579"}, {"Reference": "CVE-2000-0854", "Description": "When a document is opened, the directory of that document is first used to locate DLLs , which could allow an attacker to execute arbitrary commands by inserting malicious DLLs into the same directory as the document.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0854"}, {"Reference": "CVE-2001-0943", "Description": "Database trusts the PATH environment variable to find and execute programs, which allows local users to modify the PATH to point to malicious programs.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0943"}, {"Reference": "CVE-2001-0942", "Description": "Database uses an environment variable to find and execute a program, which allows local users to execute arbitrary programs by changing the environment variable.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0942"}, {"Reference": "CVE-2001-0507", "Description": "Server uses relative paths to find system files that will run in-process, which allows local users to gain privileges via a malicious file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0507"}, {"Reference": "CVE-2002-2017", "Description": "Product allows local users to execute arbitrary code by setting an environment variable to reference a malicious program.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2017"}, {"Reference": "CVE-1999-0690", "Description": "Product includes the current directory in root's PATH variable.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0690"}, {"Reference": "CVE-2001-0912", "Description": "Error during packaging causes product to include a hard-coded, non-standard directory in search path.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0912"}, {"Reference": "CVE-2001-0289", "Description": "Product searches current working directory for configuration file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0289"}, {"Reference": "CVE-2005-1705", "Description": "Product searches current working directory for configuration file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1705"}, {"Reference": "CVE-2005-1307", "Description": "Product executable other program from current working directory.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1307"}, {"Reference": "CVE-2002-2040", "Description": "Untrusted path.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2040"}, {"Reference": "CVE-2005-2072", "Description": "Modification of trusted environment variable leads to untrusted path vulnerability.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2072"}, {"Reference": "CVE-2005-1632", "Description": "Product searches /tmp for modules before other paths.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1632"}], "RelatedAttackPatterns": ["38", "471"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "Unlike untrusted search path (CWE-426), which inherently involves control over the definition of a control sphere (i.e., modification of a search path), this entry concerns a fixed control sphere in which some part of the sphere may be under attacker control (i.e., the search path cannot be modified by an attacker, but one element of the path can be under attacker control)."}, {"Type": "Theoretical", "Note": "This weakness is not a clean fit under CWE-668 or CWE-610, which suggests that the control sphere model might need enhancement or clarification."}], "Top25Examples": [{"Reference": "CVE-2021-45492", "Description": "In Sage 300 ERP (formerly accpac) through 6.8.x, the installer configures the C:\\\\Sage\\\\Sage300\\\\Runtime directory to be the first entry in the system-wide PATH environment variable. However, this directory is writable by unprivileged users because the Sage installer fails to set explicit permissions and therefore inherits weak permissions from the C:\\\\ folder. Because entries in the system-wide PATH variable are included in the search order for DLLs, an attacker could perform DLL search-order hijacking to escalate their privileges to SYSTEM. Furthermore, if the Global Search or Web Screens functionality is enabled, then privilege escalation is possible via the GlobalSearchService and Sage.CNA.WindowsService services, again via DLL search-order hijacking because unprivileged users would have modify permissions on the application directory. Note that while older versions of the software default to installing in %PROGRAMFILES(X86)% (which would allow the Sage folder to inherit strong permissions, making the installation not vulnerable), the official Sage 300 installation guides for those versions recommend installing in C:\\\\Sage, which would make the installation vulnerable."}, {"Reference": "CVE-2022-28965", "Description": "Multiple DLL hijacking vulnerabilities via the components instup.exe and wsc_proxy.exe in Avast Premium Security before v21.11.2500 allows attackers to execute arbitrary code or cause a Denial of Service (DoS) via a crafted DLL file."}, {"Reference": "CVE-2022-34043", "Description": "Incorrect permissions for the folder C:\\\\ProgramData\\\\NoMachine\\\\var\\\\uninstall of Nomachine v7.9.2 allows attackers to perform a DLL hijacking attack and execute arbitrary code."}, {"Reference": "CVE-2022-1098", "Description": "Delta Electronics DIAEnergie (all versions prior to 1.8.02.004) are vulnerable to a DLL hijacking condition. When combined with the Incorrect Default Permissions vulnerability of 4.2.2 above, this makes it possible for an attacker to escalate privileges"}, {"Reference": "CVE-2022-23050", "Description": "ManageEngine AppManager15 (Build No:15510) allows an authenticated admin user to upload a DLL file to perform a DLL hijack attack inside the 'working' folder through the 'Upload Files / Binaries' functionality."}, {"Reference": "CVE-2022-22736", "Description": "If Firefox was installed to a world-writable directory, a local privilege escalation could occur when Firefox searched the current directory for system libraries. However the install directory is not world-writable by default.<br>*This bug only affects Firefox for Windows in a non-default installation. Other operating systems are unaffected.*. This vulnerability affects Firefox < 96."}, {"Reference": "CVE-2022-26526", "Description": "Anaconda Anaconda3 (Anaconda Distribution) through 2021.11.0.0 and Miniconda3 through 4.11.0.0 can create a world-writable directory under %PROGRAMDATA% and place that directory into the system PATH environment variable. Thus, for example, local users can gain privileges by placing a Trojan horse file into that directory. (This problem can only happen in a non-default installation. The person who installs the product must specify that it is being installed for all users. Also, the person who installs the product must specify that the system PATH should be changed."}, {"Reference": "CVE-2022-32222", "Description": "A cryptographic vulnerability exists on Node.js on linux in versions of 18.x prior to 18.40.0 which allowed a default path for openssl.cnf that might be accessible under some circumstances to a non-admin user instead of /etc/ssl as was the case in versions prior to the upgrade to OpenSSL 3."}, {"Reference": "CVE-2021-36631", "Description": "Untrusted search path vulnerability in Baidunetdisk Version 7.4.3 and earlier allows an attacker to gain privileges via a Trojan horse DLL in an unspecified directory."}, {"Reference": "CVE-2022-25348", "Description": "Untrusted search path vulnerability in AttacheCase ver.4.0.2.7 and earlier allows an attacker to gain privileges and execute arbitrary code via a Trojan horse DLL in an unspecified directory."}, {"Reference": "CVE-2022-28128", "Description": "Untrusted search path vulnerability in AttacheCase ver.3.6.1.0 and earlier allows an attacker to gain privileges and execute arbitrary code via a Trojan horse DLL in an unspecified directory."}, {"Reference": "CVE-2022-41796", "Description": "Untrusted search path vulnerability in the installer of Content Transfer (for Windows) Ver.1.3 and prior allows an attacker to gain privileges via a Trojan horse DLL in an unspecified directory."}, {"Reference": "CVE-2022-48422", "Description": "ONLYOFFICE Docs through 7.3 on certain Linux distributions allows local users to gain privileges via a Trojan horse libgcc_s.so.1 in the current working directory, which may be any directory in which an ONLYOFFICE document is located."}, {"Reference": "CVE-2022-0166", "Description": "A privilege escalation vulnerability in the McAfee Agent prior to 5.7.5. McAfee Agent uses openssl.cnf during the build process to specify the OPENSSLDIR variable as a subdirectory within the installation directory. A low privilege user could have created subdirectories and executed arbitrary code with SYSTEM privileges by creating the appropriate pathway to the specifically created malicious openssl.cnf file."}, {"Reference": "CVE-2022-39286", "Description": "Jupyter Core is a package for the core common functionality of Jupyter projects. Jupyter Core prior to version 4.11.2 contains an arbitrary code execution vulnerability in `jupyter_core` that stems from `jupyter_core` executing untrusted files in CWD. This vulnerability allows one user to run code as another. Version 4.11.2 contains a patch for this issue. There are no known workarounds."}, {"Reference": "CVE-2022-0483", "Description": "Local privilege escalation due to insecure folder permissions. The following products are affected: Acronis VSS Doctor (Windows) before build 53"}, {"Reference": "CVE-2022-20001", "Description": "fish is a command line shell. fish version 3.1.0 through version 3.3.1 is vulnerable to arbitrary code execution. git repositories can contain per-repository configuration that change the behavior of git, including running arbitrary commands. When using the default configuration of fish, changing to a directory automatically runs `git` commands in order to display information about the current repository in the prompt. If an attacker can convince a user to change their current directory into one controlled by the attacker, such as on a shared file system or extracted archive, fish will run arbitrary commands under the attacker's control. This problem has been fixed in fish 3.4.0. Note that running git in these directories, including using the git tab completion, remains a potential trigger for this issue. As a workaround, remove the `fish_git_prompt` function from the prompt."}, {"Reference": "CVE-2021-28953", "Description": "The unofficial C/C++ Advanced Lint extension before 1.9.0 for Visual Studio Code allows attackers to execute arbitrary binaries if the user opens a crafted repository."}, {"Reference": "CVE-2022-23853", "Description": "The LSP (Language Server Protocol) plugin in KDE Kate before 21.12.2 and KTextEditor before 5.91.0 tries to execute the associated LSP server binary when opening a file of a given type. If this binary is absent from the PATH, it will try running the LSP server binary in the directory of the file that was just opened (due to a misunderstanding of the QProcess API, that was never intended). This can be an untrusted directory."}, {"Reference": "CVE-2022-22528", "Description": "SAP Adaptive Server Enterprise (ASE) - version 16.0, installation makes an entry in the system PATH environment variable in Windows platform which, under certain conditions, allows a Standard User to execute malicious Windows binaries which may lead to privilege escalation on the local system. The issue is with the ASE installer and does not impact other ASE binaries. "}]}
{"ID": "428", "Name": "Unquoted Search Path or Element", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product uses a search path that contains an unquoted element, in which the element contains whitespace or other separators. This can cause the product to access resources in a parent path.", "ExtendedDescription": "If a malicious individual has access to the file system, it is possible to elevate privileges by inserting such a file as \"C:\\Program.exe\" to be run by a privileged program making use of WinExec.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "668", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "668", "ViewID": "1003", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Name": "Windows NT", "Prevalence": "Sometimes"}, {"Type": "Operating_System", "Name": "macOS", "Prevalence": "Rarely"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Properly quote the full search path before executing a program on the system."}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following example demonstrates the weakness."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tUINT errCode = WinExec( \"C:\\\\Program Files\\\\Foo\\\\Bar\", SW_SHOW );\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2005-1185", "Description": "Small handful of others. Program doesn't quote the \"C:\\Program Files\\\" path when calling a program to be executed - or any other path with a directory or file whose name contains a space - so attacker can put a malicious program.exe into C:.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1185"}, {"Reference": "CVE-2005-2938", "Description": "CreateProcess() and CreateProcessAsUser() can be misused by applications to allow \"program.exe\" style attacks in C:", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2938"}, {"Reference": "CVE-2000-1128", "Description": "Applies to \"Common Files\" folder, with a malicious common.exe, instead of \"Program Files\"/program.exe.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1128"}], "FunctionalAreas": ["Program Invocation"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Applicable Platform", "Note": "\n\nThis weakness could apply to any OS that supports spaces in filenames, especially any OS that make it easy for a user to insert spaces into filenames or folders, such as Windows. While spaces are technically supported in Unix, the practice is generally avoided. .\n"}, {"Type": "Maintenance", "Note": "\n\nThis weakness primarily involves the lack of quoting, which is not explicitly stated as a part of CWE-116. CWE-116 also describes output in light of structured messages, but the generation of a filename or search path (as in this weakness) might not be considered a structured message.\n\n\nAn additional complication is the relationship to control spheres. Unlike untrusted search path (CWE-426), which inherently involves control over the definition of a control sphere, this entry concerns a fixed control sphere in which some part of the sphere may be under attacker control. This is not a clean fit under CWE-668 or CWE-610, which suggests that the control sphere model needs enhancement or clarification.\n"}], "Top25Examples": [{"Reference": "CVE-2022-39959", "Description": "Panini Everest Engine 2.0.4 allows unprivileged users to create a file named Everest.exe in the %PROGRAMDATA%\\\\Panini folder. This leads to privilege escalation because a service, running as SYSTEM, uses the unquoted path of %PROGRAMDATA%\\\\Panini\\\\Everest Engine\\\\EverestEngine.exe and therefore a Trojan horse %PROGRAMDATA%\\\\Panini\\\\Everest.exe may be executed instead of the intended vendor-supplied EverestEngine.exe file."}]}
{"ID": "43", "Name": "Path Equivalence: 'filename....' (Multiple Trailing Dot)", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product accepts path input in the form of multiple trailing dot ('filedir....') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "42", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "163", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Modify Files or Directories"]}], "ObservedExamples": [{"Reference": "CVE-2004-0281", "Description": "Multiple trailing dot allows directory listing", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0281"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "430", "Name": "Deployment of Wrong Handler", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The wrong \"handler\" is assigned to process an object.", "ExtendedDescription": "An example of deploying the wrong handler would be calling a servlet to reveal source code of a .JSP file, or automatically \"determining\" type of the object even if it is contradictory to an explicitly specified type.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "691", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "433", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "434", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant", "Description": "This weakness is usually resultant from other weaknesses."}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Varies by Context", "Unexpected State"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Perform a type check before interpreting an object."}, {"Phase": ["Architecture and Design"], "Description": "Reject any inconsistent types, such as a file with a .GIF extension that appears to consist of PHP code."}], "ObservedExamples": [{"Reference": "CVE-2001-0004", "Description": "Source code disclosure via manipulated file extension that causes parsing by wrong DLL.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0004"}, {"Reference": "CVE-2002-0025", "Description": "Web browser does not properly handle the Content-Type header field, causing a different application to process the document.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0025"}, {"Reference": "CVE-2000-1052", "Description": "Source code disclosure by directly invoking a servlet.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1052"}, {"Reference": "CVE-2002-1742", "Description": "Arbitrary Perl functions can be loaded by calling a non-existent function that activates a handler.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1742"}], "RelatedAttackPatterns": ["11"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "431", "Name": "Missing Handler", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "A handler is not available or implemented.", "ExtendedDescription": "When an exception is thrown and not caught, the process has given up an opportunity to decide if a given failure or event is worth a change in execution.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "691", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "433", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Varies by Context"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Handle all possible situations (e.g. error condition)."}, {"Phase": ["Implementation"], "Description": "If an operation can throw an Exception, implement a handler for that specific exception."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "If a Servlet does not catch all exceptions, it may reveal debugging information that will help an adversary form a plan of attack. In the following method a DNS lookup failure will cause the Servlet to throw an exception."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tprotected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException {\n\t\tString ip = req.getRemoteAddr();\n\t\tInetAddress addr = InetAddress.getByName(ip);\n\t\t...\n\t\tout.println(\"hello \" + addr.getHostName());\n\t}\n```"}, {"BodyText": "When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. This information is of great value to an attacker."}]}], "ObservedExamples": [{"Reference": "CVE-2022-25302", "Description": "SDK for OPC Unified Architecture (OPC UA) is missing a handler for when a cast fails, allowing for a crash", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-25302"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-25302", "Description": "All versions of package asneg/opcuastack are vulnerable to Denial of Service (DoS) due to a missing handler for failed casting when unvalidated data is forwarded to boost::get function in OpcUaNodeIdBase.h. Exploiting this vulnerability is possible when sending a specifically crafted OPC UA message with a special encoded NodeId."}]}
{"ID": "432", "Name": "Dangerous Signal Handler not Disabled During Sensitive Operations", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product uses a signal handler that shares state with other signal handlers, but it does not properly mask or prevent those signal handlers from being invoked while the original signal handler is still running.", "ExtendedDescription": "During the execution of a signal handler, it can be interrupted by another handler when a different signal is sent. If the two handlers share state - such as global variables - then an attacker can corrupt the state by sending another signal before the first handler has completed execution.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "364", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Modify Application Data"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Turn off dangerous handlers when performing sensitive operations."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "433", "Name": "Unparsed Raw Web Content Delivery", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product stores raw content or supporting code under the web document root with an extension that is not specifically handled by the server.", "ExtendedDescription": "If code is stored in a file with an extension such as \".inc\" or \".pl\", and the web server does not have a handler for that extension, then the server will likely send the contents of the file directly to the requester without the pre-processing that was expected. When that file contains sensitive information such as database credentials, this may allow the attacker to compromise the application or associated components.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "219", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Perform a type check before interpreting files."}, {"Phase": ["Architecture and Design"], "Description": "Do not store sensitive information in files which may be misinterpreted."}], "DemonstrativeExamples": [{"ID": "DX-104", "Entries": [{"IntroText": "The following code uses an include file to store database credentials:"}, {"BodyText": "database.inc"}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\t<?php\n\t$dbName = 'usersDB';\n\t$dbPassword = 'skjdh#67nkjd3$3$';\n\t?>\n```"}, {"BodyText": "login.php"}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\t<?php\n\tinclude('database.inc');\n\t$db = connectToDB($dbName, $dbPassword);\n\t$db.authenticateUser($username, $password);\n\t?>\n```"}, {"BodyText": "If the server does not have an explicit handler set for .inc files it may send the contents of database.inc to an attacker without pre-processing, if the attacker requests the file directly. This will expose the database name and password."}]}], "ObservedExamples": [{"Reference": "CVE-2002-1886", "Description": "\".inc\" file stored under web document root and returned unparsed by the server", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1886"}, {"Reference": "CVE-2002-2065", "Description": "\".inc\" file stored under web document root and returned unparsed by the server", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2065"}, {"Reference": "CVE-2005-2029", "Description": "\".inc\" file stored under web document root and returned unparsed by the server", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2029"}, {"Reference": "CVE-2001-0330", "Description": "direct request to .pl file leaves it unparsed", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0330"}, {"Reference": "CVE-2002-0614", "Description": ".inc file", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0614"}, {"Reference": "CVE-2004-2353", "Description": "unparsed config.conf file", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2353"}, {"Reference": "CVE-2007-3365", "Description": "Chain: uppercase file extensions causes web server to return script source code instead of executing the script.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-3365"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This overlaps direct requests (CWE-425), alternate path (CWE-424), permissions (CWE-275), and sensitive file under web root (CWE-219)."}]}
{"ID": "434", "Name": "Unrestricted Upload of File with Dangerous Type", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Diagram": "/data/images/CWE-434-Diagram.png", "Description": "The product allows the upload or transfer of dangerous file types that are automatically processed within its environment.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "669", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "669", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "351", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "436", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "430", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary", "Description": "This can be primary when there is no check for the file type at all."}, {"Ordinality": "Resultant", "Description": "This can be resultant when use of double extensions (e.g. \".php.gif\") bypasses a check."}, {"Ordinality": "Resultant", "Description": "This can be resultant from client-side enforcement (CWE-602); some products will include web script in web clients to check the filename, without verifying on the server side."}], "ApplicablePlatforms": [{"Type": "Language", "Name": "ASP.NET", "Prevalence": "Sometimes"}, {"Type": "Language", "Name": "PHP", "Prevalence": "Often"}, {"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Web Server", "Prevalence": "Sometimes"}], "AlternateTerms": [{"Term": "Unrestricted File Upload", "Description": "Used in vulnerability databases and elsewhere, but it is insufficiently precise. The phrase could be interpreted as the lack of restrictions on the size or number of uploaded files, which is a resource consumption issue."}], "ModesOfIntroduction": [{"Phase": "Implementation"}, {"Phase": "Architecture and Design", "Note": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "Arbitrary code execution is possible if an uploaded file is interpreted and executed as code by the recipient. This is especially true for web-server extensions such as .asp and .php because these file types are often treated as automatically executable, even when file system permissions do not specify execution. For example, in Unix environments, programs typically cannot run unless the execute bit is set, but PHP programs may be executed by the web server without directly invoking them on the operating system."}], "DetectionMethods": [{"Method": "Dynamic Analysis with Automated Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tWeb Application Scanner\n\t\tWeb Services Scanner\n\t\tDatabase Scanners", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source\n\t\tManual Source Code Review (not inspections)", "Effectiveness": "High"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer", "Effectiveness": "High"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Generate a new, unique filename for an uploaded file instead of using the user-supplied filename, so that no external input is used at all.[REF-422] [REF-423]"}, {"MitigationID": "MIT-21", "Phase": ["Architecture and Design"], "Strategy": "Enforcement by Conversion", "Description": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs."}, {"Phase": ["Architecture and Design"], "Description": "Consider storing the uploaded files outside of the web document root entirely. Then, use other mechanisms to deliver the files dynamically. [REF-423]"}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nFor example, limiting filenames to alphanumeric characters can help to restrict the introduction of unintended file extensions.\n"}, {"Phase": ["Architecture and Design"], "Description": "Define a very limited set of allowable extensions and only generate filenames that end in these extensions. Consider the possibility of XSS (CWE-79) before allowing .html or .htm file types."}, {"Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Ensure that only one extension is used in the filename. Some web servers, including some versions of Apache, may process files based on inner extensions so that \"filename.php.gif\" is fed to the PHP interpreter.[REF-422] [REF-423]"}, {"Phase": ["Implementation"], "Description": "When running on a web server that supports case-insensitive filenames, perform case-insensitive evaluations of the extensions that are provided."}, {"MitigationID": "MIT-15", "Phase": ["Architecture and Design"], "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."}, {"Phase": ["Implementation"], "Description": "Do not rely exclusively on sanity checks of file contents to ensure that the file is of the expected type and size. It may be possible for an attacker to hide code in some file segments that will still be executed by the server. For example, GIF images may contain a free-form comments field."}, {"Phase": ["Implementation"], "Description": "Do not rely exclusively on the MIME content type or filename attribute when determining how to render a file. Validating the MIME content type and ensuring that it matches the extension is only a partial solution."}, {"MitigationID": "MIT-17", "Phase": ["Architecture and Design", "Operation"], "Strategy": "Environment Hardening", "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."}, {"MitigationID": "MIT-22", "Phase": ["Architecture and Design", "Operation"], "Strategy": "Sandbox or Jail", "Description": "\n\nRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\n\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\n\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\n\n\nBe careful to avoid CWE-243 and other weaknesses related to jails.\n", "Effectiveness": "Limited", "EffectivenessNotes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code intends to allow a user to upload a picture to the web server. The HTML code that drives the form on the user end has an input field of type \"file\"."}, {"Nature": "Good", "Language": "HTML", "ExampleCode": "```\n\t<form action=\"upload_picture.php\" method=\"post\" enctype=\"multipart/form-data\">\n\tChoose a file to upload:\n\t<input type=\"file\" name=\"filename\"/>\n\t<br/>\n\t<input type=\"submit\" name=\"submit\" value=\"Submit\"/>\n\t</form>\n```"}, {"BodyText": "Once submitted, the form above sends the file to upload_picture.php on the web server. PHP stores the file in a temporary location until it is retrieved (or discarded) by the server side code. In this example, the file is moved to a more permanent pictures/ directory."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n```\n// Define the target location where the picture being* \n\t\n\t\n\t *// uploaded is going to be saved.* \n\t$target = \"pictures/\" . basename($_FILES['uploadedfile']['name']);\n\t\n\t\n\t *// Move the uploaded file to the new location.* \n\tif(move_uploaded_file($_FILES['uploadedfile']['tmp_name'], $target))\n\t{\n\t```\n\t\techo \"The picture has been successfully uploaded.\";\n\t}\n\telse\n\t{\n\t\techo \"There was an error uploading the picture, please try again.\";\n\t}\n```"}, {"BodyText": "The problem with the above code is that there is no check regarding type of file being uploaded. Assuming that pictures/ is available in the web document root, an attacker could upload a file with the name:"}, {"Nature": "Attack", "ExampleCode": "```\n\tmalicious.php\n```"}, {"BodyText": "Since this filename ends in \".php\" it can be executed by the web server. In the contents of this uploaded file, the attacker could use:"}, {"Nature": "Attack", "Language": "PHP", "ExampleCode": "```\n\t<?php\n\t\tsystem($_GET['cmd']);\n\t?>\n```"}, {"BodyText": "Once this file has been installed, the attacker can enter arbitrary commands to execute using a URL such as:"}, {"Nature": "Attack", "ExampleCode": "```\n\thttp://server.example.com/upload_dir/malicious.php?cmd=ls%20-l\n```"}, {"BodyText": "which runs the \"ls -l\" command - or any other type of command that the attacker wants to specify."}]}, {"ID": "DX-22", "Entries": [{"IntroText": "The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet."}, {"Nature": "Good", "Language": "HTML", "ExampleCode": "```\n\t<form action=\"FileUploadServlet\" method=\"post\" enctype=\"multipart/form-data\">\n\tChoose a file to upload:\n\t<input type=\"file\" name=\"filename\"/>\n\t<br/>\n\t<input type=\"submit\" name=\"submit\" value=\"Submit\"/>\n\t</form>\n```"}, {"BodyText": "When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class FileUploadServlet extends HttpServlet {\n\t\t\t...\n\t\t\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\t\t\tresponse.setContentType(\"text/html\");\n\t\t\t\t\tPrintWriter out = response.getWriter();\n\t\t\t\t\tString contentType = request.getContentType();\n\t\t\t\t\t// the starting position of the boundary header\n\t\t\t\t\tint ind = contentType.indexOf(\"boundary=\");\n\t\t\t\t\tString boundary = contentType.substring(ind+9);\n\t\t\t\t\tString pLine = new String();\n\t\t\t\t\tString uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value\n\t\t\t\t\t// verify that content type is multipart form data\n\t\t\t\t\tif (contentType != null && contentType.indexOf(\"multipart/form-data\") != -1) {\n\t\t\t\t\t\t\t// extract the filename from the Http header\n\t\t\t\t\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));\n\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\tpLine = br.readLine();\n\t\t\t\t\t\t\tString filename = pLine.substring(pLine.lastIndexOf(\"\\\\\"), pLine.lastIndexOf(\"\\\"\"));\n\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t// output the file to the local upload directory\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));\n\t\t\t\t\t\t\t\t\tfor (String line; (line=br.readLine())!=null; ) {\n\t\t\t\t\t\t\t\t\t\tif (line.indexOf(boundary) == -1) {\n\t\t\t\t\t\t\t\t\t\t\tbw.write(line);\n\t\t\t\t\t\t\t\t\t\t\tbw.newLine();\n\t\t\t\t\t\t\t\t\t\t\tbw.flush();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} //end of for loop\n\t\t\t\t\t\t\t\t\tbw.close();\n\t\t\t\t\t\t\t} catch (IOException ex) {...}\n\t\t\t\t\t\t\t// output successful upload response HTML page\n\t\t\t\t\t}\n\t\t\t\t\t// output unsuccessful upload response HTML page\n\t\t\t\t\telse\n\t\t\t\t\t{...}\n\t\t\t}\n\t\t\t\t...\n\t}\n```"}, {"BodyText": "This code does not perform a check on the type of the file being uploaded (CWE-434). This could allow an attacker to upload any executable file or other file with malicious code."}, {"BodyText": "Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-23). Since the code does not check the filename that is provided in the header, an attacker can use \"../\" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash."}]}], "ObservedExamples": [{"Reference": "CVE-2023-5227", "Description": "PHP-based FAQ management app does not check the MIME type for uploaded images", "Link": "https://www.cve.org/CVERecord?id=CVE-2023-5227"}, {"Reference": "CVE-2001-0901", "Description": "Web-based mail product stores \".shtml\" attachments that could contain SSI", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0901"}, {"Reference": "CVE-2002-1841", "Description": "PHP upload does not restrict file types", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1841"}, {"Reference": "CVE-2005-1868", "Description": "upload and execution of .php file", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1868"}, {"Reference": "CVE-2005-1881", "Description": "upload file with dangerous extension", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1881"}, {"Reference": "CVE-2005-0254", "Description": "program does not restrict file types", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0254"}, {"Reference": "CVE-2004-2262", "Description": "improper type checking of uploaded files", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2262"}, {"Reference": "CVE-2006-4558", "Description": "Double \"php\" extension leaves an active php extension in the generated filename.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4558"}, {"Reference": "CVE-2006-6994", "Description": "ASP program allows upload of .asp files by bypassing client-side checks", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6994"}, {"Reference": "CVE-2005-3288", "Description": "ASP file upload", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3288"}, {"Reference": "CVE-2006-2428", "Description": "ASP file upload", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-2428"}], "FunctionalAreas": ["File Processing"], "AffectedResources": ["File or Directory"], "RelatedAttackPatterns": ["1"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "\n\nThis can have a chaining relationship with incomplete denylist / permissive allowlist errors when the product tries, but fails, to properly limit which types of files are allowed (CWE-183, CWE-184).\n\n\nThis can also overlap multiple interpretation errors for intermediaries, e.g. anti-virus products that do not remove or quarantine attachments with certain file extensions that can be processed by client systems.\n"}], "Top25Examples": [{"Reference": "CVE-2021-26634", "Description": "SQL injection and file upload attacks are possible due to insufficient validation of input values in some parameters and variables of files compromising Maxboard, which may lead to arbitrary code execution or privilege escalation. Attackers can use these vulnerabilities to perform attacks such as stealing server management rights using a web shell."}, {"Reference": "CVE-2021-41421", "Description": "A PHP code injection vulnerability in MaianAffiliate v.1.0 allows an authenticated attacker to gain RCE through the MaianAffiliate admin panel."}, {"Reference": "CVE-2022-1045", "Description": "Stored XSS viva .svg file upload in GitHub repository polonel/trudesk prior to v1.2.0."}, {"Reference": "CVE-2022-1345", "Description": "Stored XSS viva .svg file upload in GitHub repository causefx/organizr prior to 2.1.1810. This allows attackers to execute malicious scripts in the user's browser and it can lead to session hijacking, sensitive data exposure, and worse."}, {"Reference": "CVE-2022-24688", "Description": "An issue was discovered in DSK DSKNet 2.16.136.0 and 2.17.136.5. The Touch settings allow unrestricted file upload (and consequently Remote Code Execution) via PDF upload with PHP content and a .php extension. The attacker must hijack or obtain privileged user access to the Parameters page in order to exploit this issue. (That can be easily achieved by exploiting the Broken Access Control with further Brute-force attack or SQL Injection.) The uploaded file is stored within the database and copied to the sync web folder if the attacker visits a certain .php?action= page."}, {"Reference": "CVE-2022-25581", "Description": "Classcms v2.5 and below contains an arbitrary file upload via the component \\\\class\\\\classupload. This vulnerability allows attackers to execute code injection via a crafted .txt file."}, {"Reference": "CVE-2022-39301", "Description": "sra-admin is a background rights management system that separates the front and back end. sra-admin version 1.1.1 has a storage cross-site scripting (XSS) vulnerability. After logging into the sra-admin background, an attacker can upload an html page containing xss attack code in \"Personal Center\" - \"Profile Picture Upload\" allowing theft of the user's personal information. This issue has been patched in 1.1.2. There are no known workarounds."}, {"Reference": "CVE-2022-41681", "Description": "There is a vulnerability on Forma LMS version 3.1.0 and earlier that could allow an authenticated attacker (with the role of student) to privilege escalate in order to upload a Zip file through the SCORM importer feature. The exploitation of this vulnerability could lead to a remote code injection."}, {"Reference": "CVE-2022-42925", "Description": "There is a vulnerability on Forma LMS version 3.1.0 and earlier that could allow an authenticated attacker (with the role of student) to privilege escalate in order to upload a Zip file through the plugin upload component. The exploitation of this vulnerability could lead to a remote code injection."}, {"Reference": "CVE-2022-0959", "Description": "A malicious, but authorised and authenticated user can construct an HTTP request using their existing CSRF token and session cookie to manually upload files to any location that the operating system user account under which pgAdmin is running has permission to write."}, {"Reference": "CVE-2022-1574", "Description": "The HTML2WP WordPress plugin through 1.0.0 does not have authorisation and CSRF checks when importing files, and does not validate them, as a result, unauthenticated attackers can upload arbitrary files (such as PHP) on the remote server"}, {"Reference": "CVE-2022-2180", "Description": "The GREYD.SUITE WordPress theme does not properly validate uploaded custom font packages, and does not perform any authorization or csrf checks, allowing an unauthenticated attacker to upload arbitrary files including php source files, leading to possible remote code execution (RCE)."}, {"Reference": "CVE-2021-20022", "Description": "SonicWall Email Security version 10.0.9.x contains a vulnerability that allows a post-authenticated attacker to upload an arbitrary file to the remote host."}, {"Reference": "CVE-2021-31207", "Description": "Microsoft Exchange Server Security Feature Bypass Vulnerability"}, {"Reference": "CVE-2021-22968", "Description": "A bypass of adding remote files in Concrete CMS (previously concrete5) File Manager leads to remote code execution in Concrete CMS (concrete5) versions 8.5.6 and below.The external file upload feature stages files in the public directory even if they have disallowed file extensions. They are stored in a directory with a random name, but it's possible to stall the uploads and brute force the directory name. You have to be an admin with the ability to upload files, but this bug gives you the ability to upload restricted file types and execute them depending on server configuration.To fix this, a check for allowed file extensions was added before downloading files to a tmp directory.Concrete CMS Security Team gave this a CVSS v3.1 score of 5.4 AV:N/AC:H/PR:H/UI:R/S:C/C:N/I:H/A:NThis fix is also in Concrete version 9.0.0"}, {"Reference": "CVE-2022-1811", "Description": "Unrestricted Upload of File with Dangerous Type in GitHub repository publify/publify prior to 9.2.9."}, {"Reference": "CVE-2022-0950", "Description": "Unrestricted Upload of File with Dangerous Type in GitHub repository star7th/showdoc prior to 2.10.4."}, {"Reference": "CVE-2022-3458", "Description": "A vulnerability has been found in SourceCodester Human Resource Management System 1.0 and classified as critical. Affected by this vulnerability is an unknown functionality of the file /employeeview.php of the component Image File Handler. The manipulation leads to unrestricted upload. The attack can be launched remotely. The associated identifier of this vulnerability is VDB-210559."}, {"Reference": "CVE-2022-3770", "Description": "A vulnerability classified as critical was found in Yunjing CMS. This vulnerability affects unknown code of the file /index/user/upload_img.html. The manipulation of the argument file leads to unrestricted upload. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-212500."}, {"Reference": "CVE-2022-31041", "Description": "Open Forms is an application for creating and publishing smart forms. Open Forms supports file uploads as one of the form field types. These fields can be configured to allow only certain file extensions to be uploaded by end users (e.g. only PDF / Excel / ...). The input validation of uploaded files is insufficient in versions prior to 1.0.9 and 1.1.1. Users could alter or strip file extensions to bypass this validation. This results in files being uploaded to the server that are of a different file type than indicated by the file name extension. These files may be downloaded (manually or automatically) by staff and/or other applications for further processing. Malicious files can therefore find their way into internal/trusted networks. Versions 1.0.9 and 1.1.1 contain patches for this issue. As a workaround, an API gateway or intrusion detection solution in front of open-forms may be able to scan for and block malicious content before it reaches the Open Forms application."}]}
{"ID": "435", "Name": "Improper Interaction Between Multiple Correctly-Behaving Entities", "Abstraction": "Pillar", "Structure": "Simple", "Status": "Draft", "Description": "An interaction error occurs when two entities have correct behavior when running independently of each other, but when they are integrated as components in a larger system or process, they introduce incorrect behaviors that may cause resultant weaknesses.", "ExtendedDescription": "When a system or process combines multiple independent components, this often produces new, emergent behaviors at the system level. However, if the interactions between these components are not fully accounted for, some of the emergent behaviors can be incorrect or even insecure.", "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Interaction Error"}, {"Term": "Emergent Fault"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State", "Varies by Context"]}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The paper \"Insertion, Evasion, and Denial of Service: Eluding Network Intrusion Detection\" [REF-428] shows that OSes varied widely in how they manage unusual packets, which made it difficult or impossible for intrusion detection systems to properly detect certain attacker manipulations that took advantage of these OS differences."}]}], "ObservedExamples": [{"Reference": "CVE-2002-0485", "Description": "Anti-virus product allows bypass via Content-Type and Content-Disposition headers that are mixed case, which are still processed by some clients.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0485"}, {"Reference": "CVE-2003-0411", "Description": "chain: Code was ported from a case-sensitive Unix platform to a case-insensitive Windows platform where filetype handlers treat .jsp and .JSP as different extensions. JSP source code may be read because .JSP defaults to the filetype \"text\".", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0411"}], "MappingNotes": {"Usage": "Discouraged", "Rationale": "This CWE entry is extremely high-level, a Pillar. However, sometimes this weakness is forced to be used due to the lack of in-depth weakness research. See Research Gaps.", "Comments": "Where feasible, consider children or descendants of this entry instead.", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Research Gap", "Note": "\n\nWeaknesses related to this Pillar appear to be under-studied, especially with respect to classification schemes. Input from academic and other communities could help identify and resolve gaps or organizational difficulties within CWE.\n"}, {"Type": "Relationship", "Note": "The \"Interaction Error\" term, in CWE and elsewhere, is only intended to describe products that behave according to specification. When one or more of the products do not comply with specifications, then it is more likely to be API Abuse (CWE-227) or an interpretation conflict (CWE-436). This distinction can be blurred in real world scenarios, especially when \"de facto\" standards do not comply with specifications, or when there are no standards but there is widespread adoption. As a result, it can be difficult to distinguish these weaknesses during mapping and classification."}]}
{"ID": "436", "Name": "Interpretation Conflict", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "Product A handles inputs or steps differently than Product B, which causes A to perform incorrect actions based on its perception of B's state.", "ExtendedDescription": "This is generally found in proxies, firewalls, anti-virus software, and other intermediary devices that monitor, allow, deny, or modify traffic based on how the client or server is expected to behave.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "435", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Unexpected State", "Varies by Context"]}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The paper \"Insertion, Evasion, and Denial of Service: Eluding Network Intrusion Detection\" [REF-428] shows that OSes varied widely in how they manage unusual packets, which made it difficult or impossible for intrusion detection systems to properly detect certain attacker manipulations that took advantage of these OS differences."}]}, {"Entries": [{"IntroText": "Null characters have different interpretations in Perl and C, which have security consequences when Perl invokes C functions. Similar problems have been reported in ASP [REF-429] and PHP."}]}], "ObservedExamples": [{"Reference": "CVE-2005-1215", "Description": "Bypass filters or poison web cache using requests with multiple Content-Length headers, a non-standard behavior.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1215"}, {"Reference": "CVE-2002-0485", "Description": "Anti-virus product allows bypass via Content-Type and Content-Disposition headers that are mixed case, which are still processed by some clients.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0485"}, {"Reference": "CVE-2002-1978", "Description": "FTP clients sending a command with \"PASV\" in the argument can cause firewalls to misinterpret the server's error as a valid response, allowing filter bypass.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1978"}, {"Reference": "CVE-2002-1979", "Description": "FTP clients sending a command with \"PASV\" in the argument can cause firewalls to misinterpret the server's error as a valid response, allowing filter bypass.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1979"}, {"Reference": "CVE-2002-0637", "Description": "Virus product bypass with spaces between MIME header fields and the \":\" separator, a non-standard message that is accepted by some clients.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0637"}, {"Reference": "CVE-2002-1777", "Description": "AV product detection bypass using inconsistency manipulation (file extension in MIME Content-Type vs. Content-Disposition field).", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1777"}, {"Reference": "CVE-2005-3310", "Description": "CMS system allows uploads of files with GIF/JPG extensions, but if they contain HTML, Internet Explorer renders them as HTML instead of images.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3310"}, {"Reference": "CVE-2005-4260", "Description": "Interpretation conflict allows XSS via invalid \"<\" when a \">\" is expected, which is treated as \">\" by many web browsers.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-4260"}, {"Reference": "CVE-2005-4080", "Description": "Interpretation conflict (non-standard behavior) enables XSS because browser ignores invalid characters in the middle of tags.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-4080"}], "RelatedAttackPatterns": ["105", "273", "34"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Top25Examples": [{"Reference": "CVE-2022-48279", "Description": "In ModSecurity before 2.9.6 and 3.x before 3.0.8, HTTP multipart requests were incorrectly parsed and could bypass the Web Application Firewall. NOTE: this is related to CVE-2022-39956 but can be considered independent changes to the ModSecurity (C language) codebase."}]}
{"ID": "437", "Name": "Incomplete Model of Endpoint Features", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "A product acts as an intermediary or monitor between two or more endpoints, but it does not have a complete model of an endpoint's features, behaviors, or state, potentially causing the product to perform incorrect actions based on this incomplete model.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "436", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Unexpected State", "Varies by Context"]}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "HTTP request smuggling is an attack against an intermediary such as a proxy. This attack works because the proxy expects the client to parse HTTP headers one way, but the client parses them differently."}]}, {"Entries": [{"IntroText": "Anti-virus products that reside on mail servers can suffer from this issue if they do not know how a mail client will handle a particular attachment. The product might treat an attachment type as safe, not knowing that the client's configuration treats it as executable."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This can be related to interaction errors, although in some cases, one of the endpoints is not performing correctly according to specification."}]}
{"ID": "439", "Name": "Behavioral Change in New Version or Environment", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "A's behavior or functionality changes with a new version of A, or a new environment, which is not known (or manageable) by B.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "435", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Functional change"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Quality Degradation", "Varies by Context"]}], "ObservedExamples": [{"Reference": "CVE-2002-1976", "Description": "Linux kernel 2.2 and above allow promiscuous mode using a different method than previous versions, and ifconfig is not aware of the new method (alternate path property).", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1976"}, {"Reference": "CVE-2005-1711", "Description": "Product uses defunct method from another product that does not return an error code and allows detection avoidance.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1711"}, {"Reference": "CVE-2003-0411", "Description": "chain: Code was ported from a case-sensitive Unix platform to a case-insensitive Windows platform where filetype handlers treat .jsp and .JSP as different extensions. JSP source code may be read because .JSP defaults to the filetype \"text\".", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0411"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "44", "Name": "Path Equivalence: 'file.name' (Internal Dot)", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product accepts path input in the form of internal dot ('file.ordir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "41", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Modify Files or Directories"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "An improper attempt to remove the internal dots from the string could lead to CWE-181 (Incorrect Behavior Order: Validate Before Filter)."}]}
{"ID": "440", "Name": "Expected Behavior Violation", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "A feature, API, or function does not perform according to its specification.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "684", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "ICS/OT", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Quality Degradation", "Varies by Context"]}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The provided code is extracted from the Control and Status Register (CSR), csr_regfile, module within the Hack@DAC'21 OpenPiton System-on-Chip (SoC). This module is designed to implement CSR registers in accordance with the RISC-V specification. The mie (machine interrupt enable) register is a 64-bit register [REF-1384], where bits correspond to different interrupt sources. As the name suggests, mie is a machine-level register that determines which interrupts are enabled. Note that in the example below the mie_q and mie_d registers represent the conceptual mie reigster in the RISC-V specification. The mie_d register is the value to be stored in the mie register while the mie_q register holds the current value of the mie register [REF-1385]."}, {"BodyText": "The mideleg (machine interrupt delegation) register, also 64-bit wide, enables the delegation of specific interrupt sources from machine privilege mode to lower privilege levels. By setting specific bits in the mideleg register, the handling of certain interrupts can be delegated to lower privilege levels without engaging the machine-level privilege mode. For example, in supervisor mode, the mie register is limited to a specific register called the sie (supervisor interrupt enable) register. If delegated, an interrupt becomes visible in the sip (supervisor interrupt pending) register and can be enabled or blocked using the sie register. If no delegation occurs, the related bits in sip and sie are set to zero."}, {"BodyText": "The sie register value is computed based on the current value of mie register, i.e., mie_q, and the mideleg register."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "module csr_regfile #(...)(...);\n ...\n // ---------------------------\n // CSR Write and update logic\n // ---------------------------\n ...\n\n```\n\t if (csr_we) begin\n\t\t unique case (csr_addr.address)\n\t\t ...\n\t\t\t riscv::CSR_SIE: begin\n\t\t\t\t // the mideleg makes sure only delegate-able register\n\t\t\t\t //(and therefore also only implemented registers) are written\n```\nmie_d = (mie_q & ~mideleg_q) | (csr_wdata & mideleg_q) | utval_q;** \n\t\t\t\t end\n\t\t\t ...\n\t\t\t endcase\n\t\t end\n\t endmodule"}, {"BodyText": "The above code snippet illustrates an instance of a vulnerable implementation of the sie register update logic, where users can tamper with the mie_d register value through the utval (user trap value) register. This behavior violates the RISC-V specification."}, {"BodyText": "The code shows that the value of utval, among other signals, is used in updating the mie_d value within the sie update logic. While utval is a register accessible to users, it should not influence or compromise the integrity of sie. Through manipulation of the utval register, it becomes feasible to manipulate the sie register's value. This opens the door for potential attacks, as an adversary can gain control over or corrupt the sie value. Consequently, such manipulation empowers an attacker to enable or disable critical supervisor-level interrupts, resulting in various security risks such as privilege escalation or denial-of-service attacks."}, {"BodyText": "A fix to this issue is to remove the utval from the right-hand side of the assignment. That is the value of the mie_d should be updated as shown in the good code example [REF-1386]."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "module csr_regfile #(...)(...);\n ...\n // ---------------------------\n // CSR Write and update logic\n // ---------------------------\n ...\n\n```\n\t if (csr_we) begin\n\t\t unique case (csr_addr.address)\n\t\t ...\n\t\t\t riscv::CSR_SIE: begin\n\t\t\t\t // the mideleg makes sure only delegate-able register\n\t\t\t\t //(and therefore also only implemented registers) are written\n```\nmie_d = (mie_q & ~mideleg_q) | (csr_wdata & mideleg_q);** \n\t\t\t\t end\n\t\t\t ...\n\t\t\t endcase\n\t\t end\n\t endmodule"}]}], "ObservedExamples": [{"Reference": "CVE-2003-0187", "Description": "Program uses large timeouts on unconfirmed connections resulting from inconsistency in linked lists implementations.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0187"}, {"Reference": "CVE-2003-0465", "Description": "\"strncpy\" in Linux kernel acts different than libc on x86, leading to expected behavior difference - sort of a multiple interpretation error?", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0465"}, {"Reference": "CVE-2005-3265", "Description": "Buffer overflow in product stems the use of a third party library function that is expected to have internal protection against overflows, but doesn't.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3265"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Theoretical", "Note": "The behavior of an application that is not consistent with the expectations of the developer may lead to incorrect use of the software."}]}
{"ID": "441", "Name": "Unintended Proxy or Intermediary ('Confused Deputy')", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product receives a request, message, or directive from an upstream component, but the product does not sufficiently preserve the original source of the request before forwarding the request to an external actor that is outside of the product's control sphere. This causes the product to appear to be the source of the request, leading it to act as a proxy or other intermediary between the upstream component and the external actor.", "ExtendedDescription": "\n\nIf an attacker cannot directly contact a target, but the product has access to the target, then the attacker can send a request to the product and have it be forwarded to the target. The request would appear to be coming from the product's system, not the attacker's system. As a result, the attacker can bypass access controls (such as firewalls) or hide the source of malicious requests, since the requests would not be coming directly from the attacker.\n\n\nSince proxy functionality and message-forwarding often serve a legitimate purpose, this issue only becomes a vulnerability when:\n\n\n  - The product runs with different privileges or on a different system, or otherwise has different levels of access than the upstream component;\n\n  - The attacker is prevented from making the request directly to the target; and\n\n  - The attacker can create a request that the proxy does not explicitly intend to be forwarded on the behalf of the requester. Such a request might point to an unexpected hostname, port number, hardware IP, or service. Or, the request might be sent to an allowed service, but the request could contain disallowed directives, commands, or resources.\n\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "610", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "668", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Confused Deputy", "Description": "This weakness is sometimes referred to as the \"Confused deputy\" problem, in which an attacker misused the authority of one victim (the \"confused deputy\") when targeting another victim."}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Non-Repudiation", "Access Control"], "Impact": ["Gain Privileges or Assume Identity", "Hide Activities", "Execute Unauthorized Code or Commands"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Enforce the use of strong mutual authentication mechanism between the two parties."}, {"Phase": ["Architecture and Design"], "Description": "Whenever a product is an intermediary or proxy for transactions between two other components, the proxy core should not drop the identity of the initiator of the transaction. The immutability of the identity of the initiator must be maintained and should be forwarded all the way to the target."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "A SoC contains a microcontroller (running ring-3 (least trusted ring) code), a Memory Mapped Input Output (MMIO) mapped IP core (containing design-house secrets), and a Direct Memory Access (DMA) controller, among several other compute elements and peripherals. The SoC implements access control to protect the registers in the IP core (which registers store the design-house secrets) from malicious, ring-3 (least trusted ring) code executing on the microcontroller. The DMA controller, however, is not blocked off from accessing the IP core for functional reasons."}, {"Nature": "Bad", "Language": "Other", "ExampleCode": "The code in ring-3 (least trusted ring) of the microcontroller attempts to directly read the protected registers in IP core through MMIO transactions. However, this attempt is blocked due to the implemented access control. Now, the microcontroller configures the DMA core to transfer data from the protected registers to a memory region that it has access to. The DMA core, which is acting as an intermediary in this transaction, does not preserve the identity of the microcontroller and, instead, initiates a new transaction with its own identity. Since the DMA core has access, the transaction (and hence, the attack) is successful."}, {"BodyText": "The weakness here is that the intermediary or the proxy agent did not ensure the immutability of the identity of the microcontroller initiating the transaction."}, {"Nature": "Good", "Language": "Other", "ExampleCode": "The DMA core forwards this transaction with the identity of the code executing on the microcontroller, which is the original initiator of the end-to-end transaction. Now the transaction is blocked, as a result of forwarding the identity of the true initiator which lacks the permission to access the confidential MMIO mapped IP core."}]}], "ObservedExamples": [{"Reference": "CVE-1999-0017", "Description": "FTP bounce attack. The design of the protocol allows an attacker to modify the PORT command to cause the FTP server to connect to other machines besides the attacker's.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0017"}, {"Reference": "CVE-1999-0168", "Description": "RPC portmapper could redirect service requests from an attacker to another entity, which thinks the requests came from the portmapper.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0168"}, {"Reference": "CVE-2005-0315", "Description": "FTP server does not ensure that the IP address in a PORT command is the same as the FTP user's session, allowing port scanning by proxy.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0315"}, {"Reference": "CVE-2002-1484", "Description": "Web server allows attackers to request a URL from another server, including other ports, which allows proxied scanning.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1484"}, {"Reference": "CVE-2004-2061", "Description": "CGI script accepts and retrieves incoming URLs.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2061"}, {"Reference": "CVE-2001-1484", "Description": "Bounce attack allows access to TFTP from trusted side.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1484"}, {"Reference": "CVE-2010-1637", "Description": "Web-based mail program allows internal network scanning using a modified POP3 port number.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-1637"}, {"Reference": "CVE-2009-0037", "Description": "URL-downloading library automatically follows redirects to file:// and scp:// URLs", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0037"}], "RelatedAttackPatterns": ["219", "465"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Relationship", "Note": "This weakness has a chaining relationship with CWE-668 (Exposure of Resource to Wrong Sphere) because the proxy effectively provides the attacker with access to the target's resources that the attacker cannot directly obtain."}, {"Type": "Maintenance", "Note": "This could possibly be considered as an emergent resource."}, {"Type": "Theoretical", "Note": "It could be argued that the \"confused deputy\" is a fundamental aspect of most vulnerabilities that require an active attacker. Even for common implementation issues such as buffer overflows, SQL injection, OS command injection, and path traversal, the vulnerable program already has the authorization to run code or access files. The vulnerability arises when the attacker causes the program to run unexpected code or access unexpected files."}], "Top25Examples": [{"Reference": "CVE-2022-36537", "Description": "ZK Framework v9.6.1, 9.6.0.1, 9.5.1.3, 9.0.1.2 and 8.6.4.1 allows attackers to access sensitive information via a crafted POST request sent to the component AuUploader."}, {"Reference": "CVE-2021-20042", "Description": "An unauthenticated remote attacker can use SMA 100 as an unintended proxy or intermediary undetectable proxy to bypass firewall rules. This vulnerability affected SMA 200, 210, 400, 410 and 500v appliances."}, {"Reference": "CVE-2021-36190", "Description": "A unintended proxy or intermediary ('confused deputy') in Fortinet FortiWeb version 6.4.1 and below, 6.3.15 and below allows an unauthenticated attacker to access protected hosts via crafted HTTP requests."}]}
{"ID": "443", "Name": "DEPRECATED: HTTP response splitting", "Abstraction": "Base", "Structure": "Simple", "Status": "Deprecated", "Description": "This weakness can be found at CWE-113.", "MappingNotes": {"Usage": "Prohibited", "Rationale": "This CWE has been deprecated.", "Comments": "See description and name for possible suggestions of other CWEs to consider.", "Reasons": ["Deprecated"]}}
{"ID": "444", "Name": "Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product acts as an intermediary HTTP agent\n         (such as a proxy or firewall) in the data flow between two\n         entities such as a client and server, but it does not\n         interpret malformed HTTP requests or responses in ways that\n         are consistent with how the messages will be processed by\n         those entities that are at the ultimate destination.", "ExtendedDescription": "\n\nHTTP requests or responses (\"messages\") can be malformed or unexpected in ways that cause web servers or clients to interpret the messages in different ways than intermediary HTTP agents such as load balancers, reverse proxies, web caching proxies, application firewalls, etc. For example, an adversary may be able to add duplicate or different header fields that a client or server might interpret as one set of messages, whereas the intermediary might interpret the same sequence of bytes as a different set of messages. For example, discrepancies can arise in how to handle duplicate headers like two Transfer-encoding (TE) or two Content-length (CL), or the malicious HTTP message will have different headers for TE and CL.\n\n\nThe inconsistent parsing and interpretation of messages can allow the adversary to \"smuggle\" a message to the client/server without the intermediary being aware of it.\n\n\nThis weakness is usually the result of the usage of outdated or incompatible HTTP protocol versions in the HTTP agents.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "436", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "436", "ViewID": "1003", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Web Based", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "HTTP Request Smuggling"}, {"Term": "HTTP Response Smuggling"}, {"Term": "HTTP Smuggling"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Non-Repudiation", "Access Control"], "Impact": ["Unexpected State", "Hide Activities", "Bypass Protection Mechanism"], "Note": "An attacker could create HTTP messages to exploit a number of weaknesses including 1) the message can trick the web server to associate a URL with another URL's webpage and caching the contents of the webpage (web cache poisoning attack), 2) the message can be structured to bypass the firewall protection mechanisms and gain unauthorized access to a web application, and 3) the message can invoke a script or a page that returns client credentials (similar to a Cross Site Scripting attack)."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Use a web server that employs a strict HTTP parsing procedure, such as Apache [REF-433]."}, {"Phase": ["Implementation"], "Description": "Use only SSL communication."}, {"Phase": ["Implementation"], "Description": "Terminate the client session after each request."}, {"Phase": ["System Configuration"], "Description": "Turn all pages to non-cacheable."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following example, a malformed HTTP request is sent to a website that includes a proxy server and a web server with the intent of poisoning the cache to associate one webpage with another malicious webpage."}, {"Nature": "Attack", "ExampleCode": "POST http://www.website.com/foobar.html HTTP/1.1\n Host: www.website.com\n Connection: Keep-Alive\n Content-Type: application/x-www-form-urlencoded\n Content-Length: 0\n Content-Length: 54\n\n GET /poison.html HTTP/1.1\n Host: www.website.com\n Bla: GET http://www.website.com/page_to_poison.html HTTP/1.1\n Host: www.website.com\n Connection: Keep-Alive"}, {"BodyText": "When this request is sent to the proxy server, the proxy server parses the first four lines of the POST request and encounters the two \"Content-Length\" headers. The proxy server ignores the first header, so it assumes the request has a body of length 54 bytes. Therefore, it treats the data in the next three lines that contain exactly 54 bytes as the first request's body:"}, {"Nature": "Result", "ExampleCode": "GET /poison.html HTTP/1.1\n Host: www.website.com\n Bla:"}, {"BodyText": "The proxy then parses the remaining bytes, which it treats as the client's second request:"}, {"Nature": "Attack", "ExampleCode": "GET http://www.website.com/page_to_poison.html HTTP/1.1\n Host: www.website.com\n Connection: Keep-Alive"}, {"BodyText": "The original request is forwarded by the proxy server to the web server. Unlike the proxy, the web server uses the first \"Content-Length\" header and considers that the first POST request has no body."}, {"Nature": "Attack", "ExampleCode": "POST http://www.website.com/foobar.html HTTP/1.1\n Host: www.website.com\n Connection: Keep-Alive\n Content-Type: application/x-www-form-urlencoded\n Content-Length: 0\n\n *Content-Length: 54 (ignored by server)*"}, {"BodyText": "Because the web server has assumed the original POST request was length 0, it parses the second request that follows, i.e. for GET /poison.html:"}, {"Nature": "Attack", "ExampleCode": "GET /poison.html HTTP/1.1\n Host: www.website.com\n Bla: GET http://www.website.com/page_to_poison.html HTTP/1.1\n Host: www.website.com\n Connection: Keep-Alive"}, {"BodyText": "Note that the \"Bla:\" header is treated as a regular header, so it is not parsed as a separate GET request."}, {"BodyText": "The requests the web server sees are \"POST /foobar.html\" and \"GET /poison.html\", so it sends back two responses with the contents of the \"foobar.html\" page and the \"poison.html\" page, respectively. The proxy matches these responses to the two requests it thinks were sent by the client - \"POST /foobar.html\" and \"GET /page_to_poison.html\". If the response is cacheable, the proxy caches the contents of \"poison.html\" under the URL \"page_to_poison.html\", and the cache is poisoned! Any client requesting \"page_to_poison.html\" from the proxy would receive the \"poison.html\" page."}, {"BodyText": "When a website includes both a proxy server and a web server, some protection against this type of attack can be achieved by installing a web application firewall, or using a web server that includes a stricter HTTP parsing procedure or make all webpages non-cacheable."}, {"BodyText": "Additionally, if a web application includes a Java servlet for processing requests, the servlet can check for multiple \"Content-Length\" headers and if they are found the servlet can return an error response thereby preventing the poison page to be cached, as shown below."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tprotected void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { \n```\n// Set up response writer object* \n\t\t\t...\n\t\t\ttry { \n\t\t\t```\n```\n// check for multiple content length headers* \n\t\t\t\t\tEnumeration contentLengthHeaders = request.getHeaders(\"Content-Length\"); \n\t\t\t\t\tint count = 0; \n\t\t\t\t\twhile (contentLengthHeaders.hasMoreElements()) { \n\t\t\t\t\t```\n\t\t\t\t\t\tcount++; \n\t\t\t\t\t} \n\t\t\t\t\tif (count > 1) { \n```\n// output error response* } \n\t\t\t\t\telse { \n\t\t\t\t\t```\n```\n// process request* } \n\t\t\t\t\t} catch (Exception ex) {...}}"}]}, {"Entries": [{"IntroText": "In the following example, a malformed HTTP request is sent to a website that includes a web server with a firewall with the intent of bypassing the web server firewall to smuggle malicious code into the system."}, {"Nature": "Attack", "ExampleCode": "```\n\tPOST /page.asp HTTP/1.1\n\tHost: www.website.com\n\tConnection: Keep-Alive\n\tContent-Length: 49223\n\tzzz...zzz [\"z\" x 49152]\n\tPOST /page.asp HTTP/1.0\n\tConnection: Keep-Alive\n\tContent-Length: 30\n\tPOST /page.asp HTTP/1.0\n\tBla: POST /page.asp?cmd.exe HTTP/1.0\n\tConnection: Keep-Alive\n```"}, {"BodyText": "When this request is sent to the web server, the first POST request has a content-length of 49,223 bytes, and the firewall treats the line with 49,152 copies of \"z\" and the lines with an additional lines with 71 bytes as its body (49,152+71=49,223). The firewall then continues to parse what it thinks is the second request starting with the line with the third POST request."}, {"BodyText": "Note that there is no CRLF after the \"Bla: \" header so the POST in the line is parsed as the value of the \"Bla:\" header. Although the line contains the pattern identified with a worm (\"cmd.exe\"), it is not blocked, since it is considered part of a header value. Therefore, \"cmd.exe\" is smuggled through the firewall."}, {"BodyText": "When the request is passed through the firewall the web server the first request is ignored because the web server does not find an expected \"Content-Type: application/x-www-form-urlencoded\" header, and starts parsing the second request."}, {"BodyText": "This second request has a content-length of 30 bytes, which is exactly the length of the next two lines up to the space after the \"Bla:\" header. And unlike the firewall, the web server processes the final POST as a separate third request and the \"cmd.exe\" worm is smuggled through the firewall to the web server."}, {"BodyText": "To avoid this attack a Web server firewall product must be used that is designed to prevent this type of attack."}]}, {"Entries": [{"IntroText": "The interpretation of HTTP responses can be manipulated if response headers include a space between the header name and colon, or if HTTP 1.1 headers are sent through a proxy configured for HTTP 1.0, allowing for HTTP response smuggling. This can be exploited in web browsers and other applications when used in combination with various proxy servers. For instance, the HTTP response interpreted by the front-end/client HTTP agent/entity - in this case the web browser - can interpret a single response from an adversary-compromised web server as being two responses from two different web sites. In the Example below, notice the extra space after the Content-Length and Set-Cookie headers."}, {"Nature": "Attack", "ExampleCode": "HTTP/1.1 200 OK\n Date: Fri, 08 Aug 2016 08:12:31 GMT\n Server: Apache (Unix)\n Connection: Keep-Alive\n Content-Encoding: gzip\n Content-Type: text/html\n\n **Content-Length :**  2345\n Transfer-Encoding: chunked\n\n **Set-Cookie :**  token=\"Malicious Code\"\n\n <HTML> ... \"Malicious Code\""}]}], "ObservedExamples": [{"Reference": "CVE-2022-24766", "Description": "SSL/TLS-capable proxy allows HTTP smuggling when used in tandem with HTTP/1.0 services, due to inconsistent interpretation and input sanitization of HTTP messages within the body of another message", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-24766"}, {"Reference": "CVE-2021-37147", "Description": "Chain: caching proxy server has improper input validation (CWE-20) of headers, allowing HTTP response smuggling (CWE-444) using an \"LF line ending\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-37147"}, {"Reference": "CVE-2020-8287", "Description": "Node.js platform allows request smuggling via two Transfer-Encoding headers", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-8287"}, {"Reference": "CVE-2006-6276", "Description": "Web servers allow request smuggling via inconsistent HTTP headers.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6276"}, {"Reference": "CVE-2005-2088", "Description": "HTTP server allows request smuggling with both a \"Transfer-Encoding: chunked\" header and a Content-Length header", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2088"}, {"Reference": "CVE-2005-2089", "Description": "HTTP server allows request smuggling with both a \"Transfer-Encoding: chunked\" header and a Content-Length header", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2089"}], "RelatedAttackPatterns": ["273", "33"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Theoretical", "Note": "Request smuggling can be performed due to a multiple interpretation error, where the target is an intermediary or monitor, via a consistency manipulation (Transfer-Encoding and Content-Length headers)."}], "Top25Examples": [{"Reference": "CVE-2021-21445", "Description": "SAP Commerce Cloud, versions - 1808, 1811, 1905, 2005, 2011, allows an authenticated attacker to include invalidated data in the HTTP response Content Type header, due to improper input validation, and sent to a Web user. A successful exploitation of this vulnerability may lead to advanced attacks, including cross-site scripting and page hijacking."}, {"Reference": "CVE-2022-21826", "Description": "Pulse Secure version 9.115 and below may be susceptible to client-side http request smuggling, When the application receives a POST request, it ignores the request's Content-Length header and leaves the POST body on the TCP/TLS socket. This body ends up prefixing the next HTTP request sent down that connection, this means when someone loads website attacker may be able to make browser issue a POST to the application, enabling XSS."}, {"Reference": "CVE-2022-38114", "Description": "This vulnerability occurs when a web server fails to correctly process the Content-Length of POST requests. This can lead to HTTP request smuggling or XSS. "}, {"Reference": "CVE-2022-22536", "Description": "SAP NetWeaver Application Server ABAP, SAP NetWeaver Application Server Java, ABAP Platform, SAP Content Server 7.53 and SAP Web Dispatcher are vulnerable for request smuggling and request concatenation. An unauthenticated attacker can prepend a victim's request with arbitrary data. This way, the attacker can execute functions impersonating the victim or poison intermediary Web caches. A successful attack could result in complete compromise of Confidentiality, Integrity and Availability of the system. "}, {"Reference": "CVE-2021-46825", "Description": "Symantec Advanced Secure Gateway (ASG) and ProxySG are susceptible to an HTTP desync vulnerability. When a remote unauthenticated attacker and other web clients communicate through the proxy with the same web server, the attacker can send crafted HTTP requests and cause the proxy to forward web server responses to unintended clients. Severity/CVSSv3: High / 8.1 AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:N"}, {"Reference": "CVE-2022-2466", "Description": "It was found that Quarkus 2.10.x does not terminate HTTP requests header context which may lead to unpredictable behavior."}, {"Reference": "CVE-2022-25763", "Description": "Improper Input Validation vulnerability in HTTP/2 request validation of Apache Traffic Server allows an attacker to create smuggle or cache poison attacks. This issue affects Apache Traffic Server 8.0.0 to 9.1.2."}]}
{"ID": "446", "Name": "UI Discrepancy for Security Feature", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The user interface does not correctly enable or configure a security feature, but the interface provides feedback that causes the user to believe that the feature is in a secure state.", "ExtendedDescription": "When the user interface does not properly reflect what the user asks of it, then it can lead the user into a false sense of security. For example, the user might check a box to enable a security option to enable encrypted communications, but the product does not actually enable the encryption. Alternately, the user might provide a \"restrict ALL\" access control rule, but the product only implements \"restrict SOME\".", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "684", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Varies by Context"]}], "ObservedExamples": [{"Reference": "CVE-1999-1446", "Description": "UI inconsistency; visited URLs list not cleared when \"Clear History\" option is selected.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1446"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry is likely a loose composite that could be broken down into the different types of errors that cause the user interface to have incorrect interactions with the underlying security feature."}]}
{"ID": "447", "Name": "Unimplemented or Unsupported Feature in UI", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "A UI function for a security feature appears to be supported and gives feedback to the user that suggests that it is supported, but the underlying functionality is not implemented.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "446", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "671", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Varies by Context"]}], "PotentialMitigations": [{"Phase": ["Testing"], "Description": "Perform functionality testing before deploying the application."}], "ObservedExamples": [{"Reference": "CVE-2000-0127", "Description": "GUI configuration tool does not enable a security option when a checkbox is selected, although that option is honored when manually set in the configuration file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0127"}, {"Reference": "CVE-2001-0863", "Description": "Router does not implement a specific keyword when it is used in an ACL, allowing filter bypass.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0863"}, {"Reference": "CVE-2001-0865", "Description": "Router does not implement a specific keyword when it is used in an ACL, allowing filter bypass.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0865"}, {"Reference": "CVE-2004-0979", "Description": "Web browser does not properly modify security setting when the user sets it.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0979"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "This issue needs more study, as there are not many examples. It is not clear whether it is primary or resultant."}]}
{"ID": "448", "Name": "Obsolete Feature in UI", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "A UI function is obsolete and the product does not warn the user.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "446", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Quality Degradation", "Varies by Context"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Remove the obsolete feature from the UI. Warn the user that the feature is no longer supported."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "449", "Name": "The UI Performs the Wrong Action", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The UI performs the wrong action with respect to the user's request.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "446", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Quality Degradation", "Varies by Context"]}], "PotentialMitigations": [{"Phase": ["Testing"], "Description": "Perform extensive functionality testing of the UI. The UI should behave as specified."}], "ObservedExamples": [{"Reference": "CVE-2001-1387", "Description": "Network firewall accidentally implements one command line option as if it were another, possibly leading to behavioral infoleak.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1387"}, {"Reference": "CVE-2001-0081", "Description": "Command line option correctly suppresses a user prompt but does not properly disable a feature, although when the product prompts the user, the feature is properly disabled.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0081"}, {"Reference": "CVE-2002-1977", "Description": "Product does not \"time out\" according to user specification, leaving sensitive data available after it has expired.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1977"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "45", "Name": "Path Equivalence: 'file...name' (Multiple Internal Dot)", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product accepts path input in the form of multiple internal dot ('file...dir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "44", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "165", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Modify Files or Directories"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "An improper attempt to remove the internal dots from the string could lead to CWE-181 (Incorrect Behavior Order: Validate Before Filter)."}]}
{"ID": "450", "Name": "Multiple Interpretations of UI Input", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The UI has multiple interpretations of user input but does not prompt the user when it selects the less secure interpretation.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "357", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Varies by Context"]}], "PotentialMitigations": [{"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "451", "Name": "User Interface (UI) Misrepresentation of Critical Information", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The user interface (UI) does not properly represent critical information to the user, allowing the information - or its source - to be obscured or spoofed. This is often a component in phishing attacks.", "ExtendedDescription": "\n\nIf an attacker can cause the UI to display erroneous data, or to otherwise convince the user to display information that appears to come from a trusted source, then the attacker could trick the user into performing the wrong action. This is often a component in phishing attacks, but other kinds of problems exist. For example, if the UI is used to monitor the security state of a system or network, then omitting or obscuring an important indicator could prevent the user from detecting and reacting to a security-critical event.\n\n\nUI misrepresentation can take many forms:\n\n\n  - Incorrect indicator: incorrect information is displayed, which prevents the user from understanding the true state of the product or the environment the product is monitoring, especially of potentially-dangerous conditions or operations. This can be broken down into several different subtypes.\n\n  - Overlay: an area of the display is intended to give critical information, but another process can modify the display by overlaying another element on top of it. The user is not interacting with the expected portion of the user interface. This is the problem that enables clickjacking attacks, although many other types of attacks exist that involve overlay.\n\n  - Icon manipulation: the wrong icon, or the wrong color indicator, can be influenced (such as making a dangerous .EXE executable look like a harmless .GIF)\n\n  - Timing: the product is performing a state transition or context switch that is presented to the user with an indicator, but a race condition can cause the wrong indicator to be used before the product has fully switched context. The race window could be extended indefinitely if the attacker can trigger an error.\n\n  - Visual truncation: important information could be truncated from the display, such as a long filename with a dangerous extension that is not displayed in the GUI because the malicious portion is truncated. The use of excessive whitespace can also cause truncation, or place the potentially-dangerous indicator outside of the user's field of view (e.g. \"filename.txt .exe\"). A different type of truncation can occur when a portion of the information is removed due to reasons other than length, such as the accidental insertion of an end-of-input marker in the middle of an input, such as a NUL byte in a C-style string.\n\n  - Visual distinction: visual information might be presented in a way that makes it difficult for the user to quickly and correctly distinguish between critical and unimportant segments of the display.\n\n  - Homographs: letters from different character sets, fonts, or languages can appear very similar (i.e. may be visually equivalent) in a way that causes the human user to misread the text (for example, to conduct phishing attacks to trick a user into visiting a malicious web site with a visually-similar name as a trusted site). This can be regarded as a type of visual distinction issue.\n\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "684", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "221", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "346", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Non-Repudiation", "Access Control"], "Impact": ["Hide Activities", "Bypass Protection Mechanism"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Perform data validation (e.g. syntax, length, etc.) before interpreting the data."}, {"Phase": ["Architecture and Design"], "Strategy": "Output Encoding", "Description": "Create a strategy for presenting information, and plan for how to display unusual characters."}], "ObservedExamples": [{"Reference": "CVE-2004-2227", "Description": "Web browser's filename selection dialog only shows the beginning portion of long filenames, which can trick users into launching executables with dangerous extensions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2227"}, {"Reference": "CVE-2001-0398", "Description": "Attachment with many spaces in filename bypasses \"dangerous content\" warning and uses different icon. Likely resultant.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0398"}, {"Reference": "CVE-2001-0643", "Description": "Misrepresentation and equivalence issue.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0643"}, {"Reference": "CVE-2005-0593", "Description": "Lock spoofing from several different weaknesses.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0593"}, {"Reference": "CVE-2004-1104", "Description": "Incorrect indicator: web browser can be tricked into presenting the wrong URL", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1104"}, {"Reference": "CVE-2005-0143", "Description": "Incorrect indicator: Lock icon displayed when an insecure page loads a binary file loaded from a trusted site.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0143"}, {"Reference": "CVE-2005-0144", "Description": "Incorrect indicator: Secure \"lock\" icon is presented for one channel, while an insecure page is being simultaneously loaded in another channel.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0144"}, {"Reference": "CVE-2004-0761", "Description": "Incorrect indicator: Certain redirect sequences cause security lock icon to appear in web browser, even when page is not encrypted.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0761"}, {"Reference": "CVE-2004-2219", "Description": "Incorrect indicator: Spoofing via multi-step attack that causes incorrect information to be displayed in browser address bar.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2219"}, {"Reference": "CVE-2004-0537", "Description": "Overlay: Wide \"favorites\" icon can overlay and obscure address bar", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0537"}, {"Reference": "CVE-2005-2271", "Description": "Visual distinction: Web browsers do not clearly associate a Javascript dialog box with the web page that generated it, allowing spoof of the source of the dialog. \"origin validation error\" of a sort?", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2271"}, {"Reference": "CVE-2005-2272", "Description": "Visual distinction: Web browsers do not clearly associate a Javascript dialog box with the web page that generated it, allowing spoof of the source of the dialog. \"origin validation error\" of a sort?", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2272"}, {"Reference": "CVE-2005-2273", "Description": "Visual distinction: Web browsers do not clearly associate a Javascript dialog box with the web page that generated it, allowing spoof of the source of the dialog. \"origin validation error\" of a sort?", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2273"}, {"Reference": "CVE-2005-2274", "Description": "Visual distinction: Web browsers do not clearly associate a Javascript dialog box with the web page that generated it, allowing spoof of the source of the dialog. \"origin validation error\" of a sort?", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2274"}, {"Reference": "CVE-2001-1410", "Description": "Visual distinction: Browser allows attackers to create chromeless windows and spoof victim's display using unprotected Javascript method.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1410"}, {"Reference": "CVE-2002-0197", "Description": "Visual distinction: Chat client allows remote attackers to spoof encrypted, trusted messages with lines that begin with a special sequence, which makes the message appear legitimate.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0197"}, {"Reference": "CVE-2005-0831", "Description": "Visual distinction: Product allows spoofing names of other users by registering with a username containing hex-encoded characters.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0831"}, {"Reference": "CVE-2003-1025", "Description": "Visual truncation: Special character in URL causes web browser to truncate the user portion of the \"user@domain\" URL, hiding real domain in the address bar.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1025"}, {"Reference": "CVE-2005-0243", "Description": "Visual truncation: Chat client does not display long filenames in file dialog boxes, allowing dangerous extensions via manipulations including (1) many spaces and (2) multiple file extensions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0243"}, {"Reference": "CVE-2005-1575", "Description": "Visual truncation: Web browser file download type can be hidden using whitespace.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1575"}, {"Reference": "CVE-2004-2530", "Description": "Visual truncation: Visual truncation in chat client using whitespace to hide dangerous file extension.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2530"}, {"Reference": "CVE-2005-0590", "Description": "Visual truncation: Dialog box in web browser allows user to spoof the hostname via a long \"user:pass\" sequence in the URL, which appears before the real hostname.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0590"}, {"Reference": "CVE-2004-1451", "Description": "Visual truncation: Null character in URL prevents entire URL from being displayed in web browser.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1451"}, {"Reference": "CVE-2004-2258", "Description": "Miscellaneous -- [step-based attack, GUI] -- Password-protected tab can be bypassed by switching to another tab, then back to original tab.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2258"}, {"Reference": "CVE-2005-1678", "Description": "Miscellaneous -- Dangerous file extensions not displayed.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1678"}, {"Reference": "CVE-2002-0722", "Description": "Miscellaneous -- Web browser allows remote attackers to misrepresent the source of a file in the File Download dialog box.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0722"}], "RelatedAttackPatterns": ["154", "163", "164", "173", "98"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry should be broken down into more precise entries. See extended description."}, {"Type": "Research Gap", "Note": "Misrepresentation problems are frequently studied in web browsers, but there are no known efforts for classifying these kinds of problems in terms of the shortcomings of the interface. In addition, many misrepresentation issues are resultant."}], "Top25Examples": [{"Reference": "CVE-2022-1520", "Description": "When viewing an email message A, which contains an attached message B, where B is encrypted or digitally signed or both, Thunderbird may show an incorrect encryption or signature status. After opening and viewing the attached message B, when returning to the display of message A, the message A might be shown with the security status of message B. This vulnerability affects Thunderbird < 91.9."}, {"Reference": "CVE-2022-28345", "Description": "The Signal app before 5.34 for iOS allows URI spoofing via RTLO injection. It incorrectly renders RTLO encoded URLs beginning with a non-breaking space, when there is a hash character in the URL. This technique allows a remote unauthenticated attacker to send legitimate looking links, appearing to be any website URL, by abusing the non-http/non-https automatic rendering of URLs. An attacker can spoof, for example, example.com, and masquerade any URL with a malicious destination. An attacker requires a subdomain such as gepj, txt, fdp, or xcod, which would appear backwards as jpeg, txt, pdf, and docx respectively."}, {"Reference": "CVE-2021-0369", "Description": "In CrossProfileAppsServiceImpl.java, there is the possibility of an application's INTERACT_ACROSS_PROFILES grant state not displaying properly in the setting UI due to a logic error in the code. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-11Android ID: A-166561076"}, {"Reference": "CVE-2021-39631", "Description": "In clear_data_dlg_text of strings.xml, there is a possible situation when \"Clear storage\" functionality sets up the wrong security/privacy expectations due to a misleading message. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12Android ID: A-193890833"}, {"Reference": "CVE-2022-1111", "Description": "A business logic error in Project Import in GitLab CE/EE versions 14.9 prior to 14.9.2, 14.8 prior to 14.8.5, and 14.0 prior to 14.7.7 under certain conditions caused imported projects to show an incorrect user in the 'Access Granted' column in the project membership pages"}, {"Reference": "CVE-2022-1874", "Description": "Insufficient policy enforcement in Safe Browsing in Google Chrome on Mac prior to 102.0.5005.61 allowed a remote attacker to bypass downloads protection policy via a crafted HTML page."}, {"Reference": "CVE-2022-22654", "Description": "A user interface issue was addressed. This issue is fixed in watchOS 8.5, Safari 15.4. Visiting a malicious website may lead to address bar spoofing."}, {"Reference": "CVE-2022-22660", "Description": "This issue was addressed with a new entitlement. This issue is fixed in macOS Monterey 12.3. An app may be able to spoof system notifications and UI."}, {"Reference": "CVE-2022-3660", "Description": "Inappropriate implementation in Full screen mode in Google Chrome on Android prior to 107.0.5304.62 allowed a remote attacker to hide the contents of the Omnibox (URL bar) via a crafted HTML page. (Chromium security severity: Medium)"}, {"Reference": "CVE-2022-46705", "Description": "A spoofing issue existed in the handling of URLs. This issue was addressed with improved input validation. This issue is fixed in iOS 16.2 and iPadOS 16.2, macOS Ventura 13.1, Safari 16.2. Visiting a malicious website may lead to address bar spoofing."}]}
{"ID": "453", "Name": "Insecure Default Variable Initialization", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product, by default, initializes an internal variable with an insecure or less secure value than is possible.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1188", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "PHP", "Prevalence": "Sometimes"}, {"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Modify Application Data"], "Note": "An attacker could gain access to and modify sensitive data or system information."}], "PotentialMitigations": [{"Phase": ["System Configuration"], "Description": "Disable or change default settings when they can be used to abuse the system. Since those default settings are shipped with the product they are likely to be known by a potential attacker who is familiar with the product. For instance, default credentials should be changed or the associated accounts should be disabled."}], "DemonstrativeExamples": [{"ID": "DX-163", "Entries": [{"IntroText": "This code attempts to login a user using credentials from a POST request:"}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n```\n// $user and $pass automatically set from POST request* \n\tif (login_user($user,$pass)) {\n\t```\n\t\t$authorized = true;\n\t}\n```\n...* \n\t\n\tif ($authorized) {\n\t```\n\t\tgeneratePage();\n\t}\n```"}, {"BodyText": "Because the $authorized variable is never initialized, PHP will automatically set $authorized to any value included in the POST request if register_globals is enabled. An attacker can send a POST request with an unexpected third value 'authorized' set to 'true' and gain authorized status without supplying valid credentials."}, {"BodyText": "Here is a fixed version:"}, {"Nature": "Good", "Language": "PHP", "ExampleCode": "```\n\t$user = $_POST['user'];\n\t$pass = $_POST['pass'];\n\t$authorized = false;\n\tif (login_user($user,$pass)) {\n\t\t$authorized = true;\n\t}\n```\n...*"}, {"BodyText": "This code avoids the issue by initializing the $authorized variable to false and explicitly retrieving the login credentials from the $_POST variable. Regardless, register_globals should never be enabled and is disabled by default in current versions of PHP."}]}], "ObservedExamples": [{"Reference": "CVE-2022-36349", "Description": "insecure default variable initialization in BIOS firmware for a hardware board allows DoS", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-36349"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This overlaps other categories, probably should be split into separate items."}], "Top25Examples": [{"Reference": "CVE-2022-47194", "Description": "An insecure default vulnerability exists in the Post Creation functionality of Ghost Foundation Ghost 5.9.4. Default installations of Ghost allow non-administrator users to inject arbitrary Javascript in posts, which allow privilege escalation to administrator via XSS. To trigger this vulnerability, an attacker can send an HTTP request to inject Javascript in a post to trick an administrator into visiting the post.A stored XSS vulnerability exists in the `twitter` field for a user."}, {"Reference": "CVE-2022-47196", "Description": "An insecure default vulnerability exists in the Post Creation functionality of Ghost Foundation Ghost 5.9.4. Default installations of Ghost allow non-administrator users to inject arbitrary Javascript in posts, which allow privilege escalation to administrator via XSS. To trigger this vulnerability, an attacker can send an HTTP request to inject Javascript in a post to trick an administrator into visiting the post.A stored XSS vulnerability exists in the `codeinjection_head` for a post."}, {"Reference": "CVE-2022-46831", "Description": "In JetBrains TeamCity between 2022.10 and 2022.10.1 connecting to AWS using the \"Default Credential Provider Chain\" allowed TeamCity project administrators to access AWS resources normally limited to TeamCity system administrators."}, {"Reference": "CVE-2022-36349", "Description": "Insecure default variable initialization in BIOS firmware for some Intel(R) NUC Boards and Intel(R) NUC Kits before version MYi30060 may allow an authenticated user to potentially enable denial of service via local access."}, {"Reference": "CVE-2022-4224", "Description": "In multiple products of CODESYS v3 in multiple versions a remote low privileged user could utilize this vulnerability to read and modify system files and OS resources or DoS the device."}]}
{"ID": "454", "Name": "External Initialization of Trusted Variables or Data Stores", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product initializes critical internal variables or data stores using inputs that can be modified by untrusted actors.", "ExtendedDescription": "A product system should be reluctant to trust variables that have been initialized outside of its trust boundary, especially if they are initialized by users. The variables may have been initialized incorrectly. If an attacker can initialize the variable, then they can influence what the vulnerable system will do.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1419", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanAlsoBe", "CweID": "456", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "PHP", "Prevalence": "Sometimes"}, {"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Modify Application Data"], "Note": "An attacker could gain access to and modify sensitive data or system information."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "A product system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking (e.g. input validation) is performed when relying on input from outside a trust boundary."}, {"Phase": ["Architecture and Design"], "Description": "Avoid any external control of variables. If necessary, restrict the variables that can be modified using an allowlist, and use a different namespace or naming convention if possible."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the Java example below, a system property controls the debug level of the application."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tint debugLevel = Integer.getInteger(\"com.domain.application.debugLevel\").intValue();\n```"}, {"BodyText": "If an attacker is able to modify the system property, then it may be possible to coax the application into divulging sensitive information by virtue of the fact that additional debug information is printed/exposed as the debug level increases."}]}, {"Entries": [{"IntroText": "This code checks the HTTP POST request for a debug switch, and enables a debug mode if the switch is set."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\t$debugEnabled = false;\n\tif ($_POST[\"debug\"] == \"true\"){\n\t\t$debugEnabled = true;\n\t}\n```\n/.../* \n\t\n\tfunction login($username, $password){\n\t```\n\t\tif($debugEnabled){\n\t\t\techo 'Debug Activated';\n\t\t\tphpinfo();\n\t\t\t$isAdmin = True;\n\t\t\treturn True;\n\t\t}\n\t}\n```"}, {"BodyText": "Any user can activate the debug mode, gaining administrator privileges. An attacker may also use the information printed by the phpinfo() function to further exploit the system. ."}, {"BodyText": "This example also exhibits Information Exposure Through Debug Information (CWE-215)"}]}], "ObservedExamples": [{"Reference": "CVE-2022-43468", "Description": "WordPress module sets internal variables based on external inputs, allowing false reporting of the number of views", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-43468"}, {"Reference": "CVE-2000-0959", "Description": "Does not clear dangerous environment variables, enabling symlink attack.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0959"}, {"Reference": "CVE-2001-0033", "Description": "Specify alternate configuration directory in environment variable, enabling untrusted path.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0033"}, {"Reference": "CVE-2001-0872", "Description": "Dangerous environment variable not cleansed.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0872"}, {"Reference": "CVE-2001-0084", "Description": "Specify arbitrary modules using environment variable.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0084"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "Overlaps Missing variable initialization, especially in PHP."}, {"Type": "Applicable Platform", "Note": "\n\nThis is often found in PHP due to register_globals and the common practice of storing library/include files under the web document root so that they are available using a direct request.\n"}], "Top25Examples": [{"Reference": "CVE-2022-43468", "Description": "External initialization of trusted variables or data stores vulnerability exists in WordPress Popular Posts 6.0.5 and earlier, therefore the vulnerable product accepts untrusted external inputs to update certain internal variables. As a result, the number of views for an article may be manipulated through a crafted input."}]}
{"ID": "455", "Name": "Non-exit on Failed Initialization", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product does not exit or otherwise modify its operation when security-relevant errors occur during initialization, such as when a configuration file has a format error or a hardware security module (HSM) cannot be activated, which can cause the product to execute in a less secure fashion than intended by the administrator.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "665", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "705", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "636", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Modify Application Data", "Alter Execution Logic"], "Note": "The application could be placed in an insecure state that may allow an attacker to modify sensitive data or allow unintended logic to be executed."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Follow the principle of failing securely when an error occurs. The system should enter a state where it is not vulnerable and will not display sensitive error messages to a potential attacker."}], "DemonstrativeExamples": [{"ID": "DX-54", "Entries": [{"IntroText": "The following code intends to limit certain operations to the administrator only."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\t$username = GetCurrentUser();\n\t$state = GetStateData($username);\n\tif (defined($state)) {\n\t\t$uid = ExtractUserID($state);\n\t}\n```\n# do stuff* \n\tif ($uid == 0) {\n\t```\n\t\tDoAdminThings();\n\t}\n```"}, {"BodyText": "If the application is unable to extract the state information - say, due to a database timeout - then the $uid variable will not be explicitly set by the programmer. This will cause $uid to be regarded as equivalent to \"0\" in the conditional, allowing the original user to perform administrator actions. Even if the attacker cannot directly influence the state data, unexpected errors could cause incorrect privileges to be assigned to a user just by accident."}]}], "ObservedExamples": [{"Reference": "CVE-2005-1345", "Description": "Product does not trigger a fatal error if missing or invalid ACLs are in a configuration file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1345"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "Under-studied. These issues are not frequently reported, and it is difficult to find published examples."}]}
{"ID": "456", "Name": "Missing Initialization of a Variable", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not initialize critical variables, which causes the execution environment to use unexpected values.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "909", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "665", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "665", "ViewID": "1340", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "89", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "120", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "98", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "457", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Unexpected State", "Quality Degradation", "Varies by Context"], "Note": "The uninitialized data may be invalid, causing logic errors within the program. In some cases, this could result in a security problem."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Check that critical variables are initialized."}, {"Phase": ["Testing"], "Description": "Use a static analysis tool to spot non-initialized variables."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This function attempts to extract a pair of numbers from a user-supplied string."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid parse_data(char *untrusted_input){\n\t\t\tint m, n, error;\n\t\t\terror = sscanf(untrusted_input, \"%d:%d\", &m, &n);\n\t\t\tif ( EOF == error ){\n\t\t\t\tdie(\"Did not specify integer value. Die evil hacker!\\n\");\n\t\t\t}\n```\n/* proceed assuming n and m are initialized correctly */* \n\t\t\t}"}, {"BodyText": "This code attempts to extract two integer values out of a formatted, user-supplied input. However, if an attacker were to provide an input of the form:"}, {"Nature": "Attack", "ExampleCode": "```\n\t123:\n```"}, {"BodyText": "then only the m variable will be initialized. Subsequent use of n may result in the use of an uninitialized variable (CWE-457)."}]}, {"Entries": [{"IntroText": "Here, an uninitialized field in a Java class is used in a seldom-called method, which would cause a NullPointerException to be thrown."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tprivate User user;\n\tpublic void someMethod() {\n```\n// Do something interesting.* \n\t\t\t...\n\t\t\t\n\t\t\t\n\t\t\t *// Throws NPE if user hasn't been properly initialized.* \n\t\t\tString username = user.getName();}"}]}, {"Entries": [{"IntroText": "This code first authenticates a user, then allows a delete command if the user is an administrator."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\tif (authenticate($username,$password) && setAdmin($username)){\n\t\t$isAdmin = true;\n\t}\n```\n/.../* \n\t\n\tif ($isAdmin){\n\t```\n\t\tdeleteUser($userToDelete);\n\t}\n```"}, {"BodyText": "The $isAdmin variable is set to true if the user is an admin, but is uninitialized otherwise. If PHP's register_globals feature is enabled, an attacker can set uninitialized variables like $isAdmin to arbitrary values, in this case gaining administrator privileges by setting $isAdmin to true."}]}, {"Entries": [{"IntroText": "In the following Java code the BankManager class uses the user variable of the class User to allow authorized users to perform bank manager tasks. The user variable is initialized within the method setUser that retrieves the User from the User database. The user is then authenticated as unauthorized user through the method authenticateUser."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class BankManager {\n```\n// user allowed to perform bank manager tasks* \n\t\t\tprivate User user = null;\n\t\t\tprivate boolean isUserAuthentic = false;\n\t\t\t\n\t\t\t\n\t\t\t *// constructor for BankManager class* \n\t\t\tpublic BankManager() {\n\t\t\t```\n\t\t\t\t...\n\t\t\t}\n```\n// retrieve user from database of users* \n\t\t\tpublic User getUserFromUserDatabase(String username){\n\t\t\t```\n\t\t\t\t...\n\t\t\t}\n```\n// set user variable using username* \n\t\t\tpublic void setUser(String username) {\n\t\t\t```\n\t\t\t\tthis.user = getUserFromUserDatabase(username);\n\t\t\t}\n```\n// authenticate user* \n\t\t\tpublic boolean authenticateUser(String username, String password) {\n\t\t\t```\n\t\t\t\tif (username.equals(user.getUsername()) && password.equals(user.getPassword())) {\n\t\t\t\t\tisUserAuthentic = true;\n\t\t\t\t}\n\t\t\t\treturn isUserAuthentic;\n\t\t\t}\n```\n// methods for performing bank manager tasks* \n\t\t\t...}"}, {"BodyText": "However, if the method setUser is not called before authenticateUser then the user variable will not have been initialized and will result in a NullPointerException. The code should verify that the user variable has been initialized before it is used, as in the following code."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tpublic class BankManager {\n```\n// user allowed to perform bank manager tasks* \n\t\t\tprivate User user = null;\n\t\t\tprivate boolean isUserAuthentic = false;\n\t\t\t\n\t\t\t\n\t\t\t *// constructor for BankManager class* \n\t\t\tpublic BankManager(String username) {\n\t\t\t```\n\t\t\t\tuser = getUserFromUserDatabase(username);\n\t\t\t}\n```\n// retrieve user from database of users* \n\t\t\tpublic User getUserFromUserDatabase(String username) {...}\n\t\t\t\n\t\t\t\n\t\t\t *// authenticate user* \n\t\t\tpublic boolean authenticateUser(String username, String password) {\n\t\t\t```\n\t\t\t\t\tif (user == null) {\n\t\t\t\t\t\tSystem.out.println(\"Cannot find user \" + username);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (password.equals(user.getPassword())) {\n\t\t\t\t\t\t\tisUserAuthentic = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn isUserAuthentic;\n\t\t\t}\n```\n// methods for performing bank manager tasks* \n\t\t\t\t\t...\n\t\t\t}"}]}, {"ID": "DX-144", "Entries": [{"IntroText": "This example will leave test_string in an unknown condition when i is the same value as err_val, because test_string is not initialized (CWE-456). Depending on where this code segment appears (e.g. within a function body), test_string might be random if it is stored on the heap or stack. If the variable is declared in static memory, it might be zero or NULL. Compiler optimization might contribute to the unpredictability of this address."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "char *test_string;\n if (i != err_val)\n {\n\n```\n\ttest_string = \"Hello World!\";\n }\n printf(\"%s\", test_string);\n```"}, {"BodyText": "When the printf() is reached, test_string might be an unexpected address, so the printf might print junk strings (CWE-457).\n\n\n To fix this code, there are a couple approaches to making sure that test_string has been properly set once it reaches the printf().\n\n\nOne solution would be to set test_string to an acceptable default before the conditional:"}, {"Nature": "Good", "Language": "C", "ExampleCode": "char *test_string = \"Done at the beginning\";\n if (i != err_val)\n {\n\n```\n\ttest_string = \"Hello World!\";\n }\n printf(\"%s\", test_string);\n```"}, {"BodyText": "Another solution is to ensure that each branch of the conditional - including the default/else branch - could ensure that test_string is set:"}, {"Nature": "Good", "Language": "C", "ExampleCode": "char *test_string;\n if (i != err_val)\n {\n\n```\n\ttest_string = \"Hello World!\";\n }\n else {\n\ttest_string = \"Done on the other side!\";\n }\n printf(\"%s\", test_string);\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2020-6078", "Description": "Chain: The return value of a function returning a pointer is not checked for success (CWE-252) resulting in the later use of an uninitialized variable (CWE-456) and a null pointer dereference (CWE-476)", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-6078"}, {"Reference": "CVE-2009-2692", "Description": "Chain: Use of an unimplemented network socket operation pointing to an uninitialized handler function (CWE-456) causes a crash because of a null pointer dereference (CWE-476).", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2692"}, {"Reference": "CVE-2020-20739", "Description": "A variable that has its value set in a conditional statement is sometimes used when the conditional fails, sometimes causing data leakage", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-20739"}, {"Reference": "CVE-2005-2978", "Description": "Product uses uninitialized variables for size and index, leading to resultant buffer overflow.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2978"}, {"Reference": "CVE-2005-2109", "Description": "Internal variable in PHP application is not initialized, allowing external modification.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2109"}, {"Reference": "CVE-2005-2193", "Description": "Array variable not initialized in PHP application, leading to resultant SQL injection.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2193"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This weakness is a major factor in a number of resultant weaknesses, especially in web applications that allow global variable initialization (such as PHP) with libraries that can be directly requested."}, {"Type": "Research Gap", "Note": "It is highly likely that a large number of resultant weaknesses have missing initialization as a primary factor, but researcher reports generally do not provide this level of detail."}], "Top25Examples": [{"Reference": "CVE-2021-22482", "Description": "There is an Uninitialized variable vulnerability in Huawei Smartphone.Successful exploitation of this vulnerability may cause transmission of invalid data."}, {"Reference": "CVE-2022-22704", "Description": "The zabbix-agent2 package before 5.4.9-r1 for Alpine Linux sometimes allows privilege escalation to root because the design incorrectly expected that systemd would (in effect) determine part of the configuration."}]}
{"ID": "457", "Name": "Use of Uninitialized Variable", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The code uses a variable that has not been initialized, leading to unpredictable or unintended results.", "ExtendedDescription": "In some languages such as C and C++, stack variables are not initialized by default. They generally contain junk data with the contents of stack memory before the function was invoked. An attacker can sometimes control or read these contents. In other languages or conditions, a variable that is not explicitly initialized can be given a default value that has security implications, depending on the logic of the program. The presence of an uninitialized variable can sometimes indicate a typographic error in the code.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "908", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "665", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "665", "ViewID": "1340", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Sometimes"}, {"Type": "Language", "Name": "C++", "Prevalence": "Sometimes"}, {"Type": "Language", "Name": "Perl", "Prevalence": "Often"}, {"Type": "Language", "Name": "PHP", "Prevalence": "Often"}, {"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "In C, using an uninitialized char * in some string libraries will return incorrect results, as the libraries expect the null terminator to always be at the end of a string, even if the string is empty."}], "CommonConsequences": [{"Scope": ["Availability", "Integrity", "Other"], "Impact": ["Other"], "Note": "Initial variables usually contain junk, which can not be trusted for consistency. This can lead to denial of service conditions, or modify control flow in unexpected ways. In some cases, an attacker can \"pre-initialize\" the variable using previous actions, which might enable code execution. This can cause a race condition if a lock variable check passes when it should not."}, {"Scope": ["Authorization", "Other"], "Impact": ["Other"], "Note": "Strings that are not initialized are especially dangerous, since many functions expect a null at the end -- and only at the end -- of a string."}], "DetectionMethods": [{"DetectionMethodID": "DM-13", "Method": "Fuzzing", "Description": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.", "Effectiveness": "High"}, {"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Strategy": "Attack Surface Reduction", "Description": "Assign all variables to an initial value."}, {"Phase": ["Build and Compilation"], "Strategy": "Compilation or Build Hardening", "Description": "Most compilers will complain about the use of uninitialized variables if warnings are turned on."}, {"Phase": ["Implementation", "Operation"], "Description": "When using a language that does not require explicit declaration of variables, run or compile the software in a mode that reports undeclared or unknown variables. This may indicate the presence of a typographic error in the variable's name."}, {"Phase": ["Requirements"], "Description": "The choice could be made to use a language that is not susceptible to these issues."}, {"Phase": ["Architecture and Design"], "Description": "Mitigating technologies such as safe string libraries and container abstractions could be introduced."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This code prints a greeting using information stored in a POST request:"}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\tif (isset($_POST['names'])) {\n\t\t$nameArray = $_POST['names'];\n\t}\n\techo \"Hello \" . $nameArray['first'];\n```"}, {"BodyText": "This code checks if the POST array 'names' is set before assigning it to the $nameArray variable. However, if the array is not in the POST request, $nameArray will remain uninitialized. This will cause an error when the array is accessed to print the greeting message, which could lead to further exploit."}]}, {"Entries": [{"IntroText": "The following switch statement is intended to set the values of the variables aN and bN before they are used:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint aN, Bn;\n\tswitch (ctl) {\n\t\t\tcase -1:\n\t\t\t\taN = 0;\n\t\t\t\tbN = 0;\n\t\t\t\tbreak;\n\t\t\tcase 0:\n\t\t\t\taN = i;\n\t\t\t\tbN = -i;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\taN = i + NEXT_SZ;\n\t\t\t\tbN = i - NEXT_SZ;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\taN = -1;\n\t\t\t\taN = -1;\n\t\t\t\tbreak;\n\t}\n\trepaint(aN, bN);\n```"}, {"BodyText": "In the default case of the switch statement, the programmer has accidentally set the value of aN twice. As a result, bN will have an undefined value. Most uninitialized variable issues result in general software reliability problems, but if attackers can intentionally trigger the use of an uninitialized variable, they might be able to launch a denial of service attack by crashing the program. Under the right circumstances, an attacker may be able to control the value of an uninitialized variable by affecting the values on the stack prior to the invocation of the function."}]}, {"ID": "DX-144", "Entries": [{"IntroText": "This example will leave test_string in an unknown condition when i is the same value as err_val, because test_string is not initialized (CWE-456). Depending on where this code segment appears (e.g. within a function body), test_string might be random if it is stored on the heap or stack. If the variable is declared in static memory, it might be zero or NULL. Compiler optimization might contribute to the unpredictability of this address."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "char *test_string;\n if (i != err_val)\n {\n\n```\n\ttest_string = \"Hello World!\";\n }\n printf(\"%s\", test_string);\n```"}, {"BodyText": "When the printf() is reached, test_string might be an unexpected address, so the printf might print junk strings (CWE-457).\n\n\n To fix this code, there are a couple approaches to making sure that test_string has been properly set once it reaches the printf().\n\n\nOne solution would be to set test_string to an acceptable default before the conditional:"}, {"Nature": "Good", "Language": "C", "ExampleCode": "char *test_string = \"Done at the beginning\";\n if (i != err_val)\n {\n\n```\n\ttest_string = \"Hello World!\";\n }\n printf(\"%s\", test_string);\n```"}, {"BodyText": "Another solution is to ensure that each branch of the conditional - including the default/else branch - could ensure that test_string is set:"}, {"Nature": "Good", "Language": "C", "ExampleCode": "char *test_string;\n if (i != err_val)\n {\n\n```\n\ttest_string = \"Hello World!\";\n }\n else {\n\ttest_string = \"Done on the other side!\";\n }\n printf(\"%s\", test_string);\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2019-15900", "Description": "Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-15900"}, {"Reference": "CVE-2008-3688", "Description": "Chain: A denial of service may be caused by an uninitialized variable (CWE-457) allowing an infinite loop (CWE-835) resulting from a connection to an unresponsive server.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3688"}, {"Reference": "CVE-2008-0081", "Description": "Uninitialized variable leads to code execution in popular desktop application.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0081"}, {"Reference": "CVE-2007-4682", "Description": "Crafted input triggers dereference of an uninitialized object pointer.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-4682"}, {"Reference": "CVE-2007-3468", "Description": "Crafted audio file triggers crash when an uninitialized variable is used.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-3468"}, {"Reference": "CVE-2007-2728", "Description": "Uninitialized random seed variable used.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-2728"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-46154", "Description": "A vulnerability has been identified in Simcenter Femap V2020.2 (All versions), Simcenter Femap V2021.1 (All versions). Affected application contains a stack based buffer overflow vulnerability while parsing NEU files. This could allow an attacker to execute code in the context of the current process. (ZDI-CAN-14646, ZDI-CAN-14679, ZDI-CAN-15084, ZDI-CAN-15304)"}, {"Reference": "CVE-2022-31741", "Description": "A crafted CMS message could have been processed incorrectly, leading to an invalid memory read, and potentially further memory corruption. This vulnerability affects Thunderbird < 91.10, Firefox < 101, and Firefox ESR < 91.10."}, {"Reference": "CVE-2021-35991", "Description": "Adobe Bridge version 11.0.2 (and earlier) is affected by an Access of Uninitialized Pointer vulnerability when parsing a specially crafted file. An unauthenticated attacker could leverage this vulnerability to disclose arbitrary memory information in the context of the current user. Exploitation of this issue requires user interaction in that a victim must open a malicious file."}, {"Reference": "CVE-2021-36007", "Description": "Adobe Prelude version 10.0 (and earlier) are affected by an uninitialized variable vulnerability when parsing a specially crafted file. An unauthenticated attacker could leverage this vulnerability to disclose arbitrary memory information in the context of the current user. Exploitation of this issue requires user interaction in that a victim must open a malicious file."}, {"Reference": "CVE-2022-28488", "Description": "The function wav_format_write in libwav.c in libwav through 2017-04-20 has an Use of Uninitialized Variable vulnerability."}, {"Reference": "CVE-2022-31026", "Description": "Trilogy is a client library for MySQL. When authenticating, a malicious server could return a specially crafted authentication packet, causing the client to read and return up to 12 bytes of data from an uninitialized variable in stack memory. Users of the trilogy gem should upgrade to version 2.1.1 This issue can be avoided by only connecting to trusted servers."}, {"Reference": "CVE-2022-34390", "Description": "Dell BIOS contains a use of uninitialized variable vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution in SMRAM."}, {"Reference": "CVE-2022-47012", "Description": "Use of uninitialized variable in function gen_eth_recv in GNS3 dynamips 0.2.21."}, {"Reference": "CVE-2022-40768", "Description": "drivers/scsi/stex.c in the Linux kernel through 5.19.9 allows local users to obtain sensitive information from kernel memory because stex_queuecommand_lck lacks a memset for the PASSTHRU_CMD case."}]}
{"ID": "458", "Name": "DEPRECATED: Incorrect Initialization", "Abstraction": "Base", "Structure": "Simple", "Status": "Deprecated", "Description": "This weakness has been deprecated because its name and description did not match. The description duplicated CWE-454, while the name suggested a more abstract initialization problem. Please refer to CWE-665 for the more abstract problem.", "MappingNotes": {"Usage": "Prohibited", "Rationale": "This CWE has been deprecated.", "Comments": "CWE-665 or its descendants may be appropriate.", "Reasons": ["Deprecated"]}}
{"ID": "459", "Name": "Incomplete Cleanup", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product does not properly \"clean up\" and remove temporary or supporting resources after they have been used.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "404", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "404", "ViewID": "1003", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Insufficient Cleanup"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other", "Confidentiality", "Integrity"], "Impact": ["Other", "Read Application Data", "Modify Application Data", "DoS: Resource Consumption (Other)"], "Note": "It is possible to overflow the number of temporary files because directories typically have limits on the number of files allowed. This could create a denial of service problem."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "Temporary files and other supporting resources should be deleted/released immediately after they are no longer needed."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Stream resources in a Java application should be released in a finally block, otherwise an exception thrown before the call to close() would result in an unreleased I/O resource. In the example below, the close() method is called in the try block (incorrect)."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\ttry {\n\t\tInputStream is = new FileInputStream(path);\n\t\tbyte b[] = new byte[is.available()];\n\t\tis.read(b);\n\t\tis.close();\n\t} catch (Throwable t) {\n\t\tlog.error(\"Something bad happened: \" + t.getMessage());\n\t}\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2000-0552", "Description": "World-readable temporary file not deleted after use.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0552"}, {"Reference": "CVE-2005-2293", "Description": "Temporary file not deleted after use, leaking database usernames and passwords.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2293"}, {"Reference": "CVE-2002-0788", "Description": "Interaction error creates a temporary file that can not be deleted due to strong permissions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0788"}, {"Reference": "CVE-2002-2066", "Description": "Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak).", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2066"}, {"Reference": "CVE-2002-2067", "Description": "Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak).", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2067"}, {"Reference": "CVE-2002-2068", "Description": "Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak).", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2068"}, {"Reference": "CVE-2002-2069", "Description": "Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak).", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2069"}, {"Reference": "CVE-2002-2070", "Description": "Alternate data streams for NTFS files are not cleared when files are wiped (alternate channel / infoleak).", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2070"}, {"Reference": "CVE-2005-1744", "Description": "Users not logged out when application is restarted after security-relevant changes were made.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1744"}], "FunctionalAreas": ["File Processing"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "CWE-459 is a child of CWE-404 because, while CWE-404 covers any type of improper shutdown or release of a resource, CWE-459 deals specifically with a multi-step shutdown process in which a crucial step for \"proper\" cleanup is omitted or impossible. That is, CWE-459 deals specifically with a cleanup or shutdown process that does not successfully remove all potentially sensitive data."}, {"Type": "Relationship", "Note": "Overlaps other categories such as permissions and containment. Concept needs further development. This could be primary (e.g. leading to infoleak) or resultant (e.g. resulting from unhandled error conditions or early termination)."}], "Top25Examples": [{"Reference": "CVE-2022-23035", "Description": "Insufficient cleanup of passed-through device IRQs The management of IRQs associated with physical devices exposed to x86 HVM guests involves an iterative operation in particular when cleaning up after the guest's use of the device. In the case where an interrupt is not quiescent yet at the time this cleanup gets invoked, the cleanup attempt may be scheduled to be retried. When multiple interrupts are involved, this scheduling of a retry may get erroneously skipped. At the same time pointers may get cleared (resulting in a de-reference of NULL) and freed (resulting in a use-after-free), while other code would continue to assume them to be valid."}, {"Reference": "CVE-2022-1473", "Description": "The OPENSSL_LH_flush() function, which empties a hash table, contains a bug that breaks reuse of the memory occuppied by the removed hash table entries. This function is used when decoding certificates or keys. If a long lived process periodically decodes certificates or keys its memory usage will expand without bounds and the process might be terminated by the operating system causing a denial of service. Also traversing the empty hash table entries will take increasingly more time. Typically such long lived processes might be TLS clients or TLS servers configured to accept client certificate authentication. The function was added in the OpenSSL 3.0 version thus older releases are not affected by the issue. Fixed in OpenSSL 3.0.3 (Affected 3.0.0,3.0.1,3.0.2)."}, {"Reference": "CVE-2022-27639", "Description": "Incomplete cleanup in some Intel(R) XMM(TM) 7560 Modem software before version M2_7560_R_01.2146.00 may allow a privileged user to potentially enable escalation of privilege via adjacent access."}, {"Reference": "CVE-2022-29160", "Description": "Nextcloud Android is the Android client for Nextcloud, a self-hosted productivity platform. Prior to version 3.19.0, sensitive tokens, images, and user related details exist after deletion of a user account. This could result in misuse of the former account holder's information. Nextcloud Android version 3.19.0 contains a patch for this issue. There are no known workarounds available."}, {"Reference": "CVE-2022-25664", "Description": "Information disclosure due to exposure of information while GPU reads the data in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Wearables"}]}
{"ID": "46", "Name": "Path Equivalence: 'filename ' (Trailing Space)", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product accepts path input in the form of trailing space ('filedir ') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "41", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "162", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "289", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Modify Files or Directories"]}], "ObservedExamples": [{"Reference": "CVE-2001-0693", "Description": "Source disclosure via trailing encoded space \"%20\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0693"}, {"Reference": "CVE-2001-0778", "Description": "Source disclosure via trailing encoded space \"%20\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0778"}, {"Reference": "CVE-2001-1248", "Description": "Source disclosure via trailing encoded space \"%20\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1248"}, {"Reference": "CVE-2004-0280", "Description": "Source disclosure via trailing encoded space \"%20\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0280"}, {"Reference": "CVE-2004-2213", "Description": "Source disclosure via trailing encoded space \"%20\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2213"}, {"Reference": "CVE-2005-0622", "Description": "Source disclosure via trailing encoded space \"%20\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0622"}, {"Reference": "CVE-2005-1656", "Description": "Source disclosure via trailing encoded space \"%20\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1656"}, {"Reference": "CVE-2002-1603", "Description": "Source disclosure via trailing encoded space \"%20\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1603"}, {"Reference": "CVE-2001-0054", "Description": "Multi-Factor Vulnerability (MFV). directory traversal and other issues in FTP server using Web encodings such as \"%20\"; certain manipulations have unusual side effects.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0054"}, {"Reference": "CVE-2002-1451", "Description": "Trailing space (\"+\" in query string) leads to source code disclosure.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1451"}], "RelatedAttackPatterns": ["649"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "460", "Name": "Improper Cleanup on Thrown Exception", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product does not clean up its state or incorrectly cleans up its state when an exception is thrown, leading to unexpected state or control flow.", "ExtendedDescription": "Often, when functions or loops become complicated, some level of resource cleanup is needed throughout execution. Exceptions can disturb the flow of the code and prevent the necessary cleanup from happening.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "459", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "755", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C#", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Varies by Context"], "Note": "The code could be left in a bad state."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "If one breaks from a loop or function by throwing an exception, make sure that cleanup happens or that you should exit the program. Use throwing exceptions sparsely."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following example demonstrates the weakness."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class foo {\n\t\t\tpublic static final void main( String args[] ) {\n\t\t\t\t\tboolean returnValue;\n\t\t\t\t\treturnValue=doStuff();\n\t\t\t}\n\t\t\tpublic static final boolean doStuff( ) {\n\t\t\t\t\tboolean threadLock;\n\t\t\t\t\tboolean truthvalue=true;\n\t\t\t\t\ttry {\n\t\t\t\t\t\t\twhile(\n```\n//check some condition* \n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t```\n\t\t\t\t\t\t\t\t\tthreadLock=true; //do some stuff to truthvalue\n\t\t\t\t\t\t\t\t\tthreadLock=false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e){\n\t\t\t\t\t\t\tSystem.err.println(\"You did something bad\");\n\t\t\t\t\t\t\tif (something) return truthvalue;\n\t\t\t\t\t}\n\t\t\t\t\treturn truthvalue;\n\t\t\t}\n\t}\n```"}, {"BodyText": "In this case, a thread might be left locked accidentally."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-22150", "Description": "A memory corruption vulnerability exists in the JavaScript engine of Foxit Software\u2019s PDF Reader, version 11.1.0.52543. A specially-crafted PDF document can trigger an exception which is improperly handled, leaving the engine in an invalid state, which can lead to memory corruption and arbitrary code execution. An attacker needs to trick the user to open the malicious file to trigger this vulnerability. Exploitation is also possible if a user visits a specially-crafted, malicious site if the browser plugin extension is enabled."}, {"Reference": "CVE-2022-20253", "Description": "In Bluetooth, there is a possible cleanup failure due to an uncaught exception. This could lead to remote denial of service in Bluetooth with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-224545125"}]}
{"ID": "462", "Name": "Duplicate Key in Associative List (Alist)", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "Duplicate keys in associative lists can lead to non-unique keys being mistaken for an error.", "ExtendedDescription": "A duplicate key entry -- if the alist is designed properly -- could be used as a constant time replace function. However, duplicate key entries could be inserted by mistake. Because of this ambiguity, duplicate key entries in an association list are not recommended and should not be allowed.", "LikelihoodOfExploit": "Low", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "694", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C#", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Quality Degradation", "Varies by Context"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Use a hash table instead of an alist."}, {"Phase": ["Architecture and Design"], "Description": "Use an alist which checks the uniqueness of hash keys with each entry before inserting the entry."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code adds data to a list and then attempts to sort the data."}, {"Nature": "Bad", "Language": "Python", "ExampleCode": "```\n\talist = []\n\twhile (foo()): #now assume there is a string data with a key basename\n\t\tqueue.append(basename,data)\n\t\tqueue.sort()\n```"}, {"BodyText": "Since basename is not necessarily unique, this may not sort how one would like it to be."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "463", "Name": "Deletion of Data Structure Sentinel", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The accidental deletion of a data-structure sentinel can cause serious programming logic problems.", "ExtendedDescription": "Often times data-structure sentinels are used to mark structure of the data structure. A common example of this is the null character at the end of strings. Another common example is linked lists which may contain a sentinel to mark the end of the list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the deletion or modification outside of some wrapper interface which provides safety.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "707", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "464", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability", "Other"], "Impact": ["Other"], "Note": "Generally this error will cause the data structure to not work properly."}, {"Scope": ["Authorization", "Other"], "Impact": ["Other"], "Note": "If a control character, such as NULL is removed, one may cause resource access control problems."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Use an abstraction library to abstract away risky APIs. Not a complete solution."}, {"MitigationID": "MIT-10", "Phase": ["Build and Compilation"], "Strategy": "Compilation or Build Hardening", "Description": "\n\nRun or compile the software using features or extensions that automatically provide a protection mechanism that mitigates or eliminates buffer overflows.\n\n\nFor example, certain compilers and extensions provide automatic buffer overflow detection mechanisms that are built into the compiled code. Examples include the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice.\n", "Effectiveness": "Defense in Depth", "EffectivenessNotes": "This is not necessarily a complete solution, since these mechanisms can only detect certain types of overflows. In addition, an attack could still cause a denial of service, since the typical response is to exit the application."}, {"Phase": ["Operation"], "Description": "Use OS-level preventative functionality. Not a complete solution."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This example creates a null terminated string and prints it contents."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar *foo;\n\tint counter;\n\tfoo=calloc(sizeof(char)*10);\n\tfor (counter=0;counter!=10;counter++) {\n\t\tfoo[counter]='a';\n\tprintf(\"%s\\n\",foo);\n\t}\n```"}, {"BodyText": "The string foo has space for 9 characters and a null terminator, but 10 characters are written to it. As a result, the string foo is not null terminated and calling printf() on it will have unpredictable and possibly dangerous results."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "464", "Name": "Addition of Data Structure Sentinel", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The accidental addition of a data-structure sentinel can cause serious programming logic problems.", "ExtendedDescription": "Data-structure sentinels are often used to mark the structure of data. A common example of this is the null character at the end of strings or a special sentinel to mark the end of a linked list. It is dangerous to allow this type of control data to be easily accessible. Therefore, it is important to protect from the addition or modification of sentinels.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "138", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Modify Application Data"], "Note": "Generally this error will cause the data structure to not work properly by truncating the data."}], "PotentialMitigations": [{"Phase": ["Implementation", "Architecture and Design"], "Description": "Encapsulate the user from interacting with data sentinels. Validate user input to verify that sentinels are not present."}, {"Phase": ["Implementation"], "Description": "Proper error checking can reduce the risk of inadvertently introducing sentinel values into data. For example, if a parsing function fails or encounters an error, it might return a value that is the same as the sentinel."}, {"Phase": ["Architecture and Design"], "Description": "Use an abstraction library to abstract away risky APIs. This is not a complete solution."}, {"Phase": ["Operation"], "Description": "Use OS-level preventative functionality. This is not a complete solution."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following example assigns some character values to a list of characters and prints them each individually, and then as a string. The third character value is intended to be an integer taken from user input and converted to an int."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar *foo;\n\tfoo=malloc(sizeof(char)*5);\n\tfoo[0]='a';\n\tfoo[1]='a';\n\tfoo[2]=atoi(getc(stdin));\n\tfoo[3]='c';\n\tfoo[4]='\\0'\n\tprintf(\"%c %c %c %c %c \\n\",foo[0],foo[1],foo[2],foo[3],foo[4]);\n\tprintf(\"%s\\n\",foo);\n```"}, {"BodyText": "The first print statement will print each character separated by a space. However, if a non-integer is read from stdin by getc, then atoi will not make a conversion and return 0. When foo is printed as a string, the 0 at character foo[2] will act as a NULL terminator and foo[3] will never be printed."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "466", "Name": "Return of Pointer Value Outside of Expected Range", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "A function can return a pointer to memory that is outside of the buffer that the pointer is expected to reference.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "119", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "700", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Memory", "Modify Memory"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry should have a chaining relationship with CWE-119 instead of a parent / child relationship, however the focus of this weakness does not map cleanly to any existing entries in CWE. A new parent is being considered which covers the more generic problem of incorrect return values. There is also an abstract relationship to weaknesses in which one component sends incorrect messages to another component; in this case, one routine is sending an incorrect value to another."}]}
{"ID": "467", "Name": "Use of sizeof() on a Pointer Type", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The code calls sizeof() on a malloced pointer type, which always returns the wordsize/8. This can produce an unexpected result if the programmer intended to determine how much memory has been allocated.", "ExtendedDescription": "The use of sizeof() on a pointer can sometimes generate useful information. An obvious case is to find out the wordsize on a platform. More often than not, the appearance of sizeof(pointer) indicates a bug.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "131", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality"], "Impact": ["Modify Memory", "Read Memory"], "Note": "This error can often cause one to allocate a buffer that is much smaller than what is needed, leading to resultant weaknesses such as buffer overflows."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Use expressions such as \"sizeof(*pointer)\" instead of \"sizeof(pointer)\", unless you intend to run sizeof() on a pointer type to gain some platform independence or if you are allocating a variable on the stack."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Care should be taken to ensure sizeof returns the size of the data structure itself, and not the size of the pointer to the data structure."}, {"BodyText": "In this example, sizeof(foo) returns the size of the pointer."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tdouble *foo;\n\t...\n\tfoo = (double *)malloc(sizeof(foo));\n```"}, {"BodyText": "In this example, sizeof(*foo) returns the size of the data structure and not the size of the pointer."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n\tdouble *foo;\n\t...\n\tfoo = (double *)malloc(sizeof(*foo));\n```"}]}, {"Entries": [{"IntroText": "This example defines a fixed username and password. The AuthenticateUser() function is intended to accept a username and a password from an untrusted user, and check to ensure that it matches the username and password. If the username and password match, AuthenticateUser() is intended to indicate that authentication succeeded."}, {"Nature": "Bad", "ExampleCode": "```\n```\n/* Ignore CWE-259 (hard-coded password) and CWE-309 (use of password system for authentication) for this example. */* \n\t\n\tchar *username = \"admin\";\n\tchar *pass = \"password\";\n\t\n\tint AuthenticateUser(char *inUser, char *inPass) {\n\t```\n\t\t\tprintf(\"Sizeof username = %d\\n\", sizeof(username));\n\t\t\tprintf(\"Sizeof pass = %d\\n\", sizeof(pass));\n\t\t\tif (strncmp(username, inUser, sizeof(username))) {\n\t\t\t\tprintf(\"Auth failure of username using sizeof\\n\");\n\t\t\t\treturn(AUTH_FAIL);\n\t\t\t}\n```\n/* Because of CWE-467, the sizeof returns 4 on many platforms and architectures. */* \n\t\t\t\n\t\t\tif (! strncmp(pass, inPass, sizeof(pass))) {\n\t\t\t```\n\t\t\t\tprintf(\"Auth success of password using sizeof\\n\");\n\t\t\t\treturn(AUTH_SUCCESS);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprintf(\"Auth fail of password using sizeof\\n\");\n\t\t\t\treturn(AUTH_FAIL);\n\t\t\t}\n\t}\n\tint main (int argc, char **argv)\n\t{\n\t\t\tint authResult;\n\t\t\tif (argc < 3) {\n\t\t\t\tExitError(\"Usage: Provide a username and password\");\n\t\t\t}\n\t\t\tauthResult = AuthenticateUser(argv[1], argv[2]);\n\t\t\tif (authResult != AUTH_SUCCESS) {\n\t\t\t\tExitError(\"Authentication failed\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tDoAuthenticatedTask(argv[1]);\n\t\t\t}\n\t}\n```"}, {"BodyText": "In AuthenticateUser(), because sizeof() is applied to a parameter with an array type, the sizeof() call might return 4 on many modern architectures. As a result, the strncmp() call only checks the first four characters of the input password, resulting in a partial comparison (CWE-187), leading to improper authentication (CWE-287)."}, {"BodyText": "Because of the partial comparison, any of these passwords would still cause authentication to succeed for the \"admin\" user:"}, {"Nature": "Attack", "ExampleCode": "```\n\tpass5\n\tpassABCDEFGH\n\tpassWORD\n```"}, {"BodyText": "Because only 4 characters are checked, this significantly reduces the search space for an attacker, making brute force attacks more feasible."}, {"BodyText": "The same problem also applies to the username, so values such as \"adminXYZ\" and \"administrator\" will succeed for the username."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "468", "Name": "Incorrect Pointer Scaling", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "In C and C++, one may often accidentally refer to the wrong memory due to the semantics of when math operations are implicitly scaled.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "682", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "Programmers may try to index from a pointer by adding a number of bytes. This is incorrect because C and C++ implicitly scale the operand by the size of the data type."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Memory", "Modify Memory"], "Note": "Incorrect pointer scaling will often result in buffer overflow conditions. Confidentiality can be compromised if the weakness is in the context of a buffer over-read or under-read."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Use a platform with high-level memory abstractions."}, {"Phase": ["Implementation"], "Description": "Always use array indexing instead of direct pointer manipulation."}, {"Phase": ["Architecture and Design"], "Description": "Use technologies for preventing buffer overflows."}], "DemonstrativeExamples": [{"ID": "DX-55", "Entries": [{"IntroText": "This example attempts to calculate the position of the second byte of a pointer."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint *p = x;\n\tchar * second_char = (char *)(p + 1);\n```"}, {"BodyText": "In this example, second_char is intended to point to the second byte of p. But, adding 1 to p actually adds sizeof(int) to p, giving a result that is incorrect (3 bytes off on 32-bit platforms). If the resulting memory address is read, this could potentially be an information leak. If it is a write, it could be a security-critical write to unauthorized memory-- whether or not it is a buffer overflow. Note that the above code may also be wrong in other ways, particularly in a little endian environment."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "469", "Name": "Use of Pointer Subtraction to Determine Size", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product subtracts one pointer from another in order to determine size, but this calculation can be incorrect if the pointers do not exist in the same memory chunk.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "682", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control", "Integrity", "Confidentiality", "Availability"], "Impact": ["Modify Memory", "Read Memory", "Execute Unauthorized Code or Commands", "Gain Privileges or Assume Identity"], "Note": "There is the potential for arbitrary code execution with privileges of the vulnerable program."}], "DetectionMethods": [{"DetectionMethodID": "DM-13", "Method": "Fuzzing", "Description": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.", "Effectiveness": "High"}, {"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Save an index variable. This is the recommended solution. Rather than subtract pointers from one another, use an index variable of the same size as the pointers in question. Use this variable to \"walk\" from one pointer to the other and calculate the difference. Always validate this number."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following example contains the method size that is used to determine the number of nodes in a linked list. The method is passed a pointer to the head of the linked list."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tstruct node {\n\t\tint data;\n\t\tstruct node* next;\n\t};\n```\n// Returns the number of nodes in a linked list from* \n\t\n\t\n\t *// the given pointer to the head of the list.* \n\tint size(struct node* head) {\n\t```\n\t\tstruct node* current = head;\n\t\tstruct node* tail;\n\t\twhile (current != NULL) {\n\t\t\ttail = current;\n\t\t\tcurrent = current->next;\n\t\t}\n\t\treturn tail - head;\n\t}\n```\n// other methods for manipulating the list* \n\t..."}, {"BodyText": "However, the method creates a pointer that points to the end of the list and uses pointer subtraction to determine the number of nodes in the list by subtracting the tail pointer from the head pointer. There no guarantee that the pointers exist in the same memory area, therefore using pointer subtraction in this way could return incorrect results and allow other unintended behavior. In this example a counter should be used to determine the number of nodes in the list, as shown in the following code."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n\t...\n\tint size(struct node* head) {\n\t\tstruct node* current = head;\n\t\tint count = 0;\n\t\twhile (current != NULL) {\n\t\t\tcount++;\n\t\t\tcurrent = current->next;\n\t\t}\n\t\treturn count;\n\t}\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "47", "Name": "Path Equivalence: ' filename' (Leading Space)", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product accepts path input in the form of leading space (' filedir') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "41", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Modify Files or Directories"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
