{"ID": "1120", "Name": "Excessive Code Complexity", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The code is too complex, as calculated using a well-defined,\n\t\t\t\t\tquantitative measure.", "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n\n\nThis issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}, {"Scope": ["Other"], "Impact": ["Reduce Performance"]}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}}
{"ID": "1121", "Name": "Excessive McCabe Cyclomatic Complexity", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The code contains McCabe cyclomatic complexity that exceeds a\n\tdesirable maximum.", "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1120", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1122", "Name": "Excessive Halstead Complexity", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The code is structured in a way that a Halstead complexity\n\t\t\t\t\tmeasure exceeds a desirable maximum.", "ExtendedDescription": "\n\nA variety of Halstead complexity measures exist, such as program vocabulary size or volume.\n\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1120", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1123", "Name": "Excessive Use of Self-Modifying Code", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses too much self-modifying\n\t\t\t\t\tcode.", "ExtendedDescription": "\n\nThis issue makes it more difficult to understand or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1120", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1124", "Name": "Excessively Deep Nesting", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The code contains a callable or other code grouping in which\n\t\t\t\t\tthe nesting / branching is too deep.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1120", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1125", "Name": "Excessive Attack Surface", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product has an attack surface whose quantitative\n\t\t\t\t\tmeasurement exceeds a desirable maximum.", "ExtendedDescription": "\n\nOriginating from software security, an \"attack surface\" measure typically reflects the number of input points and output points that can be utilized by an untrusted party, i.e. a potential attacker. A larger attack surface provides more places to attack, and more opportunities for developers to introduce weaknesses. In some cases, this measure may reflect other aspects of quality besides security; e.g., a product with many inputs and outputs may require a large number of tests in order to improve code coverage.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1120", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}, "Top25Examples": [{"Reference": "CVE-2022-2037", "Description": "Excessive Attack Surface in GitHub repository tooljet/tooljet prior to v1.16.0."}]}
{"ID": "1126", "Name": "Declaration of Variable with Unnecessarily Wide Scope", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The source code declares a variable in one scope, but the\n\t\t\t\t\tvariable is only used within a narrower scope.", "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1127", "Name": "Compilation with Insufficient Warnings or Errors", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The code is compiled without sufficient warnings enabled, which\n\t\t\t\t\tmay prevent the detection of subtle bugs or quality\n\t\t\t\t\tissues.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "ModesOfIntroduction": [{"Phase": "Build and Compilation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "113", "Name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product receives data from an HTTP agent/component (e.g., web server, proxy, browser, etc.), but it does not neutralize or incorrectly neutralizes CR and LF characters before the data is included in outgoing HTTP headers.", "ExtendedDescription": "\n\n HTTP agents or components may include a web server, load balancer, reverse proxy, web caching proxy, application firewall, web browser, etc. Regardless of the role, they are expected to maintain coherent, consistent HTTP communication state across all components. However, including unexpected data in an HTTP header allows an attacker to specify the entirety of the HTTP message that is rendered by the client HTTP agent (e.g., web browser) or back-end HTTP agent (e.g., web server), whether the message is part of a request or a response. \n\n\nWhen an HTTP request contains unexpected CR and LF characters, the server may respond with an output stream that is interpreted as \"splitting\" the stream into two different HTTP messages instead of one. CR is carriage return, also given by %0d or \\r, and LF is line feed, also given by %0a or \\n.\n\n\nIn addition to CR and LF characters, other valid/RFC compliant special characters and unique character encodings can be utilized, such as HT (horizontal tab, also given by %09 or \\t) and SP (space, also given as + sign or %20).\n\n\nThese types of unvalidated and unexpected data in HTTP message headers allow an attacker to control the second \"split\" message to mount attacks such as server-side request forgery, cross-site scripting, and cache poisoning attacks.\n\n\nHTTP response splitting weaknesses may be present when:\n\n\n  1. Data enters a web application through an untrusted source, most frequently an HTTP request.\n\n  1. The data is included in an HTTP response header sent to a web user without neutralizing malicious characters that can be interpreted as separator characters for headers.\n\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "93", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "79", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "700", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "436", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Web Based", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "HTTP Request Splitting"}, {"Term": "HTTP Response Splitting"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Access Control"], "Impact": ["Modify Application Data", "Gain Privileges or Assume Identity"], "Note": "CR and LF characters in an HTTP header may give attackers control of the remaining headers and body of the message that the application intends to send/receive, as well as allowing them to create additional messages entirely under their control."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Construct HTTP headers very carefully, avoiding the use of non-validated input data."}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. If an input does not strictly conform to specifications, reject it or transform it into something that conforms.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-30", "Phase": ["Implementation"], "Strategy": "Output Encoding", "Description": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component."}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code segment reads the name of the author of a weblog entry, author, from an HTTP request and sets it in a cookie header of an HTTP response."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tString author = request.getParameter(AUTHOR_PARAM);\n\t...\n\tCookie cookie = new Cookie(\"author\", author);\n\tcookie.setMaxAge(cookieExpiration);\n\tresponse.addCookie(cookie);\n```"}, {"BodyText": "Assuming a string consisting of standard alpha-numeric characters, such as \"Jane Smith\", is submitted in the request the HTTP response including this cookie might take the following form:"}, {"Nature": "Result", "ExampleCode": "```\n\tHTTP/1.1 200 OK\n\t...\n\tSet-Cookie: author=Jane Smith\n\t...\n```"}, {"BodyText": "However, because the value of the cookie is composed of unvalidated user input, the response will only maintain this form if the value submitted for AUTHOR_PARAM does not contain any CR and LF characters. If an attacker submits a malicious string, such as"}, {"Nature": "Attack", "ExampleCode": "```\n\tWiley Hacker\\r\\nHTTP/1.1 200 OK\\r\\n\n```"}, {"BodyText": "then the HTTP response would be split into two responses of the following form:"}, {"Nature": "Result", "ExampleCode": "```\n\tHTTP/1.1 200 OK\n\t...\n\tSet-Cookie: author=Wiley Hacker\n\tHTTP/1.1 200 OK\n\t...\n```"}, {"BodyText": "The second response is completely controlled by the attacker and can be constructed with any header and body content desired. The ability to construct arbitrary HTTP responses permits a variety of resulting attacks, including:"}, {"BodyText": "- cross-user defacement\n\n  - web and browser cache poisoning\n\n  - cross-site scripting\n\n  - page hijacking"}]}, {"Entries": [{"IntroText": "An attacker can make a single request to a vulnerable server that will cause the server to create two responses, the second of which may be misinterpreted as a response to a different request, possibly one made by another user sharing the same TCP connection with the server."}, {"BodyText": "Cross-User Defacement can be accomplished by convincing the user to submit the malicious request themselves, or remotely in situations where the attacker and the user share a common TCP connection to the server, such as a shared proxy server.\n\n\n  -  In the best case, an attacker can leverage this ability to convince users that the application has been hacked, causing users to lose confidence in the security of the application. \n\n  -  In the worst case, an attacker may provide specially crafted content designed to mimic the behavior of the application but redirect private information, such as account numbers and passwords, back to the attacker."}]}, {"Entries": [{"IntroText": "The impact of a maliciously constructed response can be magnified if it is cached, either by a web cache used by multiple users or even the browser cache of a single user."}, {"BodyText": "Cache Poisoning: if a response is cached in a shared web cache, such as those commonly found in proxy servers, then all users of that cache will continue receive the malicious content until the cache entry is purged. Similarly, if the response is cached in the browser of an individual user, then that user will continue to receive the malicious content until the cache entry is purged, although the user of the local browser instance will be affected."}]}, {"Entries": [{"IntroText": "Once attackers have control of the responses sent by an application, they have a choice of a variety of malicious content to provide users."}, {"BodyText": "Cross-Site Scripting: cross-site scripting is common form of attack where malicious JavaScript or other code included in a response is executed in the user's browser.\n\n\nThe variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site.\n\n\nThe most common and dangerous attack vector against users of a vulnerable application uses JavaScript to transmit session and authentication information back to the attacker who can then take complete control of the victim's account."}]}, {"Entries": [{"IntroText": "In addition to using a vulnerable application to send malicious content to a user, the same weakness can also be leveraged to redirect sensitive content generated by the server to the attacker instead of the intended user."}, {"BodyText": "Page Hijacking: by submitting a request that results in two responses, the intended response from the server and the response generated by the attacker, an attacker can cause an intermediate node, such as a shared proxy server, to misdirect a response generated by the server to the attacker instead of the intended user.\n\n\nBecause the request made by the attacker generates two responses, the first is interpreted as a response to the attacker's request, while the second remains in limbo. When the user makes a legitimate request through the same TCP connection, the attacker's request is already waiting and is interpreted as a response to the victim's request. The attacker then sends a second request to the server, to which the proxy server responds with the server generated request intended for the victim, thereby compromising any sensitive information in the headers or body of the response intended for the victim."}]}], "ObservedExamples": [{"Reference": "CVE-2020-15811", "Description": "Chain: Proxy uses a substring search instead of parsing the Transfer-Encoding header (CWE-697), allowing request splitting (CWE-113) and cache poisoning", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-15811"}, {"Reference": "CVE-2021-41084", "Description": "Scala-based HTTP interface allows request splitting and response splitting through header names, header values, status reasons, and URIs", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-41084"}, {"Reference": "CVE-2018-12116", "Description": "Javascript-based framework allows request splitting through a path option of an HTTP request", "Link": "https://www.cve.org/CVERecord?id=CVE-2018-12116"}, {"Reference": "CVE-2004-2146", "Description": "Application accepts CRLF in an object ID, allowing HTTP response splitting.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2146"}, {"Reference": "CVE-2004-1656", "Description": "Shopping cart allows HTTP response splitting to perform HTML injection via CRLF in a parameter for a url", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1656"}, {"Reference": "CVE-2005-2060", "Description": "Bulletin board allows response splitting via CRLF in parameter.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2060"}, {"Reference": "CVE-2004-2512", "Description": "Response splitting via CRLF in PHPSESSID.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2512"}, {"Reference": "CVE-2005-1951", "Description": "e-commerce app allows HTTP response splitting using CRLF in object id parameters", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1951"}], "RelatedAttackPatterns": ["105", "31", "34", "85"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-33621", "Description": "The cgi gem before 0.1.0.2, 0.2.x before 0.2.2, and 0.3.x before 0.3.5 for Ruby allows HTTP response splitting. This is relevant to applications that use untrusted user input either to generate an HTTP response or to create a CGI::Cookie object."}, {"Reference": "CVE-2021-40336", "Description": "A vulnerability exists in the http web interface where the web interface does not validate data in an HTTP header. This causes a possible HTTP response splitting, which if exploited could lead an attacker to channel down harmful code into the user\u2019s web browser, such as to steal the session cookies. Thus, an attacker who successfully makes an MSM user who has already established a session to MSM web interface clicks a forged link to the MSM web interface, e.g., the link is sent per E-Mail, could trick the user into downloading malicious software onto his computer. This issue affects: Hitachi Energy MSM V2.2 and prior versions."}, {"Reference": "CVE-2021-41437", "Description": "An HTTP response splitting attack in web application in ASUS RT-AX88U before v3.0.0.4.388.20558 allows an attacker to craft a specific URL that if an authenticated victim visits it, the URL will give access to the cloud storage of the attacker."}, {"Reference": "CVE-2022-20772", "Description": "A vulnerability in Cisco Email Security Appliance (ESA) and Cisco Secure Email and Web Manager could allow an unauthenticated, remote attacker to conduct an HTTP response splitting attack. This vulnerability is due to the failure of the application or its environment to properly sanitize input values. An attacker could exploit this vulnerability by injecting malicious HTTP headers, controlling the response body, or splitting the response into multiple responses."}, {"Reference": "CVE-2022-35507", "Description": "A response-header CRLF injection vulnerability in the Proxmox Virtual Environment (PVE) and Proxmox Mail Gateway (PMG) web interface allows a remote attacker to set cookies for a victim's browser that are longer than the server expects, causing a client-side DoS. This affects Chromium-based browsers because they allow injection of response headers with %0d. This is fixed in pve-http-server 4.1-3."}, {"Reference": "CVE-2022-37240", "Description": "MDaemon Technologies SecurityGateway for Email Servers 8.5.2 is vulnerable to HTTP Response splitting via the format parameter."}, {"Reference": "CVE-2022-37242", "Description": "MDaemon Technologies SecurityGateway for Email Servers 8.5.2, is vulnerable to HTTP Response splitting via the data parameter."}, {"Reference": "CVE-2022-37953", "Description": "An HTTP response splitting vulnerability exists in the AM Gateway Challenge-Response dialog of WorkstationST (<v07.09.15) and could allow an attacker to compromise a victim's browser/session. WorkstationST is only deployed in specific, controlled environments rendering attack complexity significantly higher than if the attack were conducted on the software in isolation. WorkstationST v07.09.15 can be found in ControlST v07.09.07 SP8 and greater."}, {"Reference": "CVE-2022-42471", "Description": "An improper neutralization of CRLF sequences in HTTP headers ('HTTP Response Splitting') vulnerability [CWE-113] In FortiWeb version 7.0.0 through 7.0.2, FortiWeb version 6.4.0 through 6.4.2, FortiWeb version 6.3.6 through 6.3.20 may allow an authenticated and remote attacker to inject arbitrary headers."}, {"Reference": "CVE-2022-42472", "Description": "A improper neutralization of crlf sequences in http headers ('http response splitting') in Fortinet FortiOS versions 7.2.0 through 7.2.2, 7.0.0 through 7.0.8, 6.4.0 through 6.4.11, 6.2.0 through 6.2.12, 6.0.0 through 6.0.16, FortiProxy 7.2.0 through 7.2.1, 7.0.0 through 7.0.7, 2.0.0 through 2.0.10, 1.2.0 through 1.2.13, 1.1.0 through 1.1.6 may allow an authenticated and remote attacker to perform an HTTP request splitting attack which gives attackers control of the remaining headers and body of the response."}, {"Reference": "CVE-2022-47052", "Description": "The web interface of the 'Nighthawk R6220 AC1200 Smart Wi-Fi Router' is vulnerable to a CRLF Injection attack that can be leveraged to perform Reflected XSS and HTML Injection. A malicious unauthenticated attacker can exploit this vulnerability using a specially crafted URL. This affects firmware versions: V1.1.0.112_1.0.1, V1.1.0.114_1.0.1."}, {"Reference": "CVE-2022-3215", "Description": "NIOHTTP1 and projects using it for generating HTTP responses can be subject to a HTTP Response Injection attack. This occurs when a HTTP/1.1 server accepts user generated input from an incoming request and reflects it into a HTTP/1.1 response header in some form. A malicious user can add newlines to their input (usually in encoded form) and \"inject\" those newlines into the returned HTTP response. This capability allows users to work around security headers and HTTP/1.1 framing headers by injecting entirely false responses or other new headers. The injected false responses may also be treated as the response to subsequent requests, which can lead to XSS, cache poisoning, and a number of other flaws. This issue was resolved by adding validation to the HTTPHeaders type, ensuring that there's no whitespace incorrectly present in the HTTP headers provided by users. As the existing API surface is non-failable, all invalid characters are replaced by linear whitespace."}, {"Reference": "CVE-2021-37499", "Description": "CRLF vulnerability in Reprise License Manager (RLM) web interface through 14.2BL4 in the password parameter in View License Result function, that allows remote attackers to inject arbitrary HTTP headers."}, {"Reference": "CVE-2022-24888", "Description": "Nextcloud Server is the file server software for Nextcloud, a self-hosted productivity platform. Prior to versions 20.0.14.4, 21.0.8, 22.2.4, and 23.0.1, it is possible to create files and folders that have leading and trailing \\\\n, \\\\r, \\\\t, and \\\\v characters. The server rejects files and folders that have these characters in the middle of their names, so this might be an opportunity for injection. This issue is fixed in versions 20.0.14.4, 21.0.8, 22.2.4, and 23.0.1. There are currently no known workarounds."}, {"Reference": "CVE-2022-32453", "Description": "HTTP header injection vulnerability in Cybozu Office 10.0.0 to 10.8.5 may allow a remote attacker to obtain and/or alter the data of the product via unspecified vectors."}, {"Reference": "CVE-2022-3918", "Description": "A program using FoundationNetworking in swift-corelibs-foundation is potentially vulnerable to CRLF ( ) injection in URLRequest headers. In this vulnerability, a client can insert one or several CRLF sequences into a URLRequest header value. When that request is sent via URLSession to an HTTP server, the server may interpret the content after the CRLF as extra headers, or even a second request. For example, consider a URLRequest to http://example.com/ with the GET method. Suppose we set the URLRequest header \"Foo\" to the value \"Bar Extra-Header: Added GET /other HTTP/1.1\". When this request is sent, it will appear to the server as two requests: GET / HTTP/1.1 Foo: Bar Extra-Header: Added GET /other HTTP/1.1 In this manner, the client is able to inject extra headers and craft an entirely new request to a separate path, despite only making one API call in URLSession. If a developer has total control over the request and its headers, this vulnerability may not pose a threat. However, this vulnerability escalates if un-sanitized user input is placed in header values. If so, a malicious user could inject new headers or requests to an intermediary or backend server. Developers should be especially careful to sanitize user input in this case, or upgrade their version of swift-corelibs-foundation to include the patch below."}, {"Reference": "CVE-2022-4188", "Description": "Insufficient validation of untrusted input in CORS in Google Chrome on Android prior to 108.0.5359.71 allowed a remote attacker to bypass same origin policy via a crafted HTML page. (Chromium security severity: Medium)"}]}
{"ID": "114", "Name": "Process Control", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.", "ExtendedDescription": "Process control vulnerabilities take two forms: \n\n  - An attacker can change the command that the program executes: the attacker explicitly controls what the command is.\n\n  - An attacker can change the environment in which the command executes: the attacker implicitly controls what the command means.\n\nProcess control vulnerabilities of the first type occur when either data enters the application from an untrusted source and the data is used as part of a string representing a command that is executed by the application. By executing the command, the application gives an attacker a privilege or capability that the attacker would not otherwise have.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "73", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "700", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Strategy": "Libraries or Frameworks", "Description": "Libraries that are loaded should be well understood and come from a trusted source. The application can execute code contained in the native libraries, which often contain calls that are susceptible to other security problems, such as buffer overflows or command injection. All native libraries should be validated to determine if the application requires the use of the library. It is very difficult to determine what these native libraries actually do, and the potential for malicious code is high. In addition, the potential for an inadvertent mistake in these native libraries is also high, as many are written in C or C++ and may be susceptible to buffer overflow or race condition problems. To help prevent buffer overflow attacks, validate all input to native calls for content and length. If the native library does not come from a trusted source, review the source code of the library. The library should be built from the reviewed source before using it."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code uses System.loadLibrary() to load code from a native library named library.dll, which is normally found in a standard system directory."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t...\n\tSystem.loadLibrary(\"library.dll\");\n\t...\n```"}, {"BodyText": "The problem here is that System.loadLibrary() accepts a library name, not a path, for the library to be loaded. From the Java 1.4.2 API documentation this function behaves as follows [1]: A file containing native code is loaded from the local file system from a place where library files are conventionally obtained. The details of this process are implementation-dependent. The mapping from a library name to a specific filename is done in a system-specific manner. If an attacker is able to place a malicious copy of library.dll higher in the search order than file the application intends to load, then the application will load the malicious copy instead of the intended file. Because of the nature of the application, it runs with elevated privileges, which means the contents of the attacker's library.dll will now be run with elevated privileges, possibly giving them complete control of the system."}]}, {"Entries": [{"IntroText": "The following code from a privileged application uses a registry entry to determine the directory in which it is installed and loads a library file based on a relative path from the specified directory."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t...\n\tRegQueryValueEx(hkey, \"APPHOME\",\n\t0, 0, (BYTE*)home, &size);\n\tchar* lib=(char*)malloc(strlen(home)+strlen(INITLIB));\n\tif (lib) {\n\t\t\tstrcpy(lib,home);\n\t\t\tstrcat(lib,INITCMD);\n\t\t\tLoadLibrary(lib);\n\t}\n\t...\n```"}, {"BodyText": "The code in this example allows an attacker to load an arbitrary library, from which code will be executed with the elevated privilege of the application, by modifying a registry key to specify a different path containing a malicious version of INITLIB. Because the program does not validate the value read from the environment, if an attacker can control the value of APPHOME, they can fool the application into running malicious code."}]}, {"Entries": [{"IntroText": "The following code is from a web-based administration utility that allows users access to an interface through which they can update their profile on the system. The utility makes use of a library named liberty.dll, which is normally found in a standard system directory."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tLoadLibrary(\"liberty.dll\");\n```"}, {"BodyText": "The problem is that the program does not specify an absolute path for liberty.dll. If an attacker is able to place a malicious library named liberty.dll higher in the search order than file the application intends to load, then the application will load the malicious copy instead of the intended file. Because of the nature of the application, it runs with elevated privileges, which means the contents of the attacker's liberty.dll will now be run with elevated privileges, possibly giving the attacker complete control of the system. The type of attack seen in this example is made possible because of the search order used by LoadLibrary() when an absolute path is not specified. If the current directory is searched before system directories, as was the case up until the most recent versions of Windows, then this type of attack becomes trivial if the attacker can execute the program locally. The search order is operating system version dependent, and is controlled on newer operating systems by the value of the registry key: HKLM\\System\\CurrentControlSet\\Control\\Session Manager\\SafeDllSearchMode"}]}], "AffectedResources": ["System Process"], "RelatedAttackPatterns": ["108", "640"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Maintenance", "Note": "CWE-114 is a Class, but it is listed a child of CWE-73 in view 1000. This suggests some abstraction problems that should be resolved in future versions."}, {"Type": "Maintenance", "Note": "This entry seems to have close relationships with CWE-426/CWE-427. It seems more attack-oriented."}]}
{"ID": "115", "Name": "Misinterpretation of Input", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product misinterprets an input, whether from an attacker or another product, in a security-relevant fashion.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "436", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "DetectionMethods": [{"DetectionMethodID": "DM-13", "Method": "Fuzzing", "Description": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.", "Effectiveness": "High"}], "ObservedExamples": [{"Reference": "CVE-2005-2225", "Description": "Product sees dangerous file extension in free text of a group discussion, disconnects all users.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2225"}, {"Reference": "CVE-2001-0003", "Description": "Product does not correctly import and process security settings from another product.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0003"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "This concept needs further study. It is likely a factor in several weaknesses, possibly resultant as well. Overlaps Multiple Interpretation Errors (MIE)."}], "Top25Examples": [{"Reference": "CVE-2021-44532", "Description": "Node.js < 12.22.9, < 14.18.3, < 16.13.2, and < 17.3.1 converts SANs (Subject Alternative Names) to a string format. It uses this string to check peer certificates against hostnames when validating connections. The string format was subject to an injection vulnerability when name constraints were used within a certificate chain, allowing the bypass of these name constraints.Versions of Node.js with the fix for this escape SANs containing the problematic characters in order to prevent the injection. This behavior can be reverted through the --security-revert command-line option."}, {"Reference": "CVE-2021-21366", "Description": "xmldom is a pure JavaScript W3C standard-based (XML DOM Level 2 Core) DOMParser and XMLSerializer module. xmldom versions 0.4.0 and older do not correctly preserve system identifiers, FPIs or namespaces when repeatedly parsing and serializing maliciously crafted documents. This may lead to unexpected syntactic changes during XML processing in some downstream applications. This is fixed in version 0.5.0. As a workaround downstream applications can validate the input and reject the maliciously crafted documents."}, {"Reference": "CVE-2022-48230", "Description": "There is a misinterpretation of input vulnerability in BiSheng-WNM FW 3.0.0.325. Successful exploitation could lead to DoS."}, {"Reference": "CVE-2022-48261", "Description": "There is a misinterpretation of input vulnerability in BiSheng-WNM FW 3.0.0.325. Successful exploitation of this vulnerability may cause the printer service to be abnormal."}, {"Reference": "CVE-2022-23773", "Description": "cmd/go in Go before 1.16.14 and 1.17.x before 1.17.7 can misinterpret branch names that falsely appear to be version tags. This can lead to incorrect access control if an actor is supposed to be able to create branches but not tags."}]}
{"ID": "116", "Name": "Improper Encoding or Escaping of Output", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved.", "ExtendedDescription": "\n\nImproper encoding or escaping can allow attackers to change the commands that are sent to another component, inserting malicious commands instead.\n\n\nMost products follow a certain protocol that uses structured messages for communication between components, such as queries or commands. These structured messages can contain raw data interspersed with metadata or control information. For example, \"GET /index.html HTTP/1.1\" is a structured message containing a command (\"GET\") with a single argument (\"/index.html\") and metadata about which protocol version is being used (\"HTTP/1.1\").\n\n\nIf an application uses attacker-supplied inputs to construct a structured message without properly encoding or escaping, then the attacker could insert special characters that will cause the data to be interpreted as control information or metadata. Consequently, the component that receives the output will perform the wrong operations, or otherwise interpret the data incorrectly.\n", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "707", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "74", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Often"}, {"Type": "Technology", "Name": "AI/ML", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Database Server", "Prevalence": "Often"}, {"Type": "Technology", "Name": "Web Server", "Prevalence": "Often"}], "AlternateTerms": [{"Term": "Output Sanitization"}, {"Term": "Output Validation"}, {"Term": "Output Encoding"}], "ModesOfIntroduction": [{"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Modify Application Data"], "Note": "The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted."}, {"Scope": ["Integrity", "Confidentiality", "Availability", "Access Control"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted."}, {"Scope": ["Confidentiality"], "Impact": ["Bypass Protection Mechanism"], "Note": "The communications between components can be modified in unexpected ways. Unexpected commands can be executed, bypassing other security mechanisms. Incoming data can be misinterpreted."}], "DetectionMethods": [{"DetectionMethodID": "DM-1", "Method": "Automated Static Analysis", "Description": "This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.", "Effectiveness": "Moderate", "EffectivenessNotes": "This is not a perfect solution, since 100% accuracy and coverage are not feasible."}, {"DetectionMethodID": "DM-2", "Method": "Automated Dynamic Analysis", "Description": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results."}], "PotentialMitigations": [{"MitigationID": "MIT-4.3", "Phase": ["Architecture and Design"], "Strategy": "Libraries or Frameworks", "Description": "\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nFor example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.\n\n\nAlternately, use built-in functions, but consider using wrappers in case those functions are discovered to have a vulnerability.\n"}, {"MitigationID": "MIT-27", "Phase": ["Architecture and Design"], "Strategy": "Parameterization", "Description": "\n\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n\n\nFor example, stored procedures can enforce database query structure and reduce the likelihood of SQL injection.\n"}, {"Phase": ["Architecture and Design", "Implementation"], "Description": "Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies."}, {"Phase": ["Architecture and Design"], "Description": "In some cases, input validation may be an important strategy when output encoding is not a complete solution. For example, you may be providing the same output that will be processed by multiple consumers that use different encodings or representations. In other cases, you may be required to allow user-supplied input to contain control information, such as limited HTML tags that support formatting in a wiki or bulletin board. When this type of requirement must be met, use an extremely strict allowlist to limit which control sequences can be used. Verify that the resulting syntactic structure is what you expect. Use your normal encoding methods for the remainder of the input."}, {"Phase": ["Architecture and Design"], "Description": "Use input validation as a defense-in-depth measure to reduce the likelihood of output encoding errors (see CWE-20)."}, {"Phase": ["Requirements"], "Description": "Fully specify which encodings are required by components that will be communicating with each other."}, {"Phase": ["Implementation"], "Description": "When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This code displays an email address that was submitted as part of a form."}, {"Nature": "Bad", "Language": "JSP", "ExampleCode": "```\n\t<% String email = request.getParameter(\"email\"); %>\n\t...\n\tEmail Address: <%= email %>\n```"}, {"BodyText": "The value read from the form parameter is reflected back to the client browser without having been encoded prior to output, allowing various XSS attacks (CWE-79)."}]}, {"Entries": [{"IntroText": "Consider a chat application in which a front-end web application communicates with a back-end server. The back-end is legacy code that does not perform authentication or authorization, so the front-end must implement it. The chat protocol supports two commands, SAY and BAN, although only administrators can use the BAN command. Each argument must be separated by a single space. The raw inputs are URL-encoded. The messaging protocol allows multiple commands to be specified on the same line if they are separated by a \"|\" character."}, {"BodyText": "First let's look at the back end command processor code"}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\t$inputString = readLineFromFileHandle($serverFH);\n```\n# generate an array of strings separated by the \"|\" character.* \n\t@commands = split(/\\|/, $inputString);\n\t\n\tforeach $cmd (@commands) {\n\t```\n```\n# separate the operator from its arguments based on a single whitespace* \n\t\t($operator, $args) = split(/ /, $cmd, 2);\n\t\t\n\t\t$args = UrlDecode($args);\n\t\tif ($operator eq \"BAN\") {\n\t\t```\n\t\t\tExecuteBan($args);\n\t\t}\n\t\telsif ($operator eq \"SAY\") {\n\t\t\tExecuteSay($args);\n\t\t}\n\t}\n```"}, {"BodyText": "The front end web application receives a command, encodes it for sending to the server, performs the authorization check, and sends the command to the server."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\t$inputString = GetUntrustedArgument(\"command\");\n\t($cmd, $argstr) = split(/\\s+/, $inputString, 2);\n```\n# removes extra whitespace and also changes CRLF's to spaces* \n\t$argstr =~ s/\\s+/ /gs;\n\t\n\t$argstr = UrlEncode($argstr);\n\tif (($cmd eq \"BAN\") && (! IsAdministrator($username))) {\n\t```\n\t\tdie \"Error: you are not the admin.\\n\";\n\t}\n```\n# communicate with file server using a file handle* \n\t$fh = GetServerFileHandle(\"myserver\");\n\t\n\tprint $fh \"$cmd $argstr\\n\";"}, {"BodyText": "It is clear that, while the protocol and back-end allow multiple commands to be sent in a single request, the front end only intends to send a single command. However, the UrlEncode function could leave the \"|\" character intact. If an attacker provides:"}, {"Nature": "Attack", "ExampleCode": "```\n\tSAY hello world|BAN user12\n```"}, {"BodyText": "then the front end will see this is a \"SAY\" command, and the $argstr will look like \"hello world | BAN user12\". Since the command is \"SAY\", the check for the \"BAN\" command will fail, and the front end will send the URL-encoded command to the back end:"}, {"Nature": "Result", "ExampleCode": "```\n\tSAY hello%20world|BAN%20user12\n```"}, {"BodyText": "The back end, however, will treat these as two separate commands:"}, {"Nature": "Result", "ExampleCode": "```\n\tSAY hello world\n\tBAN user12\n```"}, {"BodyText": "Notice, however, that if the front end properly encodes the \"|\" with \"%7C\", then the back end will only process a single command."}]}, {"Entries": [{"IntroText": "This example takes user input, passes it through an encoding scheme and then creates a directory specified by the user."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\tsub GetUntrustedInput {\n\t\treturn($ARGV[0]);\n\t}\n\tsub encode {\n\t\tmy($str) = @_;\n\t\t$str =~ s/\\&/\\&amp;/gs;\n\t\t$str =~ s/\\\"/\\&quot;/gs;\n\t\t$str =~ s/\\'/\\&apos;/gs;\n\t\t$str =~ s/\\</\\&lt;/gs;\n\t\t$str =~ s/\\>/\\&gt;/gs;\n\t\treturn($str);\n\t}\n\tsub doit {\n\t\tmy $uname = encode(GetUntrustedInput(\"username\"));\n\t\tprint \"<b>Welcome, $uname!</b><p>\\n\";\n\t\tsystem(\"cd /home/$uname; /bin/ls -l\");\n\t}\n```"}, {"BodyText": "The programmer attempts to encode dangerous characters, however the denylist for encoding is incomplete (CWE-184) and an attacker can still pass a semicolon, resulting in a chain with command injection (CWE-77)."}, {"BodyText": "Additionally, the encoding routine is used inappropriately with command execution. An attacker doesn't even need to insert their own semicolon. The attacker can instead leverage the encoding routine to provide the semicolon to separate the commands. If an attacker supplies a string of the form:"}, {"Nature": "Attack", "ExampleCode": "```\n\t' pwd\n```"}, {"BodyText": "then the program will encode the apostrophe and insert the semicolon, which functions as a command separator when passed to the system function. This allows the attacker to complete the command injection."}]}], "ObservedExamples": [{"Reference": "CVE-2021-41232", "Description": "Chain: authentication routine in Go-based agile development product does not escape user name (CWE-116), allowing LDAP injection (CWE-90)", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-41232"}, {"Reference": "CVE-2008-4636", "Description": "OS command injection in backup software using shell metacharacters in a filename; correct behavior would require that this filename could not be changed.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4636"}, {"Reference": "CVE-2008-0769", "Description": "Web application does not set the charset when sending a page to a browser, allowing for XSS exploitation when a browser chooses an unexpected encoding.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0769"}, {"Reference": "CVE-2008-0005", "Description": "Program does not set the charset when sending a page to a browser, allowing for XSS exploitation when a browser chooses an unexpected encoding.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0005"}, {"Reference": "CVE-2008-5573", "Description": "SQL injection via password parameter; a strong password might contain \"&\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5573"}, {"Reference": "CVE-2008-3773", "Description": "Cross-site scripting in chat application via a message subject, which normally might contain \"&\" and other XSS-related characters.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3773"}, {"Reference": "CVE-2008-0757", "Description": "Cross-site scripting in chat application via a message, which normally might be allowed to contain arbitrary content.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0757"}], "RelatedAttackPatterns": ["104", "73", "81", "85"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Relationship", "Note": "This weakness is primary to all weaknesses related to injection (CWE-74) since the inherent nature of injection involves the violation of structured messages."}, {"Type": "Relationship", "Note": "\n\nCWE-116 and CWE-20 have a close association because, depending on the nature of the structured message, proper input validation can indirectly prevent special characters from changing the meaning of a structured message. For example, by validating that a numeric ID field should only contain the 0-9 characters, the programmer effectively prevents injection attacks.\n\n\nHowever, input validation is not always sufficient, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a last name is inserted into a query. The name \"O'Reilly\" would likely pass the validation step since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the \"'\" apostrophe character, which would need to be escaped or otherwise neutralized. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.\n"}, {"Type": "Terminology", "Note": "The usage of the \"encoding\" and \"escaping\" terms varies widely. For example, in some programming languages, the terms are used interchangeably, while other languages provide APIs that use both terms for different tasks. This overlapping usage extends to the Web, such as the \"escape\" JavaScript function whose purpose is stated to be encoding. The concepts of encoding and escaping predate the Web by decades. Given such a context, it is difficult for CWE to adopt a consistent vocabulary that will not be misinterpreted by some constituency."}, {"Type": "Theoretical", "Note": "This is a data/directive boundary error in which data boundaries are not sufficiently enforced before it is sent to a different control sphere."}, {"Type": "Research Gap", "Note": "While many published vulnerabilities are related to insufficient output encoding, there is such an emphasis on input validation as a protection mechanism that the underlying causes are rarely described. Within CVE, the focus is primarily on well-understood issues like cross-site scripting and SQL injection. It is likely that this weakness frequently occurs in custom protocols that support multiple encodings, which are not necessarily detectable with automated techniques."}], "Top25Examples": [{"Reference": "CVE-2021-44532", "Description": "Node.js < 12.22.9, < 14.18.3, < 16.13.2, and < 17.3.1 converts SANs (Subject Alternative Names) to a string format. It uses this string to check peer certificates against hostnames when validating connections. The string format was subject to an injection vulnerability when name constraints were used within a certificate chain, allowing the bypass of these name constraints.Versions of Node.js with the fix for this escape SANs containing the problematic characters in order to prevent the injection. This behavior can be reverted through the --security-revert command-line option."}, {"Reference": "CVE-2022-0210", "Description": "The Random Banner WordPress plugin is vulnerable to Stored Cross-Site Scripting due to insufficient escaping via the category parameter found in the ~/include/models/model.php file which allowed attackers with administrative user access to inject arbitrary web scripts, in versions up to and including 4.1.4. This affects multi-site installations where unfiltered_html is disabled for administrators, and sites where unfiltered_html is disabled."}, {"Reference": "CVE-2022-0220", "Description": "The check_privacy_settings AJAX action of the WordPress GDPR WordPress plugin before 1.9.27, available to both unauthenticated and authenticated users, responds with JSON data without an \"application/json\" content-type. Since an HTML payload isn't properly escaped, it may be interpreted by a web browser led to this endpoint. Javascript code may be executed on a victim's browser. Due to v1.9.26 adding a CSRF check, the XSS is only exploitable against unauthenticated users (as they all share the same nonce)"}, {"Reference": "CVE-2022-0421", "Description": "The Five Star Restaurant Reservations WordPress plugin before 2.4.12 does not have authorisation when changing whether a payment was successful or failed, allowing unauthenticated users to change the payment status of arbitrary bookings. Furthermore, due to the lack of sanitisation and escaping, attackers could perform Cross-Site Scripting attacks against a logged in admin viewing the failed payments"}, {"Reference": "CVE-2022-0423", "Description": "The 3D FlipBook WordPress plugin before 1.12.1 does not have authorisation and CSRF checks when updating its settings, and does not have any sanitisation/escaping, allowing any authenticated users, such as subscriber to put Cross-Site Scripting payloads in all pages with a 3d flipbook."}, {"Reference": "CVE-2022-0450", "Description": "The Menu Image, Icons made easy WordPress plugin before 3.0.6 does not have authorisation and CSRF checks when saving menu settings, and does not validate, sanitise and escape them. As a result, any authenticate users, such as subscriber can update the settings or arbitrary menu and put Cross-Site Scripting payloads in them which will be triggered in the related menu in the frontend"}, {"Reference": "CVE-2022-0479", "Description": "The Popup Builder WordPress plugin before 4.1.1 does not sanitise and escape the sgpb-subscription-popup-id parameter before using it in a SQL statement in the All Subscribers admin dashboard, leading to a SQL injection, which could also be used to perform Reflected Cross-Site Scripting attack against a logged in admin opening a malicious link"}, {"Reference": "CVE-2022-0830", "Description": "The FormBuilder WordPress plugin through 1.08 does not have CSRF checks in place when creating/updating and deleting forms, and does not sanitise as well as escape its form field values. As a result, attackers could make logged in admin update and delete arbitrary forms via a CSRF attack, and put Cross-Site Scripting payloads in them."}, {"Reference": "CVE-2022-0875", "Description": "The Google Authenticator WordPress plugin before 1.0.5 does not have CSRF check when saving its settings, and does not sanitise as well as escape them, allowing attackers to make a logged in admin change them and perform Cross-Site Scripting attacks"}, {"Reference": "CVE-2022-1407", "Description": "The VikBooking Hotel Booking Engine & PMS WordPress plugin before 1.5.8 does not have CSRF check in place when adding a tracking campaign, and does not escape the campaign fields when outputting them In attributes. As a result, attackers could make a logged in admin add tracking campaign with XSS payloads in them via a CSRF attack"}, {"Reference": "CVE-2022-1557", "Description": "The ULeak Security & Monitoring WordPress plugin through 1.2.3 does not have authorisation and CSRF checks when updating its settings, and is also lacking sanitisation as well as escaping in some of them, which could allow any authenticated users such as subscriber to perform Stored Cross-Site Scripting attacks against admins viewing the settings"}, {"Reference": "CVE-2022-1593", "Description": "The Site Offline or Coming Soon WordPress plugin through 1.6.6 does not have CSRF check in place when updating its settings, and it also lacking sanitisation as well as escaping in some of them. As a result, attackers could make a logged in admin change them and put Cross-Site Scripting payloads in them via a CSRF attack"}, {"Reference": "CVE-2022-1626", "Description": "The Sharebar WordPress plugin through 1.4.1 does not have CSRF check in place when updating its settings, which could allow attackers to make a logged in admin change them via a CSRF attack and also lead to Stored Cross-Site Scripting issue due to the lack of sanitisation and escaping in some of them"}, {"Reference": "CVE-2022-1763", "Description": "Due to missing checks the Static Page eXtended WordPress plugin through 2.1 is vulnerable to CSRF attacks which allows changing the plugin settings, including required user levels for specific features. This could also lead to Stored Cross-Site Scripting due to the lack of escaping in some of the settings"}, {"Reference": "CVE-2022-1764", "Description": "The WP-chgFontSize WordPress plugin through 1.8 does not have CSRF check in place when updating its settings, which could allow attackers to make a logged in admin change them via a CSRF attack and lead to Stored Cross-Site Scripting due to the lack of sanitisation and escaping"}, {"Reference": "CVE-2022-1780", "Description": "The LaTeX for WordPress plugin through 3.4.10 does not have CSRF check in place when updating its settings, which could allow attackers to make a logged in admin change them via a CSRF attack which could also lead to Stored Cross-Site Scripting due to the lack of sanitisation and escaping"}, {"Reference": "CVE-2022-1781", "Description": "The postTabs WordPress plugin through 2.10.6 does not have CSRF check in place when updating its settings, which could allow attackers to make a logged in admin change them via a CSRF attack, which also lead to Stored Cross-Site Scripting due to the lack of sanitisation and escaping"}, {"Reference": "CVE-2022-1787", "Description": "The Sideblog WordPress plugin through 6.0 does not have CSRF check in place when updating its settings, which could allow attackers to make a logged in admin change them via a CSRF attack and lead to Stored Cross-Site Scripting due to the lack of sanitisation and escaping"}, {"Reference": "CVE-2022-1792", "Description": "The Quick Subscribe WordPress plugin through 1.7.1 does not have CSRF check in place when updating its settings, which could allow attackers to make a logged in admin change them via a CSRF attack and leading to Stored XSS due to the lack of sanitisation and escaping in some of them"}, {"Reference": "CVE-2022-1818", "Description": "The Multi-page Toolkit WordPress plugin through 2.6 does not have CSRF check in place when updating its settings, which could allow attackers to make a logged in admin change them via a CSRF attack and lead to Stored Cross-Site Scripting due to the lack of sanitisation and escaping as well"}, {"Reference": "CVE-2022-1829", "Description": "The Inline Google Maps WordPress plugin through 5.11 does not have CSRF check in place when updating its settings, which could allow attackers to make a logged in admin change them via a CSRF attack, and lead to Stored Cross-Site Scripting due to the lack of sanitisation and escaping"}, {"Reference": "CVE-2022-1830", "Description": "The Amazon Einzeltitellinks WordPress plugin through 1.3.3 does not have CSRF check in place when updating its settings, which could allow attackers to make a logged in admin change them via a CSRF attack and lead to Stored Cross-Site Scripting due to the lack of sanitisation and escaping"}, {"Reference": "CVE-2022-1842", "Description": "The OpenBook Book Data WordPress plugin through 3.5.2 does not have CSRF check in place when updating its settings, which could allow attackers to make a logged in admin change them via a CSRF attack and lead to Stored Cross-Site Scripting due to the lack of sanitisation and escaping as well"}, {"Reference": "CVE-2022-1844", "Description": "The WP Sentry WordPress plugin through 1.0 does not have CSRF check in place when updating its settings, which could allow attackers to make a logged in admin change them via a CSRF attack and lead to Stored Cross-Site Scripting due to the lack of sanitisation and escaping as well"}, {"Reference": "CVE-2022-1913", "Description": "The Add Post URL WordPress plugin through 2.1.0 does not have CSRF check in place when updating its settings, which could allow attackers to make a logged in admin change them via a CSRF attack and lead to Stored Cross-Site Scripting due to the lack of sanitisation and escaping"}, {"Reference": "CVE-2022-1914", "Description": "The Clean-Contact WordPress plugin through 1.6 does not have CSRF check in place when updating its settings, which could allow attackers to make a logged in admin change them via a CSRF attack and lead to Stored XSS due to the lack of sanitisation and escaping as well"}, {"Reference": "CVE-2022-2071", "Description": "The Name Directory WordPress plugin before 1.25.4 does not have CSRF check when importing names, and is also lacking sanitisation as well as escaping in some of the imported data, which could allow attackers to make a logged in admin import arbitrary names with XSS payloads in them."}, {"Reference": "CVE-2022-2099", "Description": "The WooCommerce WordPress plugin before 6.6.0 is vulnerable to stored HTML injection due to lack of escaping and sanitizing in the payment gateway titles"}, {"Reference": "CVE-2022-2241", "Description": "The Featured Image from URL (FIFU) WordPress plugin before 4.0.1 does not have CSRF check in place when updating its settings, which could allow attackers to make a logged in admin change them via a CSRF attack. Furthermore, due to the lack of validation, sanitisation and escaping in some of them, it could also lead to Stored XSS issues"}, {"Reference": "CVE-2022-22734", "Description": "The Simple Quotation WordPress plugin through 1.3.2 does not have CSRF check when creating or editing a quote and does not sanitise and escape Quotes. As a result, attacker could make a logged in admin create or edit arbitrary quote, and put Cross-Site Scripting payloads in them"}, {"Reference": "CVE-2022-22735", "Description": "The Simple Quotation WordPress plugin through 1.3.2 does not have authorisation (and CSRF) checks in various of its AJAX actions and is lacking escaping of user data when using it in SQL statements, allowing any authenticated users, such as subscriber to perform SQL injection attacks"}, {"Reference": "CVE-2022-2312", "Description": "The Student Result or Employee Database WordPress plugin before 1.7.5 does not have CSRF in its AJAX actions, allowing attackers to make logged in user with a role as low as contributor to add/edit and delete students via CSRF attacks. Furthermore, due to the lack of sanitisation and escaping, it could also lead to Stored Cross-Site scripting"}, {"Reference": "CVE-2022-23603", "Description": "iTunesRPC-Remastered is a discord rich presence application for use with iTunes & Apple Music. In code before commit 24f43aa user input is not properly sanitized and code injection is possible. Users are advised to upgrade as soon as is possible. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-23620", "Description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. In affected versions AbstractSxExportURLFactoryActionHandler#processSx does not escape anything from SSX document references when serializing it on filesystem, it is possible to for the HTML export process to contain reference elements containing filesystem syntax like \"../\", \"./\". or \"/\" in general. The referenced elements are not properly escaped. This issue has been resolved in version 13.6-rc-1. This issue can be worked around by limiting or disabling document export."}, {"Reference": "CVE-2022-2846", "Description": "The Calendar Event Multi View WordPress plugin before 1.4.07 does not have any authorisation and CSRF checks in place when creating an event, and is also lacking sanitisation as well as escaping in some of the event fields. This could allow unauthenticated attackers to create arbitrary events and put Cross-Site Scripting payloads in it."}, {"Reference": "CVE-2022-3024", "Description": "The Simple Bitcoin Faucets WordPress plugin through 1.7.0 does not have any authorisation and CSRF in an AJAX action, allowing any authenticated users, such as subscribers to call it and add/delete/edit Bonds. Furthermore, due to the lack of sanitisation and escaping, it could also lead to Stored Cross-Site Scripting issues"}, {"Reference": "CVE-2022-30966", "Description": "Jenkins Random String Parameter Plugin 1.0 and earlier does not escape the name and description of Random String parameters on views displaying parameters, resulting in a stored cross-site scripting (XSS) vulnerability exploitable by attackers with Item/Configure permission."}, {"Reference": "CVE-2022-4029", "Description": "The Simple:Press plugin for WordPress is vulnerable to Reflected Cross-Site Scripting via the 'sforum_[md5 hash of the WordPress URL]' cookie value in versions up to, and including, 6.8 due to insufficient input sanitization and output escaping. This makes it possible for unauthenticated attackers to inject arbitrary web scripts in pages that execute if they can successfully trick a user into performing an action such as clicking on a link. This would be highly complex to exploit as it would require the attacker to set the cookie a cookie for the targeted user."}, {"Reference": "CVE-2022-4125", "Description": "The Popup Manager WordPress plugin through 1.6.6 does not have authorisation and CSRF check when creating/updating popups, and is missing sanitisation as well as escaping, which could allow unauthenticated attackers to create arbitrary popups and add Stored XSS payloads as well"}, {"Reference": "CVE-2022-43562", "Description": "In Splunk Enterprise versions below 8.1.12, 8.2.9, and 9.0.2, Splunk Enterprise fails to properly validate and escape the Host header, which could let a remote authenticated user conduct various attacks against the system, including cross-site scripting and cache poisoning. "}, {"Reference": "CVE-2022-4466", "Description": "The WordPress Infinite Scroll WordPress plugin before 5.6.0.3 does not validate and escape some of its shortcode attributes before outputting them back in a page/post where the shortcode is embed, which could allow users with the contributor role and above to perform Stored Cross-Site Scripting attacks."}, {"Reference": "CVE-2022-48339", "Description": "An issue was discovered in GNU Emacs through 28.2. htmlfontify.el has a command injection vulnerability. In the hfy-istext-command function, the parameter file and parameter srcdir come from external input, and parameters are not escaped. If a file name or directory name contains shell metacharacters, code may be executed."}, {"Reference": "CVE-2022-1759", "Description": "The RB Internal Links WordPress plugin through 2.0.16 does not have CSRF check in place when updating its settings, which could allow attackers to make a logged in admin change them via a CSRF attack, as well as perform Stored Cross-Site Scripting attacks due to the lack of sanitisation and escaping"}, {"Reference": "CVE-2022-1967", "Description": "The WP Championship WordPress plugin before 9.3 is lacking CSRF checks in various places, allowing attackers to make a logged in admin perform unwanted actions, such as create and delete arbitrary teams as well as update the plugin's settings. Due to the lack of sanitisation and escaping, it could also lead to Stored Cross-Site Scripting issues"}, {"Reference": "CVE-2022-24682", "Description": "An issue was discovered in the Calendar feature in Zimbra Collaboration Suite 8.8.x before 8.8.15 patch 30 (update 1), as exploited in the wild starting in December 2021. An attacker could place HTML containing executable JavaScript inside element attributes. This markup becomes unescaped, causing arbitrary markup to be injected into the document."}, {"Reference": "CVE-2022-42948", "Description": "Cobalt Strike 4.7.1 fails to properly escape HTML tags when they are displayed on Swing components. By injecting crafted HTML code, it is possible to remotely execute code in the Cobalt Strike UI."}, {"Reference": "CVE-2021-39027", "Description": "IBM Guardium Data Encryption (GDE) 4.0.0 and 5.0.0 prepares a structured message for communication with another component, but encoding or escaping of the data is either missing or done incorrectly. As a result, the intended structure of the message is not preserved. IBM X-Force ID: 213865."}, {"Reference": "CVE-2022-39017", "Description": " Improper input validation and output encoding in all comments fields, in M-Files Hubshare before 3.3.10.9 allows authenticated attackers to introduce cross-site scripting attacks via specially crafted comments. "}, {"Reference": "CVE-2022-41934", "Description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Any user with view rights on commonly accessible documents including the menu macro can execute arbitrary Groovy, Python or Velocity code in XWiki leading to full access to the XWiki installation due to improper escaping of the macro content and parameters of the menu macro. The problem has been patched in XWiki 14.6RC1, 13.10.8 and 14.4.3. The patch (commit `2fc20891`) for the document `Menu.MenuMacro` can be manually applied or a XAR archive of a patched version can be imported. The menu macro was basically unchanged since XWiki 11.6 so on XWiki 11.6 or later the patch for version of 13.10.8 (commit `59ccca24a`) can most likely be applied, on XWiki version 14.0 and later the versions in XWiki 14.6 and 14.4.3 should be appropriate."}, {"Reference": "CVE-2022-45143", "Description": "The JsonErrorReportValve in Apache Tomcat 8.5.83, 9.0.40 to 9.0.68 and 10.1.0-M1 to 10.1.1 did not escape the type, message or description values. In some circumstances these are constructed from user provided data and it was therefore possible for users to supply values that invalidated or manipulated the JSON output."}, {"Reference": "CVE-2022-24816", "Description": "JAI-EXT is an open-source project which aims to extend the Java Advanced Imaging (JAI) API. Programs allowing Jiffle script to be provided via network request can lead to a Remote Code Execution as the Jiffle script is compiled into Java code via Janino, and executed. In particular, this affects the downstream GeoServer project. Version 1.2.22 will contain a patch that disables the ability to inject malicious code into the resulting script. Users unable to upgrade may negate the ability to compile Jiffle scripts from the final application, by removing janino-x.y.z.jar from the classpath."}, {"Reference": "CVE-2022-28960", "Description": "A PHP injection vulnerability in Spip before v3.2.8 allows attackers to execute arbitrary PHP code via the _oups parameter at /ecrire."}, {"Reference": "CVE-2022-36099", "Description": "XWiki Platform Wiki UI Main Wiki is software for managing subwikis on XWiki Platform, a generic wiki platform. Starting with version 5.3-milestone-2 and prior to versions 13.10.6 and 14.4, it's possible to inject arbitrary wiki syntax including Groovy, Python and Velocity script macros via the request (URL parameter) using the `XWikiServerClassSheet` if the user has view access to this sheet and another page that has been saved with programming rights, a standard condition on a public read-only XWiki installation or a private XWiki installation where the user has an account. This allows arbitrary Groovy/Python/Velocity code execution which allows bypassing all rights checks and thus both modification and disclosure of all content stored in the XWiki installation. Also, this could be used to impact the availability of the wiki. This has been patched in versions 13.10.6 and 14.4. As a workaround, edit the affected document `XWiki.XWikiServerClassSheet` or `WikiManager.XWikiServerClassSheet` and manually perform the changes from the patch fixing the issue. On XWiki versions 12.0 and later, it is also possible to import the document `XWiki.XWikiServerClassSheet` from the xwiki-platform-wiki-ui-mainwiki package version 14.4 using the import feature of the administration application as there have been no other changes to this document since XWiki 12.0."}, {"Reference": "CVE-2022-36100", "Description": "XWiki Platform Applications Tag and XWiki Platform Tag UI are tag applications for XWiki, a generic wiki platform. Starting with version 1.7 in XWiki Platform Applications Tag and prior to 13.10.6 and 14.4 in XWiki Platform Tag UI, the tags document `Main.Tags` in XWiki didn't sanitize user inputs properly. This allowed users with view rights on the document (default in a public wiki or for authenticated users on private wikis) to execute arbitrary Groovy, Python and Velocity code with programming rights. This also allowed bypassing all rights checks and thus both modification and disclosure of all content stored in the XWiki installation. The vulnerability could be used to impact the availability of the wiki. On XWiki versions before 13.10.4 and 14.2, this can be combined with CVE-2022-36092, meaning that no rights are required to perform the attack. The vulnerability has been patched in versions 13.10.6 and 14.4. As a workaround, the patch that fixes the issue can be manually applied to the document `Main.Tags` or the updated version of that document can be imported from version 14.4 of xwiki-platform-tag-ui using the import feature in the administration UI on XWiki 10.9 and later."}, {"Reference": "CVE-2022-22744", "Description": "The constructed curl command from the \"Copy as curl\" feature in DevTools was not properly escaped for PowerShell. This could have lead to command injection if pasted into a Powershell prompt.<br>*This bug only affects Thunderbird for Windows. Other operating systems are unaffected.*. This vulnerability affects Firefox ESR < 91.5, Firefox < 96, and Thunderbird < 91.5."}, {"Reference": "CVE-2022-22992", "Description": "A command injection remote code execution vulnerability was discovered on Western Digital My Cloud Devices that could allow an attacker to execute arbitrary system commands on the device. The vulnerability was addressed by escaping individual arguments to shell functions coming from user input."}, {"Reference": "CVE-2022-34820", "Description": "A vulnerability has been identified in SIMATIC CP 1242-7 V2 (All versions < V3.3.46), SIMATIC CP 1243-1 (All versions < V3.3.46), SIMATIC CP 1243-7 LTE EU (All versions < V3.3.46), SIMATIC CP 1243-7 LTE US (All versions < V3.3.46), SIMATIC CP 1243-8 IRC (All versions < V3.3.46), SIMATIC CP 1542SP-1 IRC (All versions >= V2.0 < V2.2.28), SIMATIC CP 1543-1 (All versions < V3.0.22), SIMATIC CP 1543SP-1 (All versions >= V2.0 < V2.2.28), SIPLUS ET 200SP CP 1542SP-1 IRC TX RAIL (All versions >= V2.0 < V2.2.28), SIPLUS ET 200SP CP 1543SP-1 ISEC (All versions >= V2.0 < V2.2.28), SIPLUS ET 200SP CP 1543SP-1 ISEC TX RAIL (All versions >= V2.0 < V2.2.28), SIPLUS NET CP 1242-7 V2 (All versions < V3.3.46), SIPLUS NET CP 1543-1 (All versions < V3.0.22), SIPLUS S7-1200 CP 1243-1 (All versions < V3.3.46), SIPLUS S7-1200 CP 1243-1 RAIL (All versions < V3.3.46). The application does not correctly escape some user provided fields during the authentication process. This could allow an attacker to inject custom commands and execute arbitrary code with elevated privileges."}, {"Reference": "CVE-2022-35153", "Description": "FusionPBX 5.0.1 was discovered to contain a command injection vulnerability via /fax/fax_send.php."}, {"Reference": "CVE-2022-48338", "Description": "An issue was discovered in GNU Emacs through 28.2. In ruby-mode.el, the ruby-find-library-file function has a local command injection vulnerability. The ruby-find-library-file function is an interactive function, and bound to C-c C-f. Inside the function, the external command gem is called through shell-command-to-string, but the feature-name parameters are not escaped. Thus, malicious Ruby source files may cause commands to be executed."}, {"Reference": "CVE-2022-29599", "Description": "In Apache Maven maven-shared-utils prior to version 3.3.3, the Commandline class can emit double-quoted strings without proper escaping, allowing shell injection attacks."}, {"Reference": "CVE-2022-26174", "Description": "A remote code execution (RCE) vulnerability in Beekeeper Studio v3.2.0 allows attackers to execute arbitrary code via a crafted payload injected into the display fields."}, {"Reference": "CVE-2021-30589", "Description": "Insufficient validation of untrusted input in Sharing in Google Chrome prior to 92.0.4515.107 allowed a remote attacker to bypass navigation restrictions via a crafted click-to-call link."}, {"Reference": "CVE-2022-0124", "Description": "An issue has been discovered affecting GitLab versions prior to 14.4.5, between 14.5.0 and 14.5.3, and between 14.6.0 and 14.6.1. Gitlab's Slack integration is incorrectly validating user input and allows to craft malicious URLs that are sent to slack."}, {"Reference": "CVE-2022-0741", "Description": "Improper input validation in all versions of GitLab CE/EE using sendmail to send emails allowed an attacker to steal environment variables via specially crafted email addresses."}, {"Reference": "CVE-2022-20230", "Description": "In choosePrivateKeyAlias of KeyChain.java, there is a possible access to the user's certificate due to improper input validation. This could lead to local information disclosure with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-221859869"}, {"Reference": "CVE-2022-2619", "Description": "Insufficient validation of untrusted input in Settings in Google Chrome prior to 104.0.5112.79 allowed an attacker who convinced a user to install a malicious extension to inject scripts or HTML into a privileged page via a crafted HTML page."}, {"Reference": "CVE-2021-4068", "Description": "Insufficient data validation in new tab page in Google Chrome prior to 96.0.4664.93 allowed a remote attacker to leak cross-origin data via a crafted HTML page."}, {"Reference": "CVE-2021-0933", "Description": "In onCreate of CompanionDeviceActivity.java or DeviceChooserActivity.java, there is a possible way for HTML tags to interfere with a consent dialog due to improper input validation. This could lead to remote escalation of privilege, confusing the user into accepting pairing of a malicious Bluetooth device, with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-9Android ID: A-172251622"}]}
{"ID": "1164", "Name": "Irrelevant Code", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product contains code that is not essential for execution,\n\t     i.e. makes no state changes and has no side effects that alter\n\t     data or control flow, such that removal of the code would have no impact\n\t     to functionality or correctness.", "ExtendedDescription": "\n\nIrrelevant code could include dead code, initialization that is not used, empty blocks, code that could be entirely removed due to optimization, etc.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}, {"Scope": ["Other"], "Impact": ["Reduce Performance"]}], "DemonstrativeExamples": [{"ID": "DX-217", "Entries": [{"IntroText": "The condition for the second if statement is impossible to satisfy. It requires that the variables be non-null. However, on the only path where s can be assigned a non-null value, there is a return statement."}, {"Nature": "Bad", "Language": "C++", "ExampleCode": "```\n\tString s = null;\n\tif (b) {\n\t\ts = \"Yes\";\n\t\treturn;\n\t}\n\tif (s != null) {\n\t\tDead();\n\t}\n```"}]}, {"ID": "DX-218", "Entries": [{"IntroText": "The following code excerpt assigns to the variable r and then overwrites the value without using it."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tr = getName();\n\tr = getNewBuffer(buf);\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2014-1266", "Description": "chain: incorrect \"goto\" in Apple SSL product bypasses certificate validation, allowing Adversary-in-the-Middle (AITM) attack (Apple \"goto fail\" bug). CWE-705 (Incorrect Control Flow Scoping) -> CWE-561 (Dead Code) -> CWE-295 (Improper Certificate Validation) -> CWE-393 (Return of Wrong Status Code) -> CWE-300 (Channel Accessible by Non-Endpoint).", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-1266"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}}
{"ID": "117", "Name": "Improper Output Neutralization for Logs", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product does not neutralize or incorrectly neutralizes output that is written to logs.", "ExtendedDescription": "\n\nThis can allow an attacker to forge log entries or inject malicious content into logs.\n\n\nLog forging vulnerabilities occur when:\n\n\n  1. Data enters an application from an untrusted source.\n\n  1. The data is written to an application or system log file.\n\n", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "116", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "700", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "BackgroundDetails": ["Applications typically use log files to store a history of events or transactions for later review, statistics gathering, or debugging. Depending on the nature of the application, the task of reviewing log files may be performed manually on an as-needed basis or automated with a tool that automatically culls logs for important events or trending information."], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability", "Non-Repudiation"], "Impact": ["Modify Application Data", "Hide Activities", "Execute Unauthorized Code or Commands"], "Note": "Interpretation of the log files may be hindered or misdirected if an attacker can supply data to the application that is subsequently logged verbatim. In the most benign case, an attacker may be able to insert false entries into the log file by providing the application with input that includes appropriate characters. Forged or otherwise corrupted log files can be used to cover an attacker's tracks, possibly by skewing statistics, or even to implicate another party in the commission of a malicious act. If the log file is processed automatically, the attacker can render the file unusable by corrupting the format of the file or injecting unexpected characters. An attacker may inject code or other commands into the log file and take advantage of a vulnerability in the log processing utility."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-30", "Phase": ["Implementation"], "Strategy": "Output Encoding", "Description": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component."}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following web application code attempts to read an integer value from a request object. If the parseInt call fails, then the input is logged with an error message indicating what happened."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tString val = request.getParameter(\"val\");\n\ttry {\n\t\t\tint value = Integer.parseInt(val);\n\t}\n\tcatch (NumberFormatException) {\n\t\tlog.info(\"Failed to parse val = \" + val);\n\t}\n\t...\n```"}, {"BodyText": "If a user submits the string \"twenty-one\" for val, the following entry is logged:"}, {"BodyText": "- INFO: Failed to parse val=twenty-one"}, {"BodyText": "However, if an attacker submits the string \"twenty-one%0a%0aINFO:+User+logged+out%3dbadguy\", the following entry is logged:"}, {"BodyText": "- INFO: Failed to parse val=twenty-one\n\n  - INFO: User logged out=badguy"}, {"BodyText": "Clearly, attackers can use this same mechanism to insert arbitrary log entries."}]}], "ObservedExamples": [{"Reference": "CVE-2006-4624", "Description": "Chain: inject fake log entries with fake timestamps using CRLF injection", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4624"}], "RelatedAttackPatterns": ["268", "81", "93"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-3941", "Description": "A vulnerability has been found in Activity Log Plugin and classified as critical. This vulnerability affects unknown code of the component HTTP Header Handler. The manipulation of the argument X-Forwarded-For leads to improper output neutralization for logs. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-213448."}, {"Reference": "CVE-2021-42010", "Description": "Heron versions <= 0.20.4-incubating allows CRLF log injection because of the lack of escaping in the log statements. Please update to version 0.20.5-incubating which addresses this issue."}, {"Reference": "CVE-2022-4011", "Description": "A vulnerability was found in Simple History Plugin. It has been rated as critical. This issue affects some unknown processing of the component Header Handler. The manipulation of the argument X-Forwarded-For leads to improper output neutralization for logs. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. The identifier VDB-213785 was assigned to this vulnerability."}, {"Reference": "CVE-2022-43883", "Description": " IBM Cognos Analytics 11.1.7, 11.2.0, and 11.2.1 could be vulnerable to a Log Injection attack by constructing URLs from user-controlled data. This could enable attackers to make arbitrary requests to the internal network or to the local file system. IBM X-Force ID: 240266. "}]}
{"ID": "1173", "Name": "Improper Use of Validation Framework", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product does not use, or incorrectly uses, an input validation framework that is provided by the source language or an independent library.", "ExtendedDescription": "Many modern coding languages provide developers with input validation frameworks to make the task of input validation easier and less error-prone. These frameworks will automatically check all input against specified criteria and direct execution to error handlers when invalid input is received. The improper use (i.e., an incorrect implementation or missing altogether) of these frameworks is not directly exploitable, but can lead to an exploitable condition if proper input validation is not performed later in the product. Not using provided input validation frameworks can also hurt the maintainability of code as future developers may not recognize the downstream input validation being used in the place of the validation framework.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "20", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "This weakness may occur when software designers choose to not leverage input validation frameworks provided by the source language."}, {"Phase": "Implementation", "Note": "This weakness may occur when developers do not correctly use a provided input validation framework."}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"], "Note": "Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others."}], "DetectionMethods": [{"DetectionMethodID": "DM-3", "Method": "Automated Static Analysis", "Description": "\n\nSome instances of improper input validation can be detected using automated static analysis.\n\n\nA static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present.\n\n\nExcept in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.\n"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Properly use provided input validation frameworks."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-0174", "Description": "Improper Use of Validation Framework in firmware for some Intel(R) PROSet/Wireless Wi-Fi in multiple operating systems and some Killer(TM) Wi-Fi in Windows 10 and 11 may allow a unauthenticated user to potentially enable denial of service via adjacent access."}, {"Reference": "CVE-2021-0179", "Description": "Improper Use of Validation Framework in software for Intel(R) PROSet/Wireless Wi-Fi and Killer(TM) Wi-Fi in Windows 10 and 11 may allow an unauthenticated user to potentially enable denial of service via adjacent access."}, {"Reference": "CVE-2022-1414", "Description": "3scale API Management 2 does not perform adequate sanitation for user input in multiple fields. An authenticated user could use this flaw to inject scripts and possibly gain access to sensitive information or conduct further attacks."}]}
{"ID": "1174", "Name": "ASP.NET Misconfiguration: Improper Model Validation", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The ASP.NET application does not use, or incorrectly uses, the model validation framework.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1173", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "ASP.NET", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"], "Note": "Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1176", "Name": "Inefficient CPU Computation", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product performs CPU computations using\n         algorithms that are not as efficient as they could be for the\n         needs of the developer, i.e., the computations can be\n         optimized further.", "ExtendedDescription": "\n\nThis issue can make the product perform more slowly, possibly in ways that are noticeable to the users. If an attacker can influence the amount of computation that must be performed, e.g. by triggering worst-case complexity, then this performance problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "405", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}, {"Ordinality": "Primary"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Resource Consumption (CPU)"]}, {"Scope": ["Other"], "Impact": ["Reduce Performance"]}], "ObservedExamples": [{"Reference": "CVE-2022-37734", "Description": "Chain: lexer in Java-based GraphQL server does not enforce maximum of tokens early enough (CWE-696), allowing excessive CPU consumption (CWE-1176)", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-37734"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Top25Examples": [{"Reference": "CVE-2022-37734", "Description": "graphql-java before19.0 is vulnerable to Denial of Service. An attacker can send a malicious GraphQL query that consumes CPU resources. The fixed versions are 19.0 and later, 18.3, and 17.4, and 0.0.0-2022-07-26T05-45-04-226aabd9."}, {"Reference": "CVE-2022-44566", "Description": "A denial of service vulnerability present in ActiveRecord's PostgreSQL adapter <7.0.4.1 and <6.1.7.1. When a value outside the range for a 64bit signed integer is provided to the PostgreSQL connection adapter, it will treat the target column type as numeric. Comparing integer values against numeric values can result in a slow sequential scan resulting in potential Denial of Service."}]}
{"ID": "1177", "Name": "Use of Prohibited Code", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses a function, library, or third party component\n\t     that has been explicitly prohibited, whether by the developer or\n\t     the customer.", "ExtendedDescription": "\n\nThe developer - or customers - may wish to restrict or eliminate use of a function, library, or third party component for any number of reasons, including real or suspected vulnerabilities; difficulty to use securely; export controls or license requirements; obsolete or poorly-maintained code; internal code being scheduled for deprecation; etc.\n\n\nTo reduce risk of vulnerabilities, the developer might maintain a list of \"banned\" functions that programmers must avoid using because the functions are difficult or impossible to use securely. This issue can also make the product more costly and difficult to maintain.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}, {"Ordinality": "Primary"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "DemonstrativeExamples": [{"ID": "DX-5", "Entries": [{"IntroText": "The code below calls the gets() function to read in data from the command line."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t\tchar buf[24];\n\t\tprintf(\"Please enter your name and press <Enter>\\n\");\n\t\tgets(buf);\n\t\t...\n\t}\n```"}, {"BodyText": "However, gets() is inherently unsafe, because it copies all input from STDIN to the buffer without checking size. This allows the user to provide a string that is larger than the buffer size, resulting in an overflow condition."}]}, {"ID": "DX-6", "Entries": [{"IntroText": "The following code attempts to create a local copy of a buffer to perform some manipulations to the data."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid manipulate_string(char * string){\n\t\tchar buf[24];\n\t\tstrcpy(buf, string);\n\t\t...\n\t}\n```"}, {"BodyText": "However, the programmer does not ensure that the size of the data pointed to by string will fit in the local buffer and copies the data with the potentially dangerous strcpy() function. This may result in a buffer overflow condition if an attacker can influence the contents of the string parameter."}]}], "ObservedExamples": [{"Reference": "CVE-2007-1470", "Description": "Library has multiple buffer overflows using sprintf() and strcpy()", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1470"}, {"Reference": "CVE-2007-4004", "Description": "FTP client uses inherently insecure gets() function and is setuid root on some systems, allowing buffer overflow", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-4004"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}}
{"ID": "118", "Name": "Incorrect Access of Indexable Resource ('Range Error')", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "664", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Varies by Context"]}], "RelatedAttackPatterns": ["10", "14", "24", "45", "46", "47", "8", "9"], "MappingNotes": {"Usage": "Discouraged", "Rationale": "This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}}
{"ID": "1187", "Name": "DEPRECATED: Use of Uninitialized Resource", "Abstraction": "Base", "Structure": "Simple", "Status": "Deprecated", "Description": "This entry has been deprecated because it was a duplicate of CWE-908. All content has been transferred to CWE-908.", "MappingNotes": {"Usage": "Prohibited", "Rationale": "This CWE has been deprecated.", "Comments": "See description and name for possible suggestions of other CWEs to consider.", "Reasons": ["Deprecated"]}}
{"ID": "1188", "Name": "Initialization of a Resource with an Insecure Default", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product initializes or sets a resource with a default that is intended to be changed by the administrator, but the default is not secure.", "ExtendedDescription": "\n\nDevelopers often choose default values that leave the product as open and easy to use as possible out-of-the-box, under the assumption that the administrator can (or should) change the default value. However, this ease-of-use comes at a cost when the default is insecure and the administrator does not change it.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1419", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "665", "ViewID": "1003", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "DemonstrativeExamples": [{"ID": "DX-163", "Entries": [{"IntroText": "This code attempts to login a user using credentials from a POST request:"}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n```\n// $user and $pass automatically set from POST request* \n\tif (login_user($user,$pass)) {\n\t```\n\t\t$authorized = true;\n\t}\n```\n...* \n\t\n\tif ($authorized) {\n\t```\n\t\tgeneratePage();\n\t}\n```"}, {"BodyText": "Because the $authorized variable is never initialized, PHP will automatically set $authorized to any value included in the POST request if register_globals is enabled. An attacker can send a POST request with an unexpected third value 'authorized' set to 'true' and gain authorized status without supplying valid credentials."}, {"BodyText": "Here is a fixed version:"}, {"Nature": "Good", "Language": "PHP", "ExampleCode": "```\n\t$user = $_POST['user'];\n\t$pass = $_POST['pass'];\n\t$authorized = false;\n\tif (login_user($user,$pass)) {\n\t\t$authorized = true;\n\t}\n```\n...*"}, {"BodyText": "This code avoids the issue by initializing the $authorized variable to false and explicitly retrieving the login credentials from the $_POST variable. Regardless, register_globals should never be enabled and is disabled by default in current versions of PHP."}]}], "ObservedExamples": [{"Reference": "CVE-2022-36349", "Description": "insecure default variable initialization in BIOS firmware for a hardware board allows DoS", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-36349"}, {"Reference": "CVE-2022-42467", "Description": "A generic database browser interface has a default mode that exposes a web server to the network, allowing queries to the database.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-42467"}], "RelatedAttackPatterns": ["665"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry improves organization of concepts under initialization. The typical CWE model is to cover \"Missing\" and \"Incorrect\" behaviors. Arguably, this entry could be named as \"Incorrect\" instead of \"Insecure.\" This might be changed in the near future."}], "Top25Examples": [{"Reference": "CVE-2022-24706", "Description": "In Apache CouchDB prior to 3.2.2, an attacker can access an improperly secured default installation without authenticating and gain admin privileges. The CouchDB documentation has always made recommendations for properly securing an installation, including recommending using a firewall in front of all CouchDB installations."}, {"Reference": "CVE-2022-42467", "Description": "When running in prototype mode, the h2 webconsole module (accessible from the Prototype menu) is automatically made available with the ability to directly query the database. It was felt that it is safer to require the developer to explicitly enable this capability. As of 2.0.0-M8, this can now be done using the 'isis.prototyping.h2-console.web-allow-remote-access' configuration property; the web console will be unavailable without setting this configuration. As an additional safeguard, the new 'isis.prototyping.h2-console.generate-random-web-admin-password' configuration parameter (enabled by default) requires that the administrator use a randomly generated password to use the console. The password is printed to the log, as \"webAdminPass: xxx\" (where \"xxx\") is the password. To revert to the original behaviour, the administrator would therefore need to set these configuration parameter: isis.prototyping.h2-console.web-allow-remote-access=true isis.prototyping.h2-console.generate-random-web-admin-password=false Note also that the h2 webconsole is never available in production mode, so these safeguards are only to ensure that the webconsole is secured by default also in prototype mode."}, {"Reference": "CVE-2022-25568", "Description": "MotionEye v0.42.1 and below allows attackers to access sensitive information via a GET request to /config/list. To exploit this vulnerability, a regular user password must be unconfigured."}]}
{"ID": "1189", "Name": "Improper Isolation of Shared Resources on System-on-a-Chip (SoC)", "Abstraction": "Base", "Structure": "Simple", "Status": "Stable", "Description": "The System-On-a-Chip (SoC) does not properly isolate shared resources between trusted and untrusted agents.", "ExtendedDescription": "\n\nA System-On-a-Chip (SoC) has a lot of functionality, but it may have a limited number of pins or pads. A pin can only perform one function at a time. However, it can be configured to perform multiple different functions. This technique is called pin multiplexing. Similarly, several resources on the chip may be shared to multiplex and support different features or functions. When such resources are shared between trusted and untrusted agents, untrusted agents may be able to access the assets intended to be accessed only by the trusted agents.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "653", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "668", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "1331", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "System on Chip", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"], "Note": "If resources being used by a trusted user are shared with an untrusted user, the untrusted user may be able to modify the functionality of the shared resource of the trusted user."}, {"Scope": ["Integrity"], "Impact": ["Quality Degradation"], "Note": "The functionality of the shared resource may be intentionally degraded."}], "DetectionMethods": [{"Method": "Automated Dynamic Analysis", "Description": "\n\nPre-silicon / post-silicon: Test access to shared systems resources (memory ranges, control registers, etc.) from untrusted software to verify that the assets are not incorrectly exposed to untrusted agents. Note that access to shared resources can be dynamically allowed or revoked based on system flows. Security testing should cover such dynamic shared resource allocation and access control modification flows.\n", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Strategy": "Separation of Privilege", "Description": "\n\nWhen sharing resources, avoid mixing agents of varying trust levels.\n\n\nUntrusted agents should not share resources with trusted agents.\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Consider the following SoC design. The Hardware Root of Trust (HRoT) local SRAM is memory mapped in the core{0-N} address space. The HRoT allows or disallows access to private memory ranges, thus allowing the sram to function as a mailbox for communication between untrusted and trusted HRoT partitions."}, {"BodyText": "We assume that the threat is from malicious software in the untrusted domain. We assume this software has access to the core{0-N} memory map and can be running at any privilege level on the untrusted cores. The capability of this threat in this example is communication to and from the mailbox region of SRAM modulated by the hrot_iface. To address this threat, information must not enter or exit the shared region of SRAM through hrot_iface when in secure or privileged mode."}]}], "ObservedExamples": [{"Reference": "CVE-2020-8698", "Description": "Processor has improper isolation of shared resources allowing for information disclosure.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-8698"}, {"Reference": "CVE-2019-6260", "Description": "Baseboard Management Controller (BMC) device implements Advanced High-performance Bus (AHB) bridges that do not require authentication for arbitrary read and write access to the BMC's physical address space from the host, and possibly the network [REF-1138].", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-6260"}], "RelatedAttackPatterns": ["124"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "119", "Name": "Improper Restriction of Operations within the Bounds of a Memory Buffer", "Abstraction": "Class", "Structure": "Simple", "Status": "Stable", "Diagram": "/data/images/CWE-119-Diagram.png", "Description": "The product performs operations on a memory buffer, but it reads from or writes to a memory location outside the buffer's intended boundary. This may result in read or write operations on unexpected memory locations that could be linked to other variables, data structures, or internal program data.", "ExtendedDescription": "\n\nCertain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced. This can cause read or write operations to be performed on memory locations that may be associated with other variables, data structures, or internal program data.\n", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "118", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "700", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Often"}, {"Type": "Language", "Name": "C++", "Prevalence": "Often"}, {"Type": "Language", "Class": "Assembly", "Prevalence": "Undetermined"}], "BackgroundDetails": ["Certain languages allow direct addressing of memory locations and do not automatically ensure that these locations are valid for the memory buffer that is being referenced."], "AlternateTerms": [{"Term": "Buffer Overflow", "Description": "This term has many different meanings to different audiences. From a CWE mapping perspective, this term should be avoided where possible. Some researchers, developers, and tools intend for it to mean \"write past the end of a buffer,\" whereas others use the same term to mean \"any read or write outside the boundaries of a buffer, whether before the beginning of the buffer or after the end of the buffer.\" Others could mean \"any action after the end of a buffer, whether it is a read or write.\" Since the term is commonly used for exploitation and for vulnerabilities, it further confuses things."}, {"Term": "buffer overrun", "Description": "Some prominent vendors and researchers use the term \"buffer overrun,\" but most people use \"buffer overflow.\" See the alternate term for \"buffer overflow\" for context."}, {"Term": "memory safety", "Description": "Generally used for techniques that avoid weaknesses related to memory access, such as those identified by CWE-119 and its descendants. However, the term is not formal, and there is likely disagreement between practitioners as to which weaknesses are implicitly covered by the \"memory safety\" term."}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Execute Unauthorized Code or Commands", "Modify Memory"], "Note": "If the memory accessible by the attacker can be effectively controlled, it may be possible to execute arbitrary code, as with a standard buffer overflow. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can alter the intended control flow by redirecting a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator."}, {"Scope": ["Availability", "Confidentiality"], "Impact": ["Read Memory", "DoS: Crash, Exit, or Restart", "DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)"], "Note": "Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop."}, {"Scope": ["Confidentiality"], "Impact": ["Read Memory"], "Note": "In the case of an out-of-bounds read, the attacker may have access to sensitive information. If the sensitive information contains system details, such as the current buffer's position in memory, this knowledge can be used to craft further attacks, possibly with more severe consequences."}], "DetectionMethods": [{"DetectionMethodID": "DM-1", "Method": "Automated Static Analysis", "Description": "\n\nThis weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.\n\n\nAutomated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\n", "Effectiveness": "High", "EffectivenessNotes": "Detection techniques for buffer-related errors are more mature than for most other weakness types."}, {"DetectionMethodID": "DM-2", "Method": "Automated Dynamic Analysis", "Description": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results."}, {"Method": "Automated Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary / Bytecode Quality Analysis\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis\n\t\tBinary Weakness Analysis - including disassembler + source code weakness analysis", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Automated Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tWeb Application Scanner\n\t\tWeb Services Scanner\n\t\tDatabase Scanners", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source\n\t\tManual Source Code Review (not inspections)", "Effectiveness": "SOAR Partial"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tSource Code Quality Analyzer", "Effectiveness": "High"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-3", "Phase": ["Requirements"], "Strategy": "Language Selection", "Description": "\n\nUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nFor example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.\n\n\nBe wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.\n"}, {"MitigationID": "MIT-4.1", "Phase": ["Architecture and Design"], "Strategy": "Libraries or Frameworks", "Description": "\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nExamples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.\n", "EffectivenessNotes": "This is not a complete solution, since many buffer overflows are not related to strings."}, {"MitigationID": "MIT-10", "Phase": ["Operation", "Build and Compilation"], "Strategy": "Environment Hardening", "Description": "\n\nUse automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. \n\n\n D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail. \n", "Effectiveness": "Defense in Depth", "EffectivenessNotes": "\n\n This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application. \n"}, {"MitigationID": "MIT-9", "Phase": ["Implementation"], "Description": "\n\nConsider adhering to the following rules when allocating and managing an application's memory:\n\n\n  - Double check that the buffer is as large as specified.\n\n  - When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.\n\n  - Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.\n\n  - If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.\n\n"}, {"MitigationID": "MIT-11", "Phase": ["Operation", "Build and Compilation"], "Strategy": "Environment Hardening", "Description": "\n\nRun or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. \n\n\n Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. \n\n\n For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]. \n", "Effectiveness": "Defense in Depth", "EffectivenessNotes": "These techniques do not provide a complete solution. For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]"}, {"MitigationID": "MIT-12", "Phase": ["Operation"], "Strategy": "Environment Hardening", "Description": "\n\n Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. \n\n\n For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336]. \n", "Effectiveness": "Defense in Depth", "EffectivenessNotes": "This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application."}, {"MitigationID": "MIT-13", "Phase": ["Implementation"], "Description": "Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.", "Effectiveness": "Moderate", "EffectivenessNotes": "This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131)."}], "DemonstrativeExamples": [{"ID": "DX-1", "Entries": [{"IntroText": "This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid host_lookup(char *user_supplied_addr){\n\t\t\tstruct hostent *hp;\n\t\t\tin_addr_t *addr;\n\t\t\tchar hostname[64];\n\t\t\tin_addr_t inet_addr(const char *cp);\n```\n/*routine that ensures user_supplied_addr is in the right format for conversion */* \n\t\t\t\n\t\t\tvalidate_addr_form(user_supplied_addr);\n\t\t\taddr = inet_addr(user_supplied_addr);\n\t\t\thp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);\n\t\t\tstrcpy(hostname, hp->h_name);}"}, {"BodyText": "This function allocates a buffer of 64 bytes to store the hostname, however there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then the function may overwrite sensitive data or even relinquish control flow to the attacker."}, {"BodyText": "Note that this example also contains an unchecked return value (CWE-252) that can lead to a NULL pointer dereference (CWE-476)."}]}, {"ID": "DX-19", "Entries": [{"IntroText": "This example applies an encoding procedure to an input string and stores it into a buffer."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar * copy_input(char *user_supplied_string){\n\t\t\tint i, dst_index;\n\t\t\tchar *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE);\n\t\t\tif ( MAX_SIZE <= strlen(user_supplied_string) ){\n\t\t\t\tdie(\"user string too long, die evil hacker!\");\n\t\t\t}\n\t\t\tdst_index = 0;\n\t\t\tfor ( i = 0; i < strlen(user_supplied_string); i++ ){\n\t\t\t\t\tif( '&' == user_supplied_string[i] ){\n\t\t\t\t\t\tdst_buf[dst_index++] = '&';\n\t\t\t\t\t\tdst_buf[dst_index++] = 'a';\n\t\t\t\t\t\tdst_buf[dst_index++] = 'm';\n\t\t\t\t\t\tdst_buf[dst_index++] = 'p';\n\t\t\t\t\t\tdst_buf[dst_index++] = ';';\n\t\t\t\t\t}\n\t\t\t\t\telse if ('<' == user_supplied_string[i] ){\n```\n/* encode to &lt; */* \n\t\t\t\t\t\t}\n\t\t\t\t\telse dst_buf[dst_index++] = user_supplied_string[i];}\n\t\t\treturn dst_buf;}"}, {"BodyText": "The programmer attempts to encode the ampersand character in the user-controlled string, however the length of the string is validated before the encoding procedure is applied. Furthermore, the programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands."}]}, {"ID": "DX-90", "Entries": [{"IntroText": "The following example asks a user for an offset into an array to select an item."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint main (int argc, char **argv) {\n\t\tchar *items[] = {\"boat\", \"car\", \"truck\", \"train\"};\n\t\tint index = GetUntrustedOffset();\n\t\tprintf(\"You selected %s\\n\", items[index-1]);\n\t}\n```"}, {"BodyText": "The programmer allows the user to specify which element in the list to select, however an attacker can provide an out-of-bounds offset, resulting in a buffer over-read (CWE-126)."}]}, {"ID": "DX-100", "Entries": [{"IntroText": "In the following code, the method retrieves a value from an array at a specific array index location that is given as an input parameter to the method"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint getValueFromArray(int *array, int len, int index) {\n\t\t\tint value;\n```\n// check that the array index is less than the maximum* \n\t\t\t\n\t\t\t\n\t\t\t *// length of the array* \n\t\t\tif (index < len) {\n\t\t\t```\n```\n// get the value at the specified index of the array* \n\t\t\t\t\tvalue = array[index];}\n\t\t\t\n\t\t\t *// if array index is invalid then output error message* \n\t\t\t\n\t\t\t *// and return value indicating error* \n\t\t\telse {\n\t\t\t```\n\t\t\t\tprintf(\"Value is: %d\\n\", array[index]);\n\t\t\t\tvalue = -1;\n\t\t\t}\n\t\t\treturn value;\n\t}\n```"}, {"BodyText": "However, this method only verifies that the given array index is less than the maximum length of the array but does not check for the minimum value (CWE-839). This will allow a negative value to be accepted as the input array index, which will result in a out of bounds read (CWE-125) and may allow access to sensitive memory. The input array index should be checked to verify that is within the maximum and minimum range required for the array (CWE-129). In this example the if statement should be modified to include a minimum range check, as shown below."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n\t...\n```\n// check that the array index is within the correct* \n\t\n\t\n\t *// range of values for the array* \n\tif (index >= 0 && index < len) {\n\t\n\t..."}]}, {"Entries": [{"IntroText": "Windows provides the _mbs family of functions to perform various operations on multibyte strings. When these functions are passed a malformed multibyte string, such as a string containing a valid leading byte followed by a single null byte, they can read or write past the end of the string buffer causing a buffer overflow. The following functions all pose a risk of buffer overflow: _mbsinc _mbsdec _mbsncat _mbsncpy _mbsnextc _mbsnset _mbsrev _mbsset _mbsstr _mbstok _mbccpy _mbslen"}]}], "ObservedExamples": [{"Reference": "CVE-2021-22991", "Description": "Incorrect URI normalization in application traffic product leads to buffer overflow, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-22991"}, {"Reference": "CVE-2020-29557", "Description": "Buffer overflow in Wi-Fi router web interface, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-29557"}, {"Reference": "CVE-2009-2550", "Description": "Classic stack-based buffer overflow in media player using a long entry in a playlist", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2550"}, {"Reference": "CVE-2009-2403", "Description": "Heap-based buffer overflow in media player using a long entry in a playlist", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2403"}, {"Reference": "CVE-2009-0689", "Description": "large precision value in a format string triggers overflow", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0689"}, {"Reference": "CVE-2009-0690", "Description": "negative offset value leads to out-of-bounds read", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0690"}, {"Reference": "CVE-2009-1532", "Description": "malformed inputs cause accesses of uninitialized or previously-deleted objects, leading to memory corruption", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1532"}, {"Reference": "CVE-2009-1528", "Description": "chain: lack of synchronization leads to memory corruption", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1528"}, {"Reference": "CVE-2021-29529", "Description": "Chain: machine-learning product can have a heap-based buffer overflow (CWE-122) when some integer-oriented bounds are calculated by using ceiling() and floor() on floating point values (CWE-1339)", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-29529"}, {"Reference": "CVE-2009-0558", "Description": "attacker-controlled array index leads to code execution", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0558"}, {"Reference": "CVE-2009-0269", "Description": "chain: -1 value from a function call was intended to indicate an error, but is used as an array index instead.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0269"}, {"Reference": "CVE-2009-0566", "Description": "chain: incorrect calculations lead to incorrect pointer dereference and memory corruption", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0566"}, {"Reference": "CVE-2009-1350", "Description": "product accepts crafted messages that lead to a dereference of an arbitrary pointer", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1350"}, {"Reference": "CVE-2009-0191", "Description": "chain: malformed input causes dereference of uninitialized memory", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0191"}, {"Reference": "CVE-2008-4113", "Description": "OS kernel trusts userland-supplied length value, allowing reading of sensitive information", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4113"}, {"Reference": "CVE-2005-1513", "Description": "Chain: integer overflow in securely-coded mail program leads to buffer overflow. In 2005, this was regarded as unrealistic to exploit, but in 2020, it was rediscovered to be easier to exploit due to evolutions of the technology.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1513"}, {"Reference": "CVE-2003-0542", "Description": "buffer overflow involving a regular expression with a large number of captures", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0542"}, {"Reference": "CVE-2017-1000121", "Description": "chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-1000121"}], "AffectedResources": ["Memory"], "RelatedAttackPatterns": ["10", "100", "123", "14", "24", "42", "44", "45", "46", "47", "8", "9"], "MappingNotes": {"Usage": "Discouraged", "Rationale": "CWE-119 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available.", "Comments": "Look at CWE-119's children and consider mapping to CWEs such as CWE-787: Out-of-bounds Write, CWE-125: Out-of-bounds Read, or others.", "Reasons": ["Frequent Misuse"]}, "Notes": [{"Type": "Applicable Platform", "Note": "\n\nIt is possible in any programming languages without memory management support to attempt an operation outside of the bounds of a memory buffer, but the consequences will vary widely depending on the language, platform, and chip architecture.\n"}], "Top25Examples": [{"Reference": "CVE-2021-30289", "Description": "Possible buffer overflow due to lack of range check while processing a DIAG command for COEX management in Snapdragon Auto, Snapdragon Compute, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables"}, {"Reference": "CVE-2021-31884", "Description": "A vulnerability has been identified in APOGEE MBC (PPC) (BACnet) (All versions), APOGEE MBC (PPC) (P2 Ethernet) (All versions), APOGEE MEC (PPC) (BACnet) (All versions), APOGEE MEC (PPC) (P2 Ethernet) (All versions), APOGEE PXC Compact (BACnet) (All versions < V3.5.4), APOGEE PXC Compact (P2 Ethernet) (All versions < V2.8.19), APOGEE PXC Modular (BACnet) (All versions < V3.5.4), APOGEE PXC Modular (P2 Ethernet) (All versions < V2.8.19), Capital VSTAR (All versions with enabled Ethernet options), Desigo PXC00-E.D (All versions >= V2.3 and < V6.30.016), Desigo PXC00-U (All versions >= V2.3 and < V6.30.016), Desigo PXC001-E.D (All versions >= V2.3 and < V6.30.016), Desigo PXC100-E.D (All versions >= V2.3 and < V6.30.016), Desigo PXC12-E.D (All versions >= V2.3 and < V6.30.016), Desigo PXC128-U (All versions >= V2.3 and < V6.30.016), Desigo PXC200-E.D (All versions >= V2.3 and < V6.30.016), Desigo PXC22-E.D (All versions >= V2.3 and < V6.30.016), Desigo PXC22.1-E.D (All versions >= V2.3 and < V6.30.016), Desigo PXC36.1-E.D (All versions >= V2.3 and < V6.30.016), Desigo PXC50-E.D (All versions >= V2.3 and < V6.30.016), Desigo PXC64-U (All versions >= V2.3 and < V6.30.016), Desigo PXM20-E (All versions >= V2.3 and < V6.30.016), Nucleus NET (All versions), Nucleus ReadyStart V3 (All versions < V2017.02.4), Nucleus Source Code (All versions), TALON TC Compact (BACnet) (All versions < V3.5.4), TALON TC Modular (BACnet) (All versions < V3.5.4). The DHCP client application assumes that the data supplied with the \u201cHostname\u201d DHCP option is NULL terminated. In cases when global hostname variable is not defined, this may lead to Out-of-bound reads, writes, and Denial-of-service conditions. (FSMD-2021-0014)"}, {"Reference": "CVE-2021-35110", "Description": "Possible buffer overflow to improper validation of hash segment of file while allocating memory in Snapdragon Connectivity, Snapdragon Mobile"}, {"Reference": "CVE-2021-3942", "Description": "Certain HP Print products and Digital Sending products may be vulnerable to potential remote code execution and buffer overflow with use of Link-Local Multicast Name Resolution or LLMNR."}, {"Reference": "CVE-2022-22072", "Description": "Buffer overflow can occur due to improper validation of NDP application information length in Snapdragon Auto, Snapdragon Compute, Snapdragon Consumer Electronics Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music"}, {"Reference": "CVE-2022-27624", "Description": "A vulnerability regarding improper restriction of operations within the bounds of a memory buffer is found in the packet decryption functionality of Out-of-Band (OOB) Management. This allows remote attackers to execute arbitrary commands via unspecified vectors. The following models with Synology DiskStation Manager (DSM) versions before 7.1.1-42962-2 may be affected: DS3622xs+, FS3410, and HD6500."}, {"Reference": "CVE-2022-2947", "Description": " Altair HyperView Player versions 2021.1.0.27 and prior perform operations on a memory buffer but can read from or write to a memory location outside of the intended boundary of the buffer. This hits initially as a read access violation, leading to a memory corruption situation. "}, {"Reference": "CVE-2022-3821", "Description": "An off-by-one Error issue was discovered in Systemd in format_timespan() function of time-util.c. An attacker could supply specific values for time and accuracy that leads to buffer overrun in format_timespan(), leading to a Denial of Service."}, {"Reference": "CVE-2022-39343", "Description": "Azure RTOS FileX is a FAT-compatible file system that\u2019s fully integrated with Azure RTOS ThreadX. In versions before 6.2.0, the Fault Tolerant feature of Azure RTOS FileX includes integer under and overflows which may be exploited to achieve buffer overflow and modify memory contents. When a valid log file with correct ID and checksum is detected by the `_fx_fault_tolerant_enable` function an attempt to recover the previous failed write operation is taken by call of `_fx_fault_tolerant_apply_logs`. This function iterates through the log entries and performs required recovery operations. When properly crafted a log including entries of type `FX_FAULT_TOLERANT_DIR_LOG_TYPE` may be utilized to introduce unexpected behavior. This issue has been patched in version 6.2.0. A workaround to fix line 218 in fx_fault_tolerant_apply_logs.c is documented in the GHSA."}, {"Reference": "CVE-2022-43663", "Description": "An integer conversion vulnerability exists in the SORBAx64.dll RecvPacket functionality of WellinTech KingHistorian 35.01.00.05. A specially crafted network packet can lead to a buffer overflow. An attacker can send a malicious packet to trigger this vulnerability."}, {"Reference": "CVE-2022-4904", "Description": "A flaw was found in the c-ares package. The ares_set_sortlist is missing checks about the validity of the input string, which allows a possible arbitrary length stack overflow. This issue may cause a denial of service or a limited impact on confidentiality and integrity."}, {"Reference": "CVE-2022-3461", "Description": "In PHOENIX CONTACT Automationworx Software Suite up to version 1.89 manipulated PC Worx or Config+ files could lead to a heap buffer overflow and a read access violation. Availability, integrity, or confidentiality of an application programming workstation might be compromised by attacks using these vulnerabilities."}, {"Reference": "CVE-2022-34918", "Description": "An issue was discovered in the Linux kernel through 5.18.9. A type confusion bug in nft_set_elem_init (leading to a buffer overflow) could be used by a local attacker to escalate privileges, a different vulnerability than CVE-2022-32250. (The attacker can obtain root access, but must start with an unprivileged user namespace to obtain CAP_NET_ADMIN access.) This can be fixed in nft_setelem_parse_data in net/netfilter/nf_tables_api.c."}, {"Reference": "CVE-2022-43762", "Description": " Lack of verification in B&R APROL Tbase server versions < R 4.2-07 may lead to memory leaks when receiving messages "}, {"Reference": "CVE-2021-22894", "Description": "A buffer overflow vulnerability exists in Pulse Connect Secure before 9.1R11.4 allows a remote authenticated attacker to execute arbitrary code as the root user via maliciously crafted meeting room."}, {"Reference": "CVE-2021-22991", "Description": "On BIG-IP versions 16.0.x before 16.0.1.1, 15.1.x before 15.1.2.1, 14.1.x before 14.1.4, 13.1.x before 13.1.3.6, and 12.1.x before 12.1.5.3, undisclosed requests to a virtual server may be incorrectly handled by the Traffic Management Microkernel (TMM) URI normalization, which may trigger a buffer overflow, resulting in a DoS attack. In certain situations, it may theoretically allow bypass of URL based access control or remote code execution (RCE). Note: Software versions which have reached End of Software Development (EoSD) are not evaluated."}, {"Reference": "CVE-2021-30666", "Description": "A buffer overflow issue was addressed with improved memory handling. This issue is fixed in iOS 12.5.3. Processing maliciously crafted web content may lead to arbitrary code execution. Apple is aware of a report that this issue may have been actively exploited.."}, {"Reference": "CVE-2021-30983", "Description": "A buffer overflow issue was addressed with improved memory handling. This issue is fixed in iOS 15.2 and iPadOS 15.2. An application may be able to execute arbitrary code with kernel privileges."}, {"Reference": "CVE-2021-31979", "Description": "Windows Kernel Elevation of Privilege Vulnerability"}, {"Reference": "CVE-2021-33771", "Description": "Windows Kernel Elevation of Privilege Vulnerability"}, {"Reference": "CVE-2022-22706", "Description": "Arm Mali GPU Kernel Driver allows a non-privileged user to achieve write access to read-only memory pages. This affects Midgard r26p0 through r31p0, Bifrost r0p0 through r35p0, and Valhall r19p0 through r35p0."}, {"Reference": "CVE-2021-44538", "Description": "The olm_session_describe function in Matrix libolm before 3.2.7 is vulnerable to a buffer overflow. The Olm session object represents a cryptographic channel between two parties. Therefore, its state is partially controllable by the remote party of the channel. Attackers can construct a crafted sequence of messages to manipulate the state of the receiver's session in such a way that, for some buffer sizes, a buffer overflow happens on a call to olm_session_describe. Furthermore, safe buffer sizes were undocumented. The overflow content is partially controllable by the attacker and limited to ASCII spaces and digits. The known affected products are Element Web And SchildiChat Web."}, {"Reference": "CVE-2021-44850", "Description": "On Xilinx Zynq-7000 SoC devices, physical modification of an SD boot image allows for a buffer overflow attack in the ROM. Because the Zynq-7000's boot image header is unencrypted and unauthenticated before use, an attacker can modify the boot header stored on an SD card so that a secure image appears to be unencrypted, and they will be able to modify the full range of register initialization values. Normally, these registers will be restricted when booting securely. Of importance to this attack are two registers that control the SD card's transfer type and transfer size. These registers could be modified a way that causes a buffer overflow in the ROM."}, {"Reference": "CVE-2021-30267", "Description": "Possible integer overflow to buffer overflow due to improper input validation in FTM ARA commands in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile"}, {"Reference": "CVE-2021-35105", "Description": "Possible out of bounds access due to improper input validation during graphics profiling in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables"}, {"Reference": "CVE-2022-1778", "Description": "Improper Input Validation vulnerability in Hitachi Energy MicroSCADA X SYS600 while reading a specific configuration file causes a buffer-overflow that causes a failure to start the SYS600. The configuration file can only be accessed by an administrator access. This issue affects: Hitachi Energy MicroSCADA X SYS600 version 10 to version 10.3.1. cpe:2.3:a:hitachienergy:microscada_x_sys600:10:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.1:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.1.1:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.2:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.2.1:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.3:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.3.1:*:*:*:*:*:*:*"}, {"Reference": "CVE-2021-39633", "Description": "In gre_handle_offloads of ip_gre.c, there is a possible page fault due to an invalid memory access. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-150694665References: Upstream kernel"}, {"Reference": "CVE-2022-21852", "Description": "Windows DWM Core Library Elevation of Privilege Vulnerability"}, {"Reference": "CVE-2021-45709", "Description": "An issue was discovered in the crypto2 crate through 2021-10-08 for Rust. During Chacha20 encryption and decryption, an unaligned read of a u32 may occur."}, {"Reference": "CVE-2021-26257", "Description": "Improper buffer restrictions in firmware for some Intel(R) Wireless Bluetooth(R) and Killer(TM) Bluetooth(R) products before version 22.120 may allow an authenticated user to potentially enable denial of service via local access."}, {"Reference": "CVE-2021-26351", "Description": "Insufficient DRAM address validation in System Management Unit (SMU) may result in a DMA (Direct Memory Access) read/write from/to invalid DRAM address that could result in denial of service."}, {"Reference": "CVE-2021-26369", "Description": "A malicious or compromised UApp or ABL may be used by an attacker to send a malformed system call to the bootloader, resulting in out-of-bounds memory accesses."}, {"Reference": "CVE-2021-26378", "Description": "Insufficient bound checks in the System Management Unit (SMU) may result in access to an invalid address space that could result in denial of service."}, {"Reference": "CVE-2021-33847", "Description": "Improper buffer restrictions in firmware for some Intel(R) Wireless Bluetooth(R) and Killer(TM) Bluetooth(R) products before version 22.120 may allow an authenticated user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2021-40017", "Description": "The HW_KEYMASTER module lacks the validity check of the key format. Successful exploitation of this vulnerability may result in out-of-bounds memory access."}, {"Reference": "CVE-2022-20236", "Description": "A drm driver have oob problem, could cause the system crash or EOPProduct: AndroidVersions: Android SoCAndroid ID: A-233124709"}, {"Reference": "CVE-2022-20385", "Description": "a function called 'nla_parse', do not check the len of para, it will check nla_type (which can be controlled by userspace) with 'maxtype' (in this case, it is GSCAN_MAX), then it access polciy array 'policy[type]', which OOB access happens.Product: AndroidVersions: Android SoCAndroid ID: A-238379819"}, {"Reference": "CVE-2022-21160", "Description": "Improper buffer restrictions for some Intel(R) PROSet/Wireless WiFi products may allow an unauthenticated user to potentially enable denial of service via network access."}, {"Reference": "CVE-2022-21237", "Description": "Improper buffer access in firmware for some Intel(R) NUCs may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-24322", "Description": "A CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer vulnerability exists that could cause a disruption of communication between the Modicon controller and the engineering software when an attacker is able to intercept and manipulate specific Modbus response data. Affected Product: EcoStruxure Control Expert (V15.0 SP1 and prior)"}, {"Reference": "CVE-2022-24937", "Description": "Improper Restriction of Operations within the Bounds of a Memory Buffer vulnerability in Silicon Labs Ember ZNet allows Overflow Buffers."}, {"Reference": "CVE-2022-2584", "Description": "The dag-pb codec can panic when decoding invalid blocks."}, {"Reference": "CVE-2022-26045", "Description": "Improper buffer restrictions in some Intel(R) XMM(TM) 7560 Modem software before version M2_7560_R_01.2146.00 may allow a privileged user to potentially enable escalation of privilege via physical access."}, {"Reference": "CVE-2022-26124", "Description": "Improper buffer restrictions in BIOS firmware for some Intel(R) NUC Boards, Intel(R) NUC 8 Boards, Intel(R) NUC 8 Rugged Boards and Intel(R) NUC 8 Rugged Kits before version CHAPLCEL.0059 may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-26125", "Description": "Buffer overflow vulnerabilities exist in FRRouting through 8.1.0 due to wrong checks on the input packet length in isisd/isis_tlvs.c."}, {"Reference": "CVE-2022-26128", "Description": "A buffer overflow vulnerability exists in FRRouting through 8.1.0 due to a wrong check on the input packet length in the babel_packet_examin function in babeld/message.c."}, {"Reference": "CVE-2022-26367", "Description": "Improper buffer restrictions in some Intel(R) XMM(TM) 7560 Modem software before version M2_7560_R_01.2146.00 may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-26763", "Description": "An out-of-bounds access issue was addressed with improved bounds checking. This issue is fixed in tvOS 15.5, iOS 15.5 and iPadOS 15.5, Security Update 2022-004 Catalina, watchOS 8.6, macOS Big Sur 11.6.6, macOS Monterey 12.4. A malicious application may be able to execute arbitrary code with system privileges."}, {"Reference": "CVE-2022-27625", "Description": "A vulnerability regarding improper restriction of operations within the bounds of a memory buffer is found in the message processing functionality of Out-of-Band (OOB) Management. This allows remote attackers to execute arbitrary commands via unspecified vectors. The following models with Synology DiskStation Manager (DSM) versions before 7.1.1-42962-2 may be affected: DS3622xs+, FS3410, and HD6500."}, {"Reference": "CVE-2022-28194", "Description": "NVIDIA Jetson Linux Driver Package contains a vulnerability in the Cboot module tegrabl_cbo.c, where, if TFTP is enabled, a local attacker with elevated privileges can cause a memory buffer overflow, which may lead to code execution, loss of Integrity, limited denial of service, and some impact to confidentiality."}, {"Reference": "CVE-2022-28858", "Description": "Improper buffer restriction in the firmware for some Intel(R) NUC Laptop Kits before version BC0076 may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-29486", "Description": "Improper buffer restrictions in the Hyperscan library maintained by Intel(R) all versions downloaded before 04/29/2022 may allow an unauthenticated user to potentially enable escalation of privilege via network access."}, {"Reference": "CVE-2022-32455", "Description": "In BIG-IP Versions 16.1.x before 16.1.2.2, 15.1.x before 15.1.6.1, 14.1.x before 14.1.5, and all versions of 13.1.x, when a BIG-IP LTM Client SSL profile is configured on a virtual server to perform client certificate authentication with session tickets enabled, undisclosed requests cause the Traffic Management Microkernel (TMM) to terminate. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated. "}, {"Reference": "CVE-2022-32512", "Description": "A CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer vulnerability exists that could cause remote code execution when a command which exploits this vulnerability is utilized. Affected Products: CanBRASS (Versions prior to V7.5.1)"}, {"Reference": "CVE-2022-32569", "Description": "Improper buffer restrictions in BIOS firmware for some Intel(R) NUC M15 Laptop Kits before version BCTGL357.0074 may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-34377", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an Improper SMM communication buffer verification vulnerability. A local malicious user with high Privileges may potentially exploit this vulnerability to perform arbitrary code execution or cause denial of service. "}, {"Reference": "CVE-2022-34406", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an Improper SMM communication buffer verification vulnerability. A local malicious user with high Privileges may potentially exploit this vulnerability to perform arbitrary code execution or cause denial of service. "}, {"Reference": "CVE-2022-34407", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an Improper SMM communication buffer verification vulnerability. A local malicious user with high Privileges may potentially exploit this vulnerability to perform arbitrary code execution or cause denial of service. "}, {"Reference": "CVE-2022-34408", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an Improper SMM communication buffer verification vulnerability. A local malicious user with high Privileges may potentially exploit this vulnerability to perform arbitrary code execution or cause denial of service. "}, {"Reference": "CVE-2022-34409", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an Improper SMM communication buffer verification vulnerability. A local malicious user with high Privileges may potentially exploit this vulnerability to perform arbitrary code execution or cause denial of service. "}, {"Reference": "CVE-2022-34410", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an Improper SMM communication buffer verification vulnerability. A local malicious user with high Privileges may potentially exploit this vulnerability to perform arbitrary code execution or cause denial of service. "}, {"Reference": "CVE-2022-34411", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an Improper SMM communication buffer verification vulnerability. A local malicious user with high Privileges may potentially exploit this vulnerability to perform arbitrary code execution or cause denial of service. "}, {"Reference": "CVE-2022-34412", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an Improper SMM communication buffer verification vulnerability. A local malicious user with high Privileges may potentially exploit this vulnerability to perform arbitrary code execution or cause denial of service. "}, {"Reference": "CVE-2022-34413", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an Improper SMM communication buffer verification vulnerability. A local malicious user with high Privileges may potentially exploit this vulnerability to perform arbitrary code execution or cause denial of service. "}, {"Reference": "CVE-2022-34414", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an Improper SMM communication buffer verification vulnerability. A local malicious user with high Privileges may potentially exploit this vulnerability to perform arbitrary code execution or cause denial of service. "}, {"Reference": "CVE-2022-34415", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an Improper SMM communication buffer verification vulnerability. A local malicious user with high Privileges may potentially exploit this vulnerability to perform arbitrary code execution or cause denial of service. "}, {"Reference": "CVE-2022-34416", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an Improper SMM communication buffer verification vulnerability. A local malicious user with high Privileges may potentially exploit this vulnerability to perform arbitrary code execution or cause denial of service. "}, {"Reference": "CVE-2022-34417", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an Improper SMM communication buffer verification vulnerability. A local malicious user with high Privileges may potentially exploit this vulnerability to perform arbitrary code execution or cause denial of service. "}, {"Reference": "CVE-2022-34418", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an Improper SMM communication buffer verification vulnerability. A local malicious user with high Privileges may potentially exploit this vulnerability to perform arbitrary code execution or cause denial of service. "}, {"Reference": "CVE-2022-34419", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an Improper SMM communication buffer verification vulnerability. A local malicious user with high Privileges may potentially exploit this vulnerability to perform arbitrary code execution or cause denial of service. "}, {"Reference": "CVE-2022-34420", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an Improper SMM communication buffer verification vulnerability. A local malicious user with high Privileges may potentially exploit this vulnerability to perform arbitrary code execution or cause denial of service. "}, {"Reference": "CVE-2022-34421", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an Improper SMM communication buffer verification vulnerability. A local malicious user with high Privileges may potentially exploit this vulnerability to perform arbitrary code execution or cause denial of service. "}, {"Reference": "CVE-2022-34422", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an Improper SMM communication buffer verification vulnerability. A local malicious user with high Privileges may potentially exploit this vulnerability to perform arbitrary code execution or cause denial of service. "}, {"Reference": "CVE-2022-34423", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an Improper SMM communication buffer verification vulnerability. A local malicious user with high Privileges may potentially exploit this vulnerability to perform arbitrary code execution or cause denial of service. "}, {"Reference": "CVE-2022-34488", "Description": "Improper buffer restrictions in the firmware for some Intel(R) NUC Laptop Kits before version BC0076 may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-34764", "Description": "A CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer vulnerability exists that could cause denial of service when parsing the URL. Affected Products: X80 advanced RTU Communication Module (BMENOR2200H) (V1.0), OPC UA Modicon Communication Module (BMENUA0100) (V1.10 and prior)"}, {"Reference": "CVE-2022-34841", "Description": "Improper buffer restrictions in the Intel(R) Media SDK software before version 22.2.2 may allow an authenticated user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-37302", "Description": "A CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer vulnerability exists that could cause a crash of the Control Expert software when an incorrect project file is opened. Affected Products: EcoStruxure Control Expert(V15.1 HF001 and prior)."}, {"Reference": "CVE-2022-39807", "Description": "Due to lack of proper memory management, when a victim opens manipulated SolidWorks Drawing (.sldasm, CoreCadTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible for the application to crash and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-41166", "Description": "Due to lack of proper memory management, when a victim opens manipulated Wavefront Object (.obj, ObjTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible for the application to crash and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-41169", "Description": "Due to lack of proper memory management, when a victim opens manipulated CATIA5 Part (.catpart, CatiaTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible for the application to crash and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-41171", "Description": "Due to lack of proper memory management, when a victim opens manipulated CATIA4 Part (.model, CatiaTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible for the application to crash and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-41173", "Description": "Due to lack of proper memory management, when a victim opens manipulated AutoCAD (.dxf, TeighaTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible for the application to crash and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-41174", "Description": "Due to lack of proper memory management, when a victim opens manipulated Right Hemisphere Material (.rhm, rh.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible for the application to crash and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-41176", "Description": "Due to lack of proper memory management, when a victim opens manipulated Enhanced Metafile (.emf, emf.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible for the application to crash and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-41178", "Description": "Due to lack of proper memory management, when a victim opens manipulated Iges Part and Assembly (.igs, .iges, CoreCadTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible for the application to crash and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-41181", "Description": "Due to lack of proper memory management, when a victim opens manipulated Portable Document Format (.pdf, PDFPublishing.dll) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible for the application to crash and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-41182", "Description": "Due to lack of proper memory management, when a victim opens manipulated Parasolid Part and Assembly (.x_b, CoreCadTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible for the application to crash and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-41183", "Description": "Due to lack of proper memory management, when a victim opens manipulated Windows Cursor File (.cur, ico.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible for the application to crash and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-41188", "Description": "Due to lack of proper memory management, when a victim opens manipulated Wavefront Object (.obj, ObjTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible for the application to crash and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-41192", "Description": "Due to lack of proper memory management, when a victim opens manipulated Jupiter Tesselation (.jt, JTReader.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible for the application to crash and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-41194", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Encapsulated Postscript (.eps, ai.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible for the application to crash and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-41197", "Description": "Due to lack of proper memory management, when a victim opens a manipulated VRML Worlds (.wrl, vrml.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible for the application to crash and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-41342", "Description": "Improper buffer restrictions in the Intel(R) C++ Compiler Classic before version 2021.7.1 for some Intel(R) oneAPI Toolkits before version 2022.3.1 may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-47453", "Description": "In wcn service, there is a possible missing params check. This could lead to local denial of service in wcn service."}, {"Reference": "CVE-2021-20268", "Description": "An out-of-bounds access flaw was found in the Linux kernel's implementation of the eBPF code verifier in the way a user running the eBPF script calls dev_map_init_map or sock_map_alloc. This flaw allows a local user to crash the system or possibly escalate their privileges. The highest threat from this vulnerability is to confidentiality, integrity, as well as system availability."}, {"Reference": "CVE-2021-39997", "Description": "There is a vulnerability of unstrict input parameter verification in the audio assembly.Successful exploitation of this vulnerability may cause out-of-bounds access."}, {"Reference": "CVE-2022-34376", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by manipulating an SMI to cause a denial of service during SMM. "}, {"Reference": "CVE-2022-48297", "Description": "The geofencing kernel code has a vulnerability of not verifying the length of the input data. Successful exploitation of this vulnerability may cause out-of-bounds memory access."}, {"Reference": "CVE-2022-48298", "Description": "The geofencing kernel code does not verify the length of the input data. Successful exploitation of this vulnerability may cause out-of-bounds memory access."}, {"Reference": "CVE-2022-37769", "Description": "libjpeg commit 281daa9 was discovered to contain a segmentation fault via HuffmanDecoder::Get at huffmandecoder.hpp. This vulnerability allows attackers to cause a Denial of Service (DoS) via a crafted file."}, {"Reference": "CVE-2022-37770", "Description": "libjpeg commit 281daa9 was discovered to contain a segmentation fault via LineMerger::GetNextLowpassLine at linemerger.cpp. This vulnerability allows attackers to cause a Denial of Service (DoS) via a crafted file."}, {"Reference": "CVE-2022-39974", "Description": "WASM3 v0.5.0 was discovered to contain a segmentation fault via the component op_Select_i32_srs in wasm3/source/m3_exec.h."}, {"Reference": "CVE-2022-24415", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution during SMM."}, {"Reference": "CVE-2022-24416", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution during SMM."}, {"Reference": "CVE-2022-24419", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution during SMM."}, {"Reference": "CVE-2022-24420", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution during SMM."}, {"Reference": "CVE-2022-24421", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution during SMM."}, {"Reference": "CVE-2021-4204", "Description": "An out-of-bounds (OOB) memory access flaw was found in the Linux kernel's eBPF due to an Improper Input Validation. This flaw allows a local attacker with a special privilege to crash the system or leak internal information."}, {"Reference": "CVE-2022-22558", "Description": "Dell PowerEdge Server BIOS and Dell Precision Workstation 7910 and 7920 Rack BIOS contain an Improper SMM communication buffer verification vulnerability. A Local High Privileged attacker could potentially exploit this vulnerability leading to arbitrary writes or denial of service."}, {"Reference": "CVE-2022-29206", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.SparseTensorDenseAdd` does not fully validate the input arguments. In this case, a reference gets bound to a `nullptr` during kernel execution. This is undefined behavior. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}]}
{"ID": "1190", "Name": "DMA Device Enabled Too Early in Boot Phase", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product.", "ExtendedDescription": "\n\nDMA is included in a number of devices because it allows data transfer between the computer and the connected device, using direct hardware access to read or write directly to main memory without any OS interaction. An attacker could exploit this to access secrets. Several virtualization-based mitigations have been introduced to thwart DMA attacks. These are usually configured/setup during boot time. However, certain IPs that are powered up before boot is complete (known as early boot IPs) may be DMA capable. Such IPs, if not trusted, could launch DMA attacks and gain access to assets that should otherwise be protected.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "696", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "System on Chip", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism", "Modify Memory"], "Likelihood": ["High"], "Note": "DMA devices have direct write access to main memory and due to time of attack will be able to bypass OS or Bootloader access control."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Utilize an IOMMU to orchestrate IO access from the start of the boot process."}], "RelatedAttackPatterns": ["180"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1191", "Name": "On-Chip Debug and Test Interface With Improper Access Control", "Abstraction": "Base", "Structure": "Simple", "Status": "Stable", "Description": "The chip does not implement or does not correctly perform access control to check whether users are authorized to access internal registers and test modes through the physical debug/test interface.", "ExtendedDescription": "\n\nA device's internal information may be accessed through a scan chain of interconnected internal registers, usually through a JTAG interface. The JTAG interface provides access to these registers in a serial fashion in the form of a scan chain for the purposes of debugging programs running on a device. Since almost all information contained within a device may be accessed over this interface, device manufacturers typically insert some form of authentication and authorization to prevent unintended use of this sensitive information. This mechanism is implemented in addition to on-chip protections that are already present.\n\n\nIf authorization, authentication, or some other form of access control is not implemented or not implemented correctly, a user may be able to bypass on-chip protection mechanisms through the debug interface.\n\n\nSometimes, designers choose not to expose the debug pins on the motherboard. Instead, they choose to hide these pins in the intermediate layers of the board. This is primarily done to work around the lack of debug authorization inside the chip. In such a scenario (without debug authorization), when the debug interface is exposed, chip internals are accessible to an attacker.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "284", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Likelihood": ["High"]}, {"Scope": ["Confidentiality"], "Impact": ["Read Memory"], "Likelihood": ["High"]}, {"Scope": ["Authorization"], "Impact": ["Execute Unauthorized Code or Commands"], "Likelihood": ["High"]}, {"Scope": ["Integrity"], "Impact": ["Modify Memory"], "Likelihood": ["High"]}, {"Scope": ["Integrity"], "Impact": ["Modify Application Data"], "Likelihood": ["High"]}, {"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"], "Likelihood": ["High"]}], "DetectionMethods": [{"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAuthentication and authorization of debug and test interfaces should be part of the architecture and design review process. Withholding of private register documentation from the debug and test interface public specification (\"Security by obscurity\") should not be considered as sufficient security.\n"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nDynamic tests should be done in the pre-silicon and post-silicon stages to verify that the debug and test interfaces are not open by default.\n"}, {"Method": "Fuzzing", "Description": "Tests that fuzz Debug and Test Interfaces should ensure that no access without appropriate authentication and authorization is possible.", "Effectiveness": "Moderate"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Strategy": "Separation of Privilege", "Description": "If feasible, the manufacturer should disable the JTAG interface or implement authentication and authorization for the JTAG interface. If authentication logic is added, it should be resistant to timing attacks. Security-sensitive data stored in registers, such as keys, etc. should be cleared when entering debug mode.", "Effectiveness": "High"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "A home, WiFi-router device implements a login prompt which prevents an unauthorized user from issuing any commands on the device until appropriate credentials are provided. The credentials are protected on the device and are checked for strength against attack."}, {"Nature": "Bad", "Language": "Other", "ExampleCode": "If the JTAG interface on this device is not hidden by the manufacturer, the interface may be identified using tools such as JTAGulator. If it is hidden but not disabled, it can be exposed by physically wiring to the board.\n\n\nBy issuing a \"halt\" command before the OS starts, the unauthorized user pauses the watchdog timer and prevents the router from restarting (once the watchdog timer would have expired). Having paused the router, an unauthorized user is able to execute code and inspect and modify data in the device, even extracting all of the router's firmware. This allows the user to examine the router and potentially exploit it."}, {"BodyText": "JTAG is useful to chip and device manufacturers during design, testing, and production and is included in nearly every product. Without proper authentication and authorization, the interface may allow tampering with a product."}, {"Nature": "Good", "Language": "Other", "ExampleCode": "In order to prevent exposing the debugging interface, manufacturers might try to obfuscate the JTAG interface or blow device internal fuses to disable the JTAG interface. Adding authentication and authorization to this interface makes use by unauthorized individuals much more difficult."}]}, {"Entries": [{"IntroText": "The following example code is a snippet from the JTAG wrapper module in the RISC-V debug module of the HACK@DAC'21 Openpiton SoC [REF-1355]. To make sure that the JTAG is accessed securely, the developers have included a primary authentication mechanism based on a password."}, {"BodyText": "The developers employed a Finite State Machine (FSM) to implement this authentication. When a user intends to read from or write to the JTAG module, they must input a password."}, {"BodyText": "In the subsequent state of the FSM module, the entered password undergoes Hash-based Message Authentication Code (HMAC) calculation using an internal HMAC submodule. Once the HMAC for the entered password is computed by the HMAC submodule, the FSM transitions to the next state, where it compares the computed HMAC with the expected HMAC for the password."}, {"BodyText": "If the computed HMAC matches the expected HMAC, the FSM grants the user permission to perform read or write operations on the JTAG module. [REF-1352]"}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "```\n\t...\n\t\tPassChkValid: begin\n\t\t\tif(hashValid) begin\n```\nif(exp_hash == pass_hash) begin** \n\t\t\t\t\n\t\t\t\t```\n```\npass_check = 1'b1;** \n\t\t\t\t **end else begin** \n\t\t\t\t```\n```\npass_check = 1'b0;** \n\t\t\t\t **end\n\t\t\t\t\t state_d = Idle;**  end else begin \n\t\t\t```\n\t\t\t\tstate_d = PassChkValid;\n\t\t\t end\n\t\t end\n\t ...\n```"}, {"BodyText": "However, in the given vulnerable part of the code, the JTAG module has not defined a limitation for several continuous wrong password attempts. This omission poses a significant security risk, allowing attackers to carry out brute-force attacks without restrictions."}, {"BodyText": "Without a limitation on wrong password attempts, an attacker can repeatedly guess different passwords until they gain unauthorized access to the JTAG module. This leads to various malicious activities, such as unauthorized read from or write to debug module interface."}, {"BodyText": "To mitigate the mentioned vulnerability, developers need to implement a restriction on the number of consecutive incorrect password attempts allowed by the JTAG module, which can achieve by incorporating a mechanism that temporarily locks the module after a certain number of failed attempts.[REF-1353][REF-1354]"}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "```\n\t...\n\t case (state_q) \n\t\tIdle: begin\n\t\t ... \n\t\t\telse if ( (dm::dtm_op_e'(dmi.op) == dm::DTM_PASS) && \n```\n(miss_pass_check_cnt_q != 2'b11)**  )\n\t\t\t begin \n\t\t\t```\n\t\t\t\tstate_d = Write;\n\t\t\t\tpass_mode = 1'b1;\n\t\t\t end\n\t\t ...\n\t\t end\n\t\t ...\n\t\tPassChkValid: begin\n\t\t\tif(hashValid) begin\n\t\t\t\tif(exp_hash == pass_hash) begin\n\t\t\t\t\tpass_check = 1'b1;\n\t\t\t\t end else begin \n\t\t\t\t\tpass_check = 1'b0;\n```\nmiss_pass_check_cnt_d = miss_pass_check_cnt_q + 1**  end\n\t\t\t\t state_d = Idle;  end else begin \n\t\t\t```\n\t\t\t\tstate_d = PassChkValid;\n\t\t\t end\n\t\t end\n\t ...\n```"}]}, {"Entries": [{"IntroText": "The example code below is taken from the JTAG access control mechanism of the HACK@DAC'21 buggy OpenPiton SoC [REF-1364]. Access to JTAG allows users to access sensitive information in the system. Hence, access to JTAG is controlled using cryptographic authentication of the users. In this example (see the vulnerable code source), the password checker uses HMAC-SHA256 for authentication. It takes a 512-bit secret message from the user, hashes it using HMAC, and compares its output with the expected output to determine the authenticity of the user."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "...\n\n **logic [31-1:0] data_d,**  data_q;\n ...\n\n **logic [512-1:0] pass_data;** \n ...\n\n```\n\t Write: begin\n\t\t ...\n\t\t\t if (pass_mode) begin\n```\npass_data = { {60{8'h00}}, data_d};** \n\t\t\t\t state_d = PassChk;\n\t\t\t\t pass_mode = 1'b0;\n\t\t\t\t ...\n\t\t\t end\n\t ..."}, {"BodyText": "The vulnerable code shows an incorrect implementation of the HMAC authentication where it only uses the least significant 32 bits of the secret message for the authentication (the remaining 480 bits are hard coded as zeros). As a result, the system is susceptible to brute-force attacks on the access control mechanism of JTAG, where the attacker only needs to determine 32 bits of the secret message instead of 512 bits."}, {"BodyText": "To mitigate this issue, remove the zero padding and use all 512 bits of the secret message for HMAC authentication [REF-1365]."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "...\n\n **logic [512-1:0] data_d,**  data_q;\n ...\n logic [512-1:0] pass_data;\n ...\n\n```\n\t Write: begin\n\t\t ...\n\t\t\t if (pass_mode) begin\n```\npass_data = data_d;** \n\t\t\t\t state_d = PassChk;\n\t\t\t\t pass_mode = 1'b0;\n\t\t\t\t ...\n\t\t\t end\n\t ..."}]}], "ObservedExamples": [{"Reference": "CVE-2019-18827", "Description": "chain: JTAG interface is not disabled (CWE-1191) during ROM code execution, introducing a race condition (CWE-362) to extract encryption keys", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-18827"}], "RelatedAttackPatterns": ["1", "180"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "CWE-1191 and CWE-1244 both involve physical debug access, but the weaknesses are different. CWE-1191 is effectively about missing authorization for a debug interface, i.e. JTAG. CWE-1244 is about providing internal assets with the wrong debug access level, exposing the asset to untrusted debug agents."}], "Top25Examples": [{"Reference": "CVE-2022-45552", "Description": "An Insecure Permissions vulnerability in Shenzhen Zhiboton Electronics ZBT WE1626 Router v 21.06.18 allows attackers to obtain sensitive information via SPI bus interface connected to pinout of the NAND flash memory."}]}
{"ID": "1192", "Name": "Improper Identifier for IP Block used in System-On-Chip (SOC)", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The System-on-Chip (SoC) does not have unique, immutable identifiers for each of its components.", "ExtendedDescription": "\n\nA System-on-Chip (SoC) comprises several components (IP) with varied trust requirements. It is required that each IP is identified uniquely and should distinguish itself from other entities in the SoC without any ambiguity. The unique secured identity is required for various purposes. Most of the time the identity is used to route a transaction or perform certain actions, including resetting, retrieving a sensitive information, and acting upon or on behalf of something else.\n\n\nThere are several variants of this weakness:\n\n\n  - A \"missing\" identifier is when the SoC does not define any mechanism to uniquely identify the IP.\n\n  - An \"insufficient\" identifier might provide some defenses - for example, against the most common attacks - but it does not protect against everything that is intended.\n\n  - A \"misconfigured\" mechanism occurs when a mechanism is available but not implemented correctly.\n\n  - An \"ignored\" identifier occurs when the SoC/IP has not applied any policies or does not act upon the identifier securely.\n\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "657", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "System on Chip", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"], "Likelihood": ["High"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Strategy": "Separation of Privilege", "Description": "\n\n Every identity generated in the SoC should be unique and immutable in hardware. The actions that an IP is trusted or not trusted should be clearly defined, implemented, configured, and tested. If the definition is implemented via a policy, then the policy should be immutable or protected with clear authentication and authorization. \n"}], "RelatedAttackPatterns": ["113"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1193", "Name": "Power-On of Untrusted Execution Core Before Enabling Fabric Access Control", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.", "ExtendedDescription": "\n\n After initial reset, System-on-Chip (SoC) fabric access controls and other security features need to be programmed by trusted firmware as part of the boot sequence. If untrusted IPs or peripheral microcontrollers are enabled first, then the untrusted component can master transactions on the hardware bus and target memory or other assets to compromise the SoC boot firmware.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "696", "ViewID": "1000", "Ordinal": "Primary"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"], "Likelihood": ["High"], "Note": "An untrusted component can master transactions on the HW bus and target memory or other assets to compromise the SoC boot firmware."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "\n\nThe boot sequence should enable fabric access controls and memory protections before enabling third-party hardware IPs and peripheral microcontrollers that use untrusted firmware.\n"}], "RelatedAttackPatterns": ["1", "180"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "12", "Name": "ASP.NET Misconfiguration: Missing Custom Error Page", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "An ASP .NET application must enable custom error pages in order to prevent attackers from mining information from the framework's built-in responses.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "756", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "ASP.NET", "Prevalence": "Undetermined"}], "BackgroundDetails": ["The mode attribute of the <customErrors> tag defines whether custom or default error pages are used."], "ModesOfIntroduction": [{"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "Default error pages gives detailed information about the error that occurred, and should not be used in production environments. Attackers can leverage the additional information provided by a default error page to mount attacks targeted on the framework, database, or other resources used by the application."}], "PotentialMitigations": [{"Phase": ["System Configuration"], "Description": "Handle exceptions appropriately in source code. ASP .NET applications should be configured to use custom error pages instead of the framework default page."}, {"Phase": ["Architecture and Design"], "Description": "Do not attempt to process an error or attempt to mask it."}, {"Phase": ["Implementation"], "Description": "Verify return values are correct and do not supply sensitive information about the system."}], "DemonstrativeExamples": [{"ID": "DX-75", "Entries": [{"IntroText": "The mode attribute of the <customErrors> tag in the Web.config file defines whether custom or default error pages are used."}, {"BodyText": "In the following insecure ASP.NET application setting, custom error message mode is turned off. An ASP.NET error message with detailed stack trace and platform versions will be returned."}, {"Nature": "Bad", "Language": "ASP.NET", "ExampleCode": "```\n\t<customErrors mode=\"Off\" />\n```"}, {"BodyText": "A more secure setting is to set the custom error message mode for remote users only. No defaultRedirect error page is specified. The local user on the web server will see a detailed stack trace. For remote users, an ASP.NET error message with the server customError configuration setting and the platform version will be returned."}, {"Nature": "Good", "Language": "ASP.NET", "ExampleCode": "```\n\t<customErrors mode=\"RemoteOnly\" />\n```"}, {"BodyText": "Another secure option is to set the mode attribute of the <customErrors> tag to use a custom page as follows:"}, {"Nature": "Good", "Language": "ASP.NET", "ExampleCode": "```\n\t<customErrors mode=\"On\" defaultRedirect=\"YourErrorPage.htm\" />\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "120", "Name": "Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product copies an input buffer to an output buffer without verifying that the size of the input buffer is less than the size of the output buffer, leading to a buffer overflow.", "ExtendedDescription": "A buffer overflow condition exists when a product attempts to put more data in a buffer than it can hold, or when it attempts to put data in a memory area outside of the boundaries of a buffer. The simplest type of error, and the most common cause of buffer overflows, is the \"classic\" case in which the product copies the buffer without restricting how much is copied. Other variants exist, but the existence of a classic overflow strongly suggests that the programmer is not considering even the most basic of security protections.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "119", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "119", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "119", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "119", "ViewID": "1340", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "123", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "700", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant"}, {"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}, {"Type": "Language", "Class": "Assembly", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Classic Buffer Overflow", "Description": "This term was frequently used by vulnerability researchers during approximately 1995 to 2005 to differentiate buffer copies without length checks (which had been known about for decades) from other emerging weaknesses that still involved invalid accesses of buffers, as vulnerability researchers began to develop advanced exploitation techniques."}, {"Term": "Unbounded Transfer"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Modify Memory", "Execute Unauthorized Code or Commands"], "Note": "Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of the product's implicit security policy. This can often be used to subvert any other security service."}, {"Scope": ["Availability"], "Impact": ["Modify Memory", "DoS: Crash, Exit, or Restart", "DoS: Resource Consumption (CPU)"], "Note": "Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the product into an infinite loop."}], "DetectionMethods": [{"DetectionMethodID": "DM-1", "Method": "Automated Static Analysis", "Description": "\n\nThis weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.\n\n\nAutomated static analysis generally does not account for environmental considerations when reporting out-of-bounds memory operations. This can make it difficult for users to determine which warnings should be investigated first. For example, an analysis tool might report buffer overflows that originate from command line arguments in a program that is not expected to run with setuid or other special privileges.\n", "Effectiveness": "High", "EffectivenessNotes": "Detection techniques for buffer-related errors are more mature than for most other weakness types."}, {"DetectionMethodID": "DM-2", "Method": "Automated Dynamic Analysis", "Description": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results."}, {"DetectionMethodID": "DM-9", "Method": "Manual Analysis", "Description": "Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large."}, {"Method": "Automated Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis\n\t\tBinary Weakness Analysis - including disassembler + source code weakness analysis", "Effectiveness": "High"}, {"Method": "Manual Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Automated Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tWeb Application Scanner\n\t\tWeb Services Scanner\n\t\tDatabase Scanners", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source\n\t\tManual Source Code Review (not inspections)", "Effectiveness": "SOAR Partial"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer", "Effectiveness": "High"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-3", "Phase": ["Requirements"], "Strategy": "Language Selection", "Description": "\n\nUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nFor example, many languages that perform their own memory management, such as Java and Perl, are not subject to buffer overflows. Other languages, such as Ada and C#, typically provide overflow protection, but the protection can be disabled by the programmer.\n\n\nBe wary that a language's interface to native code may still be subject to overflows, even if the language itself is theoretically safe.\n"}, {"MitigationID": "MIT-4.1", "Phase": ["Architecture and Design"], "Strategy": "Libraries or Frameworks", "Description": "\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nExamples include the Safe C String Library (SafeStr) by Messier and Viega [REF-57], and the Strsafe.h library from Microsoft [REF-56]. These libraries provide safer versions of overflow-prone string-handling functions.\n", "EffectivenessNotes": "This is not a complete solution, since many buffer overflows are not related to strings."}, {"MitigationID": "MIT-10", "Phase": ["Operation", "Build and Compilation"], "Strategy": "Environment Hardening", "Description": "\n\nUse automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. \n\n\n D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail. \n", "Effectiveness": "Defense in Depth", "EffectivenessNotes": "\n\n This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application. \n"}, {"MitigationID": "MIT-9", "Phase": ["Implementation"], "Description": "\n\nConsider adhering to the following rules when allocating and managing an application's memory:\n\n\n  - Double check that your buffer is as large as you specify.\n\n  - When using functions that accept a number of bytes to copy, such as strncpy(), be aware that if the destination buffer size is equal to the source buffer size, it may not NULL-terminate the string.\n\n  - Check buffer boundaries if accessing the buffer in a loop and make sure there is no danger of writing past the allocated space.\n\n  - If necessary, truncate all input strings to a reasonable length before passing them to the copy and concatenation functions.\n\n"}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-15", "Phase": ["Architecture and Design"], "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."}, {"MitigationID": "MIT-11", "Phase": ["Operation", "Build and Compilation"], "Strategy": "Environment Hardening", "Description": "\n\nRun or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. \n\n\n Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. \n\n\n For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]. \n", "Effectiveness": "Defense in Depth", "EffectivenessNotes": "These techniques do not provide a complete solution. For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]"}, {"MitigationID": "MIT-12", "Phase": ["Operation"], "Strategy": "Environment Hardening", "Description": "\n\n Use a CPU and operating system that offers Data Execution Protection (using hardware NX or XD bits) or the equivalent techniques that simulate this feature in software, such as PaX [REF-60] [REF-61]. These techniques ensure that any instruction executed is exclusively at a memory address that is part of the code segment. \n\n\n For more information on these techniques see D3-PSEP (Process Segment Execution Prevention) from D3FEND [REF-1336]. \n", "Effectiveness": "Defense in Depth", "EffectivenessNotes": "This is not a complete solution, since buffer overflows could be used to overwrite nearby variables to modify the software's state in dangerous ways. In addition, it cannot be used in cases in which self-modifying code is required. Finally, an attack could still cause a denial of service, since the typical response is to exit the application."}, {"Phase": ["Build and Compilation", "Operation"], "Description": "Most mitigating technologies at the compiler or OS level to date address only a subset of buffer overflow problems and rarely provide complete protection against even that subset. It is good practice to implement strategies to increase the workload of an attacker, such as leaving the attacker to guess an unknown value that changes every program execution."}, {"MitigationID": "MIT-13", "Phase": ["Implementation"], "Description": "Replace unbounded copy functions with analogous functions that support length arguments, such as strcpy with strncpy. Create these if they are not available.", "Effectiveness": "Moderate", "EffectivenessNotes": "This approach is still susceptible to calculation errors, including issues such as off-by-one errors (CWE-193) and incorrectly calculating buffer lengths (CWE-131)."}, {"MitigationID": "MIT-21", "Phase": ["Architecture and Design"], "Strategy": "Enforcement by Conversion", "Description": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs."}, {"MitigationID": "MIT-17", "Phase": ["Architecture and Design", "Operation"], "Strategy": "Environment Hardening", "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."}, {"MitigationID": "MIT-22", "Phase": ["Architecture and Design", "Operation"], "Strategy": "Sandbox or Jail", "Description": "\n\nRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\n\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\n\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\n\n\nBe careful to avoid CWE-243 and other weaknesses related to jails.\n", "Effectiveness": "Limited", "EffectivenessNotes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code asks the user to enter their last name and then attempts to store the value entered in the last_name array."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar last_name[20];\n\tprintf (\"Enter your last name: \");\n\tscanf (\"%s\", last_name);\n```"}, {"BodyText": "The problem with the code above is that it does not restrict or limit the size of the name entered by the user. If the user enters \"Very_very_long_last_name\" which is 24 characters long, then a buffer overflow will occur since the array can only hold 20 characters total."}]}, {"ID": "DX-6", "Entries": [{"IntroText": "The following code attempts to create a local copy of a buffer to perform some manipulations to the data."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid manipulate_string(char * string){\n\t\tchar buf[24];\n\t\tstrcpy(buf, string);\n\t\t...\n\t}\n```"}, {"BodyText": "However, the programmer does not ensure that the size of the data pointed to by string will fit in the local buffer and copies the data with the potentially dangerous strcpy() function. This may result in a buffer overflow condition if an attacker can influence the contents of the string parameter."}]}, {"ID": "DX-5", "Entries": [{"IntroText": "The code below calls the gets() function to read in data from the command line."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t\tchar buf[24];\n\t\tprintf(\"Please enter your name and press <Enter>\\n\");\n\t\tgets(buf);\n\t\t...\n\t}\n```"}, {"BodyText": "However, gets() is inherently unsafe, because it copies all input from STDIN to the buffer without checking size. This allows the user to provide a string that is larger than the buffer size, resulting in an overflow condition."}]}, {"Entries": [{"IntroText": "In the following example, a server accepts connections from a client and processes the client request. After accepting a client connection, the program will obtain client information using the gethostbyaddr method, copy the hostname of the client that connected to a local variable and output the hostname of the client to a log file."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t...\n\t\t\tstruct hostent *clienthp;\n\t\t\tchar hostname[MAX_LEN];\n\t\t\t// create server socket, bind to server address and listen on socket\n\t\t\t...\n\t\t\t// accept client connections and process requests\n\t\t\tint count = 0;\n\t\t\tfor (count = 0; count < MAX_CONNECTIONS; count++) {\n\t\t\t\t\tint clientlen = sizeof(struct sockaddr_in);\n\t\t\t\t\tint clientsocket = accept(serversocket, (struct sockaddr *)&clientaddr, &clientlen);\n\t\t\t\t\tif (clientsocket >= 0) {\n\t\t\t\t\t\t\tclienthp = gethostbyaddr((char*) &clientaddr.sin_addr.s_addr, sizeof(clientaddr.sin_addr.s_addr), AF_INET);\n\t\t\t\t\t\t\tstrcpy(hostname, clienthp->h_name);\n\t\t\t\t\t\t\tlogOutput(\"Accepted client connection from host \", hostname);\n\t\t\t\t\t\t\t// process client request\n\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\tclose(clientsocket);\n\t\t\t\t\t}\n\t\t\t}\n\t\t\tclose(serversocket);\n\t...\n```"}, {"BodyText": "However, the hostname of the client that connected may be longer than the allocated size for the local hostname variable. This will result in a buffer overflow when copying the client hostname to the local variable using the strcpy method."}]}], "ObservedExamples": [{"Reference": "CVE-2000-1094", "Description": "buffer overflow using command with long argument", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1094"}, {"Reference": "CVE-1999-0046", "Description": "buffer overflow in local program using long environment variable", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0046"}, {"Reference": "CVE-2002-1337", "Description": "buffer overflow in comment characters, when product increments a counter for a \">\" but does not decrement for \"<\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1337"}, {"Reference": "CVE-2003-0595", "Description": "By replacing a valid cookie value with an extremely long string of characters, an attacker may overflow the application's buffers.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0595"}, {"Reference": "CVE-2001-0191", "Description": "By replacing a valid cookie value with an extremely long string of characters, an attacker may overflow the application's buffers.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0191"}], "FunctionalAreas": ["Memory Management"], "AffectedResources": ["Memory"], "RelatedAttackPatterns": ["10", "100", "14", "24", "42", "44", "45", "46", "47", "67", "8", "9", "92"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "There are some indications that this CWE ID might be misused and selected simply because it mentions \"buffer overflow\" - an increasingly vague term. This CWE entry is only appropriate for \"Buffer Copy\" operations (not buffer reads), in which where there is no \"Checking [the] Size of Input\", and (by implication of the copy) writing past the end of the buffer.", "Comments": "If the vulnerability being analyzed involves out-of-bounds reads, then consider CWE-125 or descendants. For root cause analysis: if there is any input validation, consider children of CWE-20 such as CWE-1284. If there is a calculation error for buffer sizes, consider CWE-131 or similar.", "Reasons": ["Frequent Misuse"]}, "Notes": [{"Type": "Relationship", "Note": "At the code level, stack-based and heap-based overflows do not differ significantly, so there usually is not a need to distinguish them. From the attacker perspective, they can be quite different, since different techniques are required to exploit them."}, {"Type": "Terminology", "Note": "Many issues that are now called \"buffer overflows\" are substantively different than the \"classic\" overflow, including entirely different bug types that rely on overflow exploit techniques, such as integer signedness errors, integer overflows, and format string bugs. This imprecise terminology can make it difficult to determine which variant is being reported."}], "Top25Examples": [{"Reference": "CVE-2021-38687", "Description": "A stack buffer overflow vulnerability has been reported to affect QNAP NAS running Surveillance Station. If exploited, this vulnerability allows attackers to execute arbitrary code. We have already fixed this vulnerability in the following versions of Surveillance Station: QTS 5.0.0 (64 bit): Surveillance Station 5.2.0.4.2 ( 2021/10/26 ) and later QTS 5.0.0 (32 bit): Surveillance Station 5.2.0.3.2 ( 2021/10/26 ) and later QTS 4.3.6 (64 bit): Surveillance Station 5.1.5.4.6 ( 2021/10/26 ) and later QTS 4.3.6 (32 bit): Surveillance Station 5.1.5.3.6 ( 2021/10/26 ) and later QTS 4.3.3: Surveillance Station 5.1.5.3.6 ( 2021/10/26 ) and later"}, {"Reference": "CVE-2021-38689", "Description": "A stack buffer overflow vulnerability has been reported to affect QNAP device running QVR Elite, QVR Pro, QVR Guard. If exploited, this vulnerability allows attackers to execute arbitrary code. We have already fixed this vulnerability in the following versions of QVR Elite, QVR Pro, QVR Guard: QuTS hero h5.0.0: QVR Elite 2.1.4.0 (2021/12/06) and later QuTS hero h4.5.4: QVR Elite 2.1.4.0 (2021/12/06) and later QTS 5.0.0: QVR Elite 2.1.4.0 (2021/12/06) and later QTS 4.5.4: QVR Elite 2.1.4.0 (2021/12/06) and later QTS 4.5.4: QVR Pro 2.1.3.0 (2021/12/06) and later QTS 5.0.0: QVR Pro 2.1.3.0 (2021/12/06) and later QTS 4.5.4: QVR Guard 2.1.3.0 (2021/12/06) and later QTS 5.0.0: QVR Guard 2.1.3.0 (2021/12/06) and later"}, {"Reference": "CVE-2021-38691", "Description": "A stack buffer overflow vulnerability has been reported to affect QNAP device running QVR Elite, QVR Pro, QVR Guard. If exploited, this vulnerability allows attackers to execute arbitrary code. We have already fixed this vulnerability in the following versions of QVR Elite, QVR Pro, QVR Guard: QuTS hero h5.0.0: QVR Elite 2.1.4.0 (2021/12/06) and later QuTS hero h4.5.4: QVR Elite 2.1.4.0 (2021/12/06) and later QTS 5.0.0: QVR Elite 2.1.4.0 (2021/12/06) and later QTS 4.5.4: QVR Elite 2.1.4.0 (2021/12/06) and later QTS 4.5.4: QVR Pro 2.1.3.0 (2021/12/06) and later QTS 5.0.0: QVR Pro 2.1.3.0 (2021/12/06) and later QTS 4.5.4: QVR Guard 2.1.3.0 (2021/12/06) and later QTS 5.0.0: QVR Guard 2.1.3.0 (2021/12/06) and later"}, {"Reference": "CVE-2021-38692", "Description": "A stack buffer overflow vulnerability has been reported to affect QNAP device running QVR Elite, QVR Pro, QVR Guard. If exploited, this vulnerability allows attackers to execute arbitrary code. We have already fixed this vulnerability in the following versions of QVR Elite, QVR Pro, QVR Guard: QuTS hero h5.0.0: QVR Elite 2.1.4.0 (2021/12/06) and later QuTS hero h4.5.4: QVR Elite 2.1.4.0 (2021/12/06) and later QTS 5.0.0: QVR Elite 2.1.4.0 (2021/12/06) and later QTS 4.5.4: QVR Elite 2.1.4.0 (2021/12/06) and later QTS 4.5.4: QVR Pro 2.1.3.0 (2021/12/06) and later QTS 5.0.0: QVR Pro 2.1.3.0 (2021/12/06) and later QTS 4.5.4: QVR Guard 2.1.3.0 (2021/12/06) and later QTS 5.0.0: QVR Guard 2.1.3.0 (2021/12/06) and later"}, {"Reference": "CVE-2021-42728", "Description": "Adobe Bridge 11.1.1 (and earlier) is affected by a stack overflow vulnerability due to insecure handling of a crafted file, potentially resulting in arbitrary code execution in the context of the current user. Exploitation requires user interaction in that a victim must open a crafted file in Bridge."}, {"Reference": "CVE-2022-24313", "Description": "A CWE-120: Buffer Copy without Checking Size of Input vulnerability exists that could cause a stack-based buffer overflow potentially leading to remote code execution when an attacker sends a specially crafted message. Affected Product: Interactive Graphical SCADA System Data Server (V15.0.0.22020 and prior)"}, {"Reference": "CVE-2022-24324", "Description": "A CWE-120: Buffer Copy without Checking Size of Input vulnerability exists that could cause a stack-based buffer overflow potentially leading to remote code execution when an attacker sends a specially crafted message. Affected Products: IGSS Data Server - IGSSdataServer.exe (Versions prior to V15.0.0.22073)"}, {"Reference": "CVE-2022-24903", "Description": "Rsyslog is a rocket-fast system for log processing. Modules for TCP syslog reception have a potential heap buffer overflow when octet-counted framing is used. This can result in a segfault or some other malfunction. As of our understanding, this vulnerability can not be used for remote code execution. But there may still be a slight chance for experts to do that. The bug occurs when the octet count is read. While there is a check for the maximum number of octets, digits are written to a heap buffer even when the octet count is over the maximum, This can be used to overrun the memory buffer. However, once the sequence of digits stop, no additional characters can be added to the buffer. In our opinion, this makes remote exploits impossible or at least highly complex. Octet-counted framing is one of two potential framing modes. It is relatively uncommon, but enabled by default on receivers. Modules `imtcp`, `imptcp`, `imgssapi`, and `imhttp` are used for regular syslog message reception. It is best practice not to directly expose them to the public. When this practice is followed, the risk is considerably lower. Module `imdiag` is a diagnostics module primarily intended for testbench runs. We do not expect it to be present on any production installation. Octet-counted framing is not very common. Usually, it needs to be specifically enabled at senders. If users do not need it, they can turn it off for the most important modules. This will mitigate the vulnerability."}, {"Reference": "CVE-2022-24949", "Description": "A privilege escalation to root exists in Eternal Terminal prior to version 6.2.0. This is due to the combination of a race condition, buffer overflow, and logic bug all in PipeSocketHandler::listen()."}, {"Reference": "CVE-2022-32527", "Description": "A CWE-120: Buffer Copy without Checking Size of Input vulnerability exists that could cause a stack-based buffer overflow, potentially leading to remote code execution when an attacker sends specially crafted alarm cache data messages. Affected Products: IGSS Data Server - IGSSdataServer.exe (Versions prior to V15.0.0.22170)"}, {"Reference": "CVE-2022-32529", "Description": "A CWE-120: Buffer Copy without Checking Size of Input vulnerability exists that could cause a stack-based buffer overflow, potentially leading to remote code execution when an attacker sends specially crafted log data request messages. Affected Products: IGSS Data Server - IGSSdataServer.exe (Versions prior to V15.0.0.22170)"}, {"Reference": "CVE-2022-35928", "Description": "AES Crypt is a file encryption software for multiple platforms. AES Crypt for Linux built using the source on GitHub and having the version number 3.11 has a vulnerability with respect to reading user-provided passwords and confirmations via command-line prompts. Passwords lengths were not checked before being read. This vulnerability may lead to buffer overruns. This does _not_ affect source code found on aescrypt.com, nor is the vulnerability present when providing a password or a key via the `-p` or `-k` command-line options. The problem was fixed via in commit 68761851b and will be included in release 3.16. Users are advised to upgrade. Users unable to upgrade should us the `-p` or `-k` options to provide a password or key."}, {"Reference": "CVE-2022-38459", "Description": "A stack-based buffer overflow vulnerability exists in the httpd downfile.cgi functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted HTTP request can lead to remote code execution. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2022-40985", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the '(ddns1|ddns2) hostname WORD' command template."}, {"Reference": "CVE-2022-40986", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the '(ddns1|ddns2) mx WORD' command template."}, {"Reference": "CVE-2022-40987", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the '(ddns1|ddns2) username WORD password CODE' command template."}, {"Reference": "CVE-2022-40988", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'ipv6 static dns WORD WORD WORD' command template."}, {"Reference": "CVE-2022-40989", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'bandwidth WORD dlrate <1-9999> dlceil <1-9999> ulrate <1-9999> ulceil <1-9999> priority (highest|high|normal|low|lowest)' command template."}, {"Reference": "CVE-2022-40990", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'no bandwidth WORD dlrate <1-9999> dlceil <1-9999> ulrate <1-9999> ulceil <1-9999> priority (highest|high|normal|low|lowest)' command template."}, {"Reference": "CVE-2022-40991", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'firmwall domain WORD description (WORD|null)' command template."}, {"Reference": "CVE-2022-40992", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'no firmwall domain WORD description (WORD|null)' command template."}, {"Reference": "CVE-2022-40993", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'firmwall keyword WORD description (WORD|null)' command template."}, {"Reference": "CVE-2022-40994", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'no firmwall keyword WORD description (WORD|null)' command template."}, {"Reference": "CVE-2022-40995", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'firmwall srcmac (WORD|null) srcip (A.B.C.D|null) dstip (A.B.C.D|null) protocol (none|tcp|udp|icmp) srcport (<1-65535>|null) dstport (<1-65535>|null) policy (drop|accept) description (WORD|null)' command template."}, {"Reference": "CVE-2022-40996", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'no firmwall srcmac (WORD|null) srcip (A.B.C.D|null) dstip (A.B.C.D|null) protocol (none|tcp|udp|icmp) srcport (<1-65535>|null) dstport (<1-65535>|null) policy (drop|accept) description (WORD|null)' command template."}, {"Reference": "CVE-2022-40997", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'gre index <1-8> destination A.B.C.D/M description (WORD|null)' command template."}, {"Reference": "CVE-2022-40998", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'no gre index <1-8> destination A.B.C.D/M description (WORD|null)' command template."}, {"Reference": "CVE-2022-40999", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'gre index <1-8> tunnel A.B.C.D source (A.B.C.D|null) dest A.B.C.D keepalive (on|off) interval (<0-255>|null) retry (<0-255>|null) description (WORD|null)' command template."}, {"Reference": "CVE-2022-41000", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'no gre index <1-8> tunnel A.B.C.D source (A.B.C.D|null) dest A.B.C.D keepalive (on|off) interval (<0-255>|null) retry (<0-255>|null) description (WORD|null)' command template."}, {"Reference": "CVE-2022-41001", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'icmp check link WORD destination WORD interval <1-255> retries <1-255> description (WORD|null)' command template."}, {"Reference": "CVE-2022-41002", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'no icmp check link WORD destination WORD interval <1-255> retries <1-255> description (WORD|null)' command template."}, {"Reference": "CVE-2022-41003", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'ip nat outside source (udp|tcp|all) (WORD|null) WORD to A.B.C.D (WORD|null) description (WORD|null)' command template."}, {"Reference": "CVE-2022-41004", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'no ip nat outside source (udp|tcp|all) (WORD|null) WORD to A.B.C.D (WORD|null) description (WORD|null)' command template."}, {"Reference": "CVE-2022-41005", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'ip static route destination A.B.C.D gateway A.B.C.D mask A.B.C.D metric <0-10> interface (lan|wan|vpn) description WORD' command template."}, {"Reference": "CVE-2022-41006", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'no ip static route destination A.B.C.D gateway A.B.C.D mask A.B.C.D metric <0-10> interface (lan|wan|vpn) description WORD' command template."}, {"Reference": "CVE-2022-41007", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'port redirect protocol (tcp|udp|tcp/udp) inport <1-65535> dstaddr A.B.C.D export <1-65535> description WORD' command template."}, {"Reference": "CVE-2022-41008", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'no port redirect protocol (tcp|udp|tcp/udp) inport <1-65535> dstaddr A.B.C.D export <1-65535> description WORD' command template."}, {"Reference": "CVE-2022-41009", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'port triger protocol (tcp|udp|tcp/udp) triger port <1-65535> forward port <1-65535> description WORD' command template."}, {"Reference": "CVE-2022-41010", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'no port triger protocol (tcp|udp|tcp/udp) triger port <1-65535> forward port <1-65535> description WORD' command template."}, {"Reference": "CVE-2022-41011", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'schedule link1 WORD link2 WORD policy (failover|backup) description (WORD|null)' command template."}, {"Reference": "CVE-2022-41012", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'no schedule link1 WORD link2 WORD policy (failover|backup) description (WORD|null)' command template."}, {"Reference": "CVE-2022-41013", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'static dhcp mac WORD (WORD|null) ip A.B.C.D hostname (WORD|null) description (WORD|null)' command template."}, {"Reference": "CVE-2022-41014", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'no static dhcp mac WORD (WORD|null) ip A.B.C.D hostname (WORD|null) description (WORD|null)' command template."}, {"Reference": "CVE-2022-41015", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'vpn basic protocol (l2tp|pptp) name WORD server WORD username WORD passsword WORD firmwall (on|off) defroute (on|off)' command template."}, {"Reference": "CVE-2022-41016", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'no vpn basic protocol (l2tp|pptp) name WORD server WORD username WORD passsword WORD firmwall (on|off) defroute (on|off)' command template."}, {"Reference": "CVE-2022-41017", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'vpn basic protocol (l2tp|pptp) name WORD server WORD username WORD passsword WORD firmwall (on|off) defroute (on|off) localip A.B.C.D' command template."}, {"Reference": "CVE-2022-41018", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'no vpn basic protocol (l2tp|pptp) name WORD server WORD username WORD passsword WORD firmwall (on|off) defroute (on|off) localip A.B.C.D' command template."}, {"Reference": "CVE-2022-41024", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'no vpn pptp advanced name WORD dns (yes|no) mtu <128-16384> mru <128-16384> mppe (on|off) stateful (on|off)' command template."}, {"Reference": "CVE-2022-41025", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'vpn pptp advanced name WORD dns (yes|no) mtu <128-16384> mru <128-16384> mppe (on|off) stateful (on|off) options WORD' command template."}, {"Reference": "CVE-2022-41026", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'no vpn pptp advanced name WORD dns (yes|no) mtu <128-16384> mru <128-16384> mppe (on|off) stateful (on|off) options WORD' command template."}, {"Reference": "CVE-2022-41027", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'vpn schedule name1 WORD name2 WORD policy (failover|backup) description (WORD|null)' command template."}, {"Reference": "CVE-2022-41028", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'no vpn schedule name1 WORD name2 WORD policy (failover|backup) description (WORD|null)' command template."}, {"Reference": "CVE-2022-41029", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'wlan filter mac address WORD descript WORD' command template."}, {"Reference": "CVE-2022-41030", "Description": "Several stack-based buffer overflow vulnerabilities exist in the DetranCLI command parsing functionality of Siretta QUARTZ-GOLD G5.0.1.5-210720-141020. A specially-crafted network packet can lead to arbitrary command execution. An attacker can send a sequence of requests to trigger these vulnerabilities.This buffer overflow is in the function that manages the 'no wlan filter mac address WORD descript WORD' command template."}, {"Reference": "CVE-2022-4172", "Description": "An integer overflow and buffer overflow issues were found in the ACPI Error Record Serialization Table (ERST) device of QEMU in the read_erst_record() and write_erst_record() functions. Both issues may allow the guest to overrun the host buffer allocated for the ERST memory device. A malicious guest could use these flaws to crash the QEMU process on the host."}, {"Reference": "CVE-2022-32522", "Description": "A CWE-120: Buffer Copy without Checking Size of Input vulnerability exists that could cause a stack-based buffer overflow, potentially leading to remote code execution when an attacker sends specially crafted mathematically reduced data request messages. Affected Products: IGSS Data Server - IGSSdataServer.exe (Versions prior to V15.0.0.22170)"}, {"Reference": "CVE-2022-32523", "Description": "A CWE-120: Buffer Copy without Checking Size of Input vulnerability exists that could cause a stack-based buffer overflow, potentially leading to remote code execution when an attacker sends specially crafted online data request messages. Affected Products: IGSS Data Server - IGSSdataServer.exe (Versions prior to V15.0.0.22170)"}, {"Reference": "CVE-2022-32524", "Description": "A CWE-120: Buffer Copy without Checking Size of Input vulnerability exists that could cause a stack-based buffer overflow, potentially leading to remote code execution when an attacker sends specially crafted time reduced data messages. Affected Products: IGSS Data Server - IGSSdataServer.exe (Versions prior to V15.0.0.22170)"}, {"Reference": "CVE-2022-32525", "Description": "A CWE-120: Buffer Copy without Checking Size of Input vulnerability exists that could cause a stack-based buffer overflow, potentially leading to remote code execution when an attacker sends specially crafted alarm data messages. Affected Products: IGSS Data Server - IGSSdataServer.exe (Versions prior to V15.0.0.22170)"}, {"Reference": "CVE-2022-32526", "Description": "A CWE-120: Buffer Copy without Checking Size of Input vulnerability exists that could cause a stack-based buffer overflow, potentially leading to remote code execution when an attacker sends specially crafted setting value messages. Affected Products: IGSS Data Server - IGSSdataServer.exe (Versions prior to V15.0.0.22170)"}, {"Reference": "CVE-2022-24754", "Description": "PJSIP is a free and open source multimedia communication library written in C language. In versions prior to and including 2.12 PJSIP there is a stack-buffer overflow vulnerability which only impacts PJSIP users who accept hashed digest credentials (credentials with data_type `PJSIP_CRED_DATA_DIGEST`). This issue has been patched in the master branch of the PJSIP repository and will be included with the next release. Users unable to upgrade need to check that the hashed digest data length must be equal to `PJSIP_MD5STRLEN` before passing to PJSIP."}, {"Reference": "CVE-2022-33232", "Description": "Memory corruption due to buffer copy without checking size of input while running memory sharing tests with large scattered memory."}, {"Reference": "CVE-2022-33276", "Description": "Memory corruption due to buffer copy without checking size of input in modem while receiving WMI_REQUEST_STATS_CMDID command."}, {"Reference": "CVE-2022-33277", "Description": "Memory corruption in modem due to buffer copy without checking size of input while receiving WMI command."}, {"Reference": "CVE-2022-24788", "Description": "Vyper is a pythonic Smart Contract Language for the ethereum virtual machine. Versions of vyper prior to 0.3.2 suffer from a potential buffer overrun. Importing a function from a JSON interface which returns `bytes` generates bytecode which does not clamp bytes length, potentially resulting in a buffer overrun. Users are advised to upgrade. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-3550", "Description": "A vulnerability classified as critical was found in X.org Server. Affected by this vulnerability is the function _GetCountedString of the file xkb/xkb.c. The manipulation leads to buffer overflow. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-211051."}]}
{"ID": "1204", "Name": "Generation of Weak Initialization Vector (IV)", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses a cryptographic primitive that uses an Initialization\n\t\t\tVector (IV), but the product does not generate IVs that are\n\t\t\tsufficiently unpredictable or unique according to the expected\n\t\t\tcryptographic requirements for that primitive.\n\t\t\t", "ExtendedDescription": "By design, some cryptographic primitives (such as block ciphers) require that IVs must have certain properties for the uniqueness and/or unpredictability of an IV. Primitives may vary in how important these properties are. If these properties are not maintained, e.g. by a bug in the code, then the cryptography may be weakened or broken by attacking the IVs themselves.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "330", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "If the IV is not properly initialized, data that is encrypted can be compromised and information about the data can be leaked. See [REF-1179]."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "\n\nDifferent cipher modes have different requirements for their IVs. When choosing and implementing a mode, it is important to understand those requirements in order to keep security guarantees intact. Generally, it is safest to generate a random IV, since it will be both unpredictable and have a very low chance of being non-unique. IVs do not have to be kept secret, so if generating duplicate IVs is a concern, a list of already-used IVs can be kept and checked against. \n\n\n NIST offers recommendations on generation of IVs for modes of which they have approved. These include options for when random IVs are not practical. For CBC, CFB, and OFB, see [REF-1175]; for GCM, see [REF-1178]. \n"}], "DemonstrativeExamples": [{"ID": "DX-143", "Entries": [{"IntroText": "In the following examples, CBC mode is used when encrypting data:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tEVP_CIPHER_CTX ctx;\n\tchar key[EVP_MAX_KEY_LENGTH];\n\tchar iv[EVP_MAX_IV_LENGTH];\n\tRAND_bytes(key, b);\n\tmemset(iv,0,EVP_MAX_IV_LENGTH);\n\tEVP_EncryptInit(&ctx,EVP_bf_cbc(), key,iv);\n```"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class SymmetricCipherTest {\n\t\t\tpublic static void main() {\n\t\t\t\t\tbyte[] text =\"Secret\".getBytes();\n\t\t\t\t\tbyte[] iv ={\n\t\t\t\t\t\t0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00\n\t\t\t\t\t};\n\t\t\t\t\tKeyGenerator kg = KeyGenerator.getInstance(\"DES\");\n\t\t\t\t\tkg.init(56);\n\t\t\t\t\tSecretKey key = kg.generateKey();\n\t\t\t\t\tCipher cipher = Cipher.getInstance(\"DES/CBC/PKCS5Padding\");\n\t\t\t\t\tIvParameterSpec ips = new IvParameterSpec(iv);\n\t\t\t\t\tcipher.init(Cipher.ENCRYPT_MODE, key, ips);\n\t\t\t\t\treturn cipher.doFinal(inpBytes);\n\t\t\t}\n\t}\n```"}, {"BodyText": "In both of these examples, the initialization vector (IV) is always a block of zeros. This makes the resulting cipher text much more predictable and susceptible to a dictionary attack."}]}, {"Entries": [{"IntroText": "The Wired Equivalent Privacy (WEP) protocol used in the 802.11 wireless standard only supported 40-bit keys, and the IVs were only 24 bits, increasing the chances that the same IV would be reused for multiple messages. The IV was included in plaintext as part of the packet, making it directly observable to attackers. Only 5000 messages are needed before a collision occurs due to the \"birthday paradox\" [REF-1176]. Some implementations would reuse the same IV for each packet. This IV reuse made it much easier for attackers to recover plaintext from two packets with the same IV, using well-understood attacks, especially if the plaintext was known for one of the packets [REF-1175]."}]}], "ObservedExamples": [{"Reference": "CVE-2020-1472", "Description": "ZeroLogon vulnerability - use of a static IV of all zeroes in AES-CFB8 mode", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-1472"}, {"Reference": "CVE-2011-3389", "Description": "BEAST attack in SSL 3.0 / TLS 1.0. In CBC mode, chained initialization vectors are non-random, allowing decryption of HTTPS traffic using a chosen plaintext attack.", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-3389"}, {"Reference": "CVE-2001-0161", "Description": "wireless router does not use 6 of the 24 bits for WEP encryption, making it easier for attackers to decrypt traffic", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0161"}, {"Reference": "CVE-2001-0160", "Description": "WEP card generates predictable IV values, making it easier for attackers to decrypt traffic", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0160"}, {"Reference": "CVE-2017-3225", "Description": "device bootloader uses a zero initialization vector during AES-CBC", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-3225"}, {"Reference": "CVE-2016-6485", "Description": "crypto framework uses PHP rand function - which is not cryptographically secure - for an initialization vector", "Link": "https://www.cve.org/CVERecord?id=CVE-2016-6485"}, {"Reference": "CVE-2014-5386", "Description": "encryption routine does not seed the random number generator, causing the same initialization vector to be generated repeatedly", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-5386"}, {"Reference": "CVE-2020-5408", "Description": "encryption functionality in an authentication framework uses a fixed null IV with CBC mode, allowing attackers to decrypt traffic in applications that use this functionality", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-5408"}, {"Reference": "CVE-2017-17704", "Description": "messages for a door-unlocking product use a fixed IV in CBC mode, which is the same after each restart", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-17704"}, {"Reference": "CVE-2017-11133", "Description": "application uses AES in CBC mode, but the pseudo-random secret and IV are generated using math.random, which is not cryptographically strong.", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-11133"}, {"Reference": "CVE-2007-3528", "Description": "Blowfish-CBC implementation constructs an IV where each byte is calculated modulo 8 instead of modulo 256, resulting in less than 12 bits for the effective IV length, and less than 4096 possible IV values.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-3528"}], "FunctionalAreas": ["Cryptography"], "RelatedAttackPatterns": ["20", "97"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, \"randomness\" is used heavily. However, within cryptography, \"entropy\" is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios."}], "Top25Examples": [{"Reference": "CVE-2021-26407", "Description": "A randomly generated Initialization Vector (IV) may lead to a collision of IVs with the same key potentially resulting in information disclosure. "}, {"Reference": "CVE-2021-27499", "Description": "Ypsomed mylife Cloud, mylife Mobile Application, Ypsomed mylife Cloud: All versions prior to 1.7.2, Ypsomed mylife App: All versions prior to 1.7.5,The application layer encryption of the communication protocol between the Ypsomed mylife App and mylife Cloud uses non-random IVs, which allows man-in-the-middle attackers to tamper with messages."}, {"Reference": "CVE-2021-45458", "Description": "Apache Kylin provides encryption classes PasswordPlaceholderConfigurer to help users encrypt their passwords. In the encryption algorithm used by this encryption class, the cipher is initialized with a hardcoded key and IV. If users use class PasswordPlaceholderConfigurer to encrypt their password and configure it into kylin's configuration file, there is a risk that the password may be decrypted. This issue affects Apache Kylin 2 version 2.6.6 and prior versions; Apache Kylin 3 version 3.1.2 and prior versions; Apache Kylin 4 version 4.0.0 and prior versions."}, {"Reference": "CVE-2022-23408", "Description": "wolfSSL 5.x before 5.1.1 uses non-random IV values in certain situations. This affects connections (without AEAD) using AES-CBC or DES3 with TLS 1.1 or 1.2 or DTLS 1.1 or 1.2. This occurs because of misplaced memory initialization in BuildMessage in internal.c."}, {"Reference": "CVE-2022-23942", "Description": "Apache Doris, prior to 1.0.0, used a hardcoded key and IV to initialize the cipher used for ldap password, which may lead to information disclosure."}, {"Reference": "CVE-2022-26306", "Description": "LibreOffice supports the storage of passwords for web connections in the user\u2019s configuration database. The stored passwords are encrypted with a single master key provided by the user. A flaw in LibreOffice existed where the required initialization vector for encryption was always the same which weakens the security of the encryption making them vulnerable if an attacker has access to the user's configuration data. This issue affects: The Document Foundation LibreOffice 7.2 versions prior to 7.2.7; 7.3 versions prior to 7.3.1."}, {"Reference": "CVE-2022-37400", "Description": "Apache OpenOffice supports the storage of passwords for web connections in the user's configuration database. The stored passwords are encrypted with a single master key provided by the user. A flaw in OpenOffice existed where the required initialization vector for encryption was always the same which weakens the security of the encryption making them vulnerable if an attacker has access to the user's configuration data. This issue affects: Apache OpenOffice versions prior to 4.1.13. Reference: CVE-2022-26306 - LibreOffice"}]}
{"ID": "1209", "Name": "Failure to Disable Reserved Bits", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The reserved bits in a hardware design are not disabled prior to production. Typically, reserved bits are used for future capabilities and should not support any functional logic in the design.   However, designers might covertly use these bits to debug or further develop new capabilities in production hardware. Adversaries with access to these bits will write to them in hopes of compromising hardware state.", "ExtendedDescription": "\n\nReserved bits are labeled as such so they can be allocated for a later purpose. They are not to do anything in the current design. However, designers might want to use these bits to debug or control/configure a future capability to help minimize time to market (TTM). If the logic being controlled by these bits is still enabled in production, an adversary could use the logic to induce unwanted/unsupported behavior in the hardware.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "System on Chip", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "The Designer and Implementer have to make a conscious choice to do this"}, {"Phase": "Implementation", "Note": "The Designer and Implementer have to make a conscious choice to do this"}, {"Phase": "Documentation", "Note": "If documentation labels anything \"for future use\", \"reserved\", or the like, such labeling could indicate to an attacker a potential attack point"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control", "Accountability", "Authentication", "Authorization", "Non-Repudiation"], "Impact": ["Varies by Context"], "Note": "This type of weakness all depends on the capabilities of the logic being controlled or configured by the reserved bits."}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "\n\nInclude a feature to disable reserved bits.\n"}, {"Phase": ["Integration"], "Description": "\n\nAny writes to these reserve bits are blocked (e.g., ignored, access-protected, etc.), or an exception can be asserted.\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Assume a hardware Intellectual Property (IP) has address space 0x0-0x0F for its configuration registers, with the last one labeled reserved (i.e. 0x0F). Therefore inside the Finite State Machine (FSM), the code is as follows:"}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "reg gpio_out = 0; //gpio should remain low for normal operation\n\n case (register_address)\n\n```\n\t 4'b1111 : //0x0F\n\t\t begin\n\t\t\t gpio_out = 1;\n\t\t end\n```"}, {"BodyText": "An adversary may perform writes to reserved address space in hopes of changing the behavior of the hardware. In the code above, the GPIO pin should remain low for normal operation. However, it can be asserted by accessing the reserved address space (0x0F). This may be a concern if the GPIO state is being used as an indicator of health (e.g. if asserted the hardware may respond by shutting down or resetting the system, which may not be the correct action the system should perform).\n\n\nIn the code below, the condition \"register_address = 0X0F\" is commented out, and a default is provided that will catch any values of register_address not explicitly accounted for and take no action with regards to gpio_out. This means that an attacker who is able to write 0X0F to register_address will not enable any undocumented \"features\" in the process."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "reg gpio_out = 0; //gpio should remain low for normal operation\n\n case (register_address)\n\n```\n\t //4'b1111 : //0x0F\n\t default: gpio_out = gpio_out;\n```"}]}], "RelatedAttackPatterns": ["121"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "121", "Name": "Stack-based Buffer Overflow", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "A stack-based buffer overflow condition is a condition where the buffer being overwritten is allocated on the stack (i.e., is a local variable or, rarely, a parameter to a function).", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "788", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "787", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "BackgroundDetails": ["There are generally several security-critical data on an execution stack that can lead to arbitrary code execution. The most prominent is the stored return address, the memory address at which execution should continue once the current function is finished executing. The attacker can overwrite this value with some memory address to which the attacker also has write access, into which they place arbitrary code to be run with the full privileges of the vulnerable program. Alternately, the attacker can supply the address of an important call, for instance the POSIX system() call, leaving arguments to the call on the stack. This is often called a return into libc exploit, since the attacker generally forces the program to jump at return time into an interesting routine in the C standard library (libc). Other important data commonly on the stack include the stack pointer and frame pointer, two values that indicate offsets for computing memory addresses. Modifying those values can often be leveraged into a \"write-what-where\" condition."], "AlternateTerms": [{"Term": "Stack Overflow", "Description": "\"Stack Overflow\" is often used to mean the same thing as stack-based buffer overflow, however it is also used on occasion to mean stack exhaustion, usually a result from an excessively recursive function call. Due to the ambiguity of the term, use of stack overflow to describe either circumstance is discouraged."}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["Modify Memory", "DoS: Crash, Exit, or Restart", "DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)"], "Note": "Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop."}, {"Scope": ["Integrity", "Confidentiality", "Availability", "Access Control"], "Impact": ["Modify Memory", "Execute Unauthorized Code or Commands", "Bypass Protection Mechanism"], "Note": "Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy."}, {"Scope": ["Integrity", "Confidentiality", "Availability", "Access Control", "Other"], "Impact": ["Modify Memory", "Execute Unauthorized Code or Commands", "Bypass Protection Mechanism", "Other"], "Note": "When the consequence is arbitrary code execution, this can often be used to subvert any other security service."}], "DetectionMethods": [{"DetectionMethodID": "DM-13", "Method": "Fuzzing", "Description": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.", "Effectiveness": "High"}, {"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-10", "Phase": ["Operation", "Build and Compilation"], "Strategy": "Environment Hardening", "Description": "\n\nUse automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. \n\n\n D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail. \n", "Effectiveness": "Defense in Depth", "EffectivenessNotes": "\n\n This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application. \n"}, {"Phase": ["Architecture and Design"], "Description": "Use an abstraction library to abstract away risky APIs. Not a complete solution."}, {"Phase": ["Implementation"], "Description": "Implement and perform bounds checking on input."}, {"Phase": ["Implementation"], "Description": "Do not use dangerous functions such as gets. Use safer, equivalent functions which check for boundary errors."}, {"MitigationID": "MIT-11", "Phase": ["Operation", "Build and Compilation"], "Strategy": "Environment Hardening", "Description": "\n\nRun or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. \n\n\n Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. \n\n\n For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]. \n", "Effectiveness": "Defense in Depth", "EffectivenessNotes": "These techniques do not provide a complete solution. For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "While buffer overflow examples can be rather complex, it is possible to have very simple, yet still exploitable, stack-based buffer overflows:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t#define BUFSIZE 256\n\tint main(int argc, char **argv) {\n\t\tchar buf[BUFSIZE];\n\t\tstrcpy(buf, argv[1]);\n\t}\n```"}, {"BodyText": "The buffer size is fixed, but there is no guarantee the string in argv[1] will not exceed this size and cause an overflow."}]}, {"ID": "DX-1", "Entries": [{"IntroText": "This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid host_lookup(char *user_supplied_addr){\n\t\t\tstruct hostent *hp;\n\t\t\tin_addr_t *addr;\n\t\t\tchar hostname[64];\n\t\t\tin_addr_t inet_addr(const char *cp);\n```\n/*routine that ensures user_supplied_addr is in the right format for conversion */* \n\t\t\t\n\t\t\tvalidate_addr_form(user_supplied_addr);\n\t\t\taddr = inet_addr(user_supplied_addr);\n\t\t\thp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);\n\t\t\tstrcpy(hostname, hp->h_name);}"}, {"BodyText": "This function allocates a buffer of 64 bytes to store the hostname, however there is no guarantee that the hostname will not be larger than 64 bytes. If an attacker specifies an address which resolves to a very large hostname, then the function may overwrite sensitive data or even relinquish control flow to the attacker."}, {"BodyText": "Note that this example also contains an unchecked return value (CWE-252) that can lead to a NULL pointer dereference (CWE-476)."}]}], "ObservedExamples": [{"Reference": "CVE-2021-35395", "Description": "Stack-based buffer overflows in SFK for wifi chipset used for IoT/embedded devices, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-35395"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Other", "Note": "Stack-based buffer overflows can instantiate in return address overwrites, stack pointer overwrites or frame pointer overwrites. They can also be considered function pointer overwrites, array indexer overwrites or write-what-where condition, etc."}], "Top25Examples": [{"Reference": "CVE-2021-20038", "Description": "A Stack-based buffer overflow vulnerability in SMA100 Apache httpd server's mod_cgi module environment variables allows a remote unauthenticated attacker to potentially execute code as a 'nobody' user in the appliance. This vulnerability affected SMA 200, 210, 400, 410 and 500v appliances firmware 10.2.0.8-37sv, 10.2.1.1-19sv, 10.2.1.2-24sv and earlier versions."}, {"Reference": "CVE-2021-20046", "Description": "A Stack-based buffer overflow in the SonicOS HTTP Content-Length response header allows a remote authenticated attacker to cause Denial of Service (DoS) and potentially results in code execution in the firewall. This vulnerability affected SonicOS Gen 5, Gen 6 and Gen 7 firmware versions."}, {"Reference": "CVE-2021-20048", "Description": "A Stack-based buffer overflow in the SonicOS SessionID HTTP response header allows a remote authenticated attacker to cause Denial of Service (DoS) and potentially results in code execution in the firewall. This vulnerability affected SonicOS Gen 5, Gen 6 and Gen 7 firmware versions."}, {"Reference": "CVE-2021-21887", "Description": "A stack-based buffer overflow vulnerability exists in the Web Manager SslGenerateCSR functionality of Lantronix PremierWave 2050 8.9.0.0R4 (in QEMU). A specially crafted HTTP request can lead to remote code execution. An attacker can make an authenticated HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-21889", "Description": "A stack-based buffer overflow vulnerability exists in the Web Manager Ping functionality of Lantronix PremierWave 2050 8.9.0.0R4 (in QEMU). A specially crafted HTTP request can lead to remote code execution. An attacker can make an authenticated HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-21890", "Description": "A stack-based buffer overflow vulnerability exists in the Web Manager FsBrowseClean functionality of Lantronix PremierWave 2050 8.9.0.0R4 (in QEMU). A specially crafted HTTP request can lead to remote code execution in the vulnerable portion of the branch (deletedir). An attacker can make an authenticated HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-21891", "Description": "A stack-based buffer overflow vulnerability exists in the Web Manager FsBrowseClean functionality of Lantronix PremierWave 2050 8.9.0.0R4 (in QEMU). A specially crafted HTTP request can lead to remote code execution in the vulnerable portion of the branch (deletefile). An attacker can make an authenticated HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-21892", "Description": "A stack-based buffer overflow vulnerability exists in the Web Manager FsUnmount functionality of Lantronix PremierWave 2050 8.9.0.0R4 (in QEMU). A specially crafted HTTP request can lead to remote code execution. An attacker can make an authenticated HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-21901", "Description": "A stack-based buffer overflow vulnerability exists in the CMA check_udp_crc function of Garrett Metal Detectors\u2019 iC Module CMA Version 5.0. A specially-crafted packet can lead to a stack-based buffer overflow during a call to memcpy. An attacker can send a malicious packet to trigger this vulnerability."}, {"Reference": "CVE-2021-21903", "Description": "A stack-based buffer overflow vulnerability exists in the CMA check_udp_crc function of Garrett Metal Detectors\u2019 iC Module CMA Version 5.0. A specially-crafted packet can lead to a stack-based buffer overflow during a call to strcpy. An attacker can send a malicious packet to trigger this vulnerability."}, {"Reference": "CVE-2021-21905", "Description": "Stack-based buffer overflow vulnerability exists in how the CMA readfile function of Garrett Metal Detectors iC Module CMA Version 5.0 is used at various locations. The Garrett iC Module exposes an authenticated CLI over TCP port 6877. This interface is used by a secondary GUI client, called \u201cCMA Connect\u201d, to interact with the iC Module on behalf of the user. After a client successfully authenticates, they can send plaintext commands to manipulate the device."}, {"Reference": "CVE-2021-21960", "Description": "A stack-based buffer overflow vulnerability exists in both the LLMNR functionality of Sealevel Systems, Inc. SeaConnect 370W v1.3.34. A specially-crafted network packet can lead to remote code execution. An attacker can send a malicious packet to trigger this vulnerability."}, {"Reference": "CVE-2021-21961", "Description": "A stack-based buffer overflow vulnerability exists in the NBNS functionality of Sealevel Systems, Inc. SeaConnect 370W v1.3.34. A specially-crafted network packet can lead to remote code execution. An attacker can send a malicious packet to trigger this vulnerability."}, {"Reference": "CVE-2021-23138", "Description": "WECON LeviStudioU Versions 2019-09-21 and prior are vulnerable to a stack-based buffer overflow, which may allow an attacker to remotely execute code."}, {"Reference": "CVE-2021-23206", "Description": "A flaw was found in htmldoc in v1.9.12 and prior. A stack buffer overflow in parse_table() in ps-pdf.cxx may lead to execute arbitrary code and denial of service."}, {"Reference": "CVE-2021-26112", "Description": "Multiple stack-based buffer overflow vulnerabilities [CWE-121] both in network daemons and in the command line interpreter of FortiWAN before 4.5.9 may allow an unauthenticated attacker to potentially corrupt control data in memory and execute arbitrary code via specifically crafted requests."}, {"Reference": "CVE-2021-26567", "Description": "Stack-based buffer overflow vulnerability in frontend/main.c in faad2 before 2.2.7.1 allow local attackers to execute arbitrary code via filename and pathname options."}, {"Reference": "CVE-2021-26635", "Description": "In the code that verifies the file size in the ark library, it is possible to manipulate the offset read from the target file due to the wrong use of the data type. An attacker could use this vulnerability to cause a stack buffer overflow and as a result, perform an attack such as remote code execution."}, {"Reference": "CVE-2021-26727", "Description": "Multiple command injections and stack-based buffer overflows vulnerabilities in the SubNet_handler_func function of spx_restservice allow an attacker to execute arbitrary code with the same privileges as the server user (root). This issue affects: Lanner Inc IAC-AST2500A standard firmware version 1.10.0."}, {"Reference": "CVE-2021-26728", "Description": "Command injection and stack-based buffer overflow vulnerabilities in the KillDupUsr_func function of spx_restservice allow an attacker to execute arbitrary code with the same privileges as the server user (root). This issue affects: Lanner Inc IAC-AST2500A standard firmware version 1.10.0."}, {"Reference": "CVE-2021-26729", "Description": "Command injection and multiple stack-based buffer overflows vulnerabilities in the Login_handler_func function of spx_restservice allow an attacker to execute arbitrary code with the same privileges as the server user (root). This issue affects: Lanner Inc IAC-AST2500A standard firmware version 1.10.0."}, {"Reference": "CVE-2021-26730", "Description": "A stack-based buffer overflow vulnerability in a subfunction of the Login_handler_func function of spx_restservice allows an attacker to execute arbitrary code with the same privileges as the server user (root). This issue affects: Lanner Inc IAC-AST2500A standard firmware version 1.10.0."}, {"Reference": "CVE-2021-26731", "Description": "Command injection and multiple stack-based buffer overflows vulnerabilities in the modifyUserb_func function of spx_restservice allow an attacker to execute arbitrary code with the same privileges as the server user (root). This issue affects: Lanner Inc IAC-AST2500A standard firmware version 1.10.0."}, {"Reference": "CVE-2021-31578", "Description": "In Boa, there is a possible escalation of privilege due to a stack buffer overflow. This could lead to remote escalation of privilege from a proximal attacker with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: A20210008; Issue ID: OSBNB00123241."}, {"Reference": "CVE-2021-32040", "Description": "It may be possible to have an extremely long aggregation pipeline in conjunction with a specific stage/operator and cause a stack overflow due to the size of the stack frames used by that stage. If an attacker could cause such an aggregation to occur, they could maliciously crash MongoDB in a DoS attack. This vulnerability affects MongoDB Server v4.4 versions prior to and including 4.4.28, MongoDB Server v5.0 versions prior to 5.0.4 and MongoDB Server v4.2 versions prior to 4.2.16. Workaround: >= v4.2.16 users and all v4.4 users can add the --setParameter internalPipelineLengthLimit=50 instead of the default 1000 to mongod at startup to prevent a crash. "}, {"Reference": "CVE-2021-32435", "Description": "Stack-based buffer overflow in the function get_key in parse.c of abcm2ps v8.14.11 allows remote attackers to cause a Denial of Service (DoS) via unspecified vectors."}, {"Reference": "CVE-2021-32941", "Description": "Annke N48PBB (Network Video Recorder) products of version 3.4.106 build 200422 and prior are vulnerable to a stack-based buffer overflow, which allows an unauthorized remote attacker to execute arbitrary code with the same privileges as the server user (root)."}, {"Reference": "CVE-2021-33019", "Description": "A stack-based buffer overflow vulnerability in Delta Electronics DOPSoft Version 4.00.11 and prior may be exploited by processing a specially crafted project file, which may allow an attacker to execute arbitrary code."}, {"Reference": "CVE-2021-33438", "Description": "An issue was discovered in mjs (mJS: Restricted JavaScript engine), ES6 (JavaScript version 6). There is stack buffer overflow in json_parse_array() in mjs.c."}, {"Reference": "CVE-2021-33443", "Description": "An issue was discovered in mjs (mJS: Restricted JavaScript engine), ES6 (JavaScript version 6). There is stack buffer overflow in mjs_execute() in mjs.c."}, {"Reference": "CVE-2021-33448", "Description": "An issue was discovered in mjs(mJS: Restricted JavaScript engine), ES6 (JavaScript version 6). There is stack buffer overflow at 0x7fffe9049390."}, {"Reference": "CVE-2021-33545", "Description": "Multiple camera devices by UDP Technology, Geutebr\u00fcck and other vendors are vulnerable to a stack-based buffer overflow condition in the counter parameter which may allow an attacker to remotely execute arbitrary code."}, {"Reference": "CVE-2021-33945", "Description": "RICOH Printer series SP products 320DN, SP 325DNw, SP 320SN, SP 320SFN, SP 325SNw, SP 325SFNw, SP 330SN, Aficio SP 3500SF, SP 221S, SP 220SNw, SP 221SNw, SP 221SF, SP 220SFNw, SP 221SFNw v1.06 were discovered to contain a stack buffer overflow in the file /etc/wpa_supplicant.conf. This vulnerability allows attackers to cause a Denial of Service (DoS) via crafted overflow data."}, {"Reference": "CVE-2021-3434", "Description": "Stack based buffer overflow in le_ecred_conn_req(). Zephyr versions >= v2.5.0 Stack-based Buffer Overflow (CWE-121). For more information, see https://github.com/zephyrproject-rtos/zephyr/security/advisories/GHSA-8w87-6rfp-cfrm"}, {"Reference": "CVE-2021-3611", "Description": "A stack overflow vulnerability was found in the Intel HD Audio device (intel-hda) of QEMU. A malicious guest could use this flaw to crash the QEMU process on the host, resulting in a denial of service condition. The highest threat from this vulnerability is to system availability. This flaw affects QEMU versions prior to 7.0.0."}, {"Reference": "CVE-2021-36193", "Description": "Multiple stack-based buffer overflows in the command line interpreter of FortiWeb before 6.4.2 may allow an authenticated attacker to achieve arbitrary code execution via specially crafted commands."}, {"Reference": "CVE-2021-36194", "Description": "Multiple stack-based buffer overflows in the API controllers of FortiWeb 6.4.1, 6.4.0, and 6.3.0 through 6.3.15 may allow an authenticated attacker to achieve arbitrary code execution via specially crafted requests."}, {"Reference": "CVE-2021-36347", "Description": "iDRAC9 versions prior to 5.00.20.00 and iDRAC8 versions prior to 2.82.82.82 contain a stack-based buffer overflow vulnerability. An authenticated remote attacker with high privileges could potentially exploit this vulnerability to control process execution and gain access to the iDRAC operating system."}, {"Reference": "CVE-2021-37014", "Description": "There is a Stack-based Buffer Overflow vulnerability in Huawei Smartphone.Successful exploitation of this vulnerability may lead to device cannot be used properly."}, {"Reference": "CVE-2021-37020", "Description": "There is a Stack-based Buffer Overflow vulnerability in Huawei Smartphone.Successful exploitation of this vulnerability may lead to Out-of-bounds read."}, {"Reference": "CVE-2021-37021", "Description": "There is a Stack-based Buffer Overflow vulnerability in Huawei Smartphone.Successful exploitation of this vulnerability may lead to Out-of-bounds read."}, {"Reference": "CVE-2021-3826", "Description": "Heap/stack buffer overflow in the dlang_lname function in d-demangle.c in libiberty allows attackers to potentially cause a denial of service (segmentation fault and crash) via a crafted mangled symbol."}, {"Reference": "CVE-2021-38682", "Description": "A stack buffer overflow vulnerability has been reported to affect QNAP device running QVR Elite, QVR Pro, QVR Guard. If exploited, this vulnerability allows attackers to execute arbitrary code. We have already fixed this vulnerability in the following versions of QVR Elite, QVR Pro, QVR Guard: QuTS hero h5.0.0: QVR Elite 2.1.4.0 (2021/12/06) and later QuTS hero h4.5.4: QVR Elite 2.1.4.0 (2021/12/06) and later QTS 5.0.0: QVR Elite 2.1.4.0 (2021/12/06) and later QTS 4.5.4: QVR Elite 2.1.4.0 (2021/12/06) and later QTS 4.5.4: QVR Pro 2.1.3.0 (2021/12/06) and later QTS 5.0.0: QVR Pro 2.1.3.0 (2021/12/06) and later QTS 4.5.4: QVR Guard 2.1.3.0 and later QTS 5.0.0: QVR Guard 2.1.3.0 and later"}, {"Reference": "CVE-2021-38690", "Description": "A stack buffer overflow vulnerability has been reported to affect QNAP device running QVR Elite, QVR Pro, QVR Guard. If exploited, this vulnerability allows attackers to execute arbitrary code. We have already fixed this vulnerability in the following versions of QVR Elite, QVR Pro, QVR Guard: QuTS hero h5.0.0: QVR Elite 2.1.4.0 (2021/12/06) and later QuTS hero h4.5.4: QVR Elite 2.1.4.0 (2021/12/06) and later QTS 5.0.0: QVR Elite 2.1.4.0 (2021/12/06) and later QTS 4.5.4: QVR Elite 2.1.4.0 (2021/12/06) and later QTS 4.5.4: QVR Pro 2.1.3.0 (2021/12/06) and later QTS 5.0.0: QVR Pro 2.1.3.0 (2021/12/06) and later QTS 4.5.4: QVR Guard 2.1.3.0 (2021/12/06) and later QTS 5.0.0: QVR Guard 2.1.3.0 (2021/12/06) and later"}, {"Reference": "CVE-2021-39048", "Description": "IBM Spectrum Protect Client 7.1 and 8.1 is vulnerable to a stack based buffer overflow, caused by improper bounds checking. A local attacker could exploit this vulnerability and cause a denial of service. IBM X-Force ID: 214438."}, {"Reference": "CVE-2021-39049", "Description": "IBM i2 Analyst's Notebook 9.2.0, 9.2.1, and 9.2.2 is vulnerable to a stack-based buffer overflow, caused by improper bounds checking. A local attacker could overflow a buffer and gain lower level privileges. IBM X-Force ID: 214439."}, {"Reference": "CVE-2021-39050", "Description": "IBM i2 Analyst's Notebook 9.2.0, 9.2.1, and 9.2.2 is vulnerable to a stack-based buffer overflow, caused by improper bounds checking. A local attacker could overflow a buffer and gain lower level privileges. IBM X-Force ID: 214440."}, {"Reference": "CVE-2021-39306", "Description": "A stack buffer overflow was discovered on Realtek RTL8195AM device before 2.0.10, it exists in the client code when an attacker sends a big size Authentication challenge text in WEP security."}, {"Reference": "CVE-2021-39990", "Description": "The screen lock module has a Stack-based Buffer Overflow vulnerability.Successful exploitation of this vulnerability may affect user experience."}, {"Reference": "CVE-2021-40057", "Description": "There is a heap-based and stack-based buffer overflow vulnerability in the video framework. Successful exploitation of this vulnerability may affect availability."}, {"Reference": "CVE-2021-40556", "Description": "A stack overflow vulnerability exists in the httpd service in ASUS RT-AX56U Router Version 3.0.0.4.386.44266. This vulnerability is caused by the strcat function called by \"caupload\" input handle function allowing the user to enter 0xFFFF bytes into the stack. This vulnerability allows an attacker to execute commands remotely. The vulnerability requires authentication."}, {"Reference": "CVE-2021-41027", "Description": "A stack-based buffer overflow in Fortinet FortiWeb version 6.4.1 and 6.4.0, allows an authenticated attacker to execute unauthorized code or commands via crafted certificates loaded into the device."}, {"Reference": "CVE-2021-41458", "Description": "In GPAC MP4Box v1.1.0, there is a stack buffer overflow at src/utils/error.c:1769 which leads to a denial of service vulnerability."}, {"Reference": "CVE-2021-42059", "Description": "An issue was discovered in Insyde InsydeH2O Kernel 5.0 before 05.08.41, Kernel 5.1 before 05.16.41, Kernel 5.2 before 05.26.41, Kernel 5.3 before 05.35.41, and Kernel 5.4 before 05.42.20. A stack-based buffer overflow leads toarbitrary code execution in UEFI DisplayTypeDxe DXE driver."}, {"Reference": "CVE-2021-42756", "Description": "Multiple stack-based buffer overflow vulnerabilities [CWE-121] in the proxy daemon of FortiWeb 5.x all versions, 6.0.7 and below, 6.1.2 and below, 6.2.6 and below, 6.3.16 and below, 6.4 all versions may allow an unauthenticated remote attacker to achieve arbitrary code execution via specifically crafted HTTP requests."}, {"Reference": "CVE-2021-42757", "Description": "A buffer overflow [CWE-121] in the TFTP client library of FortiOS before 6.4.7 and FortiOS 7.0.0 through 7.0.2, may allow an authenticated local attacker to achieve arbitrary code execution via specially crafted command line arguments."}, {"Reference": "CVE-2021-42782", "Description": "Stack buffer overflow issues were found in Opensc before version 0.22.0 in various places that could potentially crash programs using the library."}, {"Reference": "CVE-2021-43299", "Description": "Stack overflow in PJSUA API when calling pjsua_player_create. An attacker-controlled 'filename' argument may cause a buffer overflow since it is copied to a fixed-size stack buffer without any size validation."}, {"Reference": "CVE-2021-43300", "Description": "Stack overflow in PJSUA API when calling pjsua_recorder_create. An attacker-controlled 'filename' argument may cause a buffer overflow since it is copied to a fixed-size stack buffer without any size validation."}, {"Reference": "CVE-2021-43301", "Description": "Stack overflow in PJSUA API when calling pjsua_playlist_create. An attacker-controlled 'file_names' argument may cause a buffer overflow since it is copied to a fixed-size stack buffer without any size validation."}, {"Reference": "CVE-2021-43556", "Description": "FATEK WinProladder Versions 3.30_24518 and prior are vulnerable to a stack-based buffer overflow while processing project files, which may allow an attacker to execute arbitrary code."}, {"Reference": "CVE-2021-43579", "Description": "A stack-based buffer overflow in image_load_bmp() in HTMLDOC <= 1.9.13 results in remote code execution if the victim converts an HTML document linking to a crafted BMP file."}, {"Reference": "CVE-2021-43983", "Description": "WECON LeviStudioU Versions 2019-09-21 and prior are vulnerable to multiple stack-based buffer overflow instances while parsing project files, which may allow an attacker to execute arbitrary code."}, {"Reference": "CVE-2021-44158", "Description": "ASUS RT-AX56U Wi-Fi Router is vulnerable to stack-based buffer overflow due to improper validation for httpd parameter length. An authenticated local area network attacker can launch arbitrary code execution to control the system or disrupt service."}, {"Reference": "CVE-2021-44170", "Description": "A stack-based buffer overflow vulnerability [CWE-121] in the command line interpreter of FortiOS before 7.0.4 and FortiProxy before 2.0.8 may allow an authenticated attacker to execute unauthorized code or commands via specially crafted command line arguments."}, {"Reference": "CVE-2021-44435", "Description": "A vulnerability has been identified in JT Utilities (All versions < V13.1.1.0), JTTK (All versions < V11.1.1.0). JTTK library in affected products is vulnerable to stack based buffer overflow while parsing specially crafted JT files. An attacker could leverage this vulnerability to execute code in the context of the current process. (ZDI-CAN-14903)"}, {"Reference": "CVE-2021-44703", "Description": "Acrobat Reader DC version 21.007.20099 (and earlier), 20.004.30017 (and earlier) and 17.011.30204 (and earlier) are affected by a stack buffer overflow vulnerability due to insecure handling of a crafted file, potentially resulting in arbitrary code execution in the context of the current user. Exploitation of this issue requires user interaction in that a victim must open a malicious file."}, {"Reference": "CVE-2021-44847", "Description": "A stack-based buffer overflow in handle_request function in DHT.c in toxcore 0.1.9 through 0.1.11 and 0.2.0 through 0.2.12 (caused by an improper length calculation during the handling of received network packets) allows remote attackers to crash the process or potentially execute arbitrary code via a network packet."}, {"Reference": "CVE-2021-45258", "Description": "A stack overflow vulnerability exists in gpac 1.1.0 via the gf_bifs_dec_proto_list function, which causes a segmentation fault and application crash."}, {"Reference": "CVE-2021-45573", "Description": "Certain NETGEAR devices are affected by a stack-based buffer overflow by an unauthenticated attacker. This affects R6260 before 1.1.0.76, R6800 before 1.2.0.62, R6700v2 before 1.2.0.62, R6900v2 before 1.2.0.62, R7450 before 1.2.0.62, AC2100 before 1.2.0.62, AC2400 before 1.2.0.62, and AC2600 before 1.2.0.62."}, {"Reference": "CVE-2021-45604", "Description": "Certain NETGEAR devices are affected by a stack-based buffer overflow by an authenticated user. This affects CBR750 before 3.2.18.2, D6220 before 1.0.0.68, D6400 before 1.0.0.102, D8500 before 1.0.3.60, LAX20 before 1.1.6.28, MK62 before 1.0.6.116, MR60 before 1.0.6.116, MS60 before 1.0.6.116, R6300v2 before 1.0.4.50, R6400 before 1.0.1.68, R6400v2 before 1.0.4.118, R6700v3 before 1.0.4.118, R6900P before 1.3.3.140, R7000 before 1.0.11.116, R7000P before 1.3.3.140, R7850 before 1.0.5.68, R7900 before 1.0.4.38, R7900P before 1.4.2.84, R7960P before 1.4.2.84, R8000 before 1.0.4.68, R8000P before 1.4.2.84, RAX15 before 1.0.3.96, RAX20 before 1.0.3.96, RAX200 before 1.0.4.120, RAX35v2 before 1.0.3.96, RAX40v2 before 1.0.3.96, RAX43 before 1.0.3.96, RAX45 before 1.0.3.96, RAX50 before 1.0.3.96, RAX75 before 1.0.4.120, RAX80 before 1.0.4.120, RBK752 before 3.2.17.12, RBK852 before 3.2.17.12, RBR750 before 3.2.17.12, RBR850 before 3.2.17.12, RBS750 before 3.2.17.12, RBS850 before 3.2.17.12, RS400 before 1.5.1.80, and XR1000 before 1.0.0.58."}, {"Reference": "CVE-2021-45605", "Description": "Certain NETGEAR devices are affected by a stack-based buffer overflow by an authenticated user. This affects R6400 before 1.0.1.68, R7000 before 1.0.11.116, R6900P before 1.3.3.140, R7000P before 1.3.3.140, R7900 before 1.0.4.38, RAX75 before 1.0.3.102, RAX80 before 1.0.3.102, and XR300 before 1.0.3.50."}, {"Reference": "CVE-2021-45606", "Description": "Certain NETGEAR devices are affected by a stack-based buffer overflow by an authenticated user. This affects R6400 before 1.0.1.70, R7000 before 1.0.11.126, R7900 before 1.0.4.46, R7900P before 1.4.2.84, R7960P before 1.4.2.84, R8000 before 1.0.4.74, R8000P before 1.4.2.84, RAX200 before 1.0.4.120, RS400 before 1.5.1.80, R6400v2 before 1.0.4.118, R7000P before 1.3.3.140, RAX80 before 1.0.4.120, R6700v3 before 1.0.4.118, R6900P before 1.3.3.140, and RAX75 before 1.0.4.120."}, {"Reference": "CVE-2021-45607", "Description": "Certain NETGEAR devices are affected by a stack-based buffer overflow by an authenticated user. This affects R6400v2 before 1.0.4.118, R6700v3 before 1.0.4.118, R6900P before 1.3.3.140, R7000 before 1.0.11.126, R7000P before 1.3.3.140, RAX200 before 1.0.5.126, RAX75 before 1.0.5.126, and RAX80 before 1.0.5.126."}, {"Reference": "CVE-2021-45636", "Description": "NETGEAR D7000 devices before 1.0.1.82 are affected by a stack-based buffer overflow by an unauthenticated attacker."}, {"Reference": "CVE-2021-45637", "Description": "Certain NETGEAR devices are affected by a stack-based buffer overflow by an unauthenticated attacker. This affects R6260 before 1.1.0.76, R6800 before 1.2.0.62, R6700v2 before 1.2.0.62, R6900v2 before 1.2.0.62, R7450 before 1.2.0.62, AC2100 before 1.2.0.62, AC2400 before 1.2.0.62, and AC2600 before 1.2.0.62."}, {"Reference": "CVE-2021-45638", "Description": "Certain NETGEAR devices are affected by a stack-based buffer overflow by an unauthenticated attacker. This affects D6220 before 1.0.0.68, D6400 before 1.0.0.102, D7000v2 before 1.0.0.74, D8500 before 1.0.3.60, DC112A before 1.0.0.56, R6300v2 before 1.0.4.50, R6400 before 1.0.1.68, R7000 before 1.0.11.116, R7100LG before 1.0.0.70, RBS40V before 2.6.2.8, RBW30 before 2.6.2.2, RS400 before 1.5.1.80, R7000P before 1.3.2.132, and R6900P before 1.3.2.132."}, {"Reference": "CVE-2021-45833", "Description": "A Stack-based Buffer Overflow Vulnerability exists in HDF5 1.13.1-1 via the H5D__create_chunk_file_map_hyper function in /hdf5/src/H5Dchunk.c, which causes a Denial of Service (context-dependent)."}, {"Reference": "CVE-2021-45907", "Description": "An issue was discovered in gif2apng 1.9. There is a stack-based buffer overflow involving a for loop. An attacker has little influence over the data written to the stack, making it unlikely that the flow of control can be subverted."}, {"Reference": "CVE-2021-45908", "Description": "An issue was discovered in gif2apng 1.9. There is a stack-based buffer overflow involving a while loop. An attacker has little influence over the data written to the stack, making it unlikely that the flow of control can be subverted."}, {"Reference": "CVE-2021-45926", "Description": "MDB Tools (aka mdbtools) 0.9.2 has a stack-based buffer overflow (at 0x7ffd0c689be0) in mdb_numeric_to_string (called from mdb_xfer_bound_data and _mdb_attempt_bind)."}, {"Reference": "CVE-2021-45927", "Description": "MDB Tools (aka mdbtools) 0.9.2 has a stack-based buffer overflow (at 0x7ffd6e029ee0) in mdb_numeric_to_string (called from mdb_xfer_bound_data and _mdb_attempt_bind)."}, {"Reference": "CVE-2021-45958", "Description": "UltraJSON (aka ujson) through 5.1.0 has a stack-based buffer overflow in Buffer_AppendIndentUnchecked (called from encode). Exploitation can, for example, use a large amount of indentation."}, {"Reference": "CVE-2021-45972", "Description": "The giftrans function in giftrans 1.12.2 contains a stack-based buffer overflow because a value inside the input file determines the amount of data to write. This allows an attacker to overwrite up to 250 bytes outside of the allocated buffer with arbitrary data."}, {"Reference": "CVE-2021-45988", "Description": "Tenda routers G1 and G3 v15.11.0.17(9502)_CN were discovered to contain a stack overflow in the function formAddDnsForward. This vulnerability allows attackers to cause a Denial of Service (DoS) via the DnsForwardRule parameter."}, {"Reference": "CVE-2021-45989", "Description": "Tenda routers G1 and G3 v15.11.0.17(9502)_CN were discovered to contain a stack overflow in the function guestWifiRuleRefresh. This vulnerability allows attackers to cause a Denial of Service (DoS) via the qosGuestUpstream and qosGuestDownstream parameters."}, {"Reference": "CVE-2021-45991", "Description": "Tenda routers G1 and G3 v15.11.0.17(9502)_CN were discovered to contain a stack overflow in the function formAddVpnUsers. This vulnerability allows attackers to cause a Denial of Service (DoS) via the vpnUsers parameter."}, {"Reference": "CVE-2021-45992", "Description": "Tenda routers G1 and G3 v15.11.0.17(9502)_CN were discovered to contain a stack overflow in the function formSetQvlanList. This vulnerability allows attackers to cause a Denial of Service (DoS) via the qvlanName parameter."}, {"Reference": "CVE-2021-45993", "Description": "Tenda routers G1 and G3 v15.11.0.17(9502)_CN were discovered to contain a stack overflow in the function formIPMacBindModify. This vulnerability allows attackers to cause a Denial of Service (DoS) via the IPMacBindRuleIP and IPMacBindRuleMac parameters."}, {"Reference": "CVE-2021-45994", "Description": "Tenda routers G1 and G3 v15.11.0.17(9502)_CN were discovered to contain a stack overflow in the function formDelDhcpRule. This vulnerability allows attackers to cause a Denial of Service (DoS) via the delDhcpIndex parameter."}, {"Reference": "CVE-2021-45995", "Description": "Tenda routers G1 and G3 v15.11.0.17(9502)_CN were discovered to contain a stack overflow in the function formSetStaticRoute. This vulnerability allows attackers to cause a Denial of Service (DoS) via the staticRouteNet, staticRouteMask, and staticRouteGateway parameters."}, {"Reference": "CVE-2021-45996", "Description": "Tenda routers G1 and G3 v15.11.0.17(9502)_CN were discovered to contain a stack overflow in the function formSetPortMapping. This vulnerability allows attackers to cause a Denial of Service (DoS) via the portMappingServer, portMappingProtocol, portMappingWan, porMappingtInternal, and portMappingExternal parameters."}, {"Reference": "CVE-2021-45997", "Description": "Tenda routers G1 and G3 v15.11.0.17(9502)_CN were discovered to contain a stack overflow in the function formSetPortMapping. This vulnerability allows attackers to cause a Denial of Service (DoS) via the portMappingServer, portMappingProtocol, portMappingWan, porMappingtInternal, and portMappingExternal parameters."}, {"Reference": "CVE-2021-46154", "Description": "A vulnerability has been identified in Simcenter Femap V2020.2 (All versions), Simcenter Femap V2021.1 (All versions). Affected application contains a stack based buffer overflow vulnerability while parsing NEU files. This could allow an attacker to execute code in the context of the current process. (ZDI-CAN-14646, ZDI-CAN-14679, ZDI-CAN-15084, ZDI-CAN-15304)"}, {"Reference": "CVE-2021-46155", "Description": "A vulnerability has been identified in Simcenter Femap V2020.2 (All versions), Simcenter Femap V2021.1 (All versions). Affected application contains a stack based buffer overflow vulnerability while parsing NEU files. This could allow an attacker to execute code in the context of the current process. (ZDI-CAN-14683, ZDI-CAN-15283, ZDI-CAN-15303, ZDI-CAN-15593)"}, {"Reference": "CVE-2021-46158", "Description": "A vulnerability has been identified in Simcenter Femap V2020.2 (All versions), Simcenter Femap V2021.1 (All versions). Affected application contains a stack based buffer overflow vulnerability while parsing NEU files. This could allow an attacker to execute code in the context of the current process. (ZDI-CAN-15085, ZDI-CAN-15289, ZDI-CAN-15602)"}, {"Reference": "CVE-2021-46238", "Description": "GPAC v1.1.0 was discovered to contain a stack overflow via the function gf_node_get_name () at scenegraph/base_scenegraph.c. This vulnerability can lead to a program crash, causing a Denial of Service (DoS)."}, {"Reference": "CVE-2021-46262", "Description": "Tenda AC Series Router AC11_V02.03.01.104_CN was discovered to contain a stack buffer overflow in the PPPoE module. This vulnerability allows attackers to cause a Denial of Service (DoS) via crafted overflow data."}, {"Reference": "CVE-2021-46263", "Description": "Tenda AC Series Router AC11_V02.03.01.104_CN was discovered to contain a stack buffer overflow in the wifiTime module. This vulnerability allows attackers to cause a Denial of Service (DoS) via crafted overflow data."}, {"Reference": "CVE-2021-46264", "Description": "Tenda AC Series Router AC11_V02.03.01.104_CN was discovered to contain a stack buffer overflow in the onlineList module. This vulnerability allows attackers to cause a Denial of Service (DoS) via crafted overflow data."}, {"Reference": "CVE-2021-46265", "Description": "Tenda AC Series Router AC11_V02.03.01.104_CN was discovered to contain a stack buffer overflow in the wanBasicCfg module. This vulnerability allows attackers to cause a Denial of Service (DoS) via crafted overflow data."}, {"Reference": "CVE-2021-46321", "Description": "Tenda AC Series Router AC11_V02.03.01.104_CN was discovered to contain a stack buffer overflow in the wifiBasicCfg module. This vulnerability allows attackers to cause a Denial of Service (DoS) via crafted overflow data."}, {"Reference": "CVE-2021-46324", "Description": "Espruino 2v11.251 was discovered to contain a stack buffer overflow via src/jsvar.c in jsvNewFromString."}, {"Reference": "CVE-2021-46325", "Description": "Espruino 2v10.246 was discovered to contain a stack buffer overflow via src/jsutils.c in vcbprintf."}, {"Reference": "CVE-2021-46334", "Description": "Moddable SDK v11.5.0 was discovered to contain a stack buffer overflow via the component __interceptor_strcat."}, {"Reference": "CVE-2021-46393", "Description": "There is a stack buffer overflow vulnerability in the formSetPPTPServer function of Tenda-AX3 router V16.03.12.10_CN. The v10 variable is directly retrieved from the http request parameter startIp. Then v10 will be splice to stack by function sscanf without any security check,which causes stack overflow. By POSTing the page /goform/SetPptpServerCfg with proper startIp, the attacker can easily perform remote code execution with carefully crafted overflow data."}, {"Reference": "CVE-2021-46394", "Description": "There is a stack buffer overflow vulnerability in the formSetPPTPServer function of Tenda-AX3 router V16.03.12.10_CN. The v13 variable is directly retrieved from the http request parameter startIp. Then v13 will be splice to stack by function sscanf without any security check, which causes stack overflow. By POSTing the page /goform/SetPptpServerCfg with proper startIp, the attacker can easily perform remote code execution with carefully crafted overflow data."}, {"Reference": "CVE-2021-46408", "Description": "Tenda AX12 v22.03.01.21 was discovered to contain a stack buffer overflow in the function sub_422CE4. This vulnerability allows attackers to cause a Denial of Service (DoS) via the strcpy parameter."}, {"Reference": "CVE-2021-46699", "Description": "A vulnerability has been identified in Simcenter Femap (All versions < V2022.1.1). Affected application contains a stack based buffer overflow vulnerability while parsing specially crafted BDF files. This could allow an attacker to execute code in the context of the current process. (ZDI-CAN-15061)"}, {"Reference": "CVE-2022-0435", "Description": "A stack overflow flaw was found in the Linux kernel's TIPC protocol functionality in the way a user sends a packet with malicious content where the number of domain member nodes is higher than the 64 allowed. This flaw allows a remote user to crash the system or possibly escalate their privileges if they have access to the TIPC network."}, {"Reference": "CVE-2022-0903", "Description": "A call stack overflow bug in the SAML login feature in Mattermost server in versions up to and including 6.3.2 allows an attacker to crash the server via submitting a maliciously crafted POST body."}, {"Reference": "CVE-2022-0904", "Description": "A stack overflow bug in the document extractor in Mattermost Server in versions up to and including 6.3.2 allows an attacker to crash the server via submitting a maliciously crafted Apple Pages document."}, {"Reference": "CVE-2022-1068", "Description": "Modbus Tools Modbus Slave (versions 7.4.2 and prior) is vulnerable to a stack-based buffer overflow in the registration field. This may cause the program to crash when a long character string is used."}, {"Reference": "CVE-2022-1211", "Description": "A vulnerability classified as critical has been found in tildearrow Furnace dev73. This affects the FUR to VGM converter in console mode which causes stack-based overflows and crashes. It is possible to initiate the attack remotely but it requires user-interaction. A POC has been disclosed to the public and may be used."}, {"Reference": "CVE-2022-1888", "Description": "Alpha7 PC Loader (All versions) is vulnerable to a stack-based buffer overflow while processing a specifically crafted project file, which may allow an attacker to execute arbitrary code."}, {"Reference": "CVE-2022-20030", "Description": "In vow driver, there is a possible out of bounds write due to a stack-based buffer overflow. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05837793; Issue ID: ALPS05837793."}, {"Reference": "CVE-2022-20040", "Description": "In power_hal_manager_service, there is a possible permission bypass due to a stack-based buffer overflow. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06219150; Issue ID: ALPS06219150."}, {"Reference": "CVE-2022-20105", "Description": "In MM service, there is a possible out of bounds write due to a stack-based buffer overflow. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: DTV03330460; Issue ID: DTV03330460."}, {"Reference": "CVE-2022-20108", "Description": "In voice service, there is a possible out of bounds write due to a stack-based buffer overflow. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: DTV03330702; Issue ID: DTV03330702."}, {"Reference": "CVE-2022-25308", "Description": "A stack-based buffer overflow flaw was found in the Fribidi package. This flaw allows an attacker to pass a specially crafted file to the Fribidi application, which leads to a possible memory leak or a denial of service."}, {"Reference": "CVE-2022-25427", "Description": "Tenda AC9 v15.03.2.21 was discovered to contain a stack overflow via the schedendtime parameter in the openSchedWifi function."}, {"Reference": "CVE-2022-25428", "Description": "Tenda AC9 v15.03.2.21 was discovered to contain a stack overflow via the deviceId parameter in the saveparentcontrolinfo function."}, {"Reference": "CVE-2022-25429", "Description": "Tenda AC9 v15.03.2.21 was discovered to contain a buffer overflow via the time parameter in the saveparentcontrolinfo function."}, {"Reference": "CVE-2022-25431", "Description": "Tenda AC9 v15.03.2.21 was discovered to contain multiple stack overflows via the NPTR, V12, V10 and V11 parameter in the Formsetqosband function."}, {"Reference": "CVE-2022-25433", "Description": "Tenda AC9 v15.03.2.21 was discovered to contain a stack overflow via the urls parameter in the saveparentcontrolinfo function."}, {"Reference": "CVE-2022-25434", "Description": "Tenda AC9 v15.03.2.21 was discovered to contain a stack overflow via the firewallen parameter in the SetFirewallCfg function."}, {"Reference": "CVE-2022-25435", "Description": "Tenda AC9 v15.03.2.21 was discovered to contain a stack overflow via the list parameter in the SetStaticRoutecfg function."}, {"Reference": "CVE-2022-25437", "Description": "Tenda AC9 v15.03.2.21 was discovered to contain a stack overflow via the list parameter in the SetVirtualServerCfg function."}, {"Reference": "CVE-2022-25439", "Description": "Tenda AC9 v15.03.2.21 was discovered to contain a stack overflow via the list parameter in the SetIpMacBind function."}, {"Reference": "CVE-2022-25440", "Description": "Tenda AC9 v15.03.2.21 was discovered to contain a stack overflow via the ntpserver parameter in the SetSysTimeCfg function."}, {"Reference": "CVE-2022-25793", "Description": "A Stack-based Buffer Overflow Vulnerability in Autodesk 3ds Max 2022, 2021, and 2020 may lead to code execution through the lack of proper validation of the length of user-supplied data prior to copying it to a fixed-length stack-based buffer when parsing ActionScript Byte Code files. This vulnerability may allow arbitrary code execution on affected installations of Autodesk 3ds Max."}, {"Reference": "CVE-2022-26531", "Description": "Multiple improper input validation flaws were identified in some CLI commands of Zyxel USG/ZyWALL series firmware versions 4.09 through 4.71, USG FLEX series firmware versions 4.50 through 5.21, ATP series firmware versions 4.32 through 5.21, VPN series firmware versions 4.30 through 5.21, NSG series firmware versions 1.00 through 1.33 Patch 4, NXC2500 firmware version 6.10(AAIG.3) and earlier versions, NAP203 firmware version 6.25(ABFA.7) and earlier versions, NWA50AX firmware version 6.25(ABYW.5) and earlier versions, WAC500 firmware version 6.30(ABVS.2) and earlier versions, and WAX510D firmware version 6.30(ABTF.2) and earlier versions, that could allow a local authenticated attacker to cause a buffer overflow or a system crash via a crafted payload."}, {"Reference": "CVE-2022-28331", "Description": "On Windows, Apache Portable Runtime 1.7.0 and earlier may write beyond the end of a stack based buffer in apr_socket_sendv(). This is a result of integer overflow."}, {"Reference": "CVE-2022-28556", "Description": "Tenda AC15 US_AC15V1.0BR_V15.03.05.20_multi_TDE01.bin is vulnerable to Buffer Overflow. The stack overflow vulnerability lies in the /goform/setpptpservercfg interface of the web. The sent post data startip and endip are copied to the stack using the sanf function, resulting in stack overflow. Similarly, this vulnerability can be used together with CVE-2021-44971"}, {"Reference": "CVE-2022-29395", "Description": "TOTOLINK N600R V4.3.0cu.7647_B20210106 was discovered to contain a stack overflow via the apcliKey parameter in the function FUN_0041bac4."}, {"Reference": "CVE-2022-29396", "Description": "TOTOLINK N600R V4.3.0cu.7647_B20210106 was discovered to contain a stack overflow via the comment parameter in the function FUN_00418f10."}, {"Reference": "CVE-2022-29397", "Description": "TOTOLINK N600R V4.3.0cu.7647_B20210106 was discovered to contain a stack overflow via the comment parameter in the function FUN_004196c8."}, {"Reference": "CVE-2022-29398", "Description": "TOTOLINK N600R V4.3.0cu.7647_B20210106 was discovered to contain a stack overflow via the File parameter in the function FUN_0041309c."}, {"Reference": "CVE-2022-29399", "Description": "TOTOLINK N600R V4.3.0cu.7647_B20210106 was discovered to contain a stack overflow via the url parameter in the function FUN_00415bf0."}, {"Reference": "CVE-2022-29496", "Description": "A stack-based buffer overflow vulnerability exists in the BlynkConsole.h runCommand functionality of Blynk -Library v1.0.1. A specially-crafted network request can lead to command execution. An attacker can send a network request to trigger this vulnerability."}, {"Reference": "CVE-2022-29638", "Description": "TOTOLINK A3100R V4.1.2cu.5050_B20200504 and V4.1.2cu.5247_B20211129 were discovered to contain a stack overflow via the comment parameter in the function setIpQosRules. This vulnerability allows attackers to cause a Denial of Service (DoS) via a crafted POST request."}, {"Reference": "CVE-2022-29640", "Description": "TOTOLINK A3100R V4.1.2cu.5050_B20200504 and V4.1.2cu.5247_B20211129 were discovered to contain a stack overflow via the comment parameter in the function setPortForwardRules. This vulnerability allows attackers to cause a Denial of Service (DoS) via a crafted POST request."}, {"Reference": "CVE-2022-29641", "Description": "TOTOLINK A3100R V4.1.2cu.5050_B20200504 and V4.1.2cu.5247_B20211129 were discovered to contain a stack overflow via the startTime and endTime parameters in the function setParentalRules. This vulnerability allows attackers to cause a Denial of Service (DoS) via a crafted POST request."}, {"Reference": "CVE-2022-29642", "Description": "TOTOLINK A3100R V4.1.2cu.5050_B20200504 and V4.1.2cu.5247_B20211129 were discovered to contain a stack overflow via the url parameter in the function setUrlFilterRules. This vulnerability allows attackers to cause a Denial of Service (DoS) via a crafted POST request."}, {"Reference": "CVE-2022-29643", "Description": "TOTOLINK A3100R V4.1.2cu.5050_B20200504 and V4.1.2cu.5247_B20211129 were discovered to contain a stack overflow via the macAddress parameter in the function setMacQos. This vulnerability allows attackers to cause a Denial of Service (DoS) via a crafted POST request."}, {"Reference": "CVE-2022-2972", "Description": "MZ Automation's libIEC61850 (versions 1.4 and prior; version 1.5 prior to commit a3b04b7bc4872a5a39e5de3fdc5fbde52c09e10e) is vulnerable to a stack-based buffer overflow, which could allow an attacker to crash the device or remotely execute arbitrary code."}, {"Reference": "CVE-2022-29776", "Description": "Onlyoffice Document Server v6.0.0 and below and Core 6.1.0.26 and below were discovered to contain a stack overflow via the component DesktopEditor/common/File.cpp."}, {"Reference": "CVE-2022-30040", "Description": "Tenda AX1803 v1.0.0.1_2890 is vulnerable to Buffer Overflow. The vulnerability lies in rootfs_ In / goform / setsystimecfg of / bin / tdhttpd in ubif file system, attackers can access http://ip/goform/SetSysTimeCfg, and by setting the ntpserve parameter, the stack buffer overflow can be caused to achieve the effect of router denial of service."}, {"Reference": "CVE-2022-30306", "Description": "A stack-based buffer overflow vulnerability [CWE-121] in the CA sign functionality of FortiWeb version 7.0.1 and below, 6.4 all versions, version 6.3.19 and below may allow an authenticated attacker to achieve arbitrary code execution via specifically crafted password."}, {"Reference": "CVE-2022-30426", "Description": "There is a stack buffer overflow vulnerability, which could lead to arbitrary code execution in UEFI DXE driver on some Acer products. An attack could exploit this vulnerability to escalate privilege from ring 3 to ring 0, and hijack control flow during UEFI DXE execution. This affects Altos T110 F3 firmware version <= P13 (latest) and AP130 F2 firmware version <= P04 (latest) and Aspire 1600X firmware version <= P11.A3L (latest) and Aspire 1602M firmware version <= P11.A3L (latest) and Aspire 7600U firmware version <= P11.A4 (latest) and Aspire MC605 firmware version <= P11.A4L (latest) and Aspire TC-105 firmware version <= P12.B0L (latest) and Aspire TC-120 firmware version <= P11-A4 (latest) and Aspire U5-620 firmware version <= P11.A1 (latest) and Aspire X1935 firmware version <= P11.A3L (latest) and Aspire X3475 firmware version <= P11.A3L (latest) and Aspire X3995 firmware version <= P11.A3L (latest) and Aspire XC100 firmware version <= P11.B3 (latest) and Aspire XC600 firmware version <= P11.A4 (latest) and Aspire Z3-615 firmware version <= P11.A2L (latest) and Veriton E430G firmware version <= P21.A1 (latest) and Veriton B630_49 firmware version <= AAP02SR (latest) and Veriton E430 firmware version <= P11.A4 (latest) and Veriton M2110G firmware version <= P21.A3 (latest) and Veriton M2120G fir."}, {"Reference": "CVE-2022-30472", "Description": "Tenda AC Seris Router AC18_V15.03.05.19(6318) has a stack-based buffer overflow vulnerability in function fromAddressNat"}, {"Reference": "CVE-2022-30473", "Description": "Tenda AC Series Router AC18_V15.03.05.19(6318) has a stack-based buffer overflow vulnerability in function form_fast_setting_wifi_set"}, {"Reference": "CVE-2022-30475", "Description": "Tenda AC Series Router AC18_V15.03.05.19(6318) was discovered to contain a stack-based buffer overflow in the httpd module when handling /goform/WifiExtraSet request."}, {"Reference": "CVE-2022-30476", "Description": "Tenda AC Series Router AC18_V15.03.05.19(6318) was discovered to contain a stack-based buffer overflow in the httpd module when handling /goform/SetFirewallCfg request."}, {"Reference": "CVE-2022-31031", "Description": "PJSIP is a free and open source multimedia communication library written in C language implementing standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE. In versions prior to and including 2.12.1 a stack buffer overflow vulnerability affects PJSIP users that use STUN in their applications, either by: setting a STUN server in their account/media config in PJSUA/PJSUA2 level, or directly using `pjlib-util/stun_simple` API. A patch is available in commit 450baca which should be included in the next release. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-32030", "Description": "Tenda AX1806 v1.0.0.1 was discovered to contain a stack overflow via the list parameter in the function formSetQosBand."}, {"Reference": "CVE-2022-32031", "Description": "Tenda AX1806 v1.0.0.1 was discovered to contain a stack overflow via the list parameter in the function fromSetRouteStatic."}, {"Reference": "CVE-2022-32037", "Description": "Tenda M3 V1.0.0.12 was discovered to contain a stack overflow via the function formSetAPCfg."}, {"Reference": "CVE-2022-32039", "Description": "Tenda M3 V1.0.0.12 was discovered to contain a stack overflow via the listN parameter in the function fromDhcpListClient."}, {"Reference": "CVE-2022-32040", "Description": "Tenda M3 V1.0.0.12 was discovered to contain a stack overflow via the function formSetCfm."}, {"Reference": "CVE-2022-32041", "Description": "Tenda M3 V1.0.0.12 was discovered to contain a stack overflow via the function formGetPassengerAnalyseData."}, {"Reference": "CVE-2022-32043", "Description": "Tenda M3 V1.0.0.12 was discovered to contain a stack overflow via the function formSetAccessCodeInfo."}, {"Reference": "CVE-2022-32044", "Description": "TOTOLINK T6 V4.1.9cu.5179_B20201015 was discovered to contain a stack overflow via the password parameter in the function FUN_00413f80."}, {"Reference": "CVE-2022-32045", "Description": "TOTOLINK T6 V4.1.9cu.5179_B20201015 was discovered to contain a stack overflow via the desc parameter in the function FUN_00413be4."}, {"Reference": "CVE-2022-32046", "Description": "TOTOLINK T6 V4.1.9cu.5179_B20201015 was discovered to contain a stack overflow via the desc parameter in the function FUN_0041880c."}, {"Reference": "CVE-2022-32047", "Description": "TOTOLINK T6 V4.1.9cu.5179_B20201015 was discovered to contain a stack overflow via the desc parameter in the function FUN_00412ef4."}, {"Reference": "CVE-2022-32048", "Description": "TOTOLINK T6 V4.1.9cu.5179_B20201015 was discovered to contain a stack overflow via the command parameter in the function FUN_0041cc88."}, {"Reference": "CVE-2022-32049", "Description": "TOTOLINK T6 V4.1.9cu.5179_B20201015 was discovered to contain a stack overflow via the url parameter in the function FUN_00418540."}, {"Reference": "CVE-2022-32050", "Description": "TOTOLINK T6 V4.1.9cu.5179_B20201015 was discovered to contain a stack overflow via the cloneMac parameter in the function FUN_0041af40."}, {"Reference": "CVE-2022-32051", "Description": "TOTOLINK T6 V4.1.9cu.5179_B20201015 was discovered to contain a stack overflow via the desc, week, sTime, eTime parameters in the function FUN_004133c4."}, {"Reference": "CVE-2022-32052", "Description": "TOTOLINK T6 V4.1.9cu.5179_B20201015 was discovered to contain a stack overflow via the desc parameter in the function FUN_004137a4."}, {"Reference": "CVE-2022-32053", "Description": "TOTOLINK T6 V4.1.9cu.5179_B20201015 was discovered to contain a stack overflow via the cloneMac parameter in the function FUN_0041621c."}, {"Reference": "CVE-2022-32630", "Description": "In throttling, there is a possible out of bounds write due to an incorrect calculation of buffer size. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07405966; Issue ID: ALPS07405966."}, {"Reference": "CVE-2022-32646", "Description": "In gpu drm, there is a possible stack overflow due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07363501; Issue ID: ALPS07363501."}, {"Reference": "CVE-2022-32959", "Description": "HiCOS\u2019 client-side citizen digital certificate component has a stack-based buffer overflow vulnerability when reading IC card due to insufficient parameter length validation for OS information. An unauthenticated physical attacker can exploit this vulnerability to execute arbitrary code, manipulate system data or terminate service."}, {"Reference": "CVE-2022-33183", "Description": "A vulnerability in Brocade Fabric OS CLI before Brocade Fabric OS v9.1.0, 9.0.1e, 8.2.3c, 8.2.0cbn5, 7.4.2.j could allow a remote authenticated attacker to perform stack buffer overflow using in \u201cfirmwaredownload\u201d and \u201cdiagshow\u201d commands."}, {"Reference": "CVE-2022-34287", "Description": "A vulnerability has been identified in PADS Standard/Plus Viewer (All versions). The affected application contains a stack corruption vulnerability while parsing PCB files. An attacker could leverage this vulnerability to leak information in the context of the current process. (FG-VD-22-052, FG-VD-22-056)"}, {"Reference": "CVE-2022-34290", "Description": "A vulnerability has been identified in PADS Standard/Plus Viewer (All versions). The affected application contains a stack corruption vulnerability while parsing PCB files. An attacker could leverage this vulnerability to leak information in the context of the current process. (FG-VD-22-055)"}, {"Reference": "CVE-2022-34291", "Description": "A vulnerability has been identified in PADS Standard/Plus Viewer (All versions). The affected application contains a stack corruption vulnerability while parsing PCB files. An attacker could leverage this vulnerability to leak information in the context of the current process. (FG-VD-22-057, FG-VD-22-058, FG-VD-22-060)"}, {"Reference": "CVE-2022-35219", "Description": "The NHI card\u2019s web service component has a stack-based buffer overflow vulnerability due to insufficient validation for network packet key parameter. A LAN attacker with general user privilege can exploit this vulnerability to disrupt service."}, {"Reference": "CVE-2022-35407", "Description": "An issue was discovered in Insyde InsydeH2O with kernel 5.0 through 5.5. A stack buffer overflow leads to arbitrary code execution in the SetupUtility driver on Intel platforms. An attacker can change the values of certain UEFI variables. If the size of the second variable exceeds the size of the first, then the buffer will be overwritten. This issue affects the SetupUtility driver of InsydeH2O."}, {"Reference": "CVE-2022-35690", "Description": "Adobe ColdFusion versions Update 14 (and earlier) and Update 4 (and earlier) are affected by a Stack-based Buffer Overflow vulnerability that could result in arbitrary code execution in the context of the current user. Exploitation of this issue does not require user interaction, the vulnerability is triggered when a crafted network packet is sent to the server."}, {"Reference": "CVE-2022-35710", "Description": "Adobe ColdFusion versions Update 14 (and earlier) and Update 4 (and earlier) are affected by a Stack-based Buffer Overflow vulnerability that could result in arbitrary code execution in the context of the current user. Exploitation of this issue does not require user interaction, the vulnerability is triggered when a crafted network packet is sent to the server."}, {"Reference": "CVE-2022-3602", "Description": "A buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. An attacker can craft a malicious email address to overflow four attacker-controlled bytes on the stack. This buffer overflow could result in a crash (causing a denial of service) or potentially remote code execution. Many platforms implement stack overflow protections which would mitigate against the risk of remote code execution. The risk may be further mitigated based on stack layout for any given platform/compiler. Pre-announcements of CVE-2022-3602 described this issue as CRITICAL. Further analysis based on some of the mitigating factors described above have led this to be downgraded to HIGH. Users are still encouraged to upgrade to a new version as soon as possible. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects. Fixed in OpenSSL 3.0.7 (Affected 3.0.0,3.0.1,3.0.2,3.0.3,3.0.4,3.0.5,3.0.6)."}, {"Reference": "CVE-2022-36063", "Description": "Azure RTOS USBx is a USB host, device, and on-the-go (OTG) embedded stack, fully integrated with Azure RTOS ThreadX and available for all Azure RTOS ThreadX\u2013supported processors. Azure RTOS USBX implementation of host support for USB CDC ECM includes an integer underflow and a buffer overflow in the `_ux_host_class_cdc_ecm_mac_address_get` function which may be potentially exploited to achieve remote code execution or denial of service. Setting mac address string descriptor length to a `0` or `1` allows an attacker to introduce an integer underflow followed (string_length) by a buffer overflow of the `cdc_ecm -> ux_host_class_cdc_ecm_node_id` array. This may allow one to redirect the code execution flow or introduce a denial of service. The fix has been included in USBX release [6.1.12](https://github.com/azure-rtos/usbx/releases/tag/v6.1.12_rel). Improved mac address string descriptor length validation to check for unexpectedly small values may be used as a workaround."}, {"Reference": "CVE-2022-36620", "Description": "D-link DIR-816 A2_v1.10CNB04, DIR-878 DIR_878_FW1.30B08.img is vulnerable to Buffer Overflow via /goform/addRouting."}, {"Reference": "CVE-2022-37134", "Description": "D-link DIR-816 A2_v1.10CNB04.img is vulnerable to Buffer Overflow via /goform/form2Wan.cgi. When wantype is 3, l2tp_usrname will be decrypted by base64, and the result will be stored in v94, which does not check the size of l2tp_usrname, resulting in stack overflow."}, {"Reference": "CVE-2022-37415", "Description": "The Uniwill SparkIO.sys driver 1.0 is vulnerable to a stack-based buffer overflow via IOCTL 0x40002008."}, {"Reference": "CVE-2022-39803", "Description": "Due to lack of proper memory management, when a victim opens a manipulated ACIS Part and Assembly (.sat, CoreCadTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-39804", "Description": "Due to lack of proper memory management, when a victim opens a manipulated SolidWorks Part (.sldprt, CoreCadTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-39805", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Computer Graphics Metafile (.cgm, CgmTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-39806", "Description": "Due to lack of proper memory management, when a victim opens a manipulated SolidWorks Drawing (.slddrw, CoreCadTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-39808", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Wavefront Object (.obj, ObjTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41167", "Description": "Due to lack of proper memory management, when a victim opens a manipulated AutoCAD (.dwg, TeighaTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41168", "Description": "Due to lack of proper memory management, when a victim opens a manipulated CATIA5 Part (.catpart, CatiaTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41170", "Description": "Due to lack of proper memory management, when a victim opens a manipulated CATIA4 Part (.model, CatiaTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41172", "Description": "Due to lack of proper memory management, when a victim opens a manipulated AutoCAD (.dxf, TeighaTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41175", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Enhanced Metafile (.emf, emf.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41177", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Iges Part and Assembly (.igs, .iges, CoreCadTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41179", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Jupiter Tesselation (.jt, JtTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41180", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Portable Document Format (.pdf, PDFPublishing.dll) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41184", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Windows Cursor File (.cur, ico.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41185", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Visual Design Stream (.vds, MataiPersistence.dll) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41186", "Description": "Due to lack of proper memory management, when a victim opens manipulated Computer Graphics Metafile (.cgm, CgmCore.dll) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, a Remote Code Execution can be triggered when payload forces a stack-based overflow and or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41187", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Wavefront Object (.obj, ObjTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41189", "Description": "Due to lack of proper memory management, when a victim opens a manipulated AutoCAD (.dwg, TeighaTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41190", "Description": "Due to lack of proper memory management, when a victim opens a manipulated AutoCAD (.dxf, TeighaTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41191", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Jupiter Tesselation (.jt, JTReader.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41193", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Encapsulated Post Script (.eps, ai.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41195", "Description": "Due to lack of proper memory management, when a victim opens a manipulated EAAmiga Interchange File Format (.iff, 2d.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41196", "Description": "Due to lack of proper memory management, when a victim opens a manipulated VRML Worlds (.wrl, vrml.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41198", "Description": "Due to lack of proper memory management, when a victim opens a manipulated SketchUp (.skp, SketchUp.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41199", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Open Inventor File (.iv, vrml.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41200", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Scalable Vector Graphic (.svg, svg.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41201", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Right Hemisphere Binary (.rh, rh.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41202", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Visual Design Stream (.vds, vds.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41211", "Description": "Due to lack of proper memory management, when a victim opens manipulated file received from untrusted sources in SAP 3D Visual Enterprise Author and SAP 3D Visual Enterprise Viewer, Arbitrary Code Execution can be triggered when payload forces:Re-use of dangling pointer which refers to overwritten space in memory. The accessed memory must be filled with code to execute the attack. Therefore, repeated success is unlikely.Stack-based buffer overflow. Since the memory overwritten is random, based on access rights of the memory, repeated success is not assured. "}, {"Reference": "CVE-2022-41415", "Description": "Acer Altos W2000h-W570h F4 R01.03.0018 was discovered to contain a stack overflow in the RevserveMem component. This vulnerability allows attackers to cause a Denial of Service (DoS) via injecting crafted shellcode into the NVRAM variable."}, {"Reference": "CVE-2022-41420", "Description": "nasm v2.16 was discovered to contain a stack overflow in the Ndisasm component"}, {"Reference": "CVE-2022-41517", "Description": "TOTOLINK NR1800X V9.1.0u.6279_B20210910 was discovered to contain a stack overflow in the lang parameter in the setLanguageCfg function"}, {"Reference": "CVE-2022-41520", "Description": "TOTOLINK NR1800X V9.1.0u.6279_B20210910 was discovered to contain an authenticated stack overflow via the File parameter in the UploadCustomModule function."}, {"Reference": "CVE-2022-41521", "Description": "TOTOLINK NR1800X V9.1.0u.6279_B20210910 was discovered to contain an authenticated stack overflow via the sPort/ePort parameter in the setIpPortFilterRules function."}, {"Reference": "CVE-2022-41522", "Description": "TOTOLINK NR1800X V9.1.0u.6279_B20210910 was discovered to contain an unauthenticated stack overflow via the \"main\" function."}, {"Reference": "CVE-2022-41523", "Description": "TOTOLINK NR1800X V9.1.0u.6279_B20210910 was discovered to contain an authenticated stack overflow via the command parameter in the setTracerouteCfg function."}, {"Reference": "CVE-2022-41524", "Description": "TOTOLINK NR1800X V9.1.0u.6279_B20210910 was discovered to contain an authenticated stack overflow via the week, sTime, and eTime parameters in the setParentalRules function."}, {"Reference": "CVE-2022-41981", "Description": "A stack-based buffer overflow vulnerability exists in the TGA file format parser of OpenImageIO v2.3.19.0. A specially-crafted targa file can lead to out of bounds read and write on the process stack, which can lead to arbitrary code execution. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2021-21906", "Description": "Stack-based buffer overflow vulnerability exists in how the CMA readfile function of Garrett Metal Detectors iC Module CMA Version 5.0 is used at various locations. The Garrett iC Module exposes an authenticated CLI over TCP port 6877. This interface is used by a secondary GUI client, called \u201cCMA Connect\u201d, to interact with the iC Module on behalf of the user. Every time a user submits a password to the CLI password prompt, the buffer containing their input is passed as the password parameter to the checkPassword function."}, {"Reference": "CVE-2022-42901", "Description": "Bentley MicroStation and MicroStation-based applications may be affected by out-of-bounds and stack overflow issues when opening crafted XMT files. Exploiting these issues could lead to information disclosure and code execution. The fixed versions are 10.17.01.58* for MicroStation and 10.17.01.19* for Bentley View."}, {"Reference": "CVE-2022-27255", "Description": "In Realtek eCos RSDK 1.5.7p1 and MSDK 4.9.4p1, the SIP ALG function that rewrites SDP data has a stack-based buffer overflow. This allows an attacker to remotely execute code without authentication via a crafted SIP packet that contains malicious SDP data."}, {"Reference": "CVE-2022-35506", "Description": "TripleCross v0.1.0 was discovered to contain a stack overflow which occurs because there is no limit to the length of program parameters."}, {"Reference": "CVE-2022-35558", "Description": "A stack overflow vulnerability exists in /goform/WifiMacFilterGet in Tenda W6 V1.0.0.9(4122) version, which can be exploited by attackers to cause a denial of service (DoS) via the index parameter."}, {"Reference": "CVE-2022-35559", "Description": "A stack overflow vulnerability exists in /goform/setAutoPing in Tenda W6 V1.0.0.9(4122), which allows an attacker to construct ping1 parameters and ping2 parameters for a stack overflow attack. An attacker can use this vulnerability to execute arbitrary code execution."}, {"Reference": "CVE-2022-35560", "Description": "A stack overflow vulnerability exists in /goform/wifiSSIDset in Tenda W6 V1.0.0.9(4122) version, which can be exploited by attackers to cause a denial of service (DoS) via the index parameter."}, {"Reference": "CVE-2022-35561", "Description": "A stack overflow vulnerability exists in /goform/WifiMacFilterSet in Tenda W6 V1.0.0.9(4122) version, which can be exploited by attackers to cause a denial of service (DoS) via the index parameter."}, {"Reference": "CVE-2022-43945", "Description": "The Linux kernel NFSD implementation prior to versions 5.19.17 and 6.0.2 are vulnerable to buffer overflow. NFSD tracks the number of pages held by each NFSD thread by combining the receive and send buffers of a remote procedure call (RPC) into a single array of pages. A client can force the send buffer to shrink by sending an RPC message over TCP with garbage data added at the end of the message. The RPC message with garbage data is still correctly formed according to the specification and is passed forward to handlers. Vulnerable code in NFSD is not expecting the oversized request and writes beyond the allocated buffer space. CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H"}, {"Reference": "CVE-2021-31755", "Description": "An issue was discovered on Tenda AC11 devices with firmware through 02.03.01.104_CN. A stack buffer overflow vulnerability in /goform/setmac allows attackers to execute arbitrary code on the system via a crafted post request."}, {"Reference": "CVE-2022-20699", "Description": "Multiple vulnerabilities in Cisco Small Business RV160, RV260, RV340, and RV345 Series Routers could allow an attacker to do any of the following: Execute arbitrary code Elevate privileges Execute arbitrary commands Bypass authentication and authorization protections Fetch and run unsigned software Cause denial of service (DoS) For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2022-39173", "Description": "In wolfSSL before 5.5.1, malicious clients can cause a buffer overflow during a TLS 1.3 handshake. This occurs when an attacker supposedly resumes a previous TLS session. During the resumption Client Hello a Hello Retry Request must be triggered. Both Client Hellos are required to contain a list of duplicate cipher suites to trigger the buffer overflow. In total, two Client Hellos have to be sent: one in the resumed session, and a second one as a response to a Hello Retry Request message."}, {"Reference": "CVE-2021-1573", "Description": "A vulnerability in the web services interface of Cisco Adaptive Security Appliance (ASA) Software and Cisco Firepower Threat Defense (FTD) Software could allow an unauthenticated, remote attacker to trigger a denial of service (DoS) condition. This vulnerability is due to improper input validation when parsing HTTPS requests. An attacker could exploit this vulnerability by sending a malicious HTTPS request to an affected device. A successful exploit could allow the attacker to cause the device to reload, resulting in a DoS condition."}, {"Reference": "CVE-2021-21967", "Description": "An out-of-bounds write vulnerability exists in the OTA update task functionality of Sealevel Systems, Inc. SeaConnect 370W v1.3.34. A specially-crafted MQTT payload can lead to denial of service. An attacker can perform a man-in-the-middle attack to trigger this vulnerability."}, {"Reference": "CVE-2021-34704", "Description": "A vulnerability in the web services interface of Cisco Adaptive Security Appliance (ASA) Software and Cisco Firepower Threat Defense (FTD) Software could allow an unauthenticated, remote attacker to trigger a denial of service (DoS) condition. This vulnerability is due to improper input validation when parsing HTTPS requests. An attacker could exploit this vulnerability by sending a malicious HTTPS request to an affected device. A successful exploit could allow the attacker to cause the device to reload, resulting in a DoS condition."}, {"Reference": "CVE-2022-20824", "Description": "A vulnerability in the Cisco Discovery Protocol feature of Cisco FXOS Software and Cisco NX-OS Software could allow an unauthenticated, adjacent attacker to execute arbitrary code with root privileges or cause a denial of service (DoS) condition on an affected device. This vulnerability is due to improper input validation of specific values that are within a Cisco Discovery Protocol message. An attacker could exploit this vulnerability by sending a malicious Cisco Discovery Protocol packet to an affected device. A successful exploit could allow the attacker to execute arbitrary code with root privileges or cause the Cisco Discovery Protocol process to crash and restart multiple times, which would cause the affected device to reload, resulting in a DoS condition. Note: Cisco Discovery Protocol is a Layer 2 protocol. To exploit this vulnerability, an attacker must be in the same broadcast domain as the affected device (Layer 2 adjacent)."}, {"Reference": "CVE-2022-36482", "Description": "TOTOLINK N350RT V9.3.5u.6139_B20201216 was discovered to contain a command injection vulnerability via the lang parameter in the function setLanguageCfg."}, {"Reference": "CVE-2022-37078", "Description": "TOTOLINK A7000R V9.1.0u.6115_B20201022 was discovered to contain a command injection vulnerability via the lang parameter at /setting/setLanguageCfg."}, {"Reference": "CVE-2022-20825", "Description": "A vulnerability in the web-based management interface of Cisco Small Business RV110W, RV130, RV130W, and RV215W Routers could allow an unauthenticated, remote attacker to execute arbitrary code or cause an affected device to restart unexpectedly, resulting in a denial of service (DoS) condition. This vulnerability is due to insufficient user input validation of incoming HTTP packets. An attacker could exploit this vulnerability by sending a crafted request to the web-based management interface. A successful exploit could allow the attacker to execute arbitrary commands on an affected device using root-level privileges. Cisco has not released software updates that address this vulnerability."}, {"Reference": "CVE-2022-20841", "Description": "Multiple vulnerabilities in Cisco Small Business RV160, RV260, RV340, and RV345 Series Routers could allow an unauthenticated, remote attacker to execute arbitrary code or cause a denial of service (DoS) condition on an affected device. For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2022-20945", "Description": "A vulnerability in the 802.11 association frame validation of Cisco Catalyst 9100 Series Access Points (APs) could allow an unauthenticated, adjacent attacker to cause a denial of service (DoS) condition on an affected device. This vulnerability is due to insufficient input validation of certain parameters within association request frames received by the AP. An attacker could exploit this vulnerability by sending a crafted 802.11 association request to a nearby device. An exploit could allow the attacker to unexpectedly reload the device, resulting in a DoS condition."}, {"Reference": "CVE-2022-26780", "Description": "Multiple improper input validation vulnerabilities exists in the libnvram.so nvram_import functionality of InHand Networks InRouter302 V3.5.4. A specially-crafted file can lead to remote code execution. An attacker can send a sequence of requests to trigger this vulnerability.An improper input validation vulnerability exists in the `httpd`'s `user_define_init` function. Controlling the `user_define_timeout` nvram variable can lead to remote code execution."}, {"Reference": "CVE-2022-26781", "Description": "Multiple improper input validation vulnerabilities exists in the libnvram.so nvram_import functionality of InHand Networks InRouter302 V3.5.4. A specially-crafted file can lead to remote code execution. An attacker can send a sequence of requests to trigger this vulnerability.An improper input validation vulnerability exists in the `httpd`'s `user_define_print` function. Controlling the `user_define_timeout` nvram variable can lead to remote code execution."}, {"Reference": "CVE-2022-26782", "Description": "Multiple improper input validation vulnerabilities exists in the libnvram.so nvram_import functionality of InHand Networks InRouter302 V3.5.4. A specially-crafted file can lead to remote code execution. An attacker can send a sequence of requests to trigger this vulnerability.An improper input validation vulnerability exists in the `httpd`'s `user_define_set_item` function. Controlling the `user_define_timeout` nvram variable can lead to remote code execution."}, {"Reference": "CVE-2022-1185", "Description": "A denial of service vulnerability when rendering RDoc files in GitLab CE/EE versions 10 to 14.7.7, 14.8.0 to 14.8.5, and 14.9.0 to 14.9.2 allows an attacker to crash the GitLab web application with a maliciously crafted RDoc file"}, {"Reference": "CVE-2022-22899", "Description": "Core FTP / SFTP Server v2 Build 725 was discovered to allow unauthenticated attackers to cause a Denial of Service (DoS) via a crafted packet through the SSH service."}, {"Reference": "CVE-2022-41842", "Description": "An issue was discovered in Xpdf 4.04. There is a crash in gfseek(_IO_FILE*, long, int) in goo/gfile.cc."}, {"Reference": "CVE-2022-41844", "Description": "An issue was discovered in Xpdf 4.04. There is a crash in XRef::fetch(int, int, Object*, int) in xpdf/XRef.cc, a different vulnerability than CVE-2018-16369 and CVE-2019-16088."}]}
{"ID": "122", "Name": "Heap-based Buffer Overflow", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "A heap overflow condition is a buffer overflow, where the buffer that can be overwritten is allocated in the heap portion of memory, generally meaning that the buffer was allocated using a routine such as malloc().", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "788", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "787", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart", "DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)"], "Note": "Buffer overflows generally lead to crashes. Other attacks leading to lack of availability are possible, including putting the program into an infinite loop."}, {"Scope": ["Integrity", "Confidentiality", "Availability", "Access Control"], "Impact": ["Execute Unauthorized Code or Commands", "Bypass Protection Mechanism", "Modify Memory"], "Note": "Buffer overflows often can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. Besides important user data, heap-based overflows can be used to overwrite function pointers that may be living in memory, pointing it to the attacker's code. Even in applications that do not explicitly use function pointers, the run-time will usually leave many in memory. For example, object methods in C++ are generally implemented using function pointers. Even in C programs, there is often a global offset table used by the underlying runtime."}, {"Scope": ["Integrity", "Confidentiality", "Availability", "Access Control", "Other"], "Impact": ["Execute Unauthorized Code or Commands", "Bypass Protection Mechanism", "Other"], "Note": "When the consequence is arbitrary code execution, this can often be used to subvert any other security service."}], "DetectionMethods": [{"DetectionMethodID": "DM-13", "Method": "Fuzzing", "Description": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.", "Effectiveness": "High"}], "PotentialMitigations": [{"Description": "Pre-design: Use a language or compiler that performs automatic bounds checking."}, {"Phase": ["Architecture and Design"], "Description": "Use an abstraction library to abstract away risky APIs. Not a complete solution."}, {"MitigationID": "MIT-10", "Phase": ["Operation", "Build and Compilation"], "Strategy": "Environment Hardening", "Description": "\n\nUse automatic buffer overflow detection mechanisms that are offered by certain compilers or compiler extensions. Examples include: the Microsoft Visual Studio /GS flag, Fedora/Red Hat FORTIFY_SOURCE GCC flag, StackGuard, and ProPolice, which provide various mechanisms including canary-based detection and range/index checking. \n\n\n D3-SFCV (Stack Frame Canary Validation) from D3FEND [REF-1334] discusses canary-based detection in detail. \n", "Effectiveness": "Defense in Depth", "EffectivenessNotes": "\n\n This is not necessarily a complete solution, since these mechanisms only detect certain types of overflows. In addition, the result is still a denial of service, since the typical response is to exit the application. \n"}, {"MitigationID": "MIT-11", "Phase": ["Operation", "Build and Compilation"], "Strategy": "Environment Hardening", "Description": "\n\nRun or compile the software using features or extensions that randomly arrange the positions of a program's executable and libraries in memory. Because this makes the addresses unpredictable, it can prevent an attacker from reliably jumping to exploitable code. \n\n\n Examples include Address Space Layout Randomization (ASLR) [REF-58] [REF-60] and Position-Independent Executables (PIE) [REF-64]. Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as \"rebasing\" (for Windows) and \"prelinking\" (for Linux) [REF-1332] using randomly generated addresses. ASLR for libraries cannot be used in conjunction with prelink since it would require relocating the libraries at run-time, defeating the whole purpose of prelinking. \n\n\n For more information on these techniques see D3-SAOR (Segment Address Offset Randomization) from D3FEND [REF-1335]. \n", "Effectiveness": "Defense in Depth", "EffectivenessNotes": "These techniques do not provide a complete solution. For instance, exploits frequently use a bug that discloses memory addresses in order to maximize reliability of code execution [REF-1337]. It has also been shown that a side-channel attack can bypass ASLR [REF-1333]"}, {"Phase": ["Implementation"], "Description": "Implement and perform bounds checking on input."}, {"Phase": ["Implementation"], "Strategy": "Libraries or Frameworks", "Description": "Do not use dangerous functions such as gets. Look for their safe equivalent, which checks for the boundary."}, {"Phase": ["Operation"], "Description": "Use OS-level preventative functionality. This is not a complete solution, but it provides some defense in depth."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "While buffer overflow examples can be rather complex, it is possible to have very simple, yet still exploitable, heap-based buffer overflows:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t#define BUFSIZE 256\n\tint main(int argc, char **argv) {\n\t\tchar *buf;\n\t\tbuf = (char *)malloc(sizeof(char)*BUFSIZE);\n\t\tstrcpy(buf, argv[1]);\n\t}\n```"}, {"BodyText": "The buffer is allocated heap memory with a fixed size, but there is no guarantee the string in argv[1] will not exceed this size and cause an overflow."}]}, {"ID": "DX-19", "Entries": [{"IntroText": "This example applies an encoding procedure to an input string and stores it into a buffer."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar * copy_input(char *user_supplied_string){\n\t\t\tint i, dst_index;\n\t\t\tchar *dst_buf = (char*)malloc(4*sizeof(char) * MAX_SIZE);\n\t\t\tif ( MAX_SIZE <= strlen(user_supplied_string) ){\n\t\t\t\tdie(\"user string too long, die evil hacker!\");\n\t\t\t}\n\t\t\tdst_index = 0;\n\t\t\tfor ( i = 0; i < strlen(user_supplied_string); i++ ){\n\t\t\t\t\tif( '&' == user_supplied_string[i] ){\n\t\t\t\t\t\tdst_buf[dst_index++] = '&';\n\t\t\t\t\t\tdst_buf[dst_index++] = 'a';\n\t\t\t\t\t\tdst_buf[dst_index++] = 'm';\n\t\t\t\t\t\tdst_buf[dst_index++] = 'p';\n\t\t\t\t\t\tdst_buf[dst_index++] = ';';\n\t\t\t\t\t}\n\t\t\t\t\telse if ('<' == user_supplied_string[i] ){\n```\n/* encode to &lt; */* \n\t\t\t\t\t\t\t}\n\t\t\t\t\telse dst_buf[dst_index++] = user_supplied_string[i];}\n\t\t\treturn dst_buf;}"}, {"BodyText": "The programmer attempts to encode the ampersand character in the user-controlled string, however the length of the string is validated before the encoding procedure is applied. Furthermore, the programmer assumes encoding expansion will only expand a given character by a factor of 4, while the encoding of the ampersand expands by 5. As a result, when the encoding procedure expands the string it is possible to overflow the destination buffer if the attacker provides a string of many ampersands."}]}], "ObservedExamples": [{"Reference": "CVE-2021-43537", "Description": "Chain: in a web browser, an unsigned 64-bit integer is forcibly cast to a 32-bit integer (CWE-681) and potentially leading to an integer overflow (CWE-190). If an integer overflow occurs, this can cause heap memory corruption (CWE-122)", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-43537"}, {"Reference": "CVE-2007-4268", "Description": "Chain: integer signedness error (CWE-195) passes signed comparison, leading to heap overflow (CWE-122)", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-4268"}, {"Reference": "CVE-2009-2523", "Description": "Chain: product does not handle when an input string is not NULL terminated (CWE-170), leading to buffer over-read (CWE-125) or heap-based buffer overflow (CWE-122).", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2523"}, {"Reference": "CVE-2021-29529", "Description": "Chain: machine-learning product can have a heap-based buffer overflow (CWE-122) when some integer-oriented bounds are calculated by using ceiling() and floor() on floating point values (CWE-1339)", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-29529"}, {"Reference": "CVE-2010-1866", "Description": "Chain: integer overflow (CWE-190) causes a negative signed value, which later bypasses a maximum-only check (CWE-839), leading to heap-based buffer overflow (CWE-122).", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-1866"}], "AffectedResources": ["Memory"], "RelatedAttackPatterns": ["92"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "Heap-based buffer overflows are usually just as dangerous as stack-based buffer overflows."}], "Top25Examples": [{"Reference": "CVE-2021-0964", "Description": "In C2SoftMP3::process() of C2SoftMp3Dec.cpp, there is a possible out of bounds write due to a heap buffer overflow. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-9Android ID: A-193363621"}, {"Reference": "CVE-2021-20043", "Description": "A Heap-based buffer overflow vulnerability in SonicWall SMA100 getBookmarks method allows a remote authenticated attacker to potentially execute code as the nobody user in the appliance. This vulnerability affected SMA 200, 210, 400, 410 and 500v appliances."}, {"Reference": "CVE-2021-21793", "Description": "An out-of-bounds write vulnerability exists in the JPG sof_nb_comp header processing functionality of Accusoft ImageGear 19.8 and 19.9. A specially crafted malformed file can lead to memory corruption. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2021-21832", "Description": "A memory corruption vulnerability exists in the ISO Parsing functionality of Disc Soft Ltd Deamon Tools Pro 8.3.0.0767. A specially crafted malformed file can lead to an out-of-bounds write. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2021-21914", "Description": "A heap-based buffer overflow vulnerability exists in the DecoderStream::Append functionality of Accusoft ImageGear 19.10. A specially-crafted file can lead to code execution. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2021-21938", "Description": "A heap-based buffer overflow vulnerability exists in the Palette box parser functionality of Accusoft ImageGear 19.10. A specially-crafted file can lead to code execution. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2021-21939", "Description": "A heap-based buffer overflow vulnerability exists in the XWD parser functionality of Accusoft ImageGear 19.10. A specially-crafted file can lead to code execution. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2021-21943", "Description": "A heap-based buffer overflow vulnerability exists in the XWD parser functionality of Accusoft ImageGear 19.10. A specially-crafted file can lead to code execution. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2021-21947", "Description": "Two heap-based buffer overflow vulnerabilities exists in the JPEG-JFIF lossless Huffman image parser functionality of Accusoft ImageGear 19.10. A specially-crafted file can lead to a heap buffer overflow. An attacker can provide a malicious file to trigger these vulnerabilities.This heap-based buffer overflow takes place when the `SOF3` precision is greater or equal than 9."}, {"Reference": "CVE-2021-21948", "Description": "A heap-based buffer overflow vulnerability exists in the readDatHeadVec functionality of AnyCubic Chitubox AnyCubic Plugin 1.0.0. A specially-crafted GF file can lead to a heap buffer overflow. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2021-21962", "Description": "A heap-based buffer overflow vulnerability exists in the OTA Update u-download functionality of Sealevel Systems, Inc. SeaConnect 370W v1.3.34. A series of specially-crafted MQTT payloads can lead to remote code execution. An attacker must perform a man-in-the-middle attack in order to trigger this vulnerability."}, {"Reference": "CVE-2021-23157", "Description": "WECON LeviStudioU Versions 2019-09-21 and prior are vulnerable to a heap-based buffer overflow, which may allow an attacker to remotely execute code."}, {"Reference": "CVE-2021-23165", "Description": "A flaw was found in htmldoc before v1.9.12. Heap buffer overflow in pspdf_prepare_outpages(), in ps-pdf.cxx may lead to execute arbitrary code and denial of service."}, {"Reference": "CVE-2021-23169", "Description": "A heap-buffer overflow was found in the copyIntoFrameBuffer function of OpenEXR in versions before 3.0.1. An attacker could use this flaw to execute arbitrary code with the permissions of the user running the application compiled against OpenEXR."}, {"Reference": "CVE-2021-26252", "Description": "A flaw was found in htmldoc in v1.9.12. Heap buffer overflow in pspdf_prepare_page(),in ps-pdf.cxx may lead to execute arbitrary code and denial of service."}, {"Reference": "CVE-2021-26259", "Description": "A flaw was found in htmldoc in v1.9.12. Heap buffer overflow in render_table_row(),in ps-pdf.cxx may lead to arbitrary code execution and denial of service."}, {"Reference": "CVE-2021-28237", "Description": "LibreDWG v0.12.3 was discovered to contain a heap-buffer overflow via decode_preR13."}, {"Reference": "CVE-2021-28277", "Description": "A Heap-based Buffer Overflow vulnerabilty exists in jhead 3.04 and 3.05 is affected by: Buffer Overflow via the RemoveUnknownSections function in jpgfile.c."}, {"Reference": "CVE-2021-28278", "Description": "A Heap-based Buffer Overflow vulnerability exists in jhead 3.04 and 3.05 via the RemoveSectionType function in jpgfile.c."}, {"Reference": "CVE-2021-30311", "Description": "Possible heap overflow due to lack of index validation before allocating and writing to heap buffer in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Industrial IOT, Snapdragon Mobile"}, {"Reference": "CVE-2021-33657", "Description": "There is a heap overflow problem in video/SDL_pixels.c in SDL (Simple DirectMedia Layer) 2.x to 2.0.18 versions. By crafting a malicious .BMP file, an attacker can cause the application using this library to crash, denial of service or Code execution."}, {"Reference": "CVE-2021-33912", "Description": "libspf2 before 1.2.11 has a four-byte heap-based buffer overflow that might allow remote attackers to execute arbitrary code (via an unauthenticated e-mail message from anywhere on the Internet) with a crafted SPF DNS record, because of incorrect sprintf usage in SPF_record_expand_data in spf_expand.c. The vulnerable code may be part of the supply chain of a site's e-mail infrastructure (e.g., with additional configuration, Exim can use libspf2; the Postfix web site links to unofficial patches for use of libspf2 with Postfix; older versions of spfquery relied on libspf2) but most often is not."}, {"Reference": "CVE-2021-33913", "Description": "libspf2 before 1.2.11 has a heap-based buffer overflow that might allow remote attackers to execute arbitrary code (via an unauthenticated e-mail message from anywhere on the Internet) with a crafted SPF DNS record, because of SPF_record_expand_data in spf_expand.c. The amount of overflowed data depends on the relationship between the length of an entire domain name and the length of its leftmost label. The vulnerable code may be part of the supply chain of a site's e-mail infrastructure (e.g., with additional configuration, Exim can use libspf2; the Postfix web site links to unofficial patches for use of libspf2 with Postfix; older versions of spfquery relied on libspf2) but most often is not."}, {"Reference": "CVE-2021-34583", "Description": "Crafted web server requests may cause a heap-based buffer overflow and could therefore trigger a denial-of- service condition due to a crash in the CODESYS V2 web server prior to V1.1.9.22."}, {"Reference": "CVE-2021-3575", "Description": "A heap-based buffer overflow was found in openjpeg in color.c:379:42 in sycc420_to_rgb when decompressing a crafted .j2k file. An attacker could use this to execute arbitrary code with the permissions of the application compiled against openjpeg."}, {"Reference": "CVE-2021-3610", "Description": "A heap-based buffer overflow vulnerability was found in ImageMagick in versions prior to 7.0.11-14 in ReadTIFFImage() in coders/tiff.c. This issue is due to an incorrect setting of the pixel array size, which can lead to a crash and segmentation fault."}, {"Reference": "CVE-2021-36173", "Description": "A heap-based buffer overflow in the firmware signature verification function of FortiOS versions 7.0.1, 7.0.0, 6.4.0 through 6.4.6, 6.2.0 through 6.2.9, and 6.0.0 through 6.0.13 may allow an attacker to execute arbitrary code via specially crafted installation images."}, {"Reference": "CVE-2021-36412", "Description": "A heap-based buffer overflow vulnerability exists in MP4Box in GPAC 1.0.1 via the gp_rtp_builder_do_mpeg12_video function, which allows attackers to possibly have unspecified other impact via a crafted file in the MP4Box command,"}, {"Reference": "CVE-2021-36417", "Description": "A heap-based buffer overflow vulnerability exists in GPAC v1.0.1 in the gf_isom_dovi_config_get function in MP4Box, which causes a denial of service or execute arbitrary code via a crafted file."}, {"Reference": "CVE-2021-37049", "Description": "There is a Heap-based buffer overflow vulnerability in Huawei Smartphone.Successful exploitation of this vulnerability may rewrite the memory of adjacent objects."}, {"Reference": "CVE-2021-37404", "Description": "There is a potential heap buffer overflow in Apache Hadoop libhdfs native code. Opening a file path provided by user without validation may result in a denial of service or arbitrary code execution. Users should upgrade to Apache Hadoop 2.10.2, 3.2.3, 3.3.2 or higher."}, {"Reference": "CVE-2021-38007", "Description": "Type confusion in V8 in Google Chrome prior to 96.0.4664.45 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-38008", "Description": "Use after free in media in Google Chrome prior to 96.0.4664.45 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-38011", "Description": "Use after free in storage foundation in Google Chrome prior to 96.0.4664.45 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-38012", "Description": "Type confusion in V8 in Google Chrome prior to 96.0.4664.45 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-38013", "Description": "Heap buffer overflow in fingerprint recognition in Google Chrome on ChromeOS prior to 96.0.4664.45 allowed a remote attacker who had compromised a WebUI renderer process to potentially perform a sandbox escape via a crafted HTML page."}, {"Reference": "CVE-2021-3826", "Description": "Heap/stack buffer overflow in the dlang_lname function in d-demangle.c in libiberty allows attackers to potentially cause a denial of service (segmentation fault and crash) via a crafted mangled symbol."}, {"Reference": "CVE-2021-3835", "Description": "Buffer overflow in usb device class. Zephyr versions >= v2.6.0 contain Heap-based Buffer Overflow (CWE-122). For more information, see https://github.com/zephyrproject-rtos/zephyr/security/advisories/GHSA-fm6v-8625-99jf"}, {"Reference": "CVE-2021-3861", "Description": "The RNDIS USB device class includes a buffer overflow vulnerability. Zephyr versions >= v2.6.0 contain Heap-based Buffer Overflow (CWE-122). For more information, see https://github.com/zephyrproject-rtos/zephyr/security/advisories/GHSA-hvfp-w4h8-gxvj"}, {"Reference": "CVE-2021-39665", "Description": "In checkSpsUpdated of AAVCAssembler.cpp, there is a possible out of bounds read due to a heap buffer overflow. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-12Android ID: A-204077881"}, {"Reference": "CVE-2021-39667", "Description": "In ih264d_parse_decode_slice of ih264d_parse_slice.c, there is a possible out of bounds write due to a heap buffer overflow. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12Android ID: A-205702093"}, {"Reference": "CVE-2021-39675", "Description": "In GKI_getbuf of gki_buffer.cc, there is a possible out of bounds write due to a heap buffer overflow. This could lead to remote escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12Android ID: A-205729183"}, {"Reference": "CVE-2021-39996", "Description": "There is a Heap-based buffer overflow vulnerability with the NFC module in smartphones. Successful exploitation of this vulnerability may cause memory overflow."}, {"Reference": "CVE-2021-40010", "Description": "The bone voice ID TA has a heap overflow vulnerability.Successful exploitation of this vulnerability may result in malicious code execution."}, {"Reference": "CVE-2021-40014", "Description": "The bone voice ID trusted application (TA) has a heap overflow vulnerability. Successful exploitation of this vulnerability may affect data confidentiality. "}, {"Reference": "CVE-2021-40026", "Description": "There is a Heap-based buffer overflow vulnerability in the AOD module in smartphones. Successful exploitation of this vulnerability may affect service integrity."}, {"Reference": "CVE-2021-40057", "Description": "There is a heap-based and stack-based buffer overflow vulnerability in the video framework. Successful exploitation of this vulnerability may affect availability."}, {"Reference": "CVE-2021-40058", "Description": "There is a heap-based buffer overflow vulnerability in the video framework. Successful exploitation of this vulnerability may affect availability."}, {"Reference": "CVE-2021-40060", "Description": "There is a heap-based buffer overflow vulnerability in the video framework. Successful exploitation of this vulnerability may affect availability."}, {"Reference": "CVE-2021-40064", "Description": "There is a heap-based buffer overflow vulnerability in system components. Successful exploitation of this vulnerability may affect system stability."}, {"Reference": "CVE-2021-40164", "Description": "A heap-based buffer overflow could occur while parsing TIFF, PICT, TGA, or RLC files. This vulnerability may be exploited to execute arbitrary code."}, {"Reference": "CVE-2021-40417", "Description": "When parsing a file that is submitted to the DPDecoder service as a job, the service will use the combination of decoding parameters that were submitted with the job along with fields that were parsed for the submitted video by the R3D SDK to calculate the size of a heap buffer. Due to an integer overflow with regards to this calculation, this can result in an undersized heap buffer being allocated. When this heap buffer is written to, a heap-based buffer overflow will occur. This can result in code execution under the context of the application."}, {"Reference": "CVE-2021-4055", "Description": "Heap buffer overflow in extensions in Google Chrome prior to 96.0.4664.93 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via a crafted Chrome Extension."}, {"Reference": "CVE-2021-4056", "Description": "Type confusion in loader in Google Chrome prior to 96.0.4664.93 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-4058", "Description": "Heap buffer overflow in ANGLE in Google Chrome prior to 96.0.4664.93 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-4061", "Description": "Type confusion in V8 in Google Chrome prior to 96.0.4664.93 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-4062", "Description": "Heap buffer overflow in BFCache in Google Chrome prior to 96.0.4664.93 allowed a remote attacker who had compromised the renderer process to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-4066", "Description": "Integer underflow in ANGLE in Google Chrome prior to 96.0.4664.93 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-4078", "Description": "Type confusion in V8 in Google Chrome prior to 96.0.4664.93 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-4079", "Description": "Out of bounds write in WebRTC in Google Chrome prior to 96.0.4664.93 allowed a remote attacker to potentially exploit heap corruption via crafted WebRTC packets."}, {"Reference": "CVE-2021-4100", "Description": "Object lifecycle issue in ANGLE in Google Chrome prior to 96.0.4664.110 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-4101", "Description": "Heap buffer overflow in Swiftshader in Google Chrome prior to 96.0.4664.110 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-41017", "Description": "Multiple heap-based buffer overflow vulnerabilities in some web API controllers of FortiWeb 6.4.1, 6.4.0, and 6.3.0 through 6.3.15 may allow a remote authenticated attacker to execute arbitrary code or commands via specifically crafted HTTP requests."}, {"Reference": "CVE-2021-41396", "Description": "Live555 through 1.08 does not handle socket connections properly. A huge number of incoming socket connections in a short time invokes the error-handling module, in which a heap-based buffer overflow happens. An attacker can leverage this to launch a DoS attack."}, {"Reference": "CVE-2021-41736", "Description": "Faust v2.35.0 was discovered to contain a heap-buffer overflow in the function realPropagate() at propagate.cpp."}, {"Reference": "CVE-2021-41987", "Description": "In the SCEP Server of RouterOS in certain Mikrotik products, an attacker can trigger a heap-based buffer overflow that leads to remote code execution. The attacker must know the scep_server_name value. This affects RouterOS 6.46.8, 6.47.9, and 6.47.10."}, {"Reference": "CVE-2021-4206", "Description": "A flaw was found in the QXL display device emulation in QEMU. An integer overflow in the cursor_alloc() function can lead to the allocation of a small cursor object followed by a subsequent heap-based buffer overflow. This flaw allows a malicious privileged guest user to crash the QEMU process on the host or potentially execute arbitrary code within the context of the QEMU process."}, {"Reference": "CVE-2021-4207", "Description": "A flaw was found in the QXL display device emulation in QEMU. A double fetch of guest controlled values `cursor->header.width` and `cursor->header.height` can lead to the allocation of a small cursor object followed by a subsequent heap-based buffer overflow. A malicious privileged guest user could use this flaw to crash the QEMU process on the host or potentially execute arbitrary code within the context of the QEMU process."}, {"Reference": "CVE-2021-4214", "Description": "A heap overflow flaw was found in libpngs' pngimage.c program. This flaw allows an attacker with local network access to pass a specially crafted PNG file to the pngimage utility, causing an application to crash, leading to a denial of service."}, {"Reference": "CVE-2021-42199", "Description": "An issue was discovered in swftools through 20201222. A heap buffer overflow exists in the function swf_FontExtract_DefineTextCallback() located in swftext.c. It allows an attacker to cause code execution."}, {"Reference": "CVE-2021-42585", "Description": "A heap buffer overflow was discovered in copy_compressed_bytes in decode_r2007.c in dwgread before 0.12.4 via a crafted dwg file."}, {"Reference": "CVE-2021-42586", "Description": "A heap buffer overflow was discovered in copy_bytes in decode_r2007.c in dwgread before 0.12.4 via a crafted dwg file."}, {"Reference": "CVE-2021-42739", "Description": "The firewire subsystem in the Linux kernel through 5.14.13 has a buffer overflow related to drivers/media/firewire/firedtv-avc.c and drivers/media/firewire/firedtv-ci.c, because avc_ca_pmt mishandles bounds checking."}, {"Reference": "CVE-2021-42781", "Description": "Heap buffer overflow issues were found in Opensc before version 0.22.0 in pkcs15-oberthur.c that could potentially crash programs using the library."}, {"Reference": "CVE-2021-43071", "Description": "A heap-based buffer overflow in Fortinet FortiWeb version 6.4.1 and 6.4.0, version 6.3.15 and below, version 6.2.6 and below allows attacker to execute unauthorized code or commands via crafted HTTP requests to the LogReport API controller."}, {"Reference": "CVE-2021-43304", "Description": "Heap buffer overflow in Clickhouse's LZ4 compression codec when parsing a malicious query. There is no verification that the copy operations in the LZ4::decompressImpl loop and especially the arbitrary copy operation wildCopy<copy_amount>(op, ip, copy_end), don\u2019t exceed the destination buffer\u2019s limits."}, {"Reference": "CVE-2021-43305", "Description": "Heap buffer overflow in Clickhouse's LZ4 compression codec when parsing a malicious query. There is no verification that the copy operations in the LZ4::decompressImpl loop and especially the arbitrary copy operation wildCopy<copy_amount>(op, ip, copy_end), don\u2019t exceed the destination buffer\u2019s limits. This issue is very similar to CVE-2021-43304, but the vulnerable copy operation is in a different wildCopy call."}, {"Reference": "CVE-2021-43311", "Description": "A heap-based buffer overflow was discovered in upx, during the generic pointer 'p' points to an inaccessible address in func get_le32(). The problem is essentially caused in PackLinuxElf32::elf_lookup() at p_lx_elf.cpp:5382."}, {"Reference": "CVE-2021-43312", "Description": "A heap-based buffer overflow was discovered in upx, during the variable 'bucket' points to an inaccessible address. The issue is being triggered in the function PackLinuxElf64::invert_pt_dynamic at p_lx_elf.cpp:5239."}, {"Reference": "CVE-2021-43313", "Description": "A heap-based buffer overflow was discovered in upx, during the variable 'bucket' points to an inaccessible address. The issue is being triggered in the function PackLinuxElf32::invert_pt_dynamic at p_lx_elf.cpp:1688."}, {"Reference": "CVE-2021-43314", "Description": "A heap-based buffer overflows was discovered in upx, during the generic pointer 'p' points to an inaccessible address in func get_le32(). The problem is essentially caused in PackLinuxElf32::elf_lookup() at p_lx_elf.cpp:5368"}, {"Reference": "CVE-2021-43315", "Description": "A heap-based buffer overflows was discovered in upx, during the generic pointer 'p' points to an inaccessible address in func get_le32(). The problem is essentially caused in PackLinuxElf32::elf_lookup() at p_lx_elf.cpp:5349"}, {"Reference": "CVE-2021-43316", "Description": "A heap-based buffer overflow was discovered in upx, during the generic pointer 'p' points to an inaccessible address in func get_le64()."}, {"Reference": "CVE-2021-43317", "Description": "A heap-based buffer overflows was discovered in upx, during the generic pointer 'p' points to an inaccessible address in func get_le32(). The problem is essentially caused in PackLinuxElf64::elf_lookup() at p_lx_elf.cpp:5404"}, {"Reference": "CVE-2021-43453", "Description": "A Heap-based Buffer Overflow vulnerability exists in JerryScript 2.4.0 and prior versions via an out-of-bounds read in parser_parse_for_statement_start in the js-parser-statm.c file. This issue is similar to CVE-2020-29657."}, {"Reference": "CVE-2021-43527", "Description": "NSS (Network Security Services) versions prior to 3.73 or 3.68.1 ESR are vulnerable to a heap overflow when handling DER-encoded DSA or RSA-PSS signatures. Applications using NSS for handling signatures encoded within CMS, S/MIME, PKCS \\\\#7, or PKCS \\\\#12 are likely to be impacted. Applications using NSS for certificate validation or other TLS, X.509, OCSP or CRL functionality may be impacted, depending on how they configure NSS. *Note: This vulnerability does NOT impact Mozilla Firefox.* However, email clients and PDF viewers that use NSS for signature verification, such as Thunderbird, LibreOffice, Evolution and Evince are believed to be impacted. This vulnerability affects NSS < 3.73 and NSS < 3.68.1."}, {"Reference": "CVE-2021-43529", "Description": "Thunderbird versions prior to 91.3.0 are vulnerable to the heap overflow described in CVE-2021-43527 when processing S/MIME messages. Thunderbird versions 91.3.0 and later will not call the vulnerable code when processing S/MIME messages that contain certificates with DER-encoded DSA or RSA-PSS signatures."}, {"Reference": "CVE-2021-43537", "Description": "An incorrect type conversion of sizes from 64bit to 32bit integers allowed an attacker to corrupt memory leading to a potentially exploitable crash. This vulnerability affects Thunderbird < 91.4.0, Firefox ESR < 91.4.0, and Firefox < 95."}, {"Reference": "CVE-2021-44422", "Description": "An Improper Input Validation Vulnerability exists when reading a BMP file using Open Design Alliance Drawings SDK before 2022.12. Crafted data in a BMP file can trigger a write operation past the end of an allocated buffer, or lead to a heap-based buffer overflow. An attacker can leverage this vulnerability to execute code in the context of the current process."}, {"Reference": "CVE-2021-44648", "Description": "GNOME gdk-pixbuf 2.42.6 is vulnerable to a heap-buffer overflow vulnerability when decoding the lzw compressed stream of image data in GIF files with lzw minimum code size equals to 12."}, {"Reference": "CVE-2021-44708", "Description": "Acrobat Reader DC version 21.007.20099 (and earlier), 20.004.30017 (and earlier) and 17.011.30204 (and earlier) are affected by a heap overflow vulnerability due to insecure handling of a crafted file, potentially resulting in arbitrary code execution in the context of the current user. Exploitation of this issue requires user interaction in that a victim must open a malicious file."}, {"Reference": "CVE-2021-44709", "Description": "Acrobat Reader DC version 21.007.20099 (and earlier), 20.004.30017 (and earlier) and 17.011.30204 (and earlier) are affected by a heap overflow vulnerability due to insecure handling of a crafted file, potentially resulting in arbitrary code execution in the context of the current user. Exploitation of this issue requires user interaction in that a victim must open a malicious file."}, {"Reference": "CVE-2021-44956", "Description": "Two Heap based buffer overflow vulnerabilities exist in ffjpeg through 01.01.2021. It is similar to CVE-2020-23852. Issues that are in the jfif_decode function at ffjpeg/src/jfif.c (line 552) could cause a Denial of Service by using a crafted jpeg file."}, {"Reference": "CVE-2021-45005", "Description": "Artifex MuJS v1.1.3 was discovered to contain a heap buffer overflow which is caused by conflicting JumpList of nested try/finally statements."}, {"Reference": "CVE-2021-45078", "Description": "stab_xcoff_builtin_type in stabs.c in GNU Binutils through 2.37 allows attackers to cause a denial of service (heap-based buffer overflow) or possibly have unspecified other impact, as demonstrated by an out-of-bounds write. NOTE: this issue exists because of an incorrect fix for CVE-2018-12699."}, {"Reference": "CVE-2021-45417", "Description": "AIDE before 0.17.4 allows local users to obtain root privileges via crafted file metadata (such as XFS extended attributes or tmpfs ACLs), because of a heap-based buffer overflow."}, {"Reference": "CVE-2021-45830", "Description": "A heap-based buffer overflow vulnerability exists in HDF5 1.13.1-1 via H5F_addr_decode_len in /hdf5/src/H5Fint.c, which could cause a Denial of Service."}, {"Reference": "CVE-2021-45863", "Description": "tsMuxer git-2678966 was discovered to contain a heap-based buffer overflow via the function HevcUnit::updateBits in hevc.cpp."}, {"Reference": "CVE-2021-45909", "Description": "An issue was discovered in gif2apng 1.9. There is a heap-based buffer overflow vulnerability in the DecodeLZW function. It allows an attacker to write a large amount of arbitrary data outside the boundaries of a buffer."}, {"Reference": "CVE-2021-45910", "Description": "An issue was discovered in gif2apng 1.9. There is a heap-based buffer overflow within the main function. It allows an attacker to write data outside of the allocated buffer. The attacker has control over a part of the address that data is written to, control over the written data, and (to some extent) control over the amount of data that is written."}, {"Reference": "CVE-2021-45911", "Description": "An issue was discovered in gif2apng 1.9. There is a heap-based buffer overflow in the main function. It allows an attacker to write 2 bytes outside the boundaries of the buffer."}, {"Reference": "CVE-2021-45918", "Description": "NHI\u2019s health insurance web service component has insufficient validation for input string length, which can result in heap-based buffer overflow attack. A remote attacker can exploit this vulnerability to flood the memory space reserved for the program, in order to terminate service without authentication, which requires a system restart to recover service."}, {"Reference": "CVE-2021-45932", "Description": "wolfSSL wolfMQTT 1.9 has a heap-based buffer overflow (4 bytes) in MqttDecode_Publish (called from MqttClient_DecodePacket and MqttClient_HandlePacket)."}, {"Reference": "CVE-2021-45933", "Description": "wolfSSL wolfMQTT 1.9 has a heap-based buffer overflow (8 bytes) in MqttDecode_Publish (called from MqttClient_DecodePacket and MqttClient_HandlePacket)."}, {"Reference": "CVE-2021-45934", "Description": "wolfSSL wolfMQTT 1.9 has a heap-based buffer overflow in MqttClient_DecodePacket (called from MqttClient_HandlePacket and MqttClient_WaitType)."}, {"Reference": "CVE-2021-45935", "Description": "Grok 9.5.0 has a heap-based buffer overflow in openhtj2k::T1OpenHTJ2K::decompress (called from std::__1::__packaged_task_func<std::__1::__bind<grk::T1DecompressScheduler::deco and std::__1::packaged_task<int)."}, {"Reference": "CVE-2021-45936", "Description": "wolfSSL wolfMQTT 1.9 has a heap-based buffer overflow in MqttDecode_Disconnect (called from MqttClient_DecodePacket and MqttClient_WaitType)."}, {"Reference": "CVE-2021-45937", "Description": "wolfSSL wolfMQTT 1.9 has a heap-based buffer overflow in MqttClient_DecodePacket (called from MqttClient_WaitType and MqttClient_Connect)."}, {"Reference": "CVE-2021-45938", "Description": "wolfSSL wolfMQTT 1.9 has a heap-based buffer overflow in MqttClient_DecodePacket (called from MqttClient_WaitType and MqttClient_Unsubscribe)."}, {"Reference": "CVE-2021-45939", "Description": "wolfSSL wolfMQTT 1.9 has a heap-based buffer overflow in MqttClient_DecodePacket (called from MqttClient_WaitType and MqttClient_Subscribe)."}, {"Reference": "CVE-2021-45940", "Description": "libbpf 0.6.0 and 0.6.1 has a heap-based buffer overflow (4 bytes) in __bpf_object__open (called from bpf_object__open_mem and bpf-object-fuzzer.c)."}, {"Reference": "CVE-2021-45941", "Description": "libbpf 0.6.0 and 0.6.1 has a heap-based buffer overflow (8 bytes) in __bpf_object__open (called from bpf_object__open_mem and bpf-object-fuzzer.c)."}, {"Reference": "CVE-2021-45942", "Description": "OpenEXR 3.1.x before 3.1.4 has a heap-based buffer overflow in Imf_3_1::LineCompositeTask::execute (called from IlmThread_3_1::NullThreadPoolProvider::addTask and IlmThread_3_1::ThreadPool::addGlobalTask). NOTE: db217f2 may be inapplicable."}, {"Reference": "CVE-2021-45943", "Description": "GDAL 3.3.0 through 3.4.0 has a heap-based buffer overflow in PCIDSK::CPCIDSKFile::ReadFromFile (called from PCIDSK::CPCIDSKSegment::ReadFromFile and PCIDSK::CPCIDSKBinarySegment::CPCIDSKBinarySegment)."}, {"Reference": "CVE-2021-45948", "Description": "Open Asset Import Library (aka assimp) 5.1.0 and 5.1.1 has a heap-based buffer overflow in _m3d_safestr (called from m3d_load and Assimp::M3DWrapper::M3DWrapper)."}, {"Reference": "CVE-2021-45949", "Description": "Ghostscript GhostPDL 9.50 through 9.54.0 has a heap-based buffer overflow in sampled_data_finish (called from sampled_data_continue and interp)."}, {"Reference": "CVE-2021-46474", "Description": "Jsish v3.5.0 was discovered to contain a heap buffer overflow via jsiEvalCodeSub in src/jsiEval.c. This vulnerability can lead to a Denial of Service (DoS)."}, {"Reference": "CVE-2021-46475", "Description": "Jsish v3.5.0 was discovered to contain a heap buffer overflow via jsi_ArraySliceCmd in src/jsiArray.c. This vulnerability can lead to a Denial of Service (DoS)."}, {"Reference": "CVE-2021-46477", "Description": "Jsish v3.5.0 was discovered to contain a heap buffer overflow via RegExp_constructor in src/jsiRegexp.c. This vulnerability can lead to a Denial of Service (DoS)."}, {"Reference": "CVE-2021-46478", "Description": "Jsish v3.5.0 was discovered to contain a heap buffer overflow via jsiClearStack in src/jsiEval.c. This vulnerability can lead to a Denial of Service (DoS)."}, {"Reference": "CVE-2021-46480", "Description": "Jsish v3.5.0 was discovered to contain a heap buffer overflow via jsiValueObjDelete in src/jsiEval.c. This vulnerability can lead to a Denial of Service (DoS)."}, {"Reference": "CVE-2021-46482", "Description": "Jsish v3.5.0 was discovered to contain a heap buffer overflow via NumberConstructor at src/jsiNumber.c."}, {"Reference": "CVE-2021-46483", "Description": "Jsish v3.5.0 was discovered to contain a heap buffer overflow via BooleanConstructor at src/jsiBool.c."}, {"Reference": "CVE-2021-46518", "Description": "Cesanta MJS v2.20.0 was discovered to contain a heap buffer overflow via mjs_disown at src/mjs_core.c."}, {"Reference": "CVE-2021-46519", "Description": "Cesanta MJS v2.20.0 was discovered to contain a heap buffer overflow via mjs_array_length at src/mjs_array.c."}, {"Reference": "CVE-2021-46520", "Description": "Cesanta MJS v2.20.0 was discovered to contain a heap buffer overflow via mjs_jprintf at src/mjs_util.c."}, {"Reference": "CVE-2021-46522", "Description": "Cesanta MJS v2.20.0 was discovered to contain a heap buffer overflow via /usr/lib/x86_64-linux-gnu/libasan.so.4+0xaff53."}, {"Reference": "CVE-2021-46523", "Description": "Cesanta MJS v2.20.0 was discovered to contain a heap buffer overflow via to_json_or_debug at mjs/src/mjs_json.c."}, {"Reference": "CVE-2021-46524", "Description": "Cesanta MJS v2.20.0 was discovered to contain a heap buffer overflow via snquote at mjs/src/mjs_json.c."}, {"Reference": "CVE-2021-46527", "Description": "Cesanta MJS v2.20.0 was discovered to contain a heap buffer overflow via mjs_get_cstring at src/mjs_string.c."}, {"Reference": "CVE-2021-46822", "Description": "The PPM reader in libjpeg-turbo through 2.0.90 mishandles use of tjLoadImage for loading a 16-bit binary PPM file into a grayscale buffer and loading a 16-bit binary PGM file into an RGB buffer. This is related to a heap-based buffer overflow in the get_word_rgb_row function in rdppm.c."}, {"Reference": "CVE-2021-46829", "Description": "GNOME GdkPixbuf (aka GDK-PixBuf) before 2.42.8 allows a heap-based buffer overflow when compositing or clearing frames in GIF files, as demonstrated by io-gif-animation.c composite_frame. This overflow is controllable and could be abused for code execution, especially on 32-bit systems."}, {"Reference": "CVE-2022-0098", "Description": "Use after free in Screen Capture in Google Chrome on Chrome OS prior to 97.0.4692.71 allowed an attacker who convinced a user to perform specific user gestures to potentially exploit heap corruption via specific user gestures."}, {"Reference": "CVE-2022-0100", "Description": "Heap buffer overflow in Media streams API in Google Chrome prior to 97.0.4692.71 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0101", "Description": "Heap buffer overflow in Bookmarks in Google Chrome prior to 97.0.4692.71 allowed a remote attacker who convinced a user to perform specific user gesture to potentially exploit heap corruption via specific user gesture."}, {"Reference": "CVE-2022-0102", "Description": "Type confusion in V8 in Google Chrome prior to 97.0.4692.71 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0104", "Description": "Heap buffer overflow in ANGLE in Google Chrome prior to 97.0.4692.71 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0137", "Description": "A heap buffer overflow in image_set_mask function of HTMLDOC before 1.9.15 allows an attacker to write outside the buffer boundaries."}, {"Reference": "CVE-2022-0185", "Description": "A heap-based buffer overflow flaw was found in the way the legacy_parse_param function in the Filesystem Context functionality of the Linux kernel verified the supplied parameters length. An unprivileged (in case of unprivileged user namespaces enabled, otherwise needs namespaced CAP_SYS_ADMIN privilege) local user able to open a filesystem that does not support the Filesystem Context API (and thus fallbacks to legacy handling) could use this flaw to escalate their privileges on the system."}, {"Reference": "CVE-2022-0204", "Description": "A heap overflow vulnerability was found in bluez in versions prior to 5.63. An attacker with local network access could pass specially crafted files causing an application to halt or crash, leading to a denial of service."}, {"Reference": "CVE-2022-0261", "Description": "Heap-based Buffer Overflow in GitHub repository vim/vim prior to 8.2."}, {"Reference": "CVE-2022-0297", "Description": "Use after free in Vulkan in Google Chrome prior to 97.0.4692.99 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0302", "Description": "Use after free in Omnibox in Google Chrome prior to 97.0.4692.99 allowed an attacker who convinced a user to engage in specific user interactions to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0304", "Description": "Use after free in Bookmarks in Google Chrome prior to 97.0.4692.99 allowed a remote attacker who convinced a user to engage in specific user interactions to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0306", "Description": "Heap buffer overflow in PDFium in Google Chrome prior to 97.0.4692.99 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0307", "Description": "Use after free in Optimization Guide in Google Chrome prior to 97.0.4692.99 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0308", "Description": "Use after free in Data Transfer in Google Chrome on Chrome OS prior to 97.0.4692.99 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0310", "Description": "Heap buffer overflow in Task Manager in Google Chrome prior to 97.0.4692.99 allowed a remote attacker to potentially exploit heap corruption via specific user interactions."}, {"Reference": "CVE-2022-0311", "Description": "Heap buffer overflow in Task Manager in Google Chrome prior to 97.0.4692.99 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0318", "Description": "Heap-based Buffer Overflow in vim/vim prior to 8.2."}, {"Reference": "CVE-2022-0367", "Description": "A heap-based buffer overflow flaw was found in libmodbus in function modbus_reply() in src/modbus.c."}, {"Reference": "CVE-2022-0453", "Description": "Use after free in Reader Mode in Google Chrome prior to 98.0.4758.80 allowed a remote attacker who had compromised the renderer process to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0454", "Description": "Heap buffer overflow in ANGLE in Google Chrome prior to 98.0.4758.80 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0456", "Description": "Use after free in Web Search in Google Chrome prior to 98.0.4758.80 allowed a remote attacker to potentially exploit heap corruption via profile destruction."}, {"Reference": "CVE-2022-0457", "Description": "Type confusion in V8 in Google Chrome prior to 98.0.4758.80 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0458", "Description": "Use after free in Thumbnail Tab Strip in Google Chrome prior to 98.0.4758.80 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0459", "Description": "Use after free in Screen Capture in Google Chrome prior to 98.0.4758.80 allowed a remote attacker who had compromised the renderer process and convinced a user to engage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0460", "Description": "Use after free in Window Dialogue in Google Chrome prior to 98.0.4758.80 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0463", "Description": "Use after free in Accessibility in Google Chrome prior to 98.0.4758.80 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via user interaction."}, {"Reference": "CVE-2022-0464", "Description": "Use after free in Accessibility in Google Chrome prior to 98.0.4758.80 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via user interaction."}, {"Reference": "CVE-2022-0465", "Description": "Use after free in Extensions in Google Chrome prior to 98.0.4758.80 allowed a remote attacker to potentially exploit heap corruption via user interaction."}, {"Reference": "CVE-2022-0468", "Description": "Use after free in Payments in Google Chrome prior to 98.0.4758.80 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0469", "Description": "Use after free in Cast in Google Chrome prior to 98.0.4758.80 allowed a remote attacker who convinced a user to engage in specific interactions to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0470", "Description": "Out of bounds memory access in V8 in Google Chrome prior to 98.0.4758.80 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0518", "Description": "Heap-based Buffer Overflow in GitHub repository radareorg/radare2 prior to 5.6.2."}, {"Reference": "CVE-2022-0572", "Description": "Heap-based Buffer Overflow in GitHub repository vim/vim prior to 8.2."}, {"Reference": "CVE-2022-0603", "Description": "Use after free in File Manager in Google Chrome on Chrome OS prior to 98.0.4758.102 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0604", "Description": "Heap buffer overflow in Tab Groups in Google Chrome prior to 98.0.4758.102 allowed an attacker who convinced a user to install a malicious extension and engage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0605", "Description": "Use after free in Webstore API in Google Chrome prior to 98.0.4758.102 allowed an attacker who convinced a user to install a malicious extension and convinced a user to enage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0606", "Description": "Use after free in ANGLE in Google Chrome prior to 98.0.4758.102 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0607", "Description": "Use after free in GPU in Google Chrome prior to 98.0.4758.102 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0608", "Description": "Integer overflow in Mojo in Google Chrome prior to 98.0.4758.102 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0609", "Description": "Use after free in Animation in Google Chrome prior to 98.0.4758.102 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0610", "Description": "Inappropriate implementation in Gamepad API in Google Chrome prior to 98.0.4758.102 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0676", "Description": "Heap-based Buffer Overflow in GitHub repository radareorg/radare2 prior to 5.6.4."}, {"Reference": "CVE-2022-0713", "Description": "Heap-based Buffer Overflow in GitHub repository radareorg/radare2 prior to 5.6.4."}, {"Reference": "CVE-2022-0789", "Description": "Heap buffer overflow in ANGLE in Google Chrome prior to 99.0.4844.51 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0791", "Description": "Use after free in Omnibox in Google Chrome prior to 99.0.4844.51 allowed a remote attacker who convinced a user to engage in specific user interactions to potentially exploit heap corruption via user interactions."}, {"Reference": "CVE-2022-0793", "Description": "Use after free in Cast in Google Chrome prior to 99.0.4844.51 allowed an attacker who convinced a user to install a malicious extension and engage in specific user interaction to potentially exploit heap corruption via a crafted Chrome Extension."}, {"Reference": "CVE-2022-0794", "Description": "Use after free in WebShare in Google Chrome prior to 99.0.4844.51 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0795", "Description": "Type confusion in Blink Layout in Google Chrome prior to 99.0.4844.51 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0796", "Description": "Use after free in Media in Google Chrome prior to 99.0.4844.51 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0798", "Description": "Use after free in MediaStream in Google Chrome prior to 99.0.4844.51 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via a crafted Chrome Extension."}, {"Reference": "CVE-2022-0800", "Description": "Heap buffer overflow in Cast UI in Google Chrome prior to 99.0.4844.51 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0805", "Description": "Use after free in Browser Switcher in Google Chrome prior to 99.0.4844.51 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via user interaction."}, {"Reference": "CVE-2022-0809", "Description": "Out of bounds memory access in WebXR in Google Chrome prior to 99.0.4844.51 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0891", "Description": "A heap buffer overflow in ExtractImageSection function in tiffcrop.c in libtiff library Version 4.3.0 allows attacker to trigger unsafe or out of bounds memory access via crafted TIFF image file which could result into application crash, potential information disclosure or any other context-dependent impact"}, {"Reference": "CVE-2022-0976", "Description": "Heap buffer overflow in GPU in Google Chrome prior to 99.0.4844.74 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1052", "Description": "Heap Buffer Overflow in iterate_chained_fixups in GitHub repository radareorg/radare2 prior to 5.6.6."}, {"Reference": "CVE-2022-1061", "Description": "Heap Buffer Overflow in parseDragons in GitHub repository radareorg/radare2 prior to 5.6.8."}, {"Reference": "CVE-2022-1096", "Description": "Type confusion in V8 in Google Chrome prior to 99.0.4844.84 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1134", "Description": "Type confusion in V8 in Google Chrome prior to 100.0.4896.60 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1142", "Description": "Heap buffer overflow in WebUI in Google Chrome prior to 100.0.4896.60 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via specific input into DevTools."}, {"Reference": "CVE-2022-1143", "Description": "Heap buffer overflow in WebUI in Google Chrome prior to 100.0.4896.60 allowed a remote attacker who convinced a user to engage in specific user interaction to potentially exploit heap corruption via specific input into DevTools."}, {"Reference": "CVE-2022-1232", "Description": "Type confusion in V8 in Google Chrome prior to 100.0.4896.75 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1237", "Description": "Improper Validation of Array Index in GitHub repository radareorg/radare2 prior to 5.6.8. This vulnerability is heap overflow and may be exploitable. For more general description of heap buffer overflow, see [CWE](https://cwe.mitre.org/data/definitions/122.html)."}, {"Reference": "CVE-2022-1238", "Description": "Out-of-bounds Write in libr/bin/format/ne/ne.c in GitHub repository radareorg/radare2 prior to 5.6.8. This vulnerability is heap overflow and may be exploitable. For more general description of heap buffer overflow, see [CWE](https://cwe.mitre.org/data/definitions/122.html)."}, {"Reference": "CVE-2022-1240", "Description": "Heap buffer overflow in libr/bin/format/mach0/mach0.c in GitHub repository radareorg/radare2 prior to 5.8.6. If address sanitizer is disabled during the compiling, the program should executes into the `r_str_ncpy` function. Therefore I think it is very likely to be exploitable. For more general description of heap buffer overflow, see [CWE](https://cwe.mitre.org/data/definitions/122.html)."}, {"Reference": "CVE-2022-1270", "Description": "In GraphicsMagick, a heap buffer overflow was found when parsing MIFF."}, {"Reference": "CVE-2022-1314", "Description": "Type confusion in V8 in Google Chrome prior to 100.0.4896.88 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1354", "Description": "A heap buffer overflow flaw was found in Libtiffs' tiffinfo.c in TIFFReadRawDataStriped() function. This flaw allows an attacker to pass a crafted TIFF file to the tiffinfo tool, triggering a heap buffer overflow issue and causing a crash that leads to a denial of service."}, {"Reference": "CVE-2022-1364", "Description": "Type confusion in V8 Turbofan in Google Chrome prior to 100.0.4896.127 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1383", "Description": "Heap-based Buffer Overflow in GitHub repository radareorg/radare2 prior to 5.6.8. The bug causes the program reads data past the end of the intented buffer. Typically, this can allow attackers to read sensitive information from other memory locations or cause a crash."}, {"Reference": "CVE-2022-1437", "Description": "Heap-based Buffer Overflow in GitHub repository radareorg/radare2 prior to 5.7.0. The bug causes the program reads data past the end of the intented buffer. Typically, this can allow attackers to read sensitive information from other memory locations or cause a crash."}, {"Reference": "CVE-2022-1482", "Description": "Inappropriate implementation in WebGL in Google Chrome prior to 101.0.4951.41 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1483", "Description": "Heap buffer overflow in WebGPU in Google Chrome prior to 101.0.4951.41 allowed a remote attacker who had compromised the renderer process to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1484", "Description": "Heap buffer overflow in Web UI Settings in Google Chrome prior to 101.0.4951.41 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1489", "Description": "Out of bounds memory access in UI Shelf in Google Chrome on Chrome OS, Lacros prior to 101.0.4951.41 allowed a remote attacker to potentially exploit heap corruption via specific user interactions."}, {"Reference": "CVE-2022-1621", "Description": "Heap buffer overflow in vim_strncpy find_word in GitHub repository vim/vim prior to 8.2.4919. This vulnerability is capable of crashing software, Bypass Protection Mechanism, Modify Memory, and possible remote execution"}, {"Reference": "CVE-2022-1638", "Description": "Heap buffer overflow in V8 Internationalization in Google Chrome prior to 101.0.4951.64 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1869", "Description": "Type Confusion in V8 in Google Chrome prior to 102.0.5005.61 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1876", "Description": "Heap buffer overflow in DevTools in Google Chrome prior to 102.0.5005.61 allowed an attacker who convinced a user to install a malicious extension to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1922", "Description": "DOS / potential heap overwrite in mkv demuxing using zlib decompression. Integer overflow in matroskademux element in gst_matroska_decompress_data function which causes a segfault, or could cause a heap overwrite, depending on libc and OS. Depending on the libc used, and the underlying OS capabilities, it could be just a segfault or a heap overwrite. If the libc uses mmap for large chunks, and the OS supports mmap, then it is just a segfault (because the realloc before the integer overflow will use mremap to reduce the size of the chunk, and it will start to write to unmapped memory). However, if using a libc implementation that does not use mmap, or if the OS does not support mmap while using libc, then this could result in a heap overwrite."}, {"Reference": "CVE-2022-1923", "Description": "DOS / potential heap overwrite in mkv demuxing using bzip decompression. Integer overflow in matroskademux element in bzip decompression function which causes a segfault, or could cause a heap overwrite, depending on libc and OS. Depending on the libc used, and the underlying OS capabilities, it could be just a segfault or a heap overwrite. If the libc uses mmap for large chunks, and the OS supports mmap, then it is just a segfault (because the realloc before the integer overflow will use mremap to reduce the size of the chunk, and it will start to write to unmapped memory). However, if using a libc implementation that does not use mmap, or if the OS does not support mmap while using libc, then this could result in a heap overwrite."}, {"Reference": "CVE-2022-1924", "Description": "DOS / potential heap overwrite in mkv demuxing using lzo decompression. Integer overflow in matroskademux element in lzo decompression function which causes a segfault, or could cause a heap overwrite, depending on libc and OS. Depending on the libc used, and the underlying OS capabilities, it could be just a segfault or a heap overwrite. If the libc uses mmap for large chunks, and the OS supports mmap, then it is just a segfault (because the realloc before the integer overflow will use mremap to reduce the size of the chunk, and it will start to write to unmapped memory). However, if using a libc implementation that does not use mmap, or if the OS does not support mmap while using libc, then this could result in a heap overwrite."}, {"Reference": "CVE-2022-1925", "Description": "DOS / potential heap overwrite in mkv demuxing using HEADERSTRIP decompression. Integer overflow in matroskaparse element in gst_matroska_decompress_data function which causes a heap overflow. Due to restrictions on chunk sizes in the matroskademux element, the overflow can't be triggered, however the matroskaparse element has no size checks."}, {"Reference": "CVE-2022-20106", "Description": "In MM service, there is a possible out of bounds write due to a heap-based buffer overflow. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: DTV03330460; Issue ID: DTV03330460."}, {"Reference": "CVE-2022-20130", "Description": "In transportDec_OutOfBandConfig of tpdec_lib.cpp, there is a possible out of bounds write due to a heap buffer overflow. This could lead to remote code execution with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-224314979"}, {"Reference": "CVE-2022-20166", "Description": "In various methods of kernel base drivers, there is a possible out of bounds write due to a heap buffer overflow. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-182388481References: Upstream kernel"}, {"Reference": "CVE-2022-20202", "Description": "In ih264_resi_trans_quant_4x4_sse42 of ih264_resi_trans_quant_sse42.c, there is a possible out of bounds read due to a heap buffer overflow. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-12LAndroid ID: A-204704614"}, {"Reference": "CVE-2022-20209", "Description": "In hme_add_new_node_to_a_sorted_array of hme_utils.c, there is a possible out of bounds read due to a heap buffer overflow. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12LAndroid ID: A-207502397"}, {"Reference": "CVE-2022-20247", "Description": "In Media, there is a possible out of bounds read due to a heap buffer overflow. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-229858836"}, {"Reference": "CVE-2022-20273", "Description": "In Bluetooth, there is a possible out of bounds read due to a heap buffer overflow. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-206478022"}, {"Reference": "CVE-2022-2158", "Description": "Type confusion in V8 in Google Chrome prior to 103.0.5060.53 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-2329", "Description": "A CWE-190: Integer Overflow or Wraparound vulnerability exists that could cause heap-based buffer overflow, leading to denial of service and potentially remote code execution when an attacker sends multiple specially crafted messages. Affected Products: IGSS Data Server - IGSSdataServer.exe (Versions prior to V15.0.0.22073)"}, {"Reference": "CVE-2022-23537", "Description": "PJSIP is a free and open source multimedia communication library written in C language implementing standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE. Buffer overread is possible when parsing a specially crafted STUN message with unknown attribute. The vulnerability affects applications that uses STUN including PJNATH and PJSUA-LIB. The patch is available as a commit in the master branch (2.13.1)."}, {"Reference": "CVE-2022-23547", "Description": "PJSIP is a free and open source multimedia communication library written in C language implementing standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE. This issue is similar to GHSA-9pfh-r8x4-w26w. Possible buffer overread when parsing a certain STUN message. The vulnerability affects applications that uses STUN including PJNATH and PJSUA-LIB. The patch is available as commit in the master branch."}, {"Reference": "CVE-2022-23559", "Description": "Tensorflow is an Open Source Machine Learning Framework. An attacker can craft a TFLite model that would cause an integer overflow in embedding lookup operations. Both `embedding_size` and `lookup_size` are products of values provided by the user. Hence, a malicious user could trigger overflows in the multiplication. In certain scenarios, this can then result in heap OOB read/write. Users are advised to upgrade to a patched version."}, {"Reference": "CVE-2022-23613", "Description": "xrdp is an open source remote desktop protocol (RDP) server. In affected versions an integer underflow leading to a heap overflow in the sesman server allows any unauthenticated attacker which is able to locally access a sesman server to execute code as root. This vulnerability has been patched in version 0.9.18.1 and above. Users are advised to upgrade. There are no known workarounds."}, {"Reference": "CVE-2022-2399", "Description": "Use after free in WebGPU in Google Chrome prior to 100.0.4896.88 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-24191", "Description": "In HTMLDOC 1.9.14, an infinite loop in the gif_read_lzw function can lead to a pointer arbitrarily pointing to heap memory and resulting in a buffer overflow."}, {"Reference": "CVE-2022-24310", "Description": "A CWE-190: Integer Overflow or Wraparound vulnerability exists that could cause heap-based buffer overflow, leading to denial of service and potentially remote code execution when an attacker sends multiple specially crafted messages. Affected Product: Interactive Graphical SCADA System Data Server (V15.0.0.22020 and prior)"}, {"Reference": "CVE-2022-24724", "Description": "cmark-gfm is GitHub's extended version of the C reference implementation of CommonMark. Prior to versions 0.29.0.gfm.3 and 0.28.3.gfm.21, an integer overflow in cmark-gfm's table row parsing `table.c:row_from_string` may lead to heap memory corruption when parsing tables who's marker rows contain more than UINT16_MAX columns. The impact of this heap corruption ranges from Information Leak to Arbitrary Code Execution depending on how and where `cmark-gfm` is used. If `cmark-gfm` is used for rendering remote user controlled markdown, this vulnerability may lead to Remote Code Execution (RCE) in applications employing affected versions of the `cmark-gfm` library. This vulnerability has been patched in the following cmark-gfm versions 0.29.0.gfm.3 and 0.28.3.gfm.21. A workaround is available. The vulnerability exists in the table markdown extensions of cmark-gfm. Disabling the table extension will prevent this vulnerability from being triggered."}, {"Reference": "CVE-2022-24795", "Description": "yajl-ruby is a C binding to the YAJL JSON parsing and generation library. The 1.x branch and the 2.x branch of `yajl` contain an integer overflow which leads to subsequent heap memory corruption when dealing with large (~2GB) inputs. The reallocation logic at `yajl_buf.c#L64` may result in the `need` 32bit integer wrapping to 0 when `need` approaches a value of 0x80000000 (i.e. ~2GB of data), which results in a reallocation of buf->alloc into a small heap chunk. These integers are declared as `size_t` in the 2.x branch of `yajl`, which practically prevents the issue from triggering on 64bit platforms, however this does not preclude this issue triggering on 32bit builds on which `size_t` is a 32bit integer. Subsequent population of this under-allocated heap chunk is based on the original buffer size, leading to heap memory corruption. This vulnerability mostly impacts process availability. Maintainers believe exploitation for arbitrary code execution is unlikely. A patch is available and anticipated to be part of yajl-ruby version 1.4.2. As a workaround, avoid passing large inputs to YAJL."}, {"Reference": "CVE-2022-25291", "Description": "An integer overflow in WatchGuard Firebox and XTM appliances allows an authenticated remote attacker to trigger a heap-based buffer overflow and potentially execute arbitrary code by initiating a firmware update with a malicious upgrade image. This vulnerability impacts Fireware OS before 12.7.2_U2, 12.x before 12.1.3_U8, and 12.2.x through 12.5.x before 12.5.9_U2."}, {"Reference": "CVE-2022-26495", "Description": "In nbd-server in nbd before 3.24, there is an integer overflow with a resultant heap-based buffer overflow. A value of 0xffffffff in the name length field will cause a zero-sized buffer to be allocated for the name, resulting in a write to a dangling pointer. This issue exists for the NBD_OPT_INFO, NBD_OPT_GO, and NBD_OPT_EXPORT_NAME messages."}, {"Reference": "CVE-2022-27882", "Description": "slaacd in OpenBSD 6.9 and 7.0 before 2022-03-22 has an integer signedness error and resultant heap-based buffer overflow triggerable by a crafted IPv6 router advertisement. NOTE: privilege separation and pledge can prevent exploitation."}, {"Reference": "CVE-2022-28471", "Description": "In ffjpeg (commit hash: caade60), the function bmp_load() in bmp.c contains an integer overflow vulnerability, which eventually results in the heap overflow in jfif_encode() in jfif.c. This is due to the incomplete patch for issue 38"}, {"Reference": "CVE-2022-29210", "Description": "TensorFlow is an open source platform for machine learning. In version 2.8.0, the `TensorKey` hash function used total estimated `AllocatedBytes()`, which (a) is an estimate per tensor, and (b) is a very poor hash function for constants (e.g. `int32_t`). It also tried to access individual tensor bytes through `tensor.data()` of size `AllocatedBytes()`. This led to ASAN failures because the `AllocatedBytes()` is an estimate of total bytes allocated by a tensor, including any pointed-to constructs (e.g. strings), and does not refer to contiguous bytes in the `.data()` buffer. The discoverers could not use this byte vector anyway because types such as `tstring` include pointers, whereas they needed to hash the string values themselves. This issue is patched in Tensorflow versions 2.9.0 and 2.8.1."}, {"Reference": "CVE-2022-29886", "Description": "An integer overflow vulnerability exists in the way ESTsoft Alyac 2.5.8.544 parses OLE files. A specially-crafted OLE file can lead to a heap buffer overflow, which can result in arbitrary code execution. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2022-2991", "Description": "A heap-based buffer overflow was found in the Linux kernel's LightNVM subsystem. The issue results from the lack of proper validation of the length of user-supplied data prior to copying it to a fixed-length heap-based buffer. This vulnerability allows a local attacker to escalate privileges and execute arbitrary code in the context of the kernel. The attacker must first obtain the ability to execute high-privileged code on the target system to exploit this vulnerability."}, {"Reference": "CVE-2022-29917", "Description": "Mozilla developers Andrew McCreight, Gabriele Svelto, Tom Ritter and the Mozilla Fuzzing Team reported memory safety bugs present in Firefox 99 and Firefox ESR 91.8. Some of these bugs showed evidence of memory corruption and we presume that with enough effort some of these could have been exploited to run arbitrary code. This vulnerability affects Thunderbird < 91.9, Firefox ESR < 91.9, and Firefox < 100."}, {"Reference": "CVE-2022-30292", "Description": "Heap-based buffer overflow in sqbaselib.cpp in SQUIRREL 3.2 due to lack of a certain sq_reservestack call."}, {"Reference": "CVE-2022-30293", "Description": "In WebKitGTK through 2.36.0 (and WPE WebKit), there is a heap-based buffer overflow in WebCore::TextureMapperLayer::setContentsLayer in WebCore/platform/graphics/texmap/TextureMapperLayer.cpp."}, {"Reference": "CVE-2022-3040", "Description": "Use after free in Layout in Google Chrome prior to 105.0.5195.52 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-3043", "Description": "Heap buffer overflow in Screen Capture in Google Chrome on Chrome OS prior to 105.0.5195.52 allowed a remote attacker who convinced a user to engage in specific UI interactions to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-3045", "Description": "Insufficient validation of untrusted input in V8 in Google Chrome prior to 105.0.5195.52 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-30474", "Description": "Tenda AC Series Router AC18_V15.03.05.19(6318) was discovered to contain a heap overflow in the httpd module when handling /goform/saveParentControlInfo request."}, {"Reference": "CVE-2022-30540", "Description": "The affected product is vulnerable to a heap-based buffer overflow via uninitialized pointer, which may allow an attacker to execute arbitrary code"}, {"Reference": "CVE-2022-31747", "Description": "Mozilla developers Andrew McCreight, Nicolas B. Pierron, and the Mozilla Fuzzing Team reported memory safety bugs present in Firefox 100 and Firefox ESR 91.9. Some of these bugs showed evidence of memory corruption and we presume that with enough effort some of these could have been exploited to run arbitrary code. This vulnerability affects Thunderbird < 91.10, Firefox < 101, and Firefox ESR < 91.10."}, {"Reference": "CVE-2022-31748", "Description": "Mozilla developers Gabriele Svelto, Timothy Nikkel, Randell Jesup, Jon Coppeard, and the Mozilla Fuzzing Team reported memory safety bugs present in Firefox 100. Some of these bugs showed evidence of memory corruption and we presume that with enough effort some of these could have been exploited to run arbitrary code. This vulnerability affects Firefox < 101."}, {"Reference": "CVE-2022-32543", "Description": "An integer overflow vulnerability exists in the way ESTsoft Alyac 2.5.8.544 parses OLE files. A specially-crafted OLE file can lead to a heap buffer overflow which can result in arbitrary code execution. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2022-3315", "Description": "Type confusion in Blink in Google Chrome prior to 106.0.5249.62 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: Low)"}, {"Reference": "CVE-2022-33719", "Description": "Improper input validation in baseband prior to SMR Aug-2022 Release 1 allows attackers to cause integer overflow to heap overflow."}, {"Reference": "CVE-2022-3437", "Description": "A heap-based buffer overflow vulnerability was found in Samba within the GSSAPI unwrap_des() and unwrap_des3() routines of Heimdal. The DES and Triple-DES decryption routines in the Heimdal GSSAPI library allow a length-limited write buffer overflow on malloc() allocated memory when presented with a maliciously small packet. This flaw allows a remote user to send specially crafted malicious data to the application, possibly resulting in a denial of service (DoS) attack."}, {"Reference": "CVE-2022-34502", "Description": "Radare2 v5.7.0 was discovered to contain a heap buffer overflow via the function consume_encoded_name_new at format/wasm/wasm.c. This vulnerability allows attackers to cause a Denial of Service (DoS) via a crafted binary file."}, {"Reference": "CVE-2022-34503", "Description": "QPDF v8.4.2 was discovered to contain a heap buffer overflow via the function QPDF::processXRefStream. This vulnerability allows attackers to cause a Denial of Service (DoS) via a crafted PDF file."}, {"Reference": "CVE-2022-34970", "Description": "Crow before 1.0+4 has a heap-based buffer overflow via the function qs_parse in query_string.h. On successful exploitation this vulnerability allows attackers to remotely execute arbitrary code in the context of the vulnerable service."}, {"Reference": "CVE-2022-35104", "Description": "SWFTools commit 772e55a2 was discovered to contain a heap-buffer overflow via DCTStream::reset() at /xpdf/Stream.cc."}, {"Reference": "CVE-2022-35105", "Description": "SWFTools commit 772e55a2 was discovered to contain a heap-buffer overflow via /bin/png2swf+0x552cea."}, {"Reference": "CVE-2022-35109", "Description": "SWFTools commit 772e55a2 was discovered to contain a heap-buffer overflow via draw_stroke at /gfxpoly/stroke.c."}, {"Reference": "CVE-2022-35113", "Description": "SWFTools commit 772e55a2 was discovered to contain a heap-buffer overflow via swf_DefineLosslessBitsTagToImage at /modules/swfbits.c."}, {"Reference": "CVE-2022-35218", "Description": "The NHI card\u2019s web service component has a heap-based buffer overflow vulnerability due to insufficient validation for packet origin parameter length. A LAN attacker with general user privilege can exploit this vulnerability to disrupt service."}, {"Reference": "CVE-2022-35447", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6b04de."}, {"Reference": "CVE-2022-35448", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6b55af."}, {"Reference": "CVE-2022-35449", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6b0466."}, {"Reference": "CVE-2022-35450", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6b84b1."}, {"Reference": "CVE-2022-35451", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6b03b5."}, {"Reference": "CVE-2022-35452", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6b0b2c."}, {"Reference": "CVE-2022-35453", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6c08a6."}, {"Reference": "CVE-2022-35454", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6b05aa."}, {"Reference": "CVE-2022-35455", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6b0d63."}, {"Reference": "CVE-2022-35456", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x617087."}, {"Reference": "CVE-2022-35458", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6b05ce."}, {"Reference": "CVE-2022-35459", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6e412a."}, {"Reference": "CVE-2022-35460", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x61731f."}, {"Reference": "CVE-2022-35461", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6c0a32."}, {"Reference": "CVE-2022-35462", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6c0bc3."}, {"Reference": "CVE-2022-35463", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6b0478."}, {"Reference": "CVE-2022-35464", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6171b2."}, {"Reference": "CVE-2022-35465", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6c0414."}, {"Reference": "CVE-2022-35466", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6c0473."}, {"Reference": "CVE-2022-35467", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6e41b8."}, {"Reference": "CVE-2022-35468", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6e420d."}, {"Reference": "CVE-2022-35470", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x65fc97."}, {"Reference": "CVE-2022-35471", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6e41b0."}, {"Reference": "CVE-2022-35474", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6b544e."}, {"Reference": "CVE-2022-35475", "Description": "OTFCC v0.10.4 was discovered to contain a heap-buffer overflow via /release-x64/otfccdump+0x6e41a8."}, {"Reference": "CVE-2022-35623", "Description": "In Nordic nRF5 SDK for Mesh 5.0, a heap overflow vulnerability can be triggered by sending a series of segmented control packets and access packets with the same SeqAuth"}, {"Reference": "CVE-2022-35624", "Description": "In Nordic nRF5 SDK for Mesh 5.0, a heap overflow vulnerability can be triggered by sending a series of segmented packets with SegO > SegN"}, {"Reference": "CVE-2022-3570", "Description": "Multiple heap buffer overflows in tiffcrop.c utility in libtiff library Version 4.4.0 allows attacker to trigger unsafe or out of bounds memory access via crafted TIFF image file which could result into application crash, potential information disclosure or any other context-dependent impact"}, {"Reference": "CVE-2022-35711", "Description": "Adobe ColdFusion versions Update 14 (and earlier) and Update 4 (and earlier) are affected by a Heap-based Buffer Overflow vulnerability that could result in arbitrary code execution in the context of the current user. Exploitation of this issue does not require user interaction, the vulnerability is triggered when a crafted network packet is sent to the server."}, {"Reference": "CVE-2022-35712", "Description": "Adobe ColdFusion versions Update 14 (and earlier) and Update 4 (and earlier) are affected by a Heap-based Buffer Overflow vulnerability that could result in arbitrary code execution in the context of the current user. Exploitation of this issue does not require user interaction, the vulnerability is triggered when a crafted network packet is sent to the server."}, {"Reference": "CVE-2022-35951", "Description": "Redis is an in-memory database that persists on disk. Versions 7.0.0 and above, prior to 7.0.5 are vulnerable to an Integer Overflow. Executing an `XAUTOCLAIM` command on a stream key in a specific state, with a specially crafted `COUNT` argument may cause an integer overflow, a subsequent heap overflow, and potentially lead to remote code execution. This has been patched in Redis version 7.0.5. No known workarounds exist."}, {"Reference": "CVE-2022-36150", "Description": "tifig v0.2.2 was discovered to contain a heap-buffer overflow via __asan_memmove at /asan/asan_interceptors_memintrinsics.cpp."}, {"Reference": "CVE-2022-3889", "Description": "Type confusion in V8 in Google Chrome prior to 107.0.5304.106 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-4135", "Description": "Heap buffer overflow in GPU in Google Chrome prior to 107.0.5304.121 allowed a remote attacker who had compromised the renderer process to potentially perform a sandbox escape via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-4141", "Description": "Heap based buffer overflow in vim/vim 9.0.0946 and below by allowing an attacker to CTRL-W gf in the expression used in the RHS of the substitute command."}, {"Reference": "CVE-2022-41428", "Description": "Bento4 v1.6.0-639 was discovered to contain a heap overflow via the AP4_BitReader::ReadBits function in mp4mux."}, {"Reference": "CVE-2022-41429", "Description": "Bento4 v1.6.0-639 was discovered to contain a heap overflow via the AP4_Atom::TypeFromString function in mp4tag."}, {"Reference": "CVE-2022-41430", "Description": "Bento4 v1.6.0-639 was discovered to contain a heap overflow via the AP4_BitReader::ReadBit function in mp4mux."}, {"Reference": "CVE-2022-41595", "Description": "The phones have the heap overflow, out-of-bounds read, and null pointer vulnerabilities in the fingerprint trusted application (TA).Successful exploitation of this vulnerability may affect the fingerprint service."}, {"Reference": "CVE-2022-4174", "Description": "Type confusion in V8 in Google Chrome prior to 108.0.5359.71 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-42499", "Description": "In sms_SendMmCpErrMsg of sms_MmConManagement.c, there is a possible out of bounds write due to a heap buffer overflow. This could lead to remote code execution with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-242001391References: N/A"}, {"Reference": "CVE-2022-42898", "Description": "PAC parsing in MIT Kerberos 5 (aka krb5) before 1.19.4 and 1.20.x before 1.20.1 has integer overflows that may lead to remote code execution (in KDC, kadmind, or a GSS or Kerberos application server) on 32-bit platforms (which have a resultant heap-based buffer overflow), and cause a denial of service on other platforms. This occurs in krb5_pac_parse in lib/krb5/krb/pac.c. Heimdal before 7.7.1 has \"a similar bug.\""}, {"Reference": "CVE-2022-4291", "Description": "The aswjsflt.dll library from Avast Antivirus windows contained a potentially exploitable heap corruption vulnerability that could enable an attacker to bypass the sandbox of the application it was loaded into, if applicable. This issue was fixed in version 18.0.1478 of the Script Shield Component. "}, {"Reference": "CVE-2022-44638", "Description": "In libpixman in Pixman before 0.42.2, there is an out-of-bounds write (aka heap-based buffer overflow) in rasterize_edges_8 due to an integer overflow in pixman_sample_floor_y."}, {"Reference": "CVE-2021-21958", "Description": "A heap-based buffer overflow vulnerability exists in the Hword HwordApp.dll functionality of Hancom Office 2020 11.0.0.2353. A specially-crafted malformed file can lead to memory corruption and potential arbitrary code execution. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2022-37434", "Description": "zlib through 1.2.12 has a heap-based buffer over-read or buffer overflow in inflate in inflate.c via a large gzip header extra field. NOTE: only applications that call inflateGetHeader are affected. Some common applications bundle the affected zlib source code but may be unable to call inflateGetHeader (e.g., see the nodejs/node reference)."}, {"Reference": "CVE-2022-46393", "Description": "An issue was discovered in Mbed TLS before 2.28.2 and 3.x before 3.3.0. There is a potential heap-based buffer overflow and heap-based buffer over-read in DTLS if MBEDTLS_SSL_DTLS_CONNECTION_ID is enabled and MBEDTLS_SSL_CID_IN_LEN_MAX > 2 * MBEDTLS_SSL_CID_OUT_LEN_MAX."}, {"Reference": "CVE-2022-22612", "Description": "A memory consumption issue was addressed with improved memory handling. This issue is fixed in tvOS 15.4, iOS 15.4 and iPadOS 15.4, iTunes 12.12.3 for Windows, watchOS 8.5, macOS Monterey 12.3. Processing a maliciously crafted image may lead to heap corruption."}, {"Reference": "CVE-2022-23318", "Description": "A heap-buffer-overflow in pcf2bdf, versions >= 1.05 allows an attacker to trigger unsafe memory access via a specially crafted PCF font file. This out-of-bound read may lead to an application crash, information disclosure via program memory or other context-dependent impact."}, {"Reference": "CVE-2022-35557", "Description": "A stack overflow vulnerability exists in /goform/wifiSSIDget in Tenda W6 V1.0.0.9(4122) version, which can be exploited by attackers to cause a denial of service (DoS) via the index parameter."}, {"Reference": "CVE-2022-4498", "Description": "In TP-Link routers, Archer C5 and WR710N-V1, running the latest available code, when receiving HTTP Basic Authentication the httpd service can be sent a crafted packet that causes a heap overflow. This can result in either a DoS (by crashing the httpd process) or an arbitrary code execution."}, {"Reference": "CVE-2022-3723", "Description": "Type confusion in V8 in Google Chrome prior to 107.0.5304.87 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-4262", "Description": "Type confusion in V8 in Google Chrome prior to 108.0.5359.94 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-42475", "Description": "A heap-based buffer overflow vulnerability [CWE-122] in FortiOS SSL-VPN 7.2.0 through 7.2.2, 7.0.0 through 7.0.8, 6.4.0 through 6.4.10, 6.2.0 through 6.2.11, 6.0.15 and earlier and FortiProxy SSL-VPN 7.2.0 through 7.2.1, 7.0.7 and earlier may allow a remote unauthenticated attacker to execute arbitrary code or commands via specifically crafted requests."}, {"Reference": "CVE-2021-1647", "Description": "Microsoft Defender Remote Code Execution Vulnerability"}, {"Reference": "CVE-2021-21017", "Description": "Acrobat Reader DC versions versions 2020.013.20074 (and earlier), 2020.001.30018 (and earlier) and 2017.011.30188 (and earlier) are affected by a heap-based buffer overflow vulnerability. An unauthenticated attacker could leverage this vulnerability to achieve arbitrary code execution in the context of the current user. Exploitation of this issue requires user interaction in that a victim must open a malicious file."}, {"Reference": "CVE-2021-21148", "Description": "Heap buffer overflow in V8 in Google Chrome prior to 88.0.4324.150 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-21166", "Description": "Data race in audio in Google Chrome prior to 89.0.4389.72 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-21220", "Description": "Insufficient validation of untrusted input in V8 in Google Chrome prior to 89.0.4389.128 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-30551", "Description": "Type confusion in V8 in Google Chrome prior to 91.0.4472.101 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-30563", "Description": "Type Confusion in V8 in Google Chrome prior to 91.0.4472.164 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-30632", "Description": "Out of bounds write in V8 in Google Chrome prior to 93.0.4577.82 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-3156", "Description": "Sudo before 1.9.5p2 contains an off-by-one error that can result in a heap-based buffer overflow, which allows privilege escalation to root via \"sudoedit -s\" and a command-line argument that ends with a single backslash character."}, {"Reference": "CVE-2021-35395", "Description": "Realtek Jungle SDK version v2.x up to v3.4.14B provides an HTTP web server exposing a management interface that can be used to configure the access point. Two versions of this management interface exists: one based on Go-Ahead named webs and another based on Boa named boa. Both of them are affected by these vulnerabilities. Specifically, these binaries are vulnerable to the following issues: - stack buffer overflow in formRebootCheck due to unsafe copy of submit-url parameter - stack buffer overflow in formWsc due to unsafe copy of submit-url parameter - stack buffer overflow in formWlanMultipleAP due to unsafe copy of submit-url parameter - stack buffer overflow in formWlSiteSurvey due to unsafe copy of ifname parameter - stack buffer overflow in formStaticDHCP due to unsafe copy of hostname parameter - stack buffer overflow in formWsc due to unsafe copy of 'peerPin' parameter - arbitrary command execution in formSysCmd via the sysCmd parameter - arbitrary command injection in formWsc via the 'peerPin' parameter Exploitability of identified issues will differ based on what the end vendor/manufacturer did with the Realtek SDK webserver. Some vendors use it as-is, others add their own authentication implementation, some kept all the features from the server, some remove some of them, some inserted their own set of features. However, given that Realtek SDK implementation is full of insecure calls and that developers tends to re-use those examples in their custom code, any binary based on Realtek SDK webserver will probably contains its own set of issues on top of the Realtek ones (if kept). Successful exploitation of these issues allows remote attackers to gain arbitrary code execution on the device."}, {"Reference": "CVE-2022-2294", "Description": "Heap buffer overflow in WebRTC in Google Chrome prior to 103.0.5060.114 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-26318", "Description": "On WatchGuard Firebox and XTM appliances, an unauthenticated user can execute arbitrary code, aka FBX-22786. This vulnerability impacts Fireware OS before 12.7.2_U2, 12.x before 12.1.3_U8, and 12.2.x through 12.5.x before 12.5.9_U2."}, {"Reference": "CVE-2021-38003", "Description": "Inappropriate implementation in V8 in Google Chrome prior to 95.0.4638.69 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-2598", "Description": "Out-of-bounds Write to API in GitHub repository vim/vim prior to 9.0.0100. "}, {"Reference": "CVE-2022-25363", "Description": "WatchGuard Firebox and XTM appliances allow an authenticated remote attacker with unprivileged credentials to modify privileged management user credentials. This vulnerability impacts Fireware OS before 12.7.2_U2, 12.x before 12.1.3_U8, and 12.2.x through 12.5.x before 12.5.9_U2."}, {"Reference": "CVE-2022-26127", "Description": "A buffer overflow vulnerability exists in FRRouting through 8.1.0 due to missing a check on the input packet length in the babel_packet_examin function in babeld/message.c."}, {"Reference": "CVE-2022-3974", "Description": "A vulnerability classified as critical was found in Axiomatic Bento4. Affected by this vulnerability is the function AP4_StdcFileByteStream::ReadPartial of the file Ap4StdCFileByteStream.cpp of the component mp4info. The manipulation leads to heap-based buffer overflow. The attack can be launched remotely. The exploit has been disclosed to the public and may be used. The identifier VDB-213553 was assigned to this vulnerability."}, {"Reference": "CVE-2021-3675", "Description": "Improper Input Validation vulnerability in synaTEE.signed.dll of Synaptics Fingerprint Driver allows a local authorized attacker to overwrite a heap tag, with potential loss of confidentiality. This issue affects: Synaptics Synaptics Fingerprint Driver 5.1.xxx.26 versions prior to xxx=340 on x86/64; 5.2.xxxx.26 versions prior to xxxx=3541 on x86/64; 5.2.2xx.26 versions prior to xx=29 on x86/64; 5.2.3xx.26 versions prior to xx=25 on x86/64; 5.3.xxxx.26 versions prior to xxxx=3543 on x86/64; 5.5.xx.1058 versions prior to xx=44 on x86/64; 5.5.xx.1102 versions prior to xx=34 on x86/64; 5.5.xx.1116 versions prior to xx=14 on x86/64; 6.0.xx.1104 versions prior to xx=50 on x86/64; 6.0.xx.1108 versions prior to xx=31 on x86/64; 6.0.xx.1111 versions prior to xx=58 on x86/64."}, {"Reference": "CVE-2021-40647", "Description": "In man2html 1.6g, a specific string being read in from a file will overwrite the size parameter in the top chunk of the heap. This at least causes the program to segmentation abort if the heap size parameter isn't aligned correctly. In version before GLIBC version 2.29 and aligned correctly, it allows arbitrary write anywhere in the programs memory."}, {"Reference": "CVE-2021-3567", "Description": "A flaw was found in Caribou due to a regression of CVE-2020-25712 fix. An attacker could use this flaw to bypass screen-locking applications that leverage Caribou as an input mechanism. The highest threat from this vulnerability is to system availability."}, {"Reference": "CVE-2022-35087", "Description": "SWFTools commit 772e55a2 was discovered to contain a segmentation violation via MovieAddFrame at /src/gif2swf.c."}, {"Reference": "CVE-2021-20325", "Description": "Missing fixes for CVE-2021-40438 and CVE-2021-26691 in the versions of httpd, as shipped in Red Hat Enterprise Linux 8.5.0, causes a security regression compared to the versions shipped in Red Hat Enterprise Linux 8.4. A user who installs or updates to Red Hat Enterprise Linux 8.5.0 would be vulnerable to the mentioned CVEs, even if they were properly fixed in Red Hat Enterprise Linux 8.4. CVE-2021-20325 was assigned to that Red Hat specific security regression and it does not affect the upstream versions of httpd."}]}
{"ID": "1220", "Name": "Insufficient Granularity of Access Control", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product implements access controls via a policy or other feature with the intention to disable or restrict accesses (reads and/or writes) to assets in a system from untrusted agents. However, implemented access controls lack required granularity, which renders the control policy too broad because it allows accesses from unauthorized agents to the security-sensitive assets.", "ExtendedDescription": "\n\nIntegrated circuits and hardware engines can expose accesses to assets (device configuration, keys, etc.) to trusted firmware or a software module (commonly set by BIOS/bootloader). This access is typically access-controlled. Upon a power reset, the hardware or system usually starts with default values in registers, and the trusted firmware (Boot firmware) configures the necessary access-control protection.\n\n\nA common weakness that can exist in such protection schemes is that access controls or policies are not granular enough. This condition allows agents beyond trusted agents to access assets and could lead to a loss of functionality or the ability to set up the device securely. This further results in security risks from leaked, sensitive, key material to modification of device configuration.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "284", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases."}, {"Phase": "Implementation", "Note": "Such issues could be introduced during hardware implementation and identified later during Testing or System Configuration phases."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control"], "Impact": ["Modify Memory", "Read Memory", "Execute Unauthorized Code or Commands", "Gain Privileges or Assume Identity", "Bypass Protection Mechanism", "Other"], "Likelihood": ["High"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation", "Testing"], "Description": "\n\n  - Access-control-policy protections must be reviewed for design inconsistency and common weaknesses.\n\n  - Access-control-policy definition and programming flow must be tested in pre-silicon, post-silicon testing.\n\n", "Effectiveness": "High"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Consider a system with a register for storing AES key for encryption or decryption. The key is 128 bits, implemented as a set of four 32-bit registers. The key registers are assets and registers, AES_KEY_READ_POLICY and AES_KEY_WRITE_POLICY, and are defined to provide necessary access controls.\n\n\nThe read-policy register defines which agents can read the AES-key registers, and write-policy register defines which agents can program or write to those registers. Each register is a 32-bit register, and it can support access control for a maximum of 32 agents. The number of the bit when set (i.e., \"1\") allows respective action from an agent whose identity matches the number of the bit and, if \"0\" (i.e., Clear), disallows the respective action to that corresponding agent."}, {"Nature": "Bad", "Language": "Other", "ExampleCode": "| Register | Field description | \n| --- | --- |\n| AES_ENC_DEC_KEY_0 | AES key [0:31] for encryption or decryption  Default 0x00000000 |\n| AES_ENC_DEC_KEY_1 | AES key [32:63] for encryption or decryption  Default 0x00000000 |\n| AES_ENC_DEC_KEY_2 | AES key [64:95] for encryption or decryption  Default 0x00000000 |\n| AES_ENC_DEC_KEY_4 | AES key [96:127] for encryption or decryption  Default 0x00000000 |\n| AES_KEY_READ_WRITE_POLICY | [31:0] Default 0x00000006 - meaning agent with identities \"1\" and \"2\" can both read from and write to key registers  |"}, {"BodyText": "In the above example, there is only one policy register that controls access to both read and write accesses to the AES-key registers, and thus the design is not granular enough to separate read and writes access for different agents. Here, agent with identities \"1\" and \"2\" can both read and write."}, {"BodyText": "A good design should be granular enough to provide separate access controls to separate actions. Access control for reads should be separate from writes. Below is an example of such implementation where two policy registers are defined for each of these actions. The policy is defined such that: the AES-key registers can only be read or used by a crypto agent with identity \"1\" when bit #1 is set. The AES-key registers can only be programmed by a trusted firmware with identity \"2\" when bit #2 is set."}, {"Nature": "Good", "ExampleCode": "|  | \n|\n| AES_KEY_READ_POLICY | [31:0] Default 0x00000002 - meaning only Crypto engine with identity \"1\" can read registers: AES_ENC_DEC_KEY_0, AES_ENC_DEC_KEY_1, AES_ENC_DEC_KEY_2, AES_ENC_DEC_KEY_3  |\n| AES_KEY_WRITE_POLICY | [31:0] Default 0x00000004 - meaning only trusted firmware with identity \"2\" can program registers: AES_ENC_DEC_KEY_0, AES_ENC_DEC_KEY_1, AES_ENC_DEC_KEY_2, AES_ENC_DEC_KEY_3  |"}]}, {"Entries": [{"IntroText": "Within the AXI node interface wrapper module in the RISC-V AXI module of the HACK@DAC'19 CVA6 SoC [REF-1346], an access control mechanism is employed to regulate the access of different privileged users to peripherals."}, {"BodyText": "The AXI ensures that only users with appropriate privileges can access specific peripherals. For instance, a ROM module is accessible exclusively with Machine privilege, and AXI enforces that users attempting to read data from the ROM must possess machine privilege; otherwise, access to the ROM is denied. The access control information and configurations are stored in a ROM."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "```\n\t...\n\t\tfor (i=0; i<NB_SUBORDINATE; i++)\n\t\t begin \n\t\t\tfor (j=0; j<NB_MANAGER; j++)\n\t\t\t begin \n```\nassign connectivity_map_o[i][j] = access_ctrl_i[i][j][priv_lvl_i] || ((j==6) && access_ctrl_i[i][7][priv_lvl_i]);**  end end ..."}, {"BodyText": "However, in the example code above, while assigning distinct privileges to AXI manager and subordinates, both the Platform-Level Interrupt Controller Specification (PLIC) and the Core-local Interrupt Controller (CLINT) (which are peripheral numbers 6 and 7 respectively) utilize the same access control configuration. This common configuration diminishes the granularity of the AXI access control mechanism."}, {"BodyText": "In certain situations, it might be necessary to grant higher privileges for accessing the PLIC than those required for accessing the CLINT. Unfortunately, this differentiation is overlooked, allowing an attacker to access the PLIC with lower privileges than intended."}, {"BodyText": "As a consequence, unprivileged code can read and write to the PLIC even when it was not intended to do so. In the worst-case scenario, the attacker could manipulate interrupt priorities, potentially modifying the system's behavior or availability."}, {"BodyText": "To address the aforementioned vulnerability, developers must enhance the AXI access control granularity by implementing distinct access control entries for the Platform-Level Interrupt Controller (PLIC) and the Core-local Interrupt Controller (CLINT). By doing so, different privilege levels can be defined for accessing PLIC and CLINT, effectively thwarting the potential attacks previously highlighted. This approach ensures a more robust and secure system, safeguarding against unauthorized access and manipulation of interrupt priorities. [REF-1347]"}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "```\n\t...\n\t\tfor (i=0; i<NB_SUBORDINATE; i++)\n\t\t begin \n\t\t\tfor (j=0; j<NB_MANAGER; j++)\n\t\t\t begin \n```\nassign connectivity_map_o[i][j] = access_ctrl_i[i][j][priv_lvl_i];**  end end ..."}]}, {"Entries": [{"IntroText": "Consider the following SoC design. The sram in HRoT has an address range that is readable and writable by unprivileged software and it has an area that is only readable by unprivileged software. The tbus interconnect enforces access control for subordinates on the bus but uses only one bit to control both read and write access. Address 0xA0000000 - 0xA000FFFF is readable and writable by the untrusted cores core{0-N} and address 0xA0010000 - 0xA001FFFF is only readable by the untrusted cores core{0-N}."}, {"BodyText": "The security policy access control is not granular enough, as it uses one bit to enable both read and write access. This gives write access to an area that should only be readable by unprivileged agents. \n\n\n Access control logic should differentiate between read and write access and to have sufficient address granularity."}]}], "ObservedExamples": [{"Reference": "CVE-2022-24985", "Description": "A form hosting website only checks the session authentication status for a single form, making it possible to bypass authentication when there are multiple forms", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-24985"}, {"Reference": "CVE-2021-36934", "Description": "An operating system has an overly permission Access Control List onsome system files, including those related to user passwords", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-36934"}], "RelatedAttackPatterns": ["1", "180"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-36934", "Description": "<p>An elevation of privilege vulnerability exists because of overly permissive Access Control Lists (ACLs) on multiple system files, including the Security Accounts Manager (SAM) database. An attacker who successfully exploited this vulnerability could run arbitrary code with SYSTEM privileges. An attacker could then install programs; view, change, or delete data; or create new accounts with full user rights.</p> <p>An attacker must have the ability to execute code on a victim system to exploit this vulnerability.</p> <p>After installing this security update, you <em>must</em> manually delete all shadow copies of system files, including the SAM database, to fully mitigate this vulnerabilty. <strong>Simply installing this security update will not fully mitigate this vulnerability.</strong> See <a href=\"https://support.microsoft.com/topic/1ceaa637-aaa3-4b58-a48b-baf72a2fa9e7\">KB5005357- Delete Volume Shadow Copies</a>.</p> "}, {"Reference": "CVE-2022-21216", "Description": "Insufficient granularity of access control in out-of-band management in some Intel(R) Atom and Intel Xeon Scalable Processors may allow a privileged user to potentially enable escalation of privilege via adjacent network access."}, {"Reference": "CVE-2022-2475", "Description": "Haas Controller version 100.20.000.1110 has insufficient granularity of access control when using the \"Ethernet Q Commands\" service. Any user is able to write macros into registers outside of the authorized accessible range. This could allow a user to access privileged resources or resources out of context."}, {"Reference": "CVE-2022-36110", "Description": "Netmaker makes networks with WireGuard. Prior to version 0.15.1, Improper Authorization functions lead to non-privileged users running privileged API calls. If someone adds users to the Netmaker platform who do not have admin privileges, they can use their auth tokens to run admin-level functions via the API. This problem has been patched in v0.15.1."}, {"Reference": "CVE-2022-1025", "Description": "All unpatched versions of Argo CD starting with v1.0.0 are vulnerable to an improper access control bug, allowing a malicious user to potentially escalate their privileges to admin-level."}, {"Reference": "CVE-2022-24985", "Description": "Forms generated by JQueryForm.com before 2022-02-05 allows a remote authenticated attacker to bypass authentication and access the administrative section of other forms hosted on the same web server. This is relevant only when an organization hosts more than one of these forms on their server."}]}
{"ID": "1221", "Name": "Incorrect Register Defaults or Module Parameters", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "Hardware description language code incorrectly defines register defaults or hardware Intellectual Property (IP) parameters to insecure values.", "ExtendedDescription": "\n\nIntegrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. Hardware descriptive languages also support definition of parameter variables, which can be defined in code during instantiation of the hardware IP module. Such parameters are generally used to configure a specific instance of a hardware IP in the design.\n\n\nThe system security settings of a hardware design can be affected by incorrectly defined default values or IP parameters. The hardware IP would be in an insecure state at power reset, and this can be exposed or exploited by untrusted software running on the system. Both register defaults and parameters are hardcoded values, which cannot be changed using software or firmware patches but must be changed in hardware silicon. Thus, such security issues are considerably more difficult to address later in the lifecycle. Hardware designs can have a large number of such parameters and register defaults settings, and it is important to have design tool support to check these settings in an automated way and be able to identify which settings are security sensitive.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1419", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Verilog", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "VHDL", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "Such issues could be introduced during implementation of hardware design, since IP parameters and defaults are defined in HDL code and identified later during Testing or System Configuration phases."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control"], "Impact": ["Varies by Context"], "Note": "Degradation of system functionality, or loss of access control enforcement can occur."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "During hardware design, all the system parameters and register defaults must be reviewed to identify security sensitive settings."}, {"Phase": ["Implementation"], "Description": "The default values of these security sensitive settings need to be defined as part of the design review phase."}, {"Phase": ["Testing"], "Description": "Testing phase should use automated tools to test that values are configured per design specifications."}], "DemonstrativeExamples": [{"ID": "DX-162", "Entries": [{"IntroText": "Consider example design module system verilog code shown below. The register_example module is an example parameterized module that defines two parameters, REGISTER_WIDTH and REGISTER_DEFAULT. Register_example module defines a Secure_mode setting, which when set makes the register content read-only and not modifiable by software writes. register_top module instantiates two registers, Insecure_Device_ID_1 and Insecure_Device_ID_2. Generally, registers containing device identifier values are required to be read only to prevent any possibility of software modifying these values."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "// Parameterized Register module example \n // Secure_mode : REGISTER_DEFAULT[0] : When set to 1 register is read only and not writable// \n module register_example \n #( \n parameter REGISTER_WIDTH = 8, // Parameter defines width of register, default 8 bits \n parameter [REGISTER_WIDTH-1:0] REGISTER_DEFAULT = 2**REGISTER_WIDTH -2 // Default value of register computed from Width. Sets all bits to 1s except bit 0 (Secure _mode) \n ) \n ( \n input [REGISTER_WIDTH-1:0] Data_in, \n input Clk, \n input resetn, \n input write, \n output reg [REGISTER_WIDTH-1:0] Data_out \n ); \n\n reg Secure_mode; \n\n always @(posedge Clk or negedge resetn) \n\n```\n\t if (~resetn) \n\t begin \n\t\t Data_out <= REGISTER_DEFAULT; // Register content set to Default at reset \n\t\t Secure_mode <= REGISTER_DEFAULT[0]; // Register Secure_mode set at reset \n\t end \n\t else if (write & ~Secure_mode) \n\t begin \n\t\t Data_out <= Data_in; \n\t end \n endmodule \n module register_top \n ( \n input Clk, \n input resetn, \n input write, \n input [31:0] Data_in, \n output reg [31:0] Secure_reg, \n output reg [31:0] Insecure_reg \n ); \n register_example #( \n\t .REGISTER_WIDTH (32), \n\t .REGISTER_DEFAULT (1224) // Incorrect Default value used bit 0 is 0. \n ) Insecure_Device_ID_1 ( \n\t .Data_in (Data_in), \n\t .Data_out (Secure_reg), \n\t .Clk (Clk), \n\t .resetn (resetn), \n\t .write (write) \n ); \n register_example #(\n\t .REGISTER_WIDTH (32) // Default not defined 2^32-2 value will be used as default. \n ) Insecure_Device_ID_2 ( \n\t .Data_in (Data_in), \n\t .Data_out (Insecure_reg), \n\t .Clk (Clk), \n\t .resetn (resetn), \n\t .write (write) \n ); \n endmodule \n```"}, {"BodyText": "These example instantiations show how, in a hardware design, it would be possible to instantiate the register module with insecure defaults and parameters."}, {"BodyText": "In the example design, both registers will be software writable since Secure_mode is defined as zero."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "register_example #( \n\n```\n\t .REGISTER_WIDTH (32), \n\t .REGISTER_DEFAULT (1225) // Correct default value set, to enable Secure_mode \n ) Secure_Device_ID_example ( \n\t .Data_in (Data_in), \n\t .Data_out (Secure_reg), \n\t .Clk (Clk), \n\t .resetn (resetn), \n\t .write (write) \n );\n```"}]}, {"Entries": [{"IntroText": "The example code is taken from the fuse memory inside the buggy OpenPiton SoC of HACK@DAC'21 [REF-1356]. Fuse memory can be used to store key hashes, password hashes, and configuration information. For example, the password hashes of JTAG and HMAC are stored in the fuse memory in the OpenPiton design."}, {"BodyText": "During the firmware setup phase, data in the Fuse memory are transferred into the registers of the corresponding SoC peripherals for initialization. However, if the offset to access the password hash is set incorrectly, programs cannot access the correct password hash from the fuse memory, breaking the functionalities of the peripherals and even exposing sensitive information through other peripherals."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "**parameter MEM_SIZE = 100;** \n\n **localparam JTAG_OFFSET = 81;** \n\n const logic [MEM_SIZE-1:0][31:0] mem = {\n\n```\n\t // JTAG expected hamc hash\n\t 32'h49ac13af, 32'h1276f1b8, 32'h6703193a, 32'h65eb531b,\n\t 32'h3025ccca, 32'h3e8861f4, 32'h329edfe5, 32'h98f763b4,\n ...\n assign jtag_hash_o = {mem[JTAG_OFFSET-1],mem[JTAG_OFFSET-2],mem[JTAG_OFFSET-3],\n mem[JTAG_OFFSET-4],mem[JTAG_OFFSET-5],mem[JTAG_OFFSET-6],mem[JTAG_OFFSET-7],mem[JTAG_OFFSET-8]};\n ...\n```"}, {"BodyText": "The following vulnerable code accesses the JTAG password hash from the fuse memory. However, the JTAG_OFFSET is incorrect, and the fuse memory outputs the wrong values to jtag_hash_o. Moreover, setting incorrect offset gives the ability to attackers to access JTAG by knowing other low-privileged peripherals' passwords."}, {"BodyText": "To mitigate this, change JTAG_OFFSET to the correct address of the JTAG key [REF-1357]."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "parameter MEM_SIZE = 100;\n\n **localparam JTAG_OFFSET = 100;**"}]}, {"ID": "DX-222", "Entries": [{"IntroText": "The following example code is excerpted from the Access Control module, acct_wrapper, in the Hack@DAC'21 buggy OpenPiton System-on-Chip (SoC). Within this module, a set of memory-mapped I/O registers, referred to as acct_mem, each 32-bit wide, is utilized to store access control permissions for peripherals [REF-1437]. Access control registers are typically used to define and enforce permissions and access rights for various system resources."}, {"BodyText": "However, in the buggy SoC, these registers are all enabled at reset, i.e., essentially granting unrestricted access to all system resources [REF-1438]. This will introduce security vulnerabilities and risks to the system, such as privilege escalation or exposing sensitive information to unauthorized users or processes."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "module acct_wrapper #(\n ...\n\n```\n\t always @(posedge clk_i)\n\t\t begin\n\t\t\t if(~(rst_ni && ~rst_6))\n\t\t\t\t begin\n\t\t\t\t\t for (j=0; j < AcCt_MEM_SIZE; j=j+1)\n\t\t\t\t\t\t begin\n```\nacct_mem[j] <= 32'hffffffff;** \n\t\t\t\t\t\t\t end\n\t\t\t\t\t\t end\n\t\t\t\t ..."}, {"BodyText": "To fix this issue, the access control registers must be properly initialized during the reset phase of the SoC. Correct initialization values should be established to maintain the system's integrity, security, predictable behavior, and allow proper control of peripherals. The specifics of what values should be set depend on the SoC's design and the requirements of the system. To address the problem depicted in the bad code example [REF-1438], the default value for \"acct_mem\" should be set to 32'h00000000 (see good code example [REF-1439]). This ensures that during startup or after any reset, access to protected data is restricted until the system setup is complete and security procedures properly configure the access control settings."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "module acct_wrapper #(\n ...\n\n```\n\t always @(posedge clk_i)\n\t\t begin\n\t\t\t if(~(rst_ni && ~rst_6)) \n\t\t\t\t begin\n\t\t\t\t\t for (j=0; j < AcCt_MEM_SIZE; j=j+1)\n\t\t\t\t\t\t begin\n```\nacct_mem[j] <= 32'h00000000;** \n\t\t\t\t\t\t\t end\n\t\t\t\t\t\t end\n\t\t\t\t ..."}]}], "RelatedAttackPatterns": ["166"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1222", "Name": "Insufficient Granularity of Address Regions Protected by Register Locks", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product defines a large address region protected from modification by the same register lock control bit. This results in a conflict between the functional requirement that some addresses need to be writable by software during operation and the security requirement that the system configuration lock bit must be set during the boot process.", "ExtendedDescription": "\n\nIntegrated circuits and hardware IPs can expose the device configuration controls that need to be programmed after device power reset by a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. In hardware design, this is commonly implemented using a programmable lock bit which enables/disables writing to a protected set of registers or address regions. When the programmable lock bit is set, the relevant address region can be implemented as a hardcoded value in hardware logic that cannot be changed later.\n\n\nA problem can arise wherein the protected region definition is not granular enough. After the programmable lock bit has been set, then this new functionality cannot be implemented without change to the hardware design.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1220", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "System on Chip", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "Such issues are introduced during hardware architecture and design since software controls and configuration are defined during these phases and identified later during Testing or System Configuration phases."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Other"], "Note": "System security configuration cannot be defined in a way that does not conflict with functional requirements of device."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "\n\nThe defining of protected locked registers should be reviewed or tested early in the design phase with software teams to ensure software flows are not blocked by the security locks.\n\n\nAs an alternative to using register lock control bits and fixed access control regions, the hardware design could use programmable security access control configuration so that device trusted firmware can configure and change the protected regions based on software usage and security models.\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "For example, consider a hardware unit with a 32 kilobyte configuration address space where the first 8 kilobyte address contains security sensitive controls that must only be writable by device bootloader. One way to protect the security configuration could be to define a 32 bit system configuration locking register (SYS_LOCK) where each bit lock locks the corresponding 1 kilobyte region."}, {"Nature": "Bad", "Language": "Other", "ExampleCode": "| Address | Register | \n| --- | --- |\n| 0x0000 | SYS_LOCK: 32 bit system configuration lock register, each bit is write-1-once  |\n| 0x0004 | SECURITY_FEATURE_ENABLE: 32 bit register controlling enabling of security features  |\n| ... |    |\n| 0x0310 | SW_MODE: 32 bit Software Mode indication register   |\n\n\t| Address region | Lock bit | \n| --- | --- |\n| 0x0000 - 0x03FF | SYS_LOCK[0]  |\n| 0x0400 - 0x07FF | SYS_LOCK[1]  |\n| ... |    |\n| 0x7C00 - 0x7FFF | SYS_LOCK[31]  |"}, {"BodyText": "If a register exists within the first kilobyte address range (e.g. SW_MODE, address 0x310) and needs to be software writable at runtime, then this register cannot be written in a securely configured system since SYS_LOCK register lock bit 0 must be set to protect other security settings (e.g. SECURITY_FEATURE_ENABLE, address 0x0004). The only fix would be to change the hardware logic or not set the security lock bit."}]}], "RelatedAttackPatterns": ["679"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-1733", "Description": "Heap-based Buffer Overflow in GitHub repository vim/vim prior to 8.2.4968."}]}
{"ID": "1223", "Name": "Race Condition for Write-Once Attributes", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue.", "ExtendedDescription": "\n\nIntegrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to defined default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make them write-once. This means the hardware implementation only allows writing to such registers once, and they become read-only after having been written once by software. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings.\n\n\nImplementation issues in hardware design of such controls can expose such registers to a race condition security flaw. For example, consider a hardware design that has two different software/firmware modules executing in parallel. One module is trusted (module A) and another is untrusted (module B). In this design it could be possible for Module B to send write cycles to the write-once register before Module A. Since the field is write-once the programmed value from Module A will be ignored and the pre-empted value programmed by Module B will be used by hardware.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "362", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Verilog", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "VHDL", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "System on Chip", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "This weakness can appear in designs that use register write-once attributes with two or more software/firmware modules with varying levels of trust executing in parallel."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"], "Note": "System configuration cannot be programmed in a secure way."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "During hardware design all register write-once or sticky fields must be evaluated for proper configuration."}, {"Phase": ["Testing"], "Description": "The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "consider the example design module system verilog code shown below. register_write_once_example module is an example of register that has a write-once field defined. Bit 0 field captures the write_once_status value."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "module register_write_once_example\n (\n\n```\n\t input [15:0] Data_in,\n\t input Clk,\n\t input ip_resetn,\n\t input global_resetn,\n\t input write,\n\t output reg [15:0] Data_out\n );\n reg Write_once_status;\n always @(posedge Clk or negedge ip_resetn)\n if (~ip_resetn)\n\t begin\n\t\t Data_out <= 16'h0000; \n\t\t Write_once_status <= 1'b0;\n\t end\n else if (write & ~Write_once_status) \n\t begin\n\t\t Data_out <= Data_in & 16'hFFFE; // Input data written to register after masking bit 0\n\t\t Write_once_status <= 1'b1; // Write once status set after first write.\n\t end\n else if (~write)\n\t begin\n\t\t Data_out[15:1] <= Data_out[15:1];\n\t\t Data_out[0] <= Write_once_status;\n\t end\n endmodule\n```"}, {"BodyText": "The first system component that sends a write cycle to this register can program the value. This could result in a race condition security issue in the SoC design, if an untrusted agent is running in the system in parallel with the trusted component that is expected to program the register."}, {"Nature": "Good", "ExampleCode": "Trusted firmware or software trying to set the write-once field: \n\n  - Must confirm the Write_once_status (bit 0) value is zero, before programming register. If another agent has programmed the register before, then Write_once_status value will be one.\n\n  - After writing to the register, the trusted software can issue a read to confirm that the valid setting has been programmed."}]}], "RelatedAttackPatterns": ["26"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1224", "Name": "Improper Restriction of Write-Once Bit Fields", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The hardware design control register \"sticky bits\" or write-once bit fields are improperly implemented, such that they can be reprogrammed by software.", "ExtendedDescription": "\n\nIntegrated circuits and hardware IP software programmable controls and settings are commonly stored in register circuits. These register contents have to be initialized at hardware reset to define default values that are hard coded in the hardware description language (HDL) code of the hardware unit. A common security protection method used to protect register settings from modification by software is to make the settings write-once or \"sticky.\" This allows writing to such registers only once, whereupon they become read-only. This is useful to allow initial boot software to configure systems settings to secure values while blocking runtime software from modifying such hardware settings.\n\n\nFailure to implement write-once restrictions in hardware design can expose such registers to being re-programmed by software and written multiple times. For example, write-once fields could be implemented to only be write-protected if they have been set to value \"1\", wherein they would work as \"write-1-once\" and not \"write-once\".\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "284", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Verilog", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "VHDL", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "System on Chip", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "Such issues could be introduced during implementation of hardware design, since IP parameters and defaults are defined in HDL code and identified later during Testing or System Configuration phases."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control"], "Impact": ["Varies by Context"], "Note": "System configuration cannot be programmed in a secure way."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "During hardware design all register write-once or sticky fields must be evaluated for proper configuration."}, {"Phase": ["Testing"], "Description": "The testing phase should use automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Consider the example design module system verilog code shown below. register_write_once_example module is an example of register that has a write-once field defined. Bit 0 field captures the write_once_status value. This implementation can be for a register that is defined by specification to be a write-once register, since the write_once_status field gets written by input data bit 0 on first write."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "module register_write_once_example\n ( \n input [15:0] Data_in, \n input Clk, \n input ip_resetn, \n input global_resetn,\n input write,\n output reg [15:0] Data_out \n );\n\n reg Write_once_status; \n\n always @(posedge Clk or negedge ip_resetn)\n\n```\n\t if (~ip_resetn)\n\t begin\n\t\t Data_out <= 16'h0000;\n\t\t Write_once_status <= 1'b0; \n\t end \n\t else if (write & ~Write_once_status)\n\t begin\n\t\t Data_out <= Data_in & 16'hFFFE;\n\t\t Write_once_status <= Data_in[0]; // Input bit 0 sets Write_once_status\n\t end\n\t else if (~write)\n\t begin \n\t\t Data_out[15:1] <= Data_out[15:1]; \n\t\t Data_out[0] <= Write_once_status; \n\t end \n endmodule\n```"}, {"BodyText": "The above example only locks further writes if write_once_status bit is written to one. So it acts as write_1-Once instead of the write-once attribute."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "module register_write_once_example \n ( \n input [15:0] Data_in, \n input Clk, \n input ip_resetn, \n input global_resetn, \n input write, \n output reg [15:0] Data_out \n ); \n\n reg Write_once_status; \n\n always @(posedge Clk or negedge ip_resetn) \n\n```\n\t if (~ip_resetn) \n\t begin \n\t\t Data_out <= 16'h0000; \n\t\t Write_once_status <= 1'b0; \n\t end \n\t else if (write & ~Write_once_status) \n\t begin \n\t\t Data_out <= Data_in & 16'hFFFE; \n\t\t Write_once_status <= 1'b1; // Write once status set on first write, independent of input \n\t end \n\t else if (~write) \n\t begin \n\t\t Data_out[15:1] <= Data_out[15:1]; \n\t\t Data_out[0] <= Write_once_status; \n\t end \n endmodule\n```"}]}], "RelatedAttackPatterns": ["680"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1229", "Name": "Creation of Emergent Resource", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product manages resources or behaves in a way that indirectly creates a new, distinct resource that can be used by attackers in violation of the intended policy.", "ExtendedDescription": "\n\nA product is only expected to behave in a way that was specifically intended by the developer. Resource allocation and management is expected to be performed explicitly by the associated code. However, in systems with complex behavior, the product might indirectly produce new kinds of resources that were never intended in the original design. For example, a covert channel is a resource that was never explicitly intended by the developer, but it is useful to attackers. \"Parasitic computing,\" while not necessarily malicious in nature, effectively tricks a product into performing unintended computations on behalf of another party.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "664", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}}
{"ID": "123", "Name": "Write-what-where Condition", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "Any condition where the attacker has the ability to write an arbitrary value to an arbitrary location, often as the result of a buffer overflow.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "787", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "119", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "119", "ViewID": "1340", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability", "Access Control"], "Impact": ["Modify Memory", "Execute Unauthorized Code or Commands", "Gain Privileges or Assume Identity", "DoS: Crash, Exit, or Restart", "Bypass Protection Mechanism"], "Note": "Clearly, write-what-where conditions can be used to write data to areas of memory outside the scope of a policy. Also, they almost invariably can be used to execute arbitrary code, which is usually outside the scope of a program's implicit security policy. If the attacker can overwrite a pointer's worth of memory (usually 32 or 64 bits), they can redirect a function pointer to their own malicious code. Even when the attacker can only modify a single byte arbitrary code execution can be possible. Sometimes this is because the same problem can be exploited repeatedly to the same effect. Other times it is because the attacker can overwrite security-critical application-specific data -- such as a flag indicating whether the user is an administrator."}, {"Scope": ["Integrity", "Availability"], "Impact": ["DoS: Crash, Exit, or Restart", "Modify Memory"], "Note": "Many memory accesses can lead to program termination, such as when writing to addresses that are invalid for the current process."}, {"Scope": ["Access Control", "Other"], "Impact": ["Bypass Protection Mechanism", "Other"], "Note": "When the consequence is arbitrary code execution, this can often be used to subvert any other security service."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Strategy": "Language Selection", "Description": "Use a language that provides appropriate memory abstractions."}, {"Phase": ["Operation"], "Description": "Use OS-level preventative functionality integrated after the fact. Not a complete solution."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The classic example of a write-what-where condition occurs when the accounting information for memory allocations is overwritten in a particular fashion. Here is an example of potentially vulnerable code:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t#define BUFSIZE 256\n\tint main(int argc, char **argv) {\n\t\tchar *buf1 = (char *) malloc(BUFSIZE);\n\t\tchar *buf2 = (char *) malloc(BUFSIZE);\n\t\tstrcpy(buf1, argv[1]);\n\t\tfree(buf2);\n\t}\n```"}, {"BodyText": "Vulnerability in this case is dependent on memory layout. The call to strcpy() can be used to write past the end of buf1, and, with a typical layout, can overwrite the accounting information that the system keeps for buf2 when it is allocated. Note that if the allocation header for buf2 can be overwritten, buf2 itself can be overwritten as well."}, {"BodyText": "The allocation header will generally keep a linked list of memory \"chunks\". Particularly, there may be a \"previous\" chunk and a \"next\" chunk. Here, the previous chunk for buf2 will probably be buf1, and the next chunk may be null. When the free() occurs, most memory allocators will rewrite the linked list using data from buf2. Particularly, the \"next\" chunk for buf1 will be updated and the \"previous\" chunk for any subsequent chunk will be updated. The attacker can insert a memory address for the \"next\" chunk and a value to write into that memory address for the \"previous\" chunk."}, {"BodyText": "This could be used to overwrite a function pointer that gets dereferenced later, replacing it with a memory address that the attacker has legitimate access to, where they have placed malicious code, resulting in arbitrary code execution."}]}], "ObservedExamples": [{"Reference": "CVE-2022-21668", "Description": "Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-21668"}, {"Reference": "CVE-2022-0545", "Description": "Chain: 3D renderer has an integer overflow (CWE-190) leading to write-what-where condition (CWE-123) using a crafted image.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-0545"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-21950", "Description": "An out-of-bounds write vulnerability exists in the CMD_DEVICE_GET_SERVER_LIST_REQUEST functionality of the home_security binary of Anker Eufy Homebase 2 2.1.6.9h in function recv_server_device_response_msg_process. A specially-crafted network packet can lead to code execution."}, {"Reference": "CVE-2022-0545", "Description": "An integer overflow in the processing of loaded 2D images leads to a write-what-where vulnerability and an out-of-bounds read vulnerability, allowing an attacker to leak sensitive information or achieve code execution in the context of the Blender process when a specially crafted image file is loaded. This flaw affects Blender versions prior to 2.83.19, 2.93.8 and 3.1."}, {"Reference": "CVE-2022-1523", "Description": "Fuji Electric D300win prior to version 3.7.1.17 is vulnerable to a write-what-where condition, which could allow an attacker to overwrite program memory to manipulate the flow of information."}, {"Reference": "CVE-2022-35289", "Description": "A write-what-where condition in hermes caused by an integer overflow, prior to commit 5b6255ae049fa4641791e47fad994e8e8c4da374 allows attackers to potentially execute arbitrary code via crafted JavaScript. Note that this is only exploitable if the application using Hermes permits evaluation of untrusted JavaScript. Hence, most React Native applications are not affected."}]}
{"ID": "1230", "Name": "Exposure of Sensitive Information Through Metadata", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product prevents direct access to a resource containing sensitive information, but it does not sufficiently limit access to metadata that is derived from the original, sensitive information.", "ExtendedDescription": "\n\nDevelopers might correctly prevent unauthorized access to a database or other resource containing sensitive information, but they might not consider that portions of the original information might also be recorded in metadata, search indices, statistical reports, or other resources. If these resources are not also restricted, then attackers might be able to extract some or all of the original information, or otherwise infer some details. For example, an attacker could specify search terms that are known to be unique to a particular person, or view metadata such as activity or creation dates in order to identify usage patterns.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "285", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-20733", "Description": "A vulnerability in the login page of Cisco Identity Services Engine (ISE) could allow an unauthenticated, remote attacker to log in without credentials and access all roles without any restrictions. This vulnerability is due to exposed sensitive Security Assertion Markup Language (SAML) metadata. An attacker could exploit this vulnerability by using the exposed SAML metadata to bypass authentication to the user portal. A successful exploit could allow the attacker to access all roles without any restrictions."}, {"Reference": "CVE-2022-39397", "Description": "aliyun-oss-client is a rust client for Alibaba Cloud OSS. Users of this library will be affected, the incoming secret will be disclosed unintentionally. This issue has been patched in version 0.8.1."}]}
{"ID": "1231", "Name": "Improper Prevention of Lock Bit Modification", "Abstraction": "Base", "Structure": "Simple", "Status": "Stable", "Description": "The product uses a trusted lock bit for restricting access to registers, address regions, or other resources, but the product does not prevent the value of the lock bit from being modified after it has been set.", "ExtendedDescription": "\n\nIn integrated circuits and hardware intellectual property (IP) cores, device configuration controls are commonly programmed after a device power reset by a trusted firmware or software module (e.g., BIOS/bootloader) and then locked from any further modification.\n\n\nThis behavior is commonly implemented using a trusted lock bit. When set, the lock bit disables writes to a protected set of registers or address regions. Design or coding errors in the implementation of the lock bit protection feature may allow the lock bit to be modified or cleared by software after it has been set. Attackers might be able to unlock the system and features that the bit is intended to protect.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "284", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases."}, {"Phase": "Implementation", "Note": "Such issues could be introduced during implementation and identified later during Testing or System Configuration phases."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Modify Memory"], "Likelihood": ["High"], "Note": "Registers protected by lock bit can be modified even when lock is set."}], "DetectionMethods": [{"Method": "Manual Analysis", "Description": "Set the lock bit. Power cycle the device. Attempt to clear the lock bit. If the information is changed, implement a design fix. Retest. Also, attempt to indirectly clear the lock bit or bypass it.", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation", "Testing"], "Description": "\n\n  - Security lock bit protections must be reviewed for design inconsistency and common weaknesses.\n\n  - Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.\n\n", "Effectiveness": "High"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Consider the example design below for a digital thermal sensor that detects overheating of the silicon and triggers system shutdown. The system critical temperature limit (CRITICAL_TEMP_LIMIT) and thermal sensor calibration (TEMP_SENSOR_CALIB) data have to be programmed by firmware, and then the register needs to be locked (TEMP_SENSOR_LOCK)."}, {"Nature": "Bad", "Language": "Other", "ExampleCode": "| Register | Field description | \n| --- | --- |\n| CRITICAL_TEMP_LIMIT | [31:8] Reserved field; Read only; Default 0  [7:0] Critical temp 0-255 Centigrade; Read-write-lock; Default 125 |\n| TEMP_SENSOR_CALIB | [31:0] Thermal sensor calibration data. Slope value used to map sensor reading to degrees Centigrade.  |\n| TEMP_SENSOR_LOCK | [31:1] Reserved field; Read only; Default 0  [0] Lock bit, locks CRITICAL_TEMP_LIMIT and TEMP_SENSOR_CALIB registers; Write-1-once; Default 0 |\n| TEMP_HW_SHUTDOWN | [31:2] Reserved field; Read only; Default 0  [1] Enable hardware shutdown on critical temperature detection; Read-write; Default 0 |\n| CURRENT_TEMP | [31:8] Reserved field; Read only; Default 0  [7:0] Current Temp 0-255 Centigrade; Read-only; Default 0 |"}, {"BodyText": "In this example, note that if the system heats to critical temperature, the response of the system is controlled by the TEMP_HW_SHUTDOWN bit [1], which is not lockable. Thus, the intended security property of the critical temperature sensor cannot be fully protected, since software can misconfigure the TEMP_HW_SHUTDOWN register even after the lock bit is set to disable the shutdown response."}, {"Nature": "Good", "ExampleCode": "To fix this weakness, one could change the TEMP_HW_SHUTDOWN field to be locked by TEMP_SENSOR_LOCK.\n\n|  | \n|\n| TEMP_HW_SHUTDOWN | [31:2] Reserved field; Read only; Default 0   [1] Enable hardware shutdown on critical temperature detection; Read-write-Lock; Default 0 [0] Locked by TEMP_SENSOR_LOCK |"}]}, {"Entries": [{"IntroText": "The following example code is a snippet from the register locks inside the buggy OpenPiton SoC of HACK@DAC'21 [REF-1350]. Register locks help prevent SoC peripherals' registers from malicious use of resources. The registers that can potentially leak secret data are locked by register locks."}, {"BodyText": "In the vulnerable code, the reglk_mem is used for locking information. If one of its bits toggle to 1, the corresponding peripheral's registers will be locked. In the context of the HACK@DAC System-on-Chip (SoC), it is pertinent to note the existence of two distinct categories of reset signals."}, {"BodyText": "First, there is a global reset signal denoted as \"rst_ni,\" which possesses the capability to simultaneously reset all peripherals to their respective initial states."}, {"BodyText": "Second, we have peripheral-specific reset signals, such as \"rst_9,\" which exclusively reset individual peripherals back to their initial states. The administration of these reset signals is the responsibility of the reset controller module."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "```\n\talways @(posedge clk_i)\n\t\tbegin\n```\nif(~(rst_ni && ~jtag_unlock && ~rst_9))** \n\t\t\t\n\t\t\t```\n\t\t\t\tbegin \n\t\t\t\t\tfor (j=0; j < 6; j=j+1) begin \n\t\t\t\t\t\treglk_mem[j] <= 'h0;\n\t\t\t\t end\n\t end\n\t...\n```"}, {"BodyText": "In the buggy SoC architecture during HACK@DAC'21, a critical issue arises within the reset controller module. Specifically, the reset controller can inadvertently transmit a peripheral reset signal to the register lock within the user privilege domain."}, {"BodyText": "This unintentional action can result in the reset of the register locks, potentially exposing private data from all other peripherals, rendering them accessible and readable."}, {"BodyText": "To mitigate the issue, remove the extra reset signal rst_9 from the register lock if condition. [REF-1351]"}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "```\n\talways @(posedge clk_i)\n\t\tbegin\n```\nif(~(rst_ni && ~jtag_unlock))** \n\t\t\t\n\t\t\t```\n\t\t\t\tbegin \n\t\t\t\t\tfor (j=0; j < 6; j=j+1) begin \n\t\t\t\t\t\treglk_mem[j] <= 'h0;\n\t\t\t\t end\n\t end\n\t...\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2017-6283", "Description": "chip reset clears critical read/write lock permissions for RSA function", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-6283"}], "RelatedAttackPatterns": ["680"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1232", "Name": "Improper Lock Behavior After Power State Transition", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "Register lock bit protection disables changes to system configuration once the bit is set. Some of the protected registers or lock bits become programmable after power state transitions (e.g., Entry and wake from low power sleep modes) causing the system configuration to be changeable.", "ExtendedDescription": "\n\nDevices may allow device configuration controls which need to be programmed after device power reset via a trusted firmware or software module (commonly set by BIOS/bootloader) and then locked from any further modification. This action is commonly implemented using a programmable lock bit, which, when set, disables writes to a protected set of registers or address regions.\n\n\nAfter a power state transition, the lock bit is set to unlocked. Some common weaknesses that can exist in such a protection scheme are that the lock gets cleared, the values of the protected registers get reset, or the lock become programmable.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "667", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Modify Memory"], "Likelihood": ["High"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation", "Testing"], "Description": "\n\n  - Security Lock bit protections should be reviewed for behavior across supported power state transitions.\n\n  - Security lock programming flow and lock properties should be tested in pre-silicon and post-silicon testing including testing across power transitions.\n\n", "Effectiveness": "High"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Consider the memory configuration settings of a system that uses DDR3 DRAM memory. Protecting the DRAM memory configuration from modification by software is required to ensure that system memory access control protections cannot be bypassed. This can be done by using lock bit protection that locks all of the memory configuration registers. The memory configuration lock can be set by the BIOS during the boot process.\n\n\nIf such a system also supports a rapid power on mode like hibernate, the DRAM data must be saved to a disk before power is removed and restored back to the DRAM once the system powers back up and before the OS resumes operation after returning from hibernate."}, {"BodyText": "To support the hibernate transition back to the operating state, the DRAM memory configuration must be reprogrammed even though it was locked previously. As the hibernate resume does a partial reboot, the memory configuration could be altered before the memory lock is set. Functionally the hibernate resume flow requires a bypass of the lock-based protection. The memory configuration must be securely stored and restored by trusted system firmware. Lock settings and system configuration must be restored to the same state it was in before the device entered into the hibernate mode."}]}, {"Entries": [{"IntroText": "The example code below is taken from the register lock module (reglk_wrapper) of the Hack@DAC'21 buggy OpenPiton System-on-Chip (SoC). Upon powering on, most of the silicon registers are initially unlocked. However, critical resources must be configured and locked by setting the lock bit in a register.\n\n\nIn this module, a set of six memory-mapped I/O registers (reglk_mem) is defined and maintained to control the access control of registers inside different peripherals in the SoC [REF-1432]. Each bit represents a register's read/write ability or sets of registers inside a peripheral. Setting improper lock values after system power transition or system rest would make a temporary window for the attackers to read unauthorized data, e.g., secret keys from the crypto engine, and write illegitimate data to critical registers, e.g., framework data. Furthermore, improper register lock values can also result in DoS attacks. \n\n\nIn this faulty implementation, the locks are disabled, i.e., initialized to zero, at reset instead of setting them to their appropriate values [REF-1433]. Improperly initialized locks might allow unauthorized access to sensitive registers, compromising the system's security."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "module reglk_wrapper #(\n ...\n\n```\n\t always @(posedge clk_i)\n\t\t begin\n\t\t\t if(~(rst_ni && ~jtag_unlock && ~rst_9))\n\t\t\t\t begin\n\t\t\t\t\t for (j=0; j < 6; j=j+1) begin\n```\nreglk_mem[j] <= 'h0;** \n\t\t\t\t\t\t end\n\t\t\t\t\t end\n\t\t\t\t ..."}, {"BodyText": "To resolve this issue, it is crucial to ensure that register locks are correctly initialized during the reset phase of the SoC. Correct initialization values should be established to maintain the system's integrity, security, and predictable behavior and allow for proper control of peripherals. The specifics of initializing register locks and their values depend on the SoC's design and the system's requirements; for example, access to all registers through the user privilege level should be locked at reset. To address the problem depicted in the bad code example [REF-1433], the default value for \"reglk_mem\" should be set to 32'hFFFFFFFF. This ensures that access to protected data is restricted during power state transition or after reset until the system state transition is complete and security procedures have properly configured the register locks."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "module reglk_wrapper #(\n ...\n\n```\n\t always @(posedge clk_i)\n\t\t begin\n\t\t\t if(~(rst_ni && ~jtag_unlock && ~rst_9))\n\t\t\t\t begin\n\t\t\t\t\t for (j=0; j < 6; j=j+1) begin\n```\nreglk_mem[j] <= 'hffffffff;** \n\t\t\t\t\t\t end\n\t\t\t\t\t end\n\t\t\t\t ..."}]}], "RelatedAttackPatterns": ["166"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1233", "Name": "Security-Sensitive Hardware Controls with Missing Lock Bit Protection", "Abstraction": "Base", "Structure": "Simple", "Status": "Stable", "Description": "The product uses a register lock bit protection mechanism, but it does not ensure that the lock bit prevents modification of system registers or controls that perform changes to important hardware system configuration.", "ExtendedDescription": "\n\nIntegrated circuits and hardware intellectual properties (IPs) might provide device configuration controls that need to be programmed after device power reset by a trusted firmware or software module, commonly set by BIOS/bootloader. After reset, there can be an expectation that the controls cannot be used to perform any further modification. This behavior is commonly implemented using a trusted lock bit, which can be set to disable writes to a protected set of registers or address regions. The lock protection is intended to prevent modification of certain system configuration (e.g., memory/memory protection unit configuration).\n\n\nHowever, if the lock bit does not effectively write-protect all system registers or controls that could modify the protected system configuration, then an adversary may be able to use software to access the registers/controls and modify the protected hardware configuration.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "284", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "667", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "Such issues could be introduced during hardware architecture and design and identified later during Testing or System Configuration phases."}, {"Phase": "Implementation", "Note": "Such issues could be introduced during implementation and identified later during Testing or System Configuration phases."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Modify Memory"], "Note": "System Configuration protected by the lock bit can be modified even when the lock is set."}], "DetectionMethods": [{"Method": "Manual Analysis", "Description": "Set the lock bit. Attempt to modify the information protected by the lock bit. If the information is changed, implement a design fix. Retest. Also, attempt to indirectly clear the lock bit or bypass it.", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation", "Testing"], "Description": "\n\n  - Security lock bit protections must be reviewed for design inconsistency and common weaknesses.\n\n  - Security lock programming flow and lock properties must be tested in pre-silicon and post-silicon testing.\n\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Consider the example design below for a digital thermal sensor that detects overheating of the silicon and triggers system shutdown. The system critical temperature limit (CRITICAL_TEMP_LIMIT) and thermal sensor calibration (TEMP_SENSOR_CALIB) data have to be programmed by the firmware."}, {"Nature": "Bad", "Language": "Other", "ExampleCode": "| Register | Field description | \n| --- | --- |\n| CRITICAL_TEMP_LIMIT  | [31:8] Reserved field; Read only; Default 0  [7:0] Critical temp 0-255 Centigrade; Read-write-lock; Default 125  |\n| TEMP_SENSOR_CALIB  | [31:0] Thermal sensor calibration data. A slope value used to map sensor reading to a degree Centigrade. Read-write; Default 25   |\n| TEMP_SENSOR_LOCK  | [31:1] Reserved field; Read only; Default 0  [0] Lock bit, locks CRITICAL_TEMP_LIMIT register; Write-1-once; Default 0  |\n| TEMP_HW_SHUTDOWN  | [31:2] Reserved field; Read only; Default 0  [1] Enable hardware shutdown on a critical temperature detection; Read-write; Default 0  |\n| CURRENT_TEMP  | [31:8] Reserved field; Read only; Default 0  [7:0] Current Temp 0-255 Centigrade; Read-only; Default 0  |"}, {"BodyText": "In this example note that only the CRITICAL_TEMP_LIMIT register is protected by the TEMP_SENSOR_LOCK bit, while the security design intent is to protect any modification of the critical temperature detection and response. \n\n\nThe response of the system, if the system heats to a critical temperature, is controlled by TEMP_HW_SHUTDOWN bit [1], which is not lockable. Also, the TEMP_SENSOR_CALIB register is not protected by the lock bit. \n\n\nBy modifying the temperature sensor calibration, the conversion of the sensor data to a degree centigrade can be changed, such that the current temperature will never be detected to exceed critical temperature value programmed by the protected lock. \n\n\nSimilarly, by modifying the TEMP_HW_SHUTDOWN.Enable bit, the system response detection of the current temperature exceeding critical temperature can be disabled."}, {"Nature": "Good", "ExampleCode": "Change TEMP_HW_SHUTDOWN and TEMP_SENSOR_CALIB controls to be locked by TEMP_SENSOR_LOCK. \n\n|  | \n|\n| TEMP_SENSOR_CALIB  | [31:0] Thermal sensor calibration data. A slope value used to map sensor reading to a degree Centigrade. Read-write-Lock; Default 25; Locked by TEMP_SENSOR_LOCK bit[0]   |\n| TEMP_HW_SHUTDOWN  | [31:2] Reserved field; Read only; Default 0  [1] Enable hardware shutdown on critical temperature detection; Read-write-Lock; Default 0; Locked by TEMP_SENSOR_LOCK bit[0]  |"}]}], "ObservedExamples": [{"Reference": "CVE-2018-9085", "Description": "Certain servers leave a write protection lock bit unset after boot, potentially allowing modification of parts of flash memory.", "Link": "https://www.cve.org/CVERecord?id=CVE-2018-9085"}, {"Reference": "CVE-2014-8273", "Description": "Chain: chipset has a race condition (CWE-362) between when an interrupt handler detects an attempt to write-enable the BIOS (in violation of the lock bit), and when the handler resets the write-enable bit back to 0, allowing attackers to issue BIOS writes during the timing window [REF-1237].", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-8273"}], "RelatedAttackPatterns": ["176", "680"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1234", "Name": "Hardware Internal or Debug Modes Allow Override of Locks", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "System configuration protection may be bypassed during debug mode.", "ExtendedDescription": "\n\nDevice configuration controls are commonly programmed after a device power reset by a trusted firmware or software module (e.g., BIOS/bootloader) and then locked from any further modification. This is commonly implemented using a trusted lock bit, which when set, disables writes to a protected set of registers or address regions. The lock protection is intended to prevent modification of certain system configuration (e.g., memory/memory protection unit configuration). If debug features supported by hardware or internal modes/system states are supported in the hardware design, modification of the lock protection may be allowed allowing access and modification of configuration information.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "667", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"], "Likelihood": ["High"], "Note": "Bypass of lock bit allows access and modification of system configuration even when the lock bit is set."}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation", "Testing"], "Description": "\n\n  - Security Lock bit protections should be reviewed for any bypass/override modes supported.\n\n  - Any supported override modes either should be removed or protected using authenticated debug modes.\n\n  - Security lock programming flow and lock properties should be tested in pre-silicon and post-silicon testing.\n\n", "Effectiveness": "High"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "For example, consider the example Locked_override_register example. This register module supports a lock mode that blocks any writes after lock is set to 1. \n However, it also allows override of the lock protection when scan_mode or debug_unlocked modes are active."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "module Locked_register_example\n (\n input [15:0] Data_in,\n input Clk,\n input resetn,\n input write,\n input Lock,\n input scan_mode,\n input debug_unlocked,\n output reg [15:0] Data_out\n );\n\n reg lock_status;\n\n always @(posedge Clk or negedge resetn)\n\n```\n\t if (~resetn) // Register is reset resetn\n\t begin\n\t\t lock_status <= 1'b0;\n\t end\n\t else if (Lock)\n\t begin\n\t\t lock_status <= 1'b1;\n\t end\n\t else if (~Lock)\n\t begin\n\t\t lock_status <= lock_status\n\t end\n always @(posedge Clk or negedge resetn)\n\t if (~resetn) // Register is reset resetn\n\t begin\n\t\t Data_out <= 16'h0000;\n\t end\n\t else if (write & (~lock_status | scan_mode | debug_unlocked) ) // Register protected by Lock bit input, overrides supported for scan_mode & debug_unlocked\n\t begin\n\t\t Data_out <= Data_in;\n\t end\n\t else if (~write)\n\t begin\n\t\t Data_out <= Data_out;\n\t end\n endmodule\n```"}, {"BodyText": "If either the scan_mode or the debug_unlocked modes can be triggered by software, then the lock protection may be bypassed."}, {"Nature": "Good", "ExampleCode": "Either remove the debug and scan mode overrides or protect enabling of these modes so that only trusted and authorized users may enable these modes."}]}, {"Entries": [{"IntroText": "The following example code [REF-1375] is taken from the register lock security peripheral of the HACK@DAC'21 buggy OpenPiton SoC. It demonstrates how to lock read or write access to security-critical hardware registers (e.g., crypto keys, system integrity code, etc.). The configuration to lock all the sensitive registers in the SoC is managed through the reglk_mem registers. These reglk_mem registers are reset when the hardware powers up and configured during boot up. Malicious users, even with kernel-level software privilege, do not get access to the sensitive contents that are locked down. Hence, the security of the entire system can potentially be compromised if the register lock configurations are corrupted or if the register locks are disabled."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "...\n always @(posedge clk_i)\n\n```\n\t begin\n```\nif(~(rst_ni && ~jtag_unlock && ~rst_9))** \n\t\t\n\t\t```\n\t\t\t begin\n\t\t\t\t for (j=0; j < 6; j=j+1) begin\n\t\t\t\t\t reglk_mem[j] <= 'h0;\n\t\t\t\t end\n\t\t\t end\n ...\n```"}, {"BodyText": "The example code [REF-1375] illustrates an instance of a vulnerable implementation of register locks in the SoC. In this flawed implementation [REF-1375], the reglk_mem registers are also being reset when the system enters debug mode (indicated by the jtag_unlock signal). Consequently, users can simply put the processor in debug mode to access sensitive contents that are supposed to be protected by the register lock feature."}, {"BodyText": "This can be mitigated by excluding debug mode signals from the reset logic of security-critical register locks as demonstrated in the following code snippet [REF-1376]."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "...\n always @(posedge clk_i)\n\n```\n\t begin\n```\nif(~(rst_ni && ~rst_9))** \n\t\t\n\t\t```\n\t\t\t begin\n\t\t\t\t for (j=0; j < 6; j=j+1) begin\n\t\t\t\t\t reglk_mem[j] <= 'h0;\n\t\t\t\t end\n\t\t\t end\n ...\n```"}]}], "RelatedAttackPatterns": ["176"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1235", "Name": "Incorrect Use of Autoboxing and Unboxing for Performance Critical Operations", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The code uses boxed primitives, which may introduce inefficiencies into performance-critical operations.", "ExtendedDescription": "\n\nLanguages such as Java and C# support automatic conversion through their respective compilers from primitive types into objects of the corresponding wrapper classes, and vice versa. For example, a compiler might convert an int to Integer (called autoboxing) or an Integer to int (called unboxing). This eliminates forcing the programmer to perform these conversions manually, which makes the code cleaner.\n\n\nHowever, this feature comes at a cost of performance and can lead to resource exhaustion and impact availability when used with generic collections. Therefore, they should not be used for scientific computing or other performance critical operations. They are only suited to support \"impedance mismatch\" between reference types and primitives.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "400", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C#", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "The programmer may use boxed primitives when not strictly necessary."}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)", "DoS: Resource Consumption (Other)", "Reduce Performance"], "Likelihood": ["Low"], "Note": "Incorrect autoboxing/unboxing would result in reduced performance, which sometimes can lead to resource consumption issues."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Use of boxed primitives should be limited to certain situations such as when calling methods with typed parameters. Examine the use of boxed primitives prior to use. Use SparseArrays or ArrayMap instead of HashMap to avoid performance overhead."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Java has a boxed primitive for each primitive type. A long can be represented with the boxed primitive Long. Issues arise where boxed primitives are used when not strictly necessary."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tLong count = 0L; \n\t for (long i = 0; i < Integer.MAX_VALUE; i++) { \n\t\t count += i; \n\t } \n```"}, {"BodyText": "In the above loop, we see that the count variable is declared as a boxed primitive. This causes autoboxing on the line that increments. This causes execution to be magnitudes less performant (time and possibly space) than if the \"long\" primitive was used to declare the count variable, which can impact availability of a resource."}]}, {"Entries": [{"IntroText": "This code uses primitive long which fixes the issue."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tlong count = 0L; \n\t for (long i = 0; i < Integer.MAX_VALUE; i++) { \n\t\t count += i; \n\t } \n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1236", "Name": "Improper Neutralization of Formula Elements in a CSV File", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product saves user-provided information into a Comma-Separated Value (CSV) file, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as a command when the file is opened by a spreadsheet product.", "ExtendedDescription": "User-provided data is often saved to traditional databases. This data can be exported to a CSV file, which allows users to read the data using spreadsheet software such as Excel, Numbers, or Calc. This software interprets entries beginning with '=' as formulas, which are then executed by the spreadsheet software. The software's formula language often allows methods to access hyperlinks or the local command line, and frequently allows enough characters to invoke an entire script. Attackers can populate data fields which, when saved to a CSV file, may attempt information exfiltration or other malicious activity when automatically executed by the spreadsheet software.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "74", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "74", "ViewID": "1003", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Other", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "CSV Injection"}, {"Term": "Formula Injection"}, {"Term": "Excel Macro Injection"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "The weakness is in the implementation of a software's CSV export feature, in particular how it formats formula entries as the output gets flattened into a text file."}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data", "Execute Unauthorized Code or Commands"], "Likelihood": ["Low"], "Note": "Current versions of Excel warn users of untrusted content."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "When generating CSV output, ensure that formula-sensitive metacharacters are effectively escaped or removed from all data before storage in the resultant CSV. Risky characters include '=' (equal), '+' (plus), '-' (minus), and '@' (at).", "Effectiveness": "Moderate", "EffectivenessNotes": "Unfortunately, there is no perfect solution, since different spreadsheet products act differently."}, {"Phase": ["Implementation"], "Description": "If a field starts with a formula character, prepend it with a ' (single apostrophe), which prevents Excel from executing the formula.", "Effectiveness": "Moderate", "EffectivenessNotes": "It is not clear how effective this mitigation is with other spreadsheet software."}, {"Phase": ["Architecture and Design"], "Description": "Certain implementations of spreadsheet software might disallow formulas from executing if the file is untrusted, or if the file is not authored by the current user.", "Effectiveness": "Limited", "EffectivenessNotes": "This mitigation has limited effectiveness because it often depends on end users opening spreadsheet software safely."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Hyperlinks or other commands can be executed when a cell begins with the formula identifier, '='"}, {"Nature": "Attack", "Language": "Other", "ExampleCode": "=HYPERLINK(link_location, [friendly_name])"}, {"BodyText": "Stripping the leading equals sign, or simply not executing formulas from untrusted sources, impedes malicious activity."}, {"Nature": "Good", "ExampleCode": "HYPERLINK(link_location, [friendly_name])"}]}], "ObservedExamples": [{"Reference": "CVE-2019-12134", "Description": "Low privileged user can trigger CSV injection through a contact form field value", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-12134"}, {"Reference": "CVE-2019-4521", "Description": "Cloud management product allows arbitrary command execution via CSV injection", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-4521"}, {"Reference": "CVE-2019-17661", "Description": "CSV injection in content management system via formula code in a first or last name", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-17661"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-27858", "Description": "CSV Injection vulnerability in Activity Log Team Activity Log <= 2.8.3 on WordPress. "}, {"Reference": "CVE-2022-1544", "Description": "Formula Injection/CSV Injection due to Improper Neutralization of Formula Elements in CSV File in GitHub repository luyadev/yii-helpers prior to 1.2.1. Successful exploitation can lead to impacts such as client-sided command injection, code execution, or remote ex-filtration of contained confidential data."}]}
{"ID": "1239", "Name": "Improper Zeroization of Hardware Register", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.", "ExtendedDescription": "Hardware logic operates on data stored in registers local to the hardware block. Most hardware IPs, including cryptographic accelerators, rely on registers to buffer I/O, store intermediate values, and interface with software. The result of this is that sensitive information, such as passwords or encryption keys, can exist in locations not transparent to the user of the hardware logic. When a different entity obtains access to the IP due to a change in operating mode or conditions, the new entity can extract information belonging to the previous user if no mechanisms are in place to clear register contents. It is important to clear information stored in the hardware if a physical attack on the product is detected, or if the user of the hardware block changes. The process of clearing register contents in a hardware IP is referred to as zeroization in standards for cryptographic hardware modules such as FIPS-140-2 [REF-267].", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "226", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "226", "ViewID": "1194", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "System on Chip", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "Lack of hardware mechanisms to zeroize or clear registers in the design or specification."}, {"Phase": "Implementation", "Note": "Mechanisms to zeroize and clear registers are in the design but implemented incorrectly."}, {"Phase": "Operation", "Note": "Hardware-provided zeroization mechanisms are not used appropriately by the IP user (ex. firmware), or data remanence issues are not taken into account."}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Varies by Context"], "Note": "The consequences will depend on the information disclosed due to the vulnerability."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Every register potentially containing sensitive information must have a policy specifying how and when information is cleared, in addition to clarifying if it is the responsibility of the hardware logic or IP user to initiate the zeroization procedure at the appropriate time.", "EffectivenessNotes": "Unfortunately, data disclosure can occur even after information has been overwritten/zeroized from the digital perspective. Physical characteristics of the memory can reveal the history of previously written data. For example, if the same value is written repeatedly to a memory location, the corresponding memory cells can become physically altered to a degree that even if the original data is erased it can still be recovered through physical characterization of the memory cells [REF-1055]."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Suppose a hardware IP for implementing an encryption routine works as expected, but it leaves the intermediate results in some registers that can be accessed. Exactly why this access happens is immaterial - it might be unintentional or intentional, where the designer wanted a \"quick fix\" for something."}]}, {"Entries": [{"IntroText": "The example code below [REF-1379] is taken from the SHA256 Interface/wrapper controller module of the HACK@DAC'21 buggy OpenPiton SoC. Within the wrapper module there are a set of 16 memory-mapped registers referenced data[0] to data[15]. These registers are 32 bits in size and are used to store the data received on the AXI Lite interface for hashing. Once both the message to be hashed and a request to start the hash computation are received, the values of these registers will be forwarded to the underlying SHA256 module for processing. Once forwarded, the values in these registers no longer need to be retained. In fact, if not cleared or overwritten, these sensitive values can be read over the AXI Lite interface, potentially compromising any previously confidential data stored therein."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "...\n\n```\n\t // Implement SHA256 I/O memory map interface\n\t // Write side\n\t always @(posedge clk_i)\n\t\t begin\n\t\t\t if(~(rst_ni && ~rst_3))\n\t\t\t\t begin\n\t\t\t\t\t startHash <= 0;\n\t\t\t\t\t newMessage <= 0;\n\t\t\t\t\t data[0] <= 0;\n\t\t\t\t\t data[1] <= 0;\n\t\t\t\t\t data[2] <= 0;\n\t\t\t\t\t ...\n\t\t\t\t\t data[14] <= 0;\n\t\t\t\t\t data[15] <= 0;\n ...\n```"}, {"BodyText": "In the previous code snippet [REF-1379] there is the lack of a data clearance mechanism for the memory-mapped I/O registers after their utilization. These registers get cleared only when a reset condition is met. This condition is met when either the global negative-edge reset input signal (rst_ni) or the dedicated reset input signal for SHA256 peripheral (rst_3) is active. In other words, if either of these reset signals is true, the registers will be cleared. However, in cases where there is not a reset condition these registers retain their values until the next hash operation. It is during the time between an old hash operation and a new hash operation that that data is open to unauthorized disclosure."}, {"BodyText": "To correct the issue of data persisting between hash operations, the memory mapped I/O registers need to be cleared once the values written in these registers are propagated to the SHA256 module. This could be done for example by adding a new condition to zeroize the memory mapped I/O registers once the hash value is computed, i.e., hashValid signal asserted, as shown in the good code example below [REF-1380]. This fix will clear the memory-mapped I/O registers after the data has been provided as input to the SHA engine."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "...\n\n```\n\t // Implement SHA256 I/O memory map interface\n\t // Write side\n\t always @(posedge clk_i)\n\t\t begin\n\t\t\t if(~(rst_ni && ~rst_3))\n\t\t\t\t begin\n\t\t\t\t\t startHash <= 0;\n\t\t\t\t\t newMessage <= 0;\n\t\t\t\t\t data[0] <= 0;\n\t\t\t\t\t data[1] <= 0;\n\t\t\t\t\t data[2] <= 0;\n\t\t\t\t\t ...\n\t\t\t\t\t data[14] <= 0;\n\t\t\t\t\t data[15] <= 0;\n\t\t\t\t end\n```\nelse if(hashValid && ~hashValid_r)** \n\t\t\t```\n```\nbegin** \n\t\t\t\t```\n```\ndata[0] <= 0;** \n\t\t\t\t\t\n\t\t\t\t\t **data[1] <= 0;** \n\t\t\t\t\t\n\t\t\t\t\t **data[2] <= 0;** \n\t\t\t\t\t\n\t\t\t\t\t **...** \n\t\t\t\t\t\n\t\t\t\t\t **data[14] <= 0;** \n\t\t\t\t\t\n\t\t\t\t\t **data[15] <= 0;** \n\t\t\t\t\t end\n\t\t\t\t ..."}]}], "RelatedAttackPatterns": ["150", "204", "37", "545"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "124", "Name": "Buffer Underwrite ('Buffer Underflow')", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product writes to a buffer using an index or pointer that references a memory location prior to the beginning of the buffer.", "ExtendedDescription": "This typically occurs when a pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "786", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "787", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "buffer underrun", "Description": "Some prominent vendors and researchers use the term \"buffer underrun\". \"Buffer underflow\" is more commonly used, although both terms are also sometimes used to describe a buffer under-read (CWE-127)."}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Availability"], "Impact": ["Modify Memory", "DoS: Crash, Exit, or Restart"], "Note": "Out of bounds memory access will very likely result in the corruption of relevant memory, and perhaps instructions, possibly leading to a crash."}, {"Scope": ["Integrity", "Confidentiality", "Availability", "Access Control", "Other"], "Impact": ["Execute Unauthorized Code or Commands", "Modify Memory", "Bypass Protection Mechanism", "Other"], "Note": "If the corrupted memory can be effectively controlled, it may be possible to execute arbitrary code. If the corrupted memory is data rather than instructions, the system will continue to function with improper changes, possibly in violation of an implicit or explicit policy. The consequences would only be limited by how the affected data is used, such as an adjacent memory location that is used to specify whether the user has special privileges."}, {"Scope": ["Access Control", "Other"], "Impact": ["Bypass Protection Mechanism", "Other"], "Note": "When the consequence is arbitrary code execution, this can often be used to subvert any other security service."}], "PotentialMitigations": [{"Phase": ["Requirements"], "Description": "Choose a language that is not susceptible to these issues."}, {"Phase": ["Implementation"], "Description": "All calculated values that are used as index or for pointer arithmetic should be validated to ensure that they are within an expected range."}], "DemonstrativeExamples": [{"ID": "DX-87", "Entries": [{"IntroText": "In the following C/C++ example, a utility function is used to trim trailing whitespace from a character string. The function copies the input string to a local character string and uses a while statement to remove the trailing whitespace by moving backward through the string and overwriting whitespace with a NUL character."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar* trimTrailingWhitespace(char *strMessage, int length) {\n\t\t\tchar *retMessage;\n\t\t\tchar *message = malloc(sizeof(char)*(length+1));\n```\n// copy input string to a temporary string* \n\t\t\tchar message[length+1];\n\t\t\tint index;\n\t\t\tfor (index = 0; index < length; index++) {\n\t\t\t```\n\t\t\t\tmessage[index] = strMessage[index];\n\t\t\t}\n\t\t\tmessage[index] = '\\0';\n```\n// trim trailing whitespace* \n\t\t\tint len = index-1;\n\t\t\twhile (isspace(message[len])) {\n\t\t\t```\n\t\t\t\tmessage[len] = '\\0';\n\t\t\t\tlen--;\n\t\t\t}\n```\n// return string without trailing whitespace* \n\t\t\tretMessage = message;\n\t\t\treturn retMessage;}"}, {"BodyText": "However, this function can cause a buffer underwrite if the input character string contains all whitespace. On some systems the while statement will move backwards past the beginning of a character string and will call the isspace() function on an address outside of the bounds of the local buffer."}]}, {"ID": "DX-88", "Entries": [{"IntroText": "The following is an example of code that may result in a buffer underwrite. This code is attempting to replace the substring \"Replace Me\" in destBuf with the string stored in srcBuf. It does so by using the function strstr(), which returns a pointer to the found substring in destBuf. Using pointer arithmetic, the starting index of the substring is found."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint main() { \n\t\t...\n\t\t char *result = strstr(destBuf, \"Replace Me\");\n\t\t int idx = result - destBuf;\n\t\t strcpy(&destBuf[idx], srcBuf);\n\t\t ...\n\t} \n```"}, {"BodyText": "In the case where the substring is not found in destBuf, strstr() will return NULL, causing the pointer arithmetic to be undefined, potentially setting the value of idx to a negative number. If idx is negative, this will result in a buffer underwrite of destBuf."}]}], "ObservedExamples": [{"Reference": "CVE-2021-24018", "Description": "buffer underwrite in firmware verification routine allows code execution via a crafted firmware image", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-24018"}, {"Reference": "CVE-2002-2227", "Description": "Unchecked length of SSLv2 challenge value leads to buffer underflow.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2227"}, {"Reference": "CVE-2007-4580", "Description": "Buffer underflow from a small size value with a large buffer (length parameter inconsistency, CWE-130)", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-4580"}, {"Reference": "CVE-2007-1584", "Description": "Buffer underflow from an all-whitespace string, which causes a counter to be decremented before the buffer while looking for a non-whitespace character.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1584"}, {"Reference": "CVE-2007-0886", "Description": "Buffer underflow resultant from encoded data that triggers an integer overflow.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0886"}, {"Reference": "CVE-2006-6171", "Description": "Product sets an incorrect buffer size limit, leading to \"off-by-two\" buffer underflow.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6171"}, {"Reference": "CVE-2006-4024", "Description": "Negative value is used in a memcpy() operation, leading to buffer underflow.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4024"}, {"Reference": "CVE-2004-2620", "Description": "Buffer underflow due to mishandled special characters", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2620"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This could be resultant from several errors, including a bad offset or an array index that decrements before the beginning of the buffer (see CWE-129)."}], "Top25Examples": [{"Reference": "CVE-2021-24018", "Description": "A buffer underwrite vulnerability in the firmware verification routine of FortiOS before 7.0.1 may allow an attacker located in the adjacent network to potentially execute arbitrary code via a specifically crafted firmware image."}, {"Reference": "CVE-2022-29777", "Description": "Onlyoffice Document Server v6.0.0 and below and Core 6.1.0.26 and below were discovered to contain a heap overflow via the component DesktopEditor/fontengine/fontconverter/FontFileBase.h."}, {"Reference": "CVE-2022-3296", "Description": "Stack-based Buffer Overflow in GitHub repository vim/vim prior to 9.0.0577."}, {"Reference": "CVE-2022-46881", "Description": "An optimization in WebGL was incorrect in some cases, and could have led to memory corruption and a potentially exploitable crash. *Note*: This advisory was added on December 13th, 2022 after we better understood the impact of the issue. The fix was included in the original release of Firefox 106. This vulnerability affects Firefox < 106, Firefox ESR < 102.6, and Thunderbird < 102.6."}, {"Reference": "CVE-2022-20683", "Description": "A vulnerability in the Application Visibility and Control (AVC-FNF) feature of Cisco IOS XE Software for Cisco Catalyst 9800 Series Wireless Controllers could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition on an affected device. This vulnerability is due to insufficient packet verification for traffic inspected by the AVC feature. An attacker could exploit this vulnerability by sending crafted packets from the wired network to a wireless client, resulting in the crafted packets being processed by the wireless controller. A successful exploit could allow the attacker to cause a crash and reload of the affected device, resulting in a DoS condition."}]}
{"ID": "1240", "Name": "Use of a Cryptographic Primitive with a Risky Implementation", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "To fulfill the need for a cryptographic primitive, the product implements a cryptographic algorithm using a non-standard, unproven, or disallowed/non-compliant cryptographic implementation.", "ExtendedDescription": "\n\nCryptographic protocols and systems depend on cryptographic primitives (and associated algorithms) as their basic building blocks. Some common examples of primitives are digital signatures, one-way hash functions, ciphers, and public key cryptography; however, the notion of \"primitive\" can vary depending on point of view. See \"Terminology Notes\" for further explanation of some concepts.\n\n\nCryptographic primitives are defined to accomplish one very specific task in a precisely defined and mathematically reliable fashion. For example, suppose that for a specific cryptographic primitive (such as an encryption routine), the consensus is that the primitive can only be broken after trying out N different inputs (where the larger the value of N, the stronger the cryptography). For an encryption scheme like AES-256, one would expect N to be so large as to be infeasible to execute in a reasonable amount of time.\n\n\nIf a vulnerability is ever found that shows that one can break a cryptographic primitive in significantly less than the expected number of attempts, then that primitive is considered weakened (or sometimes in extreme cases, colloquially it is \"broken\"). As a result, anything using this cryptographic primitive would now be considered insecure or risky. Thus, even breaking or weakening a seemingly small cryptographic primitive has the potential to render the whole system vulnerable, due to its reliance on the primitive. A historical example can be found in TLS when using DES. One would colloquially call DES the cryptographic primitive for transport encryption in this version of TLS. In the past, DES was considered strong, because no weaknesses were found in it; importantly, DES has a key length of 56 bits. Trying N=2^56 keys was considered impractical for most actors. Unfortunately, attacking a system with 56-bit keys is now practical via brute force, which makes defeating DES encryption practical. It is now practical for an adversary to read any information sent under this version of TLS and use this information to attack the system. As a result, it can be claimed that this use of TLS is weak, and that any system depending on TLS with DES could potentially render the entire system vulnerable to attack.\n\n\nCryptographic primitives and associated algorithms are only considered safe after extensive research and review from experienced cryptographers from academia, industry, and government entities looking for any possible flaws. Furthermore, cryptographic primitives and associated algorithms are frequently reevaluated for safety when new mathematical and attack techniques are discovered. As a result and over time, even well-known cryptographic primitives can lose their compliance status with the discovery of novel attacks that might either defeat the algorithm or reduce its robustness significantly.\n\n\nIf ad-hoc cryptographic primitives are implemented, it is almost certain that the implementation will be vulnerable to attacks that are well understood by cryptographers, resulting in the exposure of sensitive information and other consequences.\n\n\nThis weakness is even more difficult to manage for hardware-implemented deployment of cryptographic algorithms. First, because hardware is not patchable as easily as software, any flaw discovered after release and production typically cannot be fixed without a recall of the product. Secondly, the hardware product is often expected to work for years, during which time computation power available to the attacker only increases. Therefore, for hardware implementations of cryptographic primitives, it is absolutely essential that only strong, proven cryptographic primitives are used.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "327", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "System on Chip", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "This weakness is primarily introduced during the architecture and design phase as risky primitives are included."}, {"Phase": "Implementation", "Note": "Even in cases where the Architectural phase properly specifies a cryptographically secure design, the design may be changed during implementation due to unforeseen constraints."}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Likelihood": ["High"], "Note": "Incorrect usage of crypto primitives could render the supposedly encrypted data as unencrypted plaintext in the worst case."}], "DetectionMethods": [{"Method": "Architecture or Design Review", "Description": "Review requirements, documentation, and product design to ensure that primitives are consistent with the strongest-available recommendations from trusted parties. If the product appears to be using custom or proprietary implementations that have not had sufficient public review and approval, then this is a significant concern.", "Effectiveness": "High"}, {"Method": "Manual Analysis", "Description": "Analyze the product to ensure that implementations for each primitive do not contain any known vulnerabilities and are not using any known-weak algorithms, including MD4, MD5, SHA1, DES, etc.", "Effectiveness": "Moderate"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "For hardware, during the implementation (pre-Silicon / post-Silicon) phase, dynamic tests should be done to ensure that outputs from cryptographic routines are indeed working properly, such as test vectors provided by NIST [REF-1236].", "Effectiveness": "Moderate"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "It needs to be determined if the output of a cryptographic primitive is lacking entropy, which is one clear sign that something went wrong with the crypto implementation. There exist many methods of measuring the entropy of a bytestream, from sophisticated ones (like calculating Shannon's entropy of a sequence of characters) to crude ones (by compressing it and comparing the size of the original bytestream vs. the compressed - a truly random byte stream should not be compressible and hence the uncompressed and compressed bytestreams should be nearly identical in size).", "Effectiveness": "Moderate"}], "PotentialMitigations": [{"MitigationID": "MIT-55", "Phase": ["Requirements"], "Description": "Require compliance with the strongest-available recommendations from trusted parties, and require that compliance must be kept up-to-date, since recommendations evolve over time. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].", "Effectiveness": "High"}, {"Phase": ["Architecture and Design"], "Description": "Ensure that the architecture/design uses the strongest-available primitives and algorithms from trusted parties. For example, US government systems require FIPS 140-3 certification, which supersedes FIPS 140-2 [REF-1192] [REF-1226].", "Effectiveness": "High"}, {"MitigationID": "MIT-54", "Phase": ["Architecture and Design"], "Description": "Do not develop custom or private cryptographic algorithms. They will likely be exposed to attacks that are well-understood by cryptographers. As with all cryptographic mechanisms, the source code should be available for analysis. If the algorithm may be compromised when attackers find out how it works, then it is especially weak.", "Effectiveness": "Discouraged Common Practice"}, {"Phase": ["Architecture and Design"], "Description": "Try not to use cryptographic algorithms in novel ways or with new modes of operation even when you \"know\" it is secure. For example, using SHA-2 chaining to create a 1-time pad for encryption might sound like a good idea, but one should not do this.", "Effectiveness": "Discouraged Common Practice"}, {"MitigationID": "MIT-52", "Phase": ["Architecture and Design"], "Description": "Ensure that the design can replace one cryptographic primitive or algorithm with another in the next generation (\"cryptographic agility\"). Where possible, use wrappers to make the interfaces uniform. This will make it easier to upgrade to stronger algorithms. This is especially important for hardware, which can be more difficult to upgrade quickly than software; design the hardware at a replaceable block level.", "Effectiveness": "Defense in Depth"}, {"Phase": ["Architecture and Design"], "Description": "Do not use outdated or non-compliant cryptography algorithms. Some older algorithms, once thought to require a billion years of computing time, can now be broken in days or hours. This includes MD4, MD5, SHA1, DES, and other algorithms that were once regarded as strong [REF-267].", "Effectiveness": "Discouraged Common Practice"}, {"Phase": ["Architecture and Design", "Implementation"], "Description": "Do not use a linear-feedback shift register (LFSR) or other legacy methods as a substitute for an accepted and standard Random Number Generator.", "Effectiveness": "Discouraged Common Practice"}, {"Phase": ["Architecture and Design", "Implementation"], "Description": "Do not use a checksum as a substitute for a cryptographically generated hash.", "Effectiveness": "Discouraged Common Practice"}, {"Phase": ["Architecture and Design"], "Strategy": "Libraries or Frameworks", "Description": "Use a vetted cryptographic library or framework. Industry-standard implementations will save development time and are more likely to avoid errors that can occur during implementation of cryptographic algorithms. However, the library/framework could be used incorrectly during implementation.", "Effectiveness": "High"}, {"Phase": ["Architecture and Design", "Implementation"], "Description": "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for the prevention of common attacks.", "Effectiveness": "Moderate"}, {"Phase": ["Architecture and Design", "Implementation"], "Description": "Do not store keys in areas accessible to untrusted agents. Carefully manage and protect the cryptographic keys (see CWE-320). If the keys can be guessed or stolen, then the strength of the cryptography algorithm is irrelevant.", "Effectiveness": "Moderate"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Re-using random values may compromise security."}, {"Nature": "Bad", "ExampleCode": "Suppose an Encryption algorithm needs a random value for a key. Instead of using a DRNG (Deterministic Random Number Generator), the designer uses a linear-feedback shift register (LFSR) to generate the value."}, {"BodyText": "While an LFSR may provide pseudo-random number generation service, the entropy (measure of randomness) of the resulting output may be less than that of an accepted DRNG (like that used in dev/urandom). Thus, using an LFSR weakens the strength of the cryptographic system, because it may be possible for an attacker to guess the LFSR output and subsequently the encryption key."}, {"Nature": "Good", "ExampleCode": "If a cryptographic algorithm expects a random number as its input, provide one. Do not provide a pseudo-random value."}]}], "ObservedExamples": [{"Reference": "CVE-2020-4778", "Description": "software uses MD5, which is less safe than the default SHA-256 used by related products", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-4778"}, {"Reference": "CVE-2005-2946", "Description": "Default configuration of product uses MD5 instead of stronger algorithms that are available, simplifying forgery of certificates.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2946"}, {"Reference": "CVE-2019-3907", "Description": "identity card uses MD5 hash of a salt and password", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-3907"}, {"Reference": "CVE-2021-34687", "Description": "personal key is transmitted over the network using a substitution cipher", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-34687"}, {"Reference": "CVE-2020-14254", "Description": "product does not disable TLS-RSA cipher suites, allowing decryption of traffic if TLS 2.0 and secure ciphers are not enabled.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-14254"}, {"Reference": "CVE-2019-1543", "Description": "SSL/TLS library generates 16-byte nonces but reduces them to 12 byte nonces for the ChaCha20-Poly1305 cipher, converting them in a way that violates the cipher's requirements for unique nonces.", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-1543"}, {"Reference": "CVE-2017-9267", "Description": "LDAP interface allows use of weak ciphers", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-9267"}, {"Reference": "CVE-2017-7971", "Description": "SCADA product allows \"use of outdated cipher suites\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-7971"}, {"Reference": "CVE-2020-6616", "Description": "Chip implementing Bluetooth uses a low-entropy PRNG instead of a hardware RNG, allowing spoofing.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-6616"}, {"Reference": "CVE-2019-1715", "Description": "security product has insufficient entropy in the DRBG, allowing collisions and private key discovery", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-1715"}, {"Reference": "CVE-2014-4192", "Description": "Dual_EC_DRBG implementation in RSA toolkit does not correctly handle certain byte requests, simplifying plaintext recovery", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-4192"}, {"Reference": "CVE-2007-6755", "Description": "Recommendation for Dual_EC_DRBG algorithm contains point Q constants that could simplify decryption", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-6755"}], "RelatedAttackPatterns": ["97"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Terminology", "Note": "\n\n Terminology for cryptography varies widely, from informal and colloquial to mathematically-defined, with different precision and formalism depending on whether the stakeholder is a developer, cryptologist, etc. Yet there is a need for CWE to be self-consistent while remaining understandable and acceptable to multiple audiences.\n\n\nAs of CWE 4.6, CWE terminology around \"primitives\" and \"algorithms\" is emerging as shown by the following example, subject to future consultation and agreement within the CWE and cryptography communities. Suppose one wishes to send encrypted data using a CLI tool such as OpenSSL. One might choose to use AES with a 256-bit key and require tamper protection (GCM mode, for instance). For compatibility's sake, one might also choose the ciphertext to be formatted to the PKCS#5 standard. In this case, the \"cryptographic system\" would be AES-256-GCM with PKCS#5 formatting. The \"cryptographic function\" would be AES-256 in the GCM mode of operation, and the \"algorithm\" would be AES. Colloquially, one would say that AES (and sometimes AES-256) is the \"cryptographic primitive,\" because it is the algorithm that realizes the concept of symmetric encryption (without modes of operation or other protocol related modifications). In practice, developers and architects typically refer to base cryptographic algorithms (AES, SHA, etc.) as cryptographic primitives.\n"}, {"Type": "Maintenance", "Note": "Since CWE 4.4, various cryptography-related entries, including CWE-327 and CWE-1240, have been slated for extensive research, analysis, and community consultation to define consistent terminology, improve relationships, and reduce overlap or duplication. As of CWE 4.6, this work is still ongoing."}]}
{"ID": "1241", "Name": "Use of Predictable Algorithm in Random Number Generator", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The device uses an algorithm that is predictable and generates a pseudo-random number.", "ExtendedDescription": "\n\nPseudo-random number generator algorithms are predictable because their registers have a finite number of possible states, which eventually lead to repeating patterns. As a result, pseudo-random number generators (PRNGs) can compromise their randomness or expose their internal state to various attacks, such as reverse engineering or tampering. It is highly recommended to use hardware-based true random number generators (TRNGs) to ensure the security of encryption schemes. TRNGs generate unpredictable, unbiased, and independent random numbers because they employ physical phenomena, e.g., electrical noise, as sources to generate random numbers.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "330", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Technology", "Class": "System on Chip", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "In many cases, the design originally defines a cryptographically secure random number generator, but is then changed during implementation due to unforeseen constraints."}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Likelihood": ["High"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "A true random number generator should be specified for cryptographic algorithms."}, {"Phase": ["Implementation"], "Description": "A true random number generator should be implemented for cryptographic algorithms."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Suppose a cryptographic function expects random value to be supplied for the crypto algorithm."}, {"BodyText": "During the implementation phase, due to space constraint, a cryptographically secure random-number-generator could not be used, and instead of using a TRNG (True Random Number Generator), a LFSR (Linear Feedback Shift Register) is used to generate a random value. While an LFSR will provide a pseudo-random number, its entropy (measure of randomness) is insufficient for a cryptographic algorithm."}]}, {"Entries": [{"IntroText": "The example code is taken from the PRNG inside the buggy OpenPiton SoC of HACK@DAC'21 [REF-1370]. The SoC implements a pseudo-random number generator using a Linear Feedback Shift Register (LFSR)."}, {}, {"BodyText": "An example of LFSR with the polynomial function P(x) = x\n6+x\n4+x\n3+1 is shown in the figure."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "**reg in_sr, entropy16_valid;** \n\n **reg [15:0] entropy16;** \n\n\n **assign entropy16_o = entropy16;** \n\n **assign entropy16_valid_o = entropy16_valid;** \n\n\n **always @ (*)** \n\n **begin** \n\n```\n```\nin_sr = ^ (poly_i [15:0] & entropy16 [15:0]);** \n\t\n **end**"}, {"BodyText": "A LFSR's input bit is determined by the output of a linear function of two or more of its previous states. Therefore, given a long cycle, a LFSR-based PRNG will enter a repeating cycle, which is predictable."}]}], "ObservedExamples": [{"Reference": "CVE-2021-3692", "Description": "PHP framework uses mt_rand() function (Marsenne Twister) when generating tokens", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-3692"}], "RelatedAttackPatterns": ["97"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "As of CWE 4.5, terminology related to randomness, entropy, and predictability can vary widely. Within the developer and other communities, \"randomness\" is used heavily. However, within cryptography, \"entropy\" is distinct, typically implied as a measurement. There are no commonly-used definitions, even within standards documents and cryptography papers. Future versions of CWE will attempt to define these terms and, if necessary, distinguish between them in ways that are appropriate for different communities but do not reduce the usability of CWE for mapping, understanding, or other scenarios."}], "Top25Examples": [{"Reference": "CVE-2021-4240", "Description": "A vulnerability, which was classified as problematic, was found in phpservermon. This affects the function generatePasswordResetToken of the file src/psm/Service/User.php. The manipulation leads to use of predictable algorithm in random number generator. The exploit has been disclosed to the public and may be used. The name of the patch is 3daa804d5f56c55b3ae13bfac368bb84ec632193. It is recommended to apply a patch to fix this issue. The identifier VDB-213717 was assigned to this vulnerability."}, {"Reference": "CVE-2021-4241", "Description": "A vulnerability, which was classified as problematic, was found in phpservermon. Affected is the function setUserLoggedIn of the file src/psm/Service/User.php. The manipulation leads to use of predictable algorithm in random number generator. The exploit has been disclosed to the public and may be used. The name of the patch is bb10a5f3c68527c58073258cb12446782d223bc3. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-213744."}]}
{"ID": "1242", "Name": "Inclusion of Undocumented Features or Chicken Bits", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The device includes chicken bits or undocumented features that can create entry points for unauthorized actors.", "ExtendedDescription": "\n\nA common design practice is to use undocumented bits on a device that can be used to disable certain functional security features. These bits are commonly referred to as \"chicken bits\". They can facilitate quick identification and isolation of faulty components, features that negatively affect performance, or features that do not provide the required controllability for debug and test. Another way to achieve this is through implementation of undocumented features. An attacker might exploit these interfaces for unauthorized access.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "284", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "ICS/OT", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}, {"Phase": "Documentation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control"], "Impact": ["Modify Memory", "Read Memory", "Execute Unauthorized Code or Commands", "Gain Privileges or Assume Identity", "Bypass Protection Mechanism"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "\n\nThe implementation of chicken bits in a released product is highly discouraged. If implemented at all, ensure that they are disabled in production devices. All interfaces to a device should be documented.\n", "Effectiveness": "High"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Consider a device that comes with various security measures, such as secure boot. The secure-boot process performs firmware-integrity verification at boot time, and this code is stored in a separate SPI-flash device. However, this code contains undocumented \"special access features\" intended to be used only for performing failure analysis and intended to only be unlocked by the device designer."}, {"Nature": "Bad", "Language": "Other", "ExampleCode": "```\n\tAttackers dump the code from the device and then perform reverse engineering to analyze the code. The undocumented, special-access features are identified, and attackers can activate them by sending specific commands via UART before secure-boot phase completes. Using these hidden features, attackers can perform reads and writes to memory via the UART interface. At runtime, the attackers can also execute arbitrary code and dump the entire memory contents.\n```"}, {"BodyText": "Remove all chicken bits and hidden features that are exposed to attackers. Add authorization schemes that rely on cryptographic primitives to access any features that the manufacturer does not want to expose. Clearly document all interfaces."}]}], "RelatedAttackPatterns": ["212", "36"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-38372", "Description": "A hidden functionality vulnerability [CWE-1242] in FortiTester CLI 2.3.0 through 3.9.1, 4.0.0 through 4.2.0, 7.0.0 through 7.1.0 may allow a local, privileged user to obtain a root shell on the device via an undocumented command."}]}
{"ID": "1243", "Name": "Sensitive Non-Volatile Information Not Protected During Debug", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "Access to security-sensitive information stored in fuses is not limited during debug.", "ExtendedDescription": "\n\nSeveral security-sensitive values are programmed into fuses to be used during early-boot flows or later at runtime. Examples of these security-sensitive values include root keys, encryption keys, manufacturing-specific information, chip-manufacturer-specific information, and original-equipment-manufacturer (OEM) data. After the chip is powered on, these values are sensed from fuses and stored in temporary locations such as registers and local memories. These locations are typically access-control protected from untrusted agents capable of accessing them. Even to trusted agents, only read-access is provided. However, these locations are not blocked during debug operations, allowing a user to access this sensitive information.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1263", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Access Control"], "Impact": ["Modify Memory", "Bypass Protection Mechanism"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "\n\nDisable access to security-sensitive information stored in fuses directly and also reflected from temporary storage locations when in debug mode.\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Sensitive manufacturing data (such as die information) are stored in fuses. When the chip powers on, these values are read from the fuses and stored in microarchitectural registers. These registers are only given read access to trusted software running on the core. Untrusted software running on the core is not allowed to access these registers."}, {"Nature": "Bad", "Language": "Other", "ExampleCode": "```\n\tAll microarchitectural registers in this chip can be accessed through the debug interface. As a result, even an untrusted debugger can access this data and retrieve sensitive manufacturing data.\n```"}, {"Nature": "Good", "ExampleCode": "```\n\tRegisters used to store sensitive values read from fuses should be blocked during debug. These registers should be disconnected from the debug interface.\n```"}]}, {"Entries": [{"IntroText": "The example code below is taken from one of the AES cryptographic accelerators of the HACK@DAC'21 buggy OpenPiton SoC [REF-1366]. The operating system (OS) uses three AES keys to encrypt and decrypt sensitive data using this accelerator. These keys are sensitive data stored in fuses. The security of the OS will be compromised if any of these AES keys are leaked. During system bootup, these AES keys are sensed from fuses and stored in temporary hardware registers of the AES peripheral. Access to these temporary registers is disconnected during the debug state to prevent them from leaking through debug access. In this example (see the vulnerable code source), the registers key0, key1, and key2 are used to store the three AES keys (which are accessed through key_big0, key_big1, and key_big2 signals). The OS selects one of these three keys through the key_big signal, which is used by the AES engine."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "...\n assign key_big0 = debug_mode_i ? 192'b0 : {key0[0],\n key0[1], key0[2], key0[3], key0[4], key0[5]};\n\n assign key_big1 = debug_mode_i ? 192'b0 : {key1[0],\n key1[1], key1[2], key1[3], key1[4], key1[5]};\n\n\n **assign key_big2 = {key2[0], key2[1], key2[2],** \n\n **key2[3], key2[4], key2[5]};** \n ...\n\n **assign key_big = key_sel[1] ? key_big2 : ( key_sel[0] ?** \n\n **key_big1 : key_big0 );** \n ..."}, {"BodyText": "The above code illustrates an instance of a vulnerable implementation for blocking AES key mechanism when the system is in debug mode (i.e., when debug_mode_i is asserted). During debug mode, key accesses through key_big0 and key_big1 are effectively disconnected, as their values are set to zero. However, the key accessed via the key_big2 signal remains accessible, creating a potential pathway for sensitive fuse data leakage, specifically AES key2, during debug mode. Furthermore, even though it is not strictly necessary to disconnect the key_big signal when entering debug mode (since disconnecting key_big0, key_big1, and key_big2 will inherently disconnect key_big), it is advisable, in line with the defense-in-depth strategy, to also sever the connection to key_big. This additional security measure adds an extra layer of protection and safeguards the AES keys against potential future modifications to the key_big logic."}, {"BodyText": "To mitigate this, disconnect access through key_big2 and key_big during debug mode [REF-1367]."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "...\n assign key_big0 = debug_mode_i ? 192'b0 : {key0[0],\n key0[1], key0[2], key0[3], key0[4], key0[5]};\n\n assign key_big1 = debug_mode_i ? 192'b0 : {key1[0],\n key1[1], key1[2], key1[3], key1[4], key1[5]}; \n\n assign key_big2 = \n **debug_mode_i ? 192'b0 :**  {key2[0],\n key2[1], key2[2], key2[3], key2[4], key2[5]};\n ...\n assign key_big = \n **debug_mode_i ? 192'b0 :**  ( key_sel[1] ?\n key_big2 : ( key_sel[0] ? key_big1 : key_big0 ) );\n ..."}]}], "RelatedAttackPatterns": ["116", "545"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1244", "Name": "Internal Asset Exposed to Unsafe Debug Access Level or State", "Abstraction": "Base", "Structure": "Simple", "Status": "Stable", "Description": "The product uses physical debug or test\n        interfaces with support for multiple access levels, but it\n        assigns the wrong debug access level to an internal asset,\n        providing unintended access to the asset from untrusted debug\n        agents.", "ExtendedDescription": "\n\nDebug authorization can have multiple levels of access, defined such that different system internal assets are accessible based on the current authorized debug level. Other than debugger authentication (e.g., using passwords or challenges), the authorization can also be based on the system state or boot stage. For example, full system debug access might only be allowed early in boot after a system reset to ensure that previous session data is not accessible to the authenticated debugger.\n\n\nIf this protection mechanism does not ensure that internal assets have the correct debug access level during each boot stage or change in system state, an attacker could obtain sensitive information from the internal asset using a debugger.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "863", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "System on Chip", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Memory"]}, {"Scope": ["Integrity"], "Impact": ["Modify Memory"]}, {"Scope": ["Authorization", "Access Control"], "Impact": ["Gain Privileges or Assume Identity", "Bypass Protection Mechanism"]}], "DetectionMethods": [{"Method": "Manual Analysis", "Description": "Check 2 devices for their passcode to authenticate access to JTAG/debugging ports. If the passcodes are missing or the same, update the design to fix and retest. Check communications over JTAG/debugging ports for encryption. If the communications are not encrypted, fix the design and retest.", "Effectiveness": "Moderate"}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "\n\nFor security-sensitive assets accessible over debug/test interfaces, only allow trusted agents.\n", "Effectiveness": "High"}, {"Phase": ["Architecture and Design"], "Description": "Apply blinding [REF-1219] or masking techniques in strategic areas.", "Effectiveness": "Limited"}, {"Phase": ["Implementation"], "Description": "Add shielding or tamper-resistant protections to the device, which increases the difficulty and cost for accessing debug/test interfaces.", "Effectiveness": "Limited"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The JTAG interface is used to perform debugging and provide CPU core access for developers. JTAG-access protection is implemented as part of the JTAG_SHIELD bit in the hw_digctl_ctrl register. This register has no default value at power up and is set only after the system boots from ROM and control is transferred to the user software."}, {"Nature": "Bad", "Language": "Other", "ExampleCode": "|  | \n|\n| 1 bit | 0x0 = JTAG debugger is enabled (default)  |\n| JTAG_SHIELD | 0x1 = JTAG debugger is disabled  |"}, {"BodyText": "This means that since the end user has access to JTAG at system reset and during ROM code execution before control is transferred to user software, a JTAG user can modify the boot flow and subsequently disclose all CPU information, including data-encryption keys."}, {"Nature": "Informative", "ExampleCode": "```\n\tThe default value of this register bit should be set to 1 to prevent the JTAG from being enabled at system reset.\n```"}]}, {"Entries": [{"IntroText": "The example code below is taken from the CVA6 processor core of the HACK@DAC'21 buggy OpenPiton SoC. Debug access allows users to access internal hardware registers that are otherwise not exposed for user access or restricted access through access control protocols. Hence, requests to enter debug mode are checked and authorized only if the processor has sufficient privileges. In addition, debug accesses are also locked behind password checkers. Thus, the processor enters debug mode only when the privilege level requirement is met, and the correct debug password is provided."}, {"BodyText": "The following code [REF-1377] illustrates an instance of a vulnerable implementation of debug mode. The core correctly checks if the debug requests have sufficient privileges and enables the debug_mode_d and debug_mode_q signals. It also correctly checks for debug password and enables umode_i signal."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "module csr_regfile #(\n ...\n\n```\n\t // check that we actually want to enter debug depending on the privilege level we are currently in\n\t unique case (priv_lvl_o)\n\t\t riscv::PRIV_LVL_M: begin\n\t\t\t debug_mode_d = dcsr_q.ebreakm;\n ...\n\t\t riscv::PRIV_LVL_U: begin\n\t\t\t debug_mode_d = dcsr_q.ebreaku;\n ...\n```\nassign priv_lvl_o = (debug_mode_q || umode_i) ? riscv::PRIV_LVL_M : priv_lvl_q;** \n\t ...\n\n```\n\t debug_mode_q <= debug_mode_d;\n ...\n```"}, {"BodyText": "However, it grants debug access and changes the privilege level, priv_lvl_o, even when one of the two checks is satisfied and the other is not. Because of this, debug access can be granted by simply requesting with sufficient privileges (i.e., debug_mode_q is enabled) and failing the password check (i.e., umode_i is disabled). This allows an attacker to bypass the debug password checking and gain debug access to the core, compromising the security of the processor."}, {"BodyText": "A fix to this issue is to only change the privilege level of the processor when both checks are satisfied, i.e., the request has enough privileges (i.e., debug_mode_q is enabled) and the password checking is successful (i.e., umode_i is enabled) [REF-1378]."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "module csr_regfile #(\n ...\n\n```\n\t // check that we actually want to enter debug depending on the privilege level we are currently in\n\t unique case (priv_lvl_o)\n\t\t riscv::PRIV_LVL_M: begin\n\t\t\t debug_mode_d = dcsr_q.ebreakm;\n ...\n\t\t riscv::PRIV_LVL_U: begin\n\t\t\t debug_mode_d = dcsr_q.ebreaku;\n ...\n\t assign priv_lvl_o = \n```\n(debug_mode_q && umode_i) ? riscv::PRIV_LVL_M : priv_lvl_q;** \n\t ...\n\n```\n\t debug_mode_q <= debug_mode_d;\n ...\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2019-18827", "Description": "After ROM code execution, JTAG access is disabled. But before the ROM code is executed, JTAG access is possible, allowing a user full system access. This allows a user to modify the boot flow and successfully bypass the secure-boot process.", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-18827"}], "RelatedAttackPatterns": ["114"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "CWE-1191 and CWE-1244 both involve physical debug access, but the weaknesses are different. CWE-1191 is effectively about missing authorization for a debug interface, i.e. JTAG. CWE-1244 is about providing internal assets with the wrong debug access level, exposing the asset to untrusted debug agents."}], "Top25Examples": [{"Reference": "CVE-2022-32259", "Description": "A vulnerability has been identified in SINEMA Remote Connect Server (All versions < V3.1). The system images for installation or update of the affected application contain unit test scripts with sensitive information. An attacker could gain information about testing architecture and also tamper with test configuration."}]}
{"ID": "1245", "Name": "Improper Finite State Machines (FSMs) in Hardware Logic", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "Faulty finite state machines (FSMs) in the hardware logic allow an attacker to put the system in an undefined state, to cause a denial of service (DoS) or gain privileges on the victim's system.", "ExtendedDescription": "\n\nThe functionality and security of the system heavily depend on the implementation of FSMs. FSMs can be used to indicate the current security state of the system. Lots of secure data operations and data transfers rely on the state reported by the FSM. Faulty FSM designs that do not account for all states, either through undefined states (left as don't cares) or through incorrect implementation, might lead an attacker to drive the system into an unstable state from which the system cannot recover without a reset, thus causing a DoS. Depending on what the FSM is used for, an attacker might also gain additional privileges to launch further attacks and compromise the security guarantees.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "684", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "System on Chip", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability", "Access Control"], "Impact": ["Unexpected State", "DoS: Crash, Exit, or Restart", "DoS: Instability", "Gain Privileges or Assume Identity"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "Define all possible states and handle all unused states through default statements. Ensure that system defaults to a secure state.", "Effectiveness": "High"}], "DemonstrativeExamples": [{"ID": "DX-152", "Entries": [{"IntroText": "The Finite State Machine (FSM) shown in the \"bad\" code snippet below assigns the output (\"out\") based on the value of state, which is determined based on the user provided input (\"user_input\")."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "```\n\tmodule fsm_1(out, user_input, clk, rst_n); \n\tinput [2:0] user_input; \n\tinput clk, rst_n; \n\toutput reg [2:0] out; \n\treg [1:0] state; \n\talways @ (posedge clk or negedge rst_n ) \n\t\tbegin \n\t\t\t if (!rst_n)\n\t\t\t\t state = 3'h0; \n\t\t\t else\n\t\t\t case (user_input) \n\t\t\t\t 3'h0:\n\t\t\t\t 3'h1:\n\t\t\t\t 3'h2:\n\t\t\t\t 3'h3: state = 2'h3;\n\t\t\t\t 3'h4: state = 2'h2;\n\t\t\t\t 3'h5: state = 2'h1;\n\t\t\t endcase \n\t\t end\n\t\t out <= {1'h1, state};\n\t endmodule \n```"}, {"BodyText": "The case statement does not include a default to handle the scenario when the user provides inputs of 3'h6 and 3'h7. Those inputs push the system to an undefined state and might cause a crash (denial of service) or any other unanticipated outcome.\n\n\nAdding a default statement to handle undefined inputs mitigates this issue. This is shown in the \"Good\" code snippet below. The default statement is in bold."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "```\n\tcase (user_input) \n\t\t3'h0: \n\t\t3'h1: \n\t\t3'h2: \n\t\t3'h3: state = 2'h3; \n\t\t3'h4: state = 2'h2; \n\t\t3'h5: state = 2'h1; \n```\ndefault: state = 2'h0;**  endcase"}]}], "RelatedAttackPatterns": ["74"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1246", "Name": "Improper Write Handling in Limited-write Non-Volatile Memories", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not implement or incorrectly implements wear leveling operations in limited-write non-volatile memories.", "ExtendedDescription": "\n\nNon-volatile memories such as NAND Flash, EEPROM, etc. have individually erasable segments, each of which can be put through a limited number of program/erase or write cycles. For example, the device can only endure a limited number of writes, after which the device becomes unreliable. In order to wear out the cells in a uniform manner, non-volatile memory and storage products based on the above-mentioned technologies implement a technique called wear leveling. Once a set threshold is reached, wear leveling maps writes of a logical block to a different physical block. This prevents a single physical block from prematurely failing due to a high concentration of writes. If wear leveling is improperly implemented, attackers may be able to programmatically cause the storage to become unreliable within a much shorter time than would normally be expected.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "400", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "System on Chip", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Memory Hardware", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Storage Hardware", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Instability"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation", "Testing"], "Description": "Include secure wear leveling algorithms and ensure they may not be bypassed.", "Effectiveness": "High"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "An attacker can render a memory line unusable by repeatedly causing a write to the memory line."}, {"BodyText": "Below is example code from [REF-1058] that the user can execute repeatedly to cause line failure. W is the maximum associativity of any cache in the system; S is the size of the largest cache in the system."}, {"Nature": "Attack", "Language": "C++", "ExampleCode": "// Do aligned alloc of (W+1) arrays each of size S\n while(1) {\n\n```\n\t for (ii = 0; ii < W + 1; ii++)\n\t\t array[ii].element[0]++;\n }\n```"}, {"BodyText": "Without wear leveling, the above attack will be successful. Simple randomization of blocks will not suffice as instead of the original physical block, the randomized physical block will be worn out."}, {"Nature": "Good", "ExampleCode": "```\n\tWear leveling must be used to even out writes to the device.\n```"}]}], "RelatedAttackPatterns": ["212"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1247", "Name": "Improper Protection Against Voltage and Clock Glitches", "Abstraction": "Base", "Structure": "Simple", "Status": "Stable", "Description": "The device does not contain or contains incorrectly implemented circuitry or sensors to detect and mitigate voltage and clock glitches and protect sensitive information or software contained on the device.", "ExtendedDescription": "\n\nA device might support features such as secure boot which are supplemented with hardware and firmware support. This involves establishing a chain of trust, starting with an immutable root of trust by checking the signature of the next stage (culminating with the OS and runtime software) against a golden value before transferring control. The intermediate stages typically set up the system in a secure state by configuring several access control settings. Similarly, security logic for exercising a debug or testing interface may be implemented in hardware, firmware, or both. A device needs to guard against fault attacks such as voltage glitches and clock glitches that an attacker may employ in an attempt to compromise the system.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1384", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "ICS/OT", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "System on Chip", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Power Management Hardware", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Clock/Counter Hardware", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Sensor Hardware", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control"], "Impact": ["Gain Privileges or Assume Identity", "Bypass Protection Mechanism", "Read Memory", "Modify Memory", "Execute Unauthorized Code or Commands"]}], "DetectionMethods": [{"Method": "Manual Analysis", "Description": "\n\nPut the processor in an infinite loop, which is then followed by instructions that should not ever be executed, since the loop is not expected to exit. After the loop, toggle an I/O bit (for oscilloscope monitoring purposes), print a console message, and reenter the loop. Note that to ensure that the loop exit is actually captured, many NOP instructions should be coded after the loop branch instruction and before the I/O bit toggle and the print statement.\n\n\nMargining the clock consists of varying the clock frequency until an anomaly occurs. This could be a continuous frequency change or it could be a single cycle. The single cycle method is described here. For every 1000th clock pulse, the clock cycle is shortened by 10 percent. If no effect is observed, the width is shortened by 20%. This process is continued in 10% increments up to and including 50%. Note that the cycle time may be increased as well, down to seconds per cycle.\n\n\nSeparately, the voltage is margined. Note that the voltage could be increased or decreased. Increasing the voltage has limits, as the circuitry may not be able to withstand a drastically increased voltage. This process starts with a 5% reduction of the DC supply to the CPU chip for 5 millisecond repeated at 1KHz. If this has no effect, the process is repeated, but a 10% reduction is used. This process is repeated at 10% increments down to a 50% reduction. If no effects are observed at 5 millisecond, the whole process is repeated using a 10 millisecond pulse. If no effects are observed, the process is repeated in 10 millisecond increments out to 100 millisecond pulses.\n\n\nWhile these are suggested starting points for testing circuitry for weaknesses, the limits may need to be pushed further at the risk of device damage. See [REF-1217] for descriptions of Smart Card attacks against a clock (section 14.6.2) and using a voltage glitch (section 15.5.3).\n", "Effectiveness": "Moderate"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "During the implementation phase where actual hardware is available, specialized hardware tools and apparatus such as ChipWhisperer may be used to check if the platform is indeed susceptible to voltage and clock glitching attacks."}, {"Method": "Architecture or Design Review", "Description": "Review if the protections against glitching merely transfer the attack target. For example, suppose a critical authentication routine that an attacker would want to bypass is given the protection of modifying certain artifacts from within that specific routine (so that if the routine is bypassed, one can examine the artifacts and figure out that an attack must have happened). However, if the attacker has the ability to bypass the critical authentication routine, they might also have the ability to bypass the other protection routine that checks the artifacts. Basically, depending on these kind of protections is akin to resorting to \"Security by Obscurity\"."}, {"Method": "Architecture or Design Review", "Description": "Many SoCs come equipped with a built-in Dynamic Voltage and Frequency Scaling (DVFS) that can control the voltage and clocks via software alone. However, there have been demonstrated attacks (like Plundervolt and CLKSCREW) that target this DVFS [REF-1081] [REF-1082]. During the design and implementation phases, one needs to check if the interface to this power management feature is available from unprivileged SW (CWE-1256), which would make the attack very easy."}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "\n\nAt the circuit-level, using Tunable Replica Circuits (TRCs) or special flip-flops such as Razor flip-flops helps mitigate glitch attacks. Working at the SoC or platform base, level sensors may be implemented to detect glitches. Implementing redundancy in security-sensitive code (e.g., where checks are performed)also can help with mitigation of glitch attacks.\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Below is a representative snippet of C code that is part of the secure-boot flow. A signature of the runtime-firmware image is calculated and compared against a golden value. If the signatures match, the bootloader loads runtime firmware. If there is no match, an error halt occurs. If the underlying hardware executing this code does not contain any circuitry or sensors to detect voltage or clock glitches, an attacker might launch a fault-injection attack right when the signature check is happening (at the location marked with the comment), causing a bypass of the signature-checking process."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "...\n if (signature_matches) // <-Glitch Here\n {\n\n```\n\t load_runtime_firmware();\n }\n else\n {\n\t do_not_load_runtime_firmware();\n }\n ...\n```"}, {"BodyText": "After bypassing secure boot, an attacker can gain access to system assets to which the attacker should not have access."}, {"Nature": "Good", "ExampleCode": "```\n\tIf the underlying hardware detects a voltage or clock glitch, the information can be used to prevent the glitch from being successful.\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2019-17391", "Description": "Lack of anti-glitch protections allows an attacker to launch a physical attack to bypass the secure boot and read protected eFuses.", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-17391"}, {"Reference": "CVE-2021-33478", "Description": "IP communication firmware allows access to a boot shell via certain impulses", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-33478"}], "FunctionalAreas": ["Power", "Clock"], "RelatedAttackPatterns": ["624", "625"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1248", "Name": "Semiconductor Defects in Hardware Logic with Security-Sensitive Implications", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The security-sensitive hardware module contains semiconductor defects.", "ExtendedDescription": "\n\nA semiconductor device can fail for various reasons. While some are manufacturing and packaging defects, the rest are due to prolonged use or usage under extreme conditions. Some mechanisms that lead to semiconductor defects include encapsulation failure, die-attach failure, wire-bond failure, bulk-silicon defects, oxide-layer faults, aluminum-metal faults (including electromigration, corrosion of aluminum, etc.), and thermal/electrical stress. These defects manifest as faults on chip-internal signals or registers, have the effect of inputs, outputs, or intermediate signals being always 0 or always 1, and do not switch as expected. If such faults occur in security-sensitive hardware modules, the security objectives of the hardware module may be compromised.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "693", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Manufacturing", "Note": "May be introduced due to issues in the manufacturing environment or improper handling of components, for example."}, {"Phase": "Operation", "Note": "May be introduced by improper handling or usage outside of rated operating environments (temperature, humidity, etc.)"}], "CommonConsequences": [{"Scope": ["Availability", "Access Control"], "Impact": ["DoS: Instability"]}], "PotentialMitigations": [{"Phase": ["Testing"], "Description": "\n\nWhile semiconductor-manufacturing companies implement several mechanisms to continuously improve the semiconductor manufacturing process to ensure reduction of defects, some defects can only be fixed after manufacturing. Post-manufacturing testing of silicon die is critical. Fault models such as stuck-at-0 or stuck-at-1 must be used to develop post-manufacturing test cases and achieve good coverage. Once the silicon packaging is done, extensive post-silicon testing must be performed to ensure that hardware logic implementing security functionalities is defect-free.\n"}, {"Phase": ["Operation"], "Description": "\n\nOperating the hardware outside device specification, such as at extremely high temperatures, voltage, etc., accelerates semiconductor degradation and results in defects. When these defects manifest as faults in security-critical, hardware modules, it results in compromise of security guarantees. Thus, operating the device within the specification is important.\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The network-on-chip implements a firewall for access control to peripherals from all IP cores capable of mastering transactions."}, {"Nature": "Bad", "Language": "Other", "ExampleCode": "```\n\tA manufacturing defect in this logic manifests itself as a logical fault, which always sets the output of the filter to \"allow\" access.\n```"}, {"BodyText": "Post-manufacture testing must be performed to ensure that hardware logic implementing security functionalities is defect-free."}]}], "RelatedAttackPatterns": ["624", "625"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1249", "Name": "Application-Level Admin Tool with Inconsistent View of Underlying Operating System", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product provides an application for administrators to manage parts of the underlying operating system, but the application does not accurately identify all of the relevant entities or resources that exist in the OS; that is, the application's model of the OS's state is inconsistent with the OS's actual state.", "ExtendedDescription": "\n\nMany products provide web-based applications or other interfaces for managing the underlying operating system. This is common with cloud, network access devices, home networking, and other systems. When the management tool does not accurately represent what is in the OS - such as user accounts - then the administrator might not see suspicious activities that would be noticed otherwise.\n\n\nFor example, numerous systems utilize a web front-end for administrative control. They also offer the ability to add, alter, and drop users with various privileges as it relates to the functionality of the system. A potential architectural weakness may exist where the user information reflected in the web interface does not mirror the users in the underlying operating system. Many web UI or REST APIs use the underlying operating system for authentication; the system's logic may also track an additional set of user capabilities within configuration files and datasets for authorization capabilities. When there is a discrepancy between the user information in the UI or REST API's interface system and the underlying operating system's user listing, this may introduce a weakness into the system. For example, if an attacker compromises the OS and adds a new user account - a \"ghost\" account - then the attacker could escape detection if the management tool does not list the newly-added account.\n\n\nThis discrepancy could be exploited in several ways:\n\n\n  - A rogue admin could insert a new account into a system that will persist if they are terminated or wish to take action on a system that cannot be directly associated with them.\n\n  - An attacker can leverage a separate command injection attack available through the web interface to insert a ghost account with shell privileges such as ssh.\n\n  - An attacker can leverage existing web interface APIs, manipulated in such a way that a new user is inserted into the operating system, and the user web account is either partially created or not at all.\n\n  - An attacker could create an admin account which is viewable by an administrator, use this account to create the ghost account, delete logs and delete the first created admin account.\n\nMany of these attacker scenarios can be realized by leveraging separate vulnerabilities related to XSS, command injection, authentication bypass, or logic flaws on the various systems. ", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1250", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Web Based", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Ghost in the Shell"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "The design might assume that the underlying OS does not change."}, {"Phase": "Implementation", "Note": "Assumptions about the underlying OS might be hard-coded into the application or otherwise in external data stores in a way that is not updated when the OS's state changes."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Varies by Context"]}, {"Scope": ["Accountability"], "Impact": ["Hide Activities"]}, {"Scope": ["Other"], "Impact": ["Unexpected State"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "\n\nEnsure that the admin tool refreshes its model of the underlying OS on a regular basis, and note any inconsistencies with configuration files or other data sources that are expected to have the same data.\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Suppose that an attacker successfully gains root privileges on a Linux system and adds a new 'user2' account:"}, {"Nature": "Attack", "Language": "Other", "ExampleCode": "```\n\techo \"user2:x:0:0::/root:/\" >> /etc/passwd;\n\techo \"user2:\\$6\\$IdvyrM6VJnG8Su5U\\$1gmW3Nm.IO4vxTQDQ1C8urm72JCadOHZQwqiH/nRtL8dPY80xS4Ovsv5bPCMWnXKKWwmsocSWXupUf17LB3oS.:17256:0:99999:7:::\" >> /etc/shadow;\n```"}, {"BodyText": "This new user2 account would not be noticed on the web interface, if the interface does not refresh its data of available users."}, {"BodyText": "It could be argued that for this specific example, an attacker with root privileges would be likely to compromise the admin tool or otherwise feed it with false data. However, this example shows how the discrepancy in critical data can help attackers to escape detection."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "125", "Name": "Out-of-bounds Read", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Diagram": "/data/images/CWE-125-Diagram.png", "Description": "The product reads data past the end, or before the beginning, of the intended buffer.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "119", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "119", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "119", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "119", "ViewID": "1340", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant", "Description": "When an out-of-bounds read occurs, typically the product has already made a separate mistake, such as modifying an index or performing pointer arithmetic that produces an out-of-bounds address."}, {"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "ICS/OT", "Prevalence": "Often"}], "AlternateTerms": [{"Term": "OOB read", "Description": "Shorthand for \"Out of bounds\" read"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Memory"], "Note": "An attacker could get secret values such as cryptographic keys, PII, memory addresses, or other information that could be used in additional attacks."}, {"Scope": ["Confidentiality"], "Impact": ["Bypass Protection Mechanism"], "Note": "Out-of-bounds memory could contain memory addresses or other information that can be used to bypass ASLR and other protection mechanisms in order to improve the reliability of exploiting a separate weakness for code execution."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "An attacker could cause a segmentation fault or crash by causing memory to be read outside of the bounds of the buffer. This is especially likely when the code reads a variable amount of data and assumes that a sentinel exists to stop the read operation, such as a NUL in a string."}, {"Scope": ["Other"], "Impact": ["Varies by Context"], "Note": "The read operation could produce other undefined or unexpected results."}], "DetectionMethods": [{"DetectionMethodID": "DM-13", "Method": "Fuzzing", "Description": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.", "Effectiveness": "High"}, {"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nTo reduce the likelihood of introducing an out-of-bounds read, ensure that you validate and ensure correct calculations for any length argument, buffer size calculation, or offset. Be especially careful of relying on a sentinel (i.e. special character such as NUL) in untrusted inputs.\n"}, {"Phase": ["Architecture and Design"], "Strategy": "Language Selection", "Description": "Use a language that provides appropriate memory abstractions."}], "DemonstrativeExamples": [{"ID": "DX-100", "Entries": [{"IntroText": "In the following code, the method retrieves a value from an array at a specific array index location that is given as an input parameter to the method"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint getValueFromArray(int *array, int len, int index) {\n\t\t\tint value;\n```\n// check that the array index is less than the maximum* \n\t\t\t\n\t\t\t\n\t\t\t *// length of the array* \n\t\t\tif (index < len) {\n\t\t\t```\n```\n// get the value at the specified index of the array* \n\t\t\t\t\tvalue = array[index];}\n\t\t\t\n\t\t\t *// if array index is invalid then output error message* \n\t\t\t\n\t\t\t\n\t\t\t *// and return value indicating error* \n\t\t\telse {\n\t\t\t```\n\t\t\t\tprintf(\"Value is: %d\\n\", array[index]);\n\t\t\t\tvalue = -1;\n\t\t\t}\n\t\t\treturn value;\n\t}\n```"}, {"BodyText": "However, this method only verifies that the given array index is less than the maximum length of the array but does not check for the minimum value (CWE-839). This will allow a negative value to be accepted as the input array index, which will result in a out of bounds read (CWE-125) and may allow access to sensitive memory. The input array index should be checked to verify that is within the maximum and minimum range required for the array (CWE-129). In this example the if statement should be modified to include a minimum range check, as shown below."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n\t...\n```\n// check that the array index is within the correct* \n\t\n\t\n\t *// range of values for the array* \n\tif (index >= 0 && index < len) {\n\t\n\t..."}]}], "ObservedExamples": [{"Reference": "CVE-2020-11899", "Description": "Out-of-bounds read in IP stack used in embedded systems, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-11899"}, {"Reference": "CVE-2014-0160", "Description": "Chain: \"Heartbleed\" bug receives an inconsistent length parameter (CWE-130) enabling an out-of-bounds read (CWE-126), returning memory that could include private cryptographic keys and other sensitive data.", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-0160"}, {"Reference": "CVE-2021-40985", "Description": "HTML conversion package has a buffer under-read, allowing a crash", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-40985"}, {"Reference": "CVE-2018-10887", "Description": "Chain: unexpected sign extension (CWE-194) leads to integer overflow (CWE-190), causing an out-of-bounds read (CWE-125)", "Link": "https://www.cve.org/CVERecord?id=CVE-2018-10887"}, {"Reference": "CVE-2009-2523", "Description": "Chain: product does not handle when an input string is not NULL terminated (CWE-170), leading to buffer over-read (CWE-125) or heap-based buffer overflow (CWE-122).", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2523"}, {"Reference": "CVE-2018-16069", "Description": "Chain: series of floating-point precision errors (CWE-1339) in a web browser rendering engine causes out-of-bounds read (CWE-125), giving access to cross-origin data", "Link": "https://www.cve.org/CVERecord?id=CVE-2018-16069"}, {"Reference": "CVE-2004-0112", "Description": "out-of-bounds read due to improper length check", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0112"}, {"Reference": "CVE-2004-0183", "Description": "packet with large number of specified elements cause out-of-bounds read.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0183"}, {"Reference": "CVE-2004-0221", "Description": "packet with large number of specified elements cause out-of-bounds read.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0221"}, {"Reference": "CVE-2004-0184", "Description": "out-of-bounds read, resultant from integer underflow", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0184"}, {"Reference": "CVE-2004-1940", "Description": "large length value causes out-of-bounds read", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1940"}, {"Reference": "CVE-2004-0421", "Description": "malformed image causes out-of-bounds read", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0421"}, {"Reference": "CVE-2008-4113", "Description": "OS kernel trusts userland-supplied length value, allowing reading of sensitive information", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4113"}], "RelatedAttackPatterns": ["540"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-0674", "Description": "In alac decoder, there is a possible out of bounds read due to an incorrect bounds check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06064258; Issue ID: ALPS06064237."}, {"Reference": "CVE-2021-0676", "Description": "In geniezone driver, there is a possible out of bounds read due to an incorrect bounds check. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05863009; Issue ID: ALPS05863009."}, {"Reference": "CVE-2021-0677", "Description": "In ccu driver, there is a possible out of bounds read due to an integer overflow. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05827154; Issue ID: ALPS05827154."}, {"Reference": "CVE-2021-0900", "Description": "In apusys, there is a possible out of bounds read due to an incorrect bounds check. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05672107; Issue ID: ALPS05672055."}, {"Reference": "CVE-2021-0902", "Description": "In apusys, there is a possible out of bounds read due to an incorrect bounds check. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05672107; Issue ID: ALPS05656484."}, {"Reference": "CVE-2021-1001", "Description": "In PVInitVideoEncoder of mp4enc_api.cpp, there is a possible out of bounds read due to a heap buffer overflow. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12Android ID: A-190435883"}, {"Reference": "CVE-2021-1047", "Description": "In valid_ipc_dram_addr of cm_access_control.c, there is a possible out of bounds read due to an integer overflow. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-197966306References: N/A"}, {"Reference": "CVE-2021-26384", "Description": "A malformed SMI (System Management Interface) command may allow an attacker to establish a corrupted SMI Trigger Info data structure, potentially leading to out-of-bounds memory reads and writes when triggering an SMI resulting in a potential loss of resources."}, {"Reference": "CVE-2021-35091", "Description": "Possible out of bounds read due to improper typecasting while handling page fault for global memory in Snapdragon Connectivity, Snapdragon Mobile"}, {"Reference": "CVE-2021-3674", "Description": "A flaw was found in rizin. The create_section_from_phdr function allocates space for ELF section data by processing the headers. Crafted values in the headers can cause out of bounds reads, which can lead to memory corruption and possibly code execution through the binary object's callback function."}, {"Reference": "CVE-2021-36762", "Description": "An issue was discovered in HCC Embedded InterNiche NicheStack through 4.3. The tfshnd():tftpsrv.c TFTP packet processing function doesn't ensure that a filename is adequately '\\\\0' terminated; therefore, a subsequent call to strlen for the filename might read out of bounds of the protocol packet buffer (if no '\\\\0' byte exists within a reasonable range)."}, {"Reference": "CVE-2021-37041", "Description": "There is an Improper verification vulnerability in Huawei Smartphone.Successful exploitation of this vulnerability may cause out-of-bounds read."}, {"Reference": "CVE-2021-37042", "Description": "There is an Improper verification vulnerability in Huawei Smartphone.Successful exploitation of this vulnerability may cause out-of-bounds read."}, {"Reference": "CVE-2021-39665", "Description": "In checkSpsUpdated of AAVCAssembler.cpp, there is a possible out of bounds read due to a heap buffer overflow. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-12Android ID: A-204077881"}, {"Reference": "CVE-2021-39671", "Description": "In code generated by aidl_const_expressions.cpp, there is a possible out of bounds read due to uninitialized data. This could lead to information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12Android ID: A-206718630"}, {"Reference": "CVE-2021-39688", "Description": "In TBD of TBD, there is a possible out of bounds read due to TBD. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-206039140References: N/A"}, {"Reference": "CVE-2021-39762", "Description": "In tremolo, there is a possible out of bounds read due to an integer overflow. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12LAndroid ID: A-210625816"}, {"Reference": "CVE-2021-39805", "Description": "In l2cble_process_sig_cmd of l2c_ble.cc, there is a possible out of bounds read due to a missing bounds check. This could lead to remote information disclosure through Bluetooth with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12 Android-12LAndroid ID: A-212694559"}, {"Reference": "CVE-2021-39812", "Description": "In TBD of TBD, there is a possible out of bounds read due to a use after free. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-205522359References: N/A"}, {"Reference": "CVE-2021-40167", "Description": "A malicious crafted dwf or .pct file when consumed through DesignReview.exe application could lead to memory corruption vulnerability by read access violation. This vulnerability in conjunction with other vulnerabilities could lead to code execution in the context of the current process."}, {"Reference": "CVE-2021-4093", "Description": "A flaw was found in the KVM's AMD code for supporting the Secure Encrypted Virtualization-Encrypted State (SEV-ES). A KVM guest using SEV-ES can trigger out-of-bounds reads and writes in the host kernel via a malicious VMGEXIT for a string I/O instruction (for example, outs or ins) using the exit reason SVM_EXIT_IOIO. This issue results in a crash of the entire system or a potential guest-to-host escape scenario."}, {"Reference": "CVE-2021-4100", "Description": "Object lifecycle issue in ANGLE in Google Chrome prior to 96.0.4664.110 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-4156", "Description": "An out-of-bounds read flaw was found in libsndfile's FLAC codec functionality. An attacker who is able to submit a specially crafted file (via tricking a user to open or otherwise) to an application linked with libsndfile and using the FLAC codec, could trigger an out-of-bounds read that would most likely cause a crash but could potentially leak memory information that could be used in further exploitation of other flaws."}, {"Reference": "CVE-2021-43300", "Description": "Stack overflow in PJSUA API when calling pjsua_recorder_create. An attacker-controlled 'filename' argument may cause a buffer overflow since it is copied to a fixed-size stack buffer without any size validation."}, {"Reference": "CVE-2021-43453", "Description": "A Heap-based Buffer Overflow vulnerability exists in JerryScript 2.4.0 and prior versions via an out-of-bounds read in parser_parse_for_statement_start in the js-parser-statm.c file. This issue is similar to CVE-2020-29657."}, {"Reference": "CVE-2021-46768", "Description": "Insufficient input validation in SEV firmware may allow an attacker to perform out-of-bounds memory reads within the ASP boot loader, potentially leading to a denial of service. "}, {"Reference": "CVE-2021-46814", "Description": "The video framework has an out-of-bounds memory read/write vulnerability. Successful exploitation of this vulnerability may affect system availability."}, {"Reference": "CVE-2021-46848", "Description": "GNU Libtasn1 before 4.19.0 has an ETYPE_OK off-by-one array size check that affects asn1_encode_simple_der."}, {"Reference": "CVE-2022-0544", "Description": "An integer underflow in the DDS loader of Blender leads to an out-of-bounds read, possibly allowing an attacker to read sensitive data using a crafted DDS image file. This flaw affects Blender versions prior to 2.83.19, 2.93.8 and 3.1."}, {"Reference": "CVE-2022-0545", "Description": "An integer overflow in the processing of loaded 2D images leads to a write-what-where vulnerability and an out-of-bounds read vulnerability, allowing an attacker to leak sensitive information or achieve code execution in the context of the Blender process when a specially crafted image file is loaded. This flaw affects Blender versions prior to 2.83.19, 2.93.8 and 3.1."}, {"Reference": "CVE-2022-1462", "Description": "An out-of-bounds read flaw was found in the Linux kernel\u2019s TeleTYpe subsystem. The issue occurs in how a user triggers a race condition using ioctls TIOCSPTLCK and TIOCGPTPEER and TIOCSTI and TCXONC with leakage of memory in the flush_to_ldisc function. This flaw allows a local user to crash the system or read unauthorized random data from memory."}, {"Reference": "CVE-2022-20032", "Description": "In vow driver, there is a possible memory corruption due to a race condition. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05852822; Issue ID: ALPS05852822."}, {"Reference": "CVE-2022-20131", "Description": "In nci_proc_rf_management_ntf of nci_hrcv.cc, there is a possible out of bounds read due to a missing bounds check. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-221856662"}, {"Reference": "CVE-2022-20201", "Description": "In getAppSize of InstalldNativeService.cpp, there is a possible out of bounds read due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12LAndroid ID: A-220733817"}, {"Reference": "CVE-2022-20202", "Description": "In ih264_resi_trans_quant_4x4_sse42 of ih264_resi_trans_quant_sse42.c, there is a possible out of bounds read due to a heap buffer overflow. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-12LAndroid ID: A-204704614"}, {"Reference": "CVE-2022-20209", "Description": "In hme_add_new_node_to_a_sorted_array of hme_utils.c, there is a possible out of bounds read due to a heap buffer overflow. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12LAndroid ID: A-207502397"}, {"Reference": "CVE-2022-20247", "Description": "In Media, there is a possible out of bounds read due to a heap buffer overflow. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-229858836"}, {"Reference": "CVE-2022-20273", "Description": "In Bluetooth, there is a possible out of bounds read due to a heap buffer overflow. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-206478022"}, {"Reference": "CVE-2022-20393", "Description": "In extract3GPPGlobalDescriptions of TextDescriptions.cpp, there is a possible out of bounds read due to an integer overflow. This could lead to local information disclosure from the media server with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-11 Android-12 Android-12LAndroid ID: A-233735886"}, {"Reference": "CVE-2022-20447", "Description": "In PAN_WriteBuf of pan_api.cc, there is a possible out of bounds read due to a use after free. This could lead to remote information disclosure over Bluetooth with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-233604485"}, {"Reference": "CVE-2022-20461", "Description": "In pinReplyNative of com_android_bluetooth_btservice_AdapterService.cpp, there is a possible out of bounds read due to type confusion. This could lead to local escalation of privilege of BLE with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12L Android-13Android ID: A-228602963"}, {"Reference": "CVE-2022-20483", "Description": "In several functions that parse avrc response in avrc_pars_ct.cc and related files, there are possible out of bounds reads due to integer overflows. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12L Android-13Android ID: A-242459126"}, {"Reference": "CVE-2022-20513", "Description": "In decrypt_1_2 of CryptoPlugin.cpp, there is a possible out of bounds read due to a missing bounds check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-244569759"}, {"Reference": "CVE-2022-20516", "Description": "In rw_t3t_act_handle_check_ndef_rsp of rw_t3t.cc, there is a possible out of bounds read due to an integer overflow. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-224002331"}, {"Reference": "CVE-2022-20542", "Description": "In parseParamsBlob of types.cpp, there is a possible out of bounds write due to a missing bounds check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-238083570"}, {"Reference": "CVE-2022-20574", "Description": "In sec_sysmmu_info of drm_fw.c, there is a possible out of bounds read due to improper input validation. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-237582191References: N/A"}, {"Reference": "CVE-2022-20689", "Description": "Multiple vulnerabilities in the Cisco Discovery Protocol functionality of Cisco ATA 190 Series Analog Telephone Adapter firmware could allow an unauthenticated, adjacent attacker to cause Cisco Discovery Protocol memory corruption on an affected device. These vulnerabilities are due to missing length validation checks when processing Cisco Discovery Protocol messages. An attacker could exploit these vulnerabilities by sending a malicious Cisco Discovery Protocol packet to an affected device. A successful exploit could allow the attacker to cause an out-of-bounds read of the valid Cisco Discovery Protocol packet data, which could allow the attacker to cause corruption in the internal Cisco Discovery Protocol database of the affected device."}, {"Reference": "CVE-2022-20690", "Description": "Multiple vulnerabilities in the Cisco Discovery Protocol functionality of Cisco ATA 190 Series Analog Telephone Adapter firmware could allow an unauthenticated, adjacent attacker to cause Cisco Discovery Protocol memory corruption on an affected device. These vulnerabilities are due to missing length validation checks when processing Cisco Discovery Protocol messages. An attacker could exploit these vulnerabilities by sending a malicious Cisco Discovery Protocol packet to an affected device. A successful exploit could allow the attacker to cause an out-of-bounds read of the valid Cisco Discovery Protocol packet data, which could allow the attacker to cause corruption in the internal Cisco Discovery Protocol database of the affected device."}, {"Reference": "CVE-2022-22627", "Description": "An out-of-bounds read was addressed with improved bounds checking. This issue is fixed in macOS Big Sur 11.6.5, macOS Monterey 12.3, Security Update 2022-003 Catalina. Processing a maliciously crafted AppleScript binary may result in unexpected application termination or disclosure of process memory."}, {"Reference": "CVE-2022-23523", "Description": "In versions prior to 0.8.1, the linux-loader crate uses the offsets and sizes provided in the ELF headers to determine the offsets to read from. If those offsets point beyond the end of the file this could lead to Virtual Machine Monitors using the `linux-loader` crate entering an infinite loop if the ELF header of the kernel they are loading was modified in a malicious manner. This issue has been addressed in 0.8.1. The issue can be mitigated by ensuring that only trusted kernel images are loaded or by verifying that the headers do not point beyond the end of the file."}, {"Reference": "CVE-2022-23559", "Description": "Tensorflow is an Open Source Machine Learning Framework. An attacker can craft a TFLite model that would cause an integer overflow in embedding lookup operations. Both `embedding_size` and `lookup_size` are products of values provided by the user. Hence, a malicious user could trigger overflows in the multiplication. In certain scenarios, this can then result in heap OOB read/write. Users are advised to upgrade to a patched version."}, {"Reference": "CVE-2022-24314", "Description": "A CWE-125: Out-of-bounds Read vulnerability exists that could cause memory leaks potentially resulting in denial of service when an attacker repeatedly sends a specially crafted message. Affected Product: Interactive Graphical SCADA System Data Server (V15.0.0.22020 and prior)"}, {"Reference": "CVE-2022-26099", "Description": "Null pointer dereference vulnerability in parser_infe function of libsimba library prior to SMR Apr-2022 Release 1 allows out of bounds read by remote attackers."}, {"Reference": "CVE-2022-26459", "Description": "In vow, there is a possible out of bounds read due to an integer overflow. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07032634; Issue ID: ALPS07032634."}, {"Reference": "CVE-2022-28285", "Description": "When generating the assembly code for <code>MLoadTypedArrayElementHole</code>, an incorrect AliasSet was used. In conjunction with another vulnerability this could have been used for an out of bounds memory read. This vulnerability affects Thunderbird < 91.8, Firefox < 99, and Firefox ESR < 91.8."}, {"Reference": "CVE-2022-29488", "Description": "The affected product is vulnerable to an out-of-bounds read via uninitialized pointer, which may allow an attacker to execute arbitrary code."}, {"Reference": "CVE-2022-2964", "Description": "A flaw was found in the Linux kernel\u2019s driver for the ASIX AX88179_178A-based USB 2.0/3.0 Gigabit Ethernet Devices. The vulnerability contains multiple out-of-bounds reads and possible out-of-bounds writes."}, {"Reference": "CVE-2022-3028", "Description": "A race condition was found in the Linux kernel's IP framework for transforming packets (XFRM subsystem) when multiple calls to xfrm_probe_algs occurred simultaneously. This flaw could allow a local attacker to potentially trigger an out-of-bounds write or leak kernel heap memory by performing an out-of-bounds read and copying it into a socket."}, {"Reference": "CVE-2022-31741", "Description": "A crafted CMS message could have been processed incorrectly, leading to an invalid memory read, and potentially further memory corruption. This vulnerability affects Thunderbird < 91.10, Firefox < 101, and Firefox ESR < 91.10."}, {"Reference": "CVE-2022-31747", "Description": "Mozilla developers Andrew McCreight, Nicolas B. Pierron, and the Mozilla Fuzzing Team reported memory safety bugs present in Firefox 100 and Firefox ESR 91.9. Some of these bugs showed evidence of memory corruption and we presume that with enough effort some of these could have been exploited to run arbitrary code. This vulnerability affects Thunderbird < 91.10, Firefox < 101, and Firefox ESR < 91.10."}, {"Reference": "CVE-2022-32142", "Description": "Multiple CODESYS Products are prone to a out-of bounds read or write access. A low privileged remote attacker may craft a request with invalid offset, which can cause an out-of-bounds read or write access, resulting in denial-of-service condition or local memory overwrite, which can lead to a change of local files. User interaction is not required."}, {"Reference": "CVE-2022-32595", "Description": "In widevine, there is a possible out of bounds read due to an incorrect bounds check. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07446236; Issue ID: ALPS07446236."}, {"Reference": "CVE-2022-32639", "Description": "In watchdog, there is a possible out of bounds read due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07494487; Issue ID: ALPS07494487."}, {"Reference": "CVE-2022-32641", "Description": "In meta wifi, there is a possible out of bounds read due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07453594; Issue ID: ALPS07453594."}, {"Reference": "CVE-2022-3377", "Description": "Horner Automation's Cscape version 9.90 SP 6 and prior does not properly validate user-supplied data. If a user opens a maliciously formed FNT file, then an attacker could execute arbitrary code within the current process by accessing an uninitialized pointer, leading to an out-of-bounds memory read. "}, {"Reference": "CVE-2022-34680", "Description": "NVIDIA GPU Display Driver for Linux contains a vulnerability in the kernel mode layer handler, where an integer truncation can lead to an out-of-bounds read, which may lead to denial of service."}, {"Reference": "CVE-2022-35260", "Description": "curl can be told to parse a `.netrc` file for credentials. If that file endsin a line with 4095 consecutive non-white space letters and no newline, curlwould first read past the end of the stack-based buffer, and if the readworks, write a zero byte beyond its boundary.This will in most cases cause a segfault or similar, but circumstances might also cause different outcomes.If a malicious user can provide a custom netrc file to an application or otherwise affect its contents, this flaw could be used as denial-of-service."}, {"Reference": "CVE-2022-39274", "Description": "LoRaMac-node is a reference implementation and documentation of a LoRa network node. Versions of LoRaMac-node prior to 4.7.0 are vulnerable to a buffer overflow. Improper size validation of the incoming radio frames can lead to an 65280-byte out-of-bounds write. The function `ProcessRadioRxDone` implicitly expects incoming radio frames to have at least a payload of one byte or more. An empty payload leads to a 1-byte out-of-bounds read of user controlled content when the payload buffer is reused. This allows an attacker to craft a FRAME_TYPE_PROPRIETARY frame with size -1 which results in an 65280-byte out-of-bounds memcopy likely with partially controlled attacker data. Corrupting a large part if the data section is likely to cause a DoS. If the large out-of-bounds write does not immediately crash the attacker may gain control over the execution due to now controlling large parts of the data section. Users are advised to upgrade either by updating their package or by manually applying the patch commit `e851b079`."}, {"Reference": "CVE-2022-39392", "Description": "Wasmtime is a standalone runtime for WebAssembly. Prior to version 2.0.2, there is a bug in Wasmtime's implementation of its pooling instance allocator when the allocator is configured to give WebAssembly instances a maximum of zero pages of memory. In this configuration, the virtual memory mapping for WebAssembly memories did not meet the compiler-required configuration requirements for safely executing WebAssembly modules. Wasmtime's default settings require virtual memory page faults to indicate that wasm reads/writes are out-of-bounds, but the pooling allocator's configuration would not create an appropriate virtual memory mapping for this meaning out of bounds reads/writes can successfully read/write memory unrelated to the wasm sandbox within range of the base address of the memory mapping created by the pooling allocator. This bug is not applicable with the default settings of the `wasmtime` crate. This bug can only be triggered by setting `InstanceLimits::memory_pages` to zero. This is expected to be a very rare configuration since this means that wasm modules cannot allocate any pages of linear memory. All wasm modules produced by all current toolchains are highly likely to use linear memory, so it's expected to be unlikely that this configuration is set to zero by any production embedding of Wasmtime. This bug has been patched and users should upgrade to Wasmtime 2.0.2. This bug can be worked around by increasing the `memory_pages` allotment when configuring the pooling allocator to a value greater than zero. If an embedding wishes to still prevent memory from actually being used then the `Store::limiter` method can be used to dynamically disallow growth of memory beyond 0 bytes large. Note that the default `memory_pages` value is greater than zero."}, {"Reference": "CVE-2022-41595", "Description": "The phones have the heap overflow, out-of-bounds read, and null pointer vulnerabilities in the fingerprint trusted application (TA).Successful exploitation of this vulnerability may affect the fingerprint service."}, {"Reference": "CVE-2022-41873", "Description": "Contiki-NG is an open-source, cross-platform operating system for Next-Generation IoT devices. Versions prior to 4.9 are vulnerable to an Out-of-bounds read. While processing the L2CAP protocol, the Bluetooth Low Energy stack of Contiki-NG needs to map an incoming channel ID to its metadata structure. While looking up the corresponding channel structure in get_channel_for_cid (in os/net/mac/ble/ble-l2cap.c), a bounds check is performed on the incoming channel ID, which is meant to ensure that the channel ID does not exceed the maximum number of supported channels.However, an integer truncation issue leads to only the lowest byte of the channel ID to be checked, which leads to an incomplete out-of-bounds check. A crafted channel ID leads to out-of-bounds memory to be read and written with attacker-controlled data. The vulnerability has been patched in the \"develop\" branch of Contiki-NG, and will be included in release 4.9. As a workaround, Users can apply the patch in Contiki-NG pull request 2081 on GitHub."}, {"Reference": "CVE-2022-41877", "Description": "FreeRDP is a free remote desktop protocol library and clients. Affected versions of FreeRDP are missing input length validation in `drive` channel. A malicious server can trick a FreeRDP based client to read out of bound data and send it back to the server. This issue has been addressed in version 2.9.0 and all users are advised to upgrade. Users unable to upgrade should not use the drive redirection channel - command line options `/drive`, `+drives` or `+home-drive`."}, {"Reference": "CVE-2022-41902", "Description": "TensorFlow is an open source platform for machine learning. The function MakeGrapplerFunctionItem takes arguments that determine the sizes of inputs and outputs. If the inputs given are greater than or equal to the sizes of the outputs, an out-of-bounds memory read or a crash is triggered. We have patched the issue in GitHub commit a65411a1d69edfb16b25907ffb8f73556ce36bb7. The fix will be included in TensorFlow 2.11.0. We will also cherrypick this commit on TensorFlow 2.8.4, 2.9.3, and 2.10.1."}, {"Reference": "CVE-2022-41981", "Description": "A stack-based buffer overflow vulnerability exists in the TGA file format parser of OpenImageIO v2.3.19.0. A specially-crafted targa file can lead to out of bounds read and write on the process stack, which can lead to arbitrary code execution. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2022-4203", "Description": "A read buffer overrun can be triggered in X.509 certificate verification, specifically in name constraint checking. Note that this occurs after certificate chain signature verification and requires either a CA to have signed the malicious certificate or for the application to continue certificate verification despite failure to construct a path to a trusted issuer. The read buffer overrun might result in a crash which could lead to a denial of service attack. In theory it could also result in the disclosure of private memory contents (such as private keys, or sensitive plaintext) although we are not aware of any working exploit leading to memory contents disclosure as of the time of release of this advisory. In a TLS client, this can be triggered by connecting to a malicious server. In a TLS server, this can be triggered if the server requests client authentication and a malicious client connects. "}, {"Reference": "CVE-2022-46152", "Description": "OP-TEE Trusted OS is the secure side implementation of OP-TEE project, a Trusted Execution Environment. Versions prior to 3.19.0, contain an Improper Validation of Array Index vulnerability. The function `cleanup_shm_refs()` is called by both `entry_invoke_command()` and `entry_open_session()`. The commands `OPTEE_MSG_CMD_OPEN_SESSION` and `OPTEE_MSG_CMD_INVOKE_COMMAND` can be executed from the normal world via an OP-TEE SMC. This function is not validating the `num_params` argument, which is only limited to `OPTEE_MSG_MAX_NUM_PARAMS` (127) in the function `get_cmd_buffer()`. Therefore, an attacker in the normal world can craft an SMC call that will cause out-of-bounds reading in `cleanup_shm_refs` and potentially freeing of fake-objects in the function `mobj_put()`. A normal-world attacker with permission to execute SMC instructions may exploit this flaw. Maintainers believe this problem permits local privilege escalation from the normal world to the secure world. Version 3.19.0 contains a fix for this issue. There are no known workarounds."}, {"Reference": "CVE-2022-48303", "Description": "GNU Tar through 1.34 has a one-byte out-of-bounds read that results in use of uninitialized memory for a conditional jump. Exploitation to change the flow of control has not been demonstrated. The issue occurs in from_header in list.c via a V7 archive in which mtime has approximately 11 whitespace characters."}, {"Reference": "CVE-2022-42775", "Description": "In camera driver, there is a possible memory corruption due to improper locking. This could lead to local denial of service in kernel."}, {"Reference": "CVE-2022-42901", "Description": "Bentley MicroStation and MicroStation-based applications may be affected by out-of-bounds and stack overflow issues when opening crafted XMT files. Exploiting these issues could lead to information disclosure and code execution. The fixed versions are 10.17.01.58* for MicroStation and 10.17.01.19* for Bentley View."}, {"Reference": "CVE-2022-4338", "Description": "An integer underflow in Organization Specific TLV was found in various versions of OpenvSwitch."}, {"Reference": "CVE-2022-36354", "Description": "A heap out-of-bounds read vulnerability exists in the RLA format parser of OpenImageIO master-branch-9aeece7a and v2.3.19.0. More specifically, in the way run-length encoded byte spans are handled. A malformed RLA file can lead to an out-of-bounds read of heap metadata which can result in sensitive information leak. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2021-4034", "Description": "A local privilege escalation vulnerability was found on polkit's pkexec utility. The pkexec application is a setuid tool designed to allow unprivileged users to run commands as privileged users according predefined policies. The current version of pkexec doesn't handle the calling parameters count correctly and ends trying to execute environment variables as commands. An attacker can leverage this by crafting environment variables in such a way it'll induce pkexec to execute arbitrary code. When successfully executed the attack can cause a local privilege escalation given unprivileged users administrative rights on the target machine."}, {"Reference": "CVE-2022-22674", "Description": "An out-of-bounds read issue existed that led to the disclosure of kernel memory. This was addressed with improved input validation. This issue is fixed in macOS Monterey 12.3.1, Security Update 2022-004 Catalina, macOS Big Sur 11.6.6. A local user may be able to read kernel memory."}, {"Reference": "CVE-2021-35452", "Description": "An Incorrect Access Control vulnerability exists in libde265 v1.0.8 due to a SEGV in slice.cc."}, {"Reference": "CVE-2021-36411", "Description": "An issue has been found in libde265 v1.0.8 due to incorrect access control. A SEGV caused by a READ memory access in function derive_boundaryStrength of deblock.cc has occurred. The vulnerability causes a segmentation fault and application crash, which leads to remote denial of service."}, {"Reference": "CVE-2021-39666", "Description": "In extract of MediaMetricsItem.h, there is a possible out of bounds read due to improper input validation. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-11 Android-12Android ID: A-204445255"}, {"Reference": "CVE-2022-20132", "Description": "In lg_probe and related functions of hid-lg.c and other USB HID files, there is a possible out of bounds read due to improper input validation. This could lead to local information disclosure if a malicious USB HID device were plugged in, with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-188677105References: Upstream kernel"}, {"Reference": "CVE-2022-20221", "Description": "In avrc_ctrl_pars_vendor_cmd of avrc_pars_ct.cc, there is a possible out of bounds read due to improper input validation. This could lead to remote information disclosure over Bluetooth with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-205571133"}, {"Reference": "CVE-2022-20445", "Description": "In process_service_search_rsp of sdp_discovery.cc, there is a possible out of bounds read due to improper input validation. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12L Android-13Android ID: A-225876506"}, {"Reference": "CVE-2022-39881", "Description": "Improper input validation vulnerability for processing SIB12 PDU in Exynos modems prior to SMR Sep-2022 Release allows remote attacker to read out of bounds memory."}, {"Reference": "CVE-2022-42510", "Description": "In StringsRequestData::encode of requestdata.cpp, there is a possible out of bounds read due to improper input validation. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-241762656References: N/A"}, {"Reference": "CVE-2022-0806", "Description": "Data leak in Canvas in Google Chrome prior to 99.0.4844.51 allowed a remote attacker who convinced a user to engage in screen sharing to potentially leak cross-origin data via a crafted HTML page."}, {"Reference": "CVE-2022-35268", "Description": "A denial of service vulnerability exists in the web_server hashFirst functionality of Robustel R1510 3.1.16 and 3.3.0. A specially-crafted network request can lead to denial of service. An attacker can send a sequence of requests to trigger this vulnerability.This denial of service is in the `/action/import_sdk_file/` API."}, {"Reference": "CVE-2021-3605", "Description": "There's a flaw in OpenEXR's rleUncompress functionality in versions prior to 3.0.5. An attacker who is able to submit a crafted file to an application linked with OpenEXR could cause an out-of-bounds read. The greatest risk from this flaw is to application availability."}, {"Reference": "CVE-2022-1441", "Description": "MP4Box is a component of GPAC-2.0.0, which is a widely-used third-party package on RPM Fusion. When MP4Box tries to parse a MP4 file, it calls the function `diST_box_read()` to read from video. In this function, it allocates a buffer `str` with fixed length. However, content read from `bs` is controllable by user, so is the length, which causes a buffer overflow."}, {"Reference": "CVE-2022-20064", "Description": "In ccci, there is a possible leak of kernel pointer due to an incorrect bounds check. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06108617; Issue ID: ALPS06108617."}, {"Reference": "CVE-2022-3435", "Description": "A vulnerability classified as problematic has been found in Linux Kernel. This affects the function fib_nh_match of the file net/ipv4/fib_semantics.c of the component IPv4 Handler. The manipulation leads to out-of-bounds read. It is possible to initiate the attack remotely. It is recommended to apply a patch to fix this issue. The identifier VDB-210357 was assigned to this vulnerability."}, {"Reference": "CVE-2022-34399", "Description": " Dell Alienware m17 R5 BIOS version prior to 1.2.2 contain a buffer access vulnerability. A malicious user with admin privileges could potentially exploit this vulnerability by sending input larger than expected in order to leak certain sections of SMRAM. "}, {"Reference": "CVE-2022-34529", "Description": "WASM3 v0.5.0 was discovered to contain a segmentation fault via the component Compile_Memory_CopyFill."}, {"Reference": "CVE-2022-35100", "Description": "SWFTools commit 772e55a2 was discovered to contain a segmentation violation via gfxline_getbbox at /lib/gfxtools.c."}, {"Reference": "CVE-2022-35106", "Description": "SWFTools commit 772e55a2 was discovered to contain a segmentation violation via FoFiTrueType::computeTableChecksum(unsigned char*, int) at /xpdf/FoFiTrueType.cc."}, {"Reference": "CVE-2022-35114", "Description": "SWFTools commit 772e55a2 was discovered to contain a segmentation violation via extractFrame at /readers/swf.c."}, {"Reference": "CVE-2022-35476", "Description": "OTFCC v0.10.4 was discovered to contain a segmentation violation via /release-x64/otfccdump+0x4fbc0b."}, {"Reference": "CVE-2022-35477", "Description": "OTFCC v0.10.4 was discovered to contain a segmentation violation via /release-x64/otfccdump+0x4fe954."}, {"Reference": "CVE-2022-35478", "Description": "OTFCC v0.10.4 was discovered to contain a segmentation violation via /release-x64/otfccdump+0x6babea."}, {"Reference": "CVE-2022-35479", "Description": "OTFCC v0.10.4 was discovered to contain a segmentation violation via /release-x64/otfccdump+0x4fbbb6."}, {"Reference": "CVE-2022-35481", "Description": "OTFCC v0.10.4 was discovered to contain a segmentation violation via /multiarch/memmove-vec-unaligned-erms.S."}, {"Reference": "CVE-2022-35482", "Description": "OTFCC v0.10.4 was discovered to contain a segmentation violation via /release-x64/otfccdump+0x65f724."}, {"Reference": "CVE-2022-35483", "Description": "OTFCC v0.10.4 was discovered to contain a segmentation violation via /release-x64/otfccdump+0x5266a8."}, {"Reference": "CVE-2022-35485", "Description": "OTFCC v0.10.4 was discovered to contain a segmentation violation via /release-x64/otfccdump+0x703969."}, {"Reference": "CVE-2022-3964", "Description": "A vulnerability classified as problematic has been found in ffmpeg. This affects an unknown part of the file libavcodec/rpzaenc.c of the component QuickTime RPZA Video Encoder. The manipulation of the argument y_size leads to out-of-bounds read. It is possible to initiate the attack remotely. The name of the patch is 92f9b28ed84a77138105475beba16c146bdaf984. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-213543."}, {"Reference": "CVE-2022-3965", "Description": "A vulnerability classified as problematic was found in ffmpeg. This vulnerability affects the function smc_encode_stream of the file libavcodec/smcenc.c of the component QuickTime Graphics Video Encoder. The manipulation of the argument y_size leads to out-of-bounds read. The attack can be initiated remotely. The name of the patch is 13c13109759090b7f7182480d075e13b36ed8edd. It is recommended to apply a patch to fix this issue. The identifier of this vulnerability is VDB-213544."}, {"Reference": "CVE-2021-26388", "Description": "Improper validation of the BIOS directory may allow for searches to read beyond the directory table copy in RAM, exposing out of bounds memory contents, resulting in a potential denial of service."}, {"Reference": "CVE-2022-20698", "Description": "A vulnerability in the OOXML parsing module in Clam AntiVirus (ClamAV) Software version 0.104.1 and LTS version 0.103.4 and prior versions could allow an unauthenticated, remote attacker to cause a denial of service condition on an affected device. The vulnerability is due to improper checks that may result in an invalid pointer read. An attacker could exploit this vulnerability by sending a crafted OOXML file to an affected device. An exploit could allow the attacker to cause the ClamAV scanning process to crash, resulting in a denial of service condition."}, {"Reference": "CVE-2022-22271", "Description": "A missing input validation before memory copy in TIMA trustlet prior to SMR Jan-2022 Release 1 allows attackers to copy data from arbitrary memory."}, {"Reference": "CVE-2022-2868", "Description": "libtiff's tiffcrop utility has a improper input validation flaw that can lead to out of bounds read and ultimately cause a crash if an attacker is able to supply a crafted file to tiffcrop."}, {"Reference": "CVE-2021-40606", "Description": "The gf_bs_write_data function in GPAC 1.0.1 allows attackers to cause a denial of service via a crafted file in the MP4Box command."}, {"Reference": "CVE-2022-23319", "Description": "A segmentation fault during PCF file parsing in pcf2bdf versions >=1.05 allows an attacker to trigger a program crash via a specially crafted PCF font file. This crash affects the availability of the software and dependent downstream components."}, {"Reference": "CVE-2022-35087", "Description": "SWFTools commit 772e55a2 was discovered to contain a segmentation violation via MovieAddFrame at /src/gif2swf.c."}]}
{"ID": "1250", "Name": "Improper Preservation of Consistency Between Independent Representations of Shared State", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product has or supports multiple distributed components or sub-systems that are each required to keep their own local copy of shared data - such as state or cache - but the product does not ensure that all local copies remain consistent with each other.", "ExtendedDescription": "\n\nIn highly distributed environments, or on systems with distinct physical components that operate independently, there is often a need for each component to store and update its own local copy of key data such as state or cache, so that all components have the same \"view\" of the overall system and operate in a coordinated fashion. For example, users of a social media service or a massively multiplayer online game might be using their own personal computers while also interacting with different physical hosts in a globally distributed service, but all participants must be able to have the same \"view\" of the world. Alternately, a processor's Memory Management Unit (MMU) might have \"shadow\" MMUs to distribute its workload, and all shadow MMUs are expected to have the same accessible ranges of memory.\n\n\nIn such environments, it becomes critical for the product to ensure that this \"shared state\" is consistently modified across all distributed systems. If state is not consistently maintained across all systems, then critical transactions might take place out of order, or some users might not get the same data as other users. When this inconsistency affects correctness of operations, it can introduce vulnerabilities in mechanisms that depend on consistent state.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "664", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Cloud Computing", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Security Hardware", "Prevalence": "Undetermined"}], "DemonstrativeExamples": [{"ID": "DX-132", "Entries": [{"IntroText": "Suppose a processor's Memory Management Unit (MMU) has 5 other shadow MMUs to distribute its workload for its various cores. Each MMU has the start address and end address of \"accessible\" memory. Any time this accessible range changes (as per the processor's boot status), the main MMU sends an update message to all the shadow MMUs."}, {"BodyText": "Suppose the interconnect fabric does not prioritize such \"update\" packets over other general traffic packets. This introduces a race condition. If an attacker can flood the target with enough messages so that some of those attack packets reach the target before the new access ranges gets updated, then the attacker can leverage this scenario."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "Issues related to state and cache - creation, preservation, and update - are a significant gap in CWE that is expected to be addressed in future versions. It likely has relationships to concurrency and synchronization, incorrect behavior order, and other areas that already have some coverage in CWE, although the focus has typically been on independent processes on the same operating system - not on independent systems that are all a part of a larger system-of-systems."}], "Top25Examples": [{"Reference": "CVE-2022-22234", "Description": "An Improper Preservation of Consistency Between Independent Representations of Shared State vulnerability in the Packet Forwarding Engine (PFE) of Juniper Networks Junos OS allows a locally authenticated attacker with low privileges to cause a Denial of Service (DoS). If the device is very busy for example while executing a series of show commands on the CLI one or more SFPs might not be detected anymore. The system then changes its state to \"unplugged\" which is leading to traffic impact and at least a partial DoS. Once the system is less busy the port states return to their actual value. Indicators of compromise are log messages about unplugged SFPs and corresponding syspld messages without any physical or environmental cause. These can be checked by issuing the following commands: user@device# show log messages | match unplugged %PFE-6: fpc0 sfp-0/1/2 SFP unplugged %PFE-6: fpc0 sfp-0/1/3 SFP unplugged The following log messages will also be seen when this issue happens: fpc0 Error tvp_drv_syspld_read: syspld read failed for address <address> fpc0 Error[-1]:tvp_optics_presence_get - Syspld read failed for port <pic/port> fpc0 optics pres failed(-1) for pic <pic> port <port> fpc0 tvp_drv_syspld_read: i2c access retry count 200 This issue affects Juniper Networks Junos OS on EX2300 Series, EX3400 Series: All versions prior to 18.4R3-S11; 19.1 versions prior to 19.1R3-S9; 19.2 versions prior to 19.2R1-S9, 19.2R3-S5; 19.3 versions prior to 19.3R3-S6; 19.4 versions prior to 19.4R2-S7, 19.4R3-S8; 20.1 versions prior to 20.1R3-S4; 20.2 versions prior to 20.2R3-S4; 20.3 versions prior to 20.3R3-S4; 20.4 versions prior to 20.4R3-S3; 21.1 versions prior to 21.1R3-S1; 21.2 versions prior to 21.2R3; 21.3 versions prior to 21.3R2; 21.4 versions prior to 21.4R2."}]}
{"ID": "1251", "Name": "Mirrored Regions with Different Values", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product's architecture mirrors regions without ensuring that their contents always stay in sync.", "ExtendedDescription": "\n\nHaving mirrored regions with different values might result in the exposure of sensitive information or possibly system compromise.\n\n\nIn the interest of increased performance, one might need to duplicate a resource. A cache memory is a common example of this concept, which keeps a \"local\" copy of a data element in the high speed cache memory. Unfortunately, this speed improvement comes with a downside, since the product needs to ensure that the local copy always mirrors the original copy truthfully. If they get out of sync, the computational result is no longer true.\n\n\nDuring hardware design, memory is not the only item which gets mirrored. There are many other entities that get mirrored, as well: registers, memory regions, and, in some cases, even whole computational units. For example, within a multi-core processor, if all memory accesses for each and every core goes through a single Memory-Management Unit (MMU) then the MMU will become a performance bottleneck. In such cases, duplicating local MMUs that will serve only a subset of the cores rather than all of them may resolve the performance issue. These local copies are also called \"shadow copies\" or \"mirrored copies.\"\n\n\nIf the original resource never changed, local duplicate copies getting out of sync would never be an issue. However, the values of the original copy will sometimes change. When the original copy changes, the mirrored copies must also change, and change fast.\n\n\nThis situation of shadow-copy-possibly-out-of-sync-with-original-copy might occur as a result of multiple scenarios, including the following: \n\n\n  - After the values in the original copy change, due to some reason the original copy does not send the \"update\" request to its shadow copies.\n\n  - After the values in the original copy change, the original copy dutifully sends the \"update\" request to its shadow copies, but due to some reason the shadow copy does not \"execute\" this update request.\n\n  - After the values in the original copy change, the original copy sends the \"update\" request to its shadow copies, and the shadow copy executes this update request faithfully. However, during the small time period when the original copy has \"new\" values and the shadow copy is still holding the \"old\" values, an attacker can exploit the old values. Then it becomes a race condition between the attacker and the update process of who can reach the target, shadow copy first, and, if the attacker reaches first, the attacker wins.\n\n  - The attacker might send a \"spoofed\" update request to the target shadow copy, pretending that this update request is coming from the original copy. This spoofed request might cause the targeted shadow copy to update its values to some attacker-friendly values, while the original copies remain unchanged by the attacker.\n\n  - Suppose a situation where the original copy has a system of reverting back to its original value if it does not hear back from all the shadow copies that such copies have successfully completed the update request. In such a case, an attack might occur as follows: (1) the original copy might send an update request; (2) the shadow copy updates it; (3) the shadow copy sends back the successful completion message; (4) through a separate issue, the attacker is able to intercept the shadow copy's completion message. In this case, the original copy thinks that the update did not succeed, hence it reverts to its original value. Now there is a situation where the original copy has the \"old\" value, and the shadow copy has the \"new\" value.\n\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1250", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "VHDL", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Verilog", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "System on Chip", "Prevalence": "Undetermined"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control", "Accountability", "Authentication", "Authorization", "Non-Repudiation"], "Impact": ["Varies by Context"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "\n\nWhenever there are multiple, physically different copies of the same value that might change and the process to update them is not instantaneous and atomic, it is impossible to assert that the original and shadow copies will always be in sync - there will always be a time period when they are out of sync. To mitigate the consequential risk, the recommendations essentially are:\n\n\n  - Make this out-of-sync time period as small as possible, and\n\n  - Make the update process as robust as possible.\n\n", "Effectiveness": "Moderate"}], "DemonstrativeExamples": [{"ID": "DX-132", "Entries": [{"IntroText": "Suppose a processor's Memory Management Unit (MMU) has 5 other shadow MMUs to distribute its workload for its various cores. Each MMU has the start address and end address of \"accessible\" memory. Any time this accessible range changes (as per the processor's boot status), the main MMU sends an update message to all the shadow MMUs."}, {"BodyText": "Suppose the interconnect fabric does not prioritize such \"update\" packets over other general traffic packets. This introduces a race condition. If an attacker can flood the target with enough messages so that some of those attack packets reach the target before the new access ranges gets updated, then the attacker can leverage this scenario."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "Issues related to state and cache - creation, preservation, and update - are a significant gap in CWE that is expected to be addressed in future versions. It has relationships to concurrency and synchronization, incorrect behavior order, and other areas that already have some coverage in CWE, although the focus has typically been on independent processes on the same operating system - not on independent systems that are all a part of a larger system-of-systems."}]}
{"ID": "1252", "Name": "CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The CPU is not configured to provide hardware support for exclusivity of write and execute operations on memory. This allows an attacker to execute data from all of memory.", "ExtendedDescription": "\n\nCPUs provide a special bit that supports exclusivity of write and execute operations. This bit is used to segregate areas of memory to either mark them as code (instructions, which can be executed) or data (which should not be executed). In this way, if a user can write to a region of memory, the user cannot execute from that region and vice versa. This exclusivity provided by special hardware bit is leveraged by the operating system to protect executable space. While this bit is available in most modern processors by default, in some CPUs the exclusivity is implemented via a memory-protection unit (MPU) and memory-management unit (MMU) in which memory regions can be carved out with exact read, write, and execute permissions. However, if the CPU does not have an MMU/MPU, then there is no write exclusivity. Without configuring exclusivity of operations via segregated areas of memory, an attacker may be able to inject malicious code onto memory and later execute it.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "284", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Microcontroller Hardware", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Processor Hardware", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Execute Unauthorized Code or Commands"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "\n\nImplement a dedicated bit that can be leveraged by the Operating System to mark data areas as non-executable. If such a bit is not available in the CPU, implement MMU/MPU (memory management unit / memory protection unit).\n"}, {"Phase": ["Integration"], "Description": "\n\nIf MMU/MPU are not available, then the firewalls need to be implemented in the SoC interconnect to mimic the write-exclusivity operation.\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "MCS51 Microcontroller (based on 8051) does not have a special bit to support write exclusivity. It also does not have an MMU/MPU support. The Cortex-M CPU has an optional MPU that supports up to 8 regions."}, {"Nature": "Bad", "Language": "Other", "ExampleCode": "```\n\tThe optional MPU is not configured.\n```"}, {"BodyText": "If the MPU is not configured, then an attacker will be able to inject malicious data into memory and execute it."}]}], "RelatedAttackPatterns": ["679"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1253", "Name": "Incorrect Selection of Fuse Values", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The logic level used to set a system to a secure state relies on a fuse being unblown. An attacker can set the system to an insecure state merely by blowing the fuse.", "ExtendedDescription": "\n\nFuses are often used to store secret data, including security configuration data. When not blown, a fuse is considered to store a logic 0, and, when blown, it indicates a logic 1. Fuses are generally considered to be one-directional, i.e., once blown to logic 1, it cannot be reset to logic 0. However, if the logic used to determine system-security state (by leveraging the values sensed from the fuses) uses negative logic, an attacker might blow the fuse and drive the system to an insecure state.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "693", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control", "Authorization"], "Impact": ["Bypass Protection Mechanism", "Gain Privileges or Assume Identity"]}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"]}, {"Scope": ["Confidentiality"], "Impact": ["Read Memory"]}, {"Scope": ["Integrity"], "Impact": ["Modify Memory", "Execute Unauthorized Code or Commands"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Logic should be designed in a way that blown fuses do not put the product into an insecure state that can be leveraged by an attacker."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "A chip implements a secure boot and uses the sensed value of a fuse \"do_secure_boot\" to determine whether to perform a secure boot or not. If this fuse value is \"0\", the system performs secure boot. Otherwise, it does not perform secure boot.\n\n\nAn attacker blows the \"do_secure_boot\" fuse to \"1\". After reset, the attacker loads a custom bootloader, and, since the fuse value is now \"1\", the system does not perform secure boot, and the attacker can execute their custom firmware image.\n\n\nSince by default, a fuse-configuration value is a \"0\", an attacker can blow it to a \"1\" with inexpensive hardware.\n\n\nIf the logic is reversed, an attacker cannot easily reset the fuse. Note that, with specialized and expensive equipment, an attacker with full physical access might be able to \"unblow\" the fuse value to a \"0\"."}]}], "RelatedAttackPatterns": ["74"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry is still under development and will continue to see updates and content improvements."}]}
{"ID": "1254", "Name": "Incorrect Comparison Logic Granularity", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product's comparison logic is performed over a series of steps rather than across the entire string in one operation. If there is a comparison logic failure on one of these steps, the operation may be vulnerable to a timing attack that can result in the interception of the process for nefarious purposes.", "ExtendedDescription": "\n\nComparison logic is used to compare a variety of objects including passwords, Message Authentication Codes (MACs), and responses to verification challenges. When comparison logic is implemented at a finer granularity (e.g., byte-by-byte comparison) and breaks in the case of a comparison failure, an attacker can exploit this implementation to identify when exactly the failure occurred. With multiple attempts, the attacker may be able to guesses the correct password/response to challenge and elevate their privileges.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "208", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "697", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Authorization"], "Impact": ["Bypass Protection Mechanism"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "\n\nThe hardware designer should ensure that comparison logic is implemented so as to compare in one operation instead in smaller chunks.\n"}], "DemonstrativeExamples": [{"ID": "DX-173", "Entries": [{"IntroText": "Consider an example hardware module that checks a user-provided password to grant access to a user. The user-provided password is compared against a golden value in a byte-by-byte manner."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "always_comb @ (posedge clk)\n\n begin\n\n```\n\t assign check_pass[3:0] = 4'b0;\n\t for (i = 0; i < 4; i++) begin\n\t\t if (entered_pass[(i*8 - 1) : i] eq golden_pass([i*8 - 1) : i])\n\t\t\t assign check_pass[i] = 1;\n\t\t\t continue;\n\t\t else\n\t\t\t assign check_pass[i] = 0;\n\t\t\t break;\n\t\t end\n\t assign grant_access = (check_pass == 4'b1111) ? 1'b1: 1'b0;\n end\n```"}, {"BodyText": "Since the code breaks on an incorrect entry of password, an attacker can guess the correct password for that byte-check iteration with few repeat attempts."}, {"BodyText": "To fix this weakness, either the comparison of the entire string should be done all at once, or the attacker is not given an indication whether pass or fail happened by allowing the comparison to run through all bits before the grant_access signal is set."}, {"Nature": "Good", "ExampleCode": "always_comb @ (posedge clk)\n begin\n\n```\n\t assign check_pass[3:0] = 4'b0;\n\t for (i = 0; i < 4; i++) begin\n\t\t if (entered_pass[(i*8 - 1) : i] eq golden_pass([i*8 -1) : i])\n\t\t\t assign check_pass[i] = 1;\n\t\t\t continue;\n\t\t else\n\t\t\t assign check_pass[i] = 0;\n\t\t\t continue;\n\t\t end\n\t assign grant_access = (check_pass == 4'b1111) ? 1'b1: 1'b0;\n end\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2019-10482", "Description": "Smartphone OS uses comparison functions that are not in constant time, allowing side channels", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-10482"}, {"Reference": "CVE-2019-10071", "Description": "Java-oriented framework compares HMAC signatures using String.equals() instead of a constant-time algorithm, causing timing discrepancies", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-10071"}, {"Reference": "CVE-2014-0984", "Description": "Password-checking function in router terminates validation of a password entry when it encounters the first incorrect character, which allows remote attackers to obtain passwords via a brute-force attack that relies on timing differences in responses to incorrect password guesses, aka a timing side-channel attack.", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-0984"}], "RelatedAttackPatterns": ["26"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-39308", "Description": "GoCD is a continuous delivery server. GoCD helps you automate and streamline the build-test-release cycle for continuous delivery of your product. GoCD versions from 19.2.0 to 19.10.0 (inclusive) are subject to a timing attack in validation of access tokens due to use of regular string comparison for validation of the token rather than a constant time algorithm. This could allow a brute force attack on GoCD server API calls to observe timing differences in validations in order to guess an access token generated by a user for API access. This issue is fixed in GoCD version 19.11.0. As a workaround, users can apply rate limiting or insert random delays to API calls made to GoCD Server via a reverse proxy or other fronting web server. Another workaround, users may disallow use of access tokens by users by having an administrator revoke all access tokens through the \"Access Token Management\" admin function."}]}
{"ID": "1255", "Name": "Comparison Logic is Vulnerable to Power Side-Channel Attacks", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "A device's real time power consumption may be monitored during security token evaluation and the information gleaned may be used to determine the value of the reference token.", "ExtendedDescription": "\n\nThe power consumed by a device may be instrumented and monitored in real time. If the algorithm for evaluating security tokens is not sufficiently robust, the power consumption may vary by token entry comparison against the reference value. Further, if retries are unlimited, the power difference between a \"good\" entry and a \"bad\" entry may be observed and used to determine whether each entry itself is correct thereby allowing unauthorized parties to calculate the reference value.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1300", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "1259", "ViewID": "1194", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "The design of the algorithm itself may intrinsically allow the power side channel attack to be effective"}, {"Phase": "Implementation", "Note": "This weakness may be introduced during implementation despite a robust design that otherwise prevents exploitation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control", "Accountability", "Authentication", "Authorization", "Non-Repudiation"], "Impact": ["Modify Memory", "Read Memory", "Read Files or Directories", "Modify Files or Directories", "Execute Unauthorized Code or Commands", "Gain Privileges or Assume Identity", "Bypass Protection Mechanism", "Read Application Data", "Modify Application Data", "Hide Activities"], "Note": "As compromising a security token may result in complete system control, the impacts are relatively universal."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "The design phase must consider each check of a security token against a standard and the amount of power consumed during the check of a good token versus a bad token. The alternative is an all at once check where a retry counter is incremented PRIOR to the check."}, {"Phase": ["Architecture and Design"], "Description": "Another potential mitigation is to parallelize shifting of secret data (see example 2 below). Note that the wider the bus the more effective the result."}, {"Phase": ["Architecture and Design"], "Description": "An additional potential mitigation is to add random data to each crypto operation then subtract it out afterwards. This is highly effective but costly in performance, area, and power consumption. It also requires a random number generator."}, {"Phase": ["Implementation"], "Description": "If the architecture is unable to prevent the attack, using filtering components may reduce the ability to implement an attack, however, consideration must be given to the physical removal of the filter elements."}, {"Phase": ["Integration"], "Description": "During integration, avoid use of a single secret for an extended period (e.g. frequent key updates). This limits the amount of data compromised but at the cost of complexity of use."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Consider an example hardware module that checks a user-provided password (or PIN) to grant access to a user. The user-provided password is compared against a stored value byte-by-byte."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "static nonvolatile password_tries = NUM_RETRIES;\n do\n\n```\n\t while (password_tries == 0) ; // Hang here if no more password tries\n\t password_ok = 0;\n\t for (i = 0; i < NUM_PW_DIGITS; i++)\n\t\t if (GetPasswordByte() == stored_password([i])\n\t\t\t password_ok |= 1; // Power consumption is different here\n\t\t else\n\t\t\t password_ok |= 0; // than from here\n\t end\n\t if (password_ok > 0)\n\t\t password_tries = NUM_RETRIES;\n\t\t break_to_Ok_to_proceed\n\t password_tries--;\n while (true)\n // Password OK\n```"}, {"BodyText": "Since the algorithm uses a different number of 1's and 0's for password validation, a different amount of power is consumed for the good byte versus the bad byte comparison. Using this information, an attacker may be able to guess the correct password for that byte-by-byte iteration with several repeated attempts by stopping the password evaluation before it completes."}, {"BodyText": "Among various options for mitigating the string comparison is obscuring the power consumption by having opposing bit flips during bit operations. Note that in this example, the initial change of the bit values could still provide power indication depending upon the hardware itself. This possibility needs to be measured for verification."}, {"Nature": "Good", "Language": "C", "ExampleCode": "static nonvolatile password_tries = NUM_RETRIES;\n do\n\n```\n\t while (password_tries == 0) ; // Hang here if no more password tries\n\t password_tries--; // Put retry code here to catch partial retries\n\t password_ok = 0;\n\t for (i = 0; i < NUM_PW_DIGITS; i++)\n\t\t if (GetPasswordByte() == stored_password([i])\n\t\t\t password_ok |= 0x10; // Power consumption here\n\t\t else\n\t\t\t password_ok |= 0x01; // is now the same here\n\t end\n\t if ((password_ok & 1) == 0)\n\t\t password_tries = NUM_RETRIES;\n\t\t break_to_Ok_to_proceed\n while (true)\n // Password OK\n```"}]}, {"Entries": [{"IntroText": "This code demonstrates the transfer of a secret key using Serial-In/Serial-Out shift. It's easy to extract the secret using simple power analysis as each shift gives data on a single bit of the key."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "module siso(clk,rst,a,q);\n\n```\n\t input a;\n\t input clk,rst;\n\t output q;\n\t reg q;\n\t always@(posedge clk,posedge rst)\n\t begin\n\t\t if(rst==1'b1)\n\t\t\t q<1'b0;\n\t\t else\n\t\t\t q<a;\n\t end\n endmodule\n```"}, {"BodyText": "This code demonstrates the transfer of a secret key using a Parallel-In/Parallel-Out shift. In a parallel shift, data confounded by multiple bits of the key, not just one."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "module pipo(clk,rst,a,q);\n\n```\n\t input clk,rst;\n\t input[3:0]a;\n\t output[3:0]q;\n\t reg[3:0]q;\n\t always@(posedge clk,posedge rst)\n\t begin\n\t\t if (rst==1'b1)\n\t\t\t q<4'b0000;\n\t\t else\n\t\t\t q<a;\n\t end\n endmodule\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2020-12788", "Description": "CMAC verification vulnerable to timing and power attacks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-12788"}], "FunctionalAreas": ["Power"], "RelatedAttackPatterns": ["189"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1256", "Name": "Improper Restriction of Software Interfaces to Hardware Features", "Abstraction": "Base", "Structure": "Simple", "Status": "Stable", "Description": "The product provides software-controllable\n\t\t\tdevice functionality for capabilities such as power and\n\t\t\tclock management, but it does not properly limit\n\t\t\tfunctionality that can lead to modification of\n\t\t\thardware memory or register bits, or the ability to\n\t\t\tobserve physical side channels.", "ExtendedDescription": "\n\nIt is frequently assumed that physical attacks such as fault injection and side-channel analysis require an attacker to have physical access to the target device. This assumption may be false if the device has improperly secured power management features, or similar features. For mobile devices, minimizing power consumption is critical, but these devices run a wide variety of applications with different performance requirements. Software-controllable mechanisms to dynamically scale device voltage and frequency and monitor power consumption are common features in today's chipsets, but they also enable attackers to mount fault injection and side-channel attacks without having physical access to the device.\n\n\nFault injection attacks involve strategic manipulation of bits in a device to achieve a desired effect such as skipping an authentication step, elevating privileges, or altering the output of a cryptographic operation. Manipulation of the device clock and voltage supply is a well-known technique to inject faults and is cheap to implement with physical device access. Poorly protected power management features allow these attacks to be performed from software. Other features, such as the ability to write repeatedly to DRAM at a rapid rate from unprivileged software, can result in bit flips in other memory locations (Rowhammer, [REF-1083]).\n\n\nSide channel analysis requires gathering measurement traces of physical quantities such as power consumption. Modern processors often include power metering capabilities in the hardware itself (e.g., Intel RAPL) which if not adequately protected enable attackers to gather measurements necessary for performing side-channel attacks from software.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "285", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Memory Hardware", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Power Management Hardware", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Clock/Counter Hardware", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "An architect may initiate introduction of this weakness via exacting requirements for software accessible power/clock management requirements"}, {"Phase": "Implementation", "Note": "An implementer may introduce this weakness by assuming there are no consequences to unbounded power and clock management for secure components from untrusted ones."}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Modify Memory", "Modify Application Data", "Bypass Protection Mechanism"]}], "DetectionMethods": [{"Method": "Manual Analysis", "Description": "Perform a security evaluation of system-level architecture and design with software-aided physical attacks in scope."}, {"Method": "Automated Dynamic Analysis", "Description": "\n\nUse custom software to change registers that control clock settings or power settings to try to bypass security locks, or repeatedly write DRAM to try to change adjacent locations. This can be effective in extracting or changing data. The drawback is that it cannot be run before manufacturing, and it may require specialized software.\n", "Effectiveness": "Moderate"}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "\n\nEnsure proper access control mechanisms protect software-controllable features altering physical operating conditions such as clock frequency and voltage.\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This example considers the Rowhammer problem [REF-1083]. The Rowhammer issue was caused by a program in a tight loop writing repeatedly to a location to which the program was allowed to write but causing an adjacent memory location value to change."}, {"Nature": "Bad", "Language": "Other", "ExampleCode": "Continuously writing the same value to the same address causes the value of an adjacent location to change value."}, {"BodyText": "Preventing the loop required to defeat the Rowhammer exploit is not always possible:"}, {"Nature": "Good", "Language": "Other", "ExampleCode": "Redesign the RAM devices to reduce inter capacitive coupling making the Rowhammer exploit impossible."}, {"BodyText": "While the redesign may be possible for new devices, a redesign is not possible in existing devices. There is also the possibility that reducing capacitance with a relayout would impact the density of the device resulting in a less capable, more costly device."}]}, {"Entries": [{"IntroText": "Suppose a hardware design implements a set of software-accessible registers for scaling clock frequency and voltage but does not control access to these registers. Attackers may cause register and memory changes and race conditions by changing the clock or voltage of the device under their control."}]}, {"Entries": [{"IntroText": "Consider the following SoC design. Security-critical settings for scaling clock frequency and voltage are available in a range of registers bounded by [PRIV_END_ADDR : PRIV_START_ADDR] in the tmcu.csr module in the HW Root of Trust. These values are writable based on the lock_bit register in the same module. The lock_bit is only writable by privileged software running on the tmcu."}, {"BodyText": "We assume that untrusted software running on any of the Core{0-N} processors has access to the input and output ports of the hrot_iface. If untrusted software can clear the lock_bit or write the clock frequency and voltage registers due to inadequate protection, a fault injection attack could be performed."}]}], "ObservedExamples": [{"Reference": "CVE-2019-11157", "Description": "Plundervolt: Improper conditions check in voltage settings for some Intel(R) Processors may allow a privileged user to potentially enable escalation of privilege and/or information disclosure via local access [REF-1081].", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-11157"}, {"Reference": "CVE-2020-8694", "Description": "PLATYPUS Attack: Insufficient access control in the Linux kernel driver for some Intel processors allows information disclosure.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-8694"}, {"Reference": "CVE-2020-8695", "Description": "Observable discrepancy in the RAPL interface for some Intel processors allows information disclosure.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-8695"}, {"Reference": "CVE-2020-12912", "Description": "AMD extension to a Linux service does not require privileged access to the RAPL interface, allowing side-channel attacks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-12912"}, {"Reference": "CVE-2015-0565", "Description": "NaCl in 2015 allowed the CLFLUSH instruction, making Rowhammer attacks possible.", "Link": "https://www.cve.org/CVERecord?id=CVE-2015-0565"}], "FunctionalAreas": ["Power", "Clock"], "RelatedAttackPatterns": ["624", "625"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1257", "Name": "Improper Access Control Applied to Mirrored or Aliased Memory Regions", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region.\n\t\t\t", "ExtendedDescription": "\n\nHardware product designs often need to implement memory protection features that enable privileged software to define isolated memory regions and access control (read/write) policies. Isolated memory regions can be defined on different memory spaces in a design (e.g. system physical address, virtual address, memory mapped IO).\n\n\nEach memory cell should be mapped and assigned a system address that the core software can use to read/write to that memory. It is possible to map the same memory cell to multiple system addresses such that read/write to any of the aliased system addresses would be decoded to the same memory cell.\n\n\nThis is commonly done in hardware designs for redundancy and simplifying address decoding logic. If one of the memory regions is corrupted or faulty, then that hardware can switch to using the data in the mirrored memory region. Memory aliases can also be created in the system address map if the address decoder unit ignores higher order address bits when mapping a smaller address region into the full system address.\n\n\nA common security weakness that can exist in such memory mapping is that aliased memory regions could have different read/write access protections enforced by the hardware such that an untrusted agent is blocked from accessing a memory address but is not blocked from accessing the corresponding aliased memory address. Such inconsistency can then be used to bypass the access protection of the primary memory block and read or modify the protected memory.\n\n\nAn untrusted agent could also possibly create memory aliases in the system address map for malicious purposes if it is able to change the mapping of an address region or modify memory region sizes.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "284", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "119", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Memory Hardware", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Processor Hardware", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Microcontroller Hardware", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Network on Chip Hardware", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "System on Chip", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Memory"], "Likelihood": ["High"]}, {"Scope": ["Integrity"], "Impact": ["Modify Memory"], "Likelihood": ["High"]}, {"Scope": ["Availability"], "Impact": ["DoS: Instability"], "Likelihood": ["High"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "The checks should be applied for consistency access rights between primary memory regions and any mirrored or aliased memory regions. If different memory protection units (MPU) are protecting the aliased regions, their protected range definitions and policies should be synchronized."}, {"Phase": ["Architecture and Design", "Implementation"], "Description": "The controls that allow enabling memory aliases or changing the size of mapped memory regions should only be programmable by trusted software components."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In a System-on-a-Chip (SoC) design the system fabric uses 16 bit addresses. An IP unit (Unit_A) has 4 kilobyte of internal memory which is mapped into a 16 kilobyte address range in the system fabric address map.\n\n|  | \n|\n|  System Address  |  Mapped to   |\n|  0x0000 - 0x3FFF  |  Unit_A registers : 0x0000 - 0x0FFF   |\n|  0x4000 - 0xFFFF  |  Other IPs & Memory   |\n\n\t\n To protect the register controls in Unit_A unprivileged software is blocked from accessing addresses between 0x0000 - 0x0FFF. \n\n\t\n The address decoder of Unit_A masks off the higher order address bits and decodes only the lower 12 bits for computing the offset into the 4 kilobyte internal memory space."}, {"Nature": "Bad", "Language": "Other", "ExampleCode": "In this design the aliased memory address ranges are these:\n\n\n\n0x0000 - 0x0FFF\n\n\n0x1000 - 0x1FFF\n\n\n0x2000 - 0x2FFF\n\n\n0x3000 - 0x3FFF\n\n\n The same register can be accessed using four different addresses: 0x0000, 0x1000, 0x2000, 0x3000. \n\n\n The system address filter only blocks access to range 0x0000 - 0x0FFF and does not block access to the aliased addresses in 0x1000 - 0x3FFF range. Thus, untrusted software can leverage the aliased memory addresses to bypass the memory protection."}, {"Nature": "Good", "Language": "Other", "ExampleCode": "In this design the aliased memory addresses (0x1000 - 0x3FFF) could be blocked from all system software access since they are not used by software. \n\n\n Alternately, the MPU logic can be changed to apply the memory protection policies to the full address range mapped to Unit_A (0x0000 - 0x3FFF)."}]}], "RelatedAttackPatterns": ["456", "679"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1258", "Name": "Exposure of Sensitive System Information Due to Uncleared Debug Information", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The hardware does not fully clear security-sensitive values, such as keys and intermediate values in cryptographic operations, when debug mode is entered.", "ExtendedDescription": "\n\nSecurity sensitive values, keys, intermediate steps of cryptographic operations, etc. are stored in temporary registers in the hardware. If these values are not cleared when debug mode is entered they may be accessed by a debugger allowing sensitive information to be accessible by untrusted parties.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "212", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "200", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Memory"]}, {"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "\n\nWhenever debug mode is enabled, all registers containing sensitive assets must be cleared.\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "A cryptographic core in a System-On-a-Chip (SoC) is used for cryptographic acceleration and implements several cryptographic operations (e.g., computation of AES encryption and decryption, SHA-256, HMAC, etc.). The keys for these operations or the intermediate values are stored in registers internal to the cryptographic core. These internal registers are in the Memory Mapped Input Output (MMIO) space and are blocked from access by software and other untrusted agents on the SoC. These registers are accessible through the debug and test interface."}, {"Nature": "Bad", "Language": "Other", "ExampleCode": "In the above scenario, registers that store keys and intermediate values of cryptographic operations are not cleared when system enters debug mode. An untrusted actor running a debugger may read the contents of these registers and gain access to secret keys and other sensitive cryptographic information."}, {"Nature": "Good", "Language": "Other", "ExampleCode": "Whenever the chip enters debug mode, all registers containing security-sensitive data are be cleared rendering them unreadable."}]}, {"Entries": [{"IntroText": "The following code example is extracted from the AES wrapper module, aes1_wrapper, of the Hack@DAC'21 buggy OpenPiton System-on-Chip (SoC). Within this wrapper module are four memory-mapped registers: core_key, core_key0, core_key1, and core_key2. Core_key0, core_key1, and core_key2 hold encryption/decryption keys. The core_key register selects a key and sends it to the underlying AES module to execute encryption/decryption operations.\n\n\nDebug mode in processors and SoCs facilitates design debugging by granting access to internal signal/register values, including physical pin values of peripherals/core, fabric bus data transactions, and inter-peripheral registers. Debug mode allows users to gather detailed, low-level information about the design to diagnose potential issues. While debug mode is beneficial for diagnosing processors or SoCs, it also introduces a new attack surface for potential attackers. For instance, if an attacker gains access to debug mode, they could potentially read any content transmitted through the fabric bus or access encryption/decryption keys stored in cryptographic peripherals.\n\n\nTherefore, it is crucial to clear the contents of secret registers upon entering debug mode. In the provided example of flawed code below, when debug_mode_i is activated, the register core_key0 is set to zero to prevent AES key leakage during debugging. However, this protective measure is not applied to the core_key1 register [REF-1435], leaving its contents uncleared during debug mode. This oversight enables a debugger to access sensitive information. Failing to clear sensitive data during debug mode may lead to unauthorized access to secret keys and compromise system security."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "module aes1_wrapper #(\n ...\n\n```\n\t assign core_key0 = debug_mode_i ? 'b0 : { \n\t\t key_reg0[7],\n\t\t key_reg0[6],\n\t\t key_reg0[5],\n\t\t key_reg0[4],\n\t\t key_reg0[3],\n\t\t key_reg0[2],\n\t\t key_reg0[1],\n\t\t key_reg0[0]};\n```\nassign core_key1 = { ** \n\t\n\t```\n```\nkey_reg1[7],** \n\t\t\n\t\t **key_reg1[6],** \n\t\t\n\t\t **key_reg1[5],** \n\t\t\n\t\t **key_reg1[4],** \n\t\t\n\t\t **key_reg1[3],** \n\t\t\n\t\t **key_reg1[2],** \n\t\t\n\t\t **key_reg1[1],** \n\t\t\n\t\t **key_reg1[0]};** \n\t\t ...\n endmodule"}, {"BodyText": "To address the issue, it is essential to ensure that the register is cleared and zeroized after activating debug mode on the SoC. In the correct implementation illustrated in the good code below, core_keyx registers are set to zero when debug mode is activated [REF-1436]."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "module aes1_wrapper #(\n ...\n\n```\n\t assign core_key0 = debug_mode_i ? 'b0 : { \n\t\t key_reg0[7],\n\t\t key_reg0[6],\n\t\t key_reg0[5],\n\t\t key_reg0[4],\n\t\t key_reg0[3],\n\t\t key_reg0[2],\n\t\t key_reg0[1],\n\t\t key_reg0[0]};\n\t assign core_key1 = \n```\ndebug_mode_i ? 'b0 :**  { \n\t\n\t```\n\t\t key_reg1[7],\n\t\t key_reg1[6],\n\t\t key_reg1[5],\n\t\t key_reg1[4],\n\t\t key_reg1[3],\n\t\t key_reg1[2],\n\t\t key_reg1[1],\n\t\t key_reg1[0]};\n ...\n endmodule\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2021-33080", "Description": "Uncleared debug information in memory accelerator for SSD product exposes sensitive system information", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-33080"}, {"Reference": "CVE-2022-31162", "Description": "Rust library leaks Oauth client details in application debug logs", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-31162"}], "RelatedAttackPatterns": ["150", "204", "37", "545"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-31162", "Description": "Slack Morphism is an async client library for Rust. Prior to 0.41.0, it was possible for Slack OAuth client information to leak in application debug logs. Stricter and more secure debug formatting was introduced in v0.41.0 for OAuth secret types to reduce the possibility of printing sensitive information in application logs. As a workaround, do not print/output requests and responses for OAuth and client configurations in logs."}]}
{"ID": "1259", "Name": "Improper Restriction of Security Token Assignment", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected.", "ExtendedDescription": "Systems-On-A-Chip (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify which actions originated from which agent. These actions may be one of the directives: 'read', 'write', 'program', 'reset', 'fetch', 'compute', etc. Security Tokens are assigned to every agent in the System that is capable of generating an action or receiving an action from another agent. Multiple Security Tokens may be assigned to an agent and may be unique based on the agent's trust level or allowed privileges. Since the Security Tokens are integral for the maintenance of security in an SoC, they need to be protected properly. A common weakness afflicting Security Tokens is improperly restricting the assignment to trusted components. Consequently, an improperly protected Security Token may be able to be programmed by a malicious agent (i.e., the Security Token is mutable) to spoof the action as if it originated from a trusted agent.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "284", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "1294", "ViewID": "1194", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Processor Hardware", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "System on Chip", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control"], "Impact": ["Modify Files or Directories", "Execute Unauthorized Code or Commands", "Bypass Protection Mechanism", "Gain Privileges or Assume Identity", "Modify Memory", "Modify Memory", "DoS: Crash, Exit, or Restart"], "Likelihood": ["High"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "\n\n  - Security Token assignment review checks for design inconsistency and common weaknesses.\n\n  - Security-Token definition and programming flow is tested in both pre-silicon and post-silicon testing.\n\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "For example, consider a system with a register for storing an AES key for encryption and decryption. The key is of 128 bits implemented as a set of four 32-bit registers. The key register assets have an associated control register, AES_KEY_ACCESS_POLICY, which provides the necessary access controls. This access-policy register defines which agents may engage in a transaction, and the type of transaction, with the AES-key registers. Each bit in this 32-bit register defines a security Token. There could be a maximum of 32 security Tokens that are allowed access to the AES-key registers. The number of the bit when set (i.e., \"1\") allows respective action from an agent whose identity matches the number of the bit and, if \"0\" (i.e., Clear), disallows the respective action to that corresponding agent."}, {"BodyText": "Let's assume the system has two agents: a Main-controller and an Aux-controller. The respective Security Tokens are \"1\" and \"2\". \n| Register | Description | Default | \n| --- | --- | --- |\n| AES_ENC_DEC_KEY_0 | AES key [0:31] for encryption or decryption | 0x00000000  |\n| AES_ENC_DEC_KEY_1 | AES key [32:63] for encryption or decryption | 0x00000000  |\n| AES_ENC_DEC_KEY_2 | AES key [64:95] for encryption or decryption | 0x00000000  |\n| AES_ENC_DEC_KEY_3 | AES key [96:127] for encryption or decryption | 0x00000000  |\n| AES_KEY_ACCESS_POLICY | AES key access register [31:0] | 0x00000002  |"}, {"BodyText": "An agent with Security Token \"1\" has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_3 registers. As per the above access policy, the AES-Key-access policy allows access to the AES-key registers if the security Token is \"1\"."}, {"Nature": "Bad", "Language": "Other", "ExampleCode": "The Aux-controller could program its Security Token to \"1\" from \"2\"."}, {"BodyText": "The SoC does not properly protect the Security Token of the agents, and, hence, the Aux-controller in the above example can spoof the transaction (i.e., send the transaction as if it is coming from the Main-controller to access the AES-Key registers)"}, {"Nature": "Good", "Language": "Other", "ExampleCode": "The SoC needs to protect the Security Tokens. None of the agents in the SoC should have the ability to change the Security Token."}]}], "RelatedAttackPatterns": ["121", "681"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry is still under development and will continue to see updates and content improvements. Currently it is expressed as a general absence of a protection mechanism as opposed to a specific mistake, and the entry's name and description could be interpreted as applying to software."}]}
{"ID": "126", "Name": "Buffer Over-read", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations after the targeted buffer.", "ExtendedDescription": "This typically occurs when the pointer or its index is incremented to a position beyond the bounds of the buffer or when pointer arithmetic results in a position outside of the valid memory location to name a few. This may result in exposure of sensitive information or possibly a crash.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "125", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "788", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Memory"]}, {"Scope": ["Confidentiality"], "Impact": ["Bypass Protection Mechanism"], "Note": "By reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "DemonstrativeExamples": [{"ID": "DX-91", "Entries": [{"IntroText": "In the following C/C++ example the method processMessageFromSocket() will get a message from a socket, placed into a buffer, and will parse the contents of the buffer into a structure that contains the message length and the message body. A for loop is used to copy the message body into a local character string which will be passed to another method for processing."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint processMessageFromSocket(int socket) {\n\t\t\tint success;\n\t\t\tchar buffer[BUFFER_SIZE];\n\t\t\tchar message[MESSAGE_SIZE];\n```\n// get message from socket and store into buffer* \n\t\t\t\n\t\t\t\n\t\t\t *//Ignoring possibliity that buffer > BUFFER_SIZE* \n\t\t\tif (getMessage(socket, buffer, BUFFER_SIZE) > 0) {\n\t\t\t```\n```\n// place contents of the buffer into message structure* \n\t\t\t\t\tExMessage *msg = recastBuffer(buffer);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t *// copy message body into string for processing* \n\t\t\t\t\tint index;\n\t\t\t\t\tfor (index = 0; index < msg->msgLength; index++) {\n\t\t\t\t\t```\n\t\t\t\t\t\tmessage[index] = msg->msgBody[index];\n\t\t\t\t\t}\n\t\t\t\t\tmessage[index] = '\\0';\n```\n// process message* \n\t\t\t\t\tsuccess = processMessage(message);}\n\t\t\treturn success;}"}, {"BodyText": "However, the message length variable from the structure is used as the condition for ending the for loop without validating that the message length variable accurately reflects the length of the message body (CWE-606). This can result in a buffer over-read (CWE-125) by reading from memory beyond the bounds of the buffer if the message length variable indicates a length that is longer than the size of a message body (CWE-130)."}]}, {"Entries": [{"IntroText": "The following C/C++ example demonstrates a buffer over-read due to a missing NULL terminator. The main method of a pattern matching utility that looks for a specific pattern within a specific file uses the string strncopy() method to copy the command line user input file name and pattern to the Filename and Pattern character arrays respectively."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint main(int argc, char **argv)\n\t{\n\t\tchar Filename[256];\n\t\tchar Pattern[32];\n```\n/* Validate number of parameters and ensure valid content */* \n\t\t...\n\t\t\n\t\t\n\t\t */* copy filename parameter to variable, may cause off-by-one overflow */* \n\t\tstrncpy(Filename, argv[1], sizeof(Filename));\n\t\t\n\t\t\n\t\t */* copy pattern parameter to variable, may cause off-by-one overflow */* \n\t\tstrncpy(Pattern, argv[2], sizeof(Pattern));\n\t\t\n\t\tprintf(\"Searching file: %s for the pattern: %s\\n\", Filename, Pattern);\n\t\tScan_File(Filename, Pattern);}"}, {"BodyText": "However, the code do not take into account that strncpy() will not add a NULL terminator when the source buffer is equal in length of longer than that provide size attribute. Therefore if a user enters a filename or pattern that are the same size as (or larger than) their respective character arrays, a NULL terminator will not be added (CWE-170) which leads to the printf() read beyond the expected end of the Filename and Pattern buffers."}, {"BodyText": "To fix this problem, be sure to subtract 1 from the sizeof() call to allow room for the null byte to be added."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n```\n/* copy filename parameter to variable, no off-by-one overflow */* \n\tstrncpy(Filename, argv[2], sizeof(Filename)-1);\n\tFilename[255]='\\0';\n\t\n\t\n\t */* copy pattern parameter to variable, no off-by-one overflow */* \n\tstrncpy(Pattern, argv[3], sizeof(Pattern)-1);Pattern[31]='\\0';"}]}], "ObservedExamples": [{"Reference": "CVE-2022-1733", "Description": "Text editor has out-of-bounds read past end of line while indenting C code", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-1733"}, {"Reference": "CVE-2014-0160", "Description": "Chain: \"Heartbleed\" bug receives an inconsistent length parameter (CWE-130) enabling an out-of-bounds read (CWE-126), returning memory that could include private cryptographic keys and other sensitive data.", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-0160"}, {"Reference": "CVE-2009-2523", "Description": "Chain: product does not handle when an input string is not NULL terminated, leading to buffer over-read or heap-based buffer overflow.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2523"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "These problems may be resultant from missing sentinel values (CWE-463) or trusting a user-influenced input length variable."}], "Top25Examples": [{"Reference": "CVE-2021-35005", "Description": "This vulnerability allows local attackers to disclose sensitive information on affected installations of TeamViewer. An attacker must first obtain the ability to execute low-privileged code on the target system in order to exploit this vulnerability. The specific flaw exists within the TeamViewer service. The issue results from the lack of proper validation of user-supplied data, which can result in a read past the end of an allocated array. An attacker can leverage this in conjunction with other vulnerabilities to execute arbitrary code in the context of SYSTEM. Was ZDI-CAN-13818."}, {"Reference": "CVE-2021-44018", "Description": "A vulnerability has been identified in JT2Go (All versions < V13.2.0.7), Solid Edge SE2021 (All versions < SE2021MP9), Solid Edge SE2022 (All versions < SE2022MP1), Teamcenter Visualization V13.1 (All versions < V13.1.0.9), Teamcenter Visualization V13.2 (All versions < V13.2.0.7), Teamcenter Visualization V13.3 (All versions < V13.3.0.1). The plmxmlAdapterSE70.dll library is vulnerable to memory corruption condition while parsing specially crafted PAR files. An attacker could leverage this vulnerability to execute code in the context of the current process. (ZDI-CAN-15112)"}, {"Reference": "CVE-2021-46154", "Description": "A vulnerability has been identified in Simcenter Femap V2020.2 (All versions), Simcenter Femap V2021.1 (All versions). Affected application contains a stack based buffer overflow vulnerability while parsing NEU files. This could allow an attacker to execute code in the context of the current process. (ZDI-CAN-14646, ZDI-CAN-14679, ZDI-CAN-15084, ZDI-CAN-15304)"}, {"Reference": "CVE-2021-46155", "Description": "A vulnerability has been identified in Simcenter Femap V2020.2 (All versions), Simcenter Femap V2021.1 (All versions). Affected application contains a stack based buffer overflow vulnerability while parsing NEU files. This could allow an attacker to execute code in the context of the current process. (ZDI-CAN-14683, ZDI-CAN-15283, ZDI-CAN-15303, ZDI-CAN-15593)"}, {"Reference": "CVE-2022-1629", "Description": "Buffer Over-read in function find_next_quote in GitHub repository vim/vim prior to 8.2.4925. This vulnerabilities are capable of crashing software, Modify Memory, and possible remote execution"}, {"Reference": "CVE-2022-1714", "Description": "Out-of-bounds Read in GitHub repository radareorg/radare2 prior to 5.7.0. The bug causes the program reads data past the end of the intented buffer. Typically, this can allow attackers to read sensitive information from other memory locations or cause a crash."}, {"Reference": "CVE-2022-1720", "Description": "Buffer Over-read in function grab_file_name in GitHub repository vim/vim prior to 8.2.4956. This vulnerability is capable of crashing the software, memory modification, and possible remote execution."}, {"Reference": "CVE-2022-1769", "Description": "Buffer Over-read in GitHub repository vim/vim prior to 8.2.4974."}, {"Reference": "CVE-2022-1927", "Description": "Buffer Over-read in GitHub repository vim/vim prior to 8.2."}, {"Reference": "CVE-2022-2175", "Description": "Buffer Over-read in GitHub repository vim/vim prior to 8.2."}, {"Reference": "CVE-2022-22519", "Description": "A remote, unauthenticated attacker can send a specific crafted HTTP or HTTPS requests causing a buffer over-read resulting in a crash of the webserver of the CODESYS Control runtime system."}, {"Reference": "CVE-2022-23537", "Description": "PJSIP is a free and open source multimedia communication library written in C language implementing standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE. Buffer overread is possible when parsing a specially crafted STUN message with unknown attribute. The vulnerability affects applications that uses STUN including PJNATH and PJSUA-LIB. The patch is available as a commit in the master branch (2.13.1)."}, {"Reference": "CVE-2022-23547", "Description": "PJSIP is a free and open source multimedia communication library written in C language implementing standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE. This issue is similar to GHSA-9pfh-r8x4-w26w. Possible buffer overread when parsing a certain STUN message. The vulnerability affects applications that uses STUN including PJNATH and PJSUA-LIB. The patch is available as commit in the master branch."}, {"Reference": "CVE-2022-2845", "Description": "Improper Validation of Specified Quantity in Input in GitHub repository vim/vim prior to 9.0.0218. "}, {"Reference": "CVE-2022-3178", "Description": "Buffer Over-read in GitHub repository gpac/gpac prior to 2.1.0-DEV."}, {"Reference": "CVE-2022-32141", "Description": "Multiple CODESYS Products are prone to a buffer over read. A low privileged remote attacker may craft a request with an invalid offset, which can cause an internal buffer over-read, resulting in a denial-of-service condition. User interaction is not required."}, {"Reference": "CVE-2022-33236", "Description": "Transient DOS due to buffer over-read in WLAN firmware while parsing cipher suite info attributes. in Snapdragon Compute, Snapdragon Connectivity, Snapdragon Mobile, Snapdragon Wired Infrastructure and Networking"}, {"Reference": "CVE-2022-41318", "Description": "A buffer over-read was discovered in libntlmauth in Squid 2.5 through 5.6. Due to incorrect integer-overflow protection, the SSPI and SMB authentication helpers are vulnerable to reading unintended memory locations. In some configurations, cleartext credentials from these locations are sent to a client. This is fixed in 5.7."}, {"Reference": "CVE-2022-46393", "Description": "An issue was discovered in Mbed TLS before 2.28.2 and 3.x before 3.3.0. There is a potential heap-based buffer overflow and heap-based buffer over-read in DTLS if MBEDTLS_SSL_DTLS_CONNECTION_ID is enabled and MBEDTLS_SSL_CID_IN_LEN_MAX > 2 * MBEDTLS_SSL_CID_OUT_LEN_MAX."}, {"Reference": "CVE-2022-47517", "Description": "An issue was discovered in the libsofia-sip fork in drachtio-server before 0.8.19. It allows remote attackers to cause a denial of service (daemon crash) via a crafted UDP message that causes a url_canonize2 heap-based buffer over-read because of an off-by-one error."}, {"Reference": "CVE-2022-27940", "Description": "tcprewrite in Tcpreplay 4.4.1 has a heap-based buffer over-read in get_ipv6_next in common/get.c."}, {"Reference": "CVE-2022-27941", "Description": "tcprewrite in Tcpreplay 4.4.1 has a heap-based buffer over-read in get_l2len_protocol in common/get.c."}, {"Reference": "CVE-2022-27942", "Description": "tcpprep in Tcpreplay 4.4.1 has a heap-based buffer over-read in parse_mpls in common/get.c."}, {"Reference": "CVE-2022-41916", "Description": "Heimdal is an implementation of ASN.1/DER, PKIX, and Kerberos. Versions prior to 7.7.1 are vulnerable to a denial of service vulnerability in Heimdal's PKI certificate validation library, affecting the KDC (via PKINIT) and kinit (via PKINIT), as well as any third-party applications using Heimdal's libhx509. Users should upgrade to Heimdal 7.7.1 or 7.8. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-41862", "Description": "In PostgreSQL, a modified, unauthenticated server can send an unterminated string during the establishment of Kerberos transport encryption. In certain conditions a server can cause a libpq client to over-read and report an error message containing uninitialized bytes."}, {"Reference": "CVE-2022-1907", "Description": "Buffer Over-read in GitHub repository bfabiszewski/libmobi prior to 0.11."}, {"Reference": "CVE-2022-1908", "Description": "Buffer Over-read in GitHub repository bfabiszewski/libmobi prior to 0.11."}, {"Reference": "CVE-2022-1987", "Description": "Buffer Over-read in GitHub repository bfabiszewski/libmobi prior to 0.11."}, {"Reference": "CVE-2022-2124", "Description": "Buffer Over-read in GitHub repository vim/vim prior to 8.2."}, {"Reference": "CVE-2022-22816", "Description": "path_getbbox in path.c in Pillow before 9.0.0 has a buffer over-read during initialization of ImagePath.Path."}, {"Reference": "CVE-2022-2301", "Description": "Buffer Over-read in GitHub repository hpjansson/chafa prior to 1.10.3."}, {"Reference": "CVE-2022-23130", "Description": "Buffer Over-read vulnerability in Mitsubishi Electric MC Works64 versions 4.00A (10.95.201.23) to 4.04E (10.95.210.01), ICONICS GENESIS64 versions 10.97 and prior and ICONICS Hyper Historian versions 10.97 and prior allows an attacker to cause a DoS condition in the database server by getting a legitimate user to import a configuration file containing specially crafted stored procedures into GENESIS64 or MC Works64 and execute commands against the database from GENESIS64 or MC Works64."}, {"Reference": "CVE-2022-25653", "Description": "Information disclosure in video due to buffer over-read while processing avi file in Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Wearables"}, {"Reference": "CVE-2022-25676", "Description": "Information disclosure in video due to buffer over-read while parsing avi files in Snapdragon Auto, Snapdragon Compute, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Wearables"}, {"Reference": "CVE-2022-25706", "Description": "Information disclosure in Bluetooth driver due to buffer over-read while reading l2cap length in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Wearables"}, {"Reference": "CVE-2022-25728", "Description": "Information disclosure in modem due to buffer over-read while processing response from DNS server"}, {"Reference": "CVE-2022-25749", "Description": "Transient Denial-of-Service in WLAN due to buffer over-read while parsing MDNS frames. in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer Electronics Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon IoT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables, Snapdragon Wired Infrastructure and Networking"}, {"Reference": "CVE-2022-27523", "Description": "A buffer over-read can be exploited in Autodesk TrueView 2022 may lead to an exposure of sensitive information or a crash through using a maliciously crafted DWG file as an Input. This vulnerability in conjunction with other vulnerabilities could lead to code execution in the context of the current process."}, {"Reference": "CVE-2022-27607", "Description": "Bento4 1.6.0-639 has a heap-based buffer over-read in the AP4_HvccAtom class, a different issue than CVE-2018-14531."}, {"Reference": "CVE-2022-28739", "Description": "There is a buffer over-read in Ruby before 2.6.10, 2.7.x before 2.7.6, 3.x before 3.0.4, and 3.1.x before 3.1.2. It occurs in String-to-Float conversion, including Kernel#Float and String#to_f."}, {"Reference": "CVE-2022-28805", "Description": "singlevar in lparser.c in Lua from (including) 5.4.0 up to (excluding) 5.4.4 lacks a certain luaK_exp2anyregup call, leading to a heap-based buffer over-read that might affect a system that compiles untrusted Lua code."}, {"Reference": "CVE-2022-29537", "Description": "gp_rtp_builder_do_hevc in ietf/rtp_pck_mpeg4.c in GPAC 2.0.0 has a heap-based buffer over-read, as demonstrated by MP4Box."}, {"Reference": "CVE-2022-33221", "Description": "Information disclosure in Trusted Execution Environment due to buffer over-read while processing metadata verification requests."}, {"Reference": "CVE-2022-33229", "Description": "Information disclosure due to buffer over-read in Modem while using static array to process IPv4 packets."}, {"Reference": "CVE-2022-33235", "Description": "Information disclosure due to buffer over-read in WLAN firmware while parsing security context info attributes. in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer Electronics Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables, Snapdragon Wired Infrastructure and Networking"}, {"Reference": "CVE-2022-33237", "Description": "Transient DOS due to buffer over-read in WLAN firmware while processing PPE threshold. in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer Electronics Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables, Snapdragon Wired Infrastructure and Networking"}, {"Reference": "CVE-2022-33252", "Description": "Information disclosure due to buffer over-read in WLAN while handling IBSS beacons frame."}, {"Reference": "CVE-2022-33253", "Description": "Transient DOS due to buffer over-read in WLAN while parsing corrupted NAN frames."}, {"Reference": "CVE-2022-33255", "Description": "Information disclosure due to buffer over-read in Bluetooth HOST while processing GetFolderItems and GetItemAttribute Cmds from peer device."}, {"Reference": "CVE-2022-33268", "Description": "Information disclosure due to buffer over-read in Bluetooth HOST while pairing and connecting A2DP. in Snapdragon Auto, Snapdragon Compute, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables"}, {"Reference": "CVE-2022-33271", "Description": "Information disclosure due to buffer over-read in WLAN while parsing NMF frame."}, {"Reference": "CVE-2022-33283", "Description": "Information disclosure due to buffer over-read in WLAN while WLAN frame parsing due to missing frame length check."}, {"Reference": "CVE-2022-33284", "Description": "Information disclosure due to buffer over-read in WLAN while parsing BTM action frame."}, {"Reference": "CVE-2022-33285", "Description": "Transient DOS due to buffer over-read in WLAN while parsing WLAN CSA action frames."}, {"Reference": "CVE-2022-33286", "Description": "Transient DOS due to buffer over-read in WLAN while processing 802.11 management frames."}, {"Reference": "CVE-2022-33306", "Description": "Transient DOS due to buffer over-read in WLAN while processing an incoming management frame with incorrectly filled IEs."}, {"Reference": "CVE-2022-33309", "Description": "Transient DOS due to buffer over-read in WLAN Firmware while parsing secure FTMR frame with size lesser than 39 Bytes."}, {"Reference": "CVE-2022-33968", "Description": "In BIG-IP Versions 17.0.x before 17.0.0.1, 16.1.x before 16.1.3.1, 15.1.x before 15.1.6.1, 14.1.x before 14.1.5.1, and all versions of 13.1.x, when an LTM monitor or APM SSO is configured on a virtual server, and NTLM challenge-response is in use, undisclosed traffic can cause a buffer over-read. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated."}, {"Reference": "CVE-2022-34145", "Description": "Transient DOS due to buffer over-read in WLAN Host while parsing frame information."}, {"Reference": "CVE-2022-39836", "Description": "An issue was discovered in Connected Vehicle Systems Alliance (COVESA) dlt-daemon through 2.18.8. Due to a faulty DLT file parser, a crafted DLT file that crashes the process can be created. This is due to missing validation checks. There is a heap-based buffer over-read of one byte."}, {"Reference": "CVE-2022-40320", "Description": "cfg_tilde_expand in confuse.c in libConfuse 3.3 has a heap-based buffer over-read."}, {"Reference": "CVE-2022-40512", "Description": "Transient DOS in WLAN Firmware due to buffer over-read while processing probe response or beacon."}, {"Reference": "CVE-2022-40535", "Description": "Transient DOS due to buffer over-read in WLAN while sending a packet to device."}, {"Reference": "CVE-2022-40737", "Description": "An issue was discovered in Bento4 through 1.6.0-639. A buffer over-read exists in the function AP4_StdcFileByteStream::WritePartial located in System/StdC/Ap4StdCFileByteStream.cpp, called from AP4_ByteStream::Write and AP4_HdlrAtom::WriteFields."}, {"Reference": "CVE-2022-42905", "Description": "In wolfSSL before 5.5.2, if callback functions are enabled (via the WOLFSSL_CALLBACKS flag), then a malicious TLS 1.3 client or network attacker can trigger a buffer over-read on the heap of 5 bytes. (WOLFSSL_CALLBACKS is only intended for debugging.)"}, {"Reference": "CVE-2022-43995", "Description": "Sudo 1.8.0 through 1.9.12, with the crypt() password backend, contains a plugins/sudoers/auth/passwd.c array-out-of-bounds error that can result in a heap-based buffer over-read. This can be triggered by arbitrary local users with access to Sudo by entering a password of seven characters or fewer. The impact could vary depending on the system libraries, compiler, and processor architecture."}, {"Reference": "CVE-2022-4432", "Description": "A buffer over-read vulnerability was reported in the ThinkPadX13s BIOS PersistenceConfigDxe driver that could allow a local attacker with elevated privileges to cause information disclosure."}, {"Reference": "CVE-2022-4433", "Description": "A buffer over-read vulnerability was reported in the ThinkPadX13s BIOS LenovoSetupConfigDxe driver that could allow a local attacker with elevated privileges to cause information disclosure."}, {"Reference": "CVE-2022-4434", "Description": "A buffer over-read vulnerability was reported in the ThinkPadX13s BIOS driver that could allow a local attacker with elevated privileges to cause information disclosure."}, {"Reference": "CVE-2022-4435", "Description": "A buffer over-read vulnerability was reported in the ThinkPadX13s BIOS LenovoRemoteConfigUpdateDxe driver that could allow a local attacker with elevated privileges to cause information disclosure."}, {"Reference": "CVE-2022-45909", "Description": "drachtio-server before 0.8.19 has a heap-based buffer over-read via a long Request-URI in an INVITE request."}, {"Reference": "CVE-2022-30976", "Description": "GPAC 2.0.0 misuses a certain Unicode utf8_wcslen (renamed gf_utf8_wcslen) function in utils/utf.c, resulting in a heap-based buffer over-read, as demonstrated by MP4Box."}, {"Reference": "CVE-2022-31212", "Description": "An issue was discovered in dbus-broker before 31. It depends on c-uitl/c-shquote to parse the DBus service's Exec line. c-shquote contains a stack-based buffer over-read if a malicious Exec line is supplied."}, {"Reference": "CVE-2022-31796", "Description": "libjpeg 1.63 has a heap-based buffer over-read in HierarchicalBitmapRequester::FetchRegion in hierarchicalbitmaprequester.cpp because the MCU size can be different between allocation and use."}, {"Reference": "CVE-2022-32166", "Description": "In ovs versions v0.90.0 through v2.5.0 are vulnerable to heap buffer over-read in flow.c. An unsafe comparison of \u201cminimasks\u201d function could lead access to an unmapped region of memory. This vulnerability is capable of crashing the software, memory modification, and possible remote execution."}, {"Reference": "CVE-2022-32200", "Description": "libdwarf 0.4.0 has a heap-based buffer over-read in _dwarf_check_string_valid in dwarf_util.c."}, {"Reference": "CVE-2022-34299", "Description": "There is a heap-based buffer over-read in libdwarf 0.4.0. This issue is related to dwarf_global_formref_b."}, {"Reference": "CVE-2022-34300", "Description": "In tinyexr 1.0.1, there is a heap-based buffer over-read in tinyexr::DecodePixelData."}, {"Reference": "CVE-2022-35409", "Description": "An issue was discovered in Mbed TLS before 2.28.1 and 3.x before 3.2.0. In some configurations, an unauthenticated attacker can send an invalid ClientHello message to a DTLS server that causes a heap-based buffer over-read of up to 255 bytes. This can cause a server crash or possibly information disclosure based on error responses. Affected configurations have MBEDTLS_SSL_DTLS_CLIENT_PORT_REUSE enabled and MBEDTLS_SSL_IN_CONTENT_LEN less than a threshold that depends on the configuration: 258 bytes if using mbedtls_ssl_cookie_check, and possibly up to 571 bytes with a custom cookie check function."}, {"Reference": "CVE-2022-1533", "Description": "Buffer Over-read in GitHub repository bfabiszewski/libmobi prior to 0.11. This vulnerability is capable of arbitrary code execution."}, {"Reference": "CVE-2022-1534", "Description": "Buffer Over-read at parse_rawml.c:1416 in GitHub repository bfabiszewski/libmobi prior to 0.11. The bug causes the program reads data past the end of the intented buffer. Typically, this can allow attackers to read sensitive information from other memory locations or cause a crash."}, {"Reference": "CVE-2021-44462", "Description": "This vulnerability can be exploited by parsing maliciously crafted project files with Horner Automation Cscape EnvisionRV v4.50.3.1 and prior. The issues result from the lack of proper validation of user-supplied data, which can result in reads and writes past the end of allocated data structures. User interaction is required to exploit this vulnerability as an attacker must trick a valid user to open a malicious HMI project file."}, {"Reference": "CVE-2022-30155", "Description": "Windows Kernel Denial of Service Vulnerability"}]}
{"ID": "1260", "Name": "Improper Handling of Overlap Between Protected Memory Ranges", "Abstraction": "Base", "Structure": "Simple", "Status": "Stable", "Description": "The product allows address regions to overlap, which can result in the bypassing of intended memory protection.", "ExtendedDescription": "\n\nIsolated memory regions and access control (read/write) policies are used by hardware to protect privileged software. Software components are often allowed to change or remap memory region definitions in order to enable flexible and dynamically changeable memory management by system software.\n\n\nIf a software component running at lower privilege can program a memory address region to overlap with other memory regions used by software running at higher privilege, privilege escalation may be available to attackers. The memory protection unit (MPU) logic can incorrectly handle such an address overlap and allow the lower-privilege software to read or write into the protected memory region, resulting in privilege escalation attack. An address overlap weakness can also be used to launch a denial of service attack on the higher-privilege software memory regions.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "284", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "119", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}, {"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Memory Hardware", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Processor Hardware", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "Such issues could be introduced during hardware architecture and design or implementation and identified later during the Testing phase."}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Modify Memory", "Read Memory", "DoS: Instability"], "Likelihood": ["High"]}], "DetectionMethods": [{"Method": "Manual Analysis", "Description": "Create a high privilege memory block of any arbitrary size. Attempt to create a lower privilege memory block with an overlap of the high privilege memory block. If the creation attempt works, fix the hardware. Repeat the test.", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "\n\nEnsure that memory regions are isolated as intended and that access control (read/write) policies are used by hardware to protect privileged software.\n"}, {"Phase": ["Implementation"], "Description": "\n\nFor all of the programmable memory protection regions, the memory protection unit (MPU) design can define a priority scheme.\n\n\nFor example: if three memory regions can be programmed (Region_0, Region_1, and Region_2), the design can enforce a priority scheme, such that, if a system address is within multiple regions, then the region with the lowest ID takes priority and the access-control policy of that region will be applied. In some MPU designs, the priority scheme can also be programmed by trusted software.\n\n\nHardware logic or trusted firmware can also check for region definitions and block programming of memory regions with overlapping addresses. \n\n\nThe memory-access-control-check filter can also be designed to apply a policy filter to all of the overlapping ranges, i.e., if an address is within Region_0 and Region_1, then access to this address is only granted if both Region_0 and Region_1 policies allow the access.\n", "Effectiveness": "High"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "For example, consider a design with a 16-bit address that has two software privilege levels: Privileged_SW and Non_privileged_SW. To isolate the system memory regions accessible by these two privilege levels, the design supports three memory regions: Region_0, Region_1, and Region_2.\n\n\nEach region is defined by two 32 bit registers: its range and its access policy.\n\n\n  - Address_range[15:0]: specifies the Base address of the region\n\n  - Address_range[31:16]: specifies the size of the region\n\n  - Access_policy[31:0]: specifies what types of software can access a region and which actions are allowed\n\nCertain bits of the access policy are defined symbolically as follows:\n\n  - Access_policy.read_np: if set to one, allows reads from Non_privileged_SW\n\n  - Access_policy.write_np: if set to one, allows writes from Non_privileged_SW\n\n  - Access_policy.execute_np: if set to one, allows code execution by Non_privileged_SW\n\n  - Access_policy.read_p: if set to one, allows reads from Privileged_SW\n\n  - Access_policy.write_p: if set to one, allows writes from Privileged_SW\n\n  - Access_policy.execute_p: if set to one, allows code execution by Privileged_SW\n\nFor any requests from software, an address-protection filter checks the address range and access policies for each of the three regions, and only allows software access if all three filters allow access.\n\nConsider the following goals for access control as intended by the designer:\n\n\n  - Region_0 & Region_1: registers are programmable by Privileged_SW\n\n  - Region_2: registers are programmable by Non_privileged_SW\n\nThe intention is that Non_privileged_SW cannot modify memory region and policies defined by Privileged_SW in Region_0 and Region_1. Thus, it cannot read or write the memory regions that Privileged_SW is using."}, {"Nature": "Bad", "ExampleCode": "Non_privileged_SW can program the Address_range register for Region_2 so that its address overlaps with the ranges defined by Region_0 or Region_1. Using this capability, it is possible for Non_privileged_SW to block any memory region from being accessed by Privileged_SW, i.e., Region_0 and Region_1."}, {"BodyText": "This design could be improved in several ways."}, {"Nature": "Good", "ExampleCode": "Ensure that software accesses to memory regions are only permitted if all three filters permit access. Additionally, the scheme could define a memory region priority to ensure that Region_2 (the memory region defined by Non_privileged_SW) cannot overlap Region_0 or Region_1 (which are used by Privileged_SW)."}]}, {"Entries": [{"IntroText": "The example code below is taken from the IOMMU controller module of the HACK@DAC'19 buggy CVA6 SoC [REF-1338]. The static memory map is composed of a set of Memory-Mapped Input/Output (MMIO) regions covering different IP agents within the SoC. Each region is defined by two 64-bit variables representing the base address and size of the memory region (XXXBase and XXXLength)."}, {"BodyText": "In this example, we have 12 IP agents, and only 4 of them are called out for illustration purposes in the code snippets. Access to the AES IP MMIO region is considered privileged as it provides access to AES secret key, internal states, or decrypted data."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "```\n\t... \n\t\t localparam logic[63:0] PLICLength = 64'h03FF_FFFF;\n```\nlocalparam logic[63:0] UARTLength = 64'h0011_1000;** \n\t\t\n\t\t **localparam logic[63:0] AESLength = 64'h0000_1000;** \n\t\t localparam logic[63:0] SPILength = 64'h0080_0000;\n\t\t\n\t```\n\t\t...\n\t\t typedef enum logic [63:0] {\n\t\t\t ...\n\t\t\t PLICBase = 64'h0C00_0000,\n```\nUARTBase = 64'h1000_0000,** \n\t\t\t\n\t\t\t **AESBase = 64'h1010_0000,** \n\t\t\t SPIBase = 64'h2000_0000,\n\t\t\t ..."}, {"BodyText": "The vulnerable code allows the overlap between the protected MMIO region of the AES peripheral and the unprotected UART MMIO region. As a result, unprivileged users can access the protected region of the AES IP. In the given vulnerable example UART MMIO region starts at address 64'h1000_0000 and ends at address 64'h1011_1000 (UARTBase is 64'h1000_0000, and the size of the region is provided by the UARTLength of 64'h0011_1000)."}, {"BodyText": "On the other hand, the AES MMIO region starts at address 64'h1010_0000 and ends at address 64'h1010_1000, which implies an overlap between the two peripherals' memory regions. Thus, any user with access to the UART can read or write the AES MMIO region, e.g., the AES secret key."}, {"BodyText": "To mitigate this issue, remove the overlapping address regions by decreasing the size of the UART memory region or adjusting memory bases for all the remaining peripherals. [REF-1339]"}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "```\n\t... \n\t\t localparam logic[63:0] PLICLength = 64'h03FF_FFFF;\n```\nlocalparam logic[63:0] UARTLength = 64'h0000_1000;** \n\t\t localparam logic[63:0] AESLength = 64'h0000_1000;\n\t\t localparam logic[63:0] SPILength = 64'h0080_0000;\n\t\t\n\t```\n\t\t...\n\t\t typedef enum logic [63:0] {\n\t\t\t ...\n\t\t\t PLICBase = 64'h0C00_0000,\n\t\t\t UARTBase = 64'h1000_0000,\n\t\t\t AESBase = 64'h1010_0000,\n\t\t\t SPIBase = 64'h2000_0000,\n\t\t\t ...\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2008-7096", "Description": "virtualization product allows compromise of hardware product by accessing certain remapping registers.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-7096"}, {"Reference": "[REF-1100]", "Description": "processor design flaw allows ring 0 code to access more privileged rings by causing a register window to overlap a range of protected system RAM [REF-1100]", "Link": "https://github.com/xoreaxeaxeax/sinkhole/blob/master/us-15-Domas-TheMemorySinkhole-wp.pdf"}], "RelatedAttackPatterns": ["456", "679"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "As of CWE 4.6, CWE-1260 and CWE-1316 are siblings under view 1000, but CWE-1260 might be a parent of CWE-1316. More analysis is warranted."}]}
{"ID": "1261", "Name": "Improper Handling of Single Event Upsets", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The hardware logic does not effectively handle when single-event upsets (SEUs) occur.", "ExtendedDescription": "\n\nTechnology trends such as CMOS-transistor down-sizing, use of new materials, and system-on-chip architectures continue to increase the sensitivity of systems to soft errors. These errors are random, and their causes might be internal (e.g., interconnect coupling) or external (e.g., cosmic radiation). These soft errors are not permanent in nature and cause temporary bit flips known as single-event upsets (SEUs). SEUs are induced errors in circuits caused when charged particles lose energy by ionizing the medium through which they pass, leaving behind a wake of electron-hole pairs that cause temporary failures. If these failures occur in security-sensitive modules in a chip, it might compromise the security guarantees of the chip. For instance, these temporary failures could be bit flips that change the privilege of a regular user to root.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1384", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "1254", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability", "Access Control"], "Impact": ["DoS: Crash, Exit, or Restart", "DoS: Instability", "Gain Privileges or Assume Identity", "Bypass Protection Mechanism"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "\n\nImplement triple-modular redundancy around security-sensitive modules.\n"}, {"Phase": ["Architecture and Design"], "Description": "\n\nSEUs mostly affect SRAMs. For SRAMs storing security-critical data, implement Error-Correcting-Codes (ECC) and Address Interleaving.\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This is an example from [REF-1089]. See the reference for full details of this issue."}, {"BodyText": "Parity is error detecting but not error correcting."}, {"Nature": "Bad", "Language": "Other", "ExampleCode": "Due to single-event upsets, bits are flipped in memories. As a result, memory-parity checks fail, which results in restart and a temporary denial of service of two to three minutes."}, {"Nature": "Good", "Language": "Other", "ExampleCode": "Using error-correcting codes could have avoided the restart caused by SEUs."}]}, {"Entries": [{"IntroText": "In 2016, a security researcher, who was also a patient using a pacemaker, was on an airplane when a bit flip occurred in the pacemaker, likely due to the higher prevalence of cosmic radiation at such heights. The pacemaker was designed to account for bit flips and went into a default safe mode, which still forced the patient to go to a hospital to get it reset. The bit flip also inadvertently enabled the researcher to access the crash file, perform reverse engineering, and detect a hard-coded key. [REF-1101]"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1262", "Name": "Improper Access Control for Register Interface", "Abstraction": "Base", "Structure": "Simple", "Status": "Stable", "Description": "The product uses memory-mapped I/O registers that act as an interface to hardware functionality from software, but there is improper access control to those registers.", "ExtendedDescription": "\n\nSoftware commonly accesses peripherals in a System-on-Chip (SoC) or other device through a memory-mapped register interface. Malicious software could tamper with any security-critical hardware data that is accessible directly or indirectly through the register interface, which could lead to a loss of confidentiality and integrity.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "284", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "This weakness may be exploited if the register interface design does not adequately protect hardware assets from software."}, {"Phase": "Implementation", "Note": "Mis-implementation of access control policies may inadvertently allow access to hardware assets through the register interface."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Memory", "Read Application Data", "Modify Memory", "Modify Application Data", "Gain Privileges or Assume Identity", "Bypass Protection Mechanism", "Unexpected State", "Alter Execution Logic"], "Note": "Confidentiality of hardware assets may be violated if the protected information can be read out by software through the register interface. Registers storing security state, settings, other security-critical data may be corruptible by software without correctly implemented protections."}], "DetectionMethods": [{"Method": "Manual Analysis", "Description": "This is applicable in the Architecture phase before implementation started. Make sure access policy is specified for the entire memory map. Manual analysis may not ensure the implementation is correct.", "Effectiveness": "Moderate"}, {"Method": "Manual Analysis", "Description": "Registers controlling hardware should have access control implemented. This access control may be checked manually for correct implementation. Items to check consist of how are trusted parties set, how are trusted parties verified, how are accesses verified, etc. Effectiveness of a manual analysis will vary depending upon how complicated the interface is constructed.", "Effectiveness": "Moderate"}, {"Method": "Simulation / Emulation", "Description": "Functional simulation is applicable during the Implementation Phase. Testcases must be created and executed for memory mapped registers to verify adherence to the access control policy. This method can be effective, since functional verification needs to be performed on the design, and verification for this weakness will be included. There can be difficulty covering the entire memory space during the test.", "Effectiveness": "Moderate"}, {"Method": "Formal Verification", "Description": "Formal verification is applicable during the Implementation phase. Assertions need to be created in order to capture illegal register access scenarios and prove that they cannot occur. Formal methods are exhaustive and can be very effective, but creating the cases for large designs may be complex and difficult.", "Effectiveness": "High"}, {"Method": "Automated Analysis", "Description": "Information flow tracking can be applicable during the Implementation phase. Security sensitive data (assets) - for example, as stored in registers - is automatically tracked over time through the design to verify the data doesn't reach illegal destinations that violate the access policies for the memory map. This method can be very effective when used together with simulation and emulation, since detecting violations doesn't rely on specific scenarios or data values. This method does rely on simulation and emulation, so testcases must exist in order to use this method.", "Effectiveness": "High"}, {"Method": "Architecture or Design Review", "Description": "Manual documentation review of the system memory map, register specification, and permissions associated with accessing security-relevant functionality exposed via memory-mapped registers.", "Effectiveness": "Moderate"}, {"Method": "Fuzzing", "Description": "Perform penetration testing (either manual or semi-automated with fuzzing) to verify that access control mechanisms such as the memory protection units or on-chip bus firewall settings adequately protect critical hardware registers from software access.", "Effectiveness": "Moderate"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Design proper policies for hardware register access from software."}, {"Phase": ["Implementation"], "Description": "Ensure that access control policies for register access are implemented in accordance with the specified design."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The register interface provides software access to hardware functionality. This functionality is an attack surface. This attack surface may be used to run untrusted code on the system through the register interface. As an example, cryptographic accelerators require a mechanism for software to select modes of operation and to provide plaintext or ciphertext data to be encrypted or decrypted as well as other functions. This functionality is commonly provided through registers."}, {"Nature": "Bad", "ExampleCode": "Cryptographic key material stored in registers inside the cryptographic accelerator can be accessed by software."}, {"Nature": "Good", "ExampleCode": "Key material stored in registers should never be accessible to software. Even if software can provide a key, all read-back paths to software should be disabled."}]}, {"Entries": [{"IntroText": "The example code is taken from the Control/Status Register (CSR) module inside the processor core of the HACK@DAC'19 buggy CVA6 SoC [REF-1340]. In RISC-V ISA [REF-1341], the CSR file contains different sets of registers with different privilege levels, e.g., user mode (U), supervisor mode (S), hypervisor mode (H), machine mode (M), and debug mode (D), with different read-write policies, read-only (RO) and read-write (RW). For example, machine mode, which is the highest privilege mode in a RISC-V system, registers should not be accessible in user, supervisor, or hypervisor modes."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "```\n\tif (csr_we || csr_read) begin \n```\nif ((riscv::priv_lvl_t'(priv_lvl_o & csr_addr.csr_decode.priv_lvl) != csr_addr.csr_decode.priv_lvl) && !(csr_addr.address==riscv::CSR_MEPC)) begin** \n\t\t\n\t\t```\n\t\t\t csr_exception_o.cause = riscv::ILLEGAL_INSTR;\n\t\t\t csr_exception_o.valid = 1'b1;\n\t\t end\n\t\t // check access to debug mode only CSRs\n\t\t if (csr_addr_i[11:4] == 8'h7b && !debug_mode_q) begin\n\t\t\t csr_exception_o.cause = riscv::ILLEGAL_INSTR;\n\t\t\t csr_exception_o.valid = 1'b1;\n\t\t end \n\t end \n```"}, {"BodyText": "The vulnerable example code allows the machine exception program counter (MEPC) register to be accessed from a user mode program by excluding the MEPC from the access control check. MEPC as per the RISC-V specification can be only written or read by machine mode code. Thus, the attacker in the user mode can run code in machine mode privilege (privilege escalation)."}, {"BodyText": "To mitigate the issue, fix the privilege check so that it throws an Illegal Instruction Exception for user mode accesses to the MEPC register. [REF-1345]"}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "```\n\tif (csr_we || csr_read) begin \n```\nif ((riscv::priv_lvl_t'(priv_lvl_o & csr_addr.csr_decode.priv_lvl) != csr_addr.csr_decode.priv_lvl)) begin** \n\t\t\n\t\t```\n\t\t\t csr_exception_o.cause = riscv::ILLEGAL_INSTR;\n\t\t\t csr_exception_o.valid = 1'b1;\n\t\t end\n\t\t // check access to debug mode only CSRs\n\t\t if (csr_addr_i[11:4] == 8'h7b && !debug_mode_q) begin\n\t\t\t csr_exception_o.cause = riscv::ILLEGAL_INSTR;\n\t\t\t csr_exception_o.valid = 1'b1;\n\t\t end \n\t end \n```"}]}], "ObservedExamples": [{"Reference": "CVE-2014-2915", "Description": "virtualization product does not restrict access to debug and other processor registers in the hardware, allowing a crash of the host or guest OS", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-2915"}, {"Reference": "CVE-2021-3011", "Description": "virtual interrupt controller in a virtualization product allows crash of host by writing a certain invalid value to a register, which triggers a fatal error instead of returning an error code", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-3011"}, {"Reference": "CVE-2020-12446", "Description": "Driver exposes access to Model Specific Register (MSR) registers, allowing admin privileges.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-12446"}, {"Reference": "CVE-2015-2150", "Description": "Virtualization product does not restrict access to PCI command registers, allowing host crash from the guest.", "Link": "https://www.cve.org/CVERecord?id=CVE-2015-2150"}], "RelatedAttackPatterns": ["680"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1263", "Name": "Improper Physical Access Control", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product is designed with access restricted to certain information, but it does not sufficiently protect against an unauthorized actor with physical access to these areas.", "ExtendedDescription": "Sections of a product intended to have restricted access may be inadvertently or intentionally rendered accessible when the implemented physical protections are insufficient. The specific requirements around how robust the design of the physical protection mechanism needs to be depends on the type of product being protected. Selecting the correct physical protection mechanism and properly enforcing it through implementation and manufacturing are critical to the overall physical security of the product.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "284", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "1191", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "This weakness can arise if design decisions are made that do not align with the intended physical protection of the product"}, {"Phase": "Manufacturing", "Note": "While the architecture and design phase of the product may have accurately met the intended robustness for product physical protections, this phase may introduce the weakness through errors in physically manufacturing the product."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Access Control"], "Impact": ["Varies by Context"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Specific protection requirements depend strongly on contextual factors including the level of acceptable risk associated with compromise to the product's protection mechanism. Designers could incorporate anti-tampering measures that protect against or detect when the product has been tampered with."}, {"Phase": ["Testing"], "Description": "The testing phase of the lifecycle should establish a method for determining whether the protection mechanism is sufficient to prevent unauthorized access."}, {"Phase": ["Manufacturing"], "Description": "Ensure that all protection mechanisms are fully activated at the time of manufacturing and distribution."}], "RelatedAttackPatterns": ["401"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry is still under development and will continue to see updates and content improvements."}], "Top25Examples": [{"Reference": "CVE-2022-25213", "Description": "Improper physical access control and use of hard-coded credentials in /etc/passwd permits an attacker with physical access to obtain a root shell via an unprotected UART port on the device. The same port exposes an unauthenticated Das U-Boot BIOS shell."}, {"Reference": "CVE-2022-36443", "Description": "An issue was discovered in Zebra Enterprise Home Screen 4.1.19. The device allows the administrator to lock some communication channels (wireless and SD card) but it is still possible to use a physical connection (Ethernet cable) without restriction."}, {"Reference": "CVE-2022-41505", "Description": "An access control issue on TP-LInk Tapo C200 V1 devices allows physically proximate attackers to obtain root access by connecting to the UART pins, interrupting the boot process, and setting an init=/bin/sh value."}]}
{"ID": "1264", "Name": "Hardware Logic with Insecure De-Synchronization between Control and Data Channels", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The hardware logic for error handling and security checks can incorrectly forward data before the security check is complete.", "ExtendedDescription": "\n\nMany high-performance on-chip bus protocols and processor data-paths employ separate channels for control and data to increase parallelism and maximize throughput. Bugs in the hardware logic that handle errors and security checks can make it possible for data to be forwarded before the completion of the security checks. If the data can propagate to a location in the hardware observable to an attacker, loss of data confidentiality can occur. 'Meltdown' is a concrete example of how de-synchronization between data and permissions checking logic can violate confidentiality requirements. Data loaded from a page marked as privileged was returned to the cpu regardless of current privilege level for performance reasons. The assumption was that the cpu could later remove all traces of this data during the handling of the illegal memory access exception, but this assumption was proven false as traces of the secret data were not removed from the microarchitectural state.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "821", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "1037", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "The weakness can be introduced in the data transfer or bus protocol itself or in the implementation."}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Memory", "Read Application Data"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "\n\nThoroughly verify the data routing logic to ensure that any error handling or security checks effectively block illegal dataflows.\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "There are several standard on-chip bus protocols used in modern SoCs to allow communication between components. There are a wide variety of commercially available hardware IP implementing the interconnect logic for these protocols. A bus connects components which initiate/request communications such as processors and DMA controllers (bus masters) with peripherals which respond to requests. In a typical system, the privilege level or security designation of the bus master along with the intended functionality of each peripheral determine the security policy specifying which specific bus masters can access specific peripherals. This security policy (commonly referred to as a bus firewall) can be enforced using separate IP/logic from the actual interconnect responsible for the data routing."}, {"Nature": "Bad", "Language": "Other", "ExampleCode": "The firewall and data routing logic becomes de-synchronized due to a hardware logic bug allowing components that should not be allowed to communicate to share data. For example, consider an SoC with two processors. One is being used as a root of trust and can access a cryptographic key storage peripheral. The other processor (application cpu) may run potentially untrusted code and should not access the key store. If the application cpu can issue a read request to the key store which is not blocked due to de-synchronization of data routing and the bus firewall, disclosure of cryptographic keys is possible."}, {"Nature": "Good", "Language": "Other", "ExampleCode": "All data is correctly buffered inside the interconnect until the firewall has determined that the endpoint is allowed to receive the data."}]}], "ObservedExamples": [{"Reference": "CVE-2017-5754", "Description": "Systems with microprocessors utilizing speculative execution and indirect branch prediction may allow unauthorized disclosure of information to an attacker with local user access via a side-channel analysis of the data cache.", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-5754"}], "RelatedAttackPatterns": ["233", "663"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "As of CWE 4.9, members of the CWE Hardware SIG are closely analyzing this entry and others to improve CWE's coverage of transient execution weaknesses, which include issues related to Spectre, Meltdown, and other attacks. Additional investigation may include other weaknesses related to microarchitectural state. As a result, this entry might change significantly in CWE 4.10."}]}
{"ID": "1265", "Name": "Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "During execution of non-reentrant code, the product performs a call that unintentionally produces a nested invocation of the non-reentrant code.", "ExtendedDescription": "In a complex product, a single function call may lead to many different possible code paths, some of which may involve deeply nested calls. It may be difficult to foresee all possible code paths that could emanate from a given function call. In some systems, an external actor can manipulate inputs to the system and thereby achieve a wide range of possible control flows. This is frequently a concern in products that execute scripts from untrusted sources. Examples of such products are web browsers and PDF readers. A weakness is present when one of the possible code paths resulting from a function call alters program state that the original caller assumes to be unchanged during the call.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "691", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "663", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "416", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"], "Likelihood": ["Unknown"], "Note": "Exploitation of this weakness can leave the application in an unexpected state and cause variables to be reassigned before the first invocation has completed. This may eventually result in memory corruption or unexpected code execution."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "When architecting a system that will execute untrusted code in response to events, consider executing the untrusted event handlers asynchronously (asynchronous message passing) as opposed to executing them synchronously at the time each event fires. The untrusted code should execute at the start of the next iteration of the thread's message loop. In this way, calls into non-reentrant code are strictly serialized, so that each operation completes fully before the next operation begins. Special attention must be paid to all places where type coercion may result in script execution. Performing all needed coercions at the very beginning of an operation can help reduce the chance of operations executing at unexpected junctures.", "Effectiveness": "High"}, {"Phase": ["Implementation"], "Description": "Make sure the code (e.g., function or class) in question is reentrant by not leveraging non-local data, not modifying its own code, and not calling other non-reentrant code.", "Effectiveness": "High"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The implementation of the Widget class in the following C++ code is an example of code that is not designed to be reentrant. If an invocation of a method of Widget inadvertently produces a second nested invocation of a method of Widget, then data member backgroundImage may unexpectedly change during execution of the outer call."}, {"Nature": "Bad", "Language": "C++", "ExampleCode": "```\n\tclass Widget\n\t{\n\t\tprivate:\n\t\t\tImage* backgroundImage;\n\t\tpublic:\n\t\t\tvoid click()\n\t\t\t{\n\t\t\t\tif (backgroundImage)\n\t\t\t\t{\n\t\t\t\t\tbackgroundImage->click();\n\t\t\t\t}\n\t\t\t}\n\t\t\tvoid changeBackgroundImage(Image* newImage)\n\t\t\t{\n\t\t\t\tif (backgroundImage)\n\t\t\t\t{\n\t\t\t\t\tdelete backgroundImage;\n\t\t\t\t}\n\t\t\t\tbackgroundImage = newImage;\n\t\t\t}\n\t}\n\tclass Image\n\t{\n\t\tpublic:\n\t\t\tvoid click()\n\t\t\t{\n\t\t\t\tscriptEngine->fireOnImageClick();\n\t\t\t\t/* perform some operations using \"this\" pointer */\n\t\t\t}\n\t}\n```"}, {"BodyText": "Looking closer at this example, Widget::click() calls backgroundImage->click(), which in turn calls scriptEngine->fireOnImageClick(). The code within fireOnImageClick() invokes the appropriate script handler routine as defined by the document being rendered. In this scenario this script routine is supplied by an adversary and this malicious script makes a call to Widget::changeBackgroundImage(), deleting the Image object pointed to by backgroundImage. When control returns to Image::click, the function's backgroundImage \"this\" pointer (which is the former value of backgroundImage) is a dangling pointer. The root of this weakness is that while one operation on Widget (click) is in the midst of executing, a second operation on the Widget object may be invoked (in this case, the second invocation is a call to different method, namely changeBackgroundImage) that modifies the non-local variable."}]}, {"Entries": [{"IntroText": "This is another example of C++ code that is not designed to be reentrant."}, {"Nature": "Bad", "Language": "C++", "ExampleCode": "```\n\tclass Request\n\t{\n\t\tprivate:\n\t\t\tstd::string uri;\n\t\t\t/* ... */\n\t\tpublic:\n\t\t\tvoid setup(ScriptObject* _uri)\n\t\t\t{\n\t\t\t\tthis->uri = scriptEngine->coerceToString(_uri);\n\t\t\t\t/* ... */\n\t\t\t}\n\t\t\tvoid send(ScriptObject* _data)\n\t\t\t{\n\t\t\t\tCredentials credentials = GetCredentials(uri);\n\t\t\t\tstd::string data = scriptEngine->coerceToString(_data);\n\t\t\t\tdoSend(uri, credentials, data);\n\t\t\t}\n\t}\n```"}, {"BodyText": "The expected order of operations is a call to Request::setup(), followed by a call to Request::send(). Request::send() calls scriptEngine->coerceToString(_data) to coerce a script-provided parameter into a string. This operation may produce script execution. For example, if the script language is ECMAScript, arbitrary script execution may result if _data is an adversary-supplied ECMAScript object having a custom toString method. If the adversary's script makes a new call to Request::setup, then when control returns to Request::send, the field uri and the local variable credentials will no longer be consistent with one another. As a result, credentials for one resource will be shared improperly with a different resource. The root of this weakness is that while one operation on Request (send) is in the midst of executing, a second operation may be invoked (setup)."}]}], "ObservedExamples": [{"Reference": "CVE-2014-1772", "Description": "In this vulnerability, by registering a malicious onerror handler, an adversary can produce unexpected re-entrance of a CDOMRange object. [REF-1098]", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-1772"}, {"Reference": "CVE-2018-8174", "Description": "This CVE covers several vulnerable scenarios enabled by abuse of the Class_Terminate feature in Microsoft VBScript. In one scenario, Class_Terminate is used to produce an undesirable re-entrance of ScriptingDictionary during execution of that object's destructor. In another scenario, a vulnerable condition results from a recursive entrance of a property setter method. This recursive invocation produces a second, spurious call to the Release method of a reference-counted object, causing a UAF when that object is freed prematurely. This vulnerability pattern has been popularized as \"Double Kill\". [REF-1099]", "Link": "https://www.cve.org/CVERecord?id=CVE-2018-8174"}], "RelatedAttackPatterns": ["74"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1266", "Name": "Improper Scrubbing of Sensitive Data from Decommissioned Device", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned.  A scrubbing capability could be missing, insufficient, or incorrect.", "ExtendedDescription": "\n\nWhen a product is decommissioned - i.e., taken out of service - best practices or regulatory requirements may require the administrator to remove or overwrite sensitive data first, i.e. \"scrubbing.\" Improper scrubbing of sensitive data from a decommissioned device leaves that data vulnerable to acquisition by a malicious actor. Sensitive data may include, but is not limited to, device/manufacturer proprietary information, user/device credentials, network configurations, and other forms of sensitive data.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "404", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Policy"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Memory"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "\n\nFunctionality to completely scrub data from a product at the conclusion of its lifecycle should be part of the design phase. Trying to add this function on top of an existing architecture could lead to incomplete removal of sensitive information/data.\n"}, {"Phase": ["Policy"], "Description": "\n\nThe manufacturer should describe the location(s) where sensitive data is stored and the policies and procedures for its removal. This information may be conveyed, for example, in an Administrators Guide or a Statement of Volatility.\n"}, {"Phase": ["Implementation"], "Description": "\n\nIf the capability to wipe sensitive data isn't built-in, the manufacturer may need to provide a utility to scrub sensitive data from storage if that data is located in a place which is non-accessible by the administrator. One example of this could be when sensitive data is stored on an EEPROM for which there is no user/admin interface provided by the system.\n"}], "RelatedAttackPatterns": ["150", "37", "545", "546", "675"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry is still under development and will continue to see updates and content improvements."}]}
{"ID": "1267", "Name": "Policy Uses Obsolete Encoding", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product uses an obsolete encoding mechanism to implement access controls.", "ExtendedDescription": "\n\nWithin a System-On-a-Chip (SoC), various circuits and hardware engines generate transactions for the purpose of accessing (read/write) assets or performing various actions (e.g., reset, fetch, compute, etc.). Among various types of message information, a typical transaction is comprised of source identity (identifying the originator of the transaction) and a destination identity (routing the transaction to the respective entity). Sometimes the transactions are qualified with a Security Token. This Security Token helps the destination agent decide on the set of allowed actions (e.g., access to an asset for reads and writes). A policy encoder is used to map the bus transactions to Security Tokens that in turn are used as access-controls/protection mechanisms. A common weakness involves using an encoding which is no longer trusted, i.e., an obsolete encoding.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "284", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control"], "Impact": ["Modify Memory", "Read Memory", "Modify Files or Directories", "Read Files or Directories", "DoS: Resource Consumption (Other)", "Execute Unauthorized Code or Commands", "Gain Privileges or Assume Identity", "Bypass Protection Mechanism", "Reduce Reliability"], "Likelihood": ["High"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "\n\nSecurity Token Decoders should be reviewed for design inconsistency and common weaknesses.\n\n\nAccess and programming flows should be tested in both pre-silicon and post-silicon testing.\n", "Effectiveness": "High"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "For example, consider a system that has four bus masters. The table below provides bus masters, their Security Tokens, and trust assumptions.\n\n| Bus Master | Security Token Decoding | Trust Assumptions | \n| --- | --- | --- |\n| Master_0 | \"00\" | Untrusted  |\n| Master_1 | \"01\" | Trusted  |\n| Master_2 | \"10\" | Untrusted  |\n| Master_3 | \"11\" | Untrusted  |\n\n\t\nThe policy encoding is to be defined such that Security Token will be used in implemented access-controls. The bits in the bus transaction that contain Security-Token information are Bus_transaction [15:11]. The assets are the AES-Key registers for encryption or decryption. The key of 128 bits is implemented as a set of four, 32-bit registers.\n\n\t| Register | Field description | \n| --- | --- |\n| AES_ENC_DEC_KEY_0 | AES key [0:31] for encryption or decryption, Default 0x00000000  |\n| AES_ENC_DEC_KEY_1 | AES key [32:63] for encryption or decryption, Default 0x00000000  |\n| AES_ENC_DEC_KEY_2 | AES key [64:95] for encryption or decryption, Default 0x00000000  |\n| AES_ENC_DEC_KEY_4 | AES key [96:127] for encryption or decryption, Default 0x00000000  |\n\n\t\t\nBelow is an example of a policy encoding scheme inherited from a previous project where all \"ODD\" numbered Security Tokens are trusted."}, {"Nature": "Bad", "ExampleCode": "```\n\tIf (Bus_transaction[14] == \"1\")\n\t\tTrusted = \"1\"\n\tElse\n\t\tTrusted = \"0\"\n\tIf (trusted)\n\t\tAllow access to AES-Key registers\n\tElse\n\t\tDeny access to AES-Key registers\n```"}, {"BodyText": "The inherited policy encoding is obsolete and does not work for the new system where an untrusted bus master with an odd Security Token exists in the system, i.e., Master_3 whose Security Token is \"11\". Based on the old policy, the untrusted bus master (Master_3) has access to the AES-Key registers. To resolve this, a register AES_KEY_ACCESS_POLICY can be defined to provide necessary, access controls:"}, {"BodyText": "New Policy: \n\n|  | \n|\n| AES_KEY_ACCESS_POLICY | [31:0] Default 0x00000002 - agent with Security Token \"1\" has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_4 registers  |\n\n\t\nThe AES_KEY_ACCESS_POLICY register defines which agents with a Security Token in the transaction can access the AES-key registers. Each bit in this 32-bit register defines a Security Token. There could be a maximum of 32 security Tokens that are allowed access to the AES-key registers. The number of the bit when set (i.e., \"1\") allows respective action from an agent whose identity matches the number of the bit and, if \"0\" (i.e., Clear), disallows the respective action to that corresponding agent. Thus, any bus master with Security Token \"01\" is allowed access to the AES-Key registers. Below is the Pseudo Code for policy encoding:"}, {"Nature": "Good", "ExampleCode": "```\n\tSecurity_Token[4:0] = Bus_transaction[15:11]\n\tIf (AES_KEY_ACCESS_POLICY[Security_Token] == \"1\")\n\t\tAllow access to AES-Key registers\n\tElse\n\t\tDeny access to AES-Key registers\n```"}]}], "RelatedAttackPatterns": ["121", "681"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1268", "Name": "Policy Privileges are not Assigned Consistently Between Control and Data Agents", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product's hardware-enforced access control for a particular resource improperly accounts for privilege discrepancies between control and write policies.\n\t\t\t   ", "ExtendedDescription": "\n\nIntegrated circuits and hardware engines may provide access to resources (device-configuration, encryption keys, etc.) belonging to trusted firmware or software modules (commonly set by a BIOS or a bootloader). These accesses are typically controlled and limited by the hardware. Hardware design access control is sometimes implemented using a policy. A policy defines which entity or agent may or may not be allowed to perform an action. When a system implements multiple levels of policies, a control policy may allow direct access to a resource as well as changes to the policies themselves.\n\n\nResources that include agents in their control policy but not in their write policy could unintentionally allow an untrusted agent to insert itself in the write policy register. Inclusion in the write policy register could allow a malicious or misbehaving agent write access to resources. This action could result in security compromises including leaked information, leaked encryption keys, or modification of device configuration.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "284", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "This weakness may be introduced during the design of a device when the architect does not comprehensively specify all of the policies required by an agent."}, {"Phase": "Implementation", "Note": "This weakness may be introduced during implementation if device policy restrictions do not sufficiently constrain less-privileged clients."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control"], "Impact": ["Modify Memory", "Read Memory", "DoS: Crash, Exit, or Restart", "Execute Unauthorized Code or Commands", "Gain Privileges or Assume Identity", "Bypass Protection Mechanism", "Read Files or Directories", "Reduce Reliability"], "Likelihood": ["High"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "Access-control-policy definition and programming flow must be sufficiently tested in pre-silicon and post-silicon testing."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Consider a system of seven registers for storing and configuring an AES key for encryption or decryption.\n\n\nFour 32-bit registers are used to store a 128-bit AES key. The names of those registers are AES_ENC_DEC_KEY_0, AES_ENC_DEC_KEY_1, AES_ENC_DEC_KEY_2, and AES_ENC_DEC_KEY_3. Collectively these are referred to as the AES Key registers.\n\n| Register | Field description | \n| --- | --- |\n| AES_ENC_DEC_KEY_0 | AES key [0:31] for encryption or decryption  Default 0x00000000 |\n| AES_ENC_DEC_KEY_1 | AES key [32:63] for encryption or decryption  Default 0x00000000 |\n| AES_ENC_DEC_KEY_2 | AES key [64:95] for encryption or decryption  Default 0x00000000 |\n| AES_ENC_DEC_KEY_3 | AES key [96:127] for encryption or decryption  Default 0x00000000 |\n\n\t\nThree 32-bit registers are used to define access control for the AES-key registers. The names of those registers are AES_KEY_CONTROL_POLICY, AES_KEY_READ_POLICY, and AES_KEY_WRITE_POLICY. Collectively these registers are referred to as the Policy registers, and their functions are explained next.\n\n\t\n   - The AES_KEY_CONTROL_POLICY register defines which agents can write to the AES_KEY_READ_POLICY or AES_KEY_WRITE_POLICY registers.\n\n   - The AES_KEY_READ_POLICY register defines which agents can read the AES-key registers.\n\n   - The AES_KEY_WRITE_POLICY register defines which agents can write the AES key registers.\n\nThe preceding three policy registers encode access control at the bit level. Therefore a maximum of 32 agents can be defined (1 bit per agent). The value of the bit when set (i.e., \"1\") allows the respective action from an agent whose identity corresponds to the number of the bit. If clear (i.e., \"0\"), it disallows the respective action to that corresponding agent. For example, if bit 0 is set to \"1\" in the AES_KEY_READ_POLICY register, then agent 0 has permission to read the AES-key registers.\n\t\nConsider that there are 4 agents named Agent 1, Agent 2, Agent 3, and Agent 4. For access control purposes Agent 1 is assigned to bit 1, Agent 2 to bit 2, Agent 3 to bit 3, and Agent 4 to bit 4. All agents are trusted except for Agent 3 who is untrusted. Also consider the register values in the below table."}, {"Nature": "Bad", "ExampleCode": "| Register | Field description | \n| --- | --- |\n| AES_KEY_CONTROL_POLICY | Controls which agents can write to READ_POLICY and WRITE_POLICY registers  [31:0] Default 0x00000018 |\n| AES_KEY_READ_POLICY | Controls which agents can read the AES-key registers  [31:0] Default 0x00000002 |\n| AES_KEY_WRITE_POLICY | Controls which agents can write to the AES-key registers  [31:0] Default 0x00000004 |"}, {"BodyText": "IThe AES_KEY_CONTROL_POLICY register value is 0x00000018. In binary, the lower 8 bits will be 0001 1000, meaning that:\n\n\n  - Bits 3 and 4 are set, thus Agents 3 and 4 will have write access to AES_KEY_READ_POLICY or AES_KEY_WRITE_POLICY.\n\n  - All other bits are clear, hence agents other than 3 and 4 will not have access to write to AES_KEY_READ_POLICY or AES_KEY_WRITE_POLICY.\n\nThe AES_KEY_READ_POLICY register value is 0x00000002. In binary, the lower 8 bits will be 0000 0010, meaning that:\n\n  - Bit 1 is set, thus Agent 1 will be able to read the AES key registers.\n\nThe AES_KEY_WRITE_POLICY register value is 0x00000004. In binary, the lower 8 bits will be 0000 0100, meaning that:\n\n  - Bit 2 is set, thus Agent 2 will be able to write the AES Key registers.\n\nThe configured access control policy for Agents 1,2,3,4 is summarized in table below.\n| Agent | Read | Write | Control | \n| --- | --- | --- | --- |\n| Agent 1 | Allowed | Not Allowed | Not Allowed  |\n| Agent 2 | Not Allowed | Allowed | Not Allowed  |\n| Agent 3 | Not Allowed | Not Allowed | Allowed  |\n| Agent 4 | Not Allowed | Not Allowed | Allowed  |\n\n\t\nAt this point Agents 3 and 4 can only configure which agents can read AES keys and which agents can write AES keys. Agents 3 and 4 cannot read or write AES keys - just configure access control.\n\n\t\nNow, recall Agent 3 is untrusted. As explained above, the value of the AES_KEY_CONTROL_POLICY register gives agent 3 access to write to the AES_KEY_WRITE_POLICY register. Agent 3 can use this write access to add themselves to the AES_KEY_WRITE_POLICY register. This is accomplished by Agent 3 writing the value 0x00000006. In binary, the lower 8 bits are 0000 0110, meaning that bit 3 will be set. Thus, giving Agent 3 having the ability to write to the AES Key registers.\n\n\t\nIf the AES_KEY_CONTROL_POLICY register value is 0x00000010, the lower 8 bits will be 0001 0000. This will give Agent 4, a trusted agent, write access to AES_KEY_WRITE_POLICY, but Agent 3, who is untrusted, will not have write access. The Policy register values should therefore be as follows:"}, {"Nature": "Good", "ExampleCode": "| Register | Field description | \n| --- | --- |\n| AES_KEY_CONTROL_POLICY | [31:0] Default 0x00000010  |\n| AES_KEY_READ_POLICY | [31:0] Default 0x00000002  |\n| AES_KEY_WRITE_POLICY | [31:0] Default 0x00000004  |"}]}], "RelatedAttackPatterns": ["180"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry is still under development and will continue to see updates and content improvements."}]}
{"ID": "1269", "Name": "Product Released in Non-Release Configuration", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product released to market is released in pre-production or manufacturing configuration.", "ExtendedDescription": "\n\nProducts in the pre-production or manufacturing stages are configured to have many debug hooks and debug capabilities, including but not limited to:\n\n\n  - Ability to override/bypass various cryptographic checks (including authentication, authorization, and integrity)\n\n  - Ability to read/write/modify/dump internal state (including registers and memory)\n\n  - Ability to change system configurations\n\n  - Ability to run hidden or private commands that are not allowed during production (as they expose IP).\n\nThe above is by no means an exhaustive list, but it alludes to the greater capability and the greater state of vulnerability of a product during it's preproduction or manufacturing state.\n\nComplexity increases when multiple parties are involved in executing the tests before the final production version. For example, a chipmaker might fabricate a chip and run its own preproduction tests, following which the chip would be delivered to the Original Equipment Manufacturer (OEM), who would now run a second set of different preproduction tests on the same chip. Only after both of these sets of activities are complete, can the overall manufacturing phase be called \"complete\" and have the \"Manufacturing Complete\" fuse blown. However, if the OEM forgets to blow the Manufacturing Complete fuse, then the system remains in the manufacturing stage, rendering the system both exposed and vulnerable.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "693", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "VHDL", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Verilog", "Prevalence": "Undetermined"}, {"Type": "Language", "Class": "Compiled", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Other", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}, {"Phase": "Integration"}, {"Phase": "Manufacturing"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control", "Accountability", "Authentication", "Authorization", "Non-Repudiation"], "Impact": ["Other"], "Likelihood": ["High"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown)."}, {"Phase": ["Integration"], "Description": "Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown)."}, {"Phase": ["Manufacturing"], "Description": "Ensure that there exists a marker for denoting the Manufacturing Complete stage and that the Manufacturing Complete marker gets updated at the Manufacturing Complete stage (i.e., the Manufacturing Complete fuse gets blown)."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This example shows what happens when a preproduction system is made available for production."}, {"Nature": "Bad", "ExampleCode": "Suppose the chipmaker has a way of scanning all the internal memory (containing chipmaker-level secrets) during the manufacturing phase, and the way the chipmaker or the Original Equipment Manufacturer (OEM) marks the end of the manufacturing phase is by blowing a Manufacturing Complete fuse. Now, suppose that whoever blows the Manufacturing Complete fuse inadvertently forgets to execute the step to blow the fuse."}, {"BodyText": "An attacker will now be able to scan all the internal memory (containing chipmaker-level secrets)."}, {"Nature": "Good", "ExampleCode": "Blow the Manufacturing Complete fuse."}]}], "ObservedExamples": [{"Reference": "CVE-2019-13945", "Description": "Regarding SSA-686531, a hardware based manufacturing access on S7-1200 and S7-200 SMART has occurred. A vulnerability has been identified in SIMATIC S7-1200 CPU family (incl. SIPLUS variants) (All versions), SIMATIC S7-200 SMART CPU family (All versions). There is an access mode used during manufacturing of S7-1200 CPUs that allows additional diagnostic functionality. The security vulnerability could be exploited by an attacker with physical access to the UART interface during boot process. At the time of advisory publication, no public exploitation of this security vulnerability was known.", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-13945"}, {"Reference": "CVE-2018-4251", "Description": "Laptops with Intel chipsets were found to be running in Manufacturing Mode. After this information was reported to the OEM, the vulnerability (CVE-2018-4251) was patched disallowing access to the interface.", "Link": "https://www.cve.org/CVERecord?id=CVE-2018-4251"}], "RelatedAttackPatterns": ["439"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "127", "Name": "Buffer Under-read", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product reads from a buffer using buffer access mechanisms such as indexes or pointers that reference memory locations prior to the targeted buffer.", "ExtendedDescription": "This typically occurs when the pointer or its index is decremented to a position before the buffer, when pointer arithmetic results in a position before the beginning of the valid memory location, or when a negative index is used. This may result in exposure of sensitive information or possibly a crash.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "125", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "786", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Memory"]}, {"Scope": ["Confidentiality"], "Impact": ["Bypass Protection Mechanism"], "Note": "By reading out-of-bounds memory, an attacker might be able to get secret values, such as memory addresses, which can be bypass protection mechanisms such as ASLR in order to improve the reliability and likelihood of exploiting a separate weakness to achieve code execution instead of just denial of service."}], "ObservedExamples": [{"Reference": "CVE-2021-40985", "Description": "HTML conversion package has a buffer under-read, allowing a crash", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-40985"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "Under-studied."}], "Top25Examples": [{"Reference": "CVE-2021-40985", "Description": "A stack-based buffer under-read in htmldoc before 1.9.12, allows attackers to cause a denial of service via a crafted BMP image to image_load_bmp."}]}
{"ID": "1270", "Name": "Generation of Incorrect Security Tokens", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.", "ExtendedDescription": "\n\nSystems-On-a-Chip (SoC) (Integrated circuits and hardware engines) implement Security Tokens to differentiate and identify actions originated from various agents. These actions could be \"read\", \"write\", \"program\", \"reset\", \"fetch\", \"compute\", etc. Security Tokens are generated and assigned to every agent on the SoC that is either capable of generating an action or receiving an action from another agent. Every agent could be assigned a unique, Security Token based on its trust level or privileges. Incorrectly generated Security Tokens could result in the same token used for multiple agents or multiple tokens being used for the same agent. This condition could result in a Denial-of-Service (DoS) or the execution of an action that in turn could result in privilege escalation or unintended access.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "284", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "1294", "ViewID": "1194", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control"], "Impact": ["Modify Files or Directories", "Execute Unauthorized Code or Commands", "Bypass Protection Mechanism", "Gain Privileges or Assume Identity", "Read Memory", "Modify Memory", "DoS: Crash, Exit, or Restart"], "Likelihood": ["High"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "\n\n  - Generation of Security Tokens should be reviewed for design inconsistency and common weaknesses.\n\n  - Security-Token definition and programming flow should be tested in pre-silicon and post-silicon testing.\n\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Consider a system with a register for storing an AES key for encryption or decryption. The key is 128 bits long implemented as a set of four 32-bit registers. The key registers are assets, and register, AES_KEY_ACCESS_POLICY, is defined to provide necessary access controls. The access-policy register defines which agents, using a Security Token, may access the AES-key registers. Each bit in this 32-bit register is used to define a Security Token. There could be a maximum of 32 Security Tokens that are allowed access to the AES-key registers. When set (bit = \"1\") bit number allows action from an agent whose identity matches that bit number. If Clear (bit = \"0\") the action is disallowed for the corresponding agent."}, {"BodyText": "Assume the system has two agents: a Main-controller and an Aux-controller. The respective Security Tokens are \"1\" and \"2\". \n| Register | Description | Default | \n| --- | --- | --- |\n| AES_ENC_DEC_KEY_0 | AES key [0:31] for encryption or decryption | 0x00000000  |\n| AES_ENC_DEC_KEY_1 | AES key [32:63] for encryption or decryption | 0x00000000  |\n| AES_ENC_DEC_KEY_2 | AES key [64:95] for encryption or decryption | 0x00000000  |\n| AES_ENC_DEC_KEY_3 | AES key [96:127] for encryption or decryption | 0x00000000  |\n| AES_KEY_ACCESS_POLICY | AES key access register [31:0] | 0x00000002  |"}, {"BodyText": "An agent with a Security Token \"1\" has access to AES_ENC_DEC_KEY_0 through AES_ENC_DEC_KEY_3 registers. As per the above access policy, the AES-Key-access policy allows access to the AES-key registers if the security Token is \"1\"."}, {"Nature": "Bad", "Language": "Other", "ExampleCode": "The SoC incorrectly generates Security Token \"1\" for every agent. In other words, both Main-controller and Aux-controller are assigned Security Token \"1\"."}, {"BodyText": "Both agents have access to the AES-key registers."}, {"Nature": "Good", "Language": "Other", "ExampleCode": "The SoC should correctly generate Security Tokens, assigning \"1\" to the Main-controller and \"2\" to the Aux-controller"}]}], "RelatedAttackPatterns": ["121", "633", "681"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-31122", "Description": "Wire is an encrypted communication and collaboration platform. Versions prior to 2022-07-12/Chart 4.19.0 are subject to Token Recipient Confusion. If an attacker has certain details of SAML IdP metadata, and configures their own SAML on the same backend, the attacker can delete all SAML authenticated accounts of a targeted team, Authenticate as a user of the attacked team and create arbitrary accounts in the context of the team if it is not managed by SCIM. This issue is fixed in wire-server 2022-07-12 and is already deployed on all Wire managed services. On-premise instances of wire-server need to be updated to 2022-07-12/Chart 4.19.0, so that their backends are no longer affected. As a workaround, the risk of an attack can be reduced by disabling SAML configuration for teams (galley.config.settings.featureFlags.sso). Helm overrides are located in `values/wire-server/values.yaml` Note that the ability to configure SAML SSO as a team is disabled by default for on-premise installations."}]}
{"ID": "1271", "Name": "Uninitialized Value on Reset for Registers Holding Security Settings", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "Security-critical logic is not set to a known value on reset.", "ExtendedDescription": "\n\nWhen the device is first brought out of reset, the state of registers will be indeterminate if they have not been initialized by the logic. Before the registers are initialized, there will be a window during which the device is in an insecure state and may be vulnerable to attack.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "909", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control", "Authentication", "Authorization"], "Impact": ["Varies by Context"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Design checks should be performed to identify any uninitialized flip-flops used for security-critical functions."}, {"Phase": ["Architecture and Design"], "Description": "All registers holding security-critical information should be set to a specific value on reset."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Shown below is a positive clock edge triggered flip-flop used to implement a lock bit for test and debug interface. When the circuit is first brought out of reset, the state of the flip-flop will be unknown until the enable input and D-input signals update the flip-flop state. In this example, an attacker can reset the device until the test and debug interface is unlocked and access the test interface until the lock signal is driven to a known state by the logic."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "always @(posedge clk) begin\n\n```\n\t if (en) lock_jtag <= d;\n end\n```"}, {"BodyText": "The flip-flop can be set to a known value (0 or 1) on reset, but requires that the logic explicitly update the output of the flip-flop if the reset signal is active."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "always @(posedge clk) begin\n\n```\n\t if (~reset) lock_jtag <= 0;\n\t else if (en) lock_jtag <= d;\n end\n```"}]}], "RelatedAttackPatterns": ["74"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry is still under development and will continue to see updates and content improvements."}]}
{"ID": "1272", "Name": "Sensitive Information Uncleared Before Debug/Power State Transition", "Abstraction": "Base", "Structure": "Simple", "Status": "Stable", "Description": "The product performs a power or debug state transition, but it does not clear sensitive information that should no longer be accessible due to changes to information access restrictions.", "ExtendedDescription": "\n\nA device or system frequently employs many power and sleep states during its normal operation (e.g., normal power, additional power, low power, hibernate, deep sleep, etc.). A device also may be operating within a debug condition. State transitions can happen from one power or debug state to another. If there is information available in the previous state which should not be available in the next state and is not properly removed before the transition into the next state, sensitive information may leak from the system.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "226", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "200", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "VHDL", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Verilog", "Prevalence": "Undetermined"}, {"Type": "Language", "Class": "Hardware Description Language", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control", "Accountability", "Authentication", "Authorization", "Non-Repudiation"], "Impact": ["Read Memory", "Read Application Data"], "Likelihood": ["High"], "Note": "Sensitive information may be used to unlock additional capabilities of the device and take advantage of hidden functionalities which could be used to compromise device security."}], "DetectionMethods": [{"Method": "Manual Analysis", "Description": "Write a known pattern into each sensitive location. Enter the power/debug state in question. Read data back from the sensitive locations. If the reads are successful, and the data is the same as the pattern that was originally written, the test fails and the device needs to be fixed. Note that this test can likely be automated.", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "During state transitions, information not needed in the next state should be removed before the transition to the next state."}], "DemonstrativeExamples": [{"ID": "DX-147", "Entries": [{"IntroText": "This example shows how an attacker can take advantage of an incorrect state transition."}, {"BodyText": "Suppose a device is transitioning from state A to state B. During state A, it can read certain private keys from the hidden fuses that are only accessible in state A but not in state B. The device reads the keys, performs operations using those keys, then transitions to state B, where those private keys should no longer be accessible."}, {"Nature": "Bad", "ExampleCode": "During the transition from A to B, the device does not scrub the memory."}, {"BodyText": "After the transition to state B, even though the private keys are no longer accessible directly from the fuses in state B, they can be accessed indirectly by reading the memory that contains the private keys."}, {"Nature": "Good", "ExampleCode": "For transition from state A to state B, remove information which should not be available once the transition is complete."}]}], "ObservedExamples": [{"Reference": "CVE-2020-12926", "Description": "Product software does not set a flag as per TPM specifications, thereby preventing a failed authorization attempt from being recorded after a loss of power.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-12926"}], "FunctionalAreas": ["Power"], "RelatedAttackPatterns": ["150", "37", "545", "546"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1273", "Name": "Device Unlock Credential Sharing", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The credentials necessary for unlocking a device are shared across multiple parties and may expose sensitive information.", "ExtendedDescription": "\n\n\"Unlocking a device\" often means activating certain unadvertised debug and manufacturer-specific capabilities of a device using sensitive credentials. Unlocking a device might be necessary for the purpose of troubleshooting device problems. For example, suppose a device contains the ability to dump the content of the full system memory by disabling the memory-protection mechanisms. Since this is a highly security-sensitive capability, this capability is \"locked\" in the production part. Unless the device gets unlocked by supplying the proper credentials, the debug capabilities are not available. For cases where the chip designer, chip manufacturer (fabricator), and manufacturing and assembly testers are all employed by the same company, the risk of compromise of the credentials is greatly reduced. However, the risk is greater when the chip designer is employed by one company, the chip manufacturer is employed by another company (a foundry), and the assemblers and testers are employed by yet a third company. Since these different companies will need to perform various tests on the device to verify correct device function, they all need to share the unlock key. Unfortunately, the level of secrecy and policy might be quite different at each company, greatly increasing the risk of sensitive credentials being compromised.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "200", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "VHDL", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Verilog", "Prevalence": "Undetermined"}, {"Type": "Language", "Class": "Compiled", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Other", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Integration"}, {"Phase": "Manufacturing"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control", "Accountability", "Authentication", "Authorization", "Non-Repudiation"], "Impact": ["Modify Memory", "Read Memory", "Modify Files or Directories", "Read Files or Directories", "Modify Application Data", "Execute Unauthorized Code or Commands", "Gain Privileges or Assume Identity", "Bypass Protection Mechanism"], "Note": "Once unlock credentials are compromised, an attacker can use the credentials to unlock the device and gain unauthorized access to the hidden functionalities protected by those credentials."}], "PotentialMitigations": [{"Phase": ["Integration"], "Description": "Ensure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific."}, {"Phase": ["Manufacturing"], "Description": "Ensure the unlock credentials are shared with the minimum number of parties and with utmost secrecy. To limit the risk associated with compromised credentials, where possible, the credentials should be part-specific."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This example shows how an attacker can take advantage of compromised credentials."}, {"Nature": "Bad", "ExampleCode": "Suppose a semiconductor chipmaker, \"C\", uses the foundry \"F\" for fabricating its chips. Now, F has many other customers in addition to C, and some of the other customers are much smaller companies. F has dedicated teams for each of its customers, but somehow it mixes up the unlock credentials and sends the unlock credentials of C to the wrong team. This other team does not take adequate precautions to protect the credentials that have nothing to do with them, and eventually the unlock credentials of C get leaked."}, {"BodyText": "When the credentials of multiple organizations are stored together, exposure to third parties occurs frequently."}, {"Nature": "Good", "ExampleCode": "Vertical integration of a production company is one effective method of protecting sensitive credentials. Where vertical integration is not possible, strict access control and need-to-know are methods which can be implemented to reduce these risks."}]}], "RelatedAttackPatterns": ["560"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry is still under development and will continue to see updates and content improvements."}]}
{"ID": "1274", "Name": "Improper Access Control for Volatile Memory Containing Boot Code", "Abstraction": "Base", "Structure": "Simple", "Status": "Stable", "Description": "The product conducts a secure-boot process that transfers bootloader code from Non-Volatile Memory (NVM) into Volatile Memory (VM), but it does not have sufficient access control or other protections for the Volatile Memory.", "ExtendedDescription": "\n\nAdversaries could bypass the secure-boot process and execute their own untrusted, malicious boot code.\n\n\nAs a part of a secure-boot process, the read-only-memory (ROM) code for a System-on-Chip (SoC) or other system fetches bootloader code from Non-Volatile Memory (NVM) and stores the code in Volatile Memory (VM), such as dynamic, random-access memory (DRAM) or static, random-access memory (SRAM). The NVM is usually external to the SoC, while the VM is internal to the SoC. As the code is transferred from NVM to VM, it is authenticated by the SoC's ROM code.\n\n\nIf the volatile-memory-region protections or access controls are insufficient to prevent modifications from an adversary or untrusted agent, the secure boot may be bypassed or replaced with the execution of an adversary's code.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "284", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "This weakness can be introduced during hardware architecture or design but can be identified later during testing."}], "CommonConsequences": [{"Scope": ["Access Control", "Integrity"], "Impact": ["Modify Memory", "Execute Unauthorized Code or Commands", "Gain Privileges or Assume Identity"], "Likelihood": ["High"]}], "DetectionMethods": [{"Method": "Manual Analysis", "Description": "Ensure the volatile memory is lockable or has locks. Ensure the volatile memory is locked for writes from untrusted agents or adversaries. Try modifying the volatile memory from an untrusted agent, and ensure these writes are dropped.", "Effectiveness": "High"}, {"Method": "Manual Analysis", "Description": "\n\nAnalyze the device using the following steps:\n\n\n  1. Identify all fabric master agents that are active during system Boot Flow when initial code is loaded from Non-volatile storage to volatile memory.\n\n  1. Identify the volatile memory regions that are used for storing loaded system executable program.\n\n  1. During system boot, test programming the identified memory regions in step 2 from all the masters identified in step 1.\n\nOnly trusted masters should be allowed to write to the memory regions. For example, pluggable device peripherals should not have write access to program load memory regions.", "Effectiveness": "Moderate"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Ensure that the design of volatile-memory protections is enough to prevent modification from an adversary or untrusted code."}, {"Phase": ["Testing"], "Description": "Test the volatile-memory protections to ensure they are safe from modification or untrusted code."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "A typical SoC secure boot's flow includes fetching the next piece of code (i.e., the boot loader) from NVM (e.g., serial, peripheral interface (SPI) flash), and transferring it to DRAM/SRAM volatile, internal memory, which is more efficient."}, {"Nature": "Bad", "ExampleCode": "The volatile-memory protections or access controls are insufficient."}, {"BodyText": "The memory from where the boot loader executes can be modified by an adversary."}, {"Nature": "Good", "ExampleCode": "A good architecture should define appropriate protections or access controls to prevent modification by an adversary or untrusted agent, once the bootloader is authenticated."}]}], "ObservedExamples": [{"Reference": "CVE-2019-2267", "Description": "Locked memory regions may be modified through other interfaces in a secure-boot-loader image due to improper access control.", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-2267"}], "RelatedAttackPatterns": ["456", "679"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1275", "Name": "Sensitive Cookie with Improper SameSite Attribute", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The SameSite attribute for sensitive cookies is not set, or an insecure value is used.", "ExtendedDescription": "The SameSite attribute controls how cookies are sent for cross-domain requests. This attribute may have three values: 'Lax', 'Strict', or 'None'. If the 'None' value is used, a website may create a cross-domain POST HTTP request to another website, and the browser automatically adds cookies to this request. This may lead to Cross-Site-Request-Forgery (CSRF) attacks if there are no additional protections in place (such as Anti-CSRF tokens).", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "923", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "352", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Web Based", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "This weakness occurs during implementation when the coder does not properly set the SameSite attribute."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Non-Repudiation", "Access Control"], "Impact": ["Modify Application Data"], "Likelihood": ["Low"], "Note": "If the website does not impose additional defense against CSRF attacks, failing to use the 'Lax' or 'Strict' values could increase the risk of exposure to CSRF attacks. The likelihood of the integrity breach is Low because a successful attack does not only depend on an insecure SameSite attribute. In order to perform a CSRF attack there are many conditions that must be met, such as the lack of CSRF tokens, no confirmations for sensitive actions on the website, a \"simple\" \"Content-Type\" header in the HTTP request and many more."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Set the SameSite attribute of a sensitive cookie to 'Lax' or 'Strict'. This instructs the browser to apply this cookie only to same-domain requests, which provides a good Defense in Depth against CSRF attacks. When the 'Lax' value is in use, cookies are also sent for top-level cross-domain navigation via HTTP GET, HEAD, OPTIONS, and TRACE methods, but not for other HTTP methods that are more like to cause side-effects of state mutation.", "Effectiveness": "High", "EffectivenessNotes": "While this mitigation is effective for protecting cookies from a browser's own scripting engine, third-party components or plugins may have their own engines that allow access to cookies. Attackers might also be able to use XMLHTTPResponse to read the headers directly and obtain the cookie."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In this example, a cookie is used to store a session ID for a client's interaction with a website. The snippet of code below establishes a new cookie to hold the sessionID."}, {"Nature": "Bad", "Language": "JavaScript", "ExampleCode": "let sessionId = generateSessionId()\n let cookieOptions = { domain: 'example.com' }\n response.cookie('sessionid', sessionId, cookieOptions)"}, {"BodyText": "Since the sameSite attribute is not specified, the cookie will be sent to the website with each request made by the client. An attacker can potentially perform a CSRF attack by using the following malicious page:"}, {"Nature": "Attack", "Language": "HTML", "ExampleCode": "<html>\n\n```\n\t <form id=evil action=\"http://local:3002/setEmail\" method=\"POST\">\n\t\t <input type=\"hidden\" name=\"newEmail\" value=\"abc@example.com\" />\n\t </form>\n <script>evil.submit()</script>\n </html>\n```"}, {"BodyText": "When the client visits this malicious web page, it submits a '/setEmail' POST HTTP request to the vulnerable website. Since the browser automatically appends the 'sessionid' cookie to the request, the website automatically performs a 'setEmail' action on behalf of the client."}, {"BodyText": "To mitigate the risk, use the sameSite attribute of the 'sessionid' cookie set to 'Strict'."}, {"Nature": "Good", "Language": "JavaScript", "ExampleCode": "let sessionId = generateSessionId()\n let cookieOptions = { domain: 'example.com', sameSite: 'Strict' }\n response.cookie('sessionid', sessionId, cookieOptions)"}]}], "ObservedExamples": [{"Reference": "CVE-2022-24045", "Description": "Web application for a room automation system has client-side JavaScript that sets a sensitive cookie without the SameSite security attribute, allowing the cookie to be sniffed", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-24045"}], "RelatedAttackPatterns": ["62"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-24045", "Description": "A vulnerability has been identified in Desigo DXR2 (All versions < V01.21.142.5-22), Desigo PXC3 (All versions < V01.21.142.4-18), Desigo PXC4 (All versions < V02.20.142.10-10884), Desigo PXC5 (All versions < V02.20.142.10-10884). The application, after a successful login, sets the session cookie on the browser via client-side JavaScript code, without applying any security attributes (such as \u201cSecure\u201d, \u201cHttpOnly\u201d, or \u201cSameSite\u201d). Any attempts to browse the application via unencrypted HTTP protocol would lead to the transmission of all his/her session cookies in plaintext through the network. An attacker could then be able to sniff the network and capture sensitive information."}]}
{"ID": "1276", "Name": "Hardware Child Block Incorrectly Connected to Parent System", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "Signals between a hardware IP and the parent system design are incorrectly connected causing security risks.", "ExtendedDescription": "\n\nIndividual hardware IP must communicate with the parent system in order for the product to function correctly and as intended. If implemented incorrectly, while not causing any apparent functional issues, may cause security issues. For example, if the IP should only be reset by a system-wide hard reset, but instead the reset input is connected to a software-triggered debug mode reset (which is also asserted during a hard reset), integrity of data inside the IP can be violated.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "284", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "This weakness is introduced when integrating IP into a parent design."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Varies by Context"]}], "PotentialMitigations": [{"Phase": ["Testing"], "Description": "System-level verification may be used to ensure that components are correctly connected and that design security requirements are not violated due to interactions between various IP blocks."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Many SoCs use hardware to partition system resources between trusted and un-trusted entities. One example of this concept is the Arm TrustZone, in which the processor and all security-aware IP attempt to isolate resources based on the status of a privilege bit. This privilege bit is part of the input interface in all TrustZone-aware IP. If this privilege bit is accidentally grounded or left unconnected when the IP is instantiated, privilege escalation of all input data may occur."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "// IP definition\n module tz_peripheral(clk, reset, data_in, data_in_security_level, ...);\n\n```\n\t input clk, reset;\n\t input [31:0] data_in;\n\t input data_in_security_level;\n\t ...\n endmodule\n // Instantiation of IP in a parent system\n module soc(...)\n\t ...\n\t tz_peripheral u_tz_peripheral(\n\t\t .clk(clk),\n\t\t .rst(rst),\n\t\t .data_in(rdata),\n\t\t //Copy-and-paste error or typo grounds data_in_security_level (in this example 0=secure, 1=non-secure) effectively promoting all data to \"secure\")\n\t\t .data_in_security_level(1'b0),\n\t );\n\t ...\n endmodule\n```"}, {"BodyText": "In the Verilog code below, the security level input to the TrustZone aware peripheral is correctly driven by an appropriate signal instead of being grounded."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "// Instantiation of IP in a parent system\n module soc(...)\n\n```\n\t ...\n\t tz_peripheral u_tz_peripheral(\n\t\t .clk(clk),\n\t\t .rst(rst),\n\t\t .data_in(rdata),\n\t\t // This port is no longer grounded, but instead driven by the appropriate signal\n\t\t .data_in_security_level(rdata_security_level),\n\t );\n\t ...\n endmodule\n```"}]}, {"Entries": [{"IntroText": "Here is a code snippet from the Ariane core module in the HACK@DAC'21 Openpiton SoC [REF-1362]. To ensure full functional correctness, developers connect the ports with names. However, in some cases developers forget to connect some of these ports to the desired signals in the parent module. These mistakes by developers can lead to incorrect functional behavior or, in some cases, introduce security vulnerabilities."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "...\n csr_regfile #(\n\n```\n\t ...\n ) csr_regfile_i (\n\t .flush_o ( flush_csr_ctrl ),\n\t .halt_csr_o ( halt_csr_ctrl ),\n\t ...\n```\n.irq_i(),** \n\t\n\t **.time_irq_i(),** \n\t .*\n\t );\n ..."}, {"BodyText": "In the above example from HACK@DAC'21, since interrupt signals are not properly connected, the CSR module will fail to send notifications in the event of interrupts. Consequently, critical information in CSR registers that should be flushed or modified in response to an interrupt won't be updated. These vulnerabilities can potentially result in information leakage across various privilege levels."}, {"BodyText": "To address the aforementioned vulnerability, developers must follow a two-step approach. First, they should ensure that all module signals are properly connected. This can often be facilitated using automated tools, and many simulators and sanitizer tools issue warnings when a signal remains unconnected or floats. Second, it is imperative to validate that the signals connected to a module align with the specifications. In the provided example, the developer should establish the correct connection of interrupt signals from the parent module (Ariane core) to the child module (csr_regfile) [REF-1363]."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "...\n csr_regfile #(\n\n```\n\t ...\n ) csr_regfile_i (\n\t .flush_o ( flush_csr_ctrl ),\n\t .halt_csr_o ( halt_csr_ctrl ),\n\t ...\n```\n.irq_i (irq_i),** \n\t\n\t **.time_irq_i (time_irq_i),** \n\t .*\n\t );\n ..."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1277", "Name": "Firmware Not Updateable", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product does not provide its\n\t\t\tusers with the ability to update or patch its\n\t\t\tfirmware to address any vulnerabilities or\n\t\t\tweaknesses that may be present.", "ExtendedDescription": "Without the ability to patch or update firmware, consumers will be left vulnerable to exploitation of any known vulnerabilities, or any vulnerabilities that are discovered in the future. This can expose consumers to permanent risk throughout the entire lifetime of the device, which could be years or decades. Some external protective measures and mitigations might be employed to aid in preventing or reducing the risk of malicious attack, but the root weakness cannot be corrected.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1329", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Requirements", "Note": "Requirements development might not consider the importance of updates over the lifetime of the product, or might not choose the ability due to concerns such as expense or speed to market."}, {"Phase": "Architecture and Design", "Note": "Lack of planning during architecture development and design, or external pressures such as speed to market, could ignore the capability to update."}, {"Phase": "Implementation", "Note": "The weakness can appear through oversight during implementation."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Access Control", "Authentication", "Authorization"], "Impact": ["Gain Privileges or Assume Identity", "Bypass Protection Mechanism", "Execute Unauthorized Code or Commands", "DoS: Crash, Exit, or Restart"], "Likelihood": ["Medium"], "Note": "If an attacker can identify an exploitable vulnerability in one device that has no means of patching, the attack may be used against an entire class of devices."}], "DetectionMethods": [{"Method": "Manual Analysis", "Description": "Create a new installable boot image of the current build with a minor version number change. Use the standard installation method to update the boot image. Verify that the minor version number has changed. Create a fake image. Verify that the boot updater will not install the fake image and generates an \"invalid image\" error message or equivalent.", "Effectiveness": "High"}, {"Method": "Architecture or Design Review", "Description": "Check the consumer or maintainer documentation, the architecture/design documentation, or the original requirements to ensure that the documentation includes details for how to update the firmware.", "Effectiveness": "Moderate"}, {"Method": "Manual Dynamic Analysis", "Description": "Determine if there is a lack of a capability to update read-only memory (ROM) structure. This could manifest as a difference between the latest firmware version and the current version within the device.", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Requirements"], "Description": "Specify requirements to include the ability to update the firmware. Include integrity checks and authentication to ensure that untrusted firmware cannot be installed."}, {"Phase": ["Architecture and Design"], "Description": "Design the device to allow for updating the firmware. Ensure that the design specifies how to distribute the updates and ensure their integrity and authentication."}, {"Phase": ["Implementation"], "Description": "Implement the necessary functionality to allow the firmware to be updated."}], "DemonstrativeExamples": [{"ID": "DX-145", "Entries": [{"IntroText": "A refrigerator has an Internet interface for the official purpose of alerting the manufacturer when that refrigerator detects a fault. Because the device is attached to the Internet, the refrigerator is a target for hackers who may wish to use the device other potentially more nefarious purposes."}, {"Nature": "Bad", "Language": "Other", "ExampleCode": "The refrigerator has no means of patching and is hacked becoming a spewer of email spam."}, {"Nature": "Good", "Language": "Other", "ExampleCode": "The device automatically patches itself and provides considerable more protection against being hacked."}]}], "ObservedExamples": [{"Reference": "CVE-2020-9054", "Description": "Chain: network-attached storage (NAS) device has a critical OS command injection (CWE-78) vulnerability that is actively exploited to place IoT devices into a botnet, but some products are \"end-of-support\" and cannot be patched (CWE-1277). [REF-1097]", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-9054"}, {"Reference": "[REF-1095]", "Description": "A hardware \"smart lock\" has weak key generation that allows attackers to steal the key by BLE sniffing, but the device's firmware cannot be upgraded and hence remains vulnerable [REF-1095].", "Link": "https://www.theregister.com/2019/12/11/f_secure_keywe/"}], "RelatedAttackPatterns": ["682"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Terminology", "Note": "The \"firmware\" term does not have a single commonly-shared definition, so there may be variations in how this CWE entry is interpreted during mapping."}]}
{"ID": "1278", "Name": "Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.", "ExtendedDescription": "\n\nThe physical structure of a device, viewed at high enough magnification, can reveal the information stored inside. Typical steps in IC reverse engineering involve removing the chip packaging (decapsulation) then using various imaging techniques ranging from high resolution x-ray microscopy to invasive techniques involving removing IC layers and imaging each layer using a scanning electron microscope.\n\n\nThe goal of such activities is to recover secret keys, unique device identifiers, and proprietary code and circuit designs embedded in hardware that the attacker has been unsuccessful at accessing through other means. These secrets may be stored in non-volatile memory or in the circuit netlist. Memory technologies such as masked ROM allow easier to extraction of secrets than One-time Programmable (OTP) memory.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "693", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Varies by Context"], "Note": "A common goal of malicious actors who reverse engineer ICs is to produce and sell counterfeit versions of the IC."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "The cost of secret extraction via IC reverse engineering should outweigh the potential value of the secrets being extracted. Threat model and value of secrets should be used to choose the technology used to safeguard those secrets. Examples include IC camouflaging and obfuscation, tamper-proof packaging, active shielding, and physical tampering detection information erasure."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Consider an SoC design that embeds a secret key in read-only memory (ROM). The key is baked into the design logic and may not be modified after fabrication causing the key to be identical for all devices. An attacker in possession of the IC can decapsulate and delayer the device. After imaging the layers, computer vision algorithms or manual inspection of the circuit features locate the ROM and reveal the value of the key bits as encoded in the visible circuit structure of the ROM."}]}], "RelatedAttackPatterns": ["188", "37", "545"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry is still under development and will continue to see updates and content improvements. It is more attack-oriented, so it might be more suited for CAPEC."}]}
{"ID": "1279", "Name": "Cryptographic Operations are run Before Supporting Units are Ready", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "Performing cryptographic operations without ensuring that the supporting inputs are ready to supply valid data may compromise the cryptographic result.", "ExtendedDescription": "Many cryptographic hardware units depend upon other hardware units to supply information to them to produce a securely encrypted result. For example, a cryptographic unit that depends on an external random-number-generator (RNG) unit for entropy must wait until the RNG unit is producing random numbers. If a cryptographic unit retrieves a private encryption key from a fuse unit, the fuse unit must be up and running before a key may be supplied.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "691", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "665", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Verilog", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "VHDL", "Prevalence": "Undetermined"}, {"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Processor Hardware", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "The decision to continue using a cryptographic unit even though the input units to it are not producing valid data will compromise the encrypted result."}], "CommonConsequences": [{"Scope": ["Access Control", "Confidentiality", "Integrity", "Availability", "Accountability", "Authentication", "Authorization", "Non-Repudiation"], "Impact": ["Varies by Context"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Best practices should be used to design cryptographic systems."}, {"Phase": ["Implementation"], "Description": "Continuously ensuring that cryptographic inputs are supplying valid information is necessary to ensure that the encrypted output is secure."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following pseudocode illustrates the weak encryption resulting from the use of a pseudo-random-number generator output."}, {"Nature": "Bad", "Language": "Pseudocode", "ExampleCode": "If random_number_generator_self_test_passed() == TRUE\n then Seed = get_random_number_from_RNG()\n else Seed = hardcoded_number"}, {"BodyText": "In the example above, first a check of RNG ready is performed. If the check fails, the RNG is ignored and a hard coded value is used instead. The hard coded value severely weakens the encrypted output."}, {"Nature": "Good", "Language": "Pseudocode", "ExampleCode": "If random_number_generator_self_test_passed() == TRUE\n then Seed = get_random_number_from_RNG()\n else enter_error_state()"}]}], "RelatedAttackPatterns": ["97"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "128", "Name": "Wrap-around Error", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore \"wraps around\" to a very small, negative, or undefined value.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "682", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "119", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "190", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Often"}, {"Type": "Language", "Name": "C++", "Prevalence": "Often"}], "BackgroundDetails": ["Due to how addition is performed by computers, if a primitive is incremented past the maximum value possible for its storage space, the system will not recognize this, and therefore increment each bit as if it still had extra space. Because of how negative numbers are represented in binary, primitives interpreted as signed may \"wrap\" to very large negative values."], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart", "DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)", "DoS: Instability"], "Note": "This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high."}, {"Scope": ["Integrity"], "Impact": ["Modify Memory"], "Note": "If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur."}, {"Scope": ["Confidentiality", "Availability", "Access Control"], "Impact": ["Execute Unauthorized Code or Commands", "Bypass Protection Mechanism"], "Note": "This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy."}], "PotentialMitigations": [{"Description": "Requirements specification: The choice could be made to use a language that is not susceptible to these issues."}, {"Phase": ["Architecture and Design"], "Description": "Provide clear upper and lower bounds on the scale of any protocols designed."}, {"Phase": ["Implementation"], "Description": "Perform validation on all incremented variables to ensure that they remain within reasonable bounds."}], "DemonstrativeExamples": [{"ID": "DX-33", "Entries": [{"IntroText": "The following image processing code allocates a table for images."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\timg_t table_ptr; /*struct containing img data, 10kB each*/\n\tint num_imgs;\n\t...\n\tnum_imgs = get_num_imgs();\n\ttable_ptr = (img_t*)malloc(sizeof(img_t)*num_imgs);\n\t...\n```"}, {"BodyText": "This code intends to allocate a table of size num_imgs, however as num_imgs grows large, the calculation determining the size of the list will eventually overflow (CWE-190). This will result in a very small list to be allocated instead. If the subsequent code operates on the list as if it were num_imgs long, it may result in many types of out-of-bounds problems (CWE-119)."}]}], "RelatedAttackPatterns": ["92"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "The relationship between overflow and wrap-around needs to be examined more closely, since several entries (including CWE-190) are closely related."}]}
{"ID": "1280", "Name": "Access Control Check Implemented After Asset is Accessed", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "A product's hardware-based access control check occurs after the asset has been accessed.", "ExtendedDescription": "\n\nThe product implements a hardware-based access control check. The asset should be accessible only after the check is successful. If, however, this operation is not atomic and the asset is accessed before the check is complete, the security of the system may be compromised.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "696", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "284", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Verilog", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "VHDL", "Prevalence": "Undetermined"}, {"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control", "Confidentiality", "Integrity"], "Impact": ["Modify Memory", "Read Memory", "Modify Application Data", "Read Application Data", "Gain Privileges or Assume Identity", "Bypass Protection Mechanism"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Implement the access control check first. Access should only be given to asset if agent is authorized."}], "DemonstrativeExamples": [{"ID": "DX-187", "Entries": [{"IntroText": "Assume that the module foo_bar implements a protected register. The register content is the asset. Only transactions made by user id (indicated by signal usr_id) 0x4 are allowed to modify the register contents. The signal grant_access is used to provide access."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "module foo_bar(data_out, usr_id, data_in, clk, rst_n);\n output reg [7:0] data_out;\n input wire [2:0] usr_id;\n input wire [7:0] data_in; \n input wire clk, rst_n;\n wire grant_access;\n always @ (posedge clk or negedge rst_n)\n begin\n\n```\n\t if (!rst_n)\n\t\t data_out = 0; \n\t else \n\t\t data_out = (grant_access) ? data_in : data_out;\n\t\t assign grant_access = (usr_id == 3'h4) ? 1'b1 : 1'b0;\n end\n endmodule\n```"}, {"BodyText": "This code uses Verilog blocking assignments for data_out and grant_access. Therefore, these assignments happen sequentially (i.e., data_out is updated to new value first, and grant_access is updated the next cycle) and not in parallel. Therefore, the asset data_out is allowed to be modified even before the access control check is complete and grant_access signal is set. Since grant_access does not have a reset value, it will be meta-stable and will randomly go to either 0 or 1."}, {"BodyText": "Flipping the order of the assignment of data_out and grant_access should solve the problem. The correct snippet of code is shown below."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "always @ (posedge clk or negedge rst_n)\n begin\n\n```\n\t if (!rst_n)\n\t\t data_out = 0;\n\t else\n\t\t assign grant_access = (usr_id == 3'h4) ? 1'b1 : 1'b0;\n\t\t data_out = (grant_access) ? data_in : data_out;\n end\n endmodule\n```"}]}], "RelatedAttackPatterns": ["180"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1281", "Name": "Sequence of Processor Instructions Leads to Unexpected Behavior", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "Specific combinations of processor instructions lead to undesirable behavior such as locking the processor until a hard reset performed.", "ExtendedDescription": "\n\nIf the instruction set architecture (ISA) and processor logic are not designed carefully and tested thoroughly, certain combinations of instructions may lead to locking the processor or other unexpected and undesirable behavior. Upon encountering unimplemented instruction opcodes or illegal instruction operands, the processor should throw an exception and carry on without negatively impacting security. However, specific combinations of legal and illegal instructions may cause unexpected behavior with security implications such as allowing unprivileged programs to completely lock the CPU. \n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "691", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Processor Hardware", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "Unexpected behavior from certain instruction combinations can arise from bugs in the ISA"}, {"Phase": "Implementation", "Note": "Unexpected behavior from certain instruction combinations can arise because of implementation details such as speculative execution, caching etc."}], "CommonConsequences": [{"Scope": ["Integrity", "Availability"], "Impact": ["Varies by Context"]}], "PotentialMitigations": [{"Phase": ["Testing"], "Description": "Implement a rigorous testing strategy that incorporates randomization to explore instruction sequences that are unlikely to appear in normal workloads in order to identify halt and catch fire instruction sequences."}, {"Phase": ["Patching and Maintenance"], "Description": "Patch operating system to avoid running Halt and Catch Fire type sequences or to mitigate the damage caused by unexpected behavior. See [REF-1108]."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The Pentium F00F bug is a real-world example of how a sequence of instructions can lock a processor. The \"cmpxchg8b\" instruction compares contents of registers with a memory location. The operand is expected to be a memory location, but in the bad code snippet it is the eax register. Because the specified operand is illegal, an exception is generated, which is the correct behavior and not a security issue in itself. However, when prefixed with the \"lock\" instruction, the processor deadlocks because locked memory transactions require a read and write pair of transactions to occur before the lock on the memory bus is released. The exception causes a read to occur but there is no corresponding write, as there would have been if a legal operand had been supplied to the cmpxchg8b instruction. [REF-1331]"}, {"Nature": "Bad", "Language": "x86 Assembly", "ExampleCode": "lock cmpxchg8b eax"}]}, {"Entries": [{"IntroText": "The Cyrix Coma bug was capable of trapping a Cyrix 6x86, 6x86L, or 6x86MX processor in an infinite loop. An infinite loop on a processor is not necessarily an issue on its own, as interrupts could stop the loop. However, on select Cyrix processors, the x86 Assembly 'xchg' instruction was designed to prevent interrupts. On these processors, if the loop was such that a new 'xchg' instruction entered the instruction pipeline before the previous one exited, the processor would become deadlocked. [REF-1323]"}]}, {"Entries": [{"IntroText": "The Motorola MC6800 microprocessor contained the first documented instance of a Halt and Catch Fire instruction - an instruction that causes the normal function of a processor to stop. If the MC6800 was given the opcode 0x9D or 0xDD, the processor would begin to read all memory very quickly, in sequence, and without executing any other instructions. This will cause the processor to become unresponsive to anything but a hard reset. [REF-1324]"}]}, {"Entries": [{"IntroText": "The example code is taken from the commit stage inside the processor core of the HACK@DAC'19 buggy CVA6 SoC [REF-1342]. To ensure the correct execution of atomic instructions, the CPU must guarantee atomicity: no other device overwrites the memory location between the atomic read starts and the atomic write finishes. Another device may overwrite the memory location only before the read operation or after the write operation, but never between them, and finally, the content will still be consistent."}, {"BodyText": "Atomicity is especially critical when the variable to be modified is a mutex, counting semaphore, or similar piece of data that controls access to shared resources. Failure to ensure atomicity may result in two processors accessing a shared resource simultaneously, permanent lock-up, or similar disastrous behavior."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "```\n```\nif (csr_exception_i.valid && csr_exception_i.cause[63] && commit_instr_i[0].fu != CSR) begin** \n\t```\n\t\t exception_o = csr_exception_i;\n\t\t exception_o.tval = commit_instr_i[0].ex.tval;\n\t end\n```"}, {"BodyText": "The above vulnerable code checks for CSR interrupts and gives them precedence over any other exception. However, the interrupts should not occur when the processor runs a series of atomic instructions. In the above vulnerable code, the required check must be included to ensure the processor is not in the middle of a series of atomic instructions."}, {"BodyText": "Refrain from interrupting if the intention is to commit an atomic instruction that should not be interrupted. This can be done by adding a condition to check whether the current committing instruction is atomic. [REF-1343]"}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "```\n```\nif (csr_exception_i.valid && csr_exception_i.cause[63] && !amo_valid_commit_o && commit_instr_i[0].fu != CSR) begin** \n\t```\n\t\t exception_o = csr_exception_i;\n\t\t exception_o.tval = commit_instr_i[0].ex.tval;\n\t end\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2021-26339", "Description": "A bug in AMD CPU's core logic allows a potential DoS by using a specific x86 instruction sequence to hang the processor", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-26339"}, {"Reference": "CVE-1999-1476", "Description": "A bug in some Intel Pentium processors allow DoS (hang) via an invalid \"CMPXCHG8B\" instruction, causing a deadlock", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1476"}], "RelatedAttackPatterns": ["212"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1282", "Name": "Assumed-Immutable Data is Stored in Writable Memory", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "Immutable data, such as a first-stage bootloader, device identifiers, and \"write-once\" configuration settings are stored in writable memory that can be re-programmed or updated in the field.", "ExtendedDescription": "\n\nSecurity services such as secure boot, authentication of code and data, and device attestation all require assets such as the first stage bootloader, public keys, golden hash digests, etc. which are implicitly trusted. Storing these assets in read-only memory (ROM), fuses, or one-time programmable (OTP) memory provides strong integrity guarantees and provides a root of trust for securing the rest of the system. Security is lost if assets assumed to be immutable can be modified.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "668", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "471", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "Keys, code, configuration settings, and other data should be programmed in write-once or read-only memory instead of writable memory."}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Varies by Context"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "All immutable code or data should be programmed into ROM or write-once memory."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Cryptographic hash functions are commonly used to create unique fixed-length digests used to ensure the integrity of code and keys. A golden digest is stored on the device and compared to the digest computed from the data to be verified. If the digests match, the data has not been maliciously modified. If an attacker can modify the golden digest they then have the ability to store arbitrary data that passes the verification check. Hash digests used to verify public keys and early stage boot code should be immutable, with the strongest protection offered by hardware immutability."}]}], "RelatedAttackPatterns": ["458", "679"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry is still under development and will continue to see updates and content improvements."}, {"Type": "Maintenance", "Note": "As of CWE 4.3, CWE-1282 and CWE-1233 are being investigated for potential duplication or overlap."}]}
{"ID": "1283", "Name": "Mutable Attestation or Measurement Reporting Data", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The register contents used for attestation or measurement reporting data to verify boot flow are modifiable by an adversary.", "ExtendedDescription": "\n\nA System-on-Chip (SoC) implements secure boot or verified boot. During this boot flow, the SoC often measures the code that it authenticates. The measurement is usually done by calculating the one-way hash of the code binary and extending it to the previous hash. The hashing algorithm should be a Secure One-Way hash function. The final hash, i.e., the value obtained after the completion of the boot flow, serves as the measurement data used in reporting or in attestation. The calculated hash is often stored in registers that can later be read by the party of interest to determine tampering of the boot flow. A common weakness is that the contents in these registers are modifiable by an adversary, thus spoofing the measurement.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "284", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "Such issues can be introduced during hardware architecture or design and can be identified later during Testing or System Configuration phases."}, {"Phase": "Implementation", "Note": "If the access-controls which protecting the reporting registers are misconfigured during implementation, this weakness can arise."}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Memory", "Read Application Data"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "\n\nMeasurement data should be stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent.\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The SoC extends the hash and stores the results in registers. Without protection, an adversary can write their chosen hash values to these registers. Thus, the attacker controls the reported results."}, {"BodyText": "To prevent the above scenario, the registers should have one or more of the following properties:\n\n\n  - Should be Read-Only with respect to an adversary\n\n  - Cannot be extended or modifiable either directly or indirectly (using a trusted agent as proxy) by an adversary\n\n  - Should have appropriate access controls or protections"}]}], "RelatedAttackPatterns": ["680"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry is still in development and will continue to see updates and content improvements."}], "Top25Examples": [{"Reference": "CVE-2022-1740", "Description": "The tested version of Dominion Voting Systems ImageCast X\u2019s on-screen application hash display feature, audit log export, and application export functionality rely on self-attestation mechanisms. An attacker could leverage this vulnerability to disguise malicious applications on a device."}]}
{"ID": "1284", "Name": "Improper Validation of Specified Quantity in Input", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product receives input that is expected to specify a quantity (such as size or length), but it does not validate or incorrectly validates that the quantity has the required properties.", "ExtendedDescription": "\n\nSpecified quantities include size, length, frequency, price, rate, number of operations, time, and others. Code may rely on specified quantities to allocate resources, perform calculations, control iteration, etc. When the quantity is not properly validated, then attackers can specify malicious quantities to cause excessive resource allocation, trigger unexpected failures, enable buffer overflows, etc.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "20", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "789", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Often"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Varies by Context"], "Note": "Since quantities are used so often to affect resource allocation or process financial data, they are often present in many places in the code."}], "PotentialMitigations": [{"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n", "Effectiveness": "High"}], "DemonstrativeExamples": [{"ID": "DX-135", "Entries": [{"IntroText": "This example demonstrates a shopping interaction in which the user is free to specify the quantity of items to be purchased and a total is calculated."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t...\n\tpublic static final double price = 20.00;\n\tint quantity = currentUser.getAttribute(\"quantity\");\n\tdouble total = price * quantity;\n\tchargeUser(total);\n\t...\n```"}, {"BodyText": "The user has no control over the price variable, however the code does not prevent a negative value from being specified for quantity. If an attacker were to provide a negative value, then the user would have their account credited instead of debited."}]}, {"ID": "DX-136", "Entries": [{"IntroText": "This example asks the user for a height and width of an m X n game board with a maximum dimension of 100 squares."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t...\n\t#define MAX_DIM 100\n\t...\n```\n/* board dimensions */* \n\t\n\tint m,n, error;\n\tboard_square_t *board;\n\tprintf(\"Please specify the board height: \\n\");\n\terror = scanf(\"%d\", &m);\n\tif ( EOF == error ){\n\t```\n\t\tdie(\"No integer passed: Die evil hacker!\\n\");\n\t}\n\tprintf(\"Please specify the board width: \\n\");\n\terror = scanf(\"%d\", &n);\n\tif ( EOF == error ){\n\t\tdie(\"No integer passed: Die evil hacker!\\n\");\n\t}\n\tif ( m > MAX_DIM || n > MAX_DIM ) {\n\t\tdie(\"Value too large: Die evil hacker!\\n\");\n\t}\n\tboard = (board_square_t*) malloc( m * n * sizeof(board_square_t));\n\t...\n```"}, {"BodyText": "While this code checks to make sure the user cannot specify large, positive integers and consume too much memory, it does not check for negative values supplied by the user. As a result, an attacker can perform a resource consumption (CWE-400) attack against this program by specifying two, large negative values that will not overflow, resulting in a very large memory allocation (CWE-789) and possibly a system crash. Alternatively, an attacker can provide very large negative values which will cause an integer overflow (CWE-190) and unexpected behavior will follow depending on how the values are treated in the remainder of the program."}]}], "ObservedExamples": [{"Reference": "CVE-2022-21668", "Description": "Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-21668"}, {"Reference": "CVE-2008-1440", "Description": "lack of validation of length field leads to infinite loop", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1440"}, {"Reference": "CVE-2008-2374", "Description": "lack of validation of string length fields allows memory consumption or buffer over-read", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2374"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry is still under development and will continue to see updates and content improvements."}], "Top25Examples": [{"Reference": "CVE-2021-21939", "Description": "A heap-based buffer overflow vulnerability exists in the XWD parser functionality of Accusoft ImageGear 19.10. A specially-crafted file can lead to code execution. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2021-21943", "Description": "A heap-based buffer overflow vulnerability exists in the XWD parser functionality of Accusoft ImageGear 19.10. A specially-crafted file can lead to code execution. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2021-21950", "Description": "An out-of-bounds write vulnerability exists in the CMD_DEVICE_GET_SERVER_LIST_REQUEST functionality of the home_security binary of Anker Eufy Homebase 2 2.1.6.9h in function recv_server_device_response_msg_process. A specially-crafted network packet can lead to code execution."}, {"Reference": "CVE-2021-21951", "Description": "An out-of-bounds write vulnerability exists in the CMD_DEVICE_GET_SERVER_LIST_REQUEST functionality of the home_security binary of Anker Eufy Homebase 2 2.1.6.9h in function read_udp_push_config_file. A specially-crafted network packet can lead to code execution."}, {"Reference": "CVE-2021-21960", "Description": "A stack-based buffer overflow vulnerability exists in both the LLMNR functionality of Sealevel Systems, Inc. SeaConnect 370W v1.3.34. A specially-crafted network packet can lead to remote code execution. An attacker can send a malicious packet to trigger this vulnerability."}, {"Reference": "CVE-2021-26347", "Description": "Failure to validate the integer operand in ASP (AMD Secure Processor) bootloader may allow an attacker to introduce an integer overflow in the L2 directory table in SPI flash resulting in a potential denial of service."}, {"Reference": "CVE-2021-30350", "Description": "Lack of MBN header size verification against input buffer can lead to memory corruption in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Wearables"}, {"Reference": "CVE-2021-35132", "Description": "Out of bound write in DSP service due to improper bound check for response buffer size in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Wearables"}, {"Reference": "CVE-2021-44158", "Description": "ASUS RT-AX56U Wi-Fi Router is vulnerable to stack-based buffer overflow due to improper validation for httpd parameter length. An authenticated local area network attacker can launch arbitrary code execution to control the system or disrupt service."}, {"Reference": "CVE-2021-45918", "Description": "NHI\u2019s health insurance web service component has insufficient validation for input string length, which can result in heap-based buffer overflow attack. A remote attacker can exploit this vulnerability to flood the memory space reserved for the program, in order to terminate service without authentication, which requires a system restart to recover service."}, {"Reference": "CVE-2021-45972", "Description": "The giftrans function in giftrans 1.12.2 contains a stack-based buffer overflow because a value inside the input file determines the amount of data to write. This allows an attacker to overwrite up to 250 bytes outside of the allocated buffer with arbitrary data."}, {"Reference": "CVE-2021-46154", "Description": "A vulnerability has been identified in Simcenter Femap V2020.2 (All versions), Simcenter Femap V2021.1 (All versions). Affected application contains a stack based buffer overflow vulnerability while parsing NEU files. This could allow an attacker to execute code in the context of the current process. (ZDI-CAN-14646, ZDI-CAN-14679, ZDI-CAN-15084, ZDI-CAN-15304)"}, {"Reference": "CVE-2021-46155", "Description": "A vulnerability has been identified in Simcenter Femap V2020.2 (All versions), Simcenter Femap V2021.1 (All versions). Affected application contains a stack based buffer overflow vulnerability while parsing NEU files. This could allow an attacker to execute code in the context of the current process. (ZDI-CAN-14683, ZDI-CAN-15283, ZDI-CAN-15303, ZDI-CAN-15593)"}, {"Reference": "CVE-2021-46158", "Description": "A vulnerability has been identified in Simcenter Femap V2020.2 (All versions), Simcenter Femap V2021.1 (All versions). Affected application contains a stack based buffer overflow vulnerability while parsing NEU files. This could allow an attacker to execute code in the context of the current process. (ZDI-CAN-15085, ZDI-CAN-15289, ZDI-CAN-15602)"}, {"Reference": "CVE-2022-20689", "Description": "Multiple vulnerabilities in the Cisco Discovery Protocol functionality of Cisco ATA 190 Series Analog Telephone Adapter firmware could allow an unauthenticated, adjacent attacker to cause Cisco Discovery Protocol memory corruption on an affected device. These vulnerabilities are due to missing length validation checks when processing Cisco Discovery Protocol messages. An attacker could exploit these vulnerabilities by sending a malicious Cisco Discovery Protocol packet to an affected device. A successful exploit could allow the attacker to cause an out-of-bounds read of the valid Cisco Discovery Protocol packet data, which could allow the attacker to cause corruption in the internal Cisco Discovery Protocol database of the affected device."}, {"Reference": "CVE-2022-20690", "Description": "Multiple vulnerabilities in the Cisco Discovery Protocol functionality of Cisco ATA 190 Series Analog Telephone Adapter firmware could allow an unauthenticated, adjacent attacker to cause Cisco Discovery Protocol memory corruption on an affected device. These vulnerabilities are due to missing length validation checks when processing Cisco Discovery Protocol messages. An attacker could exploit these vulnerabilities by sending a malicious Cisco Discovery Protocol packet to an affected device. A successful exploit could allow the attacker to cause an out-of-bounds read of the valid Cisco Discovery Protocol packet data, which could allow the attacker to cause corruption in the internal Cisco Discovery Protocol database of the affected device."}, {"Reference": "CVE-2022-22072", "Description": "Buffer overflow can occur due to improper validation of NDP application information length in Snapdragon Auto, Snapdragon Compute, Snapdragon Consumer Electronics Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music"}, {"Reference": "CVE-2022-22106", "Description": "Memory corruption in multimedia due to improper length check while copying the data in Snapdragon Auto"}, {"Reference": "CVE-2022-24903", "Description": "Rsyslog is a rocket-fast system for log processing. Modules for TCP syslog reception have a potential heap buffer overflow when octet-counted framing is used. This can result in a segfault or some other malfunction. As of our understanding, this vulnerability can not be used for remote code execution. But there may still be a slight chance for experts to do that. The bug occurs when the octet count is read. While there is a check for the maximum number of octets, digits are written to a heap buffer even when the octet count is over the maximum, This can be used to overrun the memory buffer. However, once the sequence of digits stop, no additional characters can be added to the buffer. In our opinion, this makes remote exploits impossible or at least highly complex. Octet-counted framing is one of two potential framing modes. It is relatively uncommon, but enabled by default on receivers. Modules `imtcp`, `imptcp`, `imgssapi`, and `imhttp` are used for regular syslog message reception. It is best practice not to directly expose them to the public. When this practice is followed, the risk is considerably lower. Module `imdiag` is a diagnostics module primarily intended for testbench runs. We do not expect it to be present on any production installation. Octet-counted framing is not very common. Usually, it needs to be specifically enabled at senders. If users do not need it, they can turn it off for the most important modules. This will mitigate the vulnerability."}, {"Reference": "CVE-2022-25727", "Description": "Memory Corruption in modem due to improper length check while copying into memory in Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Voice & Music"}, {"Reference": "CVE-2022-25793", "Description": "A Stack-based Buffer Overflow Vulnerability in Autodesk 3ds Max 2022, 2021, and 2020 may lead to code execution through the lack of proper validation of the length of user-supplied data prior to copying it to a fixed-length stack-based buffer when parsing ActionScript Byte Code files. This vulnerability may allow arbitrary code execution on affected installations of Autodesk 3ds Max."}, {"Reference": "CVE-2022-2845", "Description": "Improper Validation of Specified Quantity in Input in GitHub repository vim/vim prior to 9.0.0218. "}, {"Reference": "CVE-2022-35928", "Description": "AES Crypt is a file encryption software for multiple platforms. AES Crypt for Linux built using the source on GitHub and having the version number 3.11 has a vulnerability with respect to reading user-provided passwords and confirmations via command-line prompts. Passwords lengths were not checked before being read. This vulnerability may lead to buffer overruns. This does _not_ affect source code found on aescrypt.com, nor is the vulnerability present when providing a password or a key via the `-p` or `-k` command-line options. The problem was fixed via in commit 68761851b and will be included in release 3.16. Users are advised to upgrade. Users unable to upgrade should us the `-p` or `-k` options to provide a password or key."}, {"Reference": "CVE-2022-36063", "Description": "Azure RTOS USBx is a USB host, device, and on-the-go (OTG) embedded stack, fully integrated with Azure RTOS ThreadX and available for all Azure RTOS ThreadX\u2013supported processors. Azure RTOS USBX implementation of host support for USB CDC ECM includes an integer underflow and a buffer overflow in the `_ux_host_class_cdc_ecm_mac_address_get` function which may be potentially exploited to achieve remote code execution or denial of service. Setting mac address string descriptor length to a `0` or `1` allows an attacker to introduce an integer underflow followed (string_length) by a buffer overflow of the `cdc_ecm -> ux_host_class_cdc_ecm_node_id` array. This may allow one to redirect the code execution flow or introduce a denial of service. The fix has been included in USBX release [6.1.12](https://github.com/azure-rtos/usbx/releases/tag/v6.1.12_rel). Improved mac address string descriptor length validation to check for unexpectedly small values may be used as a workaround."}, {"Reference": "CVE-2022-36620", "Description": "D-link DIR-816 A2_v1.10CNB04, DIR-878 DIR_878_FW1.30B08.img is vulnerable to Buffer Overflow via /goform/addRouting."}, {"Reference": "CVE-2022-37134", "Description": "D-link DIR-816 A2_v1.10CNB04.img is vulnerable to Buffer Overflow via /goform/form2Wan.cgi. When wantype is 3, l2tp_usrname will be decrypted by base64, and the result will be stored in v94, which does not check the size of l2tp_usrname, resulting in stack overflow."}, {"Reference": "CVE-2022-41877", "Description": "FreeRDP is a free remote desktop protocol library and clients. Affected versions of FreeRDP are missing input length validation in `drive` channel. A malicious server can trick a FreeRDP based client to read out of bound data and send it back to the server. This issue has been addressed in version 2.9.0 and all users are advised to upgrade. Users unable to upgrade should not use the drive redirection channel - command line options `/drive`, `+drives` or `+home-drive`."}, {"Reference": "CVE-2022-4904", "Description": "A flaw was found in the c-ares package. The ares_set_sortlist is missing checks about the validity of the input string, which allows a possible arbitrary length stack overflow. This issue may cause a denial of service or a limited impact on confidentiality and integrity."}, {"Reference": "CVE-2022-20699", "Description": "Multiple vulnerabilities in Cisco Small Business RV160, RV260, RV340, and RV345 Series Routers could allow an attacker to do any of the following: Execute arbitrary code Elevate privileges Execute arbitrary commands Bypass authentication and authorization protections Fetch and run unsigned software Cause denial of service (DoS) For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2022-24754", "Description": "PJSIP is a free and open source multimedia communication library written in C language. In versions prior to and including 2.12 PJSIP there is a stack-buffer overflow vulnerability which only impacts PJSIP users who accept hashed digest credentials (credentials with data_type `PJSIP_CRED_DATA_DIGEST`). This issue has been patched in the master branch of the PJSIP repository and will be included with the next release. Users unable to upgrade need to check that the hashed digest data length must be equal to `PJSIP_MD5STRLEN` before passing to PJSIP."}, {"Reference": "CVE-2021-3581", "Description": "Buffer Access with Incorrect Length Value in zephyr. Zephyr versions >= >=2.5.0 contain Buffer Access with Incorrect Length Value (CWE-805). For more information, see https://github.com/zephyrproject-rtos/zephyr/security/advisories/GHSA-8q65-5gqf-fmw5"}, {"Reference": "CVE-2022-0414", "Description": "Improper Validation of Specified Quantity in Input in Packagist dolibarr/dolibarr prior to 16.0."}, {"Reference": "CVE-2022-0596", "Description": "Improper Validation of Specified Quantity in Input in Packagist microweber/microweber prior to 1.2.11."}, {"Reference": "CVE-2022-20445", "Description": "In process_service_search_rsp of sdp_discovery.cc, there is a possible out of bounds read due to improper input validation. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12L Android-13Android ID: A-225876506"}, {"Reference": "CVE-2022-22166", "Description": "An Improper Validation of Specified Quantity in Input vulnerability in the routing protocol daemon (rpd) of Juniper Networks Junos OS allows an unauthenticated networked attacker to cause an rdp crash and thereby a Denial of Service (DoS). If a BGP update message is received over an established BGP session where a BGP SR-TE policy tunnel attribute is malformed and BGP update tracing flag is enabled, the rpd will core. This issue can happen with any BGP session as long as the previous conditions are met. This issue can not propagate as the crash occurs as soon as the malformed update is received. This issue affects Juniper Networks Junos OS: 20.4 versions prior to 20.4R3-S1; 21.1 versions prior to 21.1R2-S2, 21.1R3. This issue does not affect Juniper Networks Junos OS versions prior to 20.4R1."}, {"Reference": "CVE-2022-4171", "Description": "The demon image annotation plugin for WordPress is vulnerable to improper input validation in versions up to, and including 5.0. This is due to the plugin improperly validating the number of characters supplied during an annotation despite there being a setting to limit the number characters input. This means that unauthenticated attackers can bypass the length restrictions and input more characters than allowed via the settings."}, {"Reference": "CVE-2022-25375", "Description": "An issue was discovered in drivers/usb/gadget/function/rndis.c in the Linux kernel before 5.16.10. The RNDIS USB gadget lacks validation of the size of the RNDIS_MSG_SET command. Attackers can obtain sensitive information from kernel memory."}, {"Reference": "CVE-2022-23635", "Description": "Istio is an open platform to connect, manage, and secure microservices. In affected versions the Istio control plane, `istiod`, is vulnerable to a request processing error, allowing a malicious attacker that sends a specially crafted message which results in the control plane crashing. This endpoint is served over TLS port 15012, but does not require any authentication from the attacker. For simple installations, Istiod is typically only reachable from within the cluster, limiting the blast radius. However, for some deployments, especially [multicluster](https://istio.io/latest/docs/setup/install/multicluster/primary-remote/) topologies, this port is exposed over the public internet. There are no effective workarounds, beyond upgrading. Limiting network access to Istiod to the minimal set of clients can help lessen the scope of the vulnerability to some extent."}, {"Reference": "CVE-2021-31556", "Description": "An issue was discovered in the Oauth extension for MediaWiki through 1.35.2. MWOAuthConsumerSubmitControl.php does not ensure that the length of an RSA key will fit in a MySQL blob."}, {"Reference": "CVE-2022-20686", "Description": "Multiple vulnerabilities in the Link Layer Discovery Protocol (LLDP) functionality of Cisco ATA 190 Series Analog Telephone Adapter firmware could allow an unauthenticated, remote attacker to execute arbitrary code on an affected device and cause the LLDP service to restart. These vulnerabilities are due to missing length validation of certain LLDP packet header fields. An attacker could exploit these vulnerabilities by sending a malicious LLDP packet to an affected device. A successful exploit could allow the attacker to execute code on the affected device and cause LLDP to restart unexpectedly, resulting in a denial of service (DoS) condition."}, {"Reference": "CVE-2022-20385", "Description": "a function called 'nla_parse', do not check the len of para, it will check nla_type (which can be controlled by userspace) with 'maxtype' (in this case, it is GSCAN_MAX), then it access polciy array 'policy[type]', which OOB access happens.Product: AndroidVersions: Android SoCAndroid ID: A-238379819"}, {"Reference": "CVE-2022-26125", "Description": "Buffer overflow vulnerabilities exist in FRRouting through 8.1.0 due to wrong checks on the input packet length in isisd/isis_tlvs.c."}, {"Reference": "CVE-2022-26127", "Description": "A buffer overflow vulnerability exists in FRRouting through 8.1.0 due to missing a check on the input packet length in the babel_packet_examin function in babeld/message.c."}, {"Reference": "CVE-2022-26128", "Description": "A buffer overflow vulnerability exists in FRRouting through 8.1.0 due to a wrong check on the input packet length in the babel_packet_examin function in babeld/message.c."}, {"Reference": "CVE-2022-36086", "Description": "linked_list_allocator is an allocator usable for no_std systems. Prior to version 0.10.2, the heap initialization methods were missing a minimum size check for the given heap size argument. This could lead to out-of-bound writes when a heap was initialized with a size smaller than `3 * size_of::<usize>` because of metadata write operations. This vulnerability impacts all the initialization functions on the `Heap` and `LockedHeap` types, including `Heap::new`, `Heap::init`, `Heap::init_from_slice`, and `LockedHeap::new`. It also affects multiple uses of the `Heap::extend` method. Version 0.10.2 contains a patch for the issue. As a workaround, ensure that the heap is only initialized with a size larger than `3 * size_of::<usize>` and that the `Heap::extend` method is only called with sizes larger than `2 * size_of::<usize>()`. Also, ensure that the total heap size is (and stays) a multiple of `2 * size_of::<usize>()`."}, {"Reference": "CVE-2022-36938", "Description": "DexLoader function get_stringidx_fromdex() in Redex prior to commit 3b44c64 can load an out of bound address when loading the string index table, potentially allowing remote code execution during processing of a 3rd party Android APK file."}, {"Reference": "CVE-2021-1058", "Description": "NVIDIA vGPU software contains a vulnerability in the guest kernel mode driver and vGPU plugin, in which an input data size is not validated, which may lead to tampering of data or denial of service. This affects vGPU version 8.x (prior to 8.6) and version 11.0 (prior to 11.3)."}, {"Reference": "CVE-2021-1062", "Description": "NVIDIA vGPU manager contains a vulnerability in the vGPU plugin, in which an input data length is not validated, which may lead to tampering of data or denial of service. This affects vGPU version 8.x (prior to 8.6) and version 11.0 (prior to 11.3)."}, {"Reference": "CVE-2021-1081", "Description": "NVIDIA vGPU software contains a vulnerability in the guest kernel mode driver and Virtual GPU manager (vGPU plugin), in which an input length is not validated, which may lead to information disclosure, tampering of data, or denial of service. This affects vGPU version 12.x (prior to 12.2), version 11.x (prior to 11.4) and version 8.x (prior 8.7)."}, {"Reference": "CVE-2021-1082", "Description": "NVIDIA vGPU software contains a vulnerability in the Virtual GPU Manager (vGPU plugin), in which an input length is not validated, which may lead to information disclosure, tampering of data, or denial of service. vGPU version 12.x (prior to 12.2), version 11.x (prior to 11.4) and version 8.x (prior to 8.7)"}, {"Reference": "CVE-2021-1083", "Description": "NVIDIA vGPU software contains a vulnerability in the guest kernel mode driver and Virtual GPU Manager (vGPU plugin), in which an input length is not validated, which may lead to information disclosure, tampering of data, or denial of service. This affects vGPU version 12.x (prior to 12.2) and version 11.x (prior to 11.4)."}, {"Reference": "CVE-2021-37674", "Description": "TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can trigger a denial of service via a segmentation fault in `tf.raw_ops.MaxPoolGrad` caused by missing validation. The [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/kernels/maxpooling_op.cc) misses some validation for the `orig_input` and `orig_output` tensors. The fixes for CVE-2021-29579 were incomplete. We have patched the issue in GitHub commit 136b51f10903e044308cf77117c0ed9871350475. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range."}, {"Reference": "CVE-2021-37677", "Description": "TensorFlow is an end-to-end open source platform for machine learning. In affected versions the shape inference code for `tf.raw_ops.Dequantize` has a vulnerability that could trigger a denial of service via a segfault if an attacker provides invalid arguments. The shape inference [implementation](https://github.com/tensorflow/tensorflow/blob/460e000de3a83278fb00b61a16d161b1964f15f4/tensorflow/core/ops/array_ops.cc#L2999-L3014) uses `axis` to select between two different values for `minmax_rank` which is then used to retrieve tensor dimensions. However, code assumes that `axis` can be either `-1` or a value greater than `-1`, with no validation for the other values. We have patched the issue in GitHub commit da857cfa0fde8f79ad0afdbc94e88b5d4bbec764. The fix will be included in TensorFlow 2.6.0. We will also cherrypick this commit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range."}, {"Reference": "CVE-2021-39193", "Description": "Frontier is Substrate's Ethereum compatibility layer. Prior to commit number 0b962f218f0cdd796dadfe26c3f09e68f7861b26, a bug in `pallet-ethereum` can cause invalid transactions to be included in the Ethereum block state in `pallet-ethereum` due to not validating the input data size. Any invalid transactions included this way have no possibility to alter the internal Ethereum or Substrate state. The transaction will appear to have be included, but is of no effect as it is rejected by the EVM engine. The impact is further limited by Substrate extrinsic size constraints. A patch is available in commit number 0b962f218f0cdd796dadfe26c3f09e68f7861b26. There are no workarounds aside from applying the patch."}, {"Reference": "CVE-2021-39690", "Description": "In setDisplayPadding of WallpaperManagerService.java, there is a possible way to cause a persistent DoS due to improper input validation. This could lead to local denial of service with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12Android ID: A-204316511"}, {"Reference": "CVE-2021-43267", "Description": "An issue was discovered in net/tipc/crypto.c in the Linux kernel before 5.14.16. The Transparent Inter-Process Communication (TIPC) functionality allows remote attackers to exploit insufficient validation of user-supplied sizes for the MSG_CRYPTO message type."}, {"Reference": "CVE-2021-45462", "Description": "In Open5GS 2.4.0, a crafted packet from UE can crash SGW-U/UPF."}, {"Reference": "CVE-2022-0174", "Description": "Improper Validation of Specified Quantity in Input vulnerability in dolibarr dolibarr/dolibarr."}, {"Reference": "CVE-2022-20493", "Description": "In Condition of Condition.java, there is a possible way to grant notification access due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12L Android-13Android ID: A-242846316"}, {"Reference": "CVE-2022-20543", "Description": "In multiple locations, there is a possible display crash loop due to improper input validation. This could lead to local denial of service with system execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-238178261"}, {"Reference": "CVE-2022-20687", "Description": "Multiple vulnerabilities in the Link Layer Discovery Protocol (LLDP) functionality of Cisco ATA 190 Series Analog Telephone Adapter firmware could allow an unauthenticated, remote attacker to execute arbitrary code on an affected device and cause the LLDP service to restart. These vulnerabilities are due to missing length validation of certain LLDP packet header fields. An attacker could exploit these vulnerabilities by sending a malicious LLDP packet to an affected device. A successful exploit could allow the attacker to execute code on the affected device and cause LLDP to restart unexpectedly, resulting in a denial of service (DoS) condition."}, {"Reference": "CVE-2022-20688", "Description": "A vulnerability in the Cisco Discovery Protocol functionality of Cisco ATA 190 Series Analog Telephone Adapter firmware could allow an unauthenticated, remote attacker to execute arbitrary code on an affected device and cause Cisco Discovery Protocol service to restart. This vulnerability is due to missing length validation of certain Cisco Discovery Protocol packet header fields. An attacker could exploit these vulnerabilities by sending a malicious Cisco Discovery Protocol packet to an affected device. A successful exploit could allow the attacker to execute code on the affected device and cause Cisco Discovery Protocol to restart unexpectedly, resulting in a DoS condition."}, {"Reference": "CVE-2022-2277", "Description": "Improper Input Validation vulnerability exists in the Hitachi Energy MicroSCADA X SYS600's ICCP stack during the ICCP communication establishment causes a denial-of-service when ICCP of SYS600 is request to forward any data item updates with timestamps too distant in the future to any remote ICCP system. By default, ICCP is not configured and not enabled. This issue affects: Hitachi Energy MicroSCADA X SYS600 version 10.2 to version 10.3.1. cpe:2.3:a:hitachienergy:microscada_x_sys600:10.2:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.2.1:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.3:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.3.1:*:*:*:*:*:*:*"}, {"Reference": "CVE-2022-2592", "Description": "A lack of length validation in Snippet descriptions in GitLab CE/EE affecting all versions prior to 15.1.6, 15.2 prior to 15.2.4 and 15.3 prior to 15.3.2 allows an authenticated attacker to create a maliciously large Snippet which when requested with or without authentication places excessive load on the server, potential leading to Denial of Service."}, {"Reference": "CVE-2022-28613", "Description": "A vulnerability in the HCI Modbus TCP COMPONENT of Hitachi Energy RTU500 series CMU Firmware that is caused by the validation error in the length information carried in MBAP header allows an ATTACKER to reboot the device by sending a special crafted message. This issue affects: Hitachi Energy RTU500 series CMU Firmware 12.0.*; 12.2.*; 12.4.*; 12.6.*; 12.7.*; 13.2.*."}, {"Reference": "CVE-2022-2868", "Description": "libtiff's tiffcrop utility has a improper input validation flaw that can lead to out of bounds read and ultimately cause a crash if an attacker is able to supply a crafted file to tiffcrop."}, {"Reference": "CVE-2022-3411", "Description": "A lack of length validation in GitLab CE/EE affecting all versions from 12.4 before 15.6.7, 15.7 before 15.7.6, and 15.8 before 15.8.1 allows an authenticated attacker to create a large Issue description via GraphQL which, when repeatedly requested, saturates CPU usage."}, {"Reference": "CVE-2022-39272", "Description": "Flux is an open and extensible continuous delivery solution for Kubernetes. Versions prior to 0.35.0 are subject to a Denial of Service. Users that have permissions to change Flux\u2019s objects, either through a Flux source or directly within a cluster, can provide invalid data to fields `.spec.interval` or `.spec.timeout` (and structured variations of these fields), causing the entire object type to stop being processed. This issue is patched in version 0.35.0. As a workaround, Admission controllers can be employed to restrict the values that can be used for fields `.spec.interval` and `.spec.timeout`, however upgrading to the latest versions is still the recommended mitigation."}, {"Reference": "CVE-2022-39313", "Description": "Parse Server is an open source backend that can be deployed to any infrastructure that can run Node.js. Versions prior to 4.10.17, and prior to 5.2.8 on the 5.x branch, crash when a file download request is received with an invalid byte range, resulting in a Denial of Service. This issue has been patched in versions 4.10.17, and 5.2.8. There are no known workarounds."}, {"Reference": "CVE-2022-40761", "Description": "The function tee_obj_free in Samsung mTower through 0.3.0 allows a trusted application to trigger a Denial of Service (DoS) by invoking the function TEE_AllocateOperation with a disturbed heap layout, related to utee_cryp_obj_alloc."}, {"Reference": "CVE-2022-41896", "Description": "TensorFlow is an open source platform for machine learning. If `ThreadUnsafeUnigramCandidateSampler` is given input `filterbank_channel_count` greater than the allowed max size, TensorFlow will crash. We have patched the issue in GitHub commit 39ec7eaf1428e90c37787e5b3fbd68ebd3c48860. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range."}, {"Reference": "CVE-2022-48297", "Description": "The geofencing kernel code has a vulnerability of not verifying the length of the input data. Successful exploitation of this vulnerability may cause out-of-bounds memory access."}, {"Reference": "CVE-2022-48298", "Description": "The geofencing kernel code does not verify the length of the input data. Successful exploitation of this vulnerability may cause out-of-bounds memory access."}, {"Reference": "CVE-2021-0934", "Description": "In findAllDeAccounts of AccountsDb.java, there is a possible denial of service due to resource exhaustion. This could lead to local denial of service with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12L Android-13Android ID: A-169762606"}, {"Reference": "CVE-2021-28510", "Description": "For certain systems running EOS, a Precision Time Protocol (PTP) packet of a management/signaling message with an invalid Type-Length-Value (TLV) causes the PTP agent to restart. Repeated restarts of the service will make the service unavailable."}, {"Reference": "CVE-2022-0214", "Description": "The Custom Popup Builder WordPress plugin before 1.3.1 autoload data from its popup on every pages, as such data can be sent by unauthenticated user, and is not validated in length, this could cause a denial of service on the blog"}, {"Reference": "CVE-2022-1174", "Description": "A potential DoS vulnerability was discovered in Gitlab CE/EE versions 13.7 before 14.7.7, all versions starting from 14.8 before 14.8.5, all versions starting from 14.9 before 14.9.2 allowed an attacker to trigger high CPU usage via a special crafted input added in Issues, Merge requests, Milestones, Snippets, Wiki pages, etc."}, {"Reference": "CVE-2022-23319", "Description": "A segmentation fault during PCF file parsing in pcf2bdf versions >=1.05 allows an attacker to trigger a program crash via a specially crafted PCF font file. This crash affects the availability of the software and dependent downstream components."}, {"Reference": "CVE-2022-23580", "Description": "Tensorflow is an Open Source Machine Learning Framework. During shape inference, TensorFlow can allocate a large vector based on a value from a tensor controlled by the user. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."}, {"Reference": "CVE-2022-29202", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.ragged.constant` does not fully validate the input arguments. This results in a denial of service by consuming all available memory. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-36078", "Description": "Binary provides encoding/decoding in Borsh and other formats. The vulnerability is a memory allocation vulnerability that can be exploited to allocate slices in memory with (arbitrary) excessive size value, which can either exhaust available memory or crash the whole program. When using `github.com/gagliardetto/binary` to parse unchecked (or wrong type of) data from untrusted sources of input (e.g. the blockchain) into slices, it's possible to allocate memory with excessive size. When `dec.Decode(&val)` method is used to parse data into a structure that is or contains slices of values, the length of the slice was previously read directly from the data itself without any checks on the size of it, and then a slice was allocated. This could lead to an overflow and an allocation of memory with excessive size value. Users should upgrade to `v0.7.1` or higher. A workaround is not to rely on the `dec.Decode(&val)` function to parse the data, but to use a custom `UnmarshalWithDecoder()` method that reads and checks the length of any slice."}, {"Reference": "CVE-2022-37311", "Description": "OX App Suite through 7.10.6 has Uncontrolled Resource Consumption via a large location request parameter to the redirect servlet."}, {"Reference": "CVE-2022-37312", "Description": "OX App Suite through 7.10.6 has Uncontrolled Resource Consumption via a large request body containing a redirect URL to the deferrer servlet."}, {"Reference": "CVE-2022-39294", "Description": "conduit-hyper integrates a conduit application with the hyper server. Prior to version 0.4.2, `conduit-hyper` did not check any limit on a request's length before calling [`hyper::body::to_bytes`](https://docs.rs/hyper/latest/hyper/body/fn.to_bytes.html). An attacker could send a malicious request with an abnormally large `Content-Length`, which could lead to a panic if memory allocation failed for that request. In version 0.4.2, `conduit-hyper` sets an internal limit of 128 MiB per request, otherwise returning status 400 (\"Bad Request\"). This crate is part of the implementation of Rust's [crates.io](https://crates.io/), but that service is not affected due to its existing cloud infrastructure, which already drops such malicious requests. Even with the new limit in place, `conduit-hyper` is not recommended for production use, nor to directly serve the public Internet."}, {"Reference": "CVE-2022-4111", "Description": "Unrestricted file size limit can lead to DoS in tooljet/tooljet <1.27 by allowing a logged in attacker to upload profile pictures over 2MB. "}, {"Reference": "CVE-2022-41968", "Description": "Nextcloud Server is an open source personal cloud server. Prior to versions 23.0.10 and 24.0.5, calendar name lengths are not validated before writing to a database. As a result, an attacker can send unnecessary amounts of data against the database. Version 23.0.10 and 24.0.5 contain patches for the issue. No known workarounds are available."}, {"Reference": "CVE-2022-20488", "Description": "In NotificationChannel of NotificationChannel.java, there is a possible failure to persist permissions settings due to resource exhaustion. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12L Android-13Android ID: A-242703217"}, {"Reference": "CVE-2022-20491", "Description": "In NotificationChannel of NotificationChannel.java, there is a possible failure to persist permissions settings due to resource exhaustion. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12L Android-13Android ID: A-242703556"}, {"Reference": "CVE-2022-20691", "Description": "A vulnerability in the Cisco Discovery Protocol functionality of Cisco ATA 190 Series Adaptive Telephone Adapter firmware could allow an unauthenticated, adjacent attacker to cause a DoS condition of an affected device. This vulnerability is due to missing length validation of certain Cisco Discovery Protocol packet header fields. An attacker could exploit this vulnerability by sending crafted Cisco Discovery Protocol packets to an affected device. A successful exploit could allow the attacker to cause the device to exhaust available memory and cause the service to restart. Cisco has released firmware updates that address this vulnerability. "}, {"Reference": "CVE-2022-21208", "Description": "The package node-opcua before 2.74.0 are vulnerable to Denial of Service (DoS) due to a missing limitation on the number of received chunks - per single session or in total for all concurrent sessions. An attacker can exploit this vulnerability by sending an unlimited number of huge chunks (e.g. 2GB each) without sending the Final closing chunk."}, {"Reference": "CVE-2022-29212", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, certain TFLite models that were created using TFLite model converter would crash when loaded in the TFLite interpreter. The culprit is that during quantization the scale of values could be greater than 1 but code was always assuming sub-unit scaling. Thus, since code was calling `QuantizeMultiplierSmallerThanOneExp`, the `TFLITE_CHECK_LT` assertion would trigger and abort the process. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-29196", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.Conv3DBackpropFilterV2` does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack. The code does not validate that the `filter_sizes` argument is a vector. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-29200", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.LSTMBlockCell` does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack. The code does not validate the ranks of any of the arguments to this API call. This results in `CHECK`-failures when the elements of the tensor are accessed. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}]}
{"ID": "1285", "Name": "Improper Validation of Specified Index, Position, or Offset in Input", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product receives input that is expected to specify an index, position, or offset into an indexable resource such as a buffer or file, but it does not validate or incorrectly validates that the specified index/position/offset has the required properties.", "ExtendedDescription": "\n\nOften, indexable resources such as memory buffers or files can be accessed using a specific position, index, or offset, such as an index for an array or a position for a file. When untrusted input is not properly validated before it is used as an index, attackers could access (or attempt to access) unauthorized portions of these resources. This could be used to cause buffer overflows, excessive resource allocation, or trigger unexpected failures. \n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "20", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Often"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Varies by Context"]}], "PotentialMitigations": [{"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n", "Effectiveness": "High"}], "DemonstrativeExamples": [{"ID": "DX-134", "Entries": [{"IntroText": "The following example retrieves the sizes of messages for a pop3 mail server. The message sizes are retrieved from a socket that returns in a buffer the message number and the message size, the message number (num) and size (size) are extracted from the buffer and the message size is placed into an array using the message number for the array index."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n```\n/* capture the sizes of all messages */* \n\tint getsizes(int sock, int count, int *sizes) {\n\t```\n\t\t\t...\n\t\t\tchar buf[BUFFER_SIZE];\n\t\t\tint ok;\n\t\t\tint num, size;\n```\n// read values from socket and added to sizes array* \n\t\t\twhile ((ok = gen_recv(sock, buf, sizeof(buf))) == 0)\n\t\t\t{\n\t\t\t```\n```\n// continue read from socket until buf only contains '.'* \n\t\t\t\t\tif (DOTLINE(buf))\n\t\t\t\t\t```\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse if (sscanf(buf, \"%d %d\", &num, &size) == 2)\n\t\t\t\t\t\tsizes[num - 1] = size;\n\t\t\t}\n\t\t\t\t...\n\t}\n```"}, {"BodyText": "In this example the message number retrieved from the buffer could be a value that is outside the allowable range of indices for the array and could possibly be a negative number. Without proper validation of the value to be used for the array index an array overflow could occur and could potentially lead to unauthorized access to memory addresses and system crashes. The value of the array index should be validated to ensure that it is within the allowable range of indices for the array as in the following code."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n```\n/* capture the sizes of all messages */* \n\tint getsizes(int sock, int count, int *sizes) {\n\t```\n\t\t\t...\n\t\t\tchar buf[BUFFER_SIZE];\n\t\t\tint ok;\n\t\t\tint num, size;\n```\n// read values from socket and added to sizes array* \n\t\t\twhile ((ok = gen_recv(sock, buf, sizeof(buf))) == 0)\n\t\t\t{\n\t\t\t```\n```\n// continue read from socket until buf only contains '.'* \n\t\t\t\t\tif (DOTLINE(buf))\n\t\t\t\t\t```\n\t\t\t\t\t\tbreak;\n\t\t\t\t\telse if (sscanf(buf, \"%d %d\", &num, &size) == 2) {\n\t\t\t\t\t\t\tif (num > 0 && num <= (unsigned)count)\n\t\t\t\t\t\t\t\tsizes[num - 1] = size;\n\t\t\t\t\t\t\telse\n```\n/* warn about possible attempt to induce buffer overflow */* \n\t\t\t\t\t\t\t\t\treport(stderr, \"Warning: ignoring bogus data for message sizes returned by server.\\n\");}}\n\t\t\t```\n\t\t\t\t...\n\t}\n```"}]}, {"ID": "DX-133", "Entries": [{"IntroText": "In the following example the method displayProductSummary is called from a Web service servlet to retrieve product summary information for display to the user. The servlet obtains the integer value of the product number from the user and passes it to the displayProductSummary method. The displayProductSummary method passes the integer value of the product number to the getProductSummary method which obtains the product summary from the array object containing the project summaries using the integer value of the product number as the array index."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n```\n// Method called from servlet to obtain product information* \n\tpublic String displayProductSummary(int index) {\n\t\n\t```\n\t\t\tString productSummary = new String(\"\");\n\t\t\ttry {\n\t\t\t\tString productSummary = getProductSummary(index);\n\t\t\t} catch (Exception ex) {...}\n\t\t\treturn productSummary;\n\t}\n\tpublic String getProductSummary(int index) {\n\t\treturn products[index];\n\t}\n```"}, {"BodyText": "In this example the integer value used as the array index that is provided by the user may be outside the allowable range of indices for the array which may provide unexpected results or cause the application to fail. The integer value used for the array index should be validated to ensure that it is within the allowable range of indices for the array as in the following code."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n```\n// Method called from servlet to obtain product information* \n\tpublic String displayProductSummary(int index) {\n\t\n\t```\n\t\t\tString productSummary = new String(\"\");\n\t\t\ttry {\n\t\t\t\tString productSummary = getProductSummary(index);\n\t\t\t} catch (Exception ex) {...}\n\t\t\treturn productSummary;\n\t}\n\tpublic String getProductSummary(int index) {\n\t\t\tString productSummary = \"\";\n\t\t\tif ((index >= 0) && (index < MAX_PRODUCTS)) {\n\t\t\t\tproductSummary = products[index];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tSystem.err.println(\"index is out of bounds\");\n\t\t\t\tthrow new IndexOutOfBoundsException();\n\t\t\t}\n\t\t\treturn productSummary;\n\t}\n```"}, {"BodyText": "An alternative in Java would be to use one of the collection objects such as ArrayList that will automatically generate an exception if an attempt is made to access an array index that is out of bounds."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tArrayList productArray = new ArrayList(MAX_PRODUCTS);\n\t...\n\ttry {\n\t\tproductSummary = (String) productArray.get(index);\n\t} catch (IndexOutOfBoundsException ex) {...}\n```"}]}, {"ID": "DX-90", "Entries": [{"IntroText": "The following example asks a user for an offset into an array to select an item."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint main (int argc, char **argv) {\n\t\tchar *items[] = {\"boat\", \"car\", \"truck\", \"train\"};\n\t\tint index = GetUntrustedOffset();\n\t\tprintf(\"User selected %s\\n\", items[index-1]);\n\t}\n```"}, {"BodyText": "The programmer allows the user to specify which element in the list to select, however an attacker can provide an out-of-bounds offset, resulting in a buffer over-read (CWE-126)."}]}], "ObservedExamples": [{"Reference": "CVE-2005-0369", "Description": "large ID in packet used as array index", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0369"}, {"Reference": "CVE-2001-1009", "Description": "negative array index as argument to POP LIST command", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1009"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry is still under development and will continue to see updates and content improvements."}], "Top25Examples": [{"Reference": "CVE-2022-20542", "Description": "In parseParamsBlob of types.cpp, there is a possible out of bounds write due to a missing bounds check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-238083570"}, {"Reference": "CVE-2022-23523", "Description": "In versions prior to 0.8.1, the linux-loader crate uses the offsets and sizes provided in the ELF headers to determine the offsets to read from. If those offsets point beyond the end of the file this could lead to Virtual Machine Monitors using the `linux-loader` crate entering an infinite loop if the ELF header of the kernel they are loading was modified in a malicious manner. This issue has been addressed in 0.8.1. The issue can be mitigated by ensuring that only trusted kernel images are loaded or by verifying that the headers do not point beyond the end of the file."}, {"Reference": "CVE-2022-35893", "Description": "An issue was discovered in Insyde InsydeH2O with kernel 5.0 through 5.5. An SMM memory corruption vulnerability in the FvbServicesRuntimeDxe driver allows an attacker to write fixed or predictable data to SMRAM. Exploiting this issue could lead to escalating privileges to SMM."}, {"Reference": "CVE-2022-35896", "Description": "An issue SMM memory leak vulnerability in SMM driver (SMRAM was discovered in Insyde InsydeH2O with kernel 5.0 through 5.5. An attacker can dump SMRAM contents via the software SMI provided by the FvbServicesRuntimeDxe driver to read the contents of SMRAM, leading to information disclosure."}, {"Reference": "CVE-2022-36448", "Description": "An issue was discovered in Insyde InsydeH2O with kernel 5.0 through 5.5. There is an SMM memory corruption vulnerability in the Software SMI handler in the PnpSmm driver."}, {"Reference": "CVE-2021-1647", "Description": "Microsoft Defender Remote Code Execution Vulnerability"}, {"Reference": "CVE-2022-24521", "Description": "Windows Common Log File System Driver Elevation of Privilege Vulnerability"}, {"Reference": "CVE-2021-0076", "Description": "Improper Validation of Specified Index, Position, or Offset in Input in firmware for some Intel(R) PROSet/Wireless Wi-Fi in multiple operating systems and some Killer(TM) Wi-Fi in Windows 10 and 11 may allow a privileged user to potentially enable denial of service via local access."}, {"Reference": "CVE-2021-0175", "Description": "Improper Validation of Specified Index, Position, or Offset in Input in firmware for some Intel(R) PROSet/Wireless Wi-Fi in multiple operating systems and some Killer(TM) Wi-Fi in Windows 10 and 11 may allow an unauthenticated user to potentially enable denial of service via adjacent access."}, {"Reference": "CVE-2021-0183", "Description": "Improper Validation of Specified Index, Position, or Offset in Input in software for some Intel(R) PROSet/Wireless Wi-Fi in multiple operating systems and some Killer(TM) Wi-Fi in Windows 10 and 11 may allow an unauthenticated user to potentially enable denial of service via adjacent access."}, {"Reference": "CVE-2022-22179", "Description": "A Improper Validation of Specified Index, Position, or Offset in Input vulnerability in the Juniper DHCP daemon (jdhcpd) of Juniper Networks Junos OS allows an adjacent unauthenticated attacker to cause a crash of jdhcpd and thereby a Denial of Service (DoS). In a scenario where DHCP relay or local server is configured the problem can be triggered if a DHCPv4 packet with specific options is received leading to a corruption of the options read from the packet. This corruption can then lead to jdhcpd crash and restart. This issue affects: Juniper Networks Junos OS 17.4R1 and later versions prior to 18.4R3-S10; 19.1 versions prior to 19.1R3-S7; 19.2 versions prior to 19.2R1-S8, 19.2R3-S4; 19.3 versions prior to 19.3R3-S4; 19.4 versions prior to 19.4R3-S6; 20.1 versions prior to 20.1R3-S2; 20.2 versions prior to 20.2R3-S3; 20.3 versions prior to 20.3R3-S2; 20.4 versions prior to 20.4R3-S1; 21.1 versions prior to 21.1R2-S2, 21.1R3; 21.2 versions prior to 21.2R1-S2, 21.2R2, 21.2R3; 21.3 versions prior to 21.3R1-S1, 21.3R2."}, {"Reference": "CVE-2022-22201", "Description": "An Improper Validation of Specified Index, Position, or Offset in Input vulnerability in the Packet Forwarding Engine (PFE) of Juniper Networks Junos OS allows an unauthenticated network-based attacker to cause a Denial of Service (DoS). On SRX5000 Series with SPC3, SRX4000 Series, and vSRX, when PowerMode IPsec is configured and a malformed ESP packet matching an established IPsec tunnel is received the PFE crashes. This issue affects Juniper Networks Junos OS on SRX5000 Series with SPC3, SRX4000 Series, and vSRX: All versions prior to 19.4R2-S6, 19.4R3-S7; 20.1 versions prior to 20.1R3-S3; 20.2 versions prior to 20.2R3-S4; 20.3 versions prior to 20.3R3-S3; 20.4 versions prior to 20.4R3-S2; 21.1 versions prior to 21.1R3; 21.2 versions prior to 21.2R3; 21.3 versions prior to 21.3R1-S2, 21.3R2."}, {"Reference": "CVE-2022-22223", "Description": "On QFX10000 Series devices using Juniper Networks Junos OS when configured as transit IP/MPLS penultimate hop popping (PHP) nodes with link aggregation group (LAG) interfaces, an Improper Validation of Specified Index, Position, or Offset in Input weakness allows an attacker sending certain IP packets to cause multiple interfaces in the LAG to detach causing a Denial of Service (DoS) condition. Continued receipt and processing of these packets will sustain the Denial of Service. This issue affects IPv4 and IPv6 packets. Packets of either type can cause and sustain the DoS event. These packets can be destined to the device or be transit packets. On devices such as the QFX10008 with line cards, line cards can be restarted to restore service. On devices such as the QFX10002 you can restart the PFE service, or reboot device to restore service. This issue affects: Juniper Networks Junos OS on QFX10000 Series: All versions prior to 15.1R7-S11; 18.4 versions prior to 18.4R2-S10, 18.4R3-S10; 19.1 versions prior to 19.1R3-S8; 19.2 versions prior to 19.2R3-S4; 19.3 versions prior to 19.3R3-S5; 19.4 versions prior to 19.4R2-S6, 19.4R3-S7; 20.1 versions prior to 20.1R3-S3; 20.2 versions prior to 20.2R3-S3; 20.3 versions prior to 20.3R3-S2; 20.4 versions prior to 20.4R3-S4; 21.1 versions prior to 21.1R3; 21.2 versions prior to 21.2R3-S3; 21.3 versions prior to 21.3R3-S1. An indicator of compromise may be seen by issuing the command: request pfe execute target fpc0 command \"show jspec pechip[3] registers ps l2_node 10\" timeout 0 | refresh 1 | no-more and reviewing for backpressured output; for example: GOT: 0x220702a8 pe.ps.l2_node[10].pkt_cnt 00000076 GOT: 0x220702b4 pe.ps.l2_node[10].backpressured 00000002 <<<< STICKS HERE and requesting detail on the pepic wanio: request pfe execute target fpc0 command \"show pepic 0 wanio-info\" timeout 0 | no-more | match xe-0/0/0:2 GOT: 3 xe-0/0/0:2 10 6 3 0 1 10 189 10 0x6321b088 <<< LOOK HERE as well as looking for tail drops looking at the interface queue, for example: show interfaces queue xe-0/0/0:2 resulting in: Transmitted: Total-dropped packets: 1094137 0 pps << LOOK HERE"}, {"Reference": "CVE-2021-35092", "Description": "Processing DCB/AVB algorithm with an invalid queue index from IOCTL request could lead to arbitrary address modification in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music"}, {"Reference": "CVE-2022-30330", "Description": "In the KeepKey firmware before 7.3.2,Flaws in the supervisor interface can be exploited to bypass important security restrictions on firmware operations. Using these flaws, malicious firmware code can elevate privileges, permanently make the device inoperable or overwrite the trusted bootloader code to compromise the hardware wallet across reboots or storage wipes."}, {"Reference": "CVE-2021-26351", "Description": "Insufficient DRAM address validation in System Management Unit (SMU) may result in a DMA (Direct Memory Access) read/write from/to invalid DRAM address that could result in denial of service."}, {"Reference": "CVE-2022-26129", "Description": "Buffer overflow vulnerabilities exist in FRRouting through 8.1.0 due to wrong checks on the subtlv length in the functions, parse_hello_subtlv, parse_ihu_subtlv, and parse_update_subtlv in babeld/message.c."}, {"Reference": "CVE-2021-1060", "Description": "NVIDIA vGPU software contains a vulnerability in the guest kernel mode driver and vGPU plugin, in which an input index is not validated, which may lead to tampering of data or denial of service. This affects vGPU version 8.x (prior to 8.6) and version 11.0 (prior to 11.3)."}, {"Reference": "CVE-2021-26370", "Description": "Improper validation of destination address in SVC_LOAD_FW_IMAGE_BY_INSTANCE and SVC_LOAD_BINARY_BY_ATTRIB in a malicious UApp or ABL may allow an attacker to overwrite arbitrary bootloader memory with SPI ROM contents resulting in a loss of integrity and availability."}, {"Reference": "CVE-2022-23814", "Description": "Failure to validate addresses provided by software to BIOS commands may result in a potential loss of integrity of guest memory in a confidential compute environment. "}, {"Reference": "CVE-2022-36363", "Description": "A vulnerability has been identified in LOGO! 12/24RCE (All versions), LOGO! 12/24RCEo (All versions), LOGO! 230RCE (All versions), LOGO! 230RCEo (All versions), LOGO! 24CE (All versions), LOGO! 24CEo (All versions), LOGO! 24RCE (All versions), LOGO! 24RCEo (All versions), SIPLUS LOGO! 12/24RCE (All versions), SIPLUS LOGO! 12/24RCEo (All versions), SIPLUS LOGO! 230RCE (All versions), SIPLUS LOGO! 230RCEo (All versions), SIPLUS LOGO! 24CE (All versions), SIPLUS LOGO! 24CEo (All versions), SIPLUS LOGO! 24RCE (All versions), SIPLUS LOGO! 24RCEo (All versions). Affected devices do not properly validate an offset value which can be defined in TCP packets when calling a method. This could allow an attacker to retrieve parts of the content of the memory."}]}
{"ID": "1286", "Name": "Improper Validation of Syntactic Correctness of Input", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product receives input that is expected to be well-formed - i.e., to comply with a certain syntax - but it does not validate or incorrectly validates that the input complies with the syntax.", "ExtendedDescription": "\n\nOften, complex inputs are expected to follow a particular syntax, which is either assumed by the input itself, or declared within metadata such as headers. The syntax could be for data exchange formats, markup languages, or even programming languages. When untrusted input is not properly validated for the expected syntax, attackers could cause parsing failures, trigger unexpected errors, or expose latent vulnerabilities that might not be directly exploitable if the input had conformed to the syntax.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "20", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Often"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Varies by Context"]}], "PotentialMitigations": [{"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n", "Effectiveness": "High"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code loads and parses an XML file."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n```\n// Read DOM* \n\ttry {\n\t```\n\t\t...\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\tfactory.setValidating( false );\n\t\t....\n\t\tc_dom = factory.newDocumentBuilder().parse( xmlFile );\n\t} catch(Exception ex) {\n\t\t...\n\t}\n```"}, {"BodyText": "The XML file is loaded without validating it against a known XML Schema or DTD."}]}], "ObservedExamples": [{"Reference": "CVE-2016-4029", "Description": "Chain: incorrect validation of intended decimal-based IP address format (CWE-1286) enables parsing of octal or hexadecimal formats (CWE-1389), allowing bypass of an SSRF protection mechanism (CWE-918).", "Link": "https://www.cve.org/CVERecord?id=CVE-2016-4029"}, {"Reference": "CVE-2007-5893", "Description": "HTTP request with missing protocol version number leads to crash", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-5893"}], "RelatedAttackPatterns": ["66", "676"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry is still under development and will continue to see updates and content improvements."}], "Top25Examples": [{"Reference": "CVE-2021-45687", "Description": "An issue was discovered in the raw-cpuid crate before 9.1.1 for Rust. If the serialize feature is used (which is not the the default), a Deserialize operation may lack sufficient validation, leading to memory corruption or a panic."}, {"Reference": "CVE-2022-22176", "Description": "An Improper Validation of Syntactic Correctness of Input vulnerability in the Juniper DHCP daemon (jdhcpd) of Juniper Networks Junos OS allows an adjacent unauthenticated attacker sending a malformed DHCP packet to cause a crash of jdhcpd and thereby a Denial of Service (DoS). If option-82 is configured in a DHCP snooping / -security scenario, jdhcpd crashes if a specific malformed DHCP request packet is received. The DHCP functionality is impacted while jdhcpd restarts, and continued exploitation of the vulnerability will lead to the unavailability of the DHCP service and thereby a sustained DoS. This issue affects Juniper Networks Junos OS 13.2 version 13.2R1 and later versions prior to 15.1R7-S11; 18.3 versions prior to 18.3R3-S6; 18.4 versions prior to 18.4R2-S9, 18.4R3-S10; 19.1 versions prior to 19.1R2-S3, 19.1R3-S7; 19.2 versions prior to 19.2R1-S8, 19.2R3-S4; 19.3 versions prior to 19.3R2-S7, 19.3R3-S4; 19.4 versions prior to 19.4R3-S6; 20.1 versions prior to 20.1R3-S3; 20.2 versions prior to 20.2R3-S3; 20.3 versions prior to 20.3R3-S1; 20.4 versions prior to 20.4R3; 21.1 versions prior to 21.1R2-S1, 21.1R3; 21.2 versions prior to 21.2R1-S1, 21.2R2. This issue does not affect Juniper Networks Junos OS version 12.3R12 and prior versions."}, {"Reference": "CVE-2022-22192", "Description": "An Improper Validation of Syntactic Correctness of Input vulnerability in the kernel of Juniper Networks Junos OS Evolved on PTX series allows a network-based, unauthenticated attacker to cause a Denial of Service (DoS). When an incoming TCP packet destined to the device is malformed there is a possibility of a kernel panic. Only TCP packets destined to the ports for BGP, LDP and MSDP can trigger this. This issue only affects PTX10004, PTX10008, PTX10016. No other PTX Series devices or other platforms are affected. This issue affects Juniper Networks Junos OS Evolved: 20.4-EVO versions prior to 20.4R3-S4-EVO; 21.3-EVO versions prior to 21.3R3-EVO; 21.4-EVO versions prior to 21.4R3-EVO; 22.1-EVO versions prior to 22.1R2-EVO. This issue does not affect Juniper Networks Junos OS Evolved versions prior to 20.4R1-EVO."}, {"Reference": "CVE-2022-45113", "Description": "Improper validation of syntactic correctness of input vulnerability exist in Movable Type series. Having a user to access a specially crafted URL may allow a remote unauthenticated attacker to set a specially crafted URL to the Reset Password page and conduct a phishing attack. Affected products/versions are as follows: Movable Type 7 r.5301 and earlier (Movable Type 7 Series), Movable Type Advanced 7 r.5301 and earlier (Movable Type Advanced 7 Series), Movable Type 6.8.7 and earlier (Movable Type 6 Series), Movable Type Advanced 6.8.7 and earlier (Movable Type Advanced 6 Series), Movable Type Premium 1.53 and earlier, and Movable Type Premium Advanced 1.53 and earlier."}, {"Reference": "CVE-2021-40017", "Description": "The HW_KEYMASTER module lacks the validity check of the key format. Successful exploitation of this vulnerability may result in out-of-bounds memory access."}, {"Reference": "CVE-2022-1941", "Description": "A parsing vulnerability for the MessageSet type in the ProtocolBuffers versions prior to and including 3.16.1, 3.17.3, 3.18.2, 3.19.4, 3.20.1 and 3.21.5 for protobuf-cpp, and versions prior to and including 3.16.1, 3.17.3, 3.18.2, 3.19.4, 3.20.1 and 4.21.5 for protobuf-python can lead to out of memory failures. A specially crafted message with multiple key-value per elements creates parsing issues, and can lead to a Denial of Service against services receiving unsanitized input. We recommend upgrading to versions 3.18.3, 3.19.5, 3.20.2, 3.21.6 for protobuf-cpp and 3.18.3, 3.19.5, 3.20.2, 4.21.6 for protobuf-python. Versions for 3.16 and 3.17 are no longer updated."}, {"Reference": "CVE-2022-39376", "Description": "GLPI stands for Gestionnaire Libre de Parc Informatique. GLPI is a Free Asset and IT Management Software package that provides ITIL Service Desk features, licenses tracking and software auditing. Users may be able to inject custom fields values in `mailto` links. This issue has been patched, please upgrade to version 10.0.4. There are currently no known workarounds."}, {"Reference": "CVE-2022-40277", "Description": "Joplin version 2.8.8 allows an external attacker to execute arbitrary commands remotely on any client that opens a link in a malicious markdown file, via Joplin. This is possible because the application does not properly validate the schema/protocol of existing links in the markdown file before passing them to the 'shell.openExternal' function."}, {"Reference": "CVE-2022-41908", "Description": "TensorFlow is an open source platform for machine learning. An input `token` that is not a UTF-8 bytestring will trigger a `CHECK` fail in `tf.raw_ops.PyFunc`. We have patched the issue in GitHub commit 9f03a9d3bafe902c1e6beb105b2f24172f238645. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range."}, {"Reference": "CVE-2022-1431", "Description": "An issue has been discovered in GitLab affecting all versions starting from 12.10 before 14.8.6, all versions starting from 14.9 before 14.9.4, all versions starting from 14.10 before 14.10.1. GitLab was not correctly handling malicious requests to the PyPi API endpoint allowing the attacker to cause uncontrolled resource consumption."}]}
