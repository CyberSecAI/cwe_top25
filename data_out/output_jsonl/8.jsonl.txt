{"ID": "571", "Name": "Expression is Always True", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product contains an expression that will always evaluate to true.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "561", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Quality Degradation", "Varies by Context"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Testing"], "Description": "Use Static Analysis tools to spot such conditions."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following Java example the updateInventory() method used within an e-business product ordering/inventory application will check if the input product number is in the store or in the warehouse. If the product is found, the method will update the store or warehouse database as well as the aggregate product database. If the product is not found, the method intends to do some special processing without updating any database."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic void updateInventory(String productNumber) {\n\t\t\tboolean isProductAvailable = false;\n\t\t\tboolean isDelayed = false;\n\t\t\tif (productInStore(productNumber)) {\n\t\t\t\tisProductAvailable = true;\n\t\t\t\tupdateInStoreDatabase(productNumber);\n\t\t\t}\n\t\t\telse if (productInWarehouse(productNumber)) {\n\t\t\t\tisProductAvailable = true;\n\t\t\t\tupdateInWarehouseDatabase(productNumber);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tisProductAvailable = true;\n\t\t\t}\n\t\t\tif ( isProductAvailable ) {\n\t\t\t\tupdateProductDatabase(productNumber);\n\t\t\t}\n\t\t\telse if ( isDelayed ) {\n```\n/* Warn customer about delay before order processing */* \n\t\t\t\t\t...}}"}, {"BodyText": "However, the method never sets the isDelayed variable and instead will always update the isProductAvailable variable to true. The result is that the predicate testing the isProductAvailable boolean will always evaluate to true and therefore always update the product database. Further, since the isDelayed variable is initialized to false and never changed, the expression always evaluates to false and the customer will never be warned of a delay on their product."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "572", "Name": "Call to Thread run() instead of start()", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee.", "ExtendedDescription": "In most cases a direct call to a Thread object's run() method is a bug. The programmer intended to begin a new thread of control, but accidentally called run() instead of start(), so the run() method will execute in the caller's thread of control.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "821", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Quality Degradation", "Varies by Context"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Use the start() method instead of the run() method."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following excerpt from a Java program mistakenly calls run() instead of start()."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tThread thr = new Thread() {\n\t\tpublic void run() {\n\t\t\t...\n\t\t}\n\t};\n\tthr.run();\n```"}]}], "AffectedResources": ["System Process"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "573", "Name": "Improper Following of Specification by Caller", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product does not follow or incorrectly follows the specifications as required by the implementation language, environment, framework, protocol, or platform.", "ExtendedDescription": "When leveraging external functionality, such as an API, it is important that the caller does so in accordance with the requirements of the external functionality or else unintended behaviors may result, possibly leaving the system vulnerable to any number of exploits.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Quality Degradation", "Varies by Context"]}], "ObservedExamples": [{"Reference": "CVE-2006-7140", "Description": "Crypto implementation removes padding when it shouldn't, allowing forged signatures", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-7140"}, {"Reference": "CVE-2006-4339", "Description": "Crypto implementation removes padding when it shouldn't, allowing forged signatures", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4339"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}}
{"ID": "574", "Name": "EJB Bad Practices: Use of Synchronization Primitives", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives.", "ExtendedDescription": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"An enterprise bean must not use thread synchronization primitives to synchronize execution of multiple instances.\" The specification justifies this requirement in the following way: \"This rule is required to ensure consistent runtime semantics because while some EJB containers may use a single JVM to execute all enterprise bean's instances, others may distribute the instances across multiple JVMs.\"", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "695", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "821", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Quality Degradation"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Do not use Synchronization Primitives when writing EJBs."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following Java example a Customer Entity EJB provides access to customer information in a database for a business application."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t@Entity\n\tpublic class Customer implements Serializable {\n\t\t\tprivate String id;\n\t\t\tprivate String firstName;\n\t\t\tprivate String lastName;\n\t\t\tprivate Address address;\n\t\t\tpublic Customer() {...}\n\t\t\tpublic Customer(String id, String firstName, String lastName) {...}\n\t\t\t@Id\n\t\t\tpublic String getCustomerId() {...}\n\t\t\tpublic synchronized void setCustomerId(String id) {...}\n\t\t\tpublic String getFirstName() {...}\n\t\t\tpublic synchronized void setFirstName(String firstName) {...}\n\t\t\tpublic String getLastName() {...}\n\t\t\tpublic synchronized void setLastName(String lastName) {...}\n\t\t\t@OneToOne()\n\t\t\tpublic Address getAddress() {...}\n\t\t\tpublic synchronized void setAddress(Address address) {...}\n\t}\n```"}, {"BodyText": "However, the customer entity EJB uses the synchronized keyword for the set methods to attempt to provide thread safe synchronization for the member variables. The use of synchronized methods violate the restriction of the EJB specification against the use synchronization primitives within EJBs. Using synchronization primitives may cause inconsistent behavior of the EJB when used within different EJB containers."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "575", "Name": "EJB Bad Practices: Use of AWT Swing", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using AWT/Swing.", "ExtendedDescription": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"An enterprise bean must not use the AWT functionality to attempt to output information to a display, or to input information from a keyboard.\" The specification justifies this requirement in the following way: \"Most servers do not allow direct interaction between an application program and a keyboard/display attached to the server system.\"", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "695", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Quality Degradation"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Do not use AWT/Swing when writing EJBs."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following Java example is a simple converter class for converting US dollars to Yen. This converter class demonstrates the improper practice of using a stateless session Enterprise JavaBean that implements an AWT Component and AWT keyboard event listener to retrieve keyboard input from the user for the amount of the US dollars to convert to Yen."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t@Stateless\n\tpublic class ConverterSessionBean extends Component implements KeyListener, ConverterSessionRemote {\n```\n/* member variables for receiving keyboard input using AWT API */* \n\t\t\t\n\t\t\t...\n\t\t\tprivate StringBuffer enteredText = new StringBuffer();\n\t\t\t\n\t\t\t\n\t\t\t */* conversion rate on US dollars to Yen */* \n\t\t\t\n\t\t\tprivate BigDecimal yenRate = new BigDecimal(\"115.3100\");\n\t\t\t\n\t\t\tpublic ConverterSessionBean() {\n\t\t\t```\n\t\t\t\t\tsuper();\n```\n/* method calls for setting up AWT Component for receiving keyboard input */* \n\t\t\t\t\t\n\t\t\t\t\t...\n\t\t\t\t\taddKeyListener(this);}\n\t\t\t\n\t\t\tpublic BigDecimal dollarToYen(BigDecimal dollars) {\n\t\t\t```\n\t\t\t\tBigDecimal result = dollars.multiply(yenRate);\n\t\t\t\treturn result.setScale(2, BigDecimal.ROUND_DOWN);\n\t\t\t}\n```\n/* member functions for implementing AWT KeyListener interface */* \n\t\t\t\n\t\t\tpublic void keyTyped(KeyEvent event) {\n\t\t\t```\n\t\t\t\t...\n\t\t\t}\n\t\t\tpublic void keyPressed(KeyEvent e) {\n\t\t\t}\n\t\t\tpublic void keyReleased(KeyEvent e) {\n\t\t\t}\n```\n/* member functions for receiving keyboard input and displaying output */* \n\t\t\t\n\t\t\tpublic void paint(Graphics g) {...}\n\t\t\t\n\t\t\t...}"}, {"BodyText": "This use of the AWT and Swing APIs within any kind of Enterprise JavaBean not only violates the restriction of the EJB specification against using AWT or Swing within an EJB but also violates the intended use of Enterprise JavaBeans to separate business logic from presentation logic."}, {"BodyText": "The Stateless Session Enterprise JavaBean should contain only business logic. Presentation logic should be provided by some other mechanism such as Servlets or Java Server Pages (JSP) as in the following Java/JSP example."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\t@Stateless\n\tpublic class ConverterSessionBean implements ConverterSessionRemoteInterface {\n```\n/* conversion rate on US dollars to Yen */* \n\t\t\tprivate BigDecimal yenRate = new BigDecimal(\"115.3100\");\n\t\t\t\n\t\t\tpublic ConverterSessionBean() {\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t */* remote method to convert US dollars to Yen */* \n\t\t\t\n\t\t\tpublic BigDecimal dollarToYen(BigDecimal dollars) {\n\t\t\t```\n\t\t\t\tBigDecimal result = dollars.multiply(yenRate);\n\t\t\t\treturn result.setScale(2, BigDecimal.ROUND_DOWN);\n\t\t\t}\n\t}\n```"}, {"Nature": "Good", "Language": "JSP", "ExampleCode": "```\n\t<%@ page import=\"converter.ejb.Converter, java.math.*, javax.naming.*\"%>\n\t<%!\n\t\t\tprivate Converter converter = null;\n\t\t\tpublic void jspInit() {\n\t\t\t\ttry {\n\t\t\t\t\tInitialContext ic = new InitialContext();\n\t\t\t\t\tconverter = (Converter) ic.lookup(Converter.class.getName());\n\t\t\t\t} catch (Exception ex) {\n\t\t\t\t\tSystem.out.println(\"Couldn't create converter bean.\"+ ex.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\tpublic void jspDestroy() {\n\t\t\t\tconverter = null;\n\t\t\t}\n\t%>\n\t<html>\n\t\t\t<head><title>Converter</title></head>\n\t\t\t<body bgcolor=\"white\">\n\t\t\t\t\t<h1>Converter</h1>\n\t\t\t\t\t<hr>\n\t\t\t\t\t<p>Enter an amount to convert:</p>\n\t\t\t\t\t<form method=\"get\">\n\t\t\t\t\t\t<input type=\"text\" name=\"amount\" size=\"25\"><br>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t<input type=\"submit\" value=\"Submit\">\n\t\t\t\t\t\t<input type=\"reset\" value=\"Reset\">\n\t\t\t\t\t</form>\n\t\t\t\t\t<%\n\t\t\t\t\t\tString amount = request.getParameter(\"amount\");\n\t\t\t\t\t\tif ( amount != null && amount.length() > 0 ) {\n\t\t\t\t\t\t\tBigDecimal d = new BigDecimal(amount);\n\t\t\t\t\t\t\tBigDecimal yenAmount = converter.dollarToYen(d);\n\t\t\t\t\t%>\n\t\t\t\t\t<p>\n\t\t\t\t\t<%= amount %> dollars are <%= yenAmount %> Yen.\n\t\t\t\t\t<p>\n\t\t\t\t\t<%\n\t\t\t\t\t\t}\n\t\t\t\t\t%>\n\t\t\t</body>\n\t</html>\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "576", "Name": "EJB Bad Practices: Use of Java I/O", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using the java.io package.", "ExtendedDescription": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"An enterprise bean must not use the java.io package to attempt to access files and directories in the file system.\" The specification justifies this requirement in the following way: \"The file system APIs are not well-suited for business components to access data. Business components should use a resource manager API, such as JDBC, to store data.\"", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "695", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Quality Degradation"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Do not use Java I/O when writing EJBs."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following Java example is a simple stateless Enterprise JavaBean that retrieves the interest rate for the number of points for a mortgage. In this example, the interest rates for various points are retrieved from an XML document on the local file system, and the EJB uses the Java I/O API to retrieve the XML document from the local file system."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t@Stateless\n\tpublic class InterestRateBean implements InterestRateRemote {\n\t\t\tprivate Document interestRateXMLDocument = null;\n\t\t\tprivate File interestRateFile = null;\n\t\t\tpublic InterestRateBean() {\n\t\t\t\t\ttry {\n```\n/* get XML document from the local filesystem */* \n\t\t\t\t\t\t\tinterestRateFile = new File(Constants.INTEREST_RATE_FILE);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (interestRateFile.exists())\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t```\n\t\t\t\t\t\t\t\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\t\t\t\t\t\t\t\tDocumentBuilder db = dbf.newDocumentBuilder();\n\t\t\t\t\t\t\t\tinterestRateXMLDocument = db.parse(interestRateFile);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t} catch (IOException ex) {...}\n\t\t\t}\n\t\t\tpublic BigDecimal getInterestRate(Integer points) {\n\t\t\t\treturn getInterestRateFromXML(points);\n\t\t\t}\n```\n/* member function to retrieve interest rate from XML document on the local file system */* \n\t\t\t\n\t\t\tprivate BigDecimal getInterestRateFromXML(Integer points) {...}}"}, {"BodyText": "This use of the Java I/O API within any kind of Enterprise JavaBean violates the EJB specification by using the java.io package for accessing files within the local filesystem."}, {"BodyText": "An Enterprise JavaBean should use a resource manager API for storing and accessing data. In the following example, the private member function getInterestRateFromXMLParser uses an XML parser API to retrieve the interest rates."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\t@Stateless\n\tpublic class InterestRateBean implements InterestRateRemote {\n\t\t\tpublic InterestRateBean() {\n\t\t\t}\n\t\t\tpublic BigDecimal getInterestRate(Integer points) {\n\t\t\t\treturn getInterestRateFromXMLParser(points);\n\t\t\t}\n```\n/* member function to retrieve interest rate from XML document using an XML parser API */* \n\t\t\t\n\t\t\tprivate BigDecimal getInterestRateFromXMLParser(Integer points) {...}}"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "577", "Name": "EJB Bad Practices: Use of Sockets", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using sockets.", "ExtendedDescription": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"An enterprise bean must not attempt to listen on a socket, accept connections on a socket, or use a socket for multicast.\" The specification justifies this requirement in the following way: \"The EJB architecture allows an enterprise bean instance to be a network socket client, but it does not allow it to be a network server. Allowing the instance to become a network server would conflict with the basic function of the enterprise bean-- to serve the EJB clients.\"", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "573", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Quality Degradation"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "Do not use Sockets when writing EJBs."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following Java example is a simple stateless Enterprise JavaBean that retrieves stock symbols and stock values. The Enterprise JavaBean creates a socket and listens for and accepts connections from clients on the socket."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t@Stateless\n\tpublic class StockSymbolBean implements StockSymbolRemote {\n\t\t\tServerSocket serverSocket = null;\n\t\t\tSocket clientSocket = null;\n\t\t\tpublic StockSymbolBean() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tserverSocket = new ServerSocket(Constants.SOCKET_PORT);\n\t\t\t\t\t} catch (IOException ex) {...}\n\t\t\t\t\ttry {\n\t\t\t\t\t\tclientSocket = serverSocket.accept();\n\t\t\t\t\t} catch (IOException e) {...}\n\t\t\t}\n\t\t\tpublic String getStockSymbol(String name) {...}\n\t\t\tpublic BigDecimal getStockValue(String symbol) {...}\n\t\t\tprivate void processClientInputFromSocket() {...}\n\t}\n```"}, {"BodyText": "And the following Java example is similar to the previous example but demonstrates the use of multicast socket connections within an Enterprise JavaBean."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t@Stateless\n\tpublic class StockSymbolBean extends Thread implements StockSymbolRemote {\n\t\t\tServerSocket serverSocket = null;\n\t\t\tSocket clientSocket = null;\n\t\t\tboolean listening = false;\n\t\t\tpublic StockSymbolBean() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tserverSocket = new ServerSocket(Constants.SOCKET_PORT);\n\t\t\t\t\t} catch (IOException ex) {...}\n\t\t\t\t\tlistening = true;\n\t\t\t\t\twhile(listening) {\n\t\t\t\t\t\tstart();\n\t\t\t\t\t}\n\t\t\t}\n\t\t\tpublic String getStockSymbol(String name) {...}\n\t\t\tpublic BigDecimal getStockValue(String symbol) {...}\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tclientSocket = serverSocket.accept();\n\t\t\t\t} catch (IOException e) {...}\n\t\t\t\t...\n\t\t\t}\n\t}\n```"}, {"BodyText": "The previous two examples within any type of Enterprise JavaBean violate the EJB specification by attempting to listen on a socket, accepting connections on a socket, or using a socket for multicast."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "578", "Name": "EJB Bad Practices: Use of Class Loader", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using the class loader.", "ExtendedDescription": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"The enterprise bean must not attempt to create a class loader; obtain the current class loader; set the context class loader; set security manager; create a new security manager; stop the JVM; or change the input, output, and error streams.\" The specification justifies this requirement in the following way: \"These functions are reserved for the EJB container. Allowing the enterprise bean to use these functions could compromise security and decrease the container's ability to properly manage the runtime environment.\"", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "573", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Other"], "Impact": ["Execute Unauthorized Code or Commands", "Varies by Context"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "Do not use the Class Loader when writing EJBs."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following Java example is a simple stateless Enterprise JavaBean that retrieves the interest rate for the number of points for a mortgage. The interest rates for various points are retrieved from an XML document on the local file system, and the EJB uses the Class Loader for the EJB class to obtain the XML document from the local file system as an input stream."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t@Stateless\n\tpublic class InterestRateBean implements InterestRateRemote {\n\t\t\tprivate Document interestRateXMLDocument = null;\n\t\t\tpublic InterestRateBean() {\n\t\t\t\t\ttry {\n```\n// get XML document from the local filesystem as an input stream* \n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t *// using the ClassLoader for this class* \n\t\t\t\t\t\t\tClassLoader loader = this.getClass().getClassLoader();\n\t\t\t\t\t\t\tInputStream in = loader.getResourceAsStream(Constants.INTEREST_RATE_FILE);\n\t\t\t\n\t\t\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\t\t\t```\n\t\t\t\tDocumentBuilder db = dbf.newDocumentBuilder();\n\t\t\t\tinterestRateXMLDocument = db.parse(interestRateFile);\n\t\t\t} catch (IOException ex) {...}\n\t}\n\t\t\tpublic BigDecimal getInterestRate(Integer points) {\n\t\t\t\treturn getInterestRateFromXML(points);\n\t\t\t}\n```\n/* member function to retrieve interest rate from XML document on the local file system */* \n\t\t\t\n\t\t\tprivate BigDecimal getInterestRateFromXML(Integer points) {...}}"}, {"BodyText": "This use of the Java Class Loader class within any kind of Enterprise JavaBean violates the restriction of the EJB specification against obtaining the current class loader as this could compromise the security of the application using the EJB."}]}, {"Entries": [{"IntroText": "An EJB is also restricted from creating a custom class loader and creating a class and instance of a class from the class loader, as shown in the following example."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t@Stateless\n\tpublic class LoaderSessionBean implements LoaderSessionRemote {\n\t\t\tpublic LoaderSessionBean() {\n\t\t\t\ttry {\n\t\t\t\t\tClassLoader loader = new CustomClassLoader();\n\t\t\t\t\tClass c = loader.loadClass(\"someClass\");\n\t\t\t\t\tObject obj = c.newInstance();\n\t\t\t\t\t/* perform some task that uses the new class instance member variables or functions */\n\t\t\t\t\t...\n\t\t\t\t} catch (Exception ex) {...}\n\t\t\t}\n\t\t\tpublic class CustomClassLoader extends ClassLoader {\n\t\t\t}\n\t}\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "579", "Name": "J2EE Bad Practices: Non-serializable Object Stored in Session", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product stores a non-serializable object as an HttpSession attribute, which can hurt reliability.", "ExtendedDescription": "A J2EE application can make use of multiple JVMs in order to improve application reliability and performance. In order to make the multiple JVMs appear as a single application to the end user, the J2EE container can replicate an HttpSession object across multiple JVMs so that if one JVM becomes unavailable another can step in and take its place without disrupting the flow of the application. This is only possible if all session data is serializable, allowing the session to be duplicated between the JVMs.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "573", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Quality Degradation"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "In order for session replication to work, the values the product stores as attributes in the session must implement the Serializable interface."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following class adds itself to the session, but because it is not serializable, the session can no longer be replicated."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class DataGlob {\n\t\t\tString globName;\n\t\t\tString globValue;\n\t\t\tpublic void addToSession(HttpSession session) {\n\t\t\t\tsession.setAttribute(\"glob\", this);\n\t\t\t}\n\t}\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "58", "Name": "Path Equivalence: Windows 8.3 Filename", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product contains a protection mechanism that restricts access to a long filename on a Windows operating system, but it does not properly restrict access to the equivalent short \"8.3\" filename.", "ExtendedDescription": "On later Windows operating systems, a file can have a \"long name\" and a short name that is compatible with older Windows file systems, with up to 8 characters in the filename and 3 characters for the extension. These \"8.3\" filenames, therefore, act as an alternate name for files with long names, so they are useful pathname equivalence manipulations.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "41", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Windows", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Modify Files or Directories"]}], "PotentialMitigations": [{"Phase": ["System Configuration"], "Description": "Disable Windows from supporting 8.3 filenames by editing the Windows registry. Preventing 8.3 filenames will not remove previously generated 8.3 filenames."}], "ObservedExamples": [{"Reference": "CVE-1999-0012", "Description": "Multiple web servers allow restriction bypass using 8.3 names instead of long names", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0012"}, {"Reference": "CVE-2001-0795", "Description": "Source code disclosure using 8.3 file name.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0795"}, {"Reference": "CVE-2005-0471", "Description": "Multi-Factor Vulnerability. Product generates temporary filenames using long filenames, which become predictable in 8.3 format.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0471"}], "FunctionalAreas": ["File Processing"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "Probably under-studied."}]}
{"ID": "580", "Name": "clone() Method Without super.clone()", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product contains a clone() method that does not call super.clone() to obtain the new object.", "ExtendedDescription": "All implementations of clone() should obtain the new object by calling super.clone(). If a class does not follow this convention, a subclass's clone() method will return an object of the wrong type.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "664", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "573", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Unexpected State", "Quality Degradation"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Call super.clone() within your clone() method, when obtaining a new object."}, {"Phase": ["Implementation"], "Description": "In some cases, you can eliminate the clone method altogether and use copy constructors."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following two classes demonstrate a bug introduced by not calling super.clone(). Because of the way Kibitzer implements clone(), FancyKibitzer's clone method will return an object of type Kibitzer instead of FancyKibitzer."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class Kibitzer {\n\t\t\tpublic Object clone() throws CloneNotSupportedException {\n\t\t\t\t\tObject returnMe = new Kibitzer();\n\t\t\t\t\t...\n\t\t\t}\n\t}\n\tpublic class FancyKibitzer extends Kibitzer{\n\t\t\tpublic Object clone() throws CloneNotSupportedException {\n\t\t\t\t\tObject returnMe = super.clone();\n\t\t\t\t\t...\n\t\t\t}\n\t}\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "581", "Name": "Object Model Violation: Just One of Equals and Hashcode Defined", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not maintain equal hashcodes for equal objects.", "ExtendedDescription": "Java objects are expected to obey a number of invariants related to equality. One of these invariants is that equal objects must have equal hashcodes. In other words, if a.equals(b) == true then a.hashCode() == b.hashCode().", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "573", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "697", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Other"], "Note": "If this invariant is not upheld, it is likely to cause trouble if objects of this class are stored in a collection. If the objects of the class in question are used as a key in a Hashtable or if they are inserted into a Map or Set, it is critical that equal objects have equal hashcodes."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Both Equals() and Hashcode() should be defined."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "582", "Name": "Array Declared Public, Final, and Static", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified.", "ExtendedDescription": "Because arrays are mutable objects, the final constraint requires that the array object itself be assigned only once, but makes no guarantees about the values of the array elements. Since the array is public, a malicious program can change the values stored in the array. As such, in most cases an array declared public, final and static is a bug.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "668", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "BackgroundDetails": ["Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your product is running."], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Modify Application Data"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "In most situations the array should be made private."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following Java Applet code mistakenly declares an array public, final and static."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic final class urlTool extends Applet {\n\t\tpublic final static URL[] urls;\n\t\t...\n\t}\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "583", "Name": "finalize() Method Declared Public", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product violates secure coding principles for mobile code by declaring a finalize() method public.", "ExtendedDescription": "A product should never call finalize explicitly, except to call super.finalize() inside an implementation of finalize(). In mobile code situations, the otherwise error prone practice of manual garbage collection can become a security threat if an attacker can maliciously invoke a finalize() method because it is declared with public access.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "668", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Alter Execution Logic", "Execute Unauthorized Code or Commands", "Modify Application Data"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "If you are using finalize() as it was designed, there is no reason to declare finalize() with anything other than protected access."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following Java Applet code mistakenly declares a public finalize() method."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic final class urlTool extends Applet {\n\t\tpublic void finalize() {\n\t\t\t...\n\t\t}\n\t\t...\n\t}\n```"}, {"BodyText": "Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your product is running."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "584", "Name": "Return Inside Finally Block", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "705", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Alter Execution Logic"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Do not use a return statement inside the finally block. The finally block should have \"cleanup\" code."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following code excerpt, the IllegalArgumentException will never be delivered to the caller. The finally block will cause the exception to be discarded."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\ttry {\n\t\t...\n\t\tthrow IllegalArgumentException();\n\t}\n\tfinally {\n\t\treturn r;\n\t}\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "585", "Name": "Empty Synchronized Block", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product contains an empty synchronized block.", "ExtendedDescription": "An empty synchronized block does not actually accomplish any synchronization and may indicate a troubled section of code. An empty synchronized block can occur because code no longer needed within the synchronized block is commented out without removing the synchronized block.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1071", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Other"], "Note": "An empty synchronized block will wait until nobody else is using the synchronizer being specified. While this may be part of the desired behavior, because you haven't protected the subsequent code by placing it inside the synchronized block, nothing is stopping somebody else from modifying whatever it was you were waiting for while you run the subsequent code."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "When you come across an empty synchronized statement, or a synchronized statement in which the code has been commented out, try to determine what the original intentions were and whether or not the synchronized block is still necessary."}], "DemonstrativeExamples": [{"ID": "DX-214", "Entries": [{"IntroText": "The following code attempts to synchronize on an object, but does not execute anything in the synchronized block. This does not actually accomplish anything and may be a sign that a programmer is wrestling with synchronization but has not yet achieved the result they intend."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tsynchronized(this) { }\n```"}, {"BodyText": "Instead, in a correct usage, the synchronized statement should contain procedures that access or modify data that is exposed to multiple threads. For example, consider a scenario in which several threads are accessing student records at the same time. The method which sets the student ID to a new value will need to make sure that nobody else is accessing this data at the same time and will require synchronization."}, {"Nature": "Good", "ExampleCode": "```\n\tpublic void setID(int ID){\n\t\tsynchronized(this){\n\t\t\tthis.ID = ID;\n\t\t}\n\t}\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "586", "Name": "Explicit Call to Finalize()", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product makes an explicit call to the finalize() method from outside the finalizer.", "ExtendedDescription": "While the Java Language Specification allows an object's finalize() method to be called from outside the finalizer, doing so is usually a bad idea. For example, calling finalize() explicitly means that finalize() will be called more than once: the first time will be the explicit call and the last time will be the call that is made after the object is garbage collected.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1076", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Unexpected State", "Quality Degradation"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation", "Testing"], "Description": "Do not make explicit calls to finalize(). Use static analysis tools to spot such instances."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code fragment calls finalize() explicitly:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n```\n// time to clean up* \n\twidget.finalize();"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "587", "Name": "Assignment of a Fixed Address to a Pointer", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product sets a pointer to a specific address other than NULL or 0.", "ExtendedDescription": "Using a fixed address is not portable, because that address will probably not be valid in all environments or platforms.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "344", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "758", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C#", "Prevalence": "Undetermined"}, {"Type": "Language", "Class": "Assembly", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "If one executes code at a known location, an attacker might be able to inject code there beforehand."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart", "Reduce Maintainability", "Reduce Reliability"], "Note": "If the code is ported to another platform or environment, the pointer is likely to be invalid and cause a crash."}, {"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Memory", "Modify Memory"], "Note": "The data at a known pointer location can be easily read or influenced by an attacker."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Never set a pointer to a fixed address."}], "DemonstrativeExamples": [{"ID": "DX-192", "Entries": [{"IntroText": "This code assumes a particular function will always be found at a particular address. It assigns a pointer to that address and calls the function."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint (*pt2Function) (float, char, char)=0x08040000;\n\tint result2 = (*pt2Function) (12, 'a', 'b');\n```\n// Here we can inject code to execute.*"}, {"BodyText": "The same function may not always be found at the same memory address. This could lead to a crash, or an attacker may alter the memory at the expected address, leading to arbitrary code execution."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "588", "Name": "Attempt to Access Child of a Non-structure Pointer", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "704", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "758", "ViewID": "1000"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Modify Memory"], "Note": "Adjacent variables in memory may be corrupted by assignments performed on fields after the cast."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "Execution may end due to a memory access error."}], "PotentialMitigations": [{"Phase": ["Requirements"], "Description": "The choice could be made to use a language that is not susceptible to these issues."}, {"Phase": ["Implementation"], "Description": "Review of type casting operations can identify locations where incompatible types are cast."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following example demonstrates the weakness."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tstruct foo\n\t{\n\t\tint i;\n\t}\n\t...\n\tint main(int argc, char **argv)\n\t{\n\t\t*foo = (struct foo *)main;\n\t\tfoo->i = 2;\n\t\treturn foo->i;\n\t}\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2021-3510", "Description": "JSON decoder accesses a C union using an invalid offset to an object", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-3510"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-3510", "Description": "Zephyr JSON decoder incorrectly decodes array of array. Zephyr versions >= >1.14.0, >= >2.5.0 contain Attempt to Access Child of a Non-structure Pointer (CWE-588). For more information, see https://github.com/zephyrproject-rtos/zephyr/security/advisories/GHSA-289f-7mw3-2qf4"}]}
{"ID": "589", "Name": "Call to Non-ubiquitous API", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences.", "ExtendedDescription": "Some functions that offer security features supported by the OS are not available on all versions of the OS in common use. Likewise, functions are often deprecated or made obsolete for security reasons and should not be used.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "474", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Quality Degradation"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Always test your code on any platform on which it is targeted to run on."}, {"Phase": ["Testing"], "Description": "Test your code on the newest and oldest platform on which it is targeted to run on."}, {"Phase": ["Testing"], "Description": "Develop a system to test for API functions that are not portable."}], "RelatedAttackPatterns": ["96"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "59", "Name": "Improper Link Resolution Before File Access ('Link Following')", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "706", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "706", "ViewID": "1003", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Windows", "Prevalence": "Sometimes"}, {"Type": "Operating_System", "Class": "Unix", "Prevalence": "Often"}], "BackgroundDetails": ["Soft links are a UNIX term that is synonymous with simple shortcuts on Windows-based platforms."], "AlternateTerms": [{"Term": "insecure temporary file", "Description": "Some people use the phrase \"insecure temporary file\" when referring to a link following weakness, but other weaknesses can produce insecure temporary files without any symlink involvement at all."}, {"Term": "Zip Slip", "Description": "\"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59)."}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Access Control"], "Impact": ["Read Files or Directories", "Modify Files or Directories", "Bypass Protection Mechanism"], "Note": "An attacker may be able to traverse the file system to unintended locations and read or overwrite the contents of unexpected files. If the files are used for a security mechanism then an attacker may be able to bypass the mechanism."}, {"Scope": ["Other"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "Windows simple shortcuts, sometimes referred to as soft links, can be exploited remotely since a \".LNK\" file can be uploaded like a normal file. This can enable remote execution."}], "DetectionMethods": [{"Method": "Automated Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Automated Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tWeb Application Scanner\n\t\tWeb Services Scanner\n\t\tDatabase Scanners", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source\n\t\tManual Source Code Review (not inspections)", "Effectiveness": "High"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer", "Effectiveness": "SOAR Partial"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-48.1", "Phase": ["Architecture and Design"], "Strategy": "Separation of Privilege", "Description": "\n\nFollow the principle of least privilege when assigning access rights to entities in a software system.\n\n\nDenying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.\n"}], "ObservedExamples": [{"Reference": "CVE-1999-1386", "Description": "Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1386"}, {"Reference": "CVE-2000-1178", "Description": "Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1178"}, {"Reference": "CVE-2004-0217", "Description": "Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0217"}, {"Reference": "CVE-2003-0517", "Description": "Symlink attack allows local users to overwrite files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0517"}, {"Reference": "CVE-2004-0689", "Description": "Window manager does not properly handle when certain symbolic links point to \"stale\" locations, which could allow local users to create or truncate arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0689"}, {"Reference": "CVE-2005-1879", "Description": "Second-order symlink vulnerabilities", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1879"}, {"Reference": "CVE-2005-1880", "Description": "Second-order symlink vulnerabilities", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1880"}, {"Reference": "CVE-2005-1916", "Description": "Symlink in Python program", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1916"}, {"Reference": "CVE-2000-0972", "Description": "Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0972"}, {"Reference": "CVE-2005-0824", "Description": "Signal causes a dump that follows symlinks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0824"}, {"Reference": "CVE-2001-1494", "Description": "Hard link attack, file overwrite; interesting because program checks against soft links", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1494"}, {"Reference": "CVE-2002-0793", "Description": "Hard link and possibly symbolic link following vulnerabilities in embedded operating system allow local users to overwrite arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0793"}, {"Reference": "CVE-2003-0578", "Description": "Server creates hard links and unlinks files as root, which allows local users to gain privileges by deleting and overwriting arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0578"}, {"Reference": "CVE-1999-0783", "Description": "Operating system allows local users to conduct a denial of service by creating a hard link from a device special file to a file on an NFS file system.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0783"}, {"Reference": "CVE-2004-1603", "Description": "Web hosting manager follows hard links, which allows local users to read or modify arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1603"}, {"Reference": "CVE-2004-1901", "Description": "Package listing system allows local users to overwrite arbitrary files via a hard link attack on the lockfiles.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1901"}, {"Reference": "CVE-2005-1111", "Description": "Hard link race condition", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1111"}, {"Reference": "CVE-2000-0342", "Description": "Mail client allows remote attackers to bypass the user warning for executable attachments such as .exe, .com, and .bat by using a .lnk file that refers to the attachment, aka \"Stealth Attachment.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0342"}, {"Reference": "CVE-2001-1042", "Description": "FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1042"}, {"Reference": "CVE-2001-1043", "Description": "FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1043"}, {"Reference": "CVE-2005-0587", "Description": "Browser allows remote malicious web sites to overwrite arbitrary files by tricking the user into downloading a .LNK (link) file twice, which overwrites the file that was referenced in the first .LNK file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0587"}, {"Reference": "CVE-2001-1386", "Description": "\".LNK.\" - .LNK with trailing dot", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1386"}, {"Reference": "CVE-2003-1233", "Description": "Rootkits can bypass file access restrictions to Windows kernel directories using NtCreateSymbolicLinkObject function to create symbolic link", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1233"}, {"Reference": "CVE-2002-0725", "Description": "File system allows local attackers to hide file usage activities via a hard link to the target file, which causes the link to be recorded in the audit trail instead of the target file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0725"}, {"Reference": "CVE-2003-0844", "Description": "Web server plugin allows local users to overwrite arbitrary files via a symlink attack on predictable temporary filenames.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0844"}, {"Reference": "CVE-2015-3629", "Description": "A Libcontainer used in Docker Engine allows local users to escape containerization and write to an arbitrary file on the host system via a symlink attack in an image when respawning a container.", "Link": "https://www.cve.org/CVERecord?id=CVE-2015-3629"}, {"Reference": "CVE-2021-21272", "Description": "\"Zip Slip\" vulnerability in Go-based Open Container Initiative (OCI) registries product allows writing arbitrary files outside intended directory via symbolic links or hard links in a gzipped tarball.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-21272"}, {"Reference": "CVE-2020-27833", "Description": "\"Zip Slip\" vulnerability in container management product allows writing arbitrary files outside intended directory via a container image (.tar format) with filenames that are symbolic links that point to other files within the same tar file; however, the files being pointed to can also be symbolic links to destinations outside the intended directory, bypassing the initial check.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-27833"}], "FunctionalAreas": ["File Processing"], "AffectedResources": ["File or Directory"], "RelatedAttackPatterns": ["132", "17", "35", "76"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Theoretical", "Note": "\n\nLink following vulnerabilities are Multi-factor Vulnerabilities (MFV). They are the combination of multiple elements: file or directory permissions, filename predictability, race conditions, and in some cases, a design limitation in which there is no mechanism for performing atomic file creation operations.\n\n\nSome potential factors are race conditions, permissions, and predictability.\n"}], "Top25Examples": [{"Reference": "CVE-2022-30321", "Description": "go-getter up to 1.5.11 and 2.0.2 allowed arbitrary host access via go-getter path traversal, symlink processing, and command injection flaws. Fixed in 1.6.1 and 2.1.0."}, {"Reference": "CVE-2021-4287", "Description": "A vulnerability, which was classified as problematic, was found in ReFirm Labs binwalk up to 2.3.2. Affected is an unknown function of the file src/binwalk/modules/extractor.py of the component Archive Extraction Handler. The manipulation leads to symlink following. It is possible to launch the attack remotely. Upgrading to version 2.3.3 is able to address this issue. The name of the patch is fa0c0bd59b8588814756942fe4cb5452e76c1dcd. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216876."}, {"Reference": "CVE-2022-30333", "Description": "RARLAB UnRAR before 6.12 on Linux and UNIX allows directory traversal to write to files during an extract (aka unpack) operation, as demonstrated by creating a ~/.ssh/authorized_keys file. NOTE: WinRAR and Android RAR are unaffected."}, {"Reference": "CVE-2022-1256", "Description": "A local privilege escalation vulnerability in MA for Windows prior to 5.7.6 allows a local low privileged user to gain system privileges through running the repair functionality. Temporary file actions were performed on the local user's %TEMP% directory with System privileges through manipulation of symbolic links."}, {"Reference": "CVE-2022-31466", "Description": "Time of Check - Time of Use (TOCTOU) vulnerability in Quick Heal Total Security prior to 12.1.1.27 allows a local attacker to achieve privilege escalation, potentially leading to deletion of system files. This is achieved through exploiting the time between detecting a file as malicious and when the action of quarantining or cleaning is performed, and using the time to replace the malicious file by a symlink."}, {"Reference": "CVE-2022-1537", "Description": "file.copy operations in GruntJS are vulnerable to a TOCTOU race condition leading to arbitrary file write in GitHub repository gruntjs/grunt prior to 1.5.3. This vulnerability is capable of arbitrary file writes which can lead to local privilege escalation to the GruntJS user if a lower-privileged user has write access to both source and destination directories as the lower-privileged user can create a symlink to the GruntJS user's .bashrc file or replace /etc/shadow file if the GruntJS user is root."}, {"Reference": "CVE-2022-31216", "Description": "Vulnerabilities in the Drive Composer allow a low privileged attacker to create and write to a file anywhere on the file system as SYSTEM with arbitrary content as long as the file does not already exist. The Drive Composer installer file allows a low-privileged user to run a \"repair\" operation on the product. "}, {"Reference": "CVE-2022-31217", "Description": "Vulnerabilities in the Drive Composer allow a low privileged attacker to create and write to a file anywhere on the file system as SYSTEM with arbitrary content as long as the file does not already exist. The Drive Composer installer file allows a low-privileged user to run a \"repair\" operation on the product. "}, {"Reference": "CVE-2022-31218", "Description": "Vulnerabilities in the Drive Composer allow a low privileged attacker to create and write to a file anywhere on the file system as SYSTEM with arbitrary content as long as the file does not already exist. The Drive Composer installer file allows a low-privileged user to run a \"repair\" operation on the product. "}, {"Reference": "CVE-2022-31219", "Description": "Vulnerabilities in the Drive Composer allow a low privileged attacker to create and write to a file anywhere on the file system as SYSTEM with arbitrary content as long as the file does not already exist. The Drive Composer installer file allows a low-privileged user to run a \"repair\" operation on the product. "}, {"Reference": "CVE-2022-21997", "Description": "Windows Print Spooler Elevation of Privilege Vulnerability"}]}
{"ID": "590", "Name": "Free of Memory not on the Heap", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc().", "ExtendedDescription": "When free() is called on an invalid pointer, the program's memory management data structures may become corrupted. This corruption can cause the program to crash or, in some circumstances, an attacker may be able to cause free() to operate on controllable memory locations to modify critical program variables or execute code.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "762", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "123", "ViewID": "1000"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Execute Unauthorized Code or Commands", "Modify Memory"], "Note": "There is the potential for arbitrary code execution with privileges of the vulnerable program via a \"write, what where\" primitive. If pointers to memory which hold user information are freed, a malicious user will be able to write 4 bytes anywhere in memory."}], "DetectionMethods": [{"DetectionMethodID": "DM-13", "Method": "Fuzzing", "Description": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.", "Effectiveness": "High"}, {"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Only free pointers that you have called malloc on previously. This is the recommended solution. Keep track of which pointers point at the beginning of valid chunks and free them only once."}, {"Phase": ["Implementation"], "Description": "Before freeing a pointer, the programmer should make sure that the pointer was previously allocated on the heap and that the memory belongs to the programmer. Freeing an unallocated pointer will cause undefined behavior in the program."}, {"MitigationID": "MIT-4.6", "Phase": ["Architecture and Design"], "Strategy": "Libraries or Frameworks", "Description": "\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nFor example, glibc in Linux provides protection against free of invalid pointers.\n"}, {"Phase": ["Architecture and Design"], "Description": "Use a language that provides abstractions for memory allocation and deallocation."}, {"Phase": ["Testing"], "Description": "Use a tool that dynamically detects memory management problems, such as valgrind."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In this example, an array of record_t structs, bar, is allocated automatically on the stack as a local variable and the programmer attempts to call free() on the array. The consequences will vary based on the implementation of free(), but it will not succeed in deallocating the memory."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid foo(){\n\t\t\trecord_t bar[MAX_SIZE];\n```\n/* do something interesting with bar */* \n\t\t\t\n\t\t\t...\n\t\t\tfree(bar);}"}, {"BodyText": "This example shows the array allocated globally, as part of the data segment of memory and the programmer attempts to call free() on the array."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\trecord_t bar[MAX_SIZE]; //Global var\n\tvoid foo(){\n```\n/* do something interesting with bar */* \n\t\t\t...\n\t\t\tfree(bar);}"}, {"BodyText": "Instead, if the programmer wanted to dynamically manage the memory, malloc() or calloc() should have been used."}, {"Nature": "Good", "ExampleCode": "```\n\tvoid foo(){\n\t\t\trecord_t *bar = (record_t*)malloc(MAX_SIZE*sizeof(record_t));\n```\n/* do something interesting with bar */* \n\t\t\t\n\t\t\t...\n\t\t\tfree(bar);}"}, {"BodyText": "Additionally, you can pass global variables to free() when they are pointers to dynamically allocated memory."}, {"Nature": "Good", "ExampleCode": "```\n\trecord_t *bar; //Global var\n\tvoid foo(){\n\t\t\tbar = (record_t*)malloc(MAX_SIZE*sizeof(record_t));\n```\n/* do something interesting with bar */* \n\t\t\t\n\t\t\t...\n\t\t\tfree(bar);}"}]}], "AffectedResources": ["Memory"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Other", "Note": "In C++, if the new operator was used to allocate the memory, it may be allocated with the malloc(), calloc() or realloc() family of functions in the implementation. Someone aware of this behavior might choose to map this problem to CWE-590 or to its parent, CWE-762, depending on their perspective."}]}
{"ID": "591", "Name": "Sensitive Data Storage in Improperly Locked Memory", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors.", "ExtendedDescription": "On Windows systems the VirtualLock function can lock a page of memory to ensure that it will remain present in memory and not be swapped to disk. However, on older versions of Windows, such as 95, 98, or Me, the VirtualLock() function is only a stub and provides no protection. On POSIX systems the mlock() call ensures that a page will stay resident in memory but does not guarantee that the page will not appear in the swap. Therefore, it is unsuitable for use as a protection mechanism for sensitive data. Some platforms, in particular Linux, do make the guarantee that the page will not be swapped, but this is non-standard and is not portable. Calls to mlock() also require supervisor privilege. Return values for both of these calls must be checked to ensure that the lock operation was actually successful.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "413", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data", "Read Memory"], "Note": "Sensitive data that is written to a swap file may be exposed."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Identify data that needs to be protected from swapping and choose platform-appropriate protection mechanisms."}, {"Phase": ["Implementation"], "Description": "Check return values to ensure locking operations are successful."}], "AffectedResources": ["Memory"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "592", "Name": "DEPRECATED: Authentication Bypass Issues", "Abstraction": "Class", "Structure": "Simple", "Status": "Deprecated", "Description": "This weakness has been deprecated because it covered redundant concepts already described in CWE-287.", "MappingNotes": {"Usage": "Prohibited", "Rationale": "This CWE has been deprecated.", "Comments": "See description and name for possible suggestions of other CWEs to consider.", "Reasons": ["Deprecated"]}}
{"ID": "593", "Name": "Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product modifies the SSL context after connection creation has begun.", "ExtendedDescription": "If the program modifies the SSL_CTX object after creating SSL objects from it, there is the possibility that older SSL objects created from the original context could all be affected by that change.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "666", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "1390", "ViewID": "1000"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"], "Note": "No authentication takes place in this process, bypassing an assumed protection of encryption."}, {"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "The encrypted communication between a user and a trusted host may be subject to a sniffing attack."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Use a language or a library that provides a cryptography framework at a higher level of abstraction."}, {"Phase": ["Implementation"], "Description": "Most SSL_CTX functions have SSL counterparts that act on SSL-type objects."}, {"Phase": ["Implementation"], "Description": "Applications should set up an SSL_CTX completely, before creating SSL objects from it."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following example demonstrates the weakness."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t#define CERT \"secret.pem\"\n\t#define CERT2 \"secret2.pem\"\n\tint main(){\n\t\t\tSSL_CTX *ctx;\n\t\t\tSSL *ssl;\n\t\t\tinit_OpenSSL();\n\t\t\tseed_prng();\n\t\t\tctx = SSL_CTX_new(SSLv23_method());\n\t\t\tif (SSL_CTX_use_certificate_chain_file(ctx, CERT) != 1)\n\t\t\t\tint_error(\"Error loading certificate from file\");\n\t\t\tif (SSL_CTX_use_PrivateKey_file(ctx, CERT, SSL_FILETYPE_PEM) != 1)\n\t\t\t\tint_error(\"Error loading private key from file\");\n\t\t\tif (!(ssl = SSL_new(ctx)))\n\t\t\t\tint_error(\"Error creating an SSL context\");\n\t\t\tif ( SSL_CTX_set_default_passwd_cb(ctx, \"new default password\" != 1))\n\t\t\t\tint_error(\"Doing something which is dangerous to do anyways\");\n\t\t\tif (!(ssl2 = SSL_new(ctx)))\n\t\t\t\tint_error(\"Error creating an SSL context\");\n\t}\n```"}]}], "RelatedAttackPatterns": ["94"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "594", "Name": "J2EE Framework: Saving Unserializable Objects to Disk", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully.", "ExtendedDescription": "In heavy load conditions, most J2EE application frameworks flush objects to disk to manage memory requirements of incoming requests. For example, session scoped objects, and even application scoped objects, are written to disk when required. While these application frameworks do the real work of writing objects to disk, they do not enforce that those objects be serializable, thus leaving the web application vulnerable to crashes induced by serialization failure. An attacker may be able to mount a denial of service attack by sending enough requests to the server to force the web application to save objects to disk.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1076", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}, {"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Modify Application Data"], "Note": "Data represented by unserializable objects can be corrupted."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "Non-serializability of objects can lead to system crash."}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "All objects that become part of session and application scope must implement the java.io.Serializable interface to ensure serializability of containing objects."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following Java example, a Customer Entity JavaBean provides access to customer information in a database for a business application. The Customer Entity JavaBean is used as a session scoped object to return customer information to a Session EJB."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t@Entity\n\tpublic class Customer {\n\t\t\tprivate String id;\n\t\t\tprivate String firstName;\n\t\t\tprivate String lastName;\n\t\t\tprivate Address address;\n\t\t\tpublic Customer() {\n\t\t\t}\n\t\t\tpublic Customer(String id, String firstName, String lastName) {...}\n\t\t\t@Id\n\t\t\tpublic String getCustomerId() {...}\n\t\t\tpublic void setCustomerId(String id) {...}\n\t\t\tpublic String getFirstName() {...}\n\t\t\tpublic void setFirstName(String firstName) {...}\n\t\t\tpublic String getLastName() {...}\n\t\t\tpublic void setLastName(String lastName) {...}\n\t\t\t@OneToOne()\n\t\t\tpublic Address getAddress() {...}\n\t\t\tpublic void setAddress(Address address) {...}\n\t}\n```"}, {"BodyText": "However, the Customer Entity JavaBean is an unserialized object which can cause serialization failure and crash the application when the J2EE container attempts to write the object to the system. Session scoped objects must implement the Serializable interface to ensure that the objects serialize properly."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tpublic class Customer implements Serializable {...}\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "595", "Name": "Comparison of Object References Instead of Object Contents", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects.", "ExtendedDescription": "For example, in Java, comparing objects using == usually produces deceptive results, since the == operator compares object references rather than values; often, this means that using == for strings is actually comparing the strings' references, not their values.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1025", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "JavaScript", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "PHP", "Prevalence": "Undetermined"}, {"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Varies by Context"], "Note": "This weakness can lead to erroneous results that can cause unexpected application behaviors."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "In Java, use the equals() method to compare objects instead of the == operator. If using ==, it is important for performance reasons that your objects are created by a static factory, not by a constructor."}], "DemonstrativeExamples": [{"ID": "DX-60", "Entries": [{"IntroText": "In the example below, two Java String objects are declared and initialized with the same string values. An if statement is used to determine if the strings are equivalent."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tString str1 = new String(\"Hello\");\n\tString str2 = new String(\"Hello\");\n\tif (str1 == str2) {\n\t\tSystem.out.println(\"str1 == str2\");\n\t}\n```"}, {"BodyText": "However, the if statement will not be executed as the strings are compared using the \"==\" operator. For Java objects, such as String objects, the \"==\" operator compares object references, not object values. While the two String objects above contain the same string values, they refer to different object references, so the System.out.println statement will not be executed. To compare object values, the previous code could be modified to use the equals method:"}, {"Nature": "Good", "ExampleCode": "```\n\tif (str1.equals(str2)) {\n\t\tSystem.out.println(\"str1 equals str2\");\n\t}\n```"}]}, {"Entries": [{"IntroText": "In the following Java example, two BankAccount objects are compared in the isSameAccount method using the == operator."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic boolean isSameAccount(BankAccount accountA, BankAccount accountB) {\n\t\treturn accountA == accountB;\n\t}\n```"}, {"BodyText": "Using the == operator to compare objects may produce incorrect or deceptive results by comparing object references rather than values. The equals() method should be used to ensure correct results or objects should contain a member variable that uniquely identifies the object."}, {"BodyText": "The following example shows the use of the equals() method to compare the BankAccount objects and the next example uses a class get method to retrieve the bank account number that uniquely identifies the BankAccount object to compare the objects."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tpublic boolean isSameAccount(BankAccount accountA, BankAccount accountB) {\n\t\treturn accountA.equals(accountB);\n\t}\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "596", "Name": "DEPRECATED: Incorrect Semantic Object Comparison", "Abstraction": "Base", "Structure": "Simple", "Status": "Deprecated", "Description": "This weakness has been deprecated.  It was poorly described and difficult to distinguish from other entries.  It was also inappropriate to assign a separate ID solely because of domain-specific considerations.  Its closest equivalent is CWE-1023.", "MappingNotes": {"Usage": "Prohibited", "Rationale": "This CWE has been deprecated.", "Comments": "See description and name for possible suggestions of other CWEs to consider.", "Reasons": ["Deprecated"]}}
{"ID": "597", "Name": "Use of Wrong Operator in String Comparison", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product uses the wrong operator when comparing a string, such as using \"==\" when the .equals() method should be used instead.", "ExtendedDescription": "In Java, using == or != to compare two strings for equality actually compares two objects for equality rather than their string values for equality. Chances are good that the two references will never be equal. While this weakness often only affects program correctness, if the equality is used for a security decision, the unintended comparison result could be leveraged to affect program security.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "595", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "595", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "480", "ViewID": "1000"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Other"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Within Java, use .equals() to compare string values.\n Within JavaScript, use == to compare string values.\n Within PHP, use == to compare a numeric value to a string value. (PHP converts the string to a number.)", "Effectiveness": "High"}], "DemonstrativeExamples": [{"ID": "DX-60", "Entries": [{"IntroText": "In the example below, two Java String objects are declared and initialized with the same string values. An if statement is used to determine if the strings are equivalent."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tString str1 = new String(\"Hello\");\n\tString str2 = new String(\"Hello\");\n\tif (str1 == str2) {\n\t\tSystem.out.println(\"str1 == str2\");\n\t}\n```"}, {"BodyText": "However, the if statement will not be executed as the strings are compared using the \"==\" operator. For Java objects, such as String objects, the \"==\" operator compares object references, not object values. While the two String objects above contain the same string values, they refer to different object references, so the System.out.println statement will not be executed. To compare object values, the previous code could be modified to use the equals method:"}, {"Nature": "Good", "ExampleCode": "```\n\tif (str1.equals(str2)) {\n\t\tSystem.out.println(\"str1 equals str2\");\n\t}\n```"}]}, {"Entries": [{"IntroText": "In the example below, three JavaScript variables are declared and initialized with the same values. Note that JavaScript will change a value between numeric and string as needed, which is the reason an integer is included with the strings. An if statement is used to determine whether the values are the same."}, {"Nature": "Bad", "Language": "JavaScript", "ExampleCode": "<p id=\"ieq3s1\" type=\"text\">(i === s1) is FALSE</p>\n <p id=\"s4eq3i\" type=\"text\">(s4 === i) is FALSE</p>\n <p id=\"s4eq3s1\" type=\"text\">(s4 === s1) is FALSE</p>\n\n var i = 65;\n var s1 = '65';\n var s4 = new String('65');\n\n if (i === s1)\n {\n\n```\n\tdocument.getElementById(\"ieq3s1\").innerHTML = \"(i === s1) is TRUE\";\n }\n if (s4 === i)\n {\n\tdocument.getElementById(\"s4eq3i\").innerHTML = \"(s4 === i) is TRUE\";\n }\n if (s4 === s1)\n {\n\tdocument.getElementById(\"s4eq3s1\").innerHTML = \"(s4 === s1) is TRUE\";\n }\n```"}, {"BodyText": "However, the body of the if statement will not be executed, as the \"===\" compares both the type of the variable AND the value. As the types of the first comparison are number and string, it fails. The types in the second are int and reference, so this one fails as well. The types in the third are reference and string, so it also fails.\n\n\nWhile the variables above contain the same values, they are contained in different types, so the document.getElementById... statement will not be executed in any of the cases.\n\n\nTo compare object values, the previous code is modified and shown below to use the \"==\" for value comparison so the comparison in this example executes the HTML statement:"}, {"Nature": "Good", "Language": "JavaScript", "ExampleCode": "<p id=\"ieq2s1\" type=\"text\">(i == s1) is FALSE</p>\n <p id=\"s4eq2i\" type=\"text\">(s4 == i) is FALSE</p>\n <p id=\"s4eq2s1\" type=\"text\">(s4 == s1) is FALSE</p>\n\n var i = 65;\n var s1 = '65';\n var s4 = new String('65');\n\n if (i == s1)\n {\n\n```\n\tdocument.getElementById(\"ieq2s1\").innerHTML = \"(i == s1) is TRUE\";\n }\n if (s4 == i)\n {\n\tdocument.getElementById(\"s4eq2i\").innerHTML = \"(s4 == i) is TRUE\";\n }\n if (s4 == s1)\n {\n\tdocument.getElementById(\"s4eq2s1\").innerHTML = \"(s4 == s1) is TRUE\";\n }\n```"}]}, {"Entries": [{"IntroText": "In the example below, two PHP variables are declared and initialized with the same numbers - one as a string, the other as an integer. Note that PHP will change the string value to a number for a comparison. An if statement is used to determine whether the values are the same."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "var $i = 65;\n var $s1 = \"65\";\n\n if ($i === $s1)\n {\n\n```\n\techo '($i === $s1) is TRUE'. \"\\n\";\n }\n else\n {\n\techo '($i === $s1) is FALSE'. \"\\n\";\n }\n```"}, {"BodyText": "However, the body of the if statement will not be executed, as the \"===\" compares both the type of the variable AND the value. As the types of the first comparison are number and string, it fails.\n\n\nWhile the variables above contain the same values, they are contained in different types, so the TRUE portion of the if statement will not be executed.\n\n\nTo compare object values, the previous code is modified and shown below to use the \"==\" for value comparison (string converted to number) so the comparison in this example executes the TRUE statement:"}, {"Nature": "Good", "Language": "PHP", "ExampleCode": "var $i = 65;\n var $s1 = \"65\";\n\n if ($i == $s1)\n {\n\n```\n\techo '($i == $s1) is TRUE'. \"\\n\";\n }\n else\n {\n\techo '($i == $s1) is FALSE'. \"\\n\";\n }\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-36072", "Description": "SilverwareGames.io is a social network for users to play video games online. In version 1.1.8 and prior, due to an unobvious feature of PHP, hashes generated by built-in functions and starting with the `0e` symbols were being handled as zero multiplied with the `e` number. Therefore, the hash value was equal to 0. The maintainers fixed this in version 1.1.9 by using `===` instead of `==` in comparisons where it is possible (e.g. on sign in/sign up handlers)."}, {"Reference": "CVE-2021-3797", "Description": "hestiacp is vulnerable to Use of Wrong Operator in String Comparison"}, {"Reference": "CVE-2022-1715", "Description": "Account Takeover in GitHub repository neorazorx/facturascripts prior to 2022.07."}]}
{"ID": "598", "Name": "Use of GET Request Method With Sensitive Query Strings", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The web application uses the HTTP GET method to process a request and includes sensitive information in the query string of that request.", "ExtendedDescription": "The query string for the URL could be saved in the browser's history, passed through Referers to other web sites, stored in web logs, or otherwise recorded in other sources. If the query string contains sensitive information such as session identifiers, then attackers can use this information to launch further attacks.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "201", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "At a minimum, attackers can garner information from query strings that can be utilized in escalating their method of attack, such as information about the internal workings of the application or database column names. Successful exploitation of query string parameter vulnerabilities could lead to an attacker impersonating a legitimate user, obtaining proprietary data, or simply executing actions not intended by the application developers."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "When sensitive information is sent, use the POST method (e.g. registration form)."}], "ObservedExamples": [{"Reference": "CVE-2022-23546", "Description": "A discussion platform leaks private information in GET requests.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-23546"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-34452", "Description": " PowerPath Management Appliance with versions 3.3, 3.2*, 3.1 & 3.0* contains sensitive information disclosure vulnerability. An Authenticated admin user can able to exploit the issue and view sensitive information stored in the logs. "}, {"Reference": "CVE-2021-39019", "Description": "IBM Engineering Lifecycle Optimization - Publishing 6.0.6, 6.0.6.1, 7.0, 7.0.1, and 7.0.2 could disclose highly sensitive information through an HTTP GET request to an authenticated user. IBM X-Force ID: 213728."}, {"Reference": "CVE-2022-23546", "Description": "In version 2.9.0.beta14 of Discourse, an open-source discussion platform, maliciously embedded urls can leak an admin's digest of recent topics, possibly exposing private information. A patch is available for version 2.9.0.beta15. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-24414", "Description": "Dell EMC CloudLink 7.1.3 and all earlier versions, Auth Token is exposed in GET requests. These request parameters can get logged in reverse proxies and server logs. Attackers may potentially use these tokens to access CloudLink server. Tokens should not be used in request URL to avoid such attacks."}, {"Reference": "CVE-2022-25787", "Description": "Information Exposure Through Query Strings in GET Request vulnerability in LMM API of Secomea GateManager allows system administrator to hijack connection. This issue affects: Secomea GateManager all versions prior to 9.7."}]}
{"ID": "599", "Name": "Missing Validation of OpenSSL Certificate", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements.", "ExtendedDescription": "This could allow an attacker to use an invalid certificate to claim to be a trusted host, use expired certificates, or conduct other attacks that could be detected if the certificate is properly validated.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "295", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "The data read may not be properly secured, it might be viewed by an attacker."}, {"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism", "Gain Privileges or Assume Identity"], "Note": "Trust afforded to the system in question may allow for spoofing or redirection attacks."}, {"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "If the certificate is not checked, it may be possible for a redirection or spoofing attack to allow a malicious host with a valid certificate to provide data under the guise of a trusted host. While the attacker in question may have a valid certificate, it may simply be a valid certificate for a different site. In order to ensure data integrity, we must check that the certificate is valid, and that it pertains to the site we wish to access."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Ensure that proper authentication is included in the system design."}, {"Phase": ["Implementation"], "Description": "Understand and properly implement all checks necessary to ensure the identity of entities involved in encrypted communications."}], "DemonstrativeExamples": [{"ID": "DX-125", "Entries": [{"IntroText": "The following OpenSSL code ensures that the host has a certificate."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tif (cert = SSL_get_peer_certificate(ssl)) {\n```\n// got certificate, host can be trusted* \n\t\t\t\n\t\t\t\n\t\t\t *//foo=SSL_get_verify_result(ssl);* \n\t\t\t\n\t\t\t\n\t\t\t *//if (X509_V_OK==foo) ...* \n\t\t\t}"}, {"BodyText": "Note that the code does not call SSL_get_verify_result(ssl), which effectively disables the validation step that checks the certificate."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "CWE-295 and CWE-599 are very similar, although CWE-599 has a more narrow scope that is only applied to OpenSSL certificates. As a result, other children of CWE-295 can be regarded as children of CWE-599 as well. CWE's use of one-dimensional hierarchical relationships is not well-suited to handle different kinds of abstraction relationships based on concepts like types of resources (\"OpenSSL certificate\" as a child of \"any certificate\") and types of behaviors (\"not validating expiration\" as a child of \"improper validation\")."}]}
{"ID": "6", "Name": "J2EE Misconfiguration: Insufficient Session-ID Length", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The J2EE application is configured to use an insufficient session ID length.", "ExtendedDescription": "If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking). The number of possible session IDs increases with increased session ID length, making it more difficult to guess or steal a session ID.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "334", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "BackgroundDetails": ["\n\nSession ID's can be used to identify communicating parties in a web environment.\n\n\nThe expected number of seconds required to guess a valid session identifier is given by the equation: (2^B+1)/(2*A*S) Where: - B is the number of bits of entropy in the session identifier. - A is the number of guesses an attacker can try each second. - S is the number of valid session identifiers that are valid and available to be guessed at any given time. The number of bits of entropy in the session identifier is always less than the total number of bits in the session identifier. For example, if session identifiers were provided in ascending order, there would be close to zero bits of entropy in the session identifier no matter the identifier's length. Assuming that the session identifiers are being generated using a good source of random numbers, we will estimate the number of bits of entropy in a session identifier to be half the total number of bits in the session identifier. For realistic identifier lengths this is possible, though perhaps optimistic.\n"], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "If an attacker can guess an authenticated user's session identifier, they can take over the user's session."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Session identifiers should be at least 128 bits long to prevent brute-force session guessing. A shorter session identifier leaves the application open to brute-force session guessing attacks."}, {"Phase": ["Implementation"], "Description": "A lower bound on the number of valid session identifiers that are available to be guessed is the number of users that are active on a site at any given moment. However, any users that abandon their sessions without logging out will increase this number. (This is one of many good reasons to have a short inactive session timeout.) With a 64 bit session identifier, assume 32 bits of entropy. For a large web site, assume that the attacker can try 1,000 guesses per second and that there are 10,000 valid session identifiers at any given moment. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is less than 4 minutes. Now assume a 128 bit session identifier that provides 64 bits of entropy. With a very large web site, an attacker might try 10,000 guesses per second with 100,000 valid session identifiers available to be guessed. Given these assumptions, the expected time for an attacker to successfully guess a valid session identifier is greater than 292 years."}], "DemonstrativeExamples": [{"ID": "DX-47", "Entries": [{"IntroText": "The following XML example code is a deployment descriptor for a Java web application deployed on a Sun Java Application Server. This deployment descriptor includes a session configuration property for configuring the session ID length."}, {"Nature": "Bad", "Language": "XML", "ExampleCode": "```\n\t<sun-web-app>\n\t\t\t...\n\t\t\t<session-config>\n\t\t\t\t\t<session-properties>\n\t\t\t\t\t\t<property name=\"idLengthBytes\" value=\"8\">\n\t\t\t\t\t\t\t<description>The number of bytes in this web module's session ID.</description>\n\t\t\t\t\t\t</property>\n\t\t\t\t\t</session-properties>\n\t\t\t</session-config>\n\t\t\t...\n\t</sun-web-app>\n```"}, {"BodyText": "This deployment descriptor has set the session ID length for this Java web application to 8 bytes (or 64 bits). The session ID length for Java web applications should be set to 16 bytes (128 bits) to prevent attackers from guessing and/or stealing a session ID and taking over a user's session."}, {"BodyText": "Note for most application servers including the Sun Java Application Server the session ID length is by default set to 128 bits and should not be changed. And for many application servers the session ID length cannot be changed from this default setting. Check your application server documentation for the session ID length default setting and configuration options to ensure that the session ID length is set to 128 bits."}]}], "RelatedAttackPatterns": ["21", "59"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "600", "Name": "Uncaught Exception in Servlet ", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The Servlet does not catch all exceptions, which may reveal sensitive debugging information.", "ExtendedDescription": "When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. This information is of great value to an attacker. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "248", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "209", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "390", "ViewID": "1000"}], "AlternateTerms": [{"Term": "Missing Catch Block"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Availability"], "Impact": ["Read Application Data", "DoS: Crash, Exit, or Restart"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Implement Exception blocks to handle all types of Exceptions."}], "DemonstrativeExamples": [{"ID": "DX-39", "Entries": [{"IntroText": "The following example attempts to resolve a hostname."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tprotected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException {\n\t\tString ip = req.getRemoteAddr();\n\t\tInetAddress addr = InetAddress.getByName(ip);\n\t\t...\n\t\tout.println(\"hello \" + addr.getHostName());\n\t}\n```"}, {"BodyText": "A DNS lookup failure will cause the Servlet to throw an exception."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "The \"Missing Catch Block\" concept is probably broader than just Servlets, but the broader concept is not sufficiently covered in CWE."}]}
{"ID": "601", "Name": "URL Redirection to Untrusted Site ('Open Redirect')", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.", "ExtendedDescription": "An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance. Whether this issue poses a vulnerability will be subject to the intended behavior of the application. For example, a search engine might intentionally provide redirects to arbitrary URLs.", "LikelihoodOfExploit": "Low", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "610", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "610", "ViewID": "1003", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Web Based", "Prevalence": "Undetermined"}], "BackgroundDetails": ["Phishing is a general term for deceptive attempts to coerce private information from users that will be used for identity theft."], "AlternateTerms": [{"Term": "Open Redirect"}, {"Term": "Cross-site Redirect"}, {"Term": "Cross-domain Redirect"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism", "Gain Privileges or Assume Identity"], "Note": "The user may be redirected to an untrusted page that contains malware which may then compromise the user's machine. This will expose the user to extensive risk and the user's interaction with the web server may also be compromised if the malware conducts keylogging or other attacks that steal credentials, personally identifiable information (PII), or other important data."}, {"Scope": ["Access Control", "Confidentiality", "Other"], "Impact": ["Bypass Protection Mechanism", "Gain Privileges or Assume Identity", "Other"], "Note": "The user may be subjected to phishing attacks by being redirected to an untrusted page. The phishing attack may point to an attacker controlled web page that appears to be a trusted web site. The phishers may then steal the user's credentials and then use these credentials to access the legitimate web site."}], "DetectionMethods": [{"DetectionMethodID": "DM-10", "Method": "Manual Static Analysis", "Description": "Since this weakness does not typically appear frequently within a single software package, manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all potentially-vulnerable operations can be assessed within limited time constraints.", "Effectiveness": "High"}, {"Method": "Automated Dynamic Analysis", "Description": "Automated black box tools that supply URLs to every input may be able to spot Location header modifications, but test case coverage is a factor, and custom redirects may not be detected."}, {"Method": "Automated Static Analysis", "Description": "Automated static analysis tools may not be able to determine whether input influences the beginning of a URL, which is important for reducing false positives."}, {"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}, {"Method": "Automated Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis\n\t\tBinary Weakness Analysis - including disassembler + source code weakness analysis", "Effectiveness": "High"}, {"Method": "Dynamic Analysis with Automated Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tWeb Application Scanner\n\t\tWeb Services Scanner\n\t\tDatabase Scanners", "Effectiveness": "High"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer", "Effectiveness": "High"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tManual Source Code Review (not inspections)", "Effectiveness": "High"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer", "Effectiveness": "High"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nUse a list of approved URLs or domains to be used for redirection.\n"}, {"Phase": ["Architecture and Design"], "Description": "Use an intermediate disclaimer page that provides the user with a clear warning that they are leaving the current site. Implement a long timeout before the redirect occurs, or force the user to click on the link. Be careful to avoid XSS problems (CWE-79) when generating the disclaimer page."}, {"MitigationID": "MIT-21.2", "Phase": ["Architecture and Design"], "Strategy": "Enforcement by Conversion", "Description": "\n\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\n\nFor example, ID 1 could map to \"/login.asp\" and ID 2 could map to \"http://www.example.com/\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n"}, {"Phase": ["Architecture and Design"], "Description": "Ensure that no externally-supplied requests are honored by requiring that all redirect requests include a unique nonce generated by the application [REF-483]. Be sure that the nonce is not predictable (CWE-330).", "EffectivenessNotes": "Note that this can be bypassed using XSS (CWE-79)."}, {"MitigationID": "MIT-6", "Phase": ["Architecture and Design", "Implementation"], "Strategy": "Attack Surface Reduction", "Description": "\n\nUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.\n\n\nMany open redirect problems occur because the programmer assumed that certain inputs could not be modified, such as cookies and hidden form fields.\n"}, {"MitigationID": "MIT-29", "Phase": ["Operation"], "Strategy": "Firewall", "Description": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.", "Effectiveness": "Moderate", "EffectivenessNotes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code obtains a URL from the query string and then redirects the user to that URL."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\t$redirect_url = $_GET['url'];\n\theader(\"Location: \" . $redirect_url);\n```"}, {"BodyText": "The problem with the above code is that an attacker could use this page as part of a phishing scam by redirecting users to a malicious site. For example, assume the above code is in the file example.php. An attacker could supply a user with the following link:"}, {"Nature": "Attack", "ExampleCode": "```\n\thttp://example.com/example.php?url=http://malicious.example.com\n```"}, {"BodyText": "The user sees the link pointing to the original trusted site (example.com) and does not realize the redirection that could take place."}]}, {"ID": "DX-194", "Entries": [{"IntroText": "The following code is a Java servlet that will receive a GET request with a url parameter in the request to redirect the browser to the address specified in the url parameter. The servlet will retrieve the url parameter value from the request and send a response to redirect the browser to the url address."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class RedirectServlet extends HttpServlet {\n\t\t\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\t\tString query = request.getQueryString();\n\t\t\t\tif (query.contains(\"url\")) {\n\t\t\t\t\tString url = request.getParameter(\"url\");\n\t\t\t\t\tresponse.sendRedirect(url);\n\t\t\t\t}\n\t\t\t}\n\t}\n```"}, {"BodyText": "The problem with this Java servlet code is that an attacker could use the RedirectServlet as part of an e-mail phishing scam to redirect users to a malicious site. An attacker could send an HTML formatted e-mail directing the user to log into their account by including in the e-mail the following link:"}, {"Nature": "Attack", "Language": "HTML", "ExampleCode": "```\n\t<a href=\"http://bank.example.com/redirect?url=http://attacker.example.net\">Click here to log in</a>\n```"}, {"BodyText": "The user may assume that the link is safe since the URL starts with their trusted bank, bank.example.com. However, the user will then be redirected to the attacker's web site (attacker.example.net) which the attacker may have made to appear very similar to bank.example.com. The user may then unwittingly enter credentials into the attacker's web page and compromise their bank account. A Java servlet should never redirect a user to a URL without verifying that the redirect address is a trusted site."}]}], "ObservedExamples": [{"Reference": "CVE-2005-4206", "Description": "URL parameter loads the URL into a frame and causes it to appear to be part of a valid page.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-4206"}, {"Reference": "CVE-2008-2951", "Description": "An open redirect vulnerability in the search script in the software allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL as a parameter to the proper function.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2951"}, {"Reference": "CVE-2008-2052", "Description": "Open redirect vulnerability in the software allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL in the proper parameter.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2052"}, {"Reference": "CVE-2020-11053", "Description": "Chain: Go-based Oauth2 reverse proxy can send the authenticated user to another site at the end of the authentication flow. A redirect URL with HTML-encoded whitespace characters can bypass the validation (CWE-1289) to redirect to a malicious site (CWE-601)", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-11053"}], "RelatedAttackPatterns": ["178"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-23599", "Description": "Products.ATContentTypes are the core content types for Plone 2.1 - 4.3. Versions of Plone that are dependent on Products.ATContentTypes prior to version 3.0.6 are vulnerable to reflected cross site scripting and open redirect when an attacker can get a compromised version of the image_view_fullscreen page in a cache, for example in Varnish. The technique is known as cache poisoning. Any later visitor can get redirected when clicking on a link on this page. Usually only anonymous users are affected, but this depends on the user's cache settings. Version 3.0.6 of Products.ATContentTypes has been released with a fix. This version works on Plone 5.2, Python 2 only. As a workaround, make sure the image_view_fullscreen page is not stored in the cache. More information about the vulnerability and cvmitigation measures is available in the GitHub Security Advisory."}, {"Reference": "CVE-2022-38132", "Description": "Command injection vulnerability in Linksys MR8300 router while Registration to DDNS Service. By specifying username and password, an attacker connected to the router's web interface can execute arbitrary OS commands. The username and password fields are not sanitized correctly and are used as URL construction arguments, allowing URL redirection to an arbitrary server, downloading an arbitrary script file, and eventually executing the file in the device. This issue affects: Linksys MR8300 Router 1.0."}, {"Reference": "CVE-2022-38210", "Description": "There is a reflected HTML injection vulnerability in Esri Portal for ArcGIS versions 10.9.1 and below that may allow a remote, unauthenticated attacker to create a crafted link which when clicked could render arbitrary HTML in the victim\u2019s browser."}, {"Reference": "CVE-2021-46379", "Description": "DLink DIR850 ET850-1.08TRb03 is affected by an incorrect access control vulnerability through URL redirection to untrusted site."}, {"Reference": "CVE-2022-28215", "Description": "SAP NetWeaver ABAP Server and ABAP Platform - versions 740, 750, 787, allows an unauthenticated attacker to redirect users to a malicious site due to insufficient URL validation. This could lead to the user being tricked to disclose personal information."}, {"Reference": "CVE-2022-40083", "Description": "Labstack Echo v4.8.0 was discovered to contain an open redirect vulnerability via the Static Handler component. This vulnerability can be leveraged by attackers to cause a Server-Side Request Forgery (SSRF)."}, {"Reference": "CVE-2022-41215", "Description": "SAP NetWeaver ABAP Server and ABAP Platform allows an unauthenticated attacker to redirect users to a malicious site due to insufficient URL validation. This could lead to the user being tricked to disclose personal information. "}, {"Reference": "CVE-2022-35406", "Description": "A URL disclosure issue was discovered in Burp Suite before 2022.6. If a user views a crafted response in the Repeater or Intruder, it may be incorrectly interpreted as a redirect."}, {"Reference": "CVE-2022-31657", "Description": "VMware Workspace ONE Access and Identity Manager contain a URL injection vulnerability. A malicious actor with network access may be able to redirect an authenticated user to an arbitrary domain."}]}
{"ID": "602", "Name": "Client-Side Enforcement of Server-Side Security", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.", "ExtendedDescription": "When the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms, resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "693", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "471", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "290", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "300", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "ICS/OT", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Mobile", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."}, {"Phase": "Architecture and Design", "Note": "Consider a product that consists of two or more processes or nodes that must interact closely, such as a client/server model. If the product uses protection schemes in the client in order to defend from attacks against the server, and the server does not use the same schemes, then an attacker could modify the client in a way that bypasses those schemes. This is a fundamental design flaw that is primary to many weaknesses."}], "CommonConsequences": [{"Scope": ["Access Control", "Availability"], "Impact": ["Bypass Protection Mechanism", "DoS: Crash, Exit, or Restart"], "Note": "Client-side validation checks can be easily bypassed, allowing malformed or unexpected input to pass into the application, potentially as trusted data. This may lead to unexpected states, behaviors and possibly a resulting crash."}, {"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism", "Gain Privileges or Assume Identity"], "Note": "Client-side checks for authentication can be easily bypassed, allowing clients to escalate their access levels and perform unintended actions."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "\n\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\n\nEven though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.\n"}, {"Phase": ["Architecture and Design"], "Description": "If some degree of trust is required between the two entities, then use integrity checking and strong authentication to ensure that the inputs are coming from a trusted source. Design the product so that this trust is managed in a centralized fashion, especially if there are complex or numerous communication channels, in order to reduce the risks that the implementer will mistakenly omit a check in a single code path."}, {"Phase": ["Testing"], "Description": "Use dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results."}, {"Phase": ["Testing"], "Description": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This example contains client-side code that checks if the user authenticated successfully before sending a command. The server-side code performs the authentication in one step, and executes the command in a separate step."}, {"BodyText": "CLIENT-SIDE (client.pl)"}, {"Nature": "Good", "Language": "Perl", "ExampleCode": "```\n\t$server = \"server.example.com\";\n\t$username = AskForUserName();\n\t$password = AskForPassword();\n\t$address = AskForAddress();\n\t$sock = OpenSocket($server, 1234);\n\twriteSocket($sock, \"AUTH $username $password\\n\");\n\t$resp = readSocket($sock);\n\tif ($resp eq \"success\") {\n```\n# username/pass is valid, go ahead and update the info!* \n\t\t\twriteSocket($sock, \"CHANGE-ADDRESS $username $address\\n\";}\n\telse {\n\t```\n\t\tprint \"ERROR: Invalid Authentication!\\n\";\n\t}\n```"}, {"BodyText": "SERVER-SIDE (server.pl):"}, {"Nature": "Bad", "ExampleCode": "```\n\t$sock = acceptSocket(1234);\n\t($cmd, $args) = ParseClientRequest($sock);\n\tif ($cmd eq \"AUTH\") {\n\t\t\t($username, $pass) = split(/\\s+/, $args, 2);\n\t\t\t$result = AuthenticateUser($username, $pass);\n\t\t\twriteSocket($sock, \"$result\\n\");\n```\n# does not close the socket on failure; assumes the* \n\t\t\t\n\t\t\t\n\t\t\t *# user will try again* \n\t\t\t}\n\telsif ($cmd eq \"CHANGE-ADDRESS\") {\n\t```\n\t\tif (validateAddress($args)) {\n\t\t\t$res = UpdateDatabaseRecord($username, \"address\", $args);\n\t\t\twriteSocket($sock, \"SUCCESS\\n\");\n\t\t}\n\t\telse {\n\t\t\twriteSocket($sock, \"FAILURE -- address is malformed\\n\");\n\t\t}\n\t}\n```"}, {"BodyText": "The server accepts 2 commands, \"AUTH\" which authenticates the user, and \"CHANGE-ADDRESS\" which updates the address field for the username. The client performs the authentication and only sends a CHANGE-ADDRESS for that user if the authentication succeeds. Because the client has already performed the authentication, the server assumes that the username in the CHANGE-ADDRESS is the same as the authenticated user. An attacker could modify the client by removing the code that sends the \"AUTH\" command and simply executing the CHANGE-ADDRESS."}]}, {"ID": "DX-153", "Entries": [{"IntroText": "In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were \"insecure by design\" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications."}, {"BodyText": "Multiple vendors used client-side authentication in their OT products."}]}], "ObservedExamples": [{"Reference": "CVE-2022-33139", "Description": "SCADA system only uses client-side authentication, allowing adversaries to impersonate other users.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-33139"}, {"Reference": "CVE-2006-6994", "Description": "ASP program allows upload of .asp files by bypassing client-side checks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6994"}, {"Reference": "CVE-2007-0163", "Description": "steganography products embed password information in the carrier file, which can be extracted from a modified client.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0163"}, {"Reference": "CVE-2007-0164", "Description": "steganography products embed password information in the carrier file, which can be extracted from a modified client.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0164"}, {"Reference": "CVE-2007-0100", "Description": "client allows server to modify client's configuration and overwrite arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0100"}], "RelatedAttackPatterns": ["162", "202", "207", "208", "21", "31", "383", "384", "385", "386", "387", "388"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Top25Examples": [{"Reference": "CVE-2022-29457", "Description": "Zoho ManageEngine ADSelfService Plus before 6121, ADAuditPlus 7060, Exchange Reporter Plus 5701, and ADManagerPlus 7131 allow NTLM Hash disclosure during certain storage-path configuration steps."}, {"Reference": "CVE-2022-24125", "Description": "The matchmaking servers of Bandai Namco FromSoftware Dark Souls III through 2022-03-19 allow remote attackers to send arbitrary push requests to clients via a RequestSendMessageToPlayers request. For example, ability to send a push message to hundreds of thousands of machines is only restricted on the client side, and can thus be bypassed with a modified client."}, {"Reference": "CVE-2021-25648", "Description": "Mobile application \"Testes de Codigo\" 11.4 and prior allows an attacker to gain access to the administrative interface and premium features by tampering the boolean value of parameters \"isAdmin\" and \"isPremium\" located on device storage."}, {"Reference": "CVE-2022-34397", "Description": " Dell Unisphere for PowerMax vApp, VASA Provider vApp, and Solution Enabler vApp version 10.0.0.5 and below contains an authorization bypass vulnerability, allowing users to perform actions in which they are not authorized. "}, {"Reference": "CVE-2022-38341", "Description": "Safe Software FME Server v2021.2.5 and below does not employ server-side validation."}]}
{"ID": "603", "Name": "Use of Client-Side Authentication", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check.", "ExtendedDescription": "Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1390", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "602", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "300", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "656", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "ICS/OT", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism", "Gain Privileges or Assume Identity"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Do not rely on client side data. Always perform server side authentication."}], "DemonstrativeExamples": [{"ID": "DX-153", "Entries": [{"IntroText": "In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were \"insecure by design\" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications."}, {"BodyText": "Multiple vendors used client-side authentication in their OT products."}]}], "ObservedExamples": [{"Reference": "CVE-2022-33139", "Description": "SCADA system only uses client-side authentication, allowing adversaries to impersonate other users.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-33139"}, {"Reference": "CVE-2006-0230", "Description": "Client-side check for a password allows access to a server using crafted XML requests from a modified client.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-0230"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-1065", "Description": "A vulnerability within the authentication process of Abacus ERP allows a remote attacker to bypass the second authentication factor. This issue affects: Abacus ERP v2022 versions prior to R1 of 2022-01-15; v2021 versions prior to R4 of 2022-01-15; v2020 versions prior to R6 of 2022-01-15; v2019 versions later than R5 (service pack); v2018 versions later than R5 (service pack). This issue does not affect: Abacus ERP v2019 versions prior to R5 of 2020-03-15; v2018 versions prior to R7 of 2020-04-15; v2017 version and prior versions and prior versions."}, {"Reference": "CVE-2022-31463", "Description": "Owl Labs Meeting Owl 5.2.0.15 does not require a password for Bluetooth commands, because only client-side authentication is used."}, {"Reference": "CVE-2022-3218", "Description": "Due to a reliance on client-side authentication, the WiFi Mouse (Mouse Server) from Necta LLC's authentication mechanism is trivially bypassed, which can result in remote code execution."}]}
{"ID": "605", "Name": "Multiple Binds to the Same Port", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "When multiple sockets are allowed to bind to the same port, other services on that port may be stolen or spoofed.", "ExtendedDescription": "On most systems, a combination of setting the SO_REUSEADDR socket option, and a call to bind() allows any process to bind to a port to which a previous process has bound with INADDR_ANY. This allows a user to bind to the specific address of a server bound to INADDR_ANY on an unprivileged port, and steal its UDP packets/TCP connection.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "675", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "666", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Application Data"], "Note": "Packets from a variety of network services may be stolen or the services spoofed."}], "PotentialMitigations": [{"Phase": ["Policy"], "Description": "Restrict server socket address to known local addresses."}], "DemonstrativeExamples": [{"ID": "DX-184", "Entries": [{"IntroText": "This code binds a server socket to port 21, allowing the server to listen for traffic on that port."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid bind_socket(void) {\n\t\t\tint server_sockfd;\n\t\t\tint server_len;\n\t\t\tstruct sockaddr_in server_address;\n```\n/*unlink the socket if already bound to avoid an error when bind() is called*/* \n\t\t\t\n\t\t\tunlink(\"server_socket\");\n\t\t\tserver_sockfd = socket(AF_INET, SOCK_STREAM, 0);\n\t\t\t\n\t\t\tserver_address.sin_family = AF_INET;\n\t\t\tserver_address.sin_port = 21;\n\t\t\tserver_address.sin_addr.s_addr = htonl(INADDR_ANY);\n\t\t\tserver_len = sizeof(struct sockaddr_in);\n\t\t\t\n\t\t\tbind(server_sockfd, (struct sockaddr *) &s1, server_len);}"}, {"BodyText": "This code may result in two servers binding a socket to same port, thus receiving each other's traffic. This could be used by an attacker to steal packets meant for another process, such as a secure FTP server."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "606", "Name": "Unchecked Input for Loop Condition", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1284", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "834", "ViewID": "1000"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Resource Consumption (CPU)"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Do not use user-controlled data for loop conditions."}, {"Phase": ["Implementation"], "Description": "Perform input validation."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following example demonstrates the weakness."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid iterate(int n){\n\t\tint i;\n\t\tfor (i = 0; i < n; i++){\n\t\t\tfoo();\n\t\t}\n\t}\n\tvoid iterateFoo()\n\t{\n\t\tunsigned int num;\n\t\tscanf(\"%u\",&num);\n\t\titerate(num);\n\t}\n```"}]}, {"ID": "DX-91", "Entries": [{"IntroText": "In the following C/C++ example the method processMessageFromSocket() will get a message from a socket, placed into a buffer, and will parse the contents of the buffer into a structure that contains the message length and the message body. A for loop is used to copy the message body into a local character string which will be passed to another method for processing."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint processMessageFromSocket(int socket) {\n\t\t\tint success;\n\t\t\tchar buffer[BUFFER_SIZE];\n\t\t\tchar message[MESSAGE_SIZE];\n```\n// get message from socket and store into buffer* \n\t\t\t\n\t\t\t\n\t\t\t *//Ignoring possibliity that buffer > BUFFER_SIZE* \n\t\t\tif (getMessage(socket, buffer, BUFFER_SIZE) > 0) {\n\t\t\t```\n```\n// place contents of the buffer into message structure* \n\t\t\t\t\tExMessage *msg = recastBuffer(buffer);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t *// copy message body into string for processing* \n\t\t\t\t\tint index;\n\t\t\t\t\tfor (index = 0; index < msg->msgLength; index++) {\n\t\t\t\t\t```\n\t\t\t\t\t\tmessage[index] = msg->msgBody[index];\n\t\t\t\t\t}\n\t\t\t\t\tmessage[index] = '\\0';\n```\n// process message* \n\t\t\t\t\tsuccess = processMessage(message);}\n\t\t\treturn success;}"}, {"BodyText": "However, the message length variable from the structure is used as the condition for ending the for loop without validating that the message length variable accurately reflects the length of the message body (CWE-606). This can result in a buffer over-read (CWE-125) by reading from memory beyond the bounds of the buffer if the message length variable indicates a length that is longer than the size of a message body (CWE-130)."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-26477", "Description": "The Security Team noticed that the termination condition of the for loop in the readExternal method is a controllable variable, which, if tampered with, may lead to CPU exhaustion. As a fix, we added an upper bound and termination condition in the read and write logic. We classify it as a \"low-priority but useful improvement\". SystemDS is a distributed system and needs to serialize/deserialize data but in many code paths (e.g., on Spark broadcast/shuffle or writing to sequence files) the byte stream is anyway protected by additional CRC fingerprints. In this particular case though, the number of decoders is upper-bounded by twice the number of columns, which means an attacker would need to modify two entries in the byte stream in a consistent manner. By adding these checks robustness was strictly improved with almost zero overhead. These code changes are available in versions higher than 2.2.1."}, {"Reference": "CVE-2022-41861", "Description": "A flaw was found in freeradius. A malicious RADIUS client or home server can send a malformed abinary attribute which can cause the server to crash."}]}
{"ID": "607", "Name": "Public Static Final Field References Mutable Object", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "A public or protected static final field references a mutable object, which allows the object to be changed by malicious code, or accidentally from another package.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "471", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Modify Application Data"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Protect mutable objects by making them private. Restrict access to the getter and setter as well."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Here, an array (which is inherently mutable) is labeled public static final."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic static final String[] USER_ROLES;\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "608", "Name": "Struts: Non-private Field in ActionForm Class", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "An ActionForm class contains a field that has not been declared private, which can be accessed without using a setter or getter.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "668", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality"], "Impact": ["Modify Application Data", "Read Application Data"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Make all fields private. Use getter to get the value of the field. Setter should be used only by the framework; setting an action form field from other actions is bad practice and should be avoided."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following Java example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for a online business site. The user will enter registration data and through the Struts framework the RegistrationForm bean will maintain the user data."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class RegistrationForm extends org.apache.struts.validator.ValidatorForm {\n\t\t\t// variables for registration form\n\t\t\tpublic String name;\n\t\t\tpublic String email;\n\t\t\t...\n\t\t\tpublic RegistrationForm() {\n\t\t\t\tsuper();\n\t\t\t}\n\t\t\tpublic ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {...}\n\t\t\t...\n\t}\n```"}, {"BodyText": "However, within the RegistrationForm the member variables for the registration form input data are declared public not private. All member variables within a Struts framework ActionForm class must be declared private to prevent the member variables from being modified without using the getter and setter methods. The following example shows the member variables being declared private and getter and setter methods declared for accessing the member variables."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tpublic class RegistrationForm extends org.apache.struts.validator.ValidatorForm {\n\t\t\t// private variables for registration form\n\t\t\tprivate String name;\n\t\t\tprivate String email;\n\t\t\t...\n\t\t\tpublic RegistrationForm() {\n\t\t\t\tsuper();\n\t\t\t}\n\t\t\tpublic ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {...}\n\t\t// getter and setter methods for private variables\n\t\t...\n\t}\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "609", "Name": "Double-Checked Locking", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient.", "ExtendedDescription": "Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as it is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "667", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "367", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Modify Application Data", "Alter Execution Logic"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "While double-checked locking can be achieved in some languages, it is inherently flawed in Java before 1.5, and cannot be achieved without compromising platform independence. Before Java 1.5, only use of the synchronized keyword is known to work. Beginning in Java 1.5, use of the \"volatile\" keyword allows double-checked locking to work successfully, although there is some debate as to whether it achieves sufficient performance gains. See references."}], "DemonstrativeExamples": [{"ID": "DX-70", "Entries": [{"IntroText": "It may seem that the following bit of code achieves thread safety while avoiding unnecessary synchronization..."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tif (helper == null) {\n\t\t\tsynchronized (this) {\n\t\t\t\tif (helper == null) {\n\t\t\t\t\thelper = new Helper();\n\t\t\t\t}\n\t\t\t}\n\t}\n\treturn helper;\n```"}, {"BodyText": "The programmer wants to guarantee that only one Helper() object is ever allocated, but does not want to pay the cost of synchronization every time this code is called."}, {"BodyText": "Suppose that helper is not initialized. Then, thread A sees that helper==null and enters the synchronized block and begins to execute:"}, {"Nature": "Bad", "ExampleCode": "```\n\thelper = new Helper();\n```"}, {"BodyText": "If a second thread, thread B, takes over in the middle of this call and helper has not finished running the constructor, then thread B may make calls on helper while its fields hold incorrect values."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "61", "Name": "UNIX Symbolic Link (Symlink) Following", "Abstraction": "Compound", "Structure": "Composite", "Status": "Incomplete", "Description": "The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.", "ExtendedDescription": "A product that allows UNIX symbolic links (symlink) as part of paths whether in internal code or through user input can allow an attacker to spoof the symbolic link and traverse the file system to unintended locations or access arbitrary files. The symbolic link can permit an attacker to read/write/corrupt a file that they originally did not have permissions to access.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "59", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "Requires", "CweID": "362", "ViewID": "1000"}, {"Nature": "Requires", "CweID": "340", "ViewID": "1000"}, {"Nature": "Requires", "CweID": "386", "ViewID": "1000"}, {"Nature": "Requires", "CweID": "732", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Symlink following"}, {"Term": "symlink vulnerability"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "These are typically reported for temporary files or privileged programs."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Modify Files or Directories"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Symbolic link attacks often occur when a program creates a tmp directory that stores files/links. Access to the directory should be restricted to the program as to prevent attackers from manipulating the files."}, {"MitigationID": "MIT-48.1", "Phase": ["Architecture and Design"], "Strategy": "Separation of Privilege", "Description": "\n\nFollow the principle of least privilege when assigning access rights to entities in a software system.\n\n\nDenying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.\n"}], "ObservedExamples": [{"Reference": "CVE-1999-1386", "Description": "Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1386"}, {"Reference": "CVE-2000-1178", "Description": "Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1178"}, {"Reference": "CVE-2004-0217", "Description": "Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0217"}, {"Reference": "CVE-2003-0517", "Description": "Symlink attack allows local users to overwrite files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0517"}, {"Reference": "CVE-2004-0689", "Description": "Possible interesting example", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0689"}, {"Reference": "CVE-2005-1879", "Description": "Second-order symlink vulnerabilities", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1879"}, {"Reference": "CVE-2005-1880", "Description": "Second-order symlink vulnerabilities", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1880"}, {"Reference": "CVE-2005-1916", "Description": "Symlink in Python program", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1916"}, {"Reference": "CVE-2000-0972", "Description": "Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0972"}, {"Reference": "CVE-2005-0824", "Description": "Signal causes a dump that follows symlinks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0824"}, {"Reference": "CVE-2015-3629", "Description": "A Libcontainer used in Docker Engine allows local users to escape containerization and write to an arbitrary file on the host system via a symlink attack in an image when respawning a container.", "Link": "https://www.cve.org/CVERecord?id=CVE-2015-3629"}, {"Reference": "CVE-2020-26277", "Description": "In a MySQL database deployment tool, users may craft a maliciously packaged tarball that contains symlinks to files external to the target and once unpacked, will execute.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-26277"}, {"Reference": "CVE-2021-21272", "Description": "\"Zip Slip\" vulnerability in Go-based Open Container Initiative (OCI) registries product allows writing arbitrary files outside intended directory via symbolic links or hard links in a gzipped tarball.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-21272"}], "RelatedAttackPatterns": ["27"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This is a well-known Composite of multiple weaknesses that must all occur simultaneously, although it is attack-oriented in nature.", "Comments": "While attack-oriented composites are supported in CWE, they have not been a focus of research. There is a chance that future research or CWE scope clarifications will change or deprecate them. Perform root-cause analysis to determine which weaknesses allow symlink following to occur, and map to those weaknesses. For example, predictable file names might be intended functionality, but creation in a directory with insecure permissions might not.", "Reasons": ["Other"]}, "Notes": [{"Type": "Research Gap", "Note": "\n\nSymlink vulnerabilities are regularly found in C and shell programs, but all programming languages can have this problem. Even shell programs are probably under-reported.\n\n\n\"Second-order symlink vulnerabilities\" may exist in programs that invoke other programs that follow symlinks. They are rarely reported but are likely to be fairly common when process invocation is used [REF-493].\n"}], "Top25Examples": [{"Reference": "CVE-2022-20720", "Description": "Multiple vulnerabilities in the Cisco IOx application hosting environment on multiple Cisco platforms could allow an attacker to inject arbitrary commands into the underlying host operating system, execute arbitrary code on the underlying host operating system, install applications without being authenticated, or conduct a cross-site scripting (XSS) attack against a user of the affected software. For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2022-25856", "Description": "The package github.com/argoproj/argo-events/sensors/artifacts before 1.7.1 are vulnerable to Directory Traversal in the (g *GitArtifactReader).Read() API in git.go. This could allow arbitrary file reads if the GitArtifactReader is provided a pathname containing a symbolic link or an implicit directory name such as ..."}, {"Reference": "CVE-2022-26612", "Description": "In Apache Hadoop, The unTar function uses unTarUsingJava function on Windows and the built-in tar utility on Unix and other OSes. As a result, a TAR entry may create a symlink under the expected extraction directory which points to an external directory. A subsequent TAR entry may extract an arbitrary file into the external directory using the symlink name. This however would be caught by the same targetDirPath check on Unix because of the getCanonicalPath call. However on Windows, getCanonicalPath doesn't resolve symbolic links, which bypasses the check. unpackEntries during TAR extraction follows symbolic links which allows writing outside expected base directory on Windows. This was addressed in Apache Hadoop 3.2.3"}, {"Reference": "CVE-2022-3592", "Description": "A symlink following vulnerability was found in Samba, where a user can create a symbolic link that will make 'smbd' escape the configured share path. This flaw allows a remote user with access to the exported part of the file system under a share via SMB1 unix extensions or NFS to create symlinks to files outside the 'smbd' configured share path and gain access to another restricted server's filesystem."}, {"Reference": "CVE-2022-36113", "Description": "Cargo is a package manager for the rust programming language. After a package is downloaded, Cargo extracts its source code in the ~/.cargo folder on disk, making it available to the Rust projects it builds. To record when an extraction is successful, Cargo writes \"ok\" to the .cargo-ok file at the root of the extracted source code once it extracted all the files. It was discovered that Cargo allowed packages to contain a .cargo-ok symbolic link, which Cargo would extract. Then, when Cargo attempted to write \"ok\" into .cargo-ok, it would actually replace the first two bytes of the file the symlink pointed to with ok. This would allow an attacker to corrupt one file on the machine using Cargo to extract the package. Note that by design Cargo allows code execution at build time, due to build scripts and procedural macros. The vulnerabilities in this advisory allow performing a subset of the possible damage in a harder to track down way. Your dependencies must still be trusted if you want to be protected from attacks, as it's possible to perform the same attacks with build scripts and procedural macros. The vulnerability is present in all versions of Cargo. Rust 1.64, to be released on September 22nd, will include a fix for it. Since the vulnerability is just a more limited way to accomplish what a malicious build scripts or procedural macros can do, we decided not to publish Rust point releases backporting the security fix. Patch files are available for Rust 1.63.0 are available in the wg-security-response repository for people building their own toolchain. Mitigations We recommend users of alternate registries to exercise care in which package they download, by only including trusted dependencies in their projects. Please note that even with these vulnerabilities fixed, by design Cargo allows arbitrary code execution at build time thanks to build scripts and procedural macros: a malicious dependency will be able to cause damage regardless of these vulnerabilities. crates.io implemented server-side checks to reject these kinds of packages years ago, and there are no packages on crates.io exploiting these vulnerabilities. crates.io users still need to exercise care in choosing their dependencies though, as remote code execution is allowed by design there as well."}, {"Reference": "CVE-2022-24904", "Description": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. Argo CD starting with version 0.7.0 and prior to versions 2.1.15m 2.2.9, and 2.3.4 is vulnerable to a symlink following bug allowing a malicious user with repository write access to leak sensitive files from Argo CD's repo-server. A malicious Argo CD user with write access for a repository which is (or may be) used in a directory-type Application may commit a symlink which points to an out-of-bounds file. Sensitive files which could be leaked include manifest files from other Applications' source repositories (potentially decrypted files, if you are using a decryption plugin) or any JSON-formatted secrets which have been mounted as files on the repo-server. A patch for this vulnerability has been released in Argo CD versions 2.3.4, 2.2.9, and 2.1.15. Users of versions 2.3.0 or above who do not have any Jsonnet/directory-type Applications may disable the Jsonnet/directory config management tool as a workaround."}, {"Reference": "CVE-2022-31036", "Description": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. All versions of Argo CD starting with v1.3.0 are vulnerable to a symlink following bug allowing a malicious user with repository write access to leak sensitive YAML files from Argo CD's repo-server. A malicious Argo CD user with write access for a repository which is (or may be) used in a Helm-type Application may commit a symlink which points to an out-of-bounds file. If the target file is a valid YAML file, the attacker can read the contents of that file. Sensitive files which could be leaked include manifest files from other Applications' source repositories (potentially decrypted files, if you are using a decryption plugin) or any YAML-formatted secrets which have been mounted as files on the repo-server. Patches for this vulnerability has been released in the following Argo CD versions: v2.4.1, v2.3.5, v2.2.10 and v2.1.16. If you are using a version >=v2.3.0 and do not have any Helm-type Applications you may disable the Helm config management tool as a workaround."}, {"Reference": "CVE-2022-35631", "Description": "On MacOS and Linux, it may be possible to perform a symlink attack by replacing this predictable file name with a symlink to another file and have the Velociraptor client overwrite the other file. This issue was resolved in Velociraptor 0.6.5-2."}, {"Reference": "CVE-2021-35937", "Description": "A race condition vulnerability was found in rpm. A local unprivileged user could use this flaw to bypass the checks that were introduced in response to CVE-2017-7500 and CVE-2017-7501, potentially gaining root privileges. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability."}, {"Reference": "CVE-2022-34899", "Description": "This vulnerability allows local attackers to escalate privileges on affected installations of Parallels Access 6.5.4 (39316) Agent. An attacker must first obtain the ability to execute low-privileged code on the target host system in order to exploit this vulnerability. The specific flaw exists within the Parallels service. By creating a symbolic link, an attacker can abuse the service to execute a file. An attacker can leverage this vulnerability to escalate privileges and execute arbitrary code in the context of root. Was ZDI-CAN-16134."}, {"Reference": "CVE-2022-45440", "Description": "A vulnerability exists in the FTP server of the Zyxel AX7501-B0 firmware prior to V5.17(ABPC.3)C0, which processes symbolic links on external storage media. A local authenticated attacker with administrator privileges could abuse this vulnerability to access the root file system by creating a symbolic link on external storage media, such as a USB flash drive, and then logging into the FTP server on a vulnerable device."}, {"Reference": "CVE-2022-21658", "Description": "Rust is a multi-paradigm, general-purpose programming language designed for performance and safety, especially safe concurrency. The Rust Security Response WG was notified that the `std::fs::remove_dir_all` standard library function is vulnerable a race condition enabling symlink following (CWE-363). An attacker could use this security issue to trick a privileged program into deleting files and directories the attacker couldn't otherwise access or delete. Rust 1.0.0 through Rust 1.58.0 is affected by this vulnerability with 1.58.1 containing a patch. Note that the following build targets don't have usable APIs to properly mitigate the attack, and are thus still vulnerable even with a patched toolchain: macOS before version 10.10 (Yosemite) and REDOX. We recommend everyone to update to Rust 1.58.1 as soon as possible, especially people developing programs expected to run in privileged contexts (including system daemons and setuid binaries), as those have the highest risk of being affected by this. Note that adding checks in your codebase before calling remove_dir_all will not mitigate the vulnerability, as they would also be vulnerable to race conditions like remove_dir_all itself. The existing mitigation is working as intended outside of race conditions."}, {"Reference": "CVE-2022-21944", "Description": "A UNIX Symbolic Link (Symlink) Following vulnerability in the systemd service file for watchman of openSUSE Backports SLE-15-SP3, Factory allows local attackers to escalate to root. This issue affects: openSUSE Backports SLE-15-SP3 watchman versions prior to 4.9.0. openSUSE Factory watchman versions prior to 4.9.0-9.1."}, {"Reference": "CVE-2022-31250", "Description": "A UNIX Symbolic Link (Symlink) Following vulnerability in keylime of openSUSE Tumbleweed allows local attackers to escalate from the keylime user to root. This issue affects: openSUSE Tumbleweed keylime versions prior to 6.4.2-1.1."}]}
{"ID": "610", "Name": "Externally Controlled Reference to a Resource in Another Sphere", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "664", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Application Data", "Modify Application Data"]}], "DemonstrativeExamples": [{"ID": "DX-194", "Entries": [{"IntroText": "The following code is a Java servlet that will receive a GET request with a url parameter in the request to redirect the browser to the address specified in the url parameter. The servlet will retrieve the url parameter value from the request and send a response to redirect the browser to the url address."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class RedirectServlet extends HttpServlet {\n\t\t\tprotected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\t\tString query = request.getQueryString();\n\t\t\t\tif (query.contains(\"url\")) {\n\t\t\t\t\tString url = request.getParameter(\"url\");\n\t\t\t\t\tresponse.sendRedirect(url);\n\t\t\t\t}\n\t\t\t}\n\t}\n```"}, {"BodyText": "The problem with this Java servlet code is that an attacker could use the RedirectServlet as part of an e-mail phishing scam to redirect users to a malicious site. An attacker could send an HTML formatted e-mail directing the user to log into their account by including in the e-mail the following link:"}, {"Nature": "Attack", "Language": "HTML", "ExampleCode": "```\n\t<a href=\"http://bank.example.com/redirect?url=http://attacker.example.net\">Click here to log in</a>\n```"}, {"BodyText": "The user may assume that the link is safe since the URL starts with their trusted bank, bank.example.com. However, the user will then be redirected to the attacker's web site (attacker.example.net) which the attacker may have made to appear very similar to bank.example.com. The user may then unwittingly enter credentials into the attacker's web page and compromise their bank account. A Java servlet should never redirect a user to a URL without verifying that the redirect address is a trusted site."}]}], "ObservedExamples": [{"Reference": "CVE-2022-3032", "Description": "An email client does not block loading of remote objects in a nested document.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-3032"}, {"Reference": "CVE-2022-45918", "Description": "Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-45918"}, {"Reference": "CVE-2018-1000613", "Description": "Cryptography API uses unsafe reflection when deserializing a private key", "Link": "https://www.cve.org/CVERecord?id=CVE-2018-1000613"}, {"Reference": "CVE-2020-11053", "Description": "Chain: Go-based Oauth2 reverse proxy can send the authenticated user to another site at the end of the authentication flow. A redirect URL with HTML-encoded whitespace characters can bypass the validation (CWE-1289) to redirect to a malicious site (CWE-601)", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-11053"}, {"Reference": "CVE-2022-42745", "Description": "Recruiter software allows reading arbitrary files using XXE", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-42745"}, {"Reference": "CVE-2004-2331", "Description": "Database system allows attackers to bypass sandbox restrictions by using the Reflection API.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2331"}], "RelatedAttackPatterns": ["219"], "MappingNotes": {"Usage": "Discouraged", "Rationale": "This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Relationship", "Note": "This is a general class of weakness, but most research is focused on more specialized cases, such as path traversal (CWE-22) and symlink following (CWE-61). A symbolic link has a name; in general, it appears like any other file in the file system. However, the link includes a reference to another file, often in another directory - perhaps in another sphere of control. Many common library functions that accept filenames will \"follow\" a symbolic link and use the link's target instead."}, {"Type": "Maintenance", "Note": "The relationship between CWE-99 and CWE-610 needs further investigation and clarification. They might be duplicates. CWE-99 \"Resource Injection,\" as originally defined in Seven Pernicious Kingdoms taxonomy, emphasizes the \"identifier used to access a system resource\" such as a file name or port number, yet it explicitly states that the \"resource injection\" term does not apply to \"path manipulation,\" which effectively identifies the path at which a resource can be found and could be considered to be one aspect of a resource identifier. Also, CWE-610 effectively covers any type of resource, whether that resource is at the system layer, the application layer, or the code layer."}], "Top25Examples": [{"Reference": "CVE-2022-27593", "Description": "An externally controlled reference to a resource vulnerability has been reported to affect QNAP NAS running Photo Station. If exploited, This could allow an attacker to modify system files. We have already fixed the vulnerability in the following versions: QTS 5.0.1: Photo Station 6.1.2 and later QTS 5.0.0/4.5.x: Photo Station 6.0.22 and later QTS 4.3.6: Photo Station 5.7.18 and later QTS 4.3.3: Photo Station 5.4.15 and later QTS 4.2.6: Photo Station 5.2.14 and later"}, {"Reference": "CVE-2022-30190", "Description": "A remote code execution vulnerability exists when MSDT is called using the URL protocol from a calling application such as Word. An attacker who successfully exploits this vulnerability can run arbitrary code with the privileges of the calling application. The attacker can then install programs, view, change, or delete data, or create new accounts in the context allowed by the user\u2019s rights. Please see the MSRC Blog Entry for important information about steps you can take to protect your system from this vulnerability. "}, {"Reference": "CVE-2022-3032", "Description": "When receiving an HTML email that contained an <code>iframe</code> element, which used a <code>srcdoc</code> attribute to define the inner HTML document, remote objects specified in the nested document, for example images or videos, were not blocked. Rather, the network was accessed, the objects were loaded and displayed. This vulnerability affects Thunderbird < 102.2.1 and Thunderbird < 91.13.1."}]}
{"ID": "611", "Name": "Improper Restriction of XML External Entity Reference", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.", "ExtendedDescription": "\n\nXML documents optionally contain a Document Type Definition (DTD), which, among other features, enables the definition of XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser can access the contents of this URI and embed these contents back into the XML document for further processing.\n\n\nBy submitting an XML file that defines an external entity with a file:// URI, an attacker can cause the processing application to read the contents of a local file. For example, a URI such as \"file:///c:/winnt/win.ini\" designates (in Windows) the file C:\\Winnt\\win.ini, or file:///etc/passwd designates the password file in Unix-based systems. Using URIs with other schemes such as http://, the attacker can force the application to make outgoing requests to servers that the attacker cannot reach directly, which can be used to bypass firewall restrictions or hide the source of attacks such as port scanning.\n\n\nOnce the content of the URI is read, it is fed back into the application that is processing the XML. This application may echo back the data (e.g. in an error message), thereby exposing the file contents.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "610", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "610", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "441", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "XML", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Web Based", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "XXE", "Description": "An acronym used for the term \"XML eXternal Entities\""}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data", "Read Files or Directories"], "Note": "If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system."}, {"Scope": ["Integrity"], "Impact": ["Bypass Protection Mechanism"], "Note": "The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities."}, {"Scope": ["Availability"], "Impact": ["DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)"], "Note": "The product could consume excessive CPU cycles or memory using a URI that points to a large file, or a device that always returns data such as /dev/random. Alternately, the URI could reference a file that contains many nested or recursive entity references to further slow down parsing."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation", "System Configuration"], "Description": "Many XML parsers and validators can be configured to disable external entity expansion."}], "ObservedExamples": [{"Reference": "CVE-2022-42745", "Description": "Recruiter software allows reading arbitrary files using XXE", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-42745"}, {"Reference": "CVE-2005-1306", "Description": "A browser control can allow remote attackers to determine the existence of files via Javascript containing XML script.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1306"}, {"Reference": "CVE-2012-5656", "Description": "XXE during SVG image conversion", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-5656"}, {"Reference": "CVE-2012-2239", "Description": "XXE in PHP application allows reading the application's configuration file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-2239"}, {"Reference": "CVE-2012-3489", "Description": "XXE in database server", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-3489"}, {"Reference": "CVE-2012-4399", "Description": "XXE in rapid web application development framework allows reading arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-4399"}, {"Reference": "CVE-2012-3363", "Description": "XXE via XML-RPC request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-3363"}, {"Reference": "CVE-2012-0037", "Description": "XXE in office document product using RDF.", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-0037"}, {"Reference": "CVE-2011-4107", "Description": "XXE in web-based administration tool for database.", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-4107"}, {"Reference": "CVE-2010-3322", "Description": "XXE in product that performs large-scale data analysis.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-3322"}, {"Reference": "CVE-2009-1699", "Description": "XXE in XSL stylesheet functionality in a common library used by some web browsers.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1699"}], "RelatedAttackPatterns": ["221"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "CWE-918 (SSRF) and CWE-611 (XXE) are closely related, because they both involve web-related technologies and can launch outbound requests to unexpected destinations. However, XXE can be performed client-side, or in other contexts in which the software is not acting directly as a server, so the \"Server\" portion of the SSRF acronym does not necessarily apply."}], "Top25Examples": [{"Reference": "CVE-2022-0217", "Description": "It was discovered that an internal Prosody library to load XML based on libexpat does not properly restrict the XML features allowed in parsed XML data. Given suitable attacker input, this results in expansion of recursive entity references from DTDs (CWE-776). In addition, depending on the libexpat version used, it may also allow injections using XML External Entity References (CWE-611)."}, {"Reference": "CVE-2022-23170", "Description": "SysAid - Okta SSO integration - was found vulnerable to XML External Entity Injection vulnerability. Any SysAid environment that uses the Okta SSO integration might be vulnerable. An unauthenticated attacker could exploit the XXE vulnerability by sending a malformed POST request to the identity provider endpoint. An attacker can extract the identity provider endpoint by decoding the SAMLRequest parameter's value and searching for the AssertionConsumerServiceURL parameter's value. It often allows an attacker to view files on the application server filesystem and interact with any back-end or external systems that the application can access. In some situations, an attacker can escalate an XXE attack to compromise the underlying server or other back-end infrastructure by leveraging the XXE vulnerability to perform server-side request forgery (SSRF) attacks."}, {"Reference": "CVE-2022-24449", "Description": "Solar appScreener through 3.10.4, when a valid license is not present, allows XXE and SSRF attacks via a crafted XML document."}, {"Reference": "CVE-2022-2458", "Description": "XML external entity injection(XXE) is a vulnerability that allows an attacker to interfere with an application's processing of XML data. This attack occurs when XML input containing a reference to an external entity is processed by a weakly configured XML parser. The software processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output. Here, XML external entity injection lead to External Service interaction & Internal file read in Business Central and also Kie-Server APIs."}, {"Reference": "CVE-2022-27193", "Description": "CVRF-CSAF-Converter before 1.0.0-rc2 resolves XML External Entities (XXE). This leads to the inclusion of arbitrary (local) file content into the generated output document. An attacker can exploit this to disclose information from the system running the converter."}, {"Reference": "CVE-2022-3338", "Description": "An External XML entity (XXE) vulnerability in ePO prior to 5.10 Update 14 can lead to an unauthenticated remote attacker to potentially trigger a Server Side Request Forgery attack. This can be exploited by mimicking the Agent Handler call to ePO and passing the carefully constructed XML file through the API."}, {"Reference": "CVE-2022-35741", "Description": "Apache CloudStack version 4.5.0 and later has a SAML 2.0 authentication Service Provider plugin which is found to be vulnerable to XML external entity (XXE) injection. This plugin is not enabled by default and the attacker would require that this plugin be enabled to exploit the vulnerability. When the SAML 2.0 plugin is enabled in affected versions of Apache CloudStack could potentially allow the exploitation of XXE vulnerabilities. The SAML 2.0 messages constructed during the authentication flow in Apache CloudStack are XML-based and the XML data is parsed by various standard libraries that are now understood to be vulnerable to XXE injection attacks such as arbitrary file reading, possible denial of service, server-side request forgery (SSRF) on the CloudStack management server."}, {"Reference": "CVE-2022-38342", "Description": "Safe Software FME Server v2021.2.5, v2022.0.0.2 and below was discovered to contain a XML External Entity (XXE) vulnerability which allows authenticated attackers to perform data exfiltration or Server-Side Request Forgery (SSRF) attacks."}, {"Reference": "CVE-2022-3980", "Description": "An XML External Entity (XEE) vulnerability allows server-side request forgery (SSRF) and potential code execution in Sophos Mobile managed on-premises between versions 5.0.0 and 9.7.4."}, {"Reference": "CVE-2022-42745", "Description": "CandidATS version 3.0.0 allows an external attacker to read arbitrary files from the server. This is possible because the application is vulnerable to XXE."}, {"Reference": "CVE-2022-45194", "Description": "CBRN-Analysis before 22 allows XXE attacks via am mws XML document, leading to NTLMv2-SSP hash disclosure."}, {"Reference": "CVE-2022-45326", "Description": "An XML external entity (XXE) injection vulnerability in Kwoksys Kwok Information Server before v2.9.5.SP31 allows remote authenticated users to conduct server-side request forgery (SSRF) attacks."}, {"Reference": "CVE-2022-46827", "Description": "In JetBrains IntelliJ IDEA before 2022.3 an XXE attack leading to SSRF via requests to custom plugin repositories was possible."}, {"Reference": "CVE-2022-47514", "Description": "An XML external entity (XXE) injection vulnerability in XML-RPC.NET before 2.5.0 allows remote authenticated users to conduct server-side request forgery (SSRF) attacks, as demonstrated by a pingback.aspx POST request."}, {"Reference": "CVE-2022-47873", "Description": "Netcad KEOS 1.0 is vulnerable to XML External Entity (XXE) resulting in SSRF with XXE (remote)."}]}
{"ID": "612", "Name": "Improper Authorization of Index Containing Sensitive Information", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product creates a search index of private or sensitive documents, but it does not properly limit index access to actors who are authorized to see the original information.", "ExtendedDescription": "Web sites and other document repositories may apply an indexing routine against a group of private documents to facilitate search. If the index's results are available to parties who do not have access to the documents being indexed, then attackers could obtain portions of the documents by conducting targeted searches and reading the results. The risk is especially dangerous if search results include surrounding text that was not part of the search query. This issue can appear in search engines that are not configured (or implemented) to ignore critical files that should remain hidden; even without permissions to download these files directly, the remote user could read them.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1230", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"]}], "ObservedExamples": [{"Reference": "CVE-2022-41918", "Description": "A search application's access control rules are not properly applied to indices for data streams, allowing for the viewing of sensitive information.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-41918"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "This weakness is probably under-studied and under-reported."}], "Top25Examples": [{"Reference": "CVE-2022-22565", "Description": "Dell PowerScale OneFS, versions 9.0.0-9.3.0, contain an improper authorization of index containing sensitive information. An authenticated and privileged user could potentially exploit this vulnerability, leading to disclosure or modification of sensitive data."}, {"Reference": "CVE-2022-35980", "Description": "OpenSearch Security is a plugin for OpenSearch that offers encryption, authentication and authorization. Versions 2.0.0.0 and 2.1.0.0 of the security plugin are affected by an information disclosure vulnerability. Requests to an OpenSearch cluster configured with advanced access control features document level security (DLS), field level security (FLS), and/or field masking will not be filtered when the query's search pattern matches an aliased index. OpenSearch Dashboards creates an alias to `.kibana` by default, so filters with the index pattern of `*` to restrict access to documents or fields will not be applied. This issue allows requests to access sensitive information when customer have acted to restrict access that specific information. OpenSearch 2.2.0, which is compatible with OpenSearch Security 2.2.0.0, contains the fix for this issue. There is no recommended work around."}, {"Reference": "CVE-2022-41918", "Description": "OpenSearch is a community-driven, open source fork of Elasticsearch and Kibana. There is an issue with the implementation of fine-grained access control rules (document-level security, field-level security and field masking) where they are not correctly applied to the indices that back data streams potentially leading to incorrect access authorization. OpenSearch 1.3.7 and 2.4.0 contain a fix for this issue. Users are advised to update. There are no known workarounds for this issue."}]}
{"ID": "613", "Name": "Insufficient Session Expiration", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "According to WASC, \"Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.\"", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "672", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "672", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "287", "ViewID": "1000"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Set sessions/credentials expiration date."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following snippet was taken from a J2EE web.xml deployment descriptor in which the session-timeout parameter is explicitly defined (the default value depends on the container). In this case the value is set to -1, which means that a session will never expire."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t<web-app>\n\t\t\t[...snipped...]\n\t\t\t<session-config>\n\t\t\t\t<session-timeout>-1</session-timeout>\n\t\t\t</session-config>\n\t</web-app>\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Other", "Note": "The lack of proper session expiration may improve the likely success of certain attacks. For example, an attacker may intercept a session ID, possibly via a network sniffer or Cross-site Scripting attack. Although short session expiration times do not help if a stolen token is immediately used, they will protect against ongoing replaying of the session ID. In another scenario, a user might access a web site from a shared computer (such as at a library, Internet cafe, or open work environment). Insufficient Session Expiration could allow an attacker to use the browser's back button to access web pages previously accessed by the victim."}], "Top25Examples": [{"Reference": "CVE-2022-24895", "Description": "Symfony is a PHP framework for web and console applications and a set of reusable PHP components. When authenticating users Symfony by default regenerates the session ID upon login, but preserves the rest of session attributes. Because this does not clear CSRF tokens upon login, this might enables same-site attackers to bypass the CSRF protection mechanism by performing an attack similar to a session-fixation. This issue has been fixed in the 4.4 branch. "}, {"Reference": "CVE-2022-43844", "Description": "IBM Robotic Process Automation for Cloud Pak 20.12 through 21.0.3 is vulnerable to broken access control. A user is not correctly redirected to the platform log out screen when logging out of IBM RPA for Cloud Pak. IBM X-Force ID: 239081."}, {"Reference": "CVE-2022-30277", "Description": "BD Synapsys\u2122, versions 4.20, 4.20 SR1, and 4.30, contain an insufficient session expiration vulnerability. If exploited, threat actors may be able to access, modify or delete sensitive information, including electronic protected health information (ePHI), protected health information (PHI) and personally identifiable information (PII)."}, {"Reference": "CVE-2021-29846", "Description": "IBM Security Guardium Insights 3.0 could allow an authenticated user to obtain sensitive information due to insufficient session expiration. IBM X-Force ID: 205256."}, {"Reference": "CVE-2021-3844", "Description": "Rapid7 InsightVM suffers from insufficient session expiration when an administrator performs a security relevant edit on an existing, logged on user. For example, if a user's password is changed by an administrator due to an otherwise unrelated credential leak, that user account's current session is still valid after the password change, potentially allowing the attacker who originally compromised the credential to remain logged in and able to cause further damage. This vulnerability is mitigated by the use of the Platform Login feature. This issue is related to CVE-2019-5638."}]}
{"ID": "614", "Name": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "319", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Technology", "Class": "Web Based", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Always set the secure attribute when the cookie should sent via HTTPS only."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The snippet of code below, taken from a servlet doPost() method, sets an accountID cookie (sensitive) without calling setSecure(true)."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tCookie c = new Cookie(ACCOUNT_ID, acctID);\n\tresponse.addCookie(c);\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2004-0462", "Description": "A product does not set the Secure attribute for sensitive cookies in HTTPS sessions, which could cause the user agent to send those cookies in plaintext over an HTTP session with the product.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0462"}, {"Reference": "CVE-2008-3663", "Description": "A product does not set the secure flag for the session cookie in an https session, which can cause the cookie to be sent in http requests and make it easier for remote attackers to capture this cookie.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3663"}, {"Reference": "CVE-2008-3662", "Description": "A product does not set the secure flag for the session cookie in an https session, which can cause the cookie to be sent in http requests and make it easier for remote attackers to capture this cookie.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3662"}, {"Reference": "CVE-2008-0128", "Description": "A product does not set the secure flag for a cookie in an https session, which can cause the cookie to be sent in http requests and make it easier for remote attackers to capture this cookie.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0128"}], "RelatedAttackPatterns": ["102"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-27764", "Description": "Cookie without HTTPONLY flag set. NUMBER cookie(s) was set without Secure or HTTPOnly flags. The images show the cookie with the missing flag. (WebUI)"}, {"Reference": "CVE-2022-24045", "Description": "A vulnerability has been identified in Desigo DXR2 (All versions < V01.21.142.5-22), Desigo PXC3 (All versions < V01.21.142.4-18), Desigo PXC4 (All versions < V02.20.142.10-10884), Desigo PXC5 (All versions < V02.20.142.10-10884). The application, after a successful login, sets the session cookie on the browser via client-side JavaScript code, without applying any security attributes (such as \u201cSecure\u201d, \u201cHttpOnly\u201d, or \u201cSameSite\u201d). Any attempts to browse the application via unencrypted HTTP protocol would lead to the transmission of all his/her session cookies in plaintext through the network. An attacker could then be able to sniff the network and capture sensitive information."}, {"Reference": "CVE-2021-37189", "Description": "An issue was discovered on Digi TransPort Gateway devices through 5.2.13.4. They do not set the Secure attribute for sensitive cookies in HTTPS sessions, which could cause the user agent to send those cookies in cleartext over an HTTP session."}, {"Reference": "CVE-2022-26157", "Description": "An issue was discovered in the web application in Cherwell Service Management (CSM) 10.2.3. The ASP.NET_Sessionid cookie is not protected by the Secure flag. This makes it prone to interception by an attacker if traffic is sent over unencrypted channels."}, {"Reference": "CVE-2022-27225", "Description": "Gradle Enterprise before 2021.4.3 relies on cleartext data transmission in some situations. It uses Keycloak for identity management services. During the sign-in process, Keycloak sets browser cookies that effectively provide remember-me functionality. For backwards compatibility with older Safari versions, Keycloak sets a duplicate of the cookie without the Secure attribute, which allows the cookie to be sent when accessing the location that cookie is set for via HTTP. This creates the potential for an attacker (with the ability to impersonate the Gradle Enterprise host) to capture the login session of a user by having them click an http:// link to the server, despite the real server requiring HTTPS."}, {"Reference": "CVE-2021-40642", "Description": "Textpattern CMS v4.8.7 and older vulnerability exists through Sensitive Cookie in HTTPS Session Without 'Secure' Attribute via textpattern/lib/txplib_misc.php. The secure flag is not set for txp_login session cookie in the application. If the secure flag is not set, then the cookie will be transmitted in clear-text if the user visits any HTTP URLs within the cookie's scope. An attacker may be able to induce this event by feeding a user suitable links, either directly or via another web site."}, {"Reference": "CVE-2022-21940", "Description": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute vulnerability in Johnson Controls System Configuration Tool (SCT) version 14 prior to 14.2.3 and version 15 prior to 15.0.3 could allow access to the cookie."}, {"Reference": "CVE-2022-3174", "Description": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute in GitHub repository ikus060/rdiffweb prior to 2.4.2."}, {"Reference": "CVE-2022-3250", "Description": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute in GitHub repository ikus060/rdiffweb prior to 2.4.6."}, {"Reference": "CVE-2022-3251", "Description": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute in GitHub repository ikus060/minarca prior to 4.2.2."}, {"Reference": "CVE-2022-4409", "Description": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute in GitHub repository thorsten/phpmyfaq prior to 3.1.9."}, {"Reference": "CVE-2022-4683", "Description": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute in GitHub repository usememos/memos prior to 0.9.0."}, {"Reference": "CVE-2022-26281", "Description": "BigAnt Server v5.6.06 was discovered to contain an incorrect access control issue."}, {"Reference": "CVE-2022-34307", "Description": "IBM CICS TX 11.1 does not set the secure attribute on authorization tokens or session cookies. Attackers may be able to get the cookie values by sending a http:// link to a user or by planting this link in a site the user goes to. The cookie will be sent to the insecure link and the attacker can then obtain the cookie value by snooping the traffic. IBM X-Force ID: 229436."}, {"Reference": "CVE-2021-40650", "Description": "In Connx Version 6.2.0.1269 (20210623), a cookie can be issued by the application and not have the secure flag set."}, {"Reference": "CVE-2022-47715", "Description": "In Last Yard 22.09.8-1, the cookie can be stolen via via unencrypted traffic."}]}
{"ID": "615", "Name": "Inclusion of Sensitive Information in Source Code Comments", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "While adding general comments is very useful, some programmers tend to leave important data, such as: filenames related to the web application, old links or links which were not meant to be browsed by users, old code fragments, etc.", "ExtendedDescription": "An attacker who finds these comments can map the application's structure and files, expose hidden parts of the site, and study the fragments of code to reverse engineer the application, which may help develop further attacks against the site.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "540", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "546", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Distribution"], "Description": "Remove comments which have sensitive information about the design/implementation of the application. Some of the comments may be exposed to the user and affect the security posture of the application."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following comment, embedded in a JSP, will be displayed in the resulting HTML output."}, {"Nature": "Bad", "Language": "JSP", "ExampleCode": "```\n\t<!-- FIXME: calling this with more than 30 args kills the JDBC server -->\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2007-6197", "Description": "Version numbers and internal hostnames leaked in HTML comments.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-6197"}, {"Reference": "CVE-2007-4072", "Description": "CMS places full pathname of server in HTML comment.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-4072"}, {"Reference": "CVE-2009-2431", "Description": "blog software leaks real username in HTML comment.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2431"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "616", "Name": "Incomplete Identification of Uploaded File Variables (PHP)", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The PHP application uses an old method for processing uploaded files by referencing the four global variables that are set for each file (e.g. $varname, $varname_size, $varname_name, $varname_type). These variables could be overwritten by attackers, causing the application to process unauthorized files.", "ExtendedDescription": "These global variables could be overwritten by POST requests, cookies, or other methods of populating or overwriting these variables. This could be used to read or process arbitrary files by providing values such as \"/etc/passwd\".", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "345", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "473", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "PHP", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Modify Files or Directories"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Use PHP 4 or later."}, {"Phase": ["Architecture and Design"], "Description": "If you must support older PHP versions, write your own version of is_uploaded_file() and run it against $HTTP_POST_FILES['userfile']))"}, {"Phase": ["Implementation"], "Description": "For later PHP versions, reference uploaded files using the $HTTP_POST_FILES or $_FILES variables, and use is_uploaded_file() or move_uploaded_file() to ensure that you are dealing with an uploaded file."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "As of 2006, the \"four globals\" method is probably in sharp decline, but older PHP applications could have this issue."}, {"BodyText": "In the \"four globals\" method, PHP sets the following 4 global variables (where \"varname\" is application-dependent):"}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\t$varname = name of the temporary file on local machine\n\t$varname_size = size of file\n\t$varname_name = original name of file provided by client\n\t$varname_type = MIME type of the file\n```"}]}, {"Entries": [{"IntroText": "\"The global $_FILES exists as of PHP 4.1.0 (Use $HTTP_POST_FILES instead if using an earlier version). These arrays will contain all the uploaded file information.\""}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\t$_FILES['userfile']['name'] - original filename from client\n\t$_FILES['userfile']['tmp_name'] - the temp filename of the file on the server\n```"}, {"BodyText": "** note: 'userfile' is the field name from the web form; this can vary."}]}], "ObservedExamples": [{"Reference": "CVE-2002-1460", "Description": "Forum does not properly verify whether a file was uploaded or if the associated variables were set by POST, allowing remote attackers to read arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1460"}, {"Reference": "CVE-2002-1759", "Description": "Product doesn't check if the variables for an upload were set by uploading the file, or other methods such as $_POST.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1759"}, {"Reference": "CVE-2002-1710", "Description": "Product does not distinguish uploaded file from other files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1710"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "617", "Name": "Reachable Assertion", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.", "ExtendedDescription": "\n\nWhile assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service.\n\n\nFor example, if a server handles multiple simultaneous connections, and an assert() occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "670", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "670", "ViewID": "1003", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant"}], "AlternateTerms": [{"Term": "assertion failure"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "An attacker that can trigger an assert statement can still lead to a denial of service if the relevant code can be triggered by an attacker, and if the scope of the assert() extends beyond the attacker's own session."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Make sensitive open/close operation non reachable by directly user-controlled data (e.g. open/close resources)"}, {"Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Perform input validation on user data."}], "DemonstrativeExamples": [{"ID": "DX-183", "Entries": [{"IntroText": "In the excerpt below, an AssertionError (an unchecked exception) is thrown if the user hasn't entered an email address in an HTML form."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tString email = request.getParameter(\"email_address\");\n\tassert email != null;\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2023-49286", "Description": "Chain: function in web caching proxy does not correctly check a return value (CWE-253) leading to a reachable assertion (CWE-617)", "Link": "https://www.cve.org/CVERecord?id=CVE-2023-49286"}, {"Reference": "CVE-2006-6767", "Description": "FTP server allows remote attackers to cause a denial of service (daemon abort) via crafted commands which trigger an assertion failure.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6767"}, {"Reference": "CVE-2006-6811", "Description": "Chat client allows remote attackers to cause a denial of service (crash) via a long message string when connecting to a server, which causes an assertion failure.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6811"}, {"Reference": "CVE-2006-5779", "Description": "Product allows remote attackers to cause a denial of service (daemon crash) via LDAP BIND requests with long authcid names, which triggers an assertion failure.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-5779"}, {"Reference": "CVE-2006-4095", "Description": "Product allows remote attackers to cause a denial of service (crash) via certain queries, which cause an assertion failure.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4095"}, {"Reference": "CVE-2006-4574", "Description": "Chain: security monitoring product has an off-by-one error that leads to unexpected length values, triggering an assertion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4574"}, {"Reference": "CVE-2004-0270", "Description": "Anti-virus product has assert error when line length is non-numeric.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0270"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-29203", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.SpaceToBatchND` (in all backends such as XLA and handwritten kernels) is vulnerable to an integer overflow: The result of this integer overflow is used to allocate the output tensor, hence we get a denial of service via a `CHECK`-failure (assertion failure), as in TFSA-2021-198. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-31620", "Description": "In libjpeg before 1.64, BitStream<false>::Get in bitstream.hpp has an assertion failure that may cause denial of service. This is related to out-of-bounds array access during arithmetically coded lossless scan or arithmetically coded sequential scan."}, {"Reference": "CVE-2022-31748", "Description": "Mozilla developers Gabriele Svelto, Timothy Nikkel, Randell Jesup, Jon Coppeard, and the Mozilla Fuzzing Team reported memory safety bugs present in Firefox 100. Some of these bugs showed evidence of memory corruption and we presume that with enough effort some of these could have been exploited to run arbitrary code. This vulnerability affects Firefox < 101."}, {"Reference": "CVE-2022-29228", "Description": "Envoy is a cloud-native high-performance proxy. In versions prior to 1.22.1 the OAuth filter would try to invoke the remaining filters in the chain after emitting a local response, which triggers an ASSERT() in newer versions and corrupts memory on earlier versions. continueDecoding() shouldn\u2019t ever be called from filters after a local reply has been sent. Users are advised to upgrade. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-31100", "Description": "rulex is a new, portable, regular expression language. When parsing untrusted rulex expressions, rulex may crash, possibly enabling a Denial of Service attack. This happens when the expression contains a multi-byte UTF-8 code point in a string literal or after a backslash, because rulex tries to slice into the code point and panics as a result. This is a security concern for you, if your service parses untrusted rulex expressions (expressions provided by an untrusted user), and your service becomes unavailable when the thread running rulex panics. The crashes are fixed in version **0.4.3**. Affected users are advised to update to this version. The only known workaround for this issue is to assume that regular expression parsing will panic and to add logic to catch panics."}, {"Reference": "CVE-2021-3454", "Description": "Truncated L2CAP K-frame causes assertion failure. Zephyr versions >= 2.4.0, >= v.2.50 contain Improper Handling of Length Parameter Inconsistency (CWE-130), Reachable Assertion (CWE-617). For more information, see https://github.com/zephyrproject-rtos/zephyr/security/advisories/GHSA-fx88-6c29-vrp3"}, {"Reference": "CVE-2022-29204", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.UnsortedSegmentJoin` does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack. The code assumes `num_segments` is a positive scalar but there is no validation. Since this value is used to allocate the output tensor, a negative value would result in a `CHECK`-failure (assertion failure), as per TFSA-2021-198. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-3488", "Description": "Processing of repeated responses to the same query, where both responses contain ECS pseudo-options, but where the first is broken in some way, can cause BIND to exit with an assertion failure. 'Broken' in this context is anything that would cause the resolver to reject the query response, such as a mismatch between query and answer name. This issue affects BIND 9 versions 9.11.4-S1 through 9.11.37-S1 and 9.16.8-S1 through 9.16.36-S1."}, {"Reference": "CVE-2022-36004", "Description": "TensorFlow is an open source platform for machine learning. When `tf.random.gamma` receives large input shape and rates, it gives a `CHECK` fail that can trigger a denial of service attack. We have patched the issue in GitHub commit 552bfced6ce4809db5f3ca305f60ff80dd40c5a3. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-48363", "Description": "In MPD before 0.23.8, as used on Automotive Grade Linux and other platforms, the PipeWire output plugin mishandles a Drain call in certain situations involving truncated files. Eventually there is an assertion failure in libmpdclient because libqtappfw passes in a NULL pointer."}, {"Reference": "CVE-2022-23572", "Description": "Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, TensorFlow can fail to specialize a type during shape inference. This case is covered by the `DCHECK` function however, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the `ValueOrDie` line. This results in an assertion failure as `ret` contains an error `Status`, not a value. In the second case we also get a crash due to the assertion failure. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."}, {"Reference": "CVE-2022-23583", "Description": "Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that any binary op would trigger `CHECK` failures. This occurs when the protobuf part corresponding to the tensor arguments is modified such that the `dtype` no longer matches the `dtype` expected by the op. In that case, calling the templated binary operator for the binary op would receive corrupted data, due to the type confusion involved. If `Tin` and `Tout` don't match the type of data in `out` and `input_*` tensors then `flat<*>` would interpret it wrongly. In most cases, this would be a silent failure, but we have noticed scenarios where this results in a `CHECK` crash, hence a denial of service. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."}, {"Reference": "CVE-2022-26446", "Description": "In Modem 4G RRC, there is a possible system crash due to improper input validation. This could lead to remote denial of service, when concatenating improper SIB12 (CMAS message), with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: MOLY00867883; Issue ID: ALPS07274118."}, {"Reference": "CVE-2021-44354", "Description": "Multiple denial of service vulnerabilities exist in the cgiserver.cgi JSON command parser functionality of Reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44355", "Description": "Multiple denial of service vulnerabilities exist in the cgiserver.cgi JSON command parser functionality of Reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44356", "Description": "Multiple denial of service vulnerabilities exist in the cgiserver.cgi JSON command parser functionality of Reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44357", "Description": "Multiple denial of service vulnerabilities exist in the cgiserver.cgi JSON command parser functionality of Reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44358", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetRec param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44359", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetCrop param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44360", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetNorm param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44361", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. Set3G param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44362", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetCloudSchedule param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44363", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetPush param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44364", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetWifi param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44365", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetDevName param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44366", "Description": "Multiple denial of service vulnerabilities exist in the cgiserver.cgi JSON command parser functionality of Reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44367", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetUpnp param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44368", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetNetPort param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44369", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetNtp param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44370", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetFtp param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44371", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetEmail param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44372", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetLocalLink param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44373", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetAutoFocus param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44374", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetMask param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44375", "Description": "Multiple denial of service vulnerabilities exist in the cgiserver.cgi JSON command parser functionality of Reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44376", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetIsp param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44377", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetImage param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44378", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetEnc param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44379", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetAutoMaint param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44380", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetTime param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44381", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetPowerLed param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44382", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot.SetIrLights param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44383", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetAutoUpgrade param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44384", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetPtzTattern param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44385", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetPtzSerial param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44386", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetPtzPatrol param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44387", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. SetPtzPreset param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44388", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. Login param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44389", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. GetAbility param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44390", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. Format param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44391", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. GetEnc param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44392", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. GetImage param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44393", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. GetIsp param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44394", "Description": "Multiple denial of service vulnerabilities exist in the cgiserver.cgi JSON command parser functionality of Reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44395", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. GetMask param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44396", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. Preview param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44397", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. rtmp=start param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44398", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. rtmp=stop param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44399", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. GetPtzPreset param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44400", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. GetPtzPatrol param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44401", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. PtzCtrl param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44402", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. GetPtzSerial param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44403", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. GetPtzTattern param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44404", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. GetZoomFocus param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44405", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. StartZoomFocus param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44406", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. GetAutoFocus param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44407", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. TestEmail param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44408", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. TestFtp param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44409", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. TestWifi param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44410", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. UpgradePrepare param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44411", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. Search param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44412", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. GetRec param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44413", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. AddUser param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44414", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. DelUser param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44415", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. ModifyUser param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44416", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. Disconnect param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44417", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. GetAlarm param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44418", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. GetMdState param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-44419", "Description": "A denial of service vulnerability exists in the cgiserver.cgi JSON command parser functionality of reolink RLC-410W v3.0.0.136_20121102. A specially-crafted HTTP request can lead to a reboot. GetMdAlarm param is not object. An attacker can send an HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2022-29191", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.GetSessionTensor` does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-29192", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.QuantizeAndDequantizeV4Grad` does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-29193", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.TensorSummaryV2` does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-29194", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.DeleteSessionTensor` does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-41899", "Description": "TensorFlow is an open source platform for machine learning. Inputs `dense_features` or `example_state_data` not of rank 2 will trigger a `CHECK` fail in `SdcaOptimizer`. We have patched the issue in GitHub commit 80ff197d03db2a70c6a111f97dcdacad1b0babfa. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range."}, {"Reference": "CVE-2022-41901", "Description": "TensorFlow is an open source platform for machine learning. An input `sparse_matrix` that is not a matrix with a shape with rank 0 will trigger a `CHECK` fail in `tf.raw_ops.SparseMatrixNNZ`. We have patched the issue in GitHub commit f856d02e5322821aad155dad9b3acab1e9f5d693. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range."}, {"Reference": "CVE-2022-41908", "Description": "TensorFlow is an open source platform for machine learning. An input `token` that is not a UTF-8 bytestring will trigger a `CHECK` fail in `tf.raw_ops.PyFunc`. We have patched the issue in GitHub commit 9f03a9d3bafe902c1e6beb105b2f24172f238645. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range."}, {"Reference": "CVE-2021-46784", "Description": "In Squid 3.x through 3.5.28, 4.x through 4.17, and 5.x before 5.6, due to improper buffer management, a Denial of Service can occur when processing long Gopher server responses."}, {"Reference": "CVE-2022-29212", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, certain TFLite models that were created using TFLite model converter would crash when loaded in the TFLite interpreter. The culprit is that during quantization the scale of values could be greater than 1 but code was always assuming sub-unit scaling. Thus, since code was calling `QuantizeMultiplierSmallerThanOneExp`, the `TFLITE_CHECK_LT` assertion would trigger and abort the process. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-29195", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.StagePeek` does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack. The code assumes `index` is a scalar but there is no validation for this before accessing its value. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-29196", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.Conv3DBackpropFilterV2` does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack. The code does not validate that the `filter_sizes` argument is a vector. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-29197", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.UnsortedSegmentJoin` does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack. The code assumes `num_segments` is a scalar but there is no validation for this before accessing its value. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-29198", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.SparseTensorToCSRSparseMatrix` does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack. The code assumes `dense_shape` is a vector and `indices` is a matrix (as part of requirements for sparse tensors) but there is no validation for this. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-29199", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.LoadAndRemapMatrix does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack. The code assumes `initializing_values` is a vector but there is no validation for this before accessing its value. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-29200", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.LSTMBlockCell` does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack. The code does not validate the ranks of any of the arguments to this API call. This results in `CHECK`-failures when the elements of the tensor are accessed. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-29213", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the `tf.compat.v1.signal.rfft2d` and `tf.compat.v1.signal.rfft3d` lack input validation and under certain condition can result in crashes (due to `CHECK`-failures). Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}]}
{"ID": "618", "Name": "Exposed Unsafe ActiveX Method", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "An ActiveX control is intended for use in a web browser, but it exposes dangerous methods that perform actions that are outside of the browser's security model (e.g. the zone or domain).", "ExtendedDescription": "ActiveX controls can exercise far greater control over the operating system than typical Java or javascript. Exposed methods can be subject to various vulnerabilities, depending on the implemented behaviors of those methods, and whether input validation is performed on the provided arguments. If there is no integrity checking or origin validation, this method could be invoked by attackers.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "749", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Other"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "If you must expose a method, make sure to perform input validation on all arguments, and protect against all possible vulnerabilities."}, {"Phase": ["Architecture and Design"], "Description": "Use code signing, although this does not protect against any weaknesses that are already in the control."}, {"Phase": ["Architecture and Design", "System Configuration"], "Description": "Where possible, avoid marking the control as safe for scripting."}], "ObservedExamples": [{"Reference": "CVE-2007-1120", "Description": "download a file to arbitrary folders.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1120"}, {"Reference": "CVE-2006-6838", "Description": "control downloads and executes a url in a parameter", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6838"}, {"Reference": "CVE-2007-0321", "Description": "resultant buffer overflow", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0321"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "619", "Name": "Dangling Database Cursor ('Cursor Injection')", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "If a database cursor is not closed properly, then it could become accessible to other users while retaining the same privileges that were originally assigned, leaving the cursor \"dangling.\"", "ExtendedDescription": "For example, an improper dangling cursor could arise from unhandled exceptions. The impact of the issue depends on the cursor's role, but SQL injection attacks are commonly possible.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "402", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary", "Description": "This could be primary when the programmer never attempts to close the cursor when finished with it."}, {"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "SQL", "Prevalence": "Undetermined"}], "BackgroundDetails": ["A cursor is a feature in Oracle PL/SQL and other languages that provides a handle for executing and accessing the results of SQL queries."], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "This issue is currently reported for unhandled exceptions, but it is theoretically possible any time the programmer does not close the cursor at the proper time."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Application Data", "Modify Application Data"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Close cursors immediately after access to them is complete. Ensure that you close cursors if exceptions occur."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "62", "Name": "UNIX Hard Link", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product, when opening a file or directory, does not sufficiently account for when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.", "ExtendedDescription": "Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. /etc/passwd). When the process opens the file, the attacker can assume the privileges of that process.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "59", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Unix", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Modify Files or Directories"]}], "PotentialMitigations": [{"MitigationID": "MIT-48.1", "Phase": ["Architecture and Design"], "Strategy": "Separation of Privilege", "Description": "\n\nFollow the principle of least privilege when assigning access rights to entities in a software system.\n\n\nDenying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.\n"}], "ObservedExamples": [{"Reference": "CVE-2001-1494", "Description": "Hard link attack, file overwrite; interesting because program checks against soft links", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1494"}, {"Reference": "CVE-2002-0793", "Description": "Hard link and possibly symbolic link following vulnerabilities in embedded operating system allow local users to overwrite arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0793"}, {"Reference": "CVE-2003-0578", "Description": "Server creates hard links and unlinks files as root, which allows local users to gain privileges by deleting and overwriting arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0578"}, {"Reference": "CVE-1999-0783", "Description": "Operating system allows local users to conduct a denial of service by creating a hard link from a device special file to a file on an NFS file system.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0783"}, {"Reference": "CVE-2004-1603", "Description": "Web hosting manager follows hard links, which allows local users to read or modify arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1603"}, {"Reference": "CVE-2004-1901", "Description": "Package listing system allows local users to overwrite arbitrary files via a hard link attack on the lockfiles.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1901"}, {"Reference": "CVE-2005-0342", "Description": "The Finder in Mac OS X and earlier allows local users to overwrite arbitrary files and gain privileges by creating a hard link from the .DS_Store file to an arbitrary file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0342"}, {"Reference": "CVE-2005-1111", "Description": "Hard link race condition", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1111"}, {"Reference": "CVE-2021-21272", "Description": "\"Zip Slip\" vulnerability in Go-based Open Container Initiative (OCI) registries product allows writing arbitrary files outside intended directory via symbolic links or hard links in a gzipped tarball.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-21272"}, {"Reference": "CVE-2003-1366", "Description": "setuid root tool allows attackers to read secret data by replacing a temp file with a hard link to a sensitive file", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1366"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "620", "Name": "Unverified Password Change", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.", "ExtendedDescription": "This could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1390", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}, {"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism", "Gain Privileges or Assume Identity"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "When prompting for a password change, force the user to provide the original password in addition to the new password."}, {"Phase": ["Architecture and Design"], "Description": "Do not use \"forgotten password\" functionality. But if you must, ensure that you are only providing information to the actual user, e.g. by using an email address or challenge question that the legitimate user already provided in the past; do not allow the current user to change this identity information until the correct password has been provided."}], "DemonstrativeExamples": [{"ID": "DX-56", "Entries": [{"IntroText": "This code changes a user's password."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\t$user = $_GET['user'];\n\t$pass = $_GET['pass'];\n\t$checkpass = $_GET['checkpass'];\n\tif ($pass == $checkpass) {\n\t\tSetUserPassword($user, $pass);\n\t}\n```"}, {"BodyText": "While the code confirms that the requesting user typed the same new password twice, it does not confirm that the user requesting the password change is the same user whose password will be changed. An attacker can request a change of another user's password and gain control of the victim's account."}]}], "ObservedExamples": [{"Reference": "CVE-2007-0681", "Description": "Web app allows remote attackers to change the passwords of arbitrary users without providing the original password, and possibly perform other unauthorized actions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0681"}, {"Reference": "CVE-2000-0944", "Description": "Web application password change utility doesn't check the original password.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0944"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-21935", "Description": "A vulnerability in Metasys ADS/ADX/OAS 10 versions prior to 10.1.5 and Metasys ADS/ADX/OAS 11 versions prior to 11.0.2 allows unverified password change."}, {"Reference": "CVE-2022-27484", "Description": "A unverified password change in Fortinet FortiADC version 6.2.0 through 6.2.3, 6.1.x, 6.0.x, 5.x.x allows an authenticated attacker to bypass the Old Password check in the password change form via a crafted HTTP request."}, {"Reference": "CVE-2022-3152", "Description": "Unverified Password Change in GitHub repository phpfusion/phpfusion prior to 9.10.20."}, {"Reference": "CVE-2022-32744", "Description": "A flaw was found in Samba. The KDC accepts kpasswd requests encrypted with any key known to it. By encrypting forged kpasswd requests with its own key, a user can change other users' passwords, enabling full domain takeover."}, {"Reference": "CVE-2022-21934", "Description": "Under certain circumstances an authenticated user could lock other users out of the system or take over their accounts in Metasys ADS/ADX/OAS server 10 versions prior to 10.1.5 and Metasys ADS/ADX/OAS server 11 versions prior to 11.0.2."}, {"Reference": "CVE-2022-24551", "Description": "A flaw was found in StarWind Stack. The endpoint for setting a new password doesn\u2019t check the current username and old password. An attacker could reset any local user password (including system/administrator user) using any available user This affects StarWind SAN and NAS v0.2 build 1633."}, {"Reference": "CVE-2022-0862", "Description": "A lack of password change protection vulnerability in a depreciated API of McAfee Enterprise ePolicy Orchestrator (ePO) prior to 5.10 Update 13 allows a remote attacker to change the password of a compromised session without knowing the existing user's password. This functionality was removed from the User Interface in ePO 10 and the API has now been disabled. Other protection is in place to reduce the likelihood of this being successful through sending a link to a logged in user."}]}
{"ID": "621", "Name": "Variable Extraction Error", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses external input to determine the names of variables into which information is extracted, without verifying that the names of the specified variables are valid. This could cause the program to overwrite unintended variables.", "ExtendedDescription": "\n\nFor example, in PHP, extraction can be used to provide functionality similar to register_globals, a dangerous functionality that is frequently disabled in production systems. Calling extract() or import_request_variables() without the proper arguments could allow arbitrary global variables to be overwritten, including superglobals.\n\n\nSimilar functionality is possible in other interpreted languages, including custom languages.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "914", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "471", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "PHP", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Variable overwrite"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Modify Application Data"], "Note": "An attacker could modify sensitive data or program variables."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Use allowlists of variable names that can be extracted."}, {"Phase": ["Implementation"], "Description": "Consider refactoring your code to avoid extraction routines altogether."}, {"Phase": ["Implementation"], "Description": "In PHP, call extract() with options such as EXTR_SKIP and EXTR_PREFIX_ALL; call import_request_variables() with a prefix argument. Note that these capabilities are not present in all PHP versions."}], "DemonstrativeExamples": [{"ID": "DX-107", "Entries": [{"IntroText": "This code uses the credentials sent in a POST request to login a user."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n```\n//Log user in, and set $isAdmin to true if user is an administrator* \n\t\n\tfunction login($user,$pass){\n\t```\n\t\t$query = buildQuery($user,$pass);\n\t\tmysql_query($query);\n\t\tif(getUserRole($user) == \"Admin\"){\n\t\t\t$isAdmin = true;\n\t\t}\n\t}\n\t$isAdmin = false;\n\textract($_POST);\n\tlogin(mysql_real_escape_string($user),mysql_real_escape_string($pass));\n```"}, {"BodyText": "The call to extract() will overwrite the existing values of any variables defined previously, in this case $isAdmin. An attacker can send a POST request with an unexpected third value \"isAdmin\" equal to \"true\", thus gaining Admin privileges."}]}], "ObservedExamples": [{"Reference": "CVE-2006-7135", "Description": "extract issue enables file inclusion", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-7135"}, {"Reference": "CVE-2006-7079", "Description": "Chain: PHP app uses extract for register_globals compatibility layer (CWE-621), enabling path traversal (CWE-22)", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-7079"}, {"Reference": "CVE-2007-0649", "Description": "extract() buried in include files makes post-disclosure analysis confusing; original report had seemed incorrect.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0649"}, {"Reference": "CVE-2006-6661", "Description": "extract() enables static code injection", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6661"}, {"Reference": "CVE-2006-2828", "Description": "import_request_variables() buried in include files makes post-disclosure analysis confusing", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-2828"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "Probably under-reported for PHP. Seems under-studied for other interpreted languages."}]}
{"ID": "622", "Name": "Improper Validation of Function Hook Arguments", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product adds hooks to user-accessible API functions, but it does not properly validate the arguments. This could lead to resultant vulnerabilities.", "ExtendedDescription": "Such hooks can be used in defensive software that runs with privileges, such as anti-virus or firewall, which hooks kernel calls. When the arguments are not validated, they could be used to bypass the protection scheme or attack the product itself.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "20", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Ensure that all arguments are verified, as defined by the API you are protecting."}, {"Phase": ["Architecture and Design"], "Description": "Drop privileges before invoking such functions, if possible."}], "ObservedExamples": [{"Reference": "CVE-2007-0708", "Description": "DoS in firewall using standard Microsoft functions", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0708"}, {"Reference": "CVE-2006-7160", "Description": "DoS in firewall using standard Microsoft functions", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-7160"}, {"Reference": "CVE-2007-1376", "Description": "function does not verify that its argument is the proper type, leading to arbitrary memory write", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1376"}, {"Reference": "CVE-2007-1220", "Description": "invalid syscall arguments bypass code execution limits", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1220"}, {"Reference": "CVE-2006-4541", "Description": "DoS in IDS via NULL argument", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4541"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "623", "Name": "Unsafe ActiveX Control Marked Safe For Scripting", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "An ActiveX control is intended for restricted use, but it has been marked as safe-for-scripting.", "ExtendedDescription": "This might allow attackers to use dangerous functionality via a web page that accesses the control, which can lead to different resultant vulnerabilities, depending on the control's behavior.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "267", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "618", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "During development, do not mark it as safe for scripting."}, {"Phase": ["System Configuration"], "Description": "After distribution, you can set the kill bit for the control so that it is not accessible from Internet Explorer."}], "ObservedExamples": [{"Reference": "CVE-2007-0617", "Description": "control allows attackers to add malicious email addresses to bypass spam limits", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0617"}, {"Reference": "CVE-2007-0219", "Description": "web browser uses certain COM objects as ActiveX", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0219"}, {"Reference": "CVE-2006-6510", "Description": "kiosk allows bypass to read files", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6510"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "624", "Name": "Executable Regular Expression Error", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses a regular expression that either (1) contains an executable component with user-controlled inputs, or (2) allows a user to enable execution by inserting pattern modifiers.", "ExtendedDescription": "Case (2) is possible in the PHP preg_replace() function, and possibly in other languages when a user-controlled input is inserted into a string that is later parsed as a regular expression.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "77", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "77", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "77", "ViewID": "1340", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "PHP", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Perl", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "The regular expression feature in some languages allows inputs to be quoted or escaped before insertion, such as \\Q and \\E in Perl."}], "ObservedExamples": [{"Reference": "CVE-2006-2059", "Description": "Executable regexp in PHP by inserting \"e\" modifier into first argument to preg_replace", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-2059"}, {"Reference": "CVE-2005-3420", "Description": "Executable regexp in PHP by inserting \"e\" modifier into first argument to preg_replace", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3420"}, {"Reference": "CVE-2006-2878", "Description": "Complex curly syntax inserted into the replacement argument to PHP preg_replace(), which uses the \"/e\" modifier", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-2878"}, {"Reference": "CVE-2006-2908", "Description": "Function allows remote attackers to execute arbitrary PHP code via the username field, which is used in a preg_replace function call with a /e (executable) modifier.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-2908"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "Under-studied. The existing PHP reports are limited to highly skilled researchers, but there are few examples for other languages. It is suspected that this is under-reported for all languages. Usability factors might make it more prevalent in PHP, but this theory has not been investigated."}]}
{"ID": "625", "Name": "Permissive Regular Expression", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product uses a regular expression that does not sufficiently restrict the set of allowed values.", "ExtendedDescription": "\n\nThis effectively causes the regexp to accept substrings that match the pattern, which produces a partial comparison to the target. In some cases, this can lead to other weaknesses. Common errors include:\n\n\n  - not identifying the beginning and end of the target string\n\n  - using wildcards instead of acceptable character ranges\n\n  - others\n\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "185", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "187", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "184", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "183", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Perl", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "PHP", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "This problem is frequently found when the regular expression is used in input validation or security features such as authentication."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "When applicable, ensure that the regular expression marks beginning and ending string patterns, such as \"/^string$/\" for Perl."}], "DemonstrativeExamples": [{"ID": "DX-37", "Entries": [{"IntroText": "The following code takes phone numbers as input, and uses a regular expression to reject invalid phone numbers."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\t$phone = GetPhoneNumber();\n\tif ($phone =~ /\\d+-\\d+/) {\n```\n# looks like it only has hyphens and digits* \n\t\tsystem(\"lookup-phone $phone\");} \n\telse {\n\t```\n\t\terror(\"malformed number!\");\n\t}\n```"}, {"BodyText": "An attacker could provide an argument such as: \"; ls -l ; echo 123-456\" This would pass the check, since \"123-456\" is sufficient to match the \"\\d+-\\d+\" portion of the regular expression."}]}, {"ID": "DX-154", "Entries": [{"IntroText": "This code uses a regular expression to validate an IP string prior to using it in a call to the \"ping\" command."}, {"Nature": "Bad", "Language": "Python", "ExampleCode": "```\n\t import subprocess\n\t import re\n\t def validate_ip_regex(ip: str):\n\t\t ip_validator = re.compile(r\"((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}\")\n\t\t if ip_validator.match(ip):\n\t\t\t return ip\n\t\t else:\n\t\t\t raise ValueError(\"IP address does not match valid pattern.\")\n\t def run_ping_regex(ip: str):\n\t\t validated = validate_ip_regex(ip)\n```\n# The ping command treats zero-prepended IP addresses as octal* \n\t\t result = subprocess.call([\"ping\", validated])\n\t\t print(result)"}, {"BodyText": "Since the regular expression does not have anchors (CWE-777), i.e. is unbounded without ^ or $ characters, then prepending a 0 or 0x to the beginning of the IP address will still result in a matched regex pattern. Since the ping command supports octal and hex prepended IP addresses, it will use the unexpectedly valid IP address (CWE-1389). For example, \"0x63.63.63.63\" would be considered equivalent to \"99.63.63.63\". As a result, the attacker could potentially ping systems that the attacker cannot reach directly."}]}], "ObservedExamples": [{"Reference": "CVE-2021-22204", "Description": "Chain: regex in EXIF processor code does not correctly determine where a string ends (CWE-625), enabling eval injection (CWE-95), as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-22204"}, {"Reference": "CVE-2006-1895", "Description": "\".*\" regexp leads to static code injection", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-1895"}, {"Reference": "CVE-2002-2175", "Description": "insertion of username into regexp results in partial comparison, causing wrong database entry to be updated when one username is a substring of another.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2175"}, {"Reference": "CVE-2006-4527", "Description": "regexp intended to verify that all characters are legal, only checks that at least one is legal, enabling file inclusion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4527"}, {"Reference": "CVE-2005-1949", "Description": "Regexp for IP address isn't anchored at the end, allowing appending of shell metacharacters.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1949"}, {"Reference": "CVE-2002-2109", "Description": "Regexp isn't \"anchored\" to the beginning or end, which allows spoofed values that have trusted values as substrings.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2109"}, {"Reference": "CVE-2006-6511", "Description": "regexp in .htaccess file allows access of files whose names contain certain substrings", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6511"}, {"Reference": "CVE-2006-6629", "Description": "allow load of macro files whose names contain certain substrings.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6629"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-42975", "Description": "socket/transport.ex in Phoenix before 1.6.14 mishandles check_origin wildcarding. NOTE: LiveView applications are unaffected by default because of the presence of a LiveView CSRF token."}, {"Reference": "CVE-2022-42717", "Description": "An issue was discovered in Hashicorp Packer before 2.3.1. The recommended sudoers configuration for Vagrant on Linux is insecure. If the host has been configured according to this documentation, non-privileged users on the host can leverage a wildcard in the sudoers configuration to execute arbitrary commands as root."}, {"Reference": "CVE-2021-35368", "Description": "OWASP ModSecurity Core Rule Set 3.1.x before 3.1.2, 3.2.x before 3.2.1, and 3.3.x before 3.3.2 is affected by a Request Body Bypass via a trailing pathname."}]}
{"ID": "626", "Name": "Null Byte Interaction Error (Poison Null Byte)", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not properly handle null bytes or NUL characters when passing data between different representations or components.", "ExtendedDescription": "\n\nA null byte (NUL character) can have different meanings across representations or languages. For example, it is a string terminator in standard C libraries, but Perl and PHP strings do not treat it as a terminator. When two representations are crossed - such as when Perl or PHP invokes underlying C functionality - this can produce an interaction error with unexpected results. Similar issues have been reported for ASP. Other interpreters written in C might also be affected.\n\n\nThe poison null byte is frequently useful in path traversal attacks by terminating hard-coded extensions that are added to a filename. It can play a role in regular expression processing in PHP.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "147", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "436", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "PHP", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Perl", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "ASP.NET", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Remove null bytes from all incoming strings."}], "ObservedExamples": [{"Reference": "CVE-2005-4155", "Description": "NUL byte bypasses PHP regular expression check", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-4155"}, {"Reference": "CVE-2005-3153", "Description": "inserting SQL after a NUL byte bypasses allowlist regexp, enabling SQL injection", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3153"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Terminology", "Note": "Current usage of \"poison null byte\" is typically related to this C/Perl/PHP interaction error, but the original term in 1998 was applied to an off-by-one buffer overflow involving a null byte."}, {"Type": "Research Gap", "Note": "There are not many CVE examples, because the poison NULL byte is a design limitation, which typically is not included in CVE by itself. It is typically used as a facilitator manipulation to widen the scope of potential attacks against other vulnerabilities."}], "Top25Examples": [{"Reference": "CVE-2022-25219", "Description": "A null byte interaction error has been discovered in the code that the telnetd_startup daemon uses to construct a pair of ephemeral passwords that allow a user to spawn a telnet service on the router, and to ensure that the telnet service persists upon reboot. By means of a crafted exchange of UDP packets, an unauthenticated attacker on the local network can leverage this null byte interaction error in such a way as to make those ephemeral passwords predictable (with 1-in-94 odds). Since the attacker must manipulate data processed by the OpenSSL function RSA_public_decrypt(), successful exploitation of this vulnerability depends on the use of an unpadded RSA cipher (CVE-2022-25218)."}]}
{"ID": "627", "Name": "Dynamic Variable Evaluation", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "In a language where the user can influence the name of a variable at runtime, if the variable names are not controlled, an attacker can read or write to arbitrary variables, or access arbitrary functions.", "ExtendedDescription": "The resultant vulnerabilities depend on the behavior of the application, both at the crossover point and in any control/data flow that is reachable by the related variables or functions.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "914", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "183", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "PHP", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Perl", "Prevalence": "Undetermined"}], "BackgroundDetails": ["Many interpreted languages support the use of a \"$$varname\" construct to set a variable whose name is specified by the $varname variable. In PHP, these are referred to as \"variable variables.\" Functions might also be invoked using similar syntax, such as $$funcname(arg1, arg2)."], "AlternateTerms": [{"Term": "Dynamic evaluation"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Modify Application Data", "Execute Unauthorized Code or Commands"], "Note": "An attacker could gain unauthorized access to internal program variables and execute arbitrary code."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Strategy": "Refactoring", "Description": "Refactor the code to avoid dynamic variable evaluation whenever possible."}, {"Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Use only allowlists of acceptable variable or function names."}, {"Phase": ["Implementation"], "Description": "For function names, ensure that you are only calling functions that accept the proper number of arguments, to avoid unexpected null arguments."}], "ObservedExamples": [{"Reference": "CVE-2009-0422", "Description": "Chain: Dynamic variable evaluation allows resultant remote file inclusion and path traversal.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0422"}, {"Reference": "CVE-2007-2431", "Description": "Chain: dynamic variable evaluation in PHP program used to modify critical, unexpected $_SERVER variable for resultant XSS.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-2431"}, {"Reference": "CVE-2006-4904", "Description": "Chain: dynamic variable evaluation in PHP program used to conduct remote file inclusion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4904"}, {"Reference": "CVE-2006-4019", "Description": "Dynamic variable evaluation in mail program allows reading and modifying attachments and preferences of other users.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4019"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "Under-studied, probably under-reported. Few researchers look for this issue; most public reports are for PHP, although other languages are affected. This issue is likely to grow in PHP as developers begin to implement functionality in place of register_globals."}]}
{"ID": "628", "Name": "Function Call with Incorrectly Specified Arguments", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses.", "ExtendedDescription": "\n\nThere are multiple ways in which this weakness can be introduced, including:\n\n\n  - the wrong variable or reference;\n\n  - an incorrect number of arguments;\n\n  - incorrect order of arguments;\n\n  - wrong type of arguments; or\n\n  - wrong value.\n\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "573", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary", "Description": "This is usually primary to other weaknesses, but it can be resultant if the function's API or function prototype changes."}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other", "Access Control"], "Impact": ["Quality Degradation", "Gain Privileges or Assume Identity"], "Note": "This weakness can cause unintended behavior and can lead to additional weaknesses such as allowing an attacker to gain unintended access to system resources."}], "DetectionMethods": [{"Method": "Other", "Description": "Since these bugs typically introduce incorrect behavior that is obvious to users, they are found quickly, unless they occur in rarely-tested code paths. Managing the correct number of arguments can be made more difficult in cases where format strings are used, or when variable numbers of arguments are supported."}], "PotentialMitigations": [{"Phase": ["Build and Compilation"], "Description": "Once found, these issues are easy to fix. Use code inspection tools and relevant compiler features to identify potential violations. Pay special attention to code that is not likely to be exercised heavily during QA."}, {"Phase": ["Architecture and Design"], "Description": "Make sure your API's are stable before you use them in production code."}], "DemonstrativeExamples": [{"ID": "DX-62", "Entries": [{"IntroText": "The following PHP method authenticates a user given a username/password combination but is called with the parameters in reverse order."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\tfunction authenticate($username, $password) {\n```\n// authenticate user* \n\t\t\t...}\n\t\n\tauthenticate($_POST['password'], $_POST['username']);"}]}, {"ID": "DX-63", "Entries": [{"IntroText": "This Perl code intends to record whether a user authenticated successfully or not, and to exit if the user fails to authenticate. However, when it calls ReportAuth(), the third argument is specified as 0 instead of 1, so it does not exit."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\tsub ReportAuth {\n\t\tmy ($username, $result, $fatal) = @_;\n\t\tPrintLog(\"auth: username=%s, result=%d\", $username, $result);\n\t\tif (($result ne \"success\") && $fatal) {\n\t\t\tdie \"Failed!\\n\";\n\t\t}\n\t}\n\tsub PrivilegedFunc\n\t{\n\t\tmy $result = CheckAuth($username);\n\t\tReportAuth($username, $result, 0);\n\t\tDoReallyImportantStuff();\n\t}\n```"}]}, {"ID": "DX-64", "Entries": [{"IntroText": "In the following Java snippet, the accessGranted() method is accidentally called with the static ADMIN_ROLES array rather than the user roles."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tprivate static final String[] ADMIN_ROLES = ...;\n\tpublic boolean void accessGranted(String resource, String user) {\n\t\tString[] userRoles = getUserRoles(user);\n\t\treturn accessGranted(resource, ADMIN_ROLES);\n\t}\n\tprivate boolean void accessGranted(String resource, String[] userRoles) {\n```\n// grant or deny access based on user roles* \n\t\t\t...}"}]}], "ObservedExamples": [{"Reference": "CVE-2006-7049", "Description": "The method calls the functions with the wrong argument order, which allows remote attackers to bypass intended access restrictions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-7049"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "636", "Name": "Not Failing Securely ('Failing Open')", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "When the product encounters an error condition or failure, its design requires it to fall back to a state that is less secure than other options that are available, such as selecting the weakest encryption algorithm or using the most permissive access control restrictions.", "ExtendedDescription": "By entering a less secure state, the product inherits the weaknesses associated with that state, making it easier to compromise. At the least, it causes administrators to have a false sense of security. This weakness typically occurs as a result of wanting to \"fail functional\" to minimize administration and support costs, instead of \"failing safe.\"", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "657", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "755", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "280", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "ICS/OT", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Failing Open"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"], "Note": "Intended access restrictions can be bypassed, which is often contradictory to what the product's administrator expects."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Subdivide and allocate resources and components so that a failure in one part does not affect the entire product."}], "DemonstrativeExamples": [{"ID": "DX-164", "Entries": [{"IntroText": "Switches may revert their functionality to that of hubs when the table used to map ARP information to the switch interface overflows, such as when under a spoofing attack. This results in traffic being broadcast to an eavesdropper, instead of being sent only on the relevant switch interface. To mitigate this type of problem, the developer could limit the number of ARP entries that can be recorded for a given switch interface, while other interfaces may keep functioning normally. Configuration options can be provided on the appropriate actions to be taken in case of a detected failure, but safe defaults should be used."}]}], "ObservedExamples": [{"Reference": "CVE-2007-5277", "Description": "The failure of connection attempts in a web browser resets DNS pin restrictions. An attacker can then bypass the same origin policy by rebinding a domain name to a different IP address. This was an attempt to \"fail functional.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-5277"}, {"Reference": "CVE-2006-4407", "Description": "Incorrect prioritization leads to the selection of a weaker cipher. Although it is not known whether this issue occurred in implementation or design, it is feasible that a poorly designed algorithm could be a factor.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4407"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Research Gap", "Note": "Since design issues are hard to fix, they are rarely publicly reported, so there are few CVE examples of this problem as of January 2008. Most publicly reported issues occur as the result of an implementation error instead of design, such as CVE-2005-3177 (Improper handling of large numbers of resources) or CVE-2005-2969 (inadvertently disabling a verification step, leading to selection of a weaker protocol)."}]}
{"ID": "637", "Name": "Unnecessary Complexity in Protection Mechanism (Not Using 'Economy of Mechanism')", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product uses a more complex mechanism than necessary, which could lead to resultant weaknesses when the mechanism is not correctly understood, modeled, configured, implemented, or used.", "ExtendedDescription": "Security mechanisms should be as simple as possible. Complex security mechanisms may engender partial implementations and compatibility problems, with resulting mismatches in assumptions and implemented security. A corollary of this principle is that data specifications should be as simple as possible, because complex data specifications result in complex validation code. Complex tasks and systems may also need to be guarded by complex security checks, so simple systems should be preferred.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "657", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Unnecessary Complexity"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Other"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Avoid complex security mechanisms when simpler ones would meet requirements. Avoid complex data models, and unnecessarily complex operations. Adopt architectures that provide guarantees, simplify understanding through elegance and abstraction, and that can be implemented similarly. Modularize, isolate and do not trust complex code, and apply other secure programming principles on these modules (e.g., least privilege) to mitigate vulnerabilities."}], "DemonstrativeExamples": [{"ID": "DX-165", "Entries": [{"IntroText": "The IPSEC specification is complex, which resulted in bugs, partial implementations, and incompatibilities between vendors."}]}, {"Entries": [{"IntroText": "HTTP Request Smuggling (CWE-444) attacks are feasible because there are not stringent requirements for how illegal or inconsistent HTTP headers should be handled. This can lead to inconsistent implementations in which a proxy or firewall interprets the same data stream as a different set of requests than the end points in that stream."}]}], "ObservedExamples": [{"Reference": "CVE-2007-6067", "Description": "Support for complex regular expressions leads to a resultant algorithmic complexity weakness (CWE-407).", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-6067"}, {"Reference": "CVE-2007-1552", "Description": "Either a filename extension and a Content-Type header could be used to infer the file type, but the developer only checks the Content-Type, enabling unrestricted file upload (CWE-434).", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1552"}, {"Reference": "CVE-2007-6479", "Description": "In Apache environments, a \"filename.php.gif\" can be redirected to the PHP interpreter instead of being sent as an image/gif directly to the user. Not knowing this, the developer only checks the last extension of a submitted filename, enabling arbitrary code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-6479"}, {"Reference": "CVE-2005-2148", "Description": "The developer cleanses the $_REQUEST superglobal array, but PHP also populates $_GET, allowing attackers to bypass the protection mechanism and conduct SQL injection attacks against code that uses $_GET.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2148"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}}
{"ID": "638", "Name": "Not Using Complete Mediation", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity's rights or privileges change over time.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "657", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "862", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability", "Access Control", "Other"], "Impact": ["Gain Privileges or Assume Identity", "Execute Unauthorized Code or Commands", "Bypass Protection Mechanism", "Read Application Data", "Other"], "Note": "A user might retain access to a critical resource even after privileges have been revoked, possibly allowing access to privileged functionality or sensitive information, depending on the role of the resource."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Invalidate cached privileges, file handles or descriptors, or other access credentials whenever identities, processes, policies, roles, capabilities or permissions change. Perform complete authentication checks before accepting, caching and reusing data, dynamic content and code (scripts). Avoid caching access control decisions as much as possible."}, {"Phase": ["Architecture and Design"], "Description": "Identify all possible code paths that might access sensitive resources. If possible, create and use a single interface that performs the access checks, and develop code standards that require use of this interface."}], "DemonstrativeExamples": [{"ID": "DX-166", "Entries": [{"IntroText": "When executable library files are used on web servers, which is common in PHP applications, the developer might perform an access check in any user-facing executable, and omit the access check from the library file itself. By directly requesting the library file (CWE-425), an attacker can bypass this access check."}]}, {"Entries": [{"IntroText": "When a developer begins to implement input validation for a web application, often the validation is performed in each area of the code that uses externally-controlled input. In complex applications with many inputs, the developer often misses a parameter here or a cookie there. One frequently-applied solution is to centralize all input validation, store these validated inputs in a separate data structure, and require that all access of those inputs must be through that data structure. An alternate approach would be to use an external input validation framework such as Struts, which performs the validation before the inputs are ever processed by the code."}]}], "ObservedExamples": [{"Reference": "CVE-2007-0408", "Description": "Server does not properly validate client certificates when reusing cached connections.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0408"}], "RelatedAttackPatterns": ["104"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}}
{"ID": "639", "Name": "Authorization Bypass Through User-Controlled Key", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.", "ExtendedDescription": "\n\nRetrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system.\n\n\nFor example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value.\n\n\nOne manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data.\n", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "863", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "863", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "284", "ViewID": "1340", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Insecure Direct Object Reference / IDOR", "Description": "The \"Insecure Direct Object Reference\" term, as described in the OWASP Top Ten, is broader than this CWE because it also covers path traversal (CWE-22). Within the context of vulnerability theory, there is a similarity between the OWASP concept and CWE-706: Use of Incorrectly-Resolved Name or Reference."}, {"Term": "Broken Object Level Authorization / BOLA", "Description": "BOLA is used in the 2019 OWASP API Security Top 10 and is said to be the same as IDOR."}, {"Term": "Horizontal Authorization", "Description": "\"Horizontal Authorization\" is used to describe situations in which two users have the same privilege level, but must be prevented from accessing each other's resources. This is fairly common when using key-based access to resources in a multi-user context."}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"], "Note": "Access control checks for specific user data or functionality can be bypassed."}, {"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "Horizontal escalation of privilege is possible (one user can view/modify information of another user)."}, {"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "Vertical escalation of privilege is possible if the user-controlled key is actually a flag that indicates administrator status, allowing the attacker to gain administrative access."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "For each and every data access, ensure that the user has sufficient privilege to access the record that is being requested."}, {"Phase": ["Architecture and Design", "Implementation"], "Description": "Make sure that the key that is used in the lookup of a specific user's record is not controllable externally by the user or that any tampering can be detected."}, {"Phase": ["Architecture and Design"], "Description": "Use encryption in order to make it more difficult to guess other legitimate values of the key or associate a digital signature with the key so that the server can verify that there has been no tampering."}], "DemonstrativeExamples": [{"ID": "DX-195", "Entries": [{"IntroText": "The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user."}, {"Nature": "Bad", "Language": "C#", "ExampleCode": "```\n\t...\n\t conn = new SqlConnection(_ConnectionString);\n\t conn.Open();\n\t int16 id = System.Convert.ToInt16(invoiceID.Text);\n\t SqlCommand query = new SqlCommand( \"SELECT * FROM invoices WHERE id = @id\", conn);\n\t query.Parameters.AddWithValue(\"@id\", id);\n\t SqlDataReader objReader = objCommand.ExecuteReader();\n\t ... \n```"}, {"BodyText": "The problem is that the developer has not considered all of the possible values of id. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker can bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user."}]}], "ObservedExamples": [{"Reference": "CVE-2021-36539", "Description": "An educational application does not appropriately restrict file IDs to a particular user. The attacker can brute-force guess IDs, indicating IDOR.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-36539"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-40579", "Description": "https://www.sourcecodester.com/ Online Enrollment Management System in PHP and PayPal Free Source Code 1.0 is affected by: Incorrect Access Control. The impact is: gain privileges (remote)."}, {"Reference": "CVE-2022-0731", "Description": "Improper Access Control (IDOR) in GitHub repository dolibarr/dolibarr prior to 16.0."}, {"Reference": "CVE-2022-0732", "Description": "The backend infrastructure shared by multiple mobile device monitoring services does not adequately authenticate or authorize API requests, creating an IDOR (Insecure Direct Object Reference) vulnerability."}, {"Reference": "CVE-2022-22331", "Description": "IBM SterlingPartner Engagement Manager 6.2.0 could allow a remote authenticated attacker to obtain sensitive information or modify user details caused by an insecure direct object vulnerability (IDOR). IBM X-Force ID: 219130."}, {"Reference": "CVE-2022-25336", "Description": "Ibexa DXP ezsystems/ezpublish-kernel 7.5.x before 7.5.26 and 1.3.x before 1.3.12 allows Insecure Direct Object Reference (IDOR) attacks against image files because the image path and filename can be correctly deduced."}, {"Reference": "CVE-2022-2824", "Description": "Authorization Bypass Through User-Controlled Key in GitHub repository openemr/openemr prior to 7.0.0.1. "}, {"Reference": "CVE-2022-30495", "Description": "In oretnom23 Automotive Shop Management System v1.0, the name id parameter is vulnerable to IDOR - Broken Access Control allowing attackers to change the admin password(vertical privilege escalation)"}, {"Reference": "CVE-2022-34770", "Description": "Tabit - sensitive information disclosure. Several APIs on the web system display, without authorization, sensitive information such as health statements, previous bills in a specific restaurant, alcohol consumption and smoking habits. Each of the described API\u2019s, has in its URL one or more MongoDB ID which is not so simple to enumerate. However, they each receive a \u2018tiny URL\u2019 in Tabit\u2019s domain, in the form of https://tbit.be/{suffix} with suffix being a 5 characters long string containing numbers, lower- and upper-case letters. It is not so simple to enumerate them all, but really easy to find some that work and lead to a personal endpoint. This is both an example of OWASP: API4 - rate limiting and OWASP: API1 - Broken object level authorization. Furthermore, the redirect URL disclosed the MongoDB IDs discussed above, and we could use them to query other endpoints disclosing more personal information. For example: The URL https://tabitisrael.co.il/online-reservations/health-statement?orgId={org_id}&healthStatementId={health_statement_id} is used to invite friends to fill a health statement before attending the restaurant. We can use the health_statement_id to access the https://tgm-api.tabit.cloud/health-statement/{health_statement_id} API which disclose medical information as well as id number."}, {"Reference": "CVE-2022-36202", "Description": "Doctor's Appointment System1.0 is vulnerable to Incorrect Access Control via edoc/patient/settings.php. The settings.php is affected by Broken Access Control (IDOR) via id= parameter."}, {"Reference": "CVE-2022-39945", "Description": "An improper access control vulnerability [CWE-284] in FortiMail 7.2.0, 7.0.0 through 7.0.3, 6.4 all versions, 6.2 all versions, 6.0 all versions may allow an authenticated admin user assigned to a specific domain to access and modify other domains information via insecure direct object references (IDOR)."}, {"Reference": "CVE-2022-42344", "Description": "Adobe Commerce versions 2.4.3-p2 (and earlier), 2.3.7-p3 (and earlier) and 2.4.4 (and earlier) are affected by an Incorrect Authorization vulnerability. An authenticated attacker can exploit this vulnerability to achieve information exposure and privilege escalation."}, {"Reference": "CVE-2021-43820", "Description": "Seafile is an open source cloud storage system. A sync token is used in Seafile file syncing protocol to authorize access to library data. To improve performance, the token is cached in memory in seaf-server. Upon receiving a token from sync client or SeaDrive client, the server checks whether the token exist in the cache. However, if the token exists in cache, the server doesn't check whether it's associated with the specific library in the URL. This vulnerability makes it possible to use any valid sync token to access data from any **known** library. Note that the attacker has to first find out the ID of a library which it has no access to. The library ID is a random UUID, which is not possible to be guessed. There are no workarounds for this issue."}, {"Reference": "CVE-2022-1949", "Description": "An access control bypass vulnerability found in 389-ds-base. That mishandling of the filter that would yield incorrect results, but as that has progressed, can be determined that it actually is an access control bypass. This may allow any remote unauthenticated user to issue a filter that allows searching for database items they do not have access to, including but not limited to potentially userPassword hashes and other sensitive data."}, {"Reference": "CVE-2022-29287", "Description": "Kentico CMS before 13.0.66 has an Insecure Direct Object Reference vulnerability. It allows an attacker with user management rights (default is Administrator) to export the user options of any user, even ones with higher privileges (like Global Administrators) than the current user. The exported XML contains every option of the exported user (even the hashed password)."}, {"Reference": "CVE-2022-1810", "Description": "Authorization Bypass Through User-Controlled Key in GitHub repository publify/publify prior to 9.2.9."}, {"Reference": "CVE-2022-22190", "Description": "An Improper Access Control vulnerability in the Juniper Networks Paragon Active Assurance Control Center allows an unauthenticated attacker to leverage a crafted URL to generate PDF reports, potentially containing sensitive configuration information. A feature was introduced in version 3.1 of the Paragon Active Assurance Control Center which allows users to selective share account data using a unique identifier. Knowing the proper format of the URL and the identifier of an existing object in an application it is possible to get access to that object without being logged in, even if the object is not shared, resulting in the opportunity for malicious exfiltration of user data. Note that the Paragon Active Assurance Control Center SaaS offering is not affected by this issue. This issue affects Juniper Networks Paragon Active Assurance version 3.1.0."}, {"Reference": "CVE-2022-22832", "Description": "An issue was discovered in Servisnet Tessa 0.0.2. Authorization data is available via an unauthenticated /data-service/users/ request."}, {"Reference": "CVE-2022-4505", "Description": "Authorization Bypass Through User-Controlled Key in GitHub repository openemr/openemr prior to 7.0.0.2. "}, {"Reference": "CVE-2022-23856", "Description": "An issue was discovered in Saviynt Enterprise Identity Cloud (EIC) 5.5 SP2.x. An attacker can enumerate users by changing the id parameter, such as for the ECM/maintenance/forgotpasswordstep1 URI."}, {"Reference": "CVE-2022-34775", "Description": "Tabit - Excessive data exposure. Another endpoint mapped by the tiny url, was one for reservation cancellation, containing the MongoDB ID of the reservation, and organization. This can be used to query the http://tgm-api.tabit.cloud/rsv/management/{reservationId}?organization={orgId} API which returns a lot of data regarding the reservation (OWASP: API3): Name, mail, phone number, the number of visits of the user to this specific restaurant, the money he spent there, the money he spent on alcohol, whether he left a deposit etc. This information can easily be used for a phishing attack."}, {"Reference": "CVE-2021-4142", "Description": "The Candlepin component of Red Hat Satellite was affected by an improper authentication flaw. Few factors could allow an attacker to use the SCA (simple content access) certificate for authentication with Candlepin."}, {"Reference": "CVE-2021-44949", "Description": "glFusion CMS 1.7.9 is affected by an access control vulnerability via /public_html/users.php."}, {"Reference": "CVE-2022-4686", "Description": "Authorization Bypass Through User-Controlled Key in GitHub repository usememos/memos prior to 0.9.0."}, {"Reference": "CVE-2022-31131", "Description": "Nextcloud mail is a Mail app for the Nextcloud home server product. Versions of Nextcloud mail prior to 1.12.2 were found to be missing user account ownership checks when performing tasks related to mail attachments. Attachments may have been exposed to incorrect system users. It is recommended that the Nextcloud Mail app is upgraded to 1.12.2. There are no known workarounds for this issue. ### Workarounds No workaround available ### References * [Pull request](https://github.com/nextcloud/mail/pull/6600) * [HackerOne](https://hackerone.com/reports/1579820) ### For more information If you have any questions or comments about this advisory: * Create a post in [nextcloud/security-advisories](https://github.com/nextcloud/security-advisories/discussions) * Customers: Open a support ticket at [support.nextcloud.com](https://support.nextcloud.com)"}, {"Reference": "CVE-2022-1245", "Description": "A privilege escalation flaw was found in the token exchange feature of keycloak. Missing authorization allows a client application holding a valid access token to exchange tokens for any target client by passing the client_id of the target. This could allow a client to gain unauthorized access to additional services."}, {"Reference": "CVE-2022-2034", "Description": "The Sensei LMS WordPress plugin before 4.5.0 does not have proper permissions set in one of its REST endpoint, allowing unauthenticated users to access private messages sent to teachers"}, {"Reference": "CVE-2022-21713", "Description": "Grafana is an open-source platform for monitoring and observability. Affected versions of Grafana expose multiple API endpoints which do not properly handle user authorization. `/teams/:teamId` will allow an authenticated attacker to view unintended data by querying for the specific team ID, `/teams/:search` will allow an authenticated attacker to search for teams and see the total number of available teams, including for those teams that the user does not have access to, and `/teams/:teamId/members` when editors_can_admin flag is enabled, an authenticated attacker can see unintended data by querying for the specific team ID. Users are advised to upgrade as soon as possible. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-2243", "Description": "An access control vulnerability in GitLab EE/CE affecting all versions from 14.8 prior to 14.10.5, 15.0 prior to 15.0.4, and 15.1 prior to 15.1.1, allows authenticated users to enumerate issues in non-linked sentry projects."}, {"Reference": "CVE-2022-3413", "Description": "Incorrect authorization during display of Audit Events in GitLab EE affecting all versions from 14.5 prior to 15.3.5, 15.4 prior to 15.4.4, and 15.5 prior to 15.5.2, allowed Developers to view the project's Audit Events and Developers or Maintainers to view the group's Audit Events. These should have been restricted to Project Maintainers, Group Owners, and above."}, {"Reference": "CVE-2022-4811", "Description": "Authorization Bypass Through User-Controlled Key vulnerability in usememos usememos/memos.This issue affects usememos/memos before 0.9.1. "}, {"Reference": "CVE-2022-0442", "Description": "The UsersWP WordPress plugin before 1.2.3.1 is missing access controls when updating a user avatar, and does not make sure file names for user avatars are unique, allowing a logged in user to overwrite another users avatar."}, {"Reference": "CVE-2021-36539", "Description": "Instructure Canvas LMS didn't properly deny access to locked/unpublished files when the unprivileged user access the DocViewer based file preview URL (canvadoc_session_url)."}]}
{"ID": "64", "Name": "Windows Shortcut Following (.LNK)", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product, when opening a file or directory, does not sufficiently handle when the file is a Windows shortcut (.LNK) whose target is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.", "ExtendedDescription": "The shortcut (file with the .lnk extension) can permit an attacker to read/write a file that they originally did not have permissions to access.", "LikelihoodOfExploit": "Low", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "59", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Windows", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Windows symbolic link following"}, {"Term": "symlink"}], "ModesOfIntroduction": [{"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Modify Files or Directories"]}], "PotentialMitigations": [{"MitigationID": "MIT-48.1", "Phase": ["Architecture and Design"], "Strategy": "Separation of Privilege", "Description": "\n\nFollow the principle of least privilege when assigning access rights to entities in a software system.\n\n\nDenying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.\n"}], "ObservedExamples": [{"Reference": "CVE-2019-19793", "Description": "network access control service executes program with high privileges and allows symlink to invoke another executable or perform DLL injection.", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-19793"}, {"Reference": "CVE-2000-0342", "Description": "Mail client allows remote attackers to bypass the user warning for executable attachments such as .exe, .com, and .bat by using a .lnk file that refers to the attachment, aka \"Stealth Attachment.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0342"}, {"Reference": "CVE-2001-1042", "Description": "FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1042"}, {"Reference": "CVE-2001-1043", "Description": "FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1043"}, {"Reference": "CVE-2005-0587", "Description": "Browser allows remote malicious web sites to overwrite arbitrary files by tricking the user into downloading a .LNK (link) file twice, which overwrites the file that was referenced in the first .LNK file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0587"}, {"Reference": "CVE-2001-1386", "Description": "\".LNK.\" - .LNK with trailing dot", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1386"}, {"Reference": "CVE-2003-1233", "Description": "Rootkits can bypass file access restrictions to Windows kernel directories using NtCreateSymbolicLinkObject function to create symbolic link", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1233"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "Under-studied. Windows .LNK files are more \"portable\" than Unix symlinks and have been used in remote exploits. Some Windows API's will access LNK's as if they are regular files, so one would expect that they would be reported more frequently."}]}
{"ID": "640", "Name": "Weak Password Recovery Mechanism for Forgotten Password", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.", "ExtendedDescription": "\n\nIt is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user's account. Weak password recovery schemes completely undermine a strong password authentication scheme.\n\n\nThis weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system's weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system.\n", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1390", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "287", "ViewID": "1003", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "An attacker could gain unauthorized access to the system by retrieving legitimate user's authentication credentials."}, {"Scope": ["Availability"], "Impact": ["DoS: Resource Consumption (Other)"], "Note": "An attacker could deny service to legitimate system users by launching a brute force attack on the password recovery mechanism using user ids of legitimate users."}, {"Scope": ["Integrity", "Other"], "Impact": ["Other"], "Note": "The system's security functionality is turned against the system by the attacker."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Make sure that all input supplied by the user to the password recovery mechanism is thoroughly filtered and validated."}, {"Phase": ["Architecture and Design"], "Description": "Do not use standard weak security questions and use several security questions."}, {"Phase": ["Architecture and Design"], "Description": "Make sure that there is throttling on the number of incorrect answers to a security question. Disable the password recovery functionality after a certain (small) number of incorrect guesses."}, {"Phase": ["Architecture and Design"], "Description": "Require that the user properly answers the security question prior to resetting their password and sending the new password to the e-mail address of record."}, {"Phase": ["Architecture and Design"], "Description": "Never allow the user to control what e-mail address the new password will be sent to in the password recovery mechanism."}, {"Phase": ["Architecture and Design"], "Description": "Assign a new temporary password rather than revealing the original password."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "A famous example of this type of weakness being exploited is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction."}]}], "RelatedAttackPatterns": ["50"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This entry appears to be frequently misused for any weakness related to password changes, even though the name focuses on \"Password Recovery\" for a \"forgotten\" password.", "Comments": "CWE-640 should only be used when there is a \"password recovery\" mechanism for forgotten passwords. Consider password-related entries under CWE-1390: Weak Authentication.", "Reasons": ["Frequent Misuse"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry might be reclassified as a category or \"loose composite,\" since it lists multiple specific errors that can make the mechanism weak. However, under view 1000, it could be a weakness under protection mechanism failure, although it is different from most PMF issues since it is related to a feature that is designed to bypass a protection mechanism (specifically, the lack of knowledge of a password)."}, {"Type": "Maintenance", "Note": "This entry probably needs to be split; see extended description."}], "Top25Examples": [{"Reference": "CVE-2021-41694", "Description": "An Incorrect Access Control vulnerability exists in Premiumdatingscript 4.2.7.7 via the password change procedure in requests\\\\user.php."}, {"Reference": "CVE-2022-45782", "Description": "An issue was discovered in dotCMS core 5.3.8.5 through 5.3.8.15 and 21.03 through 22.10.1. A cryptographically insecure random generation algorithm for password-reset token generation leads to account takeover."}, {"Reference": "CVE-2022-23855", "Description": "An issue was discovered in Saviynt Enterprise Identity Cloud (EIC) 5.5 SP2.x. An authentication bypass in ECM/maintenance/forgotpasswordstep1 allows an unauthenticated user to reset passwords and login as any local account."}, {"Reference": "CVE-2022-1715", "Description": "Account Takeover in GitHub repository neorazorx/facturascripts prior to 2022.07."}]}
{"ID": "641", "Name": "Improper Restriction of Names for Files and Other Resources", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name.", "ExtendedDescription": "This may produce resultant weaknesses. For instance, if the names of these resources contain scripting characters, it is possible that a script may get executed in the client's browser if the application ever displays the name of the resource on a dynamically generated web page. Alternately, if the resources are consumed by some application parser, a specially crafted name can exploit some vulnerability internal to the parser, potentially resulting in execution of arbitrary code on the server machine. The problems will vary based on the context of usage of such malformed resource names and whether vulnerabilities are present in or assumptions are made by the targeted technology that would make code execution possible.", "LikelihoodOfExploit": "Low", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "99", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "Execution of arbitrary code in the context of usage of the resources with dangerous names."}, {"Scope": ["Confidentiality", "Availability"], "Impact": ["Read Application Data", "DoS: Crash, Exit, or Restart"], "Note": "Crash of the consumer code of these resources resulting in information leakage or denial of service."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Do not allow users to control names of resources used on the server side."}, {"Phase": ["Architecture and Design"], "Description": "Perform allowlist input validation at entry points and also before consuming the resources. Reject bad file names rather than trying to cleanse them."}, {"Phase": ["Architecture and Design"], "Description": "Make sure that technologies consuming the resources are not vulnerable (e.g. buffer overflow, format string, etc.) in a way that would allow code execution if the name of the resource is malformed."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-36302", "Description": "File path manipulation vulnerability in BF-OS version 3.00 up to and including 3.83 allows an attacker to modify the file path to access different resources, which may contain sensitive information."}]}
{"ID": "642", "Name": "External Control of Critical State Data", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product stores security-critical state information about its users, or the product itself, in a location that is accessible to unauthorized actors.", "ExtendedDescription": "\n\nIf an attacker can modify the state information without detection, then it could be used to perform unauthorized actions or access unexpected resources, since the application programmer does not expect that the state can be changed.\n\n\nState information can be stored in various locations such as a cookie, in a hidden web form field, input parameter or argument, an environment variable, a database record, within a settings file, etc. All of these locations have the potential to be modified by an attacker. When this state information is used to control security or determine resource usage, then it may create a vulnerability. For example, an application may perform authentication, then save the state in an \"authenticated=true\" cookie. An attacker may simply create this cookie in order to bypass the authentication.\n", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "668", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Web Server", "Prevalence": "Often"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism", "Gain Privileges or Assume Identity"], "Note": "An attacker could potentially modify the state in malicious ways. If the state is related to the privileges or level of authentication that the user has, then state modification might allow the user to bypass authentication or elevate privileges."}, {"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "The state variables may contain sensitive information that should not be known by the client."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "By modifying state variables, the attacker could violate the application's expectations for the contents of the state, leading to a denial of service due to an unexpected error condition."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Understand all the potential locations that are accessible to attackers. For example, some programmers assume that cookies and hidden form fields cannot be modified by an attacker, or they may not consider that environment variables can be modified before a privileged program is invoked."}, {"MitigationID": "MIT-14", "Phase": ["Architecture and Design"], "Strategy": "Attack Surface Reduction", "Description": "\n\nStore state information and sensitive data on the server side only.\n\n\nEnsure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions.\n\n\nIf information must be stored on the client, do not do so without encryption and integrity checking, or otherwise having a mechanism on the server side to catch tampering. Use a message authentication code (MAC) algorithm, such as Hash Message Authentication Code (HMAC) [REF-529]. Apply this against the state or sensitive data that has to be exposed, which can guarantee the integrity of the data - i.e., that the data has not been modified. Ensure that a strong hash function is used (CWE-328).\n"}, {"Phase": ["Architecture and Design"], "Description": "Store state information on the server side only. Ensure that the system definitively and unambiguously keeps track of its own state and user state and has rules defined for legitimate state transitions. Do not allow any application user to affect state directly in any way other than through legitimate actions leading to state transitions."}, {"MitigationID": "MIT-4", "Phase": ["Architecture and Design"], "Strategy": "Libraries or Frameworks", "Description": "\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nWith a stateless protocol such as HTTP, use some frameworks can maintain the state for you.\n\n\nExamples include ASP.NET View State and the OWASP ESAPI Session Management feature.\n\n\nBe careful of language features that provide state support, since these might be provided as a convenience to the programmer and may not be considering security.\n"}, {"MitigationID": "MIT-15", "Phase": ["Architecture and Design"], "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."}, {"MitigationID": "MIT-16", "Phase": ["Operation", "Implementation"], "Strategy": "Environment Hardening", "Description": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."}, {"Phase": ["Testing"], "Description": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."}, {"Phase": ["Testing"], "Description": "Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results."}, {"Phase": ["Testing"], "Description": "Use tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session. These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following example, an authentication flag is read from a browser cookie, thus allowing for external control of user state data."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tCookie[] cookies = request.getCookies();\n\tfor (int i =0; i< cookies.length; i++) {\n\t\tCookie c = cookies[i];\n\t\tif (c.getName().equals(\"authenticated\") && Boolean.TRUE.equals(c.getValue())) {\n\t\t\tauthenticated = true;\n\t\t}\n\t}\n```"}]}, {"ID": "DX-65", "Entries": [{"IntroText": "The following code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files (CWE-22)."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tString rName = request.getParameter(\"reportName\");\n\tFile rFile = new File(\"/usr/local/apfr/reports/\" + rName);\n\t...\n\trFile.delete();\n```"}]}, {"ID": "DX-66", "Entries": [{"IntroText": "The following code uses input from a configuration file to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can change the configuration file, they can use the program to read any file on the system that ends with the extension .txt."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tfis = new FileInputStream(cfg.getProperty(\"sub\")+\".txt\");\n\tamt = fis.read(arr);\n\tout.println(arr);\n```"}]}, {"ID": "DX-67", "Entries": [{"IntroText": "This program is intended to execute a command that lists the contents of a restricted directory, then performs other actions. Assume that it runs with setuid privileges in order to bypass the permissions check by the operating system."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t#define DIR \"/restricted/directory\"\n\tchar cmd[500];\n\tsprintf(cmd, \"ls -l %480s\", DIR);\n```\n/* Raise privileges to those needed for accessing DIR. */* \n\t\n\tRaisePrivileges(...);\n\tsystem(cmd);\n\tDropPrivileges(...);\n\t..."}, {"BodyText": "This code may look harmless at first, since both the directory and the command are set to fixed values that the attacker can't control. The attacker can only see the contents for DIR, which is the intended program behavior. Finally, the programmer is also careful to limit the code that executes with raised privileges."}, {"BodyText": "However, because the program does not modify the PATH environment variable, the following attack would work:"}, {"Nature": "Attack", "ExampleCode": "- The user sets the PATH to reference a directory under the attacker's control, such as \"/my/dir/\".\n\n  - The attacker creates a malicious program called \"ls\", and puts that program in /my/dir\n\n  - The user executes the program.\n\n  - When system() is executed, the shell consults the PATH to find the ls program\n\n  - The program finds the attacker's malicious program, \"/my/dir/ls\". It doesn't find \"/bin/ls\" because PATH does not contain \"/bin/\".\n\n  - The program executes the attacker's malicious program with the raised privileges."}]}, {"Entries": [{"IntroText": "The following code segment implements a basic server that uses the \"ls\" program to perform a directory listing of the directory that is listed in the \"HOMEDIR\" environment variable. The code intends to allow the user to specify an alternate \"LANG\" environment variable. This causes \"ls\" to customize its output based on a given language, which is an important capability when supporting internationalization."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\t$ENV{\"HOMEDIR\"} = \"/home/mydir/public/\";\n\tmy $stream = AcceptUntrustedInputStream();\n\twhile (<$stream>) {\n\t\t\tchomp;\n\t\t\tif (/^ENV ([\\w\\_]+) (.*)/) {\n\t\t\t\t$ENV{$1} = $2;\n\t\t\t}\n\t\t\telsif (/^QUIT/) { ... }\n\t\t\telsif (/^LIST/) {\n\t\t\t\topen($fh, \"/bin/ls -l $ENV{HOMEDIR}|\");\n\t\t\t\twhile (<$fh>) {\n\t\t\t\t\tSendOutput($stream, \"FILEINFO: $_\");\n\t\t\t\t}\n\t\t\t\tclose($fh);\n\t\t\t}\n\t}\n```"}, {"BodyText": "The programmer takes care to call a specific \"ls\" program and sets the HOMEDIR to a fixed value. However, an attacker can use a command such as \"ENV HOMEDIR /secret/directory\" to specify an alternate directory, enabling a path traversal attack (CWE-22). At the same time, other attacks are enabled as well, such as OS command injection (CWE-78) by setting HOMEDIR to a value such as \"/tmp; rm -rf /\". In this case, the programmer never intends for HOMEDIR to be modified, so input validation for HOMEDIR is not the solution. A partial solution would be an allowlist that only allows the LANG variable to be specified in the ENV command. Alternately, assuming this is an authenticated user, the language could be stored in a local file so that no ENV command at all would be needed."}, {"BodyText": "While this example may not appear realistic, this type of problem shows up in code fairly frequently. See CVE-1999-0073 in the observed examples for a real-world example with similar behaviors."}]}], "ObservedExamples": [{"Reference": "CVE-2005-2428", "Description": "Mail client stores password hashes for unrelated accounts in a hidden form field.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2428"}, {"Reference": "CVE-2008-0306", "Description": "Privileged program trusts user-specified environment variable to modify critical configuration settings.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0306"}, {"Reference": "CVE-1999-0073", "Description": "Telnet daemon allows remote clients to specify critical environment variables for the server, leading to code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0073"}, {"Reference": "CVE-2007-4432", "Description": "Untrusted search path vulnerability through modified LD_LIBRARY_PATH environment variable.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-4432"}, {"Reference": "CVE-2006-7191", "Description": "Untrusted search path vulnerability through modified LD_LIBRARY_PATH environment variable.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-7191"}, {"Reference": "CVE-2008-5738", "Description": "Calendar application allows bypass of authentication by setting a certain cookie value to 1.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5738"}, {"Reference": "CVE-2008-5642", "Description": "Setting of a language preference in a cookie enables path traversal attack.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5642"}, {"Reference": "CVE-2008-5125", "Description": "Application allows admin privileges by setting a cookie value to \"admin.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5125"}, {"Reference": "CVE-2008-5065", "Description": "Application allows admin privileges by setting a cookie value to \"admin.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5065"}, {"Reference": "CVE-2008-4752", "Description": "Application allows admin privileges by setting a cookie value to \"admin.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4752"}, {"Reference": "CVE-2000-0102", "Description": "Shopping cart allows price modification via hidden form field.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0102"}, {"Reference": "CVE-2000-0253", "Description": "Shopping cart allows price modification via hidden form field.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0253"}, {"Reference": "CVE-2008-1319", "Description": "Server allows client to specify the search path, which can be modified to point to a program that the client has uploaded.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1319"}], "RelatedAttackPatterns": ["21", "31"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Top25Examples": [{"Reference": "CVE-2022-22154", "Description": "In a Junos Fusion scenario an External Control of Critical State Data vulnerability in the Satellite Device (SD) control state machine of Juniper Networks Junos OS allows an attacker who is able to make physical changes to the cabling of the device to cause a denial of service (DoS). An SD can get rebooted and subsequently controlled by an Aggregation Device (AD) which does not belong to the original Fusion setup and is just connected to an extended port of the SD. To carry out this attack the attacker needs to have physical access to the cabling between the SD and the original AD. This issue affects: Juniper Networks Junos OS 16.1R1 and later versions prior to 18.4R3-S10; 19.1 versions prior to 19.1R3-S7; 19.2 versions prior to 19.2R3-S4. This issue does not affect Juniper Networks Junos OS versions prior to 16.1R1."}]}
{"ID": "643", "Name": "Improper Neutralization of Data within XPath Expressions ('XPath Injection')", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.", "ExtendedDescription": "The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "943", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "91", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"], "Note": "Controlling application flow (e.g. bypassing authentication)."}, {"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "The attacker could read restricted XML content."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Use parameterized XPath queries (e.g. using XQuery). This will help ensure separation between data plane and control plane."}, {"Phase": ["Implementation"], "Description": "Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XPath queries is safe in that context."}], "DemonstrativeExamples": [{"ID": "DX-211", "Entries": [{"IntroText": "Consider the following simple XML document that stores authentication information and a snippet of Java code that uses XPath query to retrieve authentication information:"}, {"Nature": "Informative", "Language": "XML", "ExampleCode": "```\n\t<users>\n\t\t<user>\n\t\t\t<login>john</login>\n\t\t\t<password>abracadabra</password>\n\t\t\t<home_dir>/home/john</home_dir>\n\t\t</user>\n\t\t<user>\n\t\t\t<login>cbc</login>\n\t\t\t<password>1mgr8</password>\n\t\t\t<home_dir>/home/cbc</home_dir>\n\t\t</user>\n\t</users>\n```"}, {"BodyText": "The Java code used to retrieve the home directory based on the provided credentials is:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tXPath xpath = XPathFactory.newInstance().newXPath();\n\tXPathExpression xlogin = xpath.compile(\"//users/user[login/text()='\" + login.getUserName() + \"' and password/text() = '\" + login.getPassword() + \"']/home_dir/text()\");\n\tDocument d = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File(\"db.xml\"));\n\tString homedir = xlogin.evaluate(d);\n```"}, {"BodyText": "Assume that user \"john\" wishes to leverage XPath Injection and login without a valid password. By providing a username \"john\" and password \"' or ''='\" the XPath expression now becomes"}, {"Nature": "Attack", "ExampleCode": "```\n\t//users/user[login/text()='john' or ''='' and password/text() = '' or ''='']/home_dir/text()\n```"}, {"BodyText": "This lets user \"john\" login without a valid password, thus bypassing authentication."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This weakness is similar to other weaknesses that enable injection style attacks, such as SQL injection, command injection and LDAP injection. The main difference is that the target of attack here is the XML database."}]}
{"ID": "644", "Name": "Improper Neutralization of HTTP Headers for Scripting Syntax", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not neutralize or incorrectly neutralizes web scripting syntax in HTTP headers that can be used by web browser components that can process raw headers, such as Flash.", "ExtendedDescription": "\n\nAn attacker may be able to conduct cross-site scripting and other attacks against users who have these components enabled.\n\n\nIf a product does not neutralize user controlled data being placed in the header of an HTTP response coming from the server, the header may contain a script that will get executed in the client's browser context, potentially resulting in a cross site scripting vulnerability or possibly an HTTP response splitting attack. It is important to carefully control data that is being placed both in HTTP response header and in the HTTP response body to ensure that no scripting syntax is present, taking various encodings into account.\n", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "116", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Web Based", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "Run arbitrary code."}, {"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "Attackers may be able to obtain sensitive information."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Perform output validation in order to filter/escape/encode unsafe data that is being passed from the server in an HTTP response header."}, {"Phase": ["Architecture and Design"], "Description": "Disable script execution functionality in the clients' browser."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following Java example, user-controlled data is added to the HTTP headers and returned to the client. Given that the data is not subject to neutralization, a malicious user may be able to inject dangerous scripting tags that will lead to script execution in the client browser."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tresponse.addHeader(HEADER_NAME, untrustedRawInputData);\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2006-3918", "Description": "Web server does not remove the Expect header from an HTTP request when it is reflected back in an error message, allowing a Flash SWF file to perform XSS attacks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-3918"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-41114", "Description": "TYPO3 is an open source PHP based web content management system released under the GNU GPL. It has been discovered that TYPO3 CMS is susceptible to host spoofing due to improper validation of the HTTP Host header. TYPO3 uses the HTTP Host header, for example, to generate absolute URLs during the frontend rendering process. Since the host header itself is provided by the client, it can be forged to any value, even in a name-based virtual hosts environment. This vulnerability is the same as described in TYPO3-CORE-SA-2014-001 (CVE-2014-3941). A regression, introduced during TYPO3 v11 development, led to this situation. The already existing setting $GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] (used as an effective mitigation strategy in previous TYPO3 versions) was not evaluated anymore, and reintroduced the vulnerability."}]}
{"ID": "645", "Name": "Overly Restrictive Account Lockout Mechanism", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.", "ExtendedDescription": "Account lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number of failed login attempts, the users' account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout. However, an attacker may use this very security feature to deny service to legitimate system users. It is therefore important to ensure that the account lockout security mechanism is not overly restrictive.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "287", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Resource Consumption (Other)"], "Note": "Users could be locked out of accounts."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Implement more intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name."}, {"Phase": ["Architecture and Design"], "Description": "Implement a lockout timeout that grows as the number of incorrect login attempts goes up, eventually resulting in a complete lockout."}, {"Phase": ["Architecture and Design"], "Description": "Consider alternatives to account lockout that would still be effective against password brute force attacks, such as presenting the user machine with a puzzle to solve (makes it do some computation)."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "A famous example of this type of weakness being exploited is the eBay attack. eBay always displays the user id of the highest bidder. In the final minutes of the auction, one of the bidders could try to log in as the highest bidder three times. After three incorrect log in attempts, eBay password throttling would kick in and lock out the highest bidder's account for some time. An attacker could then make their own bid and their victim would not have a chance to place the counter bid because they would be locked out. Thus an attacker could win the auction."}]}], "RelatedAttackPatterns": ["2"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "646", "Name": "Reliance on File Name or Extension of Externally-Supplied File", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion.", "ExtendedDescription": "An application might use the file name or extension of a user-supplied file to determine the proper course of action, such as selecting the correct process to which control should be passed, deciding what data should be made available, or what resources should be allocated. If the attacker can cause the code to misclassify the supplied file, then the wrong action could occur. For example, an attacker could supply a file that ends in a \".php.gif\" extension that appears to be a GIF image, but would be processed as PHP code. In extreme cases, code execution is possible, but the attacker could also cause exhaustion of resources, denial of service, exposure of debug or system data (including application source code), or being bound to a particular server side process. This weakness may be due to a vulnerability in any of the technologies used by the web and application servers, due to misconfiguration, or resultant from another flaw in the application itself.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "345", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Web Server", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "An attacker may be able to read sensitive data."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "An attacker may be able to cause a denial of service."}, {"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "An attacker may be able to gain privileges."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Make decisions on the server side based on file content and not on file name or extension."}], "RelatedAttackPatterns": ["209"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "647", "Name": "Use of Non-Canonical URL Paths for Authorization Decisions", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization.", "ExtendedDescription": "\n\nIf an application defines policy namespaces and makes authorization decisions based on the URL, but it does not require or convert to a canonical URL before making the authorization decision, then it opens the application to attack. For example, if the application only wants to allow access to http://www.example.com/mypage, then the attacker might be able to bypass this restriction using equivalent URLs such as:\n\n\n  - http://WWW.EXAMPLE.COM/mypage\n\n  - http://www.example.com/%6Dypage (alternate encoding)\n\n  - http://192.168.1.1/mypage (IP address)\n\n  - http://www.example.com/mypage/ (trailing /)\n\n  - http://www.example.com:80/mypage\n\nTherefore it is important to specify access control policy that is based on the path information in some canonical form with all alternate encodings rejected (which can be accomplished by a default deny rule).", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "863", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Web Server", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"], "Note": "An attacker may be able to bypass the authorization mechanism to gain access to the otherwise-protected URL."}, {"Scope": ["Confidentiality"], "Impact": ["Read Files or Directories"], "Note": "If a non-canonical URL is used, the server may choose to return the contents of the file, instead of pre-processing the file (e.g. as a program)."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Make access control policy based on path information in canonical form. Use very restrictive regular expressions to validate that the path is in the expected form."}, {"Phase": ["Architecture and Design"], "Description": "Reject all alternate path encodings that are not in the expected canonical form."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Example from CAPEC (CAPEC ID: 4, \"Using Alternative IP Address Encodings\"). An attacker identifies an application server that applies a security policy based on the domain and application name, so the access control policy covers authentication and authorization for anyone accessing http://example.domain:8080/application. However, by putting in the IP address of the host the application authentication and authorization controls may be bypassed http://192.168.0.1:8080/application. The attacker relies on the victim applying policy to the namespace abstraction and not having a default deny policy in place to manage exceptions."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "648", "Name": "Incorrect Use of Privileged APIs", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly.", "ExtendedDescription": "\n\nWhen a product contains certain functions that perform operations requiring an elevated level of privilege, the caller of a privileged API must be careful to:\n\n\n  - ensure that assumptions made by the APIs are valid, such as validity of arguments\n\n  - account for known weaknesses in the design/implementation of the API\n\n  - call the API from a safe context\n\nIf the caller of the API does not follow these requirements, then it may allow a malicious user or process to elevate their privilege, hijack the process, or steal sensitive data.\n\nFor instance, it is important to know if privileged APIs do not shed their privileges before returning to the caller or if the privileged function might make certain assumptions about the data, context or state information passed to it by the caller. It is important to always know when and how privileged APIs can be called in order to ensure that their elevated level of privilege cannot be exploited.\n", "LikelihoodOfExploit": "Low", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "269", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "An attacker may be able to elevate privileges."}, {"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "An attacker may be able to obtain sensitive information."}, {"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "An attacker may be able to execute code."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Before calling privileged APIs, always ensure that the assumptions made by the privileged code hold true prior to making the call."}, {"Phase": ["Architecture and Design"], "Description": "Know architecture and implementation weaknesses of the privileged APIs and make sure to account for these weaknesses before calling the privileged APIs to ensure that they can be called safely."}, {"Phase": ["Implementation"], "Description": "If privileged APIs make certain assumptions about data, context or state validity that are passed by the caller, the calling code must ensure that these assumptions have been validated prior to making the call."}, {"Phase": ["Implementation"], "Description": "If privileged APIs do not shed their privilege prior to returning to the calling code, then calling code needs to shed these privileges immediately and safely right after the call to the privileged APIs. In particular, the calling code needs to ensure that a privileged thread of execution will never be returned to the user or made available to user-controlled processes."}, {"Phase": ["Implementation"], "Description": "Only call privileged APIs from safe, consistent and expected state."}, {"Phase": ["Implementation"], "Description": "Ensure that a failure or an error will not leave a system in a state where privileges are not properly shed and privilege escalation is possible (i.e. fail securely with regards to handling of privileges)."}], "ObservedExamples": [{"Reference": "CVE-2003-0645", "Description": "A Unix utility that displays online help files, if installed setuid, could allow a local attacker to gain privileges when a particular file-opening function is called.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0645"}], "RelatedAttackPatterns": ["107", "234"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-2023", "Description": "Incorrect Use of Privileged APIs in GitHub repository polonel/trudesk prior to 1.2.4."}, {"Reference": "CVE-2022-4687", "Description": "Incorrect Use of Privileged APIs in GitHub repository usememos/memos prior to 0.9.0."}, {"Reference": "CVE-2022-25089", "Description": "Printix Secure Cloud Print Management through 1.3.1106.0 incorrectly uses Privileged APIs to modify values in HKEY_LOCAL_MACHINE via UITasks.PersistentRegistryData."}, {"Reference": "CVE-2022-32633", "Description": "In Wi-Fi, there is a possible memory access violation due to a logic error. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07441637; Issue ID: ALPS07441637."}]}
{"ID": "649", "Name": "Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the product does not use integrity checks to detect if those inputs have been modified.", "ExtendedDescription": "When an application relies on obfuscation or incorrectly applied / weak encryption to protect client-controllable tokens or parameters, that may have an effect on the user state, system state, or some decision made on the server. Without protecting the tokens/parameters for integrity, the application is vulnerable to an attack where an adversary traverses the space of possible values of the said token/parameter in order to attempt to gain an advantage. The goal of the attacker is to find another admissible value that will somehow elevate their privileges in the system, disclose information or change the behavior of the system in some way beneficial to the attacker. If the application does not protect these critical tokens/parameters for integrity, it will not be able to determine that these values have been tampered with. Measures that are used to protect data for confidentiality should not be relied upon to provide the integrity service.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "345", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"], "Note": "The inputs could be modified without detection, causing the product to have unexpected system state or make incorrect security decisions."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Protect important client controllable tokens/parameters for integrity using PKI methods (i.e. digital signatures) or other means, and checks for integrity on the server side."}, {"Phase": ["Architecture and Design"], "Description": "Repeated requests from a particular user that include invalid values of tokens/parameters (those that should not be changed manually by users) should result in the user account lockout."}, {"Phase": ["Architecture and Design"], "Description": "Client side tokens/parameters should not be such that it would be easy/predictable to guess another valid state."}, {"Phase": ["Architecture and Design"], "Description": "Obfuscation should not be relied upon. If encryption is used, it needs to be properly applied (i.e. proven algorithm and implementation, use padding, use random initialization vector, user proper encryption mode). Even with proper encryption where the ciphertext does not leak information about the plaintext or reveal its structure, compromising integrity is possible (although less likely) without the provision of the integrity service."}], "ObservedExamples": [{"Reference": "CVE-2005-0039", "Description": "An IPSec configuration does not perform integrity checking of the IPSec packet as the result of either not configuring ESP properly to support the integrity service or using AH improperly. In either case, the security gateway receiving the IPSec packet would not validate the integrity of the packet to ensure that it was not changed. Thus if the packets were intercepted the attacker could undetectably change some of the bits in the packets. The meaningful bit flipping was possible due to the known weaknesses in the CBC encryption mode. Since the attacker knew the structure of the packet, they were able (in one variation of the attack) to use bit flipping to change the destination IP of the packet to the destination machine controlled by the attacker. And so the destination security gateway would decrypt the packet and then forward the plaintext to the machine controlled by the attacker. The attacker could then read the original message. For instance if VPN was used with the vulnerable IPSec configuration the attacker could read the victim's e-mail. This vulnerability demonstrates the need to enforce the integrity service properly when critical data could be modified by an attacker. This problem might have also been mitigated by using an encryption mode that is not susceptible to bit flipping attacks, but the preferred mechanism to address this problem still remains message verification for integrity. While this attack focuses on the network layer and requires an entity that controls part of the communication path such as a router, the situation is not much different at the software level, where an attacker can modify tokens/parameters used by the application.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0039"}], "RelatedAttackPatterns": ["463"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "65", "Name": "Windows Hard Link", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product, when opening a file or directory, does not sufficiently handle when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.", "ExtendedDescription": "Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. AUTOEXEC.BAT). When the process opens the file, the attacker can assume the privileges of that process, or prevent the program from accurately processing data.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "59", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Windows", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Modify Files or Directories"]}], "PotentialMitigations": [{"MitigationID": "MIT-48.1", "Phase": ["Architecture and Design"], "Strategy": "Separation of Privilege", "Description": "\n\nFollow the principle of least privilege when assigning access rights to entities in a software system.\n\n\nDenying access to a file can prevent an attacker from replacing that file with a link to a sensitive file. Ensure good compartmentalization in the system to provide protected areas that can be trusted.\n"}], "ObservedExamples": [{"Reference": "CVE-2002-0725", "Description": "File system allows local attackers to hide file usage activities via a hard link to the target file, which causes the link to be recorded in the audit trail instead of the target file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0725"}, {"Reference": "CVE-2003-0844", "Description": "Web server plugin allows local users to overwrite arbitrary files via a symlink attack on predictable temporary filenames.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0844"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "650", "Name": "Trusting HTTP Permission Methods on the Server Side", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The server contains a protection mechanism that assumes that any URI that is accessed using HTTP GET will not cause a state change to the associated resource. This might allow attackers to bypass intended access restrictions and conduct resource modification and deletion attacks, since some applications allow GET to modify state.", "ExtendedDescription": "The HTTP GET method and some other methods are designed to retrieve resources and not to alter the state of the application or resources on the server side. Furthermore, the HTTP specification requires that GET requests (and other requests) should not have side effects. Believing that it will be enough to prevent unintended resource alterations, an application may disallow the HTTP requests to perform DELETE, PUT and POST operations on the resource representation. However, there is nothing in the HTTP protocol itself that actually prevents the HTTP GET method from performing more than just query of the data. Developers can easily code programs that accept a HTTP GET request that do in fact create, update or delete data on the server. For instance, it is a common practice with REST based Web Services to have HTTP GET requests modifying resources on the server side. However, whenever that happens, the access control needs to be properly enforced in the application. No assumptions should be made that only HTTP DELETE, PUT, POST, and other methods have the power to alter the representation of the resource being accessed in the request.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "436", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "An attacker could escalate privileges."}, {"Scope": ["Integrity"], "Impact": ["Modify Application Data"], "Note": "An attacker could modify resources."}, {"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "An attacker could obtain sensitive information."}], "PotentialMitigations": [{"Phase": ["System Configuration"], "Description": "Configure ACLs on the server side to ensure that proper level of access control is defined for each accessible resource representation."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-45327", "Description": "Gitea before 1.11.2 is affected by Trusting HTTP Permission Methods on the Server Side when referencing the vulnerable admin or user API. which could let a remote malisious user execute arbitrary code."}]}
{"ID": "651", "Name": "Exposure of WSDL File Containing Sensitive Information", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The Web services architecture may require exposing a Web Service Definition Language (WSDL) file that contains information on the publicly accessible services and how callers of these services should interact with them (e.g. what parameters they expect and what types they return).", "ExtendedDescription": "\n\nAn information exposure may occur if any of the following apply:\n\n\n  - The WSDL file is accessible to a wider audience than intended.\n\n  - The WSDL file contains information on the methods/services that should not be publicly accessible or information about deprecated methods. This problem is made more likely due to the WSDL often being automatically generated from the code.\n\n  - Information in the WSDL file helps guess names/locations of methods/resources that should not be publicly accessible.\n\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "538", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Web Server", "Prevalence": "Often"}], "ModesOfIntroduction": [{"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "The attacker may find sensitive information located in the WSDL file."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Limit access to the WSDL file as much as possible. If services are provided only to a limited number of entities, it may be better to provide WSDL privately to each of these entities than to publish WSDL publicly."}, {"Phase": ["Architecture and Design"], "Strategy": "Separation of Privilege", "Description": "Make sure that WSDL does not describe methods that should not be publicly accessible. Make sure to protect service methods that should not be publicly accessible with access controls."}, {"Phase": ["Architecture and Design"], "Description": "Do not use method names in WSDL that might help an adversary guess names of private methods/resources used by the service."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The WSDL for a service providing information on the best price of a certain item exposes the following method: float getBestPrice(String ItemID) An attacker might guess that there is a method setBestPrice (String ItemID, float Price) that is available and invoke that method to try and change the best price of a given item to their advantage. The attack may succeed if the attacker correctly guesses the name of the method, the method does not have proper access controls around it and the service itself has the functionality to update the best price of the item."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "652", "Name": "Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.", "ExtendedDescription": "The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "943", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "91", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "An attacker might be able to read sensitive information from the XML database."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Use parameterized queries. This will help ensure separation between data plane and control plane."}, {"Phase": ["Implementation"], "Description": "Properly validate user input. Reject data where appropriate, filter where appropriate and escape where appropriate. Make sure input that will be used in XQL queries is safe in that context."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "An attacker may pass XQuery expressions embedded in an otherwise standard XML document. The attacker tunnels through the application entry point to target the resource access layer. The string below is an example of an attacker accessing the accounts.xml to request the service provider send all user names back. doc(accounts.xml)//user[name='*'] The attacks that are possible through XQuery are difficult to predict, if the data is not validated prior to executing the XQL."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This weakness is similar to other weaknesses that enable injection style attacks, such as SQL injection, command injection and LDAP injection. The main difference is that the target of attack here is the XML database."}]}
{"ID": "653", "Name": "Improper Isolation or Compartmentalization", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product does not properly compartmentalize or isolate functionality, processes, or resources that require different privilege levels, rights, or permissions.", "ExtendedDescription": "When a weakness occurs in functionality that is accessible by lower-privileged users, then without strong boundaries, an attack might extend the scope of the damage to higher-privileged users.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "657", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "693", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Separation of Privilege", "Description": "Some people and publications use the term \"Separation of Privilege\" to describe this weakness, but this term has dual meanings in current usage. This node conflicts with the original definition of \"Separation of Privilege\" by Saltzer and Schroeder; that original definition is more closely associated with CWE-654. Because there are multiple interpretations, use of the \"Separation of Privilege\" term is discouraged."}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity", "Bypass Protection Mechanism"], "Note": "The exploitation of a weakness in low-privileged areas of the software can be leveraged to reach higher-privileged areas without having to overcome any additional obstacles."}], "DetectionMethods": [{"Method": "Automated Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tCompare binary / bytecode to application permission manifest", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tManual Source Code Review (not inspections)\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source", "Effectiveness": "High"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tAttack Modeling", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Break up privileges between different modules, objects, or entities. Minimize the interfaces between modules and require strong access control between them."}], "DemonstrativeExamples": [{"ID": "DX-167", "Entries": [{"IntroText": "Single sign-on technology is intended to make it easier for users to access multiple resources or domains without having to authenticate each time. While this is highly convenient for the user and attempts to address problems with psychological acceptability, it also means that a compromise of a user's credentials can provide immediate access to all other resources or domains."}]}, {"Entries": [{"IntroText": "The traditional UNIX privilege model provides root with arbitrary access to all resources, but root is frequently the only user that has privileges. As a result, administrative tasks require root privileges, even if those tasks are limited to a small area, such as updating user manpages. Some UNIX flavors have a \"bin\" user that is the owner of system executables, but since root relies on executables owned by bin, a compromise of the bin account can be leveraged for root privileges by modifying a bin-owned executable, such as CVE-2007-4238."}]}], "ObservedExamples": [{"Reference": "CVE-2021-33096", "Description": "Improper isolation of shared resource in a network-on-chip leads to denial of service", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-33096"}, {"Reference": "CVE-2019-6260", "Description": "Baseboard Management Controller (BMC) device implements Advanced High-performance Bus (AHB) bridges that do not require authentication for arbitrary read and write access to the BMC's physical address space from the host, and possibly the network [REF-1138].", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-6260"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "There is a close association with CWE-250 (Execution with Unnecessary Privileges). CWE-653 is about providing separate components for each \"privilege\"; CWE-250 is about ensuring that each component has the least amount of privileges possible. In this fashion, compartmentalization becomes one mechanism for reducing privileges."}, {"Type": "Terminology", "Note": "The term \"Separation of Privilege\" is used in several different ways in the industry, but they generally combine two closely related principles: compartmentalization (this node) and using only one factor in a security decision (CWE-654). Proper compartmentalization implicitly introduces multiple factors into a security decision, but there can be cases in which multiple factors are required for authentication or other mechanisms that do not involve compartmentalization, such as performing all required checks on a submitted certificate. It is likely that CWE-653 and CWE-654 will provoke further discussion."}], "Top25Examples": [{"Reference": "CVE-2022-3044", "Description": "Inappropriate implementation in Site Isolation in Google Chrome prior to 105.0.5195.52 allowed a remote attacker who had compromised the renderer process to bypass site isolation via a crafted HTML page."}]}
{"ID": "654", "Name": "Reliance on a Single Factor in a Security Decision", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "A protection mechanism relies exclusively, or to a large extent, on the evaluation of a single condition or the integrity of a single object or entity in order to make a decision about granting access to restricted resources or functionality.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "657", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "693", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Separation of Privilege", "Description": "Some people and publications use the term \"Separation of Privilege\" to describe this weakness, but this term has dual meanings in current usage. While this entry is closely associated with the original definition of \"Separation of Privilege\" by Saltzer and Schroeder, others use the same term to describe poor compartmentalization (CWE-653). Because there are multiple interpretations, use of the \"Separation of Privilege\" term is discouraged."}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "If the single factor is compromised (e.g. by theft or spoofing), then the integrity of the entire security mechanism can be violated with respect to the user that is identified by that factor."}, {"Scope": ["Non-Repudiation"], "Impact": ["Hide Activities"], "Note": "It can become difficult or impossible for the product to be able to distinguish between legitimate activities by the entity who provided the factor, versus illegitimate activities by an attacker."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Use multiple simultaneous checks before granting access to critical operations or granting critical privileges. A weaker but helpful mitigation is to use several successive checks (multiple layers of security)."}, {"Phase": ["Architecture and Design"], "Description": "Use redundant access rules on different choke points (e.g., firewalls)."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Password-only authentication is perhaps the most well-known example of use of a single factor. Anybody who knows a user's password can impersonate that user."}]}, {"Entries": [{"IntroText": "When authenticating, use multiple factors, such as \"something you know\" (such as a password) and \"something you have\" (such as a hardware-based one-time password generator, or a biometric device)."}]}], "ObservedExamples": [{"Reference": "CVE-2022-35248", "Description": "Chat application skips validation when Central Authentication Service (CAS) is enabled, effectively removing the second factor from two-factor authentication", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-35248"}], "RelatedAttackPatterns": ["16", "274", "49", "55", "560", "565", "600", "652", "653", "70"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry is closely associated with the term \"Separation of Privilege.\" This term is used in several different ways in the industry, but they generally combine two closely related principles: compartmentalization (CWE-653) and using only one factor in a security decision (this entry). Proper compartmentalization implicitly introduces multiple factors into a security decision, but there can be cases in which multiple factors are required for authentication or other mechanisms that do not involve compartmentalization, such as performing all required checks on a submitted certificate. It is likely that CWE-653 and CWE-654 will provoke further discussion."}]}
{"ID": "655", "Name": "Insufficient Psychological Acceptability", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product has a protection mechanism that is too difficult or inconvenient to use, encouraging non-malicious users to disable or bypass the mechanism, whether by accident or on purpose.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "657", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "693", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"], "Note": "By bypassing the security mechanism, a user might leave the system in a less secure state than intended by the administrator, making it more susceptible to compromise."}], "PotentialMitigations": [{"Phase": ["Testing"], "Description": "Where possible, perform human factors and usability studies to identify where your product's security mechanisms are difficult to use, and why."}, {"Phase": ["Architecture and Design"], "Description": "Make the security mechanism as seamless as possible, while also providing the user with sufficient details when a security decision produces unexpected results."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In \"Usability of Security: A Case Study\" [REF-540], the authors consider human factors in a cryptography product. Some of the weakness relevant discoveries of this case study were: users accidentally leaked sensitive information, could not figure out how to perform some tasks, thought they were enabling a security option when they were not, and made improper trust decisions."}]}, {"Entries": [{"IntroText": "Enforcing complex and difficult-to-remember passwords that need to be frequently changed for access to trivial resources, e.g., to use a black-and-white printer. Complex password requirements can also cause users to store the passwords in an unsafe manner so they don't have to remember them, such as using a sticky note or saving them in an unencrypted file."}]}, {"Entries": [{"IntroText": "Some CAPTCHA utilities produce images that are too difficult for a human to read, causing user frustration."}]}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Other", "Note": "This weakness covers many security measures causing user inconvenience, requiring effort or causing frustration, that are disproportionate to the risks or value of the protected assets, or that are perceived to be ineffective."}, {"Type": "Maintenance", "Note": "The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions."}]}
{"ID": "656", "Name": "Reliance on Security Through Obscurity", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product uses a protection mechanism whose strength depends heavily on its obscurity, such that knowledge of its algorithms or key data is sufficient to defeat the mechanism.", "ExtendedDescription": "This reliance on \"security through obscurity\" can produce resultant weaknesses if an attacker is able to reverse engineer the inner workings of the mechanism. Note that obscurity can be one small part of defense in depth, since it can create more work for an attacker; however, it is a significant risk if used as the primary means of protection.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "657", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "693", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "259", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "321", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "472", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Never Assuming your secrets are safe"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Other"], "Impact": ["Other"], "Note": "The security mechanism can be bypassed easily."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Always consider whether knowledge of your code or design is sufficient to break it. Reverse engineering is a highly successful discipline, and financially feasible for motivated adversaries. Black-box techniques are established for binary analysis of executables that use obfuscation, runtime analysis of proprietary protocols, inferring file formats, and others."}, {"Phase": ["Architecture and Design"], "Description": "When available, use publicly-vetted algorithms and procedures, as these are more likely to undergo more extensive security analysis and testing. This is especially the case with encryption and authentication."}], "DemonstrativeExamples": [{"ID": "DX-168", "Entries": [{"IntroText": "The design of TCP relies on the secrecy of Initial Sequence Numbers (ISNs), as originally covered in CVE-1999-0077 [REF-542]. If ISNs can be guessed (due to predictability, CWE-330) or sniffed (due to lack of encryption during transmission, CWE-312), then an attacker can hijack or spoof connections. Many TCP implementations have had variations of this problem over the years, including CVE-2004-0641, CVE-2002-1463, CVE-2001-0751, CVE-2001-0328, CVE-2001-0288, CVE-2001-0163, CVE-2001-0162, CVE-2000-0916, and CVE-2000-0328."}, {"Reference": "REF-542"}]}], "ObservedExamples": [{"Reference": "CVE-2006-6588", "Description": "Reliance on hidden form fields in a web application. Many web application vulnerabilities exist because the developer did not consider that \"hidden\" form fields can be processed using a modified client.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6588"}, {"Reference": "CVE-2006-7142", "Description": "Hard-coded cryptographic key stored in executable program.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-7142"}, {"Reference": "CVE-2005-4002", "Description": "Hard-coded cryptographic key stored in executable program.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-4002"}, {"Reference": "CVE-2006-4068", "Description": "Hard-coded hashed values for username and password contained in client-side script, allowing brute-force offline attacks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4068"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Relationship", "Note": "Note that there is a close relationship between this weakness and CWE-603 (Use of Client-Side Authentication). If developers do not believe that a user can reverse engineer a client, then they are more likely to choose client-side authentication in the belief that it is safe."}]}
{"ID": "657", "Name": "Violation of Secure Design Principles", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product violates well-established principles for secure design.", "ExtendedDescription": "This can introduce resultant weaknesses or make it easier for developers to introduce related weaknesses during implementation. Because code is centered around design, it can be resource-intensive to fix design problems.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Other"]}], "DemonstrativeExamples": [{"ID": "DX-164", "Entries": [{"IntroText": "Switches may revert their functionality to that of hubs when the table used to map ARP information to the switch interface overflows, such as when under a spoofing attack. This results in traffic being broadcast to an eavesdropper, instead of being sent only on the relevant switch interface. To mitigate this type of problem, the developer could limit the number of ARP entries that can be recorded for a given switch interface, while other interfaces may keep functioning normally. Configuration options can be provided on the appropriate actions to be taken in case of a detected failure, but safe defaults should be used."}]}, {"ID": "DX-165", "Entries": [{"IntroText": "The IPSEC specification is complex, which resulted in bugs, partial implementations, and incompatibilities between vendors."}]}, {"ID": "DX-166", "Entries": [{"IntroText": "When executable library files are used on web servers, which is common in PHP applications, the developer might perform an access check in any user-facing executable, and omit the access check from the library file itself. By directly requesting the library file (CWE-425), an attacker can bypass this access check."}]}, {"ID": "DX-167", "Entries": [{"IntroText": "Single sign-on technology is intended to make it easier for users to access multiple resources or domains without having to authenticate each time. While this is highly convenient for the user and attempts to address problems with psychological acceptability, it also means that a compromise of a user's credentials can provide immediate access to all other resources or domains."}]}, {"ID": "DX-168", "Entries": [{"IntroText": "The design of TCP relies on the secrecy of Initial Sequence Numbers (ISNs), as originally covered in CVE-1999-0077 [REF-542]. If ISNs can be guessed (due to predictability, CWE-330) or sniffed (due to lack of encryption during transmission, CWE-312), then an attacker can hijack or spoof connections. Many TCP implementations have had variations of this problem over the years, including CVE-2004-0641, CVE-2002-1463, CVE-2001-0751, CVE-2001-0328, CVE-2001-0288, CVE-2001-0163, CVE-2001-0162, CVE-2000-0916, and CVE-2000-0328."}, {"Reference": "REF-542"}]}, {"ID": "DX-169", "Entries": [{"IntroText": "The \"SweynTooth\" vulnerabilities in Bluetooth Low Energy (BLE) software development kits (SDK) were found to affect multiple Bluetooth System-on-Chip (SoC) manufacturers. These SoCs were used by many products such as medical devices, Smart Home devices, wearables, and other IoT devices. [REF-1314] [REF-1315]"}]}], "ObservedExamples": [{"Reference": "CVE-2019-6260", "Description": "Baseboard Management Controller (BMC) device implements Advanced High-performance Bus (AHB) bridges that do not require authentication for arbitrary read and write access to the BMC's physical address space from the host, and possibly the network [REF-1138].", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-6260"}, {"Reference": "CVE-2007-5277", "Description": "The failure of connection attempts in a web browser resets DNS pin restrictions. An attacker can then bypass the same origin policy by rebinding a domain name to a different IP address. This was an attempt to \"fail functional.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-5277"}, {"Reference": "CVE-2006-7142", "Description": "Hard-coded cryptographic key stored in executable program.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-7142"}, {"Reference": "CVE-2007-0408", "Description": "Server does not properly validate client certificates when reusing cached connections.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0408"}], "MappingNotes": {"Usage": "Discouraged", "Rationale": "This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Maintenance", "Note": "The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions."}], "Top25Examples": [{"Reference": "CVE-2022-30683", "Description": "Adobe Experience Manager versions 6.5.13.0 (and earlier) is affected by a Violation of Secure Design Principles vulnerability that could lead to bypass the security feature of the encryption mechanism in the backend . An attacker could leverage this vulnerability to decrypt secrets, however, this is a high-complexity attack as the threat actor needs to already possess those secrets. Exploitation of this issue requires low-privilege access to AEM."}, {"Reference": "CVE-2022-28244", "Description": "Acrobat Reader DC versions 22.001.20085 (and earlier), 20.005.3031x (and earlier) and 17.012.30205 (and earlier) is affected by a violation of secure design principles through bypassing the content security policy, which could result in an attacker sending arbitrarily configured requests to the cross-origin attack target domain. Exploitation requires user interaction in which the victim needs to access a crafted PDF file on an attacker's server."}, {"Reference": "CVE-2022-30707", "Description": "Violation of secure design principles exists in the communication of CAMS for HIS. Affected products and versions are CENTUM series where LHS4800 is installed (CENTUM CS 3000 and CENTUM CS 3000 Small R3.08.10 to R3.09.00), CENTUM series where CAMS function is used (CENTUM VP, CENTUM VP Small, and CENTUM VP Basic R4.01.00 to R4.03.00), CENTUM series regardless of the use of CAMS function (CENTUM VP, CENTUM VP Small, and CENTUM VP Basic R5.01.00 to R5.04.20 and R6.01.00 to R6.09.00), Exaopc R3.72.00 to R3.80.00 (only if NTPF100-S6 'For CENTUM VP Support CAMS for HIS' is installed), B/M9000 CS R5.04.01 to R5.05.01, and B/M9000 VP R6.01.01 to R8.03.01). If an adjacent attacker successfully compromises a computer using CAMS for HIS software, they can use credentials from the compromised machine to access data from another machine using CAMS for HIS software. This can lead to a disabling of CAMS for HIS software functions on any affected machines, or information disclosure/alteration."}]}
{"ID": "66", "Name": "Improper Handling of File Names that Identify Virtual Resources", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product does not handle or incorrectly handles a file name that identifies a \"virtual\" resource that is not directly specified within the directory that is associated with the file name, causing the product to perform file-based operations on a resource that is not a file.", "ExtendedDescription": "Virtual file names are represented like normal file names, but they are effectively aliases for other resources that do not behave like normal files. Depending on their functionality, they could be alternate entities. They are not necessarily listed in directories.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "706", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Other"]}], "DetectionMethods": [{"Method": "Automated Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Automated Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tWeb Application Scanner\n\t\tWeb Services Scanner\n\t\tDatabase Scanners", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source\n\t\tManual Source Code Review (not inspections)", "Effectiveness": "High"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer", "Effectiveness": "SOAR Partial"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)", "Effectiveness": "High"}], "ObservedExamples": [{"Reference": "CVE-1999-0278", "Description": "In IIS, remote attackers can obtain source code for ASP files by appending \"::$DATA\" to the URL.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0278"}, {"Reference": "CVE-2004-1084", "Description": "Server allows remote attackers to read files and resource fork content via HTTP requests to certain special file names related to multiple data streams in HFS+.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1084"}, {"Reference": "CVE-2002-0106", "Description": "Server allows remote attackers to cause a denial of service via a series of requests to .JSP files that contain an MS-DOS device name.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0106"}], "FunctionalAreas": ["File Processing"], "AffectedResources": ["File or Directory"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "662", "Name": "Improper Synchronization", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product utilizes multiple threads or processes to allow temporary access to a shared resource that can only be exclusive to one process at a time, but it does not properly synchronize these actions, which might cause simultaneous accesses of this resource by multiple threads or processes.", "ExtendedDescription": "\n\nSynchronization refers to a variety of behaviors and mechanisms that allow two or more independently-operating processes or threads to ensure that they operate on shared resources in predictable ways that do not interfere with each other. Some shared resource operations cannot be executed atomically; that is, multiple steps must be guaranteed to execute sequentially, without any interference by other processes. Synchronization mechanisms vary widely, but they may include locking, mutexes, and semaphores. When a multi-step operation on a shared resource cannot be guaranteed to execute independent of interference, then the resulting behavior can be unpredictable. Improper synchronization could lead to data or memory corruption, denial of service, etc.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "664", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "691", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "362", "ViewID": "1000"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Other"], "Impact": ["Modify Application Data", "Read Application Data", "Alter Execution Logic"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Use industry standard APIs to synchronize your code."}], "DemonstrativeExamples": [{"ID": "DX-24", "Entries": [{"IntroText": "The following function attempts to acquire a lock in order to perform operations on a shared resource."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid f(pthread_mutex_t *mutex) {\n\t\t\tpthread_mutex_lock(mutex);\n```\n/* access shared resource */* \n\t\t\t\n\t\t\t\n\t\t\tpthread_mutex_unlock(mutex);}"}, {"BodyText": "However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior."}, {"BodyText": "In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n\tint f(pthread_mutex_t *mutex) {\n\t\t\tint result;\n\t\t\tresult = pthread_mutex_lock(mutex);\n\t\t\tif (0 != result)\n\t\t\t\treturn result;\n```\n/* access shared resource */* \n\t\t\t\n\t\t\t\n\t\t\treturn pthread_mutex_unlock(mutex);}"}]}, {"ID": "DX-170", "Entries": [{"IntroText": "The following code intends to fork a process, then have both the parent and child processes print a single line."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tstatic void print (char * string) {\n\t\t\tchar * word;\n\t\t\tint counter;\n\t\t\tfor (word = string; counter = *word++; ) {\n\t\t\t\t\tputc(counter, stdout);\n\t\t\t\t\tfflush(stdout);\n```\n/* Make timing window a little larger... */* \n\t\t\t\t\t\n\t\t\t\t\tsleep(1);}}\n\t\n\tint main(void) {\n\t```\n\t\t\tpid_t pid;\n\t\t\tpid = fork();\n\t\t\tif (pid == -1) {\n\t\t\t\texit(-2);\n\t\t\t}\n\t\t\telse if (pid == 0) {\n\t\t\t\tprint(\"child\\n\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprint(\"PARENT\\n\");\n\t\t\t}\n\t\t\texit(0);\n\t}\n```"}, {"BodyText": "One might expect the code to print out something like:"}, {"BodyText": "```\n\t\tPARENT\n\t\tchild\n```"}, {"BodyText": "However, because the parent and child are executing concurrently, and stdout is flushed each time a character is printed, the output might be mixed together, such as:"}, {"BodyText": "```\n\t\tPcAhRiElNdT\n\t\t[blank line]\n\t\t[blank line]\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2021-1782", "Description": "Chain: improper locking (CWE-667) leads to race condition (CWE-362), as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-1782"}, {"Reference": "CVE-2009-0935", "Description": "Attacker provides invalid address to a memory-reading function, causing a mutex to be unlocked twice", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0935"}], "RelatedAttackPatterns": ["25", "26", "27", "29"], "MappingNotes": {"Usage": "Discouraged", "Rationale": "This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Maintenance", "Note": "Deeper research is necessary for synchronization and related mechanisms, including locks, mutexes, semaphores, and other mechanisms. Multiple entries are dependent on this research, which includes relationships to concurrency, race conditions, reentrant functions, etc. CWE-662 and its children - including CWE-667, CWE-820, CWE-821, and others - may need to be modified significantly, along with their relationships."}], "Top25Examples": [{"Reference": "CVE-2022-2962", "Description": "A DMA reentrancy issue was found in the Tulip device emulation in QEMU. When Tulip reads or writes to the rx/tx descriptor or copies the rx/tx frame, it doesn't check whether the destination address is its own MMIO address. This can cause the device to trigger MMIO handlers multiple times, possibly leading to a stack or heap overflow. A malicious guest could use this flaw to crash the QEMU process on the host, resulting in a denial of service condition."}, {"Reference": "CVE-2022-32609", "Description": "In vcu, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07203410; Issue ID: ALPS07203410."}, {"Reference": "CVE-2022-32610", "Description": "In vcu, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07203476; Issue ID: ALPS07203476."}, {"Reference": "CVE-2022-32642", "Description": "In ccd, there is a possible memory corruption due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07326547; Issue ID: ALPS07326547."}, {"Reference": "CVE-2022-32643", "Description": "In ccd, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07341261; Issue ID: ALPS07341261."}, {"Reference": "CVE-2022-32644", "Description": "In vow, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07494473; Issue ID: ALPS07494473."}, {"Reference": "CVE-2022-32648", "Description": "In disp, there is a possible use after free due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06535964; Issue ID: ALPS06535964."}, {"Reference": "CVE-2022-32645", "Description": "In vow, there is a possible information disclosure due to a race condition. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07494477; Issue ID: ALPS07494477."}]}
{"ID": "663", "Name": "Use of a Non-reentrant Function in a Concurrent Context", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product calls a non-reentrant function in a concurrent context in which a competing code sequence (e.g. thread or signal handler) may have an opportunity to call the same function or otherwise influence its state.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "662", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Other"], "Impact": ["Modify Memory", "Read Memory", "Modify Application Data", "Read Application Data", "Alter Execution Logic"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Use reentrant functions if available."}, {"Phase": ["Implementation"], "Description": "Add synchronization to your non-reentrant function."}, {"Phase": ["Implementation"], "Description": "In Java, use the ReentrantLock Class."}], "DemonstrativeExamples": [{"ID": "DX-171", "Entries": [{"IntroText": "In this example, a signal handler uses syslog() to log a message:"}, {"Nature": "Bad", "ExampleCode": "```\n\tchar *message;\n\tvoid sh(int dummy) {\n\t\tsyslog(LOG_NOTICE,\"%s\\n\",message);\n\t\tsleep(10);\n\t\texit(0);\n\t}\n\tint main(int argc,char* argv[]) {\n\t\t...\n\t\tsignal(SIGHUP,sh);\n\t\tsignal(SIGTERM,sh);\n\t\tsleep(10);\n\t\texit(0);\n\t}\n\t\tIf the execution of the first call to the signal handler is suspended after invoking syslog(), and the signal handler is called a second time, the memory allocated by syslog() enters an undefined, and possibly, exploitable state.\n```"}]}, {"ID": "DX-172", "Entries": [{"IntroText": "The following code relies on getlogin() to determine whether or not a user is trusted. It is easily subverted."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tpwd = getpwnam(getlogin());\n\tif (isTrustedGroup(pwd->pw_gid)) {\n\t\tallow();\n\t} else {\n\t\tdeny();\n\t}\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2001-1349", "Description": "unsafe calls to library functions from signal handler", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1349"}, {"Reference": "CVE-2004-2259", "Description": "SIGCHLD signal to FTP server can cause crash under heavy load while executing non-reentrant functions like malloc/free.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2259"}], "RelatedAttackPatterns": ["29"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "664", "Name": "Improper Control of a Resource Through its Lifetime", "Abstraction": "Pillar", "Structure": "Simple", "Status": "Draft", "Description": "The product does not maintain or incorrectly maintains control over a resource throughout its lifetime of creation, use, and release.", "ExtendedDescription": "\n\nResources often have explicit instructions on how to be created, used and destroyed. When code does not follow these instructions, it can lead to unexpected behaviors and potentially exploitable states.\n\n\nEven without explicit instructions, various principles are expected to be adhered to, such as \"Do not use an object until after its creation is complete,\" or \"do not use an object after it has been slated for destruction.\"\n", "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Other"]}], "PotentialMitigations": [{"Phase": ["Testing"], "Description": "Use Static analysis tools to check for unreleased resources."}], "ObservedExamples": [{"Reference": "CVE-2018-1000613", "Description": "Cryptography API uses unsafe reflection when deserializing a private key", "Link": "https://www.cve.org/CVERecord?id=CVE-2018-1000613"}, {"Reference": "CVE-2022-21668", "Description": "Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-21668"}], "RelatedAttackPatterns": ["196", "21", "60", "61", "62"], "MappingNotes": {"Usage": "Discouraged", "Rationale": "This CWE entry is high-level when lower-level children are available.", "Comments": "Consider children or descendants of this entry instead.", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Maintenance", "Note": "More work is needed on this entry and its children. There are perspective/layering issues; for example, one breakdown is based on lifecycle phase (CWE-404, CWE-665), while other children are independent of lifecycle, such as CWE-400. Others do not specify as many bases or variants, such as CWE-704, which primarily covers numbers at this stage."}], "Top25Examples": [{"Reference": "CVE-2022-22249", "Description": "An Improper Control of a Resource Through its Lifetime vulnerability in the Packet Forwarding Engine (PFE) of Juniper Networks Junos OS on MX Series allows an unauthenticated adjacent attacker to cause a Denial of Service (DoS). When there is a continuous mac move a memory corruption causes one or more FPCs to crash and reboot. These MAC moves can be between two local interfaces or between core/EVPN and local interface. The below error logs can be seen in PFE syslog when this issue happens: xss_event_handler(1071): EA[0:0]_PPE 46.xss[0] ADDR Error. ppe_error_interrupt(4298): EA[0:0]_PPE 46 Errors sync xtxn error xss_event_handler(1071): EA[0:0]_PPE 1.xss[0] ADDR Error. ppe_error_interrupt(4298): EA[0:0]_PPE 1 Errors sync xtxn error xss_event_handler(1071): EA[0:0]_PPE 2.xss[0] ADDR Error. This issue affects Juniper Networks Junos OS on MX Series: All versions prior to 15.1R7-S13; 19.1 versions prior to 19.1R3-S9; 19.2 versions prior to 19.2R3-S6; 19.3 versions prior to 19.3R3-S6; 19.4 versions prior to 19.4R2-S7, 19.4R3-S8; 20.1 version 20.1R1 and later versions; 20.2 versions prior to 20.2R3-S5; 20.3 versions prior to 20.3R3-S5; 20.4 versions prior to 20.4R3-S2; 21.1 versions prior to 21.1R3; 21.2 versions prior to 21.2R3; 21.3 versions prior to 21.3R2."}, {"Reference": "CVE-2022-22250", "Description": "An Improper Control of a Resource Through its Lifetime vulnerability in Packet Forwarding Engine (PFE) of Juniper Networks Junos OS and Junos OS Evolved allows unauthenticated adjacent attacker to cause a Denial of Service (DoS). In an EVPN-MPLS scenario, if MAC is learned locally on an access interface but later a request to delete is received indicating that the MAC was learnt remotely, this can lead to memory corruption which can result in line card crash and reload. This issue affects: Juniper Networks Junos OS All versions 17.3R1 and later versions prior to 19.2R3-S5; 19.3 versions prior to 19.3R3-S5; 19.4 versions prior to 19.4R2-S6, 19.4R3-S8; 20.1 version 20.1R1 and later versions; 20.2 versions prior to 20.2R3-S4; 20.3 versions prior to 20.3R3-S3; 20.4 versions prior to 20.4R3-S3; 21.1 versions prior to 21.1R3-S1; 21.2 versions prior to 21.2R3; 21.3 versions prior to 21.3R2; 21.4 versions prior to 21.4R1-S1, 21.4R2. Juniper Networks Junos OS Evolved All versions prior to 20.4R3-S3-EVO; 21.1-EVO version 21.1R1-EVO and later versions; 21.2-EVO versions prior to 21.2R3-EVO; 21.3-EVO versions prior to 21.3R2-EVO; 21.4-EVO versions prior to 21.4R1-S1-EVO, 21.4R2-EVO. This issue does not affect Juniper Networks Junos OS versions prior to 17.3R1."}, {"Reference": "CVE-2022-27518", "Description": "Unauthenticated remote arbitrary code execution "}, {"Reference": "CVE-2022-39949", "Description": "An improper control of a resource through its lifetime vulnerability [CWE-664] in FortiEDR CollectorWindows 4.0.0 through 4.1, 5.0.0 through 5.0.3.751, 5.1.0 may allow a privileged user to terminate the FortiEDR processes with special tools and bypass the EDR protection."}, {"Reference": "CVE-2021-43204", "Description": "A improper control of a resource through its lifetime in Fortinet FortiClientWindows version 6.4.1 and 6.4.0, version 6.2.9 and below, version 6.0.10 and below allows attacker to cause a complete denial of service of its components via changes of directory access permissions."}, {"Reference": "CVE-2022-23446", "Description": "A improper control of a resource through its lifetime in Fortinet FortiEDR version 5.0.3 and earlier allows attacker to make the whole application unresponsive via changing its root directory access permission."}]}
{"ID": "665", "Name": "Improper Initialization", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product does not initialize or incorrectly initializes a resource, which might leave the resource in an unexpected state when it is accessed or used.", "ExtendedDescription": "This can have security implications when the associated resource is expected to have certain properties or values, such as a variable that determines whether a user has been authenticated or not.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "664", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}, {"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "This weakness can occur in code paths that are not well-tested, such as rare error conditions. This is because the use of uninitialized data would be noticed as a bug during frequently-used functionality."}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Memory", "Read Application Data"], "Note": "When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party."}, {"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"], "Note": "If security-critical decisions rely on a variable having a \"0\" or equivalent value, and the programming language performs this initialization on behalf of the programmer, then a bypass of security may occur."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "The uninitialized data may contain values that cause program flow to change in ways that the programmer did not intend. For example, if an uninitialized variable is used as an array index in C, then its previous contents may produce an index that is outside the range of the array, possibly causing a crash or an exit in other environments."}], "DetectionMethods": [{"DetectionMethodID": "DM-2", "Method": "Automated Dynamic Analysis", "Description": "\n\nThis weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\n\nInitialization problems may be detected with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n", "Effectiveness": "Moderate"}, {"DetectionMethodID": "DM-12", "Method": "Manual Dynamic Analysis", "Description": "Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself."}, {"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-3", "Phase": ["Requirements"], "Strategy": "Language Selection", "Description": "\n\nUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nFor example, in Java, if the programmer does not explicitly initialize a variable, then the code could produce a compile-time error (if the variable is local) or automatically initialize the variable to the default value for the variable's type. In Perl, if explicit initialization is not performed, then a default value of undef is assigned, which is interpreted as 0, false, or an equivalent value depending on the context in which the variable is accessed.\n"}, {"Phase": ["Architecture and Design"], "Description": "Identify all variables and data stores that receive information from external sources, and apply input validation to make sure that they are only initialized to expected values."}, {"Phase": ["Implementation"], "Description": "Explicitly initialize all your variables and other data stores, either during declaration or just before the first usage."}, {"Phase": ["Implementation"], "Description": "Pay close attention to complex conditionals that affect initialization, since some conditions might not perform the initialization."}, {"Phase": ["Implementation"], "Description": "Avoid race conditions (CWE-362) during initialization routines."}, {"Phase": ["Build and Compilation"], "Description": "Run or compile your product with settings that generate warnings about uninitialized variables or data."}, {"Phase": ["Testing"], "Description": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."}], "DemonstrativeExamples": [{"ID": "DX-105", "Entries": [{"IntroText": "Here, a boolean initiailized field is consulted to ensure that initialization tasks are only completed once. However, the field is mistakenly set to true during static initialization, so the initialization code is never reached."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tprivate boolean initialized = true;\n\tpublic void someMethod() {\n\t\t\tif (!initialized) {\n```\n// perform initialization tasks* \n\t\t\t\t\t...\n\t\t\t\t\t\n\t\t\t\t\tinitialized = true;}"}]}, {"ID": "DX-54", "Entries": [{"IntroText": "The following code intends to limit certain operations to the administrator only."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\t$username = GetCurrentUser();\n\t$state = GetStateData($username);\n\tif (defined($state)) {\n\t\t$uid = ExtractUserID($state);\n\t}\n```\n# do stuff* \n\tif ($uid == 0) {\n\t```\n\t\tDoAdminThings();\n\t}\n```"}, {"BodyText": "If the application is unable to extract the state information - say, due to a database timeout - then the $uid variable will not be explicitly set by the programmer. This will cause $uid to be regarded as equivalent to \"0\" in the conditional, allowing the original user to perform administrator actions. Even if the attacker cannot directly influence the state data, unexpected errors could cause incorrect privileges to be assigned to a user just by accident."}]}, {"ID": "DX-106", "Entries": [{"IntroText": "The following code intends to concatenate a string to a variable and print the string."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar str[20];\n\tstrcat(str, \"hello world\");\n\tprintf(\"%s\", str);\n```"}, {"BodyText": "This might seem innocent enough, but str was not initialized, so it contains random memory. As a result, str[0] might not contain the null terminator, so the copy might start at an offset other than 0. The consequences can vary, depending on the underlying memory."}, {"BodyText": "If a null terminator is found before str[8], then some bytes of random garbage will be printed before the \"hello world\" string. The memory might contain sensitive information from previous uses, such as a password (which might occur as a result of CWE-14 or CWE-244). In this example, it might not be a big deal, but consider what could happen if large amounts of memory are printed out before the null terminator is found."}, {"BodyText": "If a null terminator isn't found before str[8], then a buffer overflow could occur, since strcat will first look for the null terminator, then copy 12 bytes starting with that location. Alternately, a buffer over-read might occur (CWE-126) if a null terminator isn't found before the end of the memory segment is reached, leading to a segmentation fault and crash."}]}], "ObservedExamples": [{"Reference": "CVE-2001-1471", "Description": "chain: an invalid value prevents a library file from being included, skipping initialization of key variables, leading to resultant eval injection.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1471"}, {"Reference": "CVE-2008-3637", "Description": "Improper error checking in protection mechanism produces an uninitialized variable, allowing security bypass and code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3637"}, {"Reference": "CVE-2008-4197", "Description": "Use of uninitialized memory may allow code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4197"}, {"Reference": "CVE-2008-2934", "Description": "Free of an uninitialized pointer leads to crash and possible code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2934"}, {"Reference": "CVE-2007-3749", "Description": "OS kernel does not reset a port when starting a setuid program, allowing local users to access the port and gain privileges.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-3749"}, {"Reference": "CVE-2008-0063", "Description": "Product does not clear memory contents when generating an error message, leading to information leak.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0063"}, {"Reference": "CVE-2008-0062", "Description": "Lack of initialization triggers NULL pointer dereference or double-free.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0062"}, {"Reference": "CVE-2008-0081", "Description": "Uninitialized variable leads to code execution in popular desktop application.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0081"}, {"Reference": "CVE-2008-3688", "Description": "chain: Uninitialized variable leads to infinite loop.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3688"}, {"Reference": "CVE-2008-3475", "Description": "chain: Improper initialization leads to memory corruption.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3475"}, {"Reference": "CVE-2008-5021", "Description": "Composite: race condition allows attacker to modify an object while it is still being initialized, causing software to access uninitialized memory.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5021"}, {"Reference": "CVE-2005-1036", "Description": "Chain: Bypass of access restrictions due to improper authorization (CWE-862) of a user results from an improperly initialized (CWE-909) I/O permission bitmap", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1036"}, {"Reference": "CVE-2008-3597", "Description": "chain: game server can access player data structures before initialization has happened leading to NULL dereference", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3597"}, {"Reference": "CVE-2009-2692", "Description": "chain: uninitialized function pointers can be dereferenced allowing code execution", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2692"}, {"Reference": "CVE-2009-0949", "Description": "chain: improper initialization of memory can lead to NULL dereference", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0949"}, {"Reference": "CVE-2009-3620", "Description": "chain: some unprivileged ioctls do not verify that a structure has been initialized before invocation, leading to NULL dereference", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-3620"}], "RelatedAttackPatterns": ["26", "29"], "MappingNotes": {"Usage": "Discouraged", "Rationale": "This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Top25Examples": [{"Reference": "CVE-2022-2620", "Description": "Use after free in WebUI in Google Chrome on Chrome OS prior to 104.0.5112.79 allowed a remote attacker who convinced a user to engage in specific user interactions to potentially exploit heap corruption via specific UI interactions."}, {"Reference": "CVE-2022-2472", "Description": "Improper Initialization vulnerability in the local server component of EZVIZ CS-C6N-A0-1C2WFR allows a local attacker to read the contents of the memory space containing the encrypted admin password. This issue affects: EZVIZ CS-C6N-A0-1C2WFR versions prior to 5.3.0 build 220428."}, {"Reference": "CVE-2022-29695", "Description": "Unicorn Engine v2.0.0-rc7 contains memory leaks caused by an incomplete unicorn engine initialization."}, {"Reference": "CVE-2022-46505", "Description": "An issue in MatrixSSL 4.5.1-open and earlier leads to failure to securely check the SessionID field, resulting in the misuse of an all-zero MasterSecret that can decrypt secret data."}]}
{"ID": "666", "Name": "Operation on Resource in Wrong Phase of Lifetime", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product performs an operation on a resource at the wrong phase of the resource's lifecycle, which can lead to unexpected behaviors.", "ExtendedDescription": "A resource's lifecycle includes several phases: initialization, use, and release. For each phase, it is important to follow the specifications outlined for how to operate on the resource and to ensure that the resource is in the expected phase. Otherwise, if a resource is in one phase but the operation is not valid for that phase (i.e., an incorrect phase of the resource's lifetime), then this can produce resultant weaknesses. For example, using a resource before it has been fully initialized could cause corruption or incorrect data to be used.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "664", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Other"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Follow the resource's lifecycle from creation to release."}], "DemonstrativeExamples": [{"ID": "DX-149", "Entries": [{"IntroText": "The following code shows a simple example of a double free vulnerability."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t char* ptr = (char*)malloc (SIZE);\n\t ...\n\t if (abrt) { \n\t\t free(ptr); \n\t }\n\t ...\n\t free(ptr); \n```"}, {"BodyText": "Double free vulnerabilities have two common (and sometimes overlapping) causes:"}, {"BodyText": "- Error conditions and other exceptional circumstances\n\n  - Confusion over which part of the program is responsible for freeing the memory"}, {"BodyText": "Although some double free vulnerabilities are not much more complicated than this example, most are spread out across hundreds of lines of code or even different files. Programmers seem particularly susceptible to freeing global variables more than once."}]}], "ObservedExamples": [{"Reference": "CVE-2006-5051", "Description": "Chain: Signal handler contains too much functionality (CWE-828), introducing a race condition (CWE-362) that leads to a double free (CWE-415).", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-5051"}], "MappingNotes": {"Usage": "Discouraged", "Rationale": "This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}}
{"ID": "667", "Name": "Improper Locking", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product does not properly acquire or release a lock on a resource, leading to unexpected resource state changes and behaviors.", "ExtendedDescription": "\n\nLocking is a type of synchronization behavior that ensures that multiple independently-operating processes or threads do not interfere with each other when accessing the same resource. All processes/threads are expected to follow the same steps for locking. If these steps are not followed precisely - or if no locking is done at all - then another process/thread could modify the shared resource in a way that is not visible or predictable to the original process. This can lead to data or memory corruption, denial of service, etc.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "662", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "662", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "662", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "662", "ViewID": "1340", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Resource Consumption (CPU)"], "Note": "Inconsistent locking discipline can lead to deadlock."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Strategy": "Libraries or Frameworks", "Description": "Use industry standard APIs to implement locking mechanism."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following Java snippet, methods are defined to get and set a long field in an instance of a class that is shared across multiple threads. Because operations on double and long are nonatomic in Java, concurrent access may cause unexpected behavior. Thus, all operations on long and double fields should be synchronized."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tprivate long someLongValue;\n\tpublic long getLongValue() {\n\t\treturn someLongValue;\n\t}\n\tpublic void setLongValue(long l) {\n\t\tsomeLongValue = l;\n\t}\n```"}]}, {"ID": "DX-69", "Entries": [{"IntroText": "This code tries to obtain a lock for a file, then writes to it."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\tfunction writeToLog($message){\n\t\t$logfile = fopen(\"logFile.log\", \"a\");\n```\n//attempt to get logfile lock* \n\t\tif (flock($logfile, LOCK_EX)) {\n\t\t```\n\t\t\tfwrite($logfile,$message);\n```\n// unlock logfile* \n\t\t\tflock($logfile, LOCK_UN);}\n\t\telse {\n\t\t```\n\t\t\tprint \"Could not obtain lock on logFile.log, message not recorded\\n\";\n\t\t}\n\t}\n\tfclose($logFile);\n```"}, {"BodyText": "PHP by default will wait indefinitely until a file lock is released. If an attacker is able to obtain the file lock, this code will pause execution, possibly leading to denial of service for other users. Note that in this case, if an attacker can perform an flock() on the file, they may already have privileges to destroy the log file. However, this still impacts the execution of other programs that depend on flock()."}]}, {"ID": "DX-24", "Entries": [{"IntroText": "The following function attempts to acquire a lock in order to perform operations on a shared resource."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid f(pthread_mutex_t *mutex) {\n\t\t\tpthread_mutex_lock(mutex);\n```\n/* access shared resource */* \n\t\t\t\n\t\t\t\n\t\t\tpthread_mutex_unlock(mutex);}"}, {"BodyText": "However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior."}, {"BodyText": "In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n\tint f(pthread_mutex_t *mutex) {\n\t\t\tint result;\n\t\t\tresult = pthread_mutex_lock(mutex);\n\t\t\tif (0 != result)\n\t\t\t\treturn result;\n```\n/* access shared resource */* \n\t\t\t\n\t\t\t\n\t\t\treturn pthread_mutex_unlock(mutex);}"}]}, {"ID": "DX-70", "Entries": [{"IntroText": "It may seem that the following bit of code achieves thread safety while avoiding unnecessary synchronization..."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tif (helper == null) {\n\t\t\tsynchronized (this) {\n\t\t\t\tif (helper == null) {\n\t\t\t\t\thelper = new Helper();\n\t\t\t\t}\n\t\t\t}\n\t}\n\treturn helper;\n```"}, {"BodyText": "The programmer wants to guarantee that only one Helper() object is ever allocated, but does not want to pay the cost of synchronization every time this code is called."}, {"BodyText": "Suppose that helper is not initialized. Then, thread A sees that helper==null and enters the synchronized block and begins to execute:"}, {"Nature": "Bad", "ExampleCode": "```\n\thelper = new Helper();\n```"}, {"BodyText": "If a second thread, thread B, takes over in the middle of this call and helper has not finished running the constructor, then thread B may make calls on helper while its fields hold incorrect values."}]}], "ObservedExamples": [{"Reference": "CVE-2021-1782", "Description": "Chain: improper locking (CWE-667) leads to race condition (CWE-362), as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-1782"}, {"Reference": "CVE-2009-0935", "Description": "Attacker provides invalid address to a memory-reading function, causing a mutex to be unlocked twice", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0935"}, {"Reference": "CVE-2010-4210", "Description": "function in OS kernel unlocks a mutex that was not previously locked, causing a panic or overwrite of arbitrary memory.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-4210"}, {"Reference": "CVE-2008-4302", "Description": "Chain: OS kernel does not properly handle a failure of a function call (CWE-755), leading to an unlock of a resource that was not locked (CWE-832), with resultant crash.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4302"}, {"Reference": "CVE-2009-1243", "Description": "OS kernel performs an unlock in some incorrect circumstances, leading to panic.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1243"}, {"Reference": "CVE-2009-2857", "Description": "OS deadlock", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2857"}, {"Reference": "CVE-2009-1961", "Description": "OS deadlock involving 3 separate functions", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1961"}, {"Reference": "CVE-2009-2699", "Description": "deadlock in library", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2699"}, {"Reference": "CVE-2009-4272", "Description": "deadlock triggered by packets that force collisions in a routing table", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-4272"}, {"Reference": "CVE-2002-1850", "Description": "read/write deadlock between web server and script", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1850"}, {"Reference": "CVE-2004-0174", "Description": "web server deadlock involving multiple listening connections", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0174"}, {"Reference": "CVE-2009-1388", "Description": "multiple simultaneous calls to the same function trigger deadlock.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1388"}, {"Reference": "CVE-2006-5158", "Description": "chain: other weakness leads to NULL pointer dereference (CWE-476) or deadlock (CWE-833).", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-5158"}, {"Reference": "CVE-2006-4342", "Description": "deadlock when an operation is performed on a resource while it is being removed.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4342"}, {"Reference": "CVE-2006-2374", "Description": "Deadlock in device driver triggered by using file handle of a related device.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-2374"}, {"Reference": "CVE-2006-2275", "Description": "Deadlock when large number of small messages cannot be processed quickly enough.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-2275"}, {"Reference": "CVE-2005-3847", "Description": "OS kernel has deadlock triggered by a signal during a core dump.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3847"}, {"Reference": "CVE-2005-3106", "Description": "Race condition leads to deadlock.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3106"}, {"Reference": "CVE-2005-2456", "Description": "Chain: array index error (CWE-129) leads to deadlock (CWE-833)", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2456"}, {"Reference": "CVE-2001-0682", "Description": "Program can not execute when attacker obtains a mutex.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0682"}, {"Reference": "CVE-2002-1914", "Description": "Program can not execute when attacker obtains a lock on a critical output file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1914"}, {"Reference": "CVE-2002-1915", "Description": "Program can not execute when attacker obtains a lock on a critical output file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1915"}, {"Reference": "CVE-2002-0051", "Description": "Critical file can be opened with exclusive read access by user, preventing application of security policy. Possibly related to improper permissions, large-window race condition.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0051"}, {"Reference": "CVE-2000-0338", "Description": "Chain: predictable file names used for locking, allowing attacker to create the lock beforehand. Resultant from permissions and randomness.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0338"}, {"Reference": "CVE-2000-1198", "Description": "Chain: Lock files with predictable names. Resultant from randomness.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1198"}, {"Reference": "CVE-2002-1869", "Description": "Product does not check if it can write to a log file, allowing attackers to avoid logging by accessing the file using an exclusive lock. Overlaps unchecked error condition. This is not quite CWE-412, but close.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1869"}], "RelatedAttackPatterns": ["25", "26", "27"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Maintenance", "Note": "Deeper research is necessary for synchronization and related mechanisms, including locks, mutexes, semaphores, and other mechanisms. Multiple entries are dependent on this research, which includes relationships to concurrency, race conditions, reentrant functions, etc. CWE-662 and its children - including CWE-667, CWE-820, CWE-821, and others - may need to be modified significantly, along with their relationships."}], "Top25Examples": [{"Reference": "CVE-2022-20016", "Description": "In vow driver, there is a possible memory corruption due to improper locking. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05862986; Issue ID: ALPS05862986."}, {"Reference": "CVE-2022-21775", "Description": "In sched driver, there is a possible use after free due to improper locking. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06479032; Issue ID: ALPS06479032."}, {"Reference": "CVE-2022-26452", "Description": "In isp, there is a possible use after free due to improper locking. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07262305; Issue ID: ALPS07262305."}, {"Reference": "CVE-2022-26473", "Description": "In vdec fmt, there is a possible use after free due to improper locking. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07342197; Issue ID: ALPS07342197."}, {"Reference": "CVE-2022-31748", "Description": "Mozilla developers Gabriele Svelto, Timothy Nikkel, Randell Jesup, Jon Coppeard, and the Mozilla Fuzzing Team reported memory safety bugs present in Firefox 100. Some of these bugs showed evidence of memory corruption and we presume that with enough effort some of these could have been exploited to run arbitrary code. This vulnerability affects Firefox < 101."}, {"Reference": "CVE-2022-32811", "Description": "A memory corruption vulnerability was addressed with improved locking. This issue is fixed in macOS Monterey 12.5, macOS Big Sur 11.6.8, Security Update 2022-005 Catalina. An app may be able to execute arbitrary code with kernel privileges."}, {"Reference": "CVE-2022-39131", "Description": "In camera driver, there is a possible memory corruption due to improper locking. This could lead to local denial of service in kernel."}, {"Reference": "CVE-2022-42775", "Description": "In camera driver, there is a possible memory corruption due to improper locking. This could lead to local denial of service in kernel."}, {"Reference": "CVE-2022-26356", "Description": "Racy interactions between dirty vram tracking and paging log dirty hypercalls Activation of log dirty mode done by XEN_DMOP_track_dirty_vram (was named HVMOP_track_dirty_vram before Xen 4.9) is racy with ongoing log dirty hypercalls. A suitably timed call to XEN_DMOP_track_dirty_vram can enable log dirty while another CPU is still in the process of tearing down the structures related to a previously enabled log dirty mode (XEN_DOMCTL_SHADOW_OP_OFF). This is due to lack of mutually exclusive locking between both operations and can lead to entries being added in already freed slots, resulting in a memory leak."}, {"Reference": "CVE-2021-1782", "Description": "A race condition was addressed with improved locking. This issue is fixed in macOS Big Sur 11.2, Security Update 2021-001 Catalina, Security Update 2021-001 Mojave, watchOS 7.3, tvOS 14.4, iOS 14.4 and iPadOS 14.4. A malicious application may be able to elevate privileges. Apple is aware of a report that this issue may have been actively exploited.."}, {"Reference": "CVE-2021-0147", "Description": "Improper locking in the Power Management Controller (PMC) for some Intel Chipset firmware before versions pmc_fw_lbg_c1-21ww02a and pmc_fw_lbg_b0-21ww02a may allow a privileged user to potentially enable denial of service via local access."}, {"Reference": "CVE-2021-39640", "Description": "In __dwc3_gadget_ep0_queue of ep0.c, there is a possible out of bounds write due to improper locking. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-157294279References: N/A"}, {"Reference": "CVE-2021-39649", "Description": "In regmap_exit of regmap.c, there is a possible use-after-free due to improper locking. This could lead to local escalation of privilege in the kernel with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-174049006References: N/A"}, {"Reference": "CVE-2022-20153", "Description": "In rcu_cblist_dequeue of rcu_segcblist.c, there is a possible use-after-free due to improper locking. This could lead to local escalation of privilege in the kernel with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-222091980References: Upstream kernel"}, {"Reference": "CVE-2022-20376", "Description": "In trusty_log_seq_start of trusty-log.c, there is a possible use after free due to improper locking. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-216130110References: N/A"}, {"Reference": "CVE-2022-26451", "Description": "In ged, there is a possible use after free due to improper locking. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07202966; Issue ID: ALPS07202966."}, {"Reference": "CVE-2022-38690", "Description": "In camera driver, there is a possible memory corruption due to improper locking. This could lead to local denial of service in kernel."}, {"Reference": "CVE-2022-48216", "Description": "Uniswap Universal Router before 1.1.0 mishandles reentrancy. This would have allowed theft of funds."}]}
{"ID": "668", "Name": "Exposure of Resource to Wrong Sphere", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product exposes a resource to the wrong control sphere, providing unintended actors with inappropriate access to the resource.", "ExtendedDescription": "\n\nResources such as files and directories may be inadvertently exposed through mechanisms such as insecure permissions, or when a program accidentally operates on the wrong object. For example, a program may intend that private files can only be provided to a specific user. This effectively defines a control sphere that is intended to prevent attackers from accessing these private files. If the file permissions are insecure, then parties other than the user will be able to access those files.\n\n\nA separate control sphere might effectively require that the user can only access the private files, but not any other files on the system. If the program does not ensure that the user is only requesting private files, then the user might be able to access other files on the system.\n\n\nIn either case, the end result is that a resource has been exposed to the wrong party.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "664", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Other"], "Impact": ["Read Application Data", "Modify Application Data", "Other"]}], "MappingNotes": {"Usage": "Discouraged", "Rationale": "CWE-668 is high-level and is often misused as a catch-all when lower-level CWE IDs might be applicable. It is sometimes used for low-information vulnerability reports [REF-1287]. It is a level-1 Class (i.e., a child of a Pillar). It is not useful for trend analysis.", "Comments": "Closely analyze the specific mistake that is allowing the resource to be exposed, and perform a CWE mapping for that mistake.", "Reasons": ["Frequent Misuse", "Abstraction"]}, "Notes": [{"Type": "Theoretical", "Note": "A \"control sphere\" is a set of resources and behaviors that are accessible to a single actor, or a group of actors. A product's security model will typically define multiple spheres, possibly implicitly. For example, a server might define one sphere for \"administrators\" who can create new user accounts with subdirectories under /home/server/, and a second sphere might cover the set of users who can create or delete files within their own subdirectories. A third sphere might be \"users who are authenticated to the operating system on which the product is installed.\" Each sphere has different sets of actors and allowable behaviors."}], "Top25Examples": [{"Reference": "CVE-2022-0815", "Description": "Improper access control vulnerability in McAfee WebAdvisor Chrome and Edge browser extensions up to 8.1.0.1895 allows a remote attacker to gain access to McAfee WebAdvisor settings and other details about the user\u2019s system. This could lead to unexpected behaviors including; settings being changed, fingerprinting of the system leading to targeted scams, and not triggering the malicious software if McAfee software is detected."}, {"Reference": "CVE-2021-36710", "Description": "ToaruOS 1.99.2 is affected by incorrect access control via the kernel. Improper MMU management and having a low GDT address allows it to be mapped in userland. A call gate can then be written to escalate to CPL 0."}, {"Reference": "CVE-2021-38505", "Description": "Microsoft introduced a new feature in Windows 10 known as Cloud Clipboard which, if enabled, will record data copied to the clipboard to the cloud, and make it available on other computers in certain scenarios. Applications that wish to prevent copied data from being recorded in Cloud History must use specific clipboard formats; and Firefox before versions 94 and ESR 91.3 did not implement them. This could have caused sensitive data to be recorded to a user's Microsoft account. *This bug only affects Firefox for Windows 10+ with Cloud Clipboard enabled. Other operating systems are unaffected.*. This vulnerability affects Firefox < 94, Thunderbird < 91.3, and Firefox ESR < 91.3."}, {"Reference": "CVE-2021-44522", "Description": "A vulnerability has been identified in SiPass integrated V2.76 (All versions), SiPass integrated V2.80 (All versions), SiPass integrated V2.85 (All versions), Siveillance Identity V1.5 (All versions), Siveillance Identity V1.6 (All versions < V1.6.284.0). Affected applications insufficiently limit the access to the internal message broker system. This could allow an unauthenticated remote attacker to subscribe to arbitrary message queues."}, {"Reference": "CVE-2021-44523", "Description": "A vulnerability has been identified in SiPass integrated V2.76 (All versions), SiPass integrated V2.80 (All versions), SiPass integrated V2.85 (All versions), Siveillance Identity V1.5 (All versions), Siveillance Identity V1.6 (All versions < V1.6.284.0). Affected applications insufficiently limit the access to the internal activity feed database. This could allow an unauthenticated remote attacker to read, modify or delete activity feed entries."}, {"Reference": "CVE-2022-28160", "Description": "Jenkins Tests Selector Plugin 1.3.3 and earlier allows users with Item/Configure permission to read arbitrary files on the Jenkins controller."}, {"Reference": "CVE-2022-39015", "Description": "Under certain conditions, BOE AdminTools/ BOE SDK allows an attacker to access information which would otherwise be restricted."}, {"Reference": "CVE-2022-32249", "Description": "Under special integration scenario of SAP Business one and SAP HANA - version 10.0, an attacker can exploit HANA cockpit?s data volume to gain access to highly sensitive information (e.g., high privileged account credentials)"}, {"Reference": "CVE-2022-26121", "Description": "An exposure of resource to wrong sphere vulnerability [CWE-668] in FortiAnalyzer and FortiManager GUI 7.0.0 through 7.0.3, 6.4.0 through 6.4.8, 6.2.0 through 6.2.9, 6.0.0 through 6.0.11, 5.6.0 through 5.6.11 may allow an unauthenticated and remote attacker to access report template images via referencing the name in the URL path."}, {"Reference": "CVE-2022-28924", "Description": "An information disclosure vulnerability in UniverSIS-Students before v1.5.0 allows attackers to obtain sensitive information via a crafted GET request to the endpoint /api/students/me/courses/."}, {"Reference": "CVE-2022-3866", "Description": "HashiCorp Nomad and Nomad Enterprise 1.4.0 up to 1.4.1 workload identity token can list non-sensitive metadata for paths under nomad/ that belong to other jobs in the same namespace. Fixed in 1.4.2."}, {"Reference": "CVE-2022-45438", "Description": "When explicitly enabling the feature flag DASHBOARD_CACHE (disabled by default), the system allowed for an unauthenticated user to access dashboard configuration metadata using a REST API Get endpoint. This issue affects Apache Superset version 1.5.2 and prior versions and version 2.0.0. "}, {"Reference": "CVE-2022-46756", "Description": " Dell VxRail, versions prior to 7.0.410, contain a Container Escape Vulnerability. A local high-privileged attacker could potentially exploit this vulnerability, leading to the execution of arbitrary OS commands on the container's underlying OS. Exploitation may lead to a system take over by an attacker. "}, {"Reference": "CVE-2022-22515", "Description": "A remote, authenticated attacker could utilize the control program of the CODESYS Control runtime system to use the vulnerability in order to read and modify the configuration file(s) of the affected products."}, {"Reference": "CVE-2022-22732", "Description": "A CWE-668: Exposure of Resource to Wrong Sphere vulnerability exists that could cause all remote domains to access the resources (data) supplied by the server when an attacker sends a fetch request from third-party site or malicious site. Affected Products: EcoStruxure Power Commission (Versions prior to V2.22)"}, {"Reference": "CVE-2022-32530", "Description": "A CWE-668 Exposure of Resource to Wrong Sphere vulnerability exists that could cause users to be misled, hiding alarms, showing the wrong server connection option or the wrong control request when a mobile device has been compromised by a malicious application. Affected Product: Geo SCADA Mobile (Build 222 and prior)"}, {"Reference": "CVE-2022-34464", "Description": "A vulnerability has been identified in SICAM GridEdge Essential ARM (All versions), SICAM GridEdge Essential Intel (All versions < V2.7.3), SICAM GridEdge Essential with GDS ARM (All versions), SICAM GridEdge Essential with GDS Intel (All versions < V2.7.3). Affected software uses an improperly protected file to import SSH keys. Attackers with access to the filesystem of the host on which SICAM GridEdge runs, are able to inject a custom SSH key to that file."}, {"Reference": "CVE-2022-24074", "Description": "Whale Bridge, a default extension in Whale browser before 3.12.129.18, allowed to receive any SendMessage request from the content script itself that could lead to controlling Whale Bridge if the rendering process compromises."}]}
{"ID": "669", "Name": "Incorrect Resource Transfer Between Spheres", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product does not properly transfer a resource/behavior to another sphere, or improperly imports a resource/behavior from another sphere, in a manner that provides unintended control over that resource.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "664", "ViewID": "1000", "Ordinal": "Primary"}], "BackgroundDetails": ["A \"control sphere\" is a set of resources and behaviors that are accessible to a single actor, or a group of actors. A product's security model will typically define multiple spheres, possibly implicitly. For example, a server might define one sphere for \"administrators\" who can create new user accounts with subdirectories under /home/server/, and a second sphere might cover the set of users who can create or delete files within their own subdirectories. A third sphere might be \"users who are authenticated to the operating system on which the product is installed.\" Each sphere has different sets of actors and allowable behaviors."], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Application Data", "Modify Application Data", "Unexpected State"]}], "DemonstrativeExamples": [{"ID": "DX-22", "Entries": [{"IntroText": "The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet."}, {"Nature": "Good", "Language": "HTML", "ExampleCode": "```\n\t<form action=\"FileUploadServlet\" method=\"post\" enctype=\"multipart/form-data\">\n\tChoose a file to upload:\n\t<input type=\"file\" name=\"filename\"/>\n\t<br/>\n\t<input type=\"submit\" name=\"submit\" value=\"Submit\"/>\n\t</form>\n```"}, {"BodyText": "When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class FileUploadServlet extends HttpServlet {\n\t\t\t...\n\t\t\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\t\t\tresponse.setContentType(\"text/html\");\n\t\t\t\t\tPrintWriter out = response.getWriter();\n\t\t\t\t\tString contentType = request.getContentType();\n\t\t\t\t\t// the starting position of the boundary header\n\t\t\t\t\tint ind = contentType.indexOf(\"boundary=\");\n\t\t\t\t\tString boundary = contentType.substring(ind+9);\n\t\t\t\t\tString pLine = new String();\n\t\t\t\t\tString uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value\n\t\t\t\t\t// verify that content type is multipart form data\n\t\t\t\t\tif (contentType != null && contentType.indexOf(\"multipart/form-data\") != -1) {\n\t\t\t\t\t\t\t// extract the filename from the Http header\n\t\t\t\t\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));\n\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\tpLine = br.readLine();\n\t\t\t\t\t\t\tString filename = pLine.substring(pLine.lastIndexOf(\"\\\\\"), pLine.lastIndexOf(\"\\\"\"));\n\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t// output the file to the local upload directory\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));\n\t\t\t\t\t\t\t\t\tfor (String line; (line=br.readLine())!=null; ) {\n\t\t\t\t\t\t\t\t\t\tif (line.indexOf(boundary) == -1) {\n\t\t\t\t\t\t\t\t\t\t\tbw.write(line);\n\t\t\t\t\t\t\t\t\t\t\tbw.newLine();\n\t\t\t\t\t\t\t\t\t\t\tbw.flush();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} //end of for loop\n\t\t\t\t\t\t\t\t\tbw.close();\n\t\t\t\t\t\t\t} catch (IOException ex) {...}\n\t\t\t\t\t\t\t// output successful upload response HTML page\n\t\t\t\t\t}\n\t\t\t\t\t// output unsuccessful upload response HTML page\n\t\t\t\t\telse\n\t\t\t\t\t{...}\n\t\t\t}\n\t\t\t\t...\n\t}\n```"}, {"BodyText": "This code does not perform a check on the type of the file being uploaded (CWE-434). This could allow an attacker to upload any executable file or other file with malicious code."}, {"BodyText": "Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-23). Since the code does not check the filename that is provided in the header, an attacker can use \"../\" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash."}]}, {"ID": "DX-219", "Entries": [{"IntroText": "This code includes an external script to get database credentials, then authenticates a user against the database, allowing access to the application."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n```\n//assume the password is already encrypted, avoiding CWE-312* \n\t\n\tfunction authenticate($username,$password){\n\t```\n\t\tinclude(\"http://external.example.com/dbInfo.php\");\n```\n//dbInfo.php makes $dbhost, $dbuser, $dbpass, $dbname available* \n\t\tmysql_connect($dbhost, $dbuser, $dbpass) or die ('Error connecting to mysql');\n\t\tmysql_select_db($dbname);\n\t\t$query = 'Select * from users where username='.$username.' And password='.$password;\n\t\t$result = mysql_query($query);\n\t\t\n\t\tif(mysql_numrows($result) == 1){\n\t\t```\n\t\t\tmysql_close();\n\t\t\treturn true;\n\t\t}\n\t\telse{\n\t\t\tmysql_close();\n\t\t\treturn false;\n\t\t}\n\t}\n```"}, {"BodyText": "This code does not verify that the external domain accessed is the intended one. An attacker may somehow cause the external domain name to resolve to an attack server, which would provide the information for a false database. The attacker may then steal the usernames and encrypted passwords from real user login attempts, or simply allow themself to access the application without a real user account."}, {"BodyText": "This example is also vulnerable to an Adversary-in-the-Middle AITM (CWE-300) attack."}]}, {"ID": "DX-220", "Entries": [{"IntroText": "This code either generates a public HTML user information page or a JSON response containing the same user information."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n```\n// API flag, output JSON if set* \n\t$json = $_GET['json']\n\t$username = $_GET['user']\n\tif(!$json)\n\t{\n\t```\n\t\t\t$record = getUserRecord($username);\n\t\t\tforeach($record as $fieldName => $fieldValue)\n\t\t\t{\n\t\t\t\t\tif($fieldName == \"email_address\") {\n```\n// skip displaying user emails* \n\t\t\t\t\t\t\tcontinue;}\n\t\t\t\t\telse{\n\t\t\t\t\t```\n\t\t\t\t\t\twriteToHtmlPage($fieldName,$fieldValue);\n\t\t\t\t\t}\n\t\t\t}\n\t}\n\telse\n\t{\n\t\t$record = getUserRecord($username);\n\t\techo json_encode($record);\n\t}\n```"}, {"BodyText": "The programmer is careful to not display the user's e-mail address when displaying the public HTML page. However, the e-mail address is not removed from the JSON response, exposing the user's e-mail address."}]}], "ObservedExamples": [{"Reference": "CVE-2021-22909", "Description": "Chain: router's firmware update procedure uses curl with \"-k\" (insecure) option that disables certificate validation (CWE-295), allowing adversary-in-the-middle (AITM) compromise with a malicious firmware image (CWE-494).", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-22909"}, {"Reference": "CVE-2023-5227", "Description": "PHP-based FAQ management app does not check the MIME type for uploaded images", "Link": "https://www.cve.org/CVERecord?id=CVE-2023-5227"}, {"Reference": "CVE-2005-0406", "Description": "Some image editors modify a JPEG image, but the original EXIF thumbnail image is left intact within the JPEG. (Also an interaction error).", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0406"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}}
{"ID": "67", "Name": "Improper Handling of Windows Device Names", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product constructs pathnames from user input, but it does not handle or incorrectly handles a pathname containing a Windows device name such as AUX or CON. This typically leads to denial of service or an information exposure when the application attempts to process the pathname as a regular file.", "ExtendedDescription": "Not properly handling virtual filenames (e.g. AUX, CON, PRN, COM1, LPT1) can result in different types of vulnerabilities. In some cases an attacker can request a device via injection of a virtual filename in a URL, which may cause an error that leads to a denial of service or an error page that reveals sensitive information. A product that allows device names to bypass filtering runs the risk of an attacker injecting malicious code in a file with the name of a device.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "66", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Windows", "Prevalence": "Undetermined"}], "BackgroundDetails": ["Historically, there was a bug in the Windows operating system that caused a blue screen of death. Even after that issue was fixed DOS device names continue to be a factor."], "ModesOfIntroduction": [{"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Availability", "Confidentiality", "Other"], "Impact": ["DoS: Crash, Exit, or Restart", "Read Application Data", "Other"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Be familiar with the device names in the operating system where your system is deployed. Check input for these device names."}], "ObservedExamples": [{"Reference": "CVE-2002-0106", "Description": "Server allows remote attackers to cause a denial of service via a series of requests to .JSP files that contain an MS-DOS device name.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0106"}, {"Reference": "CVE-2002-0200", "Description": "Server allows remote attackers to cause a denial of service via an HTTP request for an MS-DOS device name.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0200"}, {"Reference": "CVE-2002-1052", "Description": "Product allows remote attackers to use MS-DOS device names in HTTP requests to cause a denial of service or obtain the physical path of the server.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1052"}, {"Reference": "CVE-2001-0493", "Description": "Server allows remote attackers to cause a denial of service via a URL that contains an MS-DOS device name.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0493"}, {"Reference": "CVE-2001-0558", "Description": "Server allows a remote attacker to create a denial of service via a URL request which includes a MS-DOS device name.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0558"}, {"Reference": "CVE-2000-0168", "Description": "Microsoft Windows 9x operating systems allow an attacker to cause a denial of service via a pathname that includes file device names, aka the \"DOS Device in Path Name\" vulnerability.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0168"}, {"Reference": "CVE-2001-0492", "Description": "Server allows remote attackers to determine the physical path of the server via a URL containing MS-DOS device names.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0492"}, {"Reference": "CVE-2004-0552", "Description": "Product does not properly handle files whose names contain reserved MS-DOS device names, which can allow malicious code to bypass detection when it is installed, copied, or executed.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0552"}, {"Reference": "CVE-2005-2195", "Description": "Server allows remote attackers to cause a denial of service (application crash) via a URL with a filename containing a .cgi extension and an MS-DOS device name.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2195"}], "AffectedResources": ["File or Directory"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "670", "Name": "Always-Incorrect Control Flow Implementation", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The code contains a control flow path that does not reflect the algorithm that the path is intended to implement, leading to incorrect behavior any time this path is navigated.", "ExtendedDescription": "This weakness captures cases in which a particular code segment is always incorrect with respect to the algorithm that it is implementing. For example, if a C programmer intends to include multiple statements in a single block but does not include the enclosing braces (CWE-483), then the logic is always incorrect. This issue is in contrast to most weaknesses in which the code usually behaves correctly, except when it is externally manipulated in malicious ways.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "691", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "This issue typically appears in rarely-tested code, since the \"always-incorrect\" nature will be detected as a bug during normal usage."}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Other", "Alter Execution Logic"]}], "DemonstrativeExamples": [{"ID": "DX-180", "Entries": [{"IntroText": "This code queries a server and displays its status when a request comes from an authorized IP address."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\t$requestingIP = $_SERVER['REMOTE_ADDR'];\n\tif(!in_array($requestingIP,$ipAllowList)){\n\t\techo \"You are not authorized to view this page\";\n\t\thttp_redirect($errorPageURL);\n\t}\n\t$status = getServerStatus();\n\techo $status;\n```\n...*"}, {"BodyText": "This code redirects unauthorized users, but continues to execute code after calling http_redirect(). This means even unauthorized users may be able to access the contents of the page or perform a DoS attack on the server being queried. Also, note that this code is vulnerable to an IP address spoofing attack (CWE-212)."}]}, {"ID": "DX-181", "Entries": [{"IntroText": "In this example, the programmer has indented the statements to call Do_X() and Do_Y(), as if the intention is that these functions are only called when the condition is true. However, because there are no braces to signify the block, Do_Y() will always be executed, even if the condition is false."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tif (condition==true)\n\t\tDo_X();\n\t\tDo_Y();\n```"}, {"BodyText": "This might not be what the programmer intended. When the condition is critical for security, such as in making a security decision or detecting a critical error, this may produce a vulnerability."}]}, {"ID": "DX-182", "Entries": [{"IntroText": "In both of these examples, a message is printed based on the month passed into the function:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic void printMessage(int month){\n\t\t\tswitch (month) {\n\t\t\t\t\tcase 1: print(\"January\");\n\t\t\t\t\tcase 2: print(\"February\");\n\t\t\t\t\tcase 3: print(\"March\");\n\t\t\t\t\tcase 4: print(\"April\");\n\t\t\t\t\tcase 5: print(\"May\");\n\t\t\t\t\tcase 6: print(\"June\");\n\t\t\t\t\tcase 7: print(\"July\");\n\t\t\t\t\tcase 8: print(\"August\");\n\t\t\t\t\tcase 9: print(\"September\");\n\t\t\t\t\tcase 10: print(\"October\");\n\t\t\t\t\tcase 11: print(\"November\");\n\t\t\t\t\tcase 12: print(\"December\");\n\t\t\t}\n\t\t\tprintln(\" is a great month\");\n\t}\n```"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid printMessage(int month){\n\t\t\tswitch (month) {\n\t\t\t\t\tcase 1: printf(\"January\");\n\t\t\t\t\tcase 2: printf(\"February\");\n\t\t\t\t\tcase 3: printf(\"March\");\n\t\t\t\t\tcase 4: printf(\"April\");\n\t\t\t\t\tcase 5: printff(\"May\");\n\t\t\t\t\tcase 6: printf(\"June\");\n\t\t\t\t\tcase 7: printf(\"July\");\n\t\t\t\t\tcase 8: printf(\"August\");\n\t\t\t\t\tcase 9: printf(\"September\");\n\t\t\t\t\tcase 10: printf(\"October\");\n\t\t\t\t\tcase 11: printf(\"November\");\n\t\t\t\t\tcase 12: printf(\"December\");\n\t\t\t}\n\t\t\tprintf(\" is a great month\");\n\t}\n```"}, {"BodyText": "Both examples do not use a break statement after each case, which leads to unintended fall-through behavior. For example, calling \"printMessage(10)\" will result in the text \"OctoberNovemberDecember is a great month\" being printed."}]}, {"ID": "DX-183", "Entries": [{"IntroText": "In the excerpt below, an AssertionError (an unchecked exception) is thrown if the user hasn't entered an email address in an HTML form."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tString email = request.getParameter(\"email_address\");\n\tassert email != null;\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2021-3011", "Description": "virtual interrupt controller in a virtualization product allows crash of host by writing a certain invalid value to a register, which triggers a fatal error instead of returning an error code", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-3011"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Maintenance", "Note": "This node could possibly be split into lower-level nodes. \"Early Return\" is for returning control to the caller too soon (e.g., CWE-584). \"Excess Return\" is when control is returned too far up the call stack (CWE-600, CWE-395). \"Improper control limitation\" occurs when the product maintains control at a lower level of execution, when control should be returned \"further\" up the call stack (CWE-455). \"Incorrect syntax\" covers code that's \"just plain wrong\" such as CWE-484 and CWE-483."}], "Top25Examples": [{"Reference": "CVE-2022-45196", "Description": "Hyperledger Fabric 2.3 allows attackers to cause a denial of service (orderer crash) by repeatedly sending a crafted channel tx with the same Channel name. NOTE: the official Fabric with Raft prevents exploitation via a locking mechanism and a check for names that already exist."}]}
{"ID": "671", "Name": "Lack of Administrator Control over Security", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product uses security features in a way that prevents the product's administrator from tailoring security settings to reflect the environment in which the product is being used. This introduces resultant weaknesses or prevents it from operating at a level of security that is desired by the administrator.", "ExtendedDescription": "If the product's administrator does not have the ability to manage security-related decisions at all times, then protecting the product from outside threats - including the product's developer - can become impossible. For example, a hard-coded account name and password cannot be changed by the administrator, thus exposing that product to attacks that the administrator can not prevent.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "657", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Varies by Context"]}], "DemonstrativeExamples": [{"ID": "DX-14", "Entries": [{"IntroText": "The following code is an example of an internal hard-coded password in the back-end:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint VerifyAdmin(char *password) {\n\t\t\tif (strcmp(password, \"Mew!\")) {\n\t\t\t\t\t printf(\"Incorrect Password!\\n\");\n\t\t\t\t\treturn(0)\n\t\t\t}\n\t\t\tprintf(\"Entering Diagnostic Mode...\\n\");\n\t\t\treturn(1);\n\t}\n```"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tint VerifyAdmin(String password) {\n\t\tif (!password.equals(\"Mew!\")) {\n\t\t\treturn(0)\n\t\t}\n\t\t//Diagnostic Mode\n\t\treturn(1);\n\t}\n```"}, {"BodyText": "Every instance of this program can be placed into diagnostic mode with the same password. Even worse is the fact that if this program is distributed as a binary-only distribution, it is very difficult to change that password or disable this \"functionality.\""}]}], "ObservedExamples": [{"Reference": "CVE-2022-29953", "Description": "Condition Monitor firmware has a maintenance interface with hard-coded credentials", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-29953"}, {"Reference": "CVE-2000-0127", "Description": "GUI configuration tool does not enable a security option when a checkbox is selected, although that option is honored when manually set in the configuration file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0127"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Top25Examples": [{"Reference": "CVE-2021-20612", "Description": "Lack of administrator control over security vulnerability in MELSEC-F series FX3U-ENET Firmware version 1.14 and prior, FX3U-ENET-L Firmware version 1.14 and prior and FX3U-ENET-P502 Firmware version 1.14 and prior allows a remote unauthenticated attacker to cause a denial-of-service (DoS) condition in communication function of the product or other unspecified effects by sending specially crafted packets to an unnecessary opening of TCP port. Control by MELSEC-F series PLC is not affected by this vulnerability, but system reset is required for recovery."}]}
{"ID": "672", "Name": "Operation on a Resource after Expiration or Release", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product uses, accesses, or otherwise operates on a resource after that resource has been expired, released, or revoked.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "666", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Mobile", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality"], "Impact": ["Modify Application Data", "Read Application Data"], "Note": "If a released resource is subsequently reused or reallocated, then an attempt to use the original resource might allow access to sensitive data that is associated with a different user or entity."}, {"Scope": ["Other", "Availability"], "Impact": ["Other", "DoS: Crash, Exit, or Restart"], "Note": "When a resource is released it might not be in an expected state, later attempts to access the resource may lead to resultant errors that may lead to a crash."}], "DemonstrativeExamples": [{"ID": "DX-71", "Entries": [{"IntroText": "The following code shows a simple example of a use after free error:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar* ptr = (char*)malloc (SIZE);\n\tif (err) {\n\t\tabrt = 1;\n\t\tfree(ptr);\n\t}\n\t...\n\tif (abrt) {\n\t\tlogError(\"operation aborted before commit\", ptr);\n\t}\n```"}, {"BodyText": "When an error occurs, the pointer is immediately freed. However, this pointer is later incorrectly used in the logError function."}]}, {"ID": "DX-72", "Entries": [{"IntroText": "The following code shows a simple example of a double free error:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar* ptr = (char*)malloc (SIZE);\n\t...\n\tif (abrt) {\n\t\tfree(ptr);\n\t}\n\t...\n\tfree(ptr);\n```"}, {"BodyText": "Double free vulnerabilities have two common (and sometimes overlapping) causes:"}, {"BodyText": "- Error conditions and other exceptional circumstances\n\n  - Confusion over which part of the program is responsible for freeing the memory"}, {"BodyText": "Although some double free vulnerabilities are not much more complicated than the previous example, most are spread out across hundreds of lines of code or even different files. Programmers seem particularly susceptible to freeing global variables more than once."}]}, {"Entries": [{"IntroText": "In the following C/C++ example the method processMessage is used to process a message received in the input array of char arrays. The input message array contains two char arrays: the first is the length of the message and the second is the body of the message. The length of the message is retrieved and used to allocate enough memory for a local char array, messageBody, to be created for the message body. The messageBody is processed in the method processMessageBody that will return an error if an error occurs while processing. If an error occurs then the return result variable is set to indicate an error and the messageBody char array memory is released using the method free and an error message is sent to the logError method."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t#define FAIL 0\n\t#define SUCCESS 1\n\t#define ERROR -1\n\t#define MAX_MESSAGE_SIZE 32\n\tint processMessage(char **message)\n\t{\n\t\t\tint result = SUCCESS;\n\t\t\tint length = getMessageLength(message[0]);\n\t\t\tchar *messageBody;\n\t\t\tif ((length > 0) && (length < MAX_MESSAGE_SIZE)) {\n\t\t\t\t\tmessageBody = (char*)malloc(length*sizeof(char));\n\t\t\t\t\tmessageBody = &message[1][0];\n\t\t\t\t\tint success = processMessageBody(messageBody);\n\t\t\t\t\tif (success == ERROR) {\n\t\t\t\t\t\tresult = ERROR;\n\t\t\t\t\t\tfree(messageBody);\n\t\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprintf(\"Unable to process message; invalid message length\");\n\t\t\t\tresult = FAIL;\n\t\t\t}\n\t\t\tif (result == ERROR) {\n\t\t\t\tlogError(\"Error processing message\", messageBody);\n\t\t\t}\n\t\t\treturn result;\n\t}\n```"}, {"BodyText": "However, the call to the method logError includes the messageBody after the memory for messageBody has been released using the free method. This can cause unexpected results and may lead to system crashes. A variable should never be used after its memory resources have been released."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n\t...\n\tmessageBody = (char*)malloc(length*sizeof(char));\n\tmessageBody = &message[1][0];\n\tint success = processMessageBody(messageBody);\n\tif (success == ERROR) {\n\t\tresult = ERROR;\n\t\tlogError(\"Error processing message\", messageBody);\n\t\tfree(messageBody);\n\t}\n\t...\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2009-3547", "Description": "Chain: race condition (CWE-362) might allow resource to be released before operating on it, leading to NULL dereference (CWE-476)", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-3547"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}}
{"ID": "673", "Name": "External Influence of Sphere Definition", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product does not prevent the definition of control spheres from external actors.", "ExtendedDescription": "Typically, a product defines its control sphere within the code itself, or through configuration by the product's administrator. In some cases, an external party can change the definition of the control sphere. This is typically a resultant weakness.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "664", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Other"]}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Consider a blog publishing tool, which might have three explicit control spheres: the creation of articles, only accessible to a \"publisher;\" commenting on articles, only accessible to a \"commenter\" who is a registered user; and reading articles, only accessible to an anonymous reader. Suppose that the application is deployed on a web server that is shared with untrusted parties. If a local user can modify the data files that define who a publisher is, then this user has modified the control sphere. In this case, the issue would be resultant from another weakness such as insufficient permissions."}]}, {"Entries": [{"IntroText": "In Untrusted Search Path (CWE-426), a user might be able to define the PATH environment variable to cause the product to search in the wrong directory for a library to load. The product's intended sphere of control would include \"resources that are only modifiable by the person who installed the product.\" The PATH effectively changes the definition of this sphere so that it overlaps the attacker's sphere of control."}]}], "ObservedExamples": [{"Reference": "CVE-2008-2613", "Description": "setuid program allows compromise using path that finds and loads a malicious library.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2613"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Theoretical", "Note": "A \"control sphere\" is a set of resources and behaviors that are accessible to a single actor, or a group of actors. A product's security model will typically define multiple spheres, possibly implicitly. For example, a server might define one sphere for \"administrators\" who can create new user accounts with subdirectories under /home/server/, and a second sphere might cover the set of users who can create or delete files within their own subdirectories. A third sphere might be \"users who are authenticated to the operating system on which the product is installed.\" Each sphere has different sets of actors and allowable behaviors."}]}
