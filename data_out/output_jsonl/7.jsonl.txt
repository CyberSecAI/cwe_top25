{"ID": "55", "Name": "Path Equivalence: '/./' (Single Dot Directory)", "Abstraction": "Variant", "Description": "The product accepts path input in the form of single dot directory exploit ('/./') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.", "ObservedExamples": [{"Reference": "CVE-2000-0004", "Description": "Server allows remote attackers to read source code for executable files by inserting a . (dot) into the URL.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0004"}, {"Reference": "CVE-2002-0304", "Description": "Server allows remote attackers to read password-protected files via a /./ in the HTTP request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0304"}, {"Reference": "CVE-1999-1083", "Description": "Possibly (could be a cleansing error)", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1083"}, {"Reference": "CVE-2004-0815", "Description": "\"/./////etc\" cleansed to \".///etc\" then \"/etc\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0815"}, {"Reference": "CVE-2002-0112", "Description": "Server allows remote attackers to view password protected files via /./ in the URL.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0112"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No", "Top25Examples": [{"Reference": "CVE-2021-40539", "Description": "Zoho ManageEngine ADSelfService Plus version 6113 and prior is vulnerable to REST API authentication bypass with resultant remote code execution."}]}
{"ID": "550", "Name": "Server-generated Error Message Containing Sensitive Information", "Abstraction": "Variant", "Description": "Certain conditions, such as network failure, will cause a server error message to be displayed.", "ExtendedDescription": "While error messages in and of themselves are not dangerous, per se, it is what an attacker can glean from them that might cause eventual problems.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "551", "Name": "Incorrect Behavior Order: Authorization Before Parsing and Canonicalization", "Abstraction": "Base", "Description": "If a web server does not fully parse requested URLs before it examines them for authorization, it may be possible for an attacker to bypass authorization protection.", "ExtendedDescription": "For instance, the character strings /./ and / both mean current directory. If /SomeDirectory is a protected directory and an attacker requests /./SomeDirectory, the attacker may be able to gain access to the resource if /./ is not converted to / before the authorization check is performed.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No", "Top25Examples": [{"Reference": "CVE-2021-32777", "Description": "Envoy is an open source L7 proxy and communication bus designed for large modern service oriented architectures. In affected versions when ext-authz extension is sending request headers to the external authorization service it must merge multiple value headers according to the HTTP spec. However, only the last header value is sent. This may allow specifically crafted requests to bypass authorization. Attackers may be able to escalate privileges when using ext-authz extension or back end service that uses multiple value headers for authorization. A specifically constructed request may be delivered by an untrusted downstream peer in the presence of ext-authz extension. Envoy versions 1.19.1, 1.18.4, 1.17.4, 1.16.5 contain fixes to the ext-authz extension to correctly merge multiple request header values, when sending request for authorization."}]}
{"ID": "552", "Name": "Files or Directories Accessible to External Parties", "Abstraction": "Base", "Description": "The product makes files or directories accessible to unauthorized actors, even though they should not be.", "ExtendedDescription": "\n\nWeb servers, FTP servers, and similar servers may store a set of files underneath a \"root\" directory that is accessible to the server's users. Applications may store sensitive files underneath this root without also using access control to limit which users may request those files, if any. Alternately, an application might package multiple files or directories into an archive file (e.g., ZIP or tar), but the application might not exclude sensitive files that are underneath those directories.\n\n\nIn cloud technologies and containers, this weakness might present itself in the form of misconfigured storage accounts that can be read or written by a public or anonymous user.\n", "ObservedExamples": [{"Reference": "CVE-2005-1835", "Description": "Data file under web root.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1835"}], "AffectedResources": ["File or Directory"], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "Yes", "Top25Examples": [{"Reference": "CVE-2022-23508", "Description": "Weave GitOps is a simple open source developer platform for people who want cloud native applications, without needing Kubernetes expertise. A vulnerability in GitOps run could allow a local user or process to alter a Kubernetes cluster's resources. GitOps run has a local S3 bucket which it uses for synchronizing files that are later applied against a Kubernetes cluster. Its endpoint had no security controls to block unauthorized access, therefore allowing local users (and processes) on the same machine to see and alter the bucket content. By leveraging this vulnerability, an attacker could pick a workload of their choosing and inject it into the S3 bucket, which resulted in the successful deployment in the target cluster, without the need to provide any credentials to either the S3 bucket nor the target Kubernetes cluster. There are no known workarounds for this issue, please upgrade. This vulnerability has been fixed by commits 75268c4 and 966823b. Users should upgrade to Weave GitOps version >= v0.12.0 released on 08/12/2022. ### Workarounds There is no workaround for this vulnerability. ### References Disclosed by Paulo Gomes, Senior Software Engineer, Weaveworks. ### For more information If you have any questions or comments about this advisory: - Open an issue in [Weave GitOps repository](https://github.com/weaveworks/weave-gitops) - Email us at [support@weave.works](mailto:support@weave.works) "}, {"Reference": "CVE-2021-25004", "Description": "The SEUR Oficial WordPress plugin before 1.7.2 creates a PHP file with a random name when installed, even though it is used for support purposes, it allows to download any file from the web server without restriction after knowing the URL and a password than an administrator can see in the plugin settings page."}, {"Reference": "CVE-2022-23621", "Description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. In affected versions any user with SCRIPT right can read any file located in the XWiki WAR (for example xwiki.cfg and xwiki.properties) through XWiki#invokeServletAndReturnAsString as `$xwiki.invokeServletAndReturnAsString(\"/WEB-INF/xwiki.cfg\")`. This issue has been patched in XWiki versions 12.10.9, 13.4.3 and 13.7-rc-1. Users are advised to update. The only workaround is to limit SCRIPT right."}, {"Reference": "CVE-2022-2834", "Description": "The Helpful WordPress plugin before 4.5.26 puts the exported logs and feedbacks in a publicly accessible location and guessable names, which could allow attackers to download them and retrieve sensitive information such as IP, Names and Email Address depending on the plugin's settings"}]}
{"ID": "553", "Name": "Command Shell in Externally Accessible Directory", "Abstraction": "Variant", "Description": "A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "554", "Name": "ASP.NET Misconfiguration: Not Using Input Validation Framework", "Abstraction": "Variant", "Description": "The ASP.NET application does not use an input validation framework.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "555", "Name": "J2EE Misconfiguration: Plaintext Password in Configuration File", "Abstraction": "Variant", "Description": "The J2EE application stores a plaintext password in a configuration file.", "ExtendedDescription": "Storing a plaintext password in a configuration file allows anyone who can read the file to access the password-protected resource, making it an easy target for attackers.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "556", "Name": "ASP.NET Misconfiguration: Use of Identity Impersonation", "Abstraction": "Variant", "Description": "Configuring an ASP.NET application to run with impersonated credentials may give the application unnecessary privileges.", "ExtendedDescription": "The use of impersonated credentials allows an ASP.NET application to run with either the privileges of the client on whose behalf it is executing or with arbitrary privileges granted in its configuration.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "558", "Name": "Use of getlogin() in Multithreaded Application", "Abstraction": "Variant", "Description": "The product uses the getlogin() function in a multithreaded context, potentially causing it to return incorrect values.", "ExtendedDescription": "The getlogin() function returns a pointer to a string that contains the name of the user associated with the calling process. The function is not reentrant, meaning that if it is called from another process, the contents are not locked out and the value of the string can be changed by another process. This makes it very risky to use because the username can be changed by other processes, so the results of the function cannot be trusted.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "56", "Name": "Path Equivalence: 'filedir*' (Wildcard)", "Abstraction": "Variant", "Description": "The product accepts path input in the form of asterisk wildcard ('filedir*') without appropriate validation, which can lead to ambiguous path resolution and allow an attacker to traverse the file system to unintended locations or access arbitrary files.", "ObservedExamples": [{"Reference": "CVE-2004-0696", "Description": "List directories using desired path and \"*\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0696"}, {"Reference": "CVE-2002-0433", "Description": "List files in web server using \"*.ext\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0433"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "560", "Name": "Use of umask() with chmod-style Argument", "Abstraction": "Variant", "Description": "The product calls umask() with an incorrect argument that is specified as if it is an argument to chmod().", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "561", "Name": "Dead Code", "Abstraction": "Base", "Description": "The product contains dead code, which can never be executed.", "ExtendedDescription": "Dead code is code that can never be executed in a running program. The surrounding code makes it impossible for a section of code to ever be executed.", "ObservedExamples": [{"Reference": "CVE-2014-1266", "Description": "chain: incorrect \"goto\" in Apple SSL product bypasses certificate validation, allowing Adversary-in-the-Middle (AITM) attack (Apple \"goto fail\" bug). CWE-705 (Incorrect Control Flow Scoping) -> CWE-561 (Dead Code) -> CWE-295 (Improper Certificate Validation) -> CWE-393 (Return of Wrong Status Code) -> CWE-300 (Channel Accessible by Non-Endpoint).", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-1266"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "562", "Name": "Return of Stack Variable Address", "Abstraction": "Base", "Description": "A function returns the address of a stack variable, which will cause unintended program behavior, typically in the form of a crash.", "ExtendedDescription": "Because local variables are allocated on the stack, when a program returns a pointer to a local variable, it is returning a stack address. A subsequent function call is likely to re-use this same stack address, thereby overwriting the value of the pointer, which no longer corresponds to the same variable since a function's stack frame is invalidated when it returns. At best this will cause the value of the pointer to change unexpectedly. In many cases it causes the program to crash the next time the pointer is dereferenced.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "563", "Name": "Assignment to Variable without Use", "Abstraction": "Base", "Description": "The variable's value is assigned but never used, making it a dead store.", "ExtendedDescription": "After the assignment, the variable is either assigned another value or goes out of scope. It is likely that the variable is simply vestigial, but it is also possible that the unused variable points out a bug.", "AlternateTerms": [{"Term": "Unused Variable"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "564", "Name": "SQL Injection: Hibernate", "Abstraction": "Variant", "Description": "Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "565", "Name": "Reliance on Cookies without Validation and Integrity Checking", "Abstraction": "Base", "Description": "The product relies on the existence or values of cookies when performing security-critical operations, but it does not properly ensure that the setting is valid for the associated user.", "ExtendedDescription": "Attackers can easily modify cookies, within the browser or by implementing the client-side code outside of the browser. Reliance on cookies without detailed validation and integrity checking can allow attackers to bypass authentication, conduct injection attacks such as SQL injection and cross-site scripting, or otherwise modify inputs in unexpected ways.", "ObservedExamples": [{"Reference": "CVE-2008-5784", "Description": "e-dating application allows admin privileges by setting the admin cookie to 1.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5784"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "Yes", "Top25Examples": [{"Reference": "CVE-2022-1148", "Description": "Improper authorization in GitLab Pages included with GitLab CE/EE affecting all versions from 11.5 prior to 14.7.7, 14.8 prior to 14.8.5, and 14.9 prior to 14.9.2 allowed an attacker to steal a user's access token on an attacker-controlled private GitLab Pages website and reuse that token on the victim's other private websites"}]}
{"ID": "566", "Name": "Authorization Bypass Through User-Controlled SQL Primary Key", "Abstraction": "Variant", "Description": "The product uses a database table that includes records that should not be accessible to an actor, but it executes a SQL statement with a primary key that can be controlled by that actor.", "ExtendedDescription": "\n\nWhen a user can set a primary key to any value, then the user can modify the key to point to unauthorized records.\n\n\nDatabase access control errors occur when:\n\n\n  - Data enters a program from an untrusted source.\n\n  - The data is used to specify the value of a primary key in a SQL query.\n\n  - The untrusted source does not have the permissions to be able to access all rows in the associated table.\n\n", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "567", "Name": "Unsynchronized Access to Shared Data in a Multithreaded Context", "Abstraction": "Base", "Description": "The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes.", "ExtendedDescription": "\n\nWithin servlets, shared static variables are not protected from concurrent access, but servlets are multithreaded. This is a typical programming mistake in J2EE applications, since the multithreading is handled by the framework. When a shared variable can be influenced by an attacker, one thread could wind up modifying the variable to contain data that is not valid for a different thread that is also using the data within the variable.\n\n\nNote that this weakness is not unique to servlets.\n", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "568", "Name": "finalize() Method Without super.finalize()", "Abstraction": "Variant", "Description": "The product contains a finalize() method that does not call super.finalize().", "ExtendedDescription": "The Java Language Specification states that it is a good practice for a finalize() method to call super.finalize().", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "57", "Name": "Path Equivalence: 'fakedir/../realdir/filename'", "Abstraction": "Variant", "Description": "The product contains protection mechanisms to restrict access to 'realdir/filename', but it constructs pathnames using external input in the form of 'fakedir/../realdir/filename' that are not handled by those mechanisms. This allows attackers to perform unauthorized actions against the targeted file.", "ObservedExamples": [{"Reference": "CVE-2001-1152", "Description": "Proxy allows remote attackers to bypass denylist restrictions and connect to unauthorized web servers by modifying the requested URL, including (1) a // (double slash), (2) a /SUBDIR/.. where the desired file is in the parentdir, (3) a /./, or (4) URL-encoded characters.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1152"}, {"Reference": "CVE-2000-0191", "Description": "application check access for restricted URL before canonicalization", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0191"}, {"Reference": "CVE-2005-1366", "Description": "CGI source disclosure using \"dirname/../cgi-bin\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1366"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "570", "Name": "Expression is Always False", "Abstraction": "Base", "Description": "The product contains an expression that will always evaluate to false.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "571", "Name": "Expression is Always True", "Abstraction": "Base", "Description": "The product contains an expression that will always evaluate to true.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "572", "Name": "Call to Thread run() instead of start()", "Abstraction": "Variant", "Description": "The product calls a thread's run() method instead of calling start(), which causes the code to run in the thread of the caller instead of the callee.", "ExtendedDescription": "In most cases a direct call to a Thread object's run() method is a bug. The programmer intended to begin a new thread of control, but accidentally called run() instead of start(), so the run() method will execute in the caller's thread of control.", "AffectedResources": ["System Process"], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "573", "Name": "Improper Following of Specification by Caller", "Abstraction": "Class", "Description": "The product does not follow or incorrectly follows the specifications as required by the implementation language, environment, framework, protocol, or platform.", "ExtendedDescription": "When leveraging external functionality, such as an API, it is important that the caller does so in accordance with the requirements of the external functionality or else unintended behaviors may result, possibly leaving the system vulnerable to any number of exploits.", "ObservedExamples": [{"Reference": "CVE-2006-7140", "Description": "Crypto implementation removes padding when it shouldn't, allowing forged signatures", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-7140"}, {"Reference": "CVE-2006-4339", "Description": "Crypto implementation removes padding when it shouldn't, allowing forged signatures", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4339"}], "MappingNotes": {"Usage": "Allowed-with-Review"}, "1003_view": "No"}
{"ID": "574", "Name": "EJB Bad Practices: Use of Synchronization Primitives", "Abstraction": "Variant", "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using thread synchronization primitives.", "ExtendedDescription": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"An enterprise bean must not use thread synchronization primitives to synchronize execution of multiple instances.\" The specification justifies this requirement in the following way: \"This rule is required to ensure consistent runtime semantics because while some EJB containers may use a single JVM to execute all enterprise bean's instances, others may distribute the instances across multiple JVMs.\"", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "575", "Name": "EJB Bad Practices: Use of AWT Swing", "Abstraction": "Variant", "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using AWT/Swing.", "ExtendedDescription": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"An enterprise bean must not use the AWT functionality to attempt to output information to a display, or to input information from a keyboard.\" The specification justifies this requirement in the following way: \"Most servers do not allow direct interaction between an application program and a keyboard/display attached to the server system.\"", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "576", "Name": "EJB Bad Practices: Use of Java I/O", "Abstraction": "Variant", "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using the java.io package.", "ExtendedDescription": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"An enterprise bean must not use the java.io package to attempt to access files and directories in the file system.\" The specification justifies this requirement in the following way: \"The file system APIs are not well-suited for business components to access data. Business components should use a resource manager API, such as JDBC, to store data.\"", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "577", "Name": "EJB Bad Practices: Use of Sockets", "Abstraction": "Variant", "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using sockets.", "ExtendedDescription": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"An enterprise bean must not attempt to listen on a socket, accept connections on a socket, or use a socket for multicast.\" The specification justifies this requirement in the following way: \"The EJB architecture allows an enterprise bean instance to be a network socket client, but it does not allow it to be a network server. Allowing the instance to become a network server would conflict with the basic function of the enterprise bean-- to serve the EJB clients.\"", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "578", "Name": "EJB Bad Practices: Use of Class Loader", "Abstraction": "Variant", "Description": "The product violates the Enterprise JavaBeans (EJB) specification by using the class loader.", "ExtendedDescription": "The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container. In this case, the product violates the following EJB guideline: \"The enterprise bean must not attempt to create a class loader; obtain the current class loader; set the context class loader; set security manager; create a new security manager; stop the JVM; or change the input, output, and error streams.\" The specification justifies this requirement in the following way: \"These functions are reserved for the EJB container. Allowing the enterprise bean to use these functions could compromise security and decrease the container's ability to properly manage the runtime environment.\"", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "579", "Name": "J2EE Bad Practices: Non-serializable Object Stored in Session", "Abstraction": "Variant", "Description": "The product stores a non-serializable object as an HttpSession attribute, which can hurt reliability.", "ExtendedDescription": "A J2EE application can make use of multiple JVMs in order to improve application reliability and performance. In order to make the multiple JVMs appear as a single application to the end user, the J2EE container can replicate an HttpSession object across multiple JVMs so that if one JVM becomes unavailable another can step in and take its place without disrupting the flow of the application. This is only possible if all session data is serializable, allowing the session to be duplicated between the JVMs.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "58", "Name": "Path Equivalence: Windows 8.3 Filename", "Abstraction": "Variant", "Description": "The product contains a protection mechanism that restricts access to a long filename on a Windows operating system, but it does not properly restrict access to the equivalent short \"8.3\" filename.", "ExtendedDescription": "On later Windows operating systems, a file can have a \"long name\" and a short name that is compatible with older Windows file systems, with up to 8 characters in the filename and 3 characters for the extension. These \"8.3\" filenames, therefore, act as an alternate name for files with long names, so they are useful pathname equivalence manipulations.", "ObservedExamples": [{"Reference": "CVE-1999-0012", "Description": "Multiple web servers allow restriction bypass using 8.3 names instead of long names", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0012"}, {"Reference": "CVE-2001-0795", "Description": "Source code disclosure using 8.3 file name.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0795"}, {"Reference": "CVE-2005-0471", "Description": "Multi-Factor Vulnerability. Product generates temporary filenames using long filenames, which become predictable in 8.3 format.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0471"}], "FunctionalAreas": ["File Processing"], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "580", "Name": "clone() Method Without super.clone()", "Abstraction": "Variant", "Description": "The product contains a clone() method that does not call super.clone() to obtain the new object.", "ExtendedDescription": "All implementations of clone() should obtain the new object by calling super.clone(). If a class does not follow this convention, a subclass's clone() method will return an object of the wrong type.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "581", "Name": "Object Model Violation: Just One of Equals and Hashcode Defined", "Abstraction": "Variant", "Description": "The product does not maintain equal hashcodes for equal objects.", "ExtendedDescription": "Java objects are expected to obey a number of invariants related to equality. One of these invariants is that equal objects must have equal hashcodes. In other words, if a.equals(b) == true then a.hashCode() == b.hashCode().", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "582", "Name": "Array Declared Public, Final, and Static", "Abstraction": "Variant", "Description": "The product declares an array public, final, and static, which is not sufficient to prevent the array's contents from being modified.", "ExtendedDescription": "Because arrays are mutable objects, the final constraint requires that the array object itself be assigned only once, but makes no guarantees about the values of the array elements. Since the array is public, a malicious program can change the values stored in the array. As such, in most cases an array declared public, final and static is a bug.", "BackgroundDetails": ["Mobile code, in this case a Java Applet, is code that is transmitted across a network and executed on a remote machine. Because mobile code developers have little if any control of the environment in which their code will execute, special security concerns become relevant. One of the biggest environmental threats results from the risk that the mobile code will run side-by-side with other, potentially malicious, mobile code. Because all of the popular web browsers execute code from multiple sources together in the same JVM, many of the security guidelines for mobile code are focused on preventing manipulation of your objects' state and behavior by adversaries who have access to the same virtual machine where your product is running."], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "583", "Name": "finalize() Method Declared Public", "Abstraction": "Variant", "Description": "The product violates secure coding principles for mobile code by declaring a finalize() method public.", "ExtendedDescription": "A product should never call finalize explicitly, except to call super.finalize() inside an implementation of finalize(). In mobile code situations, the otherwise error prone practice of manual garbage collection can become a security threat if an attacker can maliciously invoke a finalize() method because it is declared with public access.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "584", "Name": "Return Inside Finally Block", "Abstraction": "Base", "Description": "The code has a return statement inside a finally block, which will cause any thrown exception in the try block to be discarded.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "585", "Name": "Empty Synchronized Block", "Abstraction": "Variant", "Description": "The product contains an empty synchronized block.", "ExtendedDescription": "An empty synchronized block does not actually accomplish any synchronization and may indicate a troubled section of code. An empty synchronized block can occur because code no longer needed within the synchronized block is commented out without removing the synchronized block.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "586", "Name": "Explicit Call to Finalize()", "Abstraction": "Base", "Description": "The product makes an explicit call to the finalize() method from outside the finalizer.", "ExtendedDescription": "While the Java Language Specification allows an object's finalize() method to be called from outside the finalizer, doing so is usually a bad idea. For example, calling finalize() explicitly means that finalize() will be called more than once: the first time will be the explicit call and the last time will be the call that is made after the object is garbage collected.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "587", "Name": "Assignment of a Fixed Address to a Pointer", "Abstraction": "Variant", "Description": "The product sets a pointer to a specific address other than NULL or 0.", "ExtendedDescription": "Using a fixed address is not portable, because that address will probably not be valid in all environments or platforms.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "588", "Name": "Attempt to Access Child of a Non-structure Pointer", "Abstraction": "Variant", "Description": "Casting a non-structure type to a structure type and accessing a field can lead to memory access errors or data corruption.", "ObservedExamples": [{"Reference": "CVE-2021-3510", "Description": "JSON decoder accesses a C union using an invalid offset to an object", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-3510"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No", "Top25Examples": [{"Reference": "CVE-2021-3510", "Description": "Zephyr JSON decoder incorrectly decodes array of array. Zephyr versions >= >1.14.0, >= >2.5.0 contain Attempt to Access Child of a Non-structure Pointer (CWE-588). For more information, see https://github.com/zephyrproject-rtos/zephyr/security/advisories/GHSA-289f-7mw3-2qf4"}]}
{"ID": "589", "Name": "Call to Non-ubiquitous API", "Abstraction": "Variant", "Description": "The product uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences.", "ExtendedDescription": "Some functions that offer security features supported by the OS are not available on all versions of the OS in common use. Likewise, functions are often deprecated or made obsolete for security reasons and should not be used.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "59", "Name": "Improper Link Resolution Before File Access ('Link Following')", "Abstraction": "Base", "Description": "The product attempts to access a file based on the filename, but it does not properly prevent that filename from identifying a link or shortcut that resolves to an unintended resource.", "BackgroundDetails": ["Soft links are a UNIX term that is synonymous with simple shortcuts on Windows-based platforms."], "AlternateTerms": [{"Term": "insecure temporary file", "Description": "Some people use the phrase \"insecure temporary file\" when referring to a link following weakness, but other weaknesses can produce insecure temporary files without any symlink involvement at all."}, {"Term": "Zip Slip", "Description": "\"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59)."}], "ObservedExamples": [{"Reference": "CVE-1999-1386", "Description": "Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1386"}, {"Reference": "CVE-2000-1178", "Description": "Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1178"}, {"Reference": "CVE-2004-0217", "Description": "Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0217"}, {"Reference": "CVE-2003-0517", "Description": "Symlink attack allows local users to overwrite files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0517"}, {"Reference": "CVE-2004-0689", "Description": "Window manager does not properly handle when certain symbolic links point to \"stale\" locations, which could allow local users to create or truncate arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0689"}, {"Reference": "CVE-2005-1879", "Description": "Second-order symlink vulnerabilities", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1879"}, {"Reference": "CVE-2005-1880", "Description": "Second-order symlink vulnerabilities", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1880"}, {"Reference": "CVE-2005-1916", "Description": "Symlink in Python program", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1916"}, {"Reference": "CVE-2000-0972", "Description": "Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0972"}, {"Reference": "CVE-2005-0824", "Description": "Signal causes a dump that follows symlinks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0824"}, {"Reference": "CVE-2001-1494", "Description": "Hard link attack, file overwrite; interesting because program checks against soft links", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1494"}, {"Reference": "CVE-2002-0793", "Description": "Hard link and possibly symbolic link following vulnerabilities in embedded operating system allow local users to overwrite arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0793"}, {"Reference": "CVE-2003-0578", "Description": "Server creates hard links and unlinks files as root, which allows local users to gain privileges by deleting and overwriting arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0578"}, {"Reference": "CVE-1999-0783", "Description": "Operating system allows local users to conduct a denial of service by creating a hard link from a device special file to a file on an NFS file system.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0783"}, {"Reference": "CVE-2004-1603", "Description": "Web hosting manager follows hard links, which allows local users to read or modify arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1603"}, {"Reference": "CVE-2004-1901", "Description": "Package listing system allows local users to overwrite arbitrary files via a hard link attack on the lockfiles.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1901"}, {"Reference": "CVE-2005-1111", "Description": "Hard link race condition", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1111"}, {"Reference": "CVE-2000-0342", "Description": "Mail client allows remote attackers to bypass the user warning for executable attachments such as .exe, .com, and .bat by using a .lnk file that refers to the attachment, aka \"Stealth Attachment.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0342"}, {"Reference": "CVE-2001-1042", "Description": "FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1042"}, {"Reference": "CVE-2001-1043", "Description": "FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1043"}, {"Reference": "CVE-2005-0587", "Description": "Browser allows remote malicious web sites to overwrite arbitrary files by tricking the user into downloading a .LNK (link) file twice, which overwrites the file that was referenced in the first .LNK file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0587"}, {"Reference": "CVE-2001-1386", "Description": "\".LNK.\" - .LNK with trailing dot", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1386"}, {"Reference": "CVE-2003-1233", "Description": "Rootkits can bypass file access restrictions to Windows kernel directories using NtCreateSymbolicLinkObject function to create symbolic link", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1233"}, {"Reference": "CVE-2002-0725", "Description": "File system allows local attackers to hide file usage activities via a hard link to the target file, which causes the link to be recorded in the audit trail instead of the target file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0725"}, {"Reference": "CVE-2003-0844", "Description": "Web server plugin allows local users to overwrite arbitrary files via a symlink attack on predictable temporary filenames.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0844"}, {"Reference": "CVE-2015-3629", "Description": "A Libcontainer used in Docker Engine allows local users to escape containerization and write to an arbitrary file on the host system via a symlink attack in an image when respawning a container.", "Link": "https://www.cve.org/CVERecord?id=CVE-2015-3629"}, {"Reference": "CVE-2021-21272", "Description": "\"Zip Slip\" vulnerability in Go-based Open Container Initiative (OCI) registries product allows writing arbitrary files outside intended directory via symbolic links or hard links in a gzipped tarball.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-21272"}, {"Reference": "CVE-2020-27833", "Description": "\"Zip Slip\" vulnerability in container management product allows writing arbitrary files outside intended directory via a container image (.tar format) with filenames that are symbolic links that point to other files within the same tar file; however, the files being pointed to can also be symbolic links to destinations outside the intended directory, bypassing the initial check.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-27833"}], "FunctionalAreas": ["File Processing"], "AffectedResources": ["File or Directory"], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "Yes", "Top25Examples": [{"Reference": "CVE-2021-4287", "Description": "A vulnerability, which was classified as problematic, was found in ReFirm Labs binwalk up to 2.3.2. Affected is an unknown function of the file src/binwalk/modules/extractor.py of the component Archive Extraction Handler. The manipulation leads to symlink following. It is possible to launch the attack remotely. Upgrading to version 2.3.3 is able to address this issue. The name of the patch is fa0c0bd59b8588814756942fe4cb5452e76c1dcd. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216876."}, {"Reference": "CVE-2022-1256", "Description": "A local privilege escalation vulnerability in MA for Windows prior to 5.7.6 allows a local low privileged user to gain system privileges through running the repair functionality. Temporary file actions were performed on the local user's %TEMP% directory with System privileges through manipulation of symbolic links."}, {"Reference": "CVE-2022-31216", "Description": "Vulnerabilities in the Drive Composer allow a low privileged attacker to create and write to a file anywhere on the file system as SYSTEM with arbitrary content as long as the file does not already exist. The Drive Composer installer file allows a low-privileged user to run a \"repair\" operation on the product. "}, {"Reference": "CVE-2022-31217", "Description": "Vulnerabilities in the Drive Composer allow a low privileged attacker to create and write to a file anywhere on the file system as SYSTEM with arbitrary content as long as the file does not already exist. The Drive Composer installer file allows a low-privileged user to run a \"repair\" operation on the product. "}, {"Reference": "CVE-2022-31218", "Description": "Vulnerabilities in the Drive Composer allow a low privileged attacker to create and write to a file anywhere on the file system as SYSTEM with arbitrary content as long as the file does not already exist. The Drive Composer installer file allows a low-privileged user to run a \"repair\" operation on the product. "}, {"Reference": "CVE-2022-31219", "Description": "Vulnerabilities in the Drive Composer allow a low privileged attacker to create and write to a file anywhere on the file system as SYSTEM with arbitrary content as long as the file does not already exist. The Drive Composer installer file allows a low-privileged user to run a \"repair\" operation on the product. "}, {"Reference": "CVE-2022-21997", "Description": "Windows Print Spooler Elevation of Privilege Vulnerability"}]}
{"ID": "590", "Name": "Free of Memory not on the Heap", "Abstraction": "Variant", "Description": "The product calls free() on a pointer to memory that was not allocated using associated heap allocation functions such as malloc(), calloc(), or realloc().", "ExtendedDescription": "When free() is called on an invalid pointer, the program's memory management data structures may become corrupted. This corruption can cause the program to crash or, in some circumstances, an attacker may be able to cause free() to operate on controllable memory locations to modify critical program variables or execute code.", "AffectedResources": ["Memory"], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "591", "Name": "Sensitive Data Storage in Improperly Locked Memory", "Abstraction": "Variant", "Description": "The product stores sensitive data in memory that is not locked, or that has been incorrectly locked, which might cause the memory to be written to swap files on disk by the virtual memory manager. This can make the data more accessible to external actors.", "ExtendedDescription": "On Windows systems the VirtualLock function can lock a page of memory to ensure that it will remain present in memory and not be swapped to disk. However, on older versions of Windows, such as 95, 98, or Me, the VirtualLock() function is only a stub and provides no protection. On POSIX systems the mlock() call ensures that a page will stay resident in memory but does not guarantee that the page will not appear in the swap. Therefore, it is unsuitable for use as a protection mechanism for sensitive data. Some platforms, in particular Linux, do make the guarantee that the page will not be swapped, but this is non-standard and is not portable. Calls to mlock() also require supervisor privilege. Return values for both of these calls must be checked to ensure that the lock operation was actually successful.", "AffectedResources": ["Memory"], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "593", "Name": "Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created", "Abstraction": "Variant", "Description": "The product modifies the SSL context after connection creation has begun.", "ExtendedDescription": "If the program modifies the SSL_CTX object after creating SSL objects from it, there is the possibility that older SSL objects created from the original context could all be affected by that change.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "594", "Name": "J2EE Framework: Saving Unserializable Objects to Disk", "Abstraction": "Variant", "Description": "When the J2EE container attempts to write unserializable objects to disk there is no guarantee that the process will complete successfully.", "ExtendedDescription": "In heavy load conditions, most J2EE application frameworks flush objects to disk to manage memory requirements of incoming requests. For example, session scoped objects, and even application scoped objects, are written to disk when required. While these application frameworks do the real work of writing objects to disk, they do not enforce that those objects be serializable, thus leaving the web application vulnerable to crashes induced by serialization failure. An attacker may be able to mount a denial of service attack by sending enough requests to the server to force the web application to save objects to disk.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "595", "Name": "Comparison of Object References Instead of Object Contents", "Abstraction": "Variant", "Description": "The product compares object references instead of the contents of the objects themselves, preventing it from detecting equivalent objects.", "ExtendedDescription": "For example, in Java, comparing objects using == usually produces deceptive results, since the == operator compares object references rather than values; often, this means that using == for strings is actually comparing the strings' references, not their values.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "597", "Name": "Use of Wrong Operator in String Comparison", "Abstraction": "Variant", "Description": "The product uses the wrong operator when comparing a string, such as using \"==\" when the .equals() method should be used instead.", "ExtendedDescription": "In Java, using == or != to compare two strings for equality actually compares two objects for equality rather than their string values for equality. Chances are good that the two references will never be equal. While this weakness often only affects program correctness, if the equality is used for a security decision, the unintended comparison result could be leveraged to affect program security.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No", "Top25Examples": [{"Reference": "CVE-2022-36072", "Description": "SilverwareGames.io is a social network for users to play video games online. In version 1.1.8 and prior, due to an unobvious feature of PHP, hashes generated by built-in functions and starting with the `0e` symbols were being handled as zero multiplied with the `e` number. Therefore, the hash value was equal to 0. The maintainers fixed this in version 1.1.9 by using `===` instead of `==` in comparisons where it is possible (e.g. on sign in/sign up handlers)."}, {"Reference": "CVE-2021-3797", "Description": "hestiacp is vulnerable to Use of Wrong Operator in String Comparison"}, {"Reference": "CVE-2022-1715", "Description": "Account Takeover in GitHub repository neorazorx/facturascripts prior to 2022.07."}]}
{"ID": "598", "Name": "Use of GET Request Method With Sensitive Query Strings", "Abstraction": "Variant", "Description": "The web application uses the HTTP GET method to process a request and includes sensitive information in the query string of that request.", "ExtendedDescription": "The query string for the URL could be saved in the browser's history, passed through Referers to other web sites, stored in web logs, or otherwise recorded in other sources. If the query string contains sensitive information such as session identifiers, then attackers can use this information to launch further attacks.", "ObservedExamples": [{"Reference": "CVE-2022-23546", "Description": "A discussion platform leaks private information in GET requests.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-23546"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No", "Top25Examples": [{"Reference": "CVE-2022-34452", "Description": " PowerPath Management Appliance with versions 3.3, 3.2*, 3.1 & 3.0* contains sensitive information disclosure vulnerability. An Authenticated admin user can able to exploit the issue and view sensitive information stored in the logs. "}, {"Reference": "CVE-2021-39019", "Description": "IBM Engineering Lifecycle Optimization - Publishing 6.0.6, 6.0.6.1, 7.0, 7.0.1, and 7.0.2 could disclose highly sensitive information through an HTTP GET request to an authenticated user. IBM X-Force ID: 213728."}, {"Reference": "CVE-2022-23546", "Description": "In version 2.9.0.beta14 of Discourse, an open-source discussion platform, maliciously embedded urls can leak an admin's digest of recent topics, possibly exposing private information. A patch is available for version 2.9.0.beta15. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-24414", "Description": "Dell EMC CloudLink 7.1.3 and all earlier versions, Auth Token is exposed in GET requests. These request parameters can get logged in reverse proxies and server logs. Attackers may potentially use these tokens to access CloudLink server. Tokens should not be used in request URL to avoid such attacks."}, {"Reference": "CVE-2022-25787", "Description": "Information Exposure Through Query Strings in GET Request vulnerability in LMM API of Secomea GateManager allows system administrator to hijack connection. This issue affects: Secomea GateManager all versions prior to 9.7."}]}
{"ID": "599", "Name": "Missing Validation of OpenSSL Certificate", "Abstraction": "Variant", "Description": "The product uses OpenSSL and trusts or uses a certificate without using the SSL_get_verify_result() function to ensure that the certificate satisfies all necessary security requirements.", "ExtendedDescription": "This could allow an attacker to use an invalid certificate to claim to be a trusted host, use expired certificates, or conduct other attacks that could be detected if the certificate is properly validated.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "6", "Name": "J2EE Misconfiguration: Insufficient Session-ID Length", "Abstraction": "Variant", "Description": "The J2EE application is configured to use an insufficient session ID length.", "ExtendedDescription": "If an attacker can guess or steal a session ID, then they may be able to take over the user's session (called session hijacking). The number of possible session IDs increases with increased session ID length, making it more difficult to guess or steal a session ID.", "BackgroundDetails": ["\n\nSession ID's can be used to identify communicating parties in a web environment.\n\n\nThe expected number of seconds required to guess a valid session identifier is given by the equation: (2^B+1)/(2*A*S) Where: - B is the number of bits of entropy in the session identifier. - A is the number of guesses an attacker can try each second. - S is the number of valid session identifiers that are valid and available to be guessed at any given time. The number of bits of entropy in the session identifier is always less than the total number of bits in the session identifier. For example, if session identifiers were provided in ascending order, there would be close to zero bits of entropy in the session identifier no matter the identifier's length. Assuming that the session identifiers are being generated using a good source of random numbers, we will estimate the number of bits of entropy in a session identifier to be half the total number of bits in the session identifier. For realistic identifier lengths this is possible, though perhaps optimistic.\n"], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "600", "Name": "Uncaught Exception in Servlet ", "Abstraction": "Variant", "Description": "The Servlet does not catch all exceptions, which may reveal sensitive debugging information.", "ExtendedDescription": "When a Servlet throws an exception, the default error response the Servlet container sends back to the user typically includes debugging information. This information is of great value to an attacker. For example, a stack trace might show the attacker a malformed SQL query string, the type of database being used, and the version of the application container. This information enables the attacker to target known vulnerabilities in these components.", "AlternateTerms": [{"Term": "Missing Catch Block"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "601", "Name": "URL Redirection to Untrusted Site ('Open Redirect')", "Abstraction": "Base", "Description": "A web application accepts a user-controlled input that specifies a link to an external site, and uses that link in a Redirect. This simplifies phishing attacks.", "ExtendedDescription": "An http parameter may contain a URL value and could cause the web application to redirect the request to the specified URL. By modifying the URL value to a malicious site, an attacker may successfully launch a phishing scam and steal user credentials. Because the server name in the modified link is identical to the original site, phishing attempts have a more trustworthy appearance. Whether this issue poses a vulnerability will be subject to the intended behavior of the application. For example, a search engine might intentionally provide redirects to arbitrary URLs.", "BackgroundDetails": ["Phishing is a general term for deceptive attempts to coerce private information from users that will be used for identity theft."], "AlternateTerms": [{"Term": "Open Redirect"}, {"Term": "Cross-site Redirect"}, {"Term": "Cross-domain Redirect"}], "ObservedExamples": [{"Reference": "CVE-2005-4206", "Description": "URL parameter loads the URL into a frame and causes it to appear to be part of a valid page.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-4206"}, {"Reference": "CVE-2008-2951", "Description": "An open redirect vulnerability in the search script in the software allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL as a parameter to the proper function.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2951"}, {"Reference": "CVE-2008-2052", "Description": "Open redirect vulnerability in the software allows remote attackers to redirect users to arbitrary web sites and conduct phishing attacks via a URL in the proper parameter.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2052"}, {"Reference": "CVE-2020-11053", "Description": "Chain: Go-based Oauth2 reverse proxy can send the authenticated user to another site at the end of the authentication flow. A redirect URL with HTML-encoded whitespace characters can bypass the validation (CWE-1289) to redirect to a malicious site (CWE-601)", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-11053"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "Yes", "Top25Examples": [{"Reference": "CVE-2021-46379", "Description": "DLink DIR850 ET850-1.08TRb03 is affected by an incorrect access control vulnerability through URL redirection to untrusted site."}, {"Reference": "CVE-2022-40083", "Description": "Labstack Echo v4.8.0 was discovered to contain an open redirect vulnerability via the Static Handler component. This vulnerability can be leveraged by attackers to cause a Server-Side Request Forgery (SSRF)."}, {"Reference": "CVE-2022-35406", "Description": "A URL disclosure issue was discovered in Burp Suite before 2022.6. If a user views a crafted response in the Repeater or Intruder, it may be incorrectly interpreted as a redirect."}, {"Reference": "CVE-2022-31657", "Description": "VMware Workspace ONE Access and Identity Manager contain a URL injection vulnerability. A malicious actor with network access may be able to redirect an authenticated user to an arbitrary domain."}]}
{"ID": "602", "Name": "Client-Side Enforcement of Server-Side Security", "Abstraction": "Class", "Description": "The product is composed of a server that relies on the client to implement a mechanism that is intended to protect the server.", "ExtendedDescription": "When the server relies on protection mechanisms placed on the client side, an attacker can modify the client-side behavior to bypass the protection mechanisms, resulting in potentially unexpected interactions between the client and server. The consequences will vary, depending on what the mechanisms are trying to protect.", "ObservedExamples": [{"Reference": "CVE-2022-33139", "Description": "SCADA system only uses client-side authentication, allowing adversaries to impersonate other users.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-33139"}, {"Reference": "CVE-2006-6994", "Description": "ASP program allows upload of .asp files by bypassing client-side checks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6994"}, {"Reference": "CVE-2007-0163", "Description": "steganography products embed password information in the carrier file, which can be extracted from a modified client.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0163"}, {"Reference": "CVE-2007-0164", "Description": "steganography products embed password information in the carrier file, which can be extracted from a modified client.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0164"}, {"Reference": "CVE-2007-0100", "Description": "client allows server to modify client's configuration and overwrite arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0100"}], "MappingNotes": {"Usage": "Allowed-with-Review"}, "1003_view": "No", "Top25Examples": [{"Reference": "CVE-2022-29457", "Description": "Zoho ManageEngine ADSelfService Plus before 6121, ADAuditPlus 7060, Exchange Reporter Plus 5701, and ADManagerPlus 7131 allow NTLM Hash disclosure during certain storage-path configuration steps."}, {"Reference": "CVE-2022-24125", "Description": "The matchmaking servers of Bandai Namco FromSoftware Dark Souls III through 2022-03-19 allow remote attackers to send arbitrary push requests to clients via a RequestSendMessageToPlayers request. For example, ability to send a push message to hundreds of thousands of machines is only restricted on the client side, and can thus be bypassed with a modified client."}, {"Reference": "CVE-2021-25648", "Description": "Mobile application \"Testes de Codigo\" 11.4 and prior allows an attacker to gain access to the administrative interface and premium features by tampering the boolean value of parameters \"isAdmin\" and \"isPremium\" located on device storage."}, {"Reference": "CVE-2022-34397", "Description": " Dell Unisphere for PowerMax vApp, VASA Provider vApp, and Solution Enabler vApp version 10.0.0.5 and below contains an authorization bypass vulnerability, allowing users to perform actions in which they are not authorized. "}, {"Reference": "CVE-2022-38341", "Description": "Safe Software FME Server v2021.2.5 and below does not employ server-side validation."}]}
{"ID": "603", "Name": "Use of Client-Side Authentication", "Abstraction": "Base", "Description": "A client/server product performs authentication within client code but not in server code, allowing server-side authentication to be bypassed via a modified client that omits the authentication check.", "ExtendedDescription": "Client-side authentication is extremely weak and may be breached easily. Any attacker may read the source code and reverse-engineer the authentication mechanism to access parts of the application which would otherwise be protected.", "ObservedExamples": [{"Reference": "CVE-2022-33139", "Description": "SCADA system only uses client-side authentication, allowing adversaries to impersonate other users.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-33139"}, {"Reference": "CVE-2006-0230", "Description": "Client-side check for a password allows access to a server using crafted XML requests from a modified client.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-0230"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No", "Top25Examples": [{"Reference": "CVE-2022-1065", "Description": "A vulnerability within the authentication process of Abacus ERP allows a remote attacker to bypass the second authentication factor. This issue affects: Abacus ERP v2022 versions prior to R1 of 2022-01-15; v2021 versions prior to R4 of 2022-01-15; v2020 versions prior to R6 of 2022-01-15; v2019 versions later than R5 (service pack); v2018 versions later than R5 (service pack). This issue does not affect: Abacus ERP v2019 versions prior to R5 of 2020-03-15; v2018 versions prior to R7 of 2020-04-15; v2017 version and prior versions and prior versions."}, {"Reference": "CVE-2022-31463", "Description": "Owl Labs Meeting Owl 5.2.0.15 does not require a password for Bluetooth commands, because only client-side authentication is used."}, {"Reference": "CVE-2022-3218", "Description": "Due to a reliance on client-side authentication, the WiFi Mouse (Mouse Server) from Necta LLC's authentication mechanism is trivially bypassed, which can result in remote code execution."}]}
{"ID": "605", "Name": "Multiple Binds to the Same Port", "Abstraction": "Variant", "Description": "When multiple sockets are allowed to bind to the same port, other services on that port may be stolen or spoofed.", "ExtendedDescription": "On most systems, a combination of setting the SO_REUSEADDR socket option, and a call to bind() allows any process to bind to a port to which a previous process has bound with INADDR_ANY. This allows a user to bind to the specific address of a server bound to INADDR_ANY on an unprivileged port, and steal its UDP packets/TCP connection.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "606", "Name": "Unchecked Input for Loop Condition", "Abstraction": "Base", "Description": "The product does not properly check inputs that are used for loop conditions, potentially leading to a denial of service or other consequences because of excessive looping.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No", "Top25Examples": [{"Reference": "CVE-2022-26477", "Description": "The Security Team noticed that the termination condition of the for loop in the readExternal method is a controllable variable, which, if tampered with, may lead to CPU exhaustion. As a fix, we added an upper bound and termination condition in the read and write logic. We classify it as a \"low-priority but useful improvement\". SystemDS is a distributed system and needs to serialize/deserialize data but in many code paths (e.g., on Spark broadcast/shuffle or writing to sequence files) the byte stream is anyway protected by additional CRC fingerprints. In this particular case though, the number of decoders is upper-bounded by twice the number of columns, which means an attacker would need to modify two entries in the byte stream in a consistent manner. By adding these checks robustness was strictly improved with almost zero overhead. These code changes are available in versions higher than 2.2.1."}, {"Reference": "CVE-2022-41861", "Description": "A flaw was found in freeradius. A malicious RADIUS client or home server can send a malformed abinary attribute which can cause the server to crash."}]}
{"ID": "607", "Name": "Public Static Final Field References Mutable Object", "Abstraction": "Variant", "Description": "A public or protected static final field references a mutable object, which allows the object to be changed by malicious code, or accidentally from another package.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "608", "Name": "Struts: Non-private Field in ActionForm Class", "Abstraction": "Variant", "Description": "An ActionForm class contains a field that has not been declared private, which can be accessed without using a setter or getter.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "609", "Name": "Double-Checked Locking", "Abstraction": "Base", "Description": "The product uses double-checked locking to access a resource without the overhead of explicit synchronization, but the locking is insufficient.", "ExtendedDescription": "Double-checked locking refers to the situation where a programmer checks to see if a resource has been initialized, grabs a lock, checks again to see if the resource has been initialized, and then performs the initialization if it has not occurred yet. This should not be done, as it is not guaranteed to work in all languages and on all architectures. In summary, other threads may not be operating inside the synchronous block and are not guaranteed to see the operations execute in the same order as they would appear inside the synchronous block.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "61", "Name": "UNIX Symbolic Link (Symlink) Following", "Abstraction": "Compound", "Description": "The product, when opening a file or directory, does not sufficiently account for when the file is a symbolic link that resolves to a target outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.", "ExtendedDescription": "A product that allows UNIX symbolic links (symlink) as part of paths whether in internal code or through user input can allow an attacker to spoof the symbolic link and traverse the file system to unintended locations or access arbitrary files. The symbolic link can permit an attacker to read/write/corrupt a file that they originally did not have permissions to access.", "AlternateTerms": [{"Term": "Symlink following"}, {"Term": "symlink vulnerability"}], "ObservedExamples": [{"Reference": "CVE-1999-1386", "Description": "Some versions of Perl follow symbolic links when running with the -e option, which allows local users to overwrite arbitrary files via a symlink attack.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1386"}, {"Reference": "CVE-2000-1178", "Description": "Text editor follows symbolic links when creating a rescue copy during an abnormal exit, which allows local users to overwrite the files of other users.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1178"}, {"Reference": "CVE-2004-0217", "Description": "Antivirus update allows local users to create or append to arbitrary files via a symlink attack on a logfile.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0217"}, {"Reference": "CVE-2003-0517", "Description": "Symlink attack allows local users to overwrite files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0517"}, {"Reference": "CVE-2004-0689", "Description": "Possible interesting example", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0689"}, {"Reference": "CVE-2005-1879", "Description": "Second-order symlink vulnerabilities", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1879"}, {"Reference": "CVE-2005-1880", "Description": "Second-order symlink vulnerabilities", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1880"}, {"Reference": "CVE-2005-1916", "Description": "Symlink in Python program", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1916"}, {"Reference": "CVE-2000-0972", "Description": "Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0972"}, {"Reference": "CVE-2005-0824", "Description": "Signal causes a dump that follows symlinks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0824"}, {"Reference": "CVE-2015-3629", "Description": "A Libcontainer used in Docker Engine allows local users to escape containerization and write to an arbitrary file on the host system via a symlink attack in an image when respawning a container.", "Link": "https://www.cve.org/CVERecord?id=CVE-2015-3629"}, {"Reference": "CVE-2020-26277", "Description": "In a MySQL database deployment tool, users may craft a maliciously packaged tarball that contains symlinks to files external to the target and once unpacked, will execute.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-26277"}, {"Reference": "CVE-2021-21272", "Description": "\"Zip Slip\" vulnerability in Go-based Open Container Initiative (OCI) registries product allows writing arbitrary files outside intended directory via symbolic links or hard links in a gzipped tarball.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-21272"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No", "Top25Examples": [{"Reference": "CVE-2022-20720", "Description": "Multiple vulnerabilities in the Cisco IOx application hosting environment on multiple Cisco platforms could allow an attacker to inject arbitrary commands into the underlying host operating system, execute arbitrary code on the underlying host operating system, install applications without being authenticated, or conduct a cross-site scripting (XSS) attack against a user of the affected software. For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2022-26612", "Description": "In Apache Hadoop, The unTar function uses unTarUsingJava function on Windows and the built-in tar utility on Unix and other OSes. As a result, a TAR entry may create a symlink under the expected extraction directory which points to an external directory. A subsequent TAR entry may extract an arbitrary file into the external directory using the symlink name. This however would be caught by the same targetDirPath check on Unix because of the getCanonicalPath call. However on Windows, getCanonicalPath doesn't resolve symbolic links, which bypasses the check. unpackEntries during TAR extraction follows symbolic links which allows writing outside expected base directory on Windows. This was addressed in Apache Hadoop 3.2.3"}, {"Reference": "CVE-2022-3592", "Description": "A symlink following vulnerability was found in Samba, where a user can create a symbolic link that will make 'smbd' escape the configured share path. This flaw allows a remote user with access to the exported part of the file system under a share via SMB1 unix extensions or NFS to create symlinks to files outside the 'smbd' configured share path and gain access to another restricted server's filesystem."}, {"Reference": "CVE-2022-36113", "Description": "Cargo is a package manager for the rust programming language. After a package is downloaded, Cargo extracts its source code in the ~/.cargo folder on disk, making it available to the Rust projects it builds. To record when an extraction is successful, Cargo writes \"ok\" to the .cargo-ok file at the root of the extracted source code once it extracted all the files. It was discovered that Cargo allowed packages to contain a .cargo-ok symbolic link, which Cargo would extract. Then, when Cargo attempted to write \"ok\" into .cargo-ok, it would actually replace the first two bytes of the file the symlink pointed to with ok. This would allow an attacker to corrupt one file on the machine using Cargo to extract the package. Note that by design Cargo allows code execution at build time, due to build scripts and procedural macros. The vulnerabilities in this advisory allow performing a subset of the possible damage in a harder to track down way. Your dependencies must still be trusted if you want to be protected from attacks, as it's possible to perform the same attacks with build scripts and procedural macros. The vulnerability is present in all versions of Cargo. Rust 1.64, to be released on September 22nd, will include a fix for it. Since the vulnerability is just a more limited way to accomplish what a malicious build scripts or procedural macros can do, we decided not to publish Rust point releases backporting the security fix. Patch files are available for Rust 1.63.0 are available in the wg-security-response repository for people building their own toolchain. Mitigations We recommend users of alternate registries to exercise care in which package they download, by only including trusted dependencies in their projects. Please note that even with these vulnerabilities fixed, by design Cargo allows arbitrary code execution at build time thanks to build scripts and procedural macros: a malicious dependency will be able to cause damage regardless of these vulnerabilities. crates.io implemented server-side checks to reject these kinds of packages years ago, and there are no packages on crates.io exploiting these vulnerabilities. crates.io users still need to exercise care in choosing their dependencies though, as remote code execution is allowed by design there as well."}, {"Reference": "CVE-2022-24904", "Description": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. Argo CD starting with version 0.7.0 and prior to versions 2.1.15m 2.2.9, and 2.3.4 is vulnerable to a symlink following bug allowing a malicious user with repository write access to leak sensitive files from Argo CD's repo-server. A malicious Argo CD user with write access for a repository which is (or may be) used in a directory-type Application may commit a symlink which points to an out-of-bounds file. Sensitive files which could be leaked include manifest files from other Applications' source repositories (potentially decrypted files, if you are using a decryption plugin) or any JSON-formatted secrets which have been mounted as files on the repo-server. A patch for this vulnerability has been released in Argo CD versions 2.3.4, 2.2.9, and 2.1.15. Users of versions 2.3.0 or above who do not have any Jsonnet/directory-type Applications may disable the Jsonnet/directory config management tool as a workaround."}, {"Reference": "CVE-2022-35631", "Description": "On MacOS and Linux, it may be possible to perform a symlink attack by replacing this predictable file name with a symlink to another file and have the Velociraptor client overwrite the other file. This issue was resolved in Velociraptor 0.6.5-2."}, {"Reference": "CVE-2022-45440", "Description": "A vulnerability exists in the FTP server of the Zyxel AX7501-B0 firmware prior to V5.17(ABPC.3)C0, which processes symbolic links on external storage media. A local authenticated attacker with administrator privileges could abuse this vulnerability to access the root file system by creating a symbolic link on external storage media, such as a USB flash drive, and then logging into the FTP server on a vulnerable device."}, {"Reference": "CVE-2022-21944", "Description": "A UNIX Symbolic Link (Symlink) Following vulnerability in the systemd service file for watchman of openSUSE Backports SLE-15-SP3, Factory allows local attackers to escalate to root. This issue affects: openSUSE Backports SLE-15-SP3 watchman versions prior to 4.9.0. openSUSE Factory watchman versions prior to 4.9.0-9.1."}, {"Reference": "CVE-2022-31250", "Description": "A UNIX Symbolic Link (Symlink) Following vulnerability in keylime of openSUSE Tumbleweed allows local attackers to escalate from the keylime user to root. This issue affects: openSUSE Tumbleweed keylime versions prior to 6.4.2-1.1."}]}
{"ID": "610", "Name": "Externally Controlled Reference to a Resource in Another Sphere", "Abstraction": "Class", "Description": "The product uses an externally controlled name or reference that resolves to a resource that is outside of the intended control sphere.", "ObservedExamples": [{"Reference": "CVE-2022-3032", "Description": "An email client does not block loading of remote objects in a nested document.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-3032"}, {"Reference": "CVE-2022-45918", "Description": "Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-45918"}, {"Reference": "CVE-2018-1000613", "Description": "Cryptography API uses unsafe reflection when deserializing a private key", "Link": "https://www.cve.org/CVERecord?id=CVE-2018-1000613"}, {"Reference": "CVE-2020-11053", "Description": "Chain: Go-based Oauth2 reverse proxy can send the authenticated user to another site at the end of the authentication flow. A redirect URL with HTML-encoded whitespace characters can bypass the validation (CWE-1289) to redirect to a malicious site (CWE-601)", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-11053"}, {"Reference": "CVE-2022-42745", "Description": "Recruiter software allows reading arbitrary files using XXE", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-42745"}, {"Reference": "CVE-2004-2331", "Description": "Database system allows attackers to bypass sandbox restrictions by using the Reflection API.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2331"}], "MappingNotes": {"Usage": "Discouraged"}, "1003_view": "Yes", "Top25Examples": [{"Reference": "CVE-2022-27593", "Description": "An externally controlled reference to a resource vulnerability has been reported to affect QNAP NAS running Photo Station. If exploited, This could allow an attacker to modify system files. We have already fixed the vulnerability in the following versions: QTS 5.0.1: Photo Station 6.1.2 and later QTS 5.0.0/4.5.x: Photo Station 6.0.22 and later QTS 4.3.6: Photo Station 5.7.18 and later QTS 4.3.3: Photo Station 5.4.15 and later QTS 4.2.6: Photo Station 5.2.14 and later"}, {"Reference": "CVE-2022-30190", "Description": "A remote code execution vulnerability exists when MSDT is called using the URL protocol from a calling application such as Word. An attacker who successfully exploits this vulnerability can run arbitrary code with the privileges of the calling application. The attacker can then install programs, view, change, or delete data, or create new accounts in the context allowed by the user\u2019s rights. Please see the MSRC Blog Entry for important information about steps you can take to protect your system from this vulnerability. "}, {"Reference": "CVE-2022-3032", "Description": "When receiving an HTML email that contained an <code>iframe</code> element, which used a <code>srcdoc</code> attribute to define the inner HTML document, remote objects specified in the nested document, for example images or videos, were not blocked. Rather, the network was accessed, the objects were loaded and displayed. This vulnerability affects Thunderbird < 102.2.1 and Thunderbird < 91.13.1."}]}
{"ID": "611", "Name": "Improper Restriction of XML External Entity Reference", "Abstraction": "Base", "Description": "The product processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output.", "ExtendedDescription": "\n\nXML documents optionally contain a Document Type Definition (DTD), which, among other features, enables the definition of XML entities. It is possible to define an entity by providing a substitution string in the form of a URI. The XML parser can access the contents of this URI and embed these contents back into the XML document for further processing.\n\n\nBy submitting an XML file that defines an external entity with a file:// URI, an attacker can cause the processing application to read the contents of a local file. For example, a URI such as \"file:///c:/winnt/win.ini\" designates (in Windows) the file C:\\Winnt\\win.ini, or file:///etc/passwd designates the password file in Unix-based systems. Using URIs with other schemes such as http://, the attacker can force the application to make outgoing requests to servers that the attacker cannot reach directly, which can be used to bypass firewall restrictions or hide the source of attacks such as port scanning.\n\n\nOnce the content of the URI is read, it is fed back into the application that is processing the XML. This application may echo back the data (e.g. in an error message), thereby exposing the file contents.\n", "AlternateTerms": [{"Term": "XXE", "Description": "An acronym used for the term \"XML eXternal Entities\""}], "ObservedExamples": [{"Reference": "CVE-2022-42745", "Description": "Recruiter software allows reading arbitrary files using XXE", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-42745"}, {"Reference": "CVE-2005-1306", "Description": "A browser control can allow remote attackers to determine the existence of files via Javascript containing XML script.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1306"}, {"Reference": "CVE-2012-5656", "Description": "XXE during SVG image conversion", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-5656"}, {"Reference": "CVE-2012-2239", "Description": "XXE in PHP application allows reading the application's configuration file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-2239"}, {"Reference": "CVE-2012-3489", "Description": "XXE in database server", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-3489"}, {"Reference": "CVE-2012-4399", "Description": "XXE in rapid web application development framework allows reading arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-4399"}, {"Reference": "CVE-2012-3363", "Description": "XXE via XML-RPC request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-3363"}, {"Reference": "CVE-2012-0037", "Description": "XXE in office document product using RDF.", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-0037"}, {"Reference": "CVE-2011-4107", "Description": "XXE in web-based administration tool for database.", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-4107"}, {"Reference": "CVE-2010-3322", "Description": "XXE in product that performs large-scale data analysis.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-3322"}, {"Reference": "CVE-2009-1699", "Description": "XXE in XSL stylesheet functionality in a common library used by some web browsers.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1699"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "Yes", "Top25Examples": [{"Reference": "CVE-2022-23170", "Description": "SysAid - Okta SSO integration - was found vulnerable to XML External Entity Injection vulnerability. Any SysAid environment that uses the Okta SSO integration might be vulnerable. An unauthenticated attacker could exploit the XXE vulnerability by sending a malformed POST request to the identity provider endpoint. An attacker can extract the identity provider endpoint by decoding the SAMLRequest parameter's value and searching for the AssertionConsumerServiceURL parameter's value. It often allows an attacker to view files on the application server filesystem and interact with any back-end or external systems that the application can access. In some situations, an attacker can escalate an XXE attack to compromise the underlying server or other back-end infrastructure by leveraging the XXE vulnerability to perform server-side request forgery (SSRF) attacks."}, {"Reference": "CVE-2022-24449", "Description": "Solar appScreener through 3.10.4, when a valid license is not present, allows XXE and SSRF attacks via a crafted XML document."}, {"Reference": "CVE-2022-2458", "Description": "XML external entity injection(XXE) is a vulnerability that allows an attacker to interfere with an application's processing of XML data. This attack occurs when XML input containing a reference to an external entity is processed by a weakly configured XML parser. The software processes an XML document that can contain XML entities with URIs that resolve to documents outside of the intended sphere of control, causing the product to embed incorrect documents into its output. Here, XML external entity injection lead to External Service interaction & Internal file read in Business Central and also Kie-Server APIs."}, {"Reference": "CVE-2022-27193", "Description": "CVRF-CSAF-Converter before 1.0.0-rc2 resolves XML External Entities (XXE). This leads to the inclusion of arbitrary (local) file content into the generated output document. An attacker can exploit this to disclose information from the system running the converter."}, {"Reference": "CVE-2022-3338", "Description": "An External XML entity (XXE) vulnerability in ePO prior to 5.10 Update 14 can lead to an unauthenticated remote attacker to potentially trigger a Server Side Request Forgery attack. This can be exploited by mimicking the Agent Handler call to ePO and passing the carefully constructed XML file through the API."}, {"Reference": "CVE-2022-35741", "Description": "Apache CloudStack version 4.5.0 and later has a SAML 2.0 authentication Service Provider plugin which is found to be vulnerable to XML external entity (XXE) injection. This plugin is not enabled by default and the attacker would require that this plugin be enabled to exploit the vulnerability. When the SAML 2.0 plugin is enabled in affected versions of Apache CloudStack could potentially allow the exploitation of XXE vulnerabilities. The SAML 2.0 messages constructed during the authentication flow in Apache CloudStack are XML-based and the XML data is parsed by various standard libraries that are now understood to be vulnerable to XXE injection attacks such as arbitrary file reading, possible denial of service, server-side request forgery (SSRF) on the CloudStack management server."}, {"Reference": "CVE-2022-38342", "Description": "Safe Software FME Server v2021.2.5, v2022.0.0.2 and below was discovered to contain a XML External Entity (XXE) vulnerability which allows authenticated attackers to perform data exfiltration or Server-Side Request Forgery (SSRF) attacks."}, {"Reference": "CVE-2022-3980", "Description": "An XML External Entity (XEE) vulnerability allows server-side request forgery (SSRF) and potential code execution in Sophos Mobile managed on-premises between versions 5.0.0 and 9.7.4."}, {"Reference": "CVE-2022-42745", "Description": "CandidATS version 3.0.0 allows an external attacker to read arbitrary files from the server. This is possible because the application is vulnerable to XXE."}, {"Reference": "CVE-2022-45194", "Description": "CBRN-Analysis before 22 allows XXE attacks via am mws XML document, leading to NTLMv2-SSP hash disclosure."}, {"Reference": "CVE-2022-45326", "Description": "An XML external entity (XXE) injection vulnerability in Kwoksys Kwok Information Server before v2.9.5.SP31 allows remote authenticated users to conduct server-side request forgery (SSRF) attacks."}, {"Reference": "CVE-2022-46827", "Description": "In JetBrains IntelliJ IDEA before 2022.3 an XXE attack leading to SSRF via requests to custom plugin repositories was possible."}, {"Reference": "CVE-2022-47514", "Description": "An XML external entity (XXE) injection vulnerability in XML-RPC.NET before 2.5.0 allows remote authenticated users to conduct server-side request forgery (SSRF) attacks, as demonstrated by a pingback.aspx POST request."}, {"Reference": "CVE-2022-47873", "Description": "Netcad KEOS 1.0 is vulnerable to XML External Entity (XXE) resulting in SSRF with XXE (remote)."}]}
{"ID": "612", "Name": "Improper Authorization of Index Containing Sensitive Information", "Abstraction": "Base", "Description": "The product creates a search index of private or sensitive documents, but it does not properly limit index access to actors who are authorized to see the original information.", "ExtendedDescription": "Web sites and other document repositories may apply an indexing routine against a group of private documents to facilitate search. If the index's results are available to parties who do not have access to the documents being indexed, then attackers could obtain portions of the documents by conducting targeted searches and reading the results. The risk is especially dangerous if search results include surrounding text that was not part of the search query. This issue can appear in search engines that are not configured (or implemented) to ignore critical files that should remain hidden; even without permissions to download these files directly, the remote user could read them.", "ObservedExamples": [{"Reference": "CVE-2022-41918", "Description": "A search application's access control rules are not properly applied to indices for data streams, allowing for the viewing of sensitive information.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-41918"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No", "Top25Examples": [{"Reference": "CVE-2022-22565", "Description": "Dell PowerScale OneFS, versions 9.0.0-9.3.0, contain an improper authorization of index containing sensitive information. An authenticated and privileged user could potentially exploit this vulnerability, leading to disclosure or modification of sensitive data."}, {"Reference": "CVE-2022-35980", "Description": "OpenSearch Security is a plugin for OpenSearch that offers encryption, authentication and authorization. Versions 2.0.0.0 and 2.1.0.0 of the security plugin are affected by an information disclosure vulnerability. Requests to an OpenSearch cluster configured with advanced access control features document level security (DLS), field level security (FLS), and/or field masking will not be filtered when the query's search pattern matches an aliased index. OpenSearch Dashboards creates an alias to `.kibana` by default, so filters with the index pattern of `*` to restrict access to documents or fields will not be applied. This issue allows requests to access sensitive information when customer have acted to restrict access that specific information. OpenSearch 2.2.0, which is compatible with OpenSearch Security 2.2.0.0, contains the fix for this issue. There is no recommended work around."}, {"Reference": "CVE-2022-41918", "Description": "OpenSearch is a community-driven, open source fork of Elasticsearch and Kibana. There is an issue with the implementation of fine-grained access control rules (document-level security, field-level security and field masking) where they are not correctly applied to the indices that back data streams potentially leading to incorrect access authorization. OpenSearch 1.3.7 and 2.4.0 contain a fix for this issue. Users are advised to update. There are no known workarounds for this issue."}]}
{"ID": "613", "Name": "Insufficient Session Expiration", "Abstraction": "Base", "Description": "According to WASC, \"Insufficient Session Expiration is when a web site permits an attacker to reuse old session credentials or session IDs for authorization.\"", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "Yes", "Top25Examples": [{"Reference": "CVE-2022-24895", "Description": "Symfony is a PHP framework for web and console applications and a set of reusable PHP components. When authenticating users Symfony by default regenerates the session ID upon login, but preserves the rest of session attributes. Because this does not clear CSRF tokens upon login, this might enables same-site attackers to bypass the CSRF protection mechanism by performing an attack similar to a session-fixation. This issue has been fixed in the 4.4 branch. "}, {"Reference": "CVE-2022-43844", "Description": "IBM Robotic Process Automation for Cloud Pak 20.12 through 21.0.3 is vulnerable to broken access control. A user is not correctly redirected to the platform log out screen when logging out of IBM RPA for Cloud Pak. IBM X-Force ID: 239081."}, {"Reference": "CVE-2022-30277", "Description": "BD Synapsys\u2122, versions 4.20, 4.20 SR1, and 4.30, contain an insufficient session expiration vulnerability. If exploited, threat actors may be able to access, modify or delete sensitive information, including electronic protected health information (ePHI), protected health information (PHI) and personally identifiable information (PII)."}, {"Reference": "CVE-2021-29846", "Description": "IBM Security Guardium Insights 3.0 could allow an authenticated user to obtain sensitive information due to insufficient session expiration. IBM X-Force ID: 205256."}, {"Reference": "CVE-2021-3844", "Description": "Rapid7 InsightVM suffers from insufficient session expiration when an administrator performs a security relevant edit on an existing, logged on user. For example, if a user's password is changed by an administrator due to an otherwise unrelated credential leak, that user account's current session is still valid after the password change, potentially allowing the attacker who originally compromised the credential to remain logged in and able to cause further damage. This vulnerability is mitigated by the use of the Platform Login feature. This issue is related to CVE-2019-5638."}]}
{"ID": "614", "Name": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute", "Abstraction": "Variant", "Description": "The Secure attribute for sensitive cookies in HTTPS sessions is not set, which could cause the user agent to send those cookies in plaintext over an HTTP session.", "ObservedExamples": [{"Reference": "CVE-2004-0462", "Description": "A product does not set the Secure attribute for sensitive cookies in HTTPS sessions, which could cause the user agent to send those cookies in plaintext over an HTTP session with the product.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0462"}, {"Reference": "CVE-2008-3663", "Description": "A product does not set the secure flag for the session cookie in an https session, which can cause the cookie to be sent in http requests and make it easier for remote attackers to capture this cookie.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3663"}, {"Reference": "CVE-2008-3662", "Description": "A product does not set the secure flag for the session cookie in an https session, which can cause the cookie to be sent in http requests and make it easier for remote attackers to capture this cookie.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3662"}, {"Reference": "CVE-2008-0128", "Description": "A product does not set the secure flag for a cookie in an https session, which can cause the cookie to be sent in http requests and make it easier for remote attackers to capture this cookie.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0128"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No", "Top25Examples": [{"Reference": "CVE-2022-24045", "Description": "A vulnerability has been identified in Desigo DXR2 (All versions < V01.21.142.5-22), Desigo PXC3 (All versions < V01.21.142.4-18), Desigo PXC4 (All versions < V02.20.142.10-10884), Desigo PXC5 (All versions < V02.20.142.10-10884). The application, after a successful login, sets the session cookie on the browser via client-side JavaScript code, without applying any security attributes (such as \u201cSecure\u201d, \u201cHttpOnly\u201d, or \u201cSameSite\u201d). Any attempts to browse the application via unencrypted HTTP protocol would lead to the transmission of all his/her session cookies in plaintext through the network. An attacker could then be able to sniff the network and capture sensitive information."}, {"Reference": "CVE-2021-37189", "Description": "An issue was discovered on Digi TransPort Gateway devices through 5.2.13.4. They do not set the Secure attribute for sensitive cookies in HTTPS sessions, which could cause the user agent to send those cookies in cleartext over an HTTP session."}, {"Reference": "CVE-2022-26157", "Description": "An issue was discovered in the web application in Cherwell Service Management (CSM) 10.2.3. The ASP.NET_Sessionid cookie is not protected by the Secure flag. This makes it prone to interception by an attacker if traffic is sent over unencrypted channels."}, {"Reference": "CVE-2022-27225", "Description": "Gradle Enterprise before 2021.4.3 relies on cleartext data transmission in some situations. It uses Keycloak for identity management services. During the sign-in process, Keycloak sets browser cookies that effectively provide remember-me functionality. For backwards compatibility with older Safari versions, Keycloak sets a duplicate of the cookie without the Secure attribute, which allows the cookie to be sent when accessing the location that cookie is set for via HTTP. This creates the potential for an attacker (with the ability to impersonate the Gradle Enterprise host) to capture the login session of a user by having them click an http:// link to the server, despite the real server requiring HTTPS."}, {"Reference": "CVE-2021-40642", "Description": "Textpattern CMS v4.8.7 and older vulnerability exists through Sensitive Cookie in HTTPS Session Without 'Secure' Attribute via textpattern/lib/txplib_misc.php. The secure flag is not set for txp_login session cookie in the application. If the secure flag is not set, then the cookie will be transmitted in clear-text if the user visits any HTTP URLs within the cookie's scope. An attacker may be able to induce this event by feeding a user suitable links, either directly or via another web site."}, {"Reference": "CVE-2022-21940", "Description": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute vulnerability in Johnson Controls System Configuration Tool (SCT) version 14 prior to 14.2.3 and version 15 prior to 15.0.3 could allow access to the cookie."}, {"Reference": "CVE-2022-3174", "Description": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute in GitHub repository ikus060/rdiffweb prior to 2.4.2."}, {"Reference": "CVE-2022-3250", "Description": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute in GitHub repository ikus060/rdiffweb prior to 2.4.6."}, {"Reference": "CVE-2022-3251", "Description": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute in GitHub repository ikus060/minarca prior to 4.2.2."}, {"Reference": "CVE-2022-4409", "Description": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute in GitHub repository thorsten/phpmyfaq prior to 3.1.9."}, {"Reference": "CVE-2022-4683", "Description": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute in GitHub repository usememos/memos prior to 0.9.0."}, {"Reference": "CVE-2022-34307", "Description": "IBM CICS TX 11.1 does not set the secure attribute on authorization tokens or session cookies. Attackers may be able to get the cookie values by sending a http:// link to a user or by planting this link in a site the user goes to. The cookie will be sent to the insecure link and the attacker can then obtain the cookie value by snooping the traffic. IBM X-Force ID: 229436."}, {"Reference": "CVE-2021-40650", "Description": "In Connx Version 6.2.0.1269 (20210623), a cookie can be issued by the application and not have the secure flag set."}, {"Reference": "CVE-2022-47715", "Description": "In Last Yard 22.09.8-1, the cookie can be stolen via via unencrypted traffic."}]}
{"ID": "615", "Name": "Inclusion of Sensitive Information in Source Code Comments", "Abstraction": "Variant", "Description": "While adding general comments is very useful, some programmers tend to leave important data, such as: filenames related to the web application, old links or links which were not meant to be browsed by users, old code fragments, etc.", "ExtendedDescription": "An attacker who finds these comments can map the application's structure and files, expose hidden parts of the site, and study the fragments of code to reverse engineer the application, which may help develop further attacks against the site.", "ObservedExamples": [{"Reference": "CVE-2007-6197", "Description": "Version numbers and internal hostnames leaked in HTML comments.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-6197"}, {"Reference": "CVE-2007-4072", "Description": "CMS places full pathname of server in HTML comment.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-4072"}, {"Reference": "CVE-2009-2431", "Description": "blog software leaks real username in HTML comment.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2431"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "616", "Name": "Incomplete Identification of Uploaded File Variables (PHP)", "Abstraction": "Variant", "Description": "The PHP application uses an old method for processing uploaded files by referencing the four global variables that are set for each file (e.g. $varname, $varname_size, $varname_name, $varname_type). These variables could be overwritten by attackers, causing the application to process unauthorized files.", "ExtendedDescription": "These global variables could be overwritten by POST requests, cookies, or other methods of populating or overwriting these variables. This could be used to read or process arbitrary files by providing values such as \"/etc/passwd\".", "ObservedExamples": [{"Reference": "CVE-2002-1460", "Description": "Forum does not properly verify whether a file was uploaded or if the associated variables were set by POST, allowing remote attackers to read arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1460"}, {"Reference": "CVE-2002-1759", "Description": "Product doesn't check if the variables for an upload were set by uploading the file, or other methods such as $_POST.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1759"}, {"Reference": "CVE-2002-1710", "Description": "Product does not distinguish uploaded file from other files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1710"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "617", "Name": "Reachable Assertion", "Abstraction": "Base", "Description": "The product contains an assert() or similar statement that can be triggered by an attacker, which leads to an application exit or other behavior that is more severe than necessary.", "ExtendedDescription": "\n\nWhile assertion is good for catching logic errors and reducing the chances of reaching more serious vulnerability conditions, it can still lead to a denial of service.\n\n\nFor example, if a server handles multiple simultaneous connections, and an assert() occurs in one single connection that causes all other connections to be dropped, this is a reachable assertion that leads to a denial of service.\n", "AlternateTerms": [{"Term": "assertion failure"}], "ObservedExamples": [{"Reference": "CVE-2023-49286", "Description": "Chain: function in web caching proxy does not correctly check a return value (CWE-253) leading to a reachable assertion (CWE-617)", "Link": "https://www.cve.org/CVERecord?id=CVE-2023-49286"}, {"Reference": "CVE-2006-6767", "Description": "FTP server allows remote attackers to cause a denial of service (daemon abort) via crafted commands which trigger an assertion failure.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6767"}, {"Reference": "CVE-2006-6811", "Description": "Chat client allows remote attackers to cause a denial of service (crash) via a long message string when connecting to a server, which causes an assertion failure.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6811"}, {"Reference": "CVE-2006-5779", "Description": "Product allows remote attackers to cause a denial of service (daemon crash) via LDAP BIND requests with long authcid names, which triggers an assertion failure.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-5779"}, {"Reference": "CVE-2006-4095", "Description": "Product allows remote attackers to cause a denial of service (crash) via certain queries, which cause an assertion failure.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4095"}, {"Reference": "CVE-2006-4574", "Description": "Chain: security monitoring product has an off-by-one error that leads to unexpected length values, triggering an assertion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4574"}, {"Reference": "CVE-2004-0270", "Description": "Anti-virus product has assert error when line length is non-numeric.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0270"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "Yes", "Top25Examples": [{"Reference": "CVE-2022-31620", "Description": "In libjpeg before 1.64, BitStream<false>::Get in bitstream.hpp has an assertion failure that may cause denial of service. This is related to out-of-bounds array access during arithmetically coded lossless scan or arithmetically coded sequential scan."}, {"Reference": "CVE-2022-31100", "Description": "rulex is a new, portable, regular expression language. When parsing untrusted rulex expressions, rulex may crash, possibly enabling a Denial of Service attack. This happens when the expression contains a multi-byte UTF-8 code point in a string literal or after a backslash, because rulex tries to slice into the code point and panics as a result. This is a security concern for you, if your service parses untrusted rulex expressions (expressions provided by an untrusted user), and your service becomes unavailable when the thread running rulex panics. The crashes are fixed in version **0.4.3**. Affected users are advised to update to this version. The only known workaround for this issue is to assume that regular expression parsing will panic and to add logic to catch panics."}, {"Reference": "CVE-2022-3488", "Description": "Processing of repeated responses to the same query, where both responses contain ECS pseudo-options, but where the first is broken in some way, can cause BIND to exit with an assertion failure. 'Broken' in this context is anything that would cause the resolver to reject the query response, such as a mismatch between query and answer name. This issue affects BIND 9 versions 9.11.4-S1 through 9.11.37-S1 and 9.16.8-S1 through 9.16.36-S1."}, {"Reference": "CVE-2022-36004", "Description": "TensorFlow is an open source platform for machine learning. When `tf.random.gamma` receives large input shape and rates, it gives a `CHECK` fail that can trigger a denial of service attack. We have patched the issue in GitHub commit 552bfced6ce4809db5f3ca305f60ff80dd40c5a3. The fix will be included in TensorFlow 2.10.0. We will also cherrypick this commit on TensorFlow 2.9.1, TensorFlow 2.8.1, and TensorFlow 2.7.2, as these are also affected and still in supported range. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-48363", "Description": "In MPD before 0.23.8, as used on Automotive Grade Linux and other platforms, the PipeWire output plugin mishandles a Drain call in certain situations involving truncated files. Eventually there is an assertion failure in libmpdclient because libqtappfw passes in a NULL pointer."}, {"Reference": "CVE-2022-23572", "Description": "Tensorflow is an Open Source Machine Learning Framework. Under certain scenarios, TensorFlow can fail to specialize a type during shape inference. This case is covered by the `DCHECK` function however, `DCHECK` is a no-op in production builds and an assertion failure in debug builds. In the first case execution proceeds to the `ValueOrDie` line. This results in an assertion failure as `ret` contains an error `Status`, not a value. In the second case we also get a crash due to the assertion failure. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, and TensorFlow 2.6.3, as these are also affected and still in supported range."}, {"Reference": "CVE-2021-46784", "Description": "In Squid 3.x through 3.5.28, 4.x through 4.17, and 5.x before 5.6, due to improper buffer management, a Denial of Service can occur when processing long Gopher server responses."}]}
{"ID": "618", "Name": "Exposed Unsafe ActiveX Method", "Abstraction": "Variant", "Description": "An ActiveX control is intended for use in a web browser, but it exposes dangerous methods that perform actions that are outside of the browser's security model (e.g. the zone or domain).", "ExtendedDescription": "ActiveX controls can exercise far greater control over the operating system than typical Java or javascript. Exposed methods can be subject to various vulnerabilities, depending on the implemented behaviors of those methods, and whether input validation is performed on the provided arguments. If there is no integrity checking or origin validation, this method could be invoked by attackers.", "ObservedExamples": [{"Reference": "CVE-2007-1120", "Description": "download a file to arbitrary folders.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1120"}, {"Reference": "CVE-2006-6838", "Description": "control downloads and executes a url in a parameter", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6838"}, {"Reference": "CVE-2007-0321", "Description": "resultant buffer overflow", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0321"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "619", "Name": "Dangling Database Cursor ('Cursor Injection')", "Abstraction": "Base", "Description": "If a database cursor is not closed properly, then it could become accessible to other users while retaining the same privileges that were originally assigned, leaving the cursor \"dangling.\"", "ExtendedDescription": "For example, an improper dangling cursor could arise from unhandled exceptions. The impact of the issue depends on the cursor's role, but SQL injection attacks are commonly possible.", "BackgroundDetails": ["A cursor is a feature in Oracle PL/SQL and other languages that provides a handle for executing and accessing the results of SQL queries."], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "62", "Name": "UNIX Hard Link", "Abstraction": "Variant", "Description": "The product, when opening a file or directory, does not sufficiently account for when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.", "ExtendedDescription": "Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. /etc/passwd). When the process opens the file, the attacker can assume the privileges of that process.", "ObservedExamples": [{"Reference": "CVE-2001-1494", "Description": "Hard link attack, file overwrite; interesting because program checks against soft links", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1494"}, {"Reference": "CVE-2002-0793", "Description": "Hard link and possibly symbolic link following vulnerabilities in embedded operating system allow local users to overwrite arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0793"}, {"Reference": "CVE-2003-0578", "Description": "Server creates hard links and unlinks files as root, which allows local users to gain privileges by deleting and overwriting arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0578"}, {"Reference": "CVE-1999-0783", "Description": "Operating system allows local users to conduct a denial of service by creating a hard link from a device special file to a file on an NFS file system.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0783"}, {"Reference": "CVE-2004-1603", "Description": "Web hosting manager follows hard links, which allows local users to read or modify arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1603"}, {"Reference": "CVE-2004-1901", "Description": "Package listing system allows local users to overwrite arbitrary files via a hard link attack on the lockfiles.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1901"}, {"Reference": "CVE-2005-0342", "Description": "The Finder in Mac OS X and earlier allows local users to overwrite arbitrary files and gain privileges by creating a hard link from the .DS_Store file to an arbitrary file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0342"}, {"Reference": "CVE-2005-1111", "Description": "Hard link race condition", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1111"}, {"Reference": "CVE-2021-21272", "Description": "\"Zip Slip\" vulnerability in Go-based Open Container Initiative (OCI) registries product allows writing arbitrary files outside intended directory via symbolic links or hard links in a gzipped tarball.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-21272"}, {"Reference": "CVE-2003-1366", "Description": "setuid root tool allows attackers to read secret data by replacing a temp file with a hard link to a sensitive file", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1366"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "620", "Name": "Unverified Password Change", "Abstraction": "Base", "Description": "When setting a new password for a user, the product does not require knowledge of the original password, or using another form of authentication.", "ExtendedDescription": "This could be used by an attacker to change passwords for another user, thus gaining the privileges associated with that user.", "ObservedExamples": [{"Reference": "CVE-2007-0681", "Description": "Web app allows remote attackers to change the passwords of arbitrary users without providing the original password, and possibly perform other unauthorized actions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0681"}, {"Reference": "CVE-2000-0944", "Description": "Web application password change utility doesn't check the original password.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0944"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No", "Top25Examples": [{"Reference": "CVE-2022-21935", "Description": "A vulnerability in Metasys ADS/ADX/OAS 10 versions prior to 10.1.5 and Metasys ADS/ADX/OAS 11 versions prior to 11.0.2 allows unverified password change."}, {"Reference": "CVE-2022-27484", "Description": "A unverified password change in Fortinet FortiADC version 6.2.0 through 6.2.3, 6.1.x, 6.0.x, 5.x.x allows an authenticated attacker to bypass the Old Password check in the password change form via a crafted HTTP request."}, {"Reference": "CVE-2022-3152", "Description": "Unverified Password Change in GitHub repository phpfusion/phpfusion prior to 9.10.20."}, {"Reference": "CVE-2022-21934", "Description": "Under certain circumstances an authenticated user could lock other users out of the system or take over their accounts in Metasys ADS/ADX/OAS server 10 versions prior to 10.1.5 and Metasys ADS/ADX/OAS server 11 versions prior to 11.0.2."}, {"Reference": "CVE-2022-24551", "Description": "A flaw was found in StarWind Stack. The endpoint for setting a new password doesn\u2019t check the current username and old password. An attacker could reset any local user password (including system/administrator user) using any available user This affects StarWind SAN and NAS v0.2 build 1633."}, {"Reference": "CVE-2022-0862", "Description": "A lack of password change protection vulnerability in a depreciated API of McAfee Enterprise ePolicy Orchestrator (ePO) prior to 5.10 Update 13 allows a remote attacker to change the password of a compromised session without knowing the existing user's password. This functionality was removed from the User Interface in ePO 10 and the API has now been disabled. Other protection is in place to reduce the likelihood of this being successful through sending a link to a logged in user."}]}
{"ID": "621", "Name": "Variable Extraction Error", "Abstraction": "Variant", "Description": "The product uses external input to determine the names of variables into which information is extracted, without verifying that the names of the specified variables are valid. This could cause the program to overwrite unintended variables.", "ExtendedDescription": "\n\nFor example, in PHP, extraction can be used to provide functionality similar to register_globals, a dangerous functionality that is frequently disabled in production systems. Calling extract() or import_request_variables() without the proper arguments could allow arbitrary global variables to be overwritten, including superglobals.\n\n\nSimilar functionality is possible in other interpreted languages, including custom languages.\n", "AlternateTerms": [{"Term": "Variable overwrite"}], "ObservedExamples": [{"Reference": "CVE-2006-7135", "Description": "extract issue enables file inclusion", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-7135"}, {"Reference": "CVE-2006-7079", "Description": "Chain: PHP app uses extract for register_globals compatibility layer (CWE-621), enabling path traversal (CWE-22)", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-7079"}, {"Reference": "CVE-2007-0649", "Description": "extract() buried in include files makes post-disclosure analysis confusing; original report had seemed incorrect.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0649"}, {"Reference": "CVE-2006-6661", "Description": "extract() enables static code injection", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6661"}, {"Reference": "CVE-2006-2828", "Description": "import_request_variables() buried in include files makes post-disclosure analysis confusing", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-2828"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "622", "Name": "Improper Validation of Function Hook Arguments", "Abstraction": "Variant", "Description": "The product adds hooks to user-accessible API functions, but it does not properly validate the arguments. This could lead to resultant vulnerabilities.", "ExtendedDescription": "Such hooks can be used in defensive software that runs with privileges, such as anti-virus or firewall, which hooks kernel calls. When the arguments are not validated, they could be used to bypass the protection scheme or attack the product itself.", "ObservedExamples": [{"Reference": "CVE-2007-0708", "Description": "DoS in firewall using standard Microsoft functions", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0708"}, {"Reference": "CVE-2006-7160", "Description": "DoS in firewall using standard Microsoft functions", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-7160"}, {"Reference": "CVE-2007-1376", "Description": "function does not verify that its argument is the proper type, leading to arbitrary memory write", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1376"}, {"Reference": "CVE-2007-1220", "Description": "invalid syscall arguments bypass code execution limits", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1220"}, {"Reference": "CVE-2006-4541", "Description": "DoS in IDS via NULL argument", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4541"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "623", "Name": "Unsafe ActiveX Control Marked Safe For Scripting", "Abstraction": "Variant", "Description": "An ActiveX control is intended for restricted use, but it has been marked as safe-for-scripting.", "ExtendedDescription": "This might allow attackers to use dangerous functionality via a web page that accesses the control, which can lead to different resultant vulnerabilities, depending on the control's behavior.", "ObservedExamples": [{"Reference": "CVE-2007-0617", "Description": "control allows attackers to add malicious email addresses to bypass spam limits", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0617"}, {"Reference": "CVE-2007-0219", "Description": "web browser uses certain COM objects as ActiveX", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0219"}, {"Reference": "CVE-2006-6510", "Description": "kiosk allows bypass to read files", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6510"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "624", "Name": "Executable Regular Expression Error", "Abstraction": "Base", "Description": "The product uses a regular expression that either (1) contains an executable component with user-controlled inputs, or (2) allows a user to enable execution by inserting pattern modifiers.", "ExtendedDescription": "Case (2) is possible in the PHP preg_replace() function, and possibly in other languages when a user-controlled input is inserted into a string that is later parsed as a regular expression.", "ObservedExamples": [{"Reference": "CVE-2006-2059", "Description": "Executable regexp in PHP by inserting \"e\" modifier into first argument to preg_replace", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-2059"}, {"Reference": "CVE-2005-3420", "Description": "Executable regexp in PHP by inserting \"e\" modifier into first argument to preg_replace", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3420"}, {"Reference": "CVE-2006-2878", "Description": "Complex curly syntax inserted into the replacement argument to PHP preg_replace(), which uses the \"/e\" modifier", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-2878"}, {"Reference": "CVE-2006-2908", "Description": "Function allows remote attackers to execute arbitrary PHP code via the username field, which is used in a preg_replace function call with a /e (executable) modifier.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-2908"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "625", "Name": "Permissive Regular Expression", "Abstraction": "Base", "Description": "The product uses a regular expression that does not sufficiently restrict the set of allowed values.", "ExtendedDescription": "\n\nThis effectively causes the regexp to accept substrings that match the pattern, which produces a partial comparison to the target. In some cases, this can lead to other weaknesses. Common errors include:\n\n\n  - not identifying the beginning and end of the target string\n\n  - using wildcards instead of acceptable character ranges\n\n  - others\n\n", "ObservedExamples": [{"Reference": "CVE-2021-22204", "Description": "Chain: regex in EXIF processor code does not correctly determine where a string ends (CWE-625), enabling eval injection (CWE-95), as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-22204"}, {"Reference": "CVE-2006-1895", "Description": "\".*\" regexp leads to static code injection", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-1895"}, {"Reference": "CVE-2002-2175", "Description": "insertion of username into regexp results in partial comparison, causing wrong database entry to be updated when one username is a substring of another.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2175"}, {"Reference": "CVE-2006-4527", "Description": "regexp intended to verify that all characters are legal, only checks that at least one is legal, enabling file inclusion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4527"}, {"Reference": "CVE-2005-1949", "Description": "Regexp for IP address isn't anchored at the end, allowing appending of shell metacharacters.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1949"}, {"Reference": "CVE-2002-2109", "Description": "Regexp isn't \"anchored\" to the beginning or end, which allows spoofed values that have trusted values as substrings.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2109"}, {"Reference": "CVE-2006-6511", "Description": "regexp in .htaccess file allows access of files whose names contain certain substrings", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6511"}, {"Reference": "CVE-2006-6629", "Description": "allow load of macro files whose names contain certain substrings.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6629"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No", "Top25Examples": [{"Reference": "CVE-2022-42975", "Description": "socket/transport.ex in Phoenix before 1.6.14 mishandles check_origin wildcarding. NOTE: LiveView applications are unaffected by default because of the presence of a LiveView CSRF token."}, {"Reference": "CVE-2022-42717", "Description": "An issue was discovered in Hashicorp Packer before 2.3.1. The recommended sudoers configuration for Vagrant on Linux is insecure. If the host has been configured according to this documentation, non-privileged users on the host can leverage a wildcard in the sudoers configuration to execute arbitrary commands as root."}, {"Reference": "CVE-2021-35368", "Description": "OWASP ModSecurity Core Rule Set 3.1.x before 3.1.2, 3.2.x before 3.2.1, and 3.3.x before 3.3.2 is affected by a Request Body Bypass via a trailing pathname."}]}
{"ID": "626", "Name": "Null Byte Interaction Error (Poison Null Byte)", "Abstraction": "Variant", "Description": "The product does not properly handle null bytes or NUL characters when passing data between different representations or components.", "ExtendedDescription": "\n\nA null byte (NUL character) can have different meanings across representations or languages. For example, it is a string terminator in standard C libraries, but Perl and PHP strings do not treat it as a terminator. When two representations are crossed - such as when Perl or PHP invokes underlying C functionality - this can produce an interaction error with unexpected results. Similar issues have been reported for ASP. Other interpreters written in C might also be affected.\n\n\nThe poison null byte is frequently useful in path traversal attacks by terminating hard-coded extensions that are added to a filename. It can play a role in regular expression processing in PHP.\n", "ObservedExamples": [{"Reference": "CVE-2005-4155", "Description": "NUL byte bypasses PHP regular expression check", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-4155"}, {"Reference": "CVE-2005-3153", "Description": "inserting SQL after a NUL byte bypasses allowlist regexp, enabling SQL injection", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3153"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No", "Top25Examples": [{"Reference": "CVE-2022-25219", "Description": "A null byte interaction error has been discovered in the code that the telnetd_startup daemon uses to construct a pair of ephemeral passwords that allow a user to spawn a telnet service on the router, and to ensure that the telnet service persists upon reboot. By means of a crafted exchange of UDP packets, an unauthenticated attacker on the local network can leverage this null byte interaction error in such a way as to make those ephemeral passwords predictable (with 1-in-94 odds). Since the attacker must manipulate data processed by the OpenSSL function RSA_public_decrypt(), successful exploitation of this vulnerability depends on the use of an unpadded RSA cipher (CVE-2022-25218)."}]}
{"ID": "627", "Name": "Dynamic Variable Evaluation", "Abstraction": "Variant", "Description": "In a language where the user can influence the name of a variable at runtime, if the variable names are not controlled, an attacker can read or write to arbitrary variables, or access arbitrary functions.", "ExtendedDescription": "The resultant vulnerabilities depend on the behavior of the application, both at the crossover point and in any control/data flow that is reachable by the related variables or functions.", "BackgroundDetails": ["Many interpreted languages support the use of a \"$$varname\" construct to set a variable whose name is specified by the $varname variable. In PHP, these are referred to as \"variable variables.\" Functions might also be invoked using similar syntax, such as $$funcname(arg1, arg2)."], "AlternateTerms": [{"Term": "Dynamic evaluation"}], "ObservedExamples": [{"Reference": "CVE-2009-0422", "Description": "Chain: Dynamic variable evaluation allows resultant remote file inclusion and path traversal.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0422"}, {"Reference": "CVE-2007-2431", "Description": "Chain: dynamic variable evaluation in PHP program used to modify critical, unexpected $_SERVER variable for resultant XSS.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-2431"}, {"Reference": "CVE-2006-4904", "Description": "Chain: dynamic variable evaluation in PHP program used to conduct remote file inclusion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4904"}, {"Reference": "CVE-2006-4019", "Description": "Dynamic variable evaluation in mail program allows reading and modifying attachments and preferences of other users.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4019"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "628", "Name": "Function Call with Incorrectly Specified Arguments", "Abstraction": "Base", "Description": "The product calls a function, procedure, or routine with arguments that are not correctly specified, leading to always-incorrect behavior and resultant weaknesses.", "ExtendedDescription": "\n\nThere are multiple ways in which this weakness can be introduced, including:\n\n\n  - the wrong variable or reference;\n\n  - an incorrect number of arguments;\n\n  - incorrect order of arguments;\n\n  - wrong type of arguments; or\n\n  - wrong value.\n\n", "ObservedExamples": [{"Reference": "CVE-2006-7049", "Description": "The method calls the functions with the wrong argument order, which allows remote attackers to bypass intended access restrictions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-7049"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "636", "Name": "Not Failing Securely ('Failing Open')", "Abstraction": "Class", "Description": "When the product encounters an error condition or failure, its design requires it to fall back to a state that is less secure than other options that are available, such as selecting the weakest encryption algorithm or using the most permissive access control restrictions.", "ExtendedDescription": "By entering a less secure state, the product inherits the weaknesses associated with that state, making it easier to compromise. At the least, it causes administrators to have a false sense of security. This weakness typically occurs as a result of wanting to \"fail functional\" to minimize administration and support costs, instead of \"failing safe.\"", "AlternateTerms": [{"Term": "Failing Open"}], "ObservedExamples": [{"Reference": "CVE-2007-5277", "Description": "The failure of connection attempts in a web browser resets DNS pin restrictions. An attacker can then bypass the same origin policy by rebinding a domain name to a different IP address. This was an attempt to \"fail functional.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-5277"}, {"Reference": "CVE-2006-4407", "Description": "Incorrect prioritization leads to the selection of a weaker cipher. Although it is not known whether this issue occurred in implementation or design, it is feasible that a poorly designed algorithm could be a factor.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4407"}], "MappingNotes": {"Usage": "Allowed-with-Review"}, "1003_view": "No"}
{"ID": "637", "Name": "Unnecessary Complexity in Protection Mechanism (Not Using 'Economy of Mechanism')", "Abstraction": "Class", "Description": "The product uses a more complex mechanism than necessary, which could lead to resultant weaknesses when the mechanism is not correctly understood, modeled, configured, implemented, or used.", "ExtendedDescription": "Security mechanisms should be as simple as possible. Complex security mechanisms may engender partial implementations and compatibility problems, with resulting mismatches in assumptions and implemented security. A corollary of this principle is that data specifications should be as simple as possible, because complex data specifications result in complex validation code. Complex tasks and systems may also need to be guarded by complex security checks, so simple systems should be preferred.", "AlternateTerms": [{"Term": "Unnecessary Complexity"}], "ObservedExamples": [{"Reference": "CVE-2007-6067", "Description": "Support for complex regular expressions leads to a resultant algorithmic complexity weakness (CWE-407).", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-6067"}, {"Reference": "CVE-2007-1552", "Description": "Either a filename extension and a Content-Type header could be used to infer the file type, but the developer only checks the Content-Type, enabling unrestricted file upload (CWE-434).", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1552"}, {"Reference": "CVE-2007-6479", "Description": "In Apache environments, a \"filename.php.gif\" can be redirected to the PHP interpreter instead of being sent as an image/gif directly to the user. Not knowing this, the developer only checks the last extension of a submitted filename, enabling arbitrary code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-6479"}, {"Reference": "CVE-2005-2148", "Description": "The developer cleanses the $_REQUEST superglobal array, but PHP also populates $_GET, allowing attackers to bypass the protection mechanism and conduct SQL injection attacks against code that uses $_GET.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2148"}], "MappingNotes": {"Usage": "Allowed-with-Review"}, "1003_view": "No"}
{"ID": "638", "Name": "Not Using Complete Mediation", "Abstraction": "Class", "Description": "The product does not perform access checks on a resource every time the resource is accessed by an entity, which can create resultant weaknesses if that entity's rights or privileges change over time.", "ObservedExamples": [{"Reference": "CVE-2007-0408", "Description": "Server does not properly validate client certificates when reusing cached connections.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0408"}], "MappingNotes": {"Usage": "Allowed-with-Review"}, "1003_view": "No"}
{"ID": "639", "Name": "Authorization Bypass Through User-Controlled Key", "Abstraction": "Base", "Description": "The system's authorization functionality does not prevent one user from gaining access to another user's data or record by modifying the key value identifying the data.", "ExtendedDescription": "\n\nRetrieval of a user record occurs in the system based on some key value that is under user control. The key would typically identify a user-related record stored in the system and would be used to lookup that record for presentation to the user. It is likely that an attacker would have to be an authenticated user in the system. However, the authorization process would not properly check the data access operation to ensure that the authenticated user performing the operation has sufficient entitlements to perform the requested data access, hence bypassing any other authorization checks present in the system.\n\n\nFor example, attackers can look at places where user specific data is retrieved (e.g. search screens) and determine whether the key for the item being looked up is controllable externally. The key may be a hidden field in the HTML form field, might be passed as a URL parameter or as an unencrypted cookie variable, then in each of these cases it will be possible to tamper with the key value.\n\n\nOne manifestation of this weakness is when a system uses sequential or otherwise easily-guessable session IDs that would allow one user to easily switch to another user's session and read/modify their data.\n", "AlternateTerms": [{"Term": "Insecure Direct Object Reference / IDOR", "Description": "The \"Insecure Direct Object Reference\" term, as described in the OWASP Top Ten, is broader than this CWE because it also covers path traversal (CWE-22). Within the context of vulnerability theory, there is a similarity between the OWASP concept and CWE-706: Use of Incorrectly-Resolved Name or Reference."}, {"Term": "Broken Object Level Authorization / BOLA", "Description": "BOLA is used in the 2019 OWASP API Security Top 10 and is said to be the same as IDOR."}, {"Term": "Horizontal Authorization", "Description": "\"Horizontal Authorization\" is used to describe situations in which two users have the same privilege level, but must be prevented from accessing each other's resources. This is fairly common when using key-based access to resources in a multi-user context."}], "ObservedExamples": [{"Reference": "CVE-2021-36539", "Description": "An educational application does not appropriately restrict file IDs to a particular user. The attacker can brute-force guess IDs, indicating IDOR.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-36539"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "Yes", "Top25Examples": [{"Reference": "CVE-2021-40579", "Description": "https://www.sourcecodester.com/ Online Enrollment Management System in PHP and PayPal Free Source Code 1.0 is affected by: Incorrect Access Control. The impact is: gain privileges (remote)."}, {"Reference": "CVE-2022-0731", "Description": "Improper Access Control (IDOR) in GitHub repository dolibarr/dolibarr prior to 16.0."}, {"Reference": "CVE-2022-0732", "Description": "The backend infrastructure shared by multiple mobile device monitoring services does not adequately authenticate or authorize API requests, creating an IDOR (Insecure Direct Object Reference) vulnerability."}, {"Reference": "CVE-2022-22331", "Description": "IBM SterlingPartner Engagement Manager 6.2.0 could allow a remote authenticated attacker to obtain sensitive information or modify user details caused by an insecure direct object vulnerability (IDOR). IBM X-Force ID: 219130."}, {"Reference": "CVE-2022-25336", "Description": "Ibexa DXP ezsystems/ezpublish-kernel 7.5.x before 7.5.26 and 1.3.x before 1.3.12 allows Insecure Direct Object Reference (IDOR) attacks against image files because the image path and filename can be correctly deduced."}, {"Reference": "CVE-2022-2824", "Description": "Authorization Bypass Through User-Controlled Key in GitHub repository openemr/openemr prior to 7.0.0.1. "}, {"Reference": "CVE-2022-30495", "Description": "In oretnom23 Automotive Shop Management System v1.0, the name id parameter is vulnerable to IDOR - Broken Access Control allowing attackers to change the admin password(vertical privilege escalation)"}, {"Reference": "CVE-2022-34770", "Description": "Tabit - sensitive information disclosure. Several APIs on the web system display, without authorization, sensitive information such as health statements, previous bills in a specific restaurant, alcohol consumption and smoking habits. Each of the described API\u2019s, has in its URL one or more MongoDB ID which is not so simple to enumerate. However, they each receive a \u2018tiny URL\u2019 in Tabit\u2019s domain, in the form of https://tbit.be/{suffix} with suffix being a 5 characters long string containing numbers, lower- and upper-case letters. It is not so simple to enumerate them all, but really easy to find some that work and lead to a personal endpoint. This is both an example of OWASP: API4 - rate limiting and OWASP: API1 - Broken object level authorization. Furthermore, the redirect URL disclosed the MongoDB IDs discussed above, and we could use them to query other endpoints disclosing more personal information. For example: The URL https://tabitisrael.co.il/online-reservations/health-statement?orgId={org_id}&healthStatementId={health_statement_id} is used to invite friends to fill a health statement before attending the restaurant. We can use the health_statement_id to access the https://tgm-api.tabit.cloud/health-statement/{health_statement_id} API which disclose medical information as well as id number."}, {"Reference": "CVE-2022-36202", "Description": "Doctor's Appointment System1.0 is vulnerable to Incorrect Access Control via edoc/patient/settings.php. The settings.php is affected by Broken Access Control (IDOR) via id= parameter."}, {"Reference": "CVE-2022-39945", "Description": "An improper access control vulnerability [CWE-284] in FortiMail 7.2.0, 7.0.0 through 7.0.3, 6.4 all versions, 6.2 all versions, 6.0 all versions may allow an authenticated admin user assigned to a specific domain to access and modify other domains information via insecure direct object references (IDOR)."}, {"Reference": "CVE-2021-43820", "Description": "Seafile is an open source cloud storage system. A sync token is used in Seafile file syncing protocol to authorize access to library data. To improve performance, the token is cached in memory in seaf-server. Upon receiving a token from sync client or SeaDrive client, the server checks whether the token exist in the cache. However, if the token exists in cache, the server doesn't check whether it's associated with the specific library in the URL. This vulnerability makes it possible to use any valid sync token to access data from any **known** library. Note that the attacker has to first find out the ID of a library which it has no access to. The library ID is a random UUID, which is not possible to be guessed. There are no workarounds for this issue."}, {"Reference": "CVE-2022-1949", "Description": "An access control bypass vulnerability found in 389-ds-base. That mishandling of the filter that would yield incorrect results, but as that has progressed, can be determined that it actually is an access control bypass. This may allow any remote unauthenticated user to issue a filter that allows searching for database items they do not have access to, including but not limited to potentially userPassword hashes and other sensitive data."}, {"Reference": "CVE-2022-29287", "Description": "Kentico CMS before 13.0.66 has an Insecure Direct Object Reference vulnerability. It allows an attacker with user management rights (default is Administrator) to export the user options of any user, even ones with higher privileges (like Global Administrators) than the current user. The exported XML contains every option of the exported user (even the hashed password)."}, {"Reference": "CVE-2022-1810", "Description": "Authorization Bypass Through User-Controlled Key in GitHub repository publify/publify prior to 9.2.9."}, {"Reference": "CVE-2022-22190", "Description": "An Improper Access Control vulnerability in the Juniper Networks Paragon Active Assurance Control Center allows an unauthenticated attacker to leverage a crafted URL to generate PDF reports, potentially containing sensitive configuration information. A feature was introduced in version 3.1 of the Paragon Active Assurance Control Center which allows users to selective share account data using a unique identifier. Knowing the proper format of the URL and the identifier of an existing object in an application it is possible to get access to that object without being logged in, even if the object is not shared, resulting in the opportunity for malicious exfiltration of user data. Note that the Paragon Active Assurance Control Center SaaS offering is not affected by this issue. This issue affects Juniper Networks Paragon Active Assurance version 3.1.0."}, {"Reference": "CVE-2022-22832", "Description": "An issue was discovered in Servisnet Tessa 0.0.2. Authorization data is available via an unauthenticated /data-service/users/ request."}, {"Reference": "CVE-2022-4505", "Description": "Authorization Bypass Through User-Controlled Key in GitHub repository openemr/openemr prior to 7.0.0.2. "}, {"Reference": "CVE-2022-23856", "Description": "An issue was discovered in Saviynt Enterprise Identity Cloud (EIC) 5.5 SP2.x. An attacker can enumerate users by changing the id parameter, such as for the ECM/maintenance/forgotpasswordstep1 URI."}, {"Reference": "CVE-2022-34775", "Description": "Tabit - Excessive data exposure. Another endpoint mapped by the tiny url, was one for reservation cancellation, containing the MongoDB ID of the reservation, and organization. This can be used to query the http://tgm-api.tabit.cloud/rsv/management/{reservationId}?organization={orgId} API which returns a lot of data regarding the reservation (OWASP: API3): Name, mail, phone number, the number of visits of the user to this specific restaurant, the money he spent there, the money he spent on alcohol, whether he left a deposit etc. This information can easily be used for a phishing attack."}, {"Reference": "CVE-2021-4142", "Description": "The Candlepin component of Red Hat Satellite was affected by an improper authentication flaw. Few factors could allow an attacker to use the SCA (simple content access) certificate for authentication with Candlepin."}, {"Reference": "CVE-2021-44949", "Description": "glFusion CMS 1.7.9 is affected by an access control vulnerability via /public_html/users.php."}, {"Reference": "CVE-2022-4686", "Description": "Authorization Bypass Through User-Controlled Key in GitHub repository usememos/memos prior to 0.9.0."}, {"Reference": "CVE-2022-31131", "Description": "Nextcloud mail is a Mail app for the Nextcloud home server product. Versions of Nextcloud mail prior to 1.12.2 were found to be missing user account ownership checks when performing tasks related to mail attachments. Attachments may have been exposed to incorrect system users. It is recommended that the Nextcloud Mail app is upgraded to 1.12.2. There are no known workarounds for this issue. ### Workarounds No workaround available ### References * [Pull request](https://github.com/nextcloud/mail/pull/6600) * [HackerOne](https://hackerone.com/reports/1579820) ### For more information If you have any questions or comments about this advisory: * Create a post in [nextcloud/security-advisories](https://github.com/nextcloud/security-advisories/discussions) * Customers: Open a support ticket at [support.nextcloud.com](https://support.nextcloud.com)"}, {"Reference": "CVE-2022-1245", "Description": "A privilege escalation flaw was found in the token exchange feature of keycloak. Missing authorization allows a client application holding a valid access token to exchange tokens for any target client by passing the client_id of the target. This could allow a client to gain unauthorized access to additional services."}, {"Reference": "CVE-2022-2034", "Description": "The Sensei LMS WordPress plugin before 4.5.0 does not have proper permissions set in one of its REST endpoint, allowing unauthenticated users to access private messages sent to teachers"}, {"Reference": "CVE-2022-21713", "Description": "Grafana is an open-source platform for monitoring and observability. Affected versions of Grafana expose multiple API endpoints which do not properly handle user authorization. `/teams/:teamId` will allow an authenticated attacker to view unintended data by querying for the specific team ID, `/teams/:search` will allow an authenticated attacker to search for teams and see the total number of available teams, including for those teams that the user does not have access to, and `/teams/:teamId/members` when editors_can_admin flag is enabled, an authenticated attacker can see unintended data by querying for the specific team ID. Users are advised to upgrade as soon as possible. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-2243", "Description": "An access control vulnerability in GitLab EE/CE affecting all versions from 14.8 prior to 14.10.5, 15.0 prior to 15.0.4, and 15.1 prior to 15.1.1, allows authenticated users to enumerate issues in non-linked sentry projects."}, {"Reference": "CVE-2022-3413", "Description": "Incorrect authorization during display of Audit Events in GitLab EE affecting all versions from 14.5 prior to 15.3.5, 15.4 prior to 15.4.4, and 15.5 prior to 15.5.2, allowed Developers to view the project's Audit Events and Developers or Maintainers to view the group's Audit Events. These should have been restricted to Project Maintainers, Group Owners, and above."}, {"Reference": "CVE-2022-4811", "Description": "Authorization Bypass Through User-Controlled Key vulnerability in usememos usememos/memos.This issue affects usememos/memos before 0.9.1. "}, {"Reference": "CVE-2022-0442", "Description": "The UsersWP WordPress plugin before 1.2.3.1 is missing access controls when updating a user avatar, and does not make sure file names for user avatars are unique, allowing a logged in user to overwrite another users avatar."}, {"Reference": "CVE-2021-36539", "Description": "Instructure Canvas LMS didn't properly deny access to locked/unpublished files when the unprivileged user access the DocViewer based file preview URL (canvadoc_session_url)."}]}
{"ID": "64", "Name": "Windows Shortcut Following (.LNK)", "Abstraction": "Variant", "Description": "The product, when opening a file or directory, does not sufficiently handle when the file is a Windows shortcut (.LNK) whose target is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.", "ExtendedDescription": "The shortcut (file with the .lnk extension) can permit an attacker to read/write a file that they originally did not have permissions to access.", "AlternateTerms": [{"Term": "Windows symbolic link following"}, {"Term": "symlink"}], "ObservedExamples": [{"Reference": "CVE-2019-19793", "Description": "network access control service executes program with high privileges and allows symlink to invoke another executable or perform DLL injection.", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-19793"}, {"Reference": "CVE-2000-0342", "Description": "Mail client allows remote attackers to bypass the user warning for executable attachments such as .exe, .com, and .bat by using a .lnk file that refers to the attachment, aka \"Stealth Attachment.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0342"}, {"Reference": "CVE-2001-1042", "Description": "FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1042"}, {"Reference": "CVE-2001-1043", "Description": "FTP server allows remote attackers to read arbitrary files and directories by uploading a .lnk (link) file that points to the target file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1043"}, {"Reference": "CVE-2005-0587", "Description": "Browser allows remote malicious web sites to overwrite arbitrary files by tricking the user into downloading a .LNK (link) file twice, which overwrites the file that was referenced in the first .LNK file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0587"}, {"Reference": "CVE-2001-1386", "Description": "\".LNK.\" - .LNK with trailing dot", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1386"}, {"Reference": "CVE-2003-1233", "Description": "Rootkits can bypass file access restrictions to Windows kernel directories using NtCreateSymbolicLinkObject function to create symbolic link", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1233"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "640", "Name": "Weak Password Recovery Mechanism for Forgotten Password", "Abstraction": "Base", "Description": "The product contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.", "ExtendedDescription": "\n\nIt is common for an application to have a mechanism that provides a means for a user to gain access to their account in the event they forget their password. Very often the password recovery mechanism is weak, which has the effect of making it more likely that it would be possible for a person other than the legitimate system user to gain access to that user's account. Weak password recovery schemes completely undermine a strong password authentication scheme.\n\n\nThis weakness may be that the security question is too easy to guess or find an answer to (e.g. because the question is too common, or the answers can be found using social media). Or there might be an implementation weakness in the password recovery mechanism code that may for instance trick the system into e-mailing the new password to an e-mail account other than that of the user. There might be no throttling done on the rate of password resets so that a legitimate user can be denied service by an attacker if an attacker tries to recover their password in a rapid succession. The system may send the original password to the user rather than generating a new temporary password. In summary, password recovery functionality, if not carefully designed and implemented can often become the system's weakest link that can be misused in a way that would allow an attacker to gain unauthorized access to the system.\n", "MappingNotes": {"Usage": "Allowed-with-Review"}, "1003_view": "Yes", "Top25Examples": [{"Reference": "CVE-2022-23855", "Description": "An issue was discovered in Saviynt Enterprise Identity Cloud (EIC) 5.5 SP2.x. An authentication bypass in ECM/maintenance/forgotpasswordstep1 allows an unauthenticated user to reset passwords and login as any local account."}]}
{"ID": "641", "Name": "Improper Restriction of Names for Files and Other Resources", "Abstraction": "Base", "Description": "The product constructs the name of a file or other resource using input from an upstream component, but it does not restrict or incorrectly restricts the resulting name.", "ExtendedDescription": "This may produce resultant weaknesses. For instance, if the names of these resources contain scripting characters, it is possible that a script may get executed in the client's browser if the application ever displays the name of the resource on a dynamically generated web page. Alternately, if the resources are consumed by some application parser, a specially crafted name can exploit some vulnerability internal to the parser, potentially resulting in execution of arbitrary code on the server machine. The problems will vary based on the context of usage of such malformed resource names and whether vulnerabilities are present in or assumptions are made by the targeted technology that would make code execution possible.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No", "Top25Examples": [{"Reference": "CVE-2022-36302", "Description": "File path manipulation vulnerability in BF-OS version 3.00 up to and including 3.83 allows an attacker to modify the file path to access different resources, which may contain sensitive information."}]}
{"ID": "642", "Name": "External Control of Critical State Data", "Abstraction": "Class", "Description": "The product stores security-critical state information about its users, or the product itself, in a location that is accessible to unauthorized actors.", "ExtendedDescription": "\n\nIf an attacker can modify the state information without detection, then it could be used to perform unauthorized actions or access unexpected resources, since the application programmer does not expect that the state can be changed.\n\n\nState information can be stored in various locations such as a cookie, in a hidden web form field, input parameter or argument, an environment variable, a database record, within a settings file, etc. All of these locations have the potential to be modified by an attacker. When this state information is used to control security or determine resource usage, then it may create a vulnerability. For example, an application may perform authentication, then save the state in an \"authenticated=true\" cookie. An attacker may simply create this cookie in order to bypass the authentication.\n", "ObservedExamples": [{"Reference": "CVE-2005-2428", "Description": "Mail client stores password hashes for unrelated accounts in a hidden form field.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2428"}, {"Reference": "CVE-2008-0306", "Description": "Privileged program trusts user-specified environment variable to modify critical configuration settings.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0306"}, {"Reference": "CVE-1999-0073", "Description": "Telnet daemon allows remote clients to specify critical environment variables for the server, leading to code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0073"}, {"Reference": "CVE-2007-4432", "Description": "Untrusted search path vulnerability through modified LD_LIBRARY_PATH environment variable.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-4432"}, {"Reference": "CVE-2006-7191", "Description": "Untrusted search path vulnerability through modified LD_LIBRARY_PATH environment variable.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-7191"}, {"Reference": "CVE-2008-5738", "Description": "Calendar application allows bypass of authentication by setting a certain cookie value to 1.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5738"}, {"Reference": "CVE-2008-5642", "Description": "Setting of a language preference in a cookie enables path traversal attack.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5642"}, {"Reference": "CVE-2008-5125", "Description": "Application allows admin privileges by setting a cookie value to \"admin.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5125"}, {"Reference": "CVE-2008-5065", "Description": "Application allows admin privileges by setting a cookie value to \"admin.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5065"}, {"Reference": "CVE-2008-4752", "Description": "Application allows admin privileges by setting a cookie value to \"admin.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4752"}, {"Reference": "CVE-2000-0102", "Description": "Shopping cart allows price modification via hidden form field.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0102"}, {"Reference": "CVE-2000-0253", "Description": "Shopping cart allows price modification via hidden form field.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0253"}, {"Reference": "CVE-2008-1319", "Description": "Server allows client to specify the search path, which can be modified to point to a program that the client has uploaded.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1319"}], "MappingNotes": {"Usage": "Allowed-with-Review"}, "1003_view": "No", "Top25Examples": [{"Reference": "CVE-2022-22154", "Description": "In a Junos Fusion scenario an External Control of Critical State Data vulnerability in the Satellite Device (SD) control state machine of Juniper Networks Junos OS allows an attacker who is able to make physical changes to the cabling of the device to cause a denial of service (DoS). An SD can get rebooted and subsequently controlled by an Aggregation Device (AD) which does not belong to the original Fusion setup and is just connected to an extended port of the SD. To carry out this attack the attacker needs to have physical access to the cabling between the SD and the original AD. This issue affects: Juniper Networks Junos OS 16.1R1 and later versions prior to 18.4R3-S10; 19.1 versions prior to 19.1R3-S7; 19.2 versions prior to 19.2R3-S4. This issue does not affect Juniper Networks Junos OS versions prior to 16.1R1."}]}
{"ID": "643", "Name": "Improper Neutralization of Data within XPath Expressions ('XPath Injection')", "Abstraction": "Base", "Description": "The product uses external input to dynamically construct an XPath expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.", "ExtendedDescription": "The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "644", "Name": "Improper Neutralization of HTTP Headers for Scripting Syntax", "Abstraction": "Variant", "Description": "The product does not neutralize or incorrectly neutralizes web scripting syntax in HTTP headers that can be used by web browser components that can process raw headers, such as Flash.", "ExtendedDescription": "\n\nAn attacker may be able to conduct cross-site scripting and other attacks against users who have these components enabled.\n\n\nIf a product does not neutralize user controlled data being placed in the header of an HTTP response coming from the server, the header may contain a script that will get executed in the client's browser context, potentially resulting in a cross site scripting vulnerability or possibly an HTTP response splitting attack. It is important to carefully control data that is being placed both in HTTP response header and in the HTTP response body to ensure that no scripting syntax is present, taking various encodings into account.\n", "ObservedExamples": [{"Reference": "CVE-2006-3918", "Description": "Web server does not remove the Expect header from an HTTP request when it is reflected back in an error message, allowing a Flash SWF file to perform XSS attacks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-3918"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "645", "Name": "Overly Restrictive Account Lockout Mechanism", "Abstraction": "Base", "Description": "The product contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.", "ExtendedDescription": "Account lockout is a security feature often present in applications as a countermeasure to the brute force attack on the password based authentication mechanism of the system. After a certain number of failed login attempts, the users' account may be disabled for a certain period of time or until it is unlocked by an administrator. Other security events may also possibly trigger account lockout. However, an attacker may use this very security feature to deny service to legitimate system users. It is therefore important to ensure that the account lockout security mechanism is not overly restrictive.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "646", "Name": "Reliance on File Name or Extension of Externally-Supplied File", "Abstraction": "Variant", "Description": "The product allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion.", "ExtendedDescription": "An application might use the file name or extension of a user-supplied file to determine the proper course of action, such as selecting the correct process to which control should be passed, deciding what data should be made available, or what resources should be allocated. If the attacker can cause the code to misclassify the supplied file, then the wrong action could occur. For example, an attacker could supply a file that ends in a \".php.gif\" extension that appears to be a GIF image, but would be processed as PHP code. In extreme cases, code execution is possible, but the attacker could also cause exhaustion of resources, denial of service, exposure of debug or system data (including application source code), or being bound to a particular server side process. This weakness may be due to a vulnerability in any of the technologies used by the web and application servers, due to misconfiguration, or resultant from another flaw in the application itself.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "647", "Name": "Use of Non-Canonical URL Paths for Authorization Decisions", "Abstraction": "Variant", "Description": "The product defines policy namespaces and makes authorization decisions based on the assumption that a URL is canonical. This can allow a non-canonical URL to bypass the authorization.", "ExtendedDescription": "\n\nIf an application defines policy namespaces and makes authorization decisions based on the URL, but it does not require or convert to a canonical URL before making the authorization decision, then it opens the application to attack. For example, if the application only wants to allow access to http://www.example.com/mypage, then the attacker might be able to bypass this restriction using equivalent URLs such as:\n\n\n  - http://WWW.EXAMPLE.COM/mypage\n\n  - http://www.example.com/%6Dypage (alternate encoding)\n\n  - http://192.168.1.1/mypage (IP address)\n\n  - http://www.example.com/mypage/ (trailing /)\n\n  - http://www.example.com:80/mypage\n\nTherefore it is important to specify access control policy that is based on the path information in some canonical form with all alternate encodings rejected (which can be accomplished by a default deny rule).", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "648", "Name": "Incorrect Use of Privileged APIs", "Abstraction": "Base", "Description": "The product does not conform to the API requirements for a function call that requires extra privileges. This could allow attackers to gain privileges by causing the function to be called incorrectly.", "ExtendedDescription": "\n\nWhen a product contains certain functions that perform operations requiring an elevated level of privilege, the caller of a privileged API must be careful to:\n\n\n  - ensure that assumptions made by the APIs are valid, such as validity of arguments\n\n  - account for known weaknesses in the design/implementation of the API\n\n  - call the API from a safe context\n\nIf the caller of the API does not follow these requirements, then it may allow a malicious user or process to elevate their privilege, hijack the process, or steal sensitive data.\n\nFor instance, it is important to know if privileged APIs do not shed their privileges before returning to the caller or if the privileged function might make certain assumptions about the data, context or state information passed to it by the caller. It is important to always know when and how privileged APIs can be called in order to ensure that their elevated level of privilege cannot be exploited.\n", "ObservedExamples": [{"Reference": "CVE-2003-0645", "Description": "A Unix utility that displays online help files, if installed setuid, could allow a local attacker to gain privileges when a particular file-opening function is called.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0645"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No", "Top25Examples": [{"Reference": "CVE-2022-2023", "Description": "Incorrect Use of Privileged APIs in GitHub repository polonel/trudesk prior to 1.2.4."}, {"Reference": "CVE-2022-4687", "Description": "Incorrect Use of Privileged APIs in GitHub repository usememos/memos prior to 0.9.0."}, {"Reference": "CVE-2022-25089", "Description": "Printix Secure Cloud Print Management through 1.3.1106.0 incorrectly uses Privileged APIs to modify values in HKEY_LOCAL_MACHINE via UITasks.PersistentRegistryData."}, {"Reference": "CVE-2022-32633", "Description": "In Wi-Fi, there is a possible memory access violation due to a logic error. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07441637; Issue ID: ALPS07441637."}]}
{"ID": "649", "Name": "Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking", "Abstraction": "Base", "Description": "The product uses obfuscation or encryption of inputs that should not be mutable by an external actor, but the product does not use integrity checks to detect if those inputs have been modified.", "ExtendedDescription": "When an application relies on obfuscation or incorrectly applied / weak encryption to protect client-controllable tokens or parameters, that may have an effect on the user state, system state, or some decision made on the server. Without protecting the tokens/parameters for integrity, the application is vulnerable to an attack where an adversary traverses the space of possible values of the said token/parameter in order to attempt to gain an advantage. The goal of the attacker is to find another admissible value that will somehow elevate their privileges in the system, disclose information or change the behavior of the system in some way beneficial to the attacker. If the application does not protect these critical tokens/parameters for integrity, it will not be able to determine that these values have been tampered with. Measures that are used to protect data for confidentiality should not be relied upon to provide the integrity service.", "ObservedExamples": [{"Reference": "CVE-2005-0039", "Description": "An IPSec configuration does not perform integrity checking of the IPSec packet as the result of either not configuring ESP properly to support the integrity service or using AH improperly. In either case, the security gateway receiving the IPSec packet would not validate the integrity of the packet to ensure that it was not changed. Thus if the packets were intercepted the attacker could undetectably change some of the bits in the packets. The meaningful bit flipping was possible due to the known weaknesses in the CBC encryption mode. Since the attacker knew the structure of the packet, they were able (in one variation of the attack) to use bit flipping to change the destination IP of the packet to the destination machine controlled by the attacker. And so the destination security gateway would decrypt the packet and then forward the plaintext to the machine controlled by the attacker. The attacker could then read the original message. For instance if VPN was used with the vulnerable IPSec configuration the attacker could read the victim's e-mail. This vulnerability demonstrates the need to enforce the integrity service properly when critical data could be modified by an attacker. This problem might have also been mitigated by using an encryption mode that is not susceptible to bit flipping attacks, but the preferred mechanism to address this problem still remains message verification for integrity. While this attack focuses on the network layer and requires an entity that controls part of the communication path such as a router, the situation is not much different at the software level, where an attacker can modify tokens/parameters used by the application.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0039"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "65", "Name": "Windows Hard Link", "Abstraction": "Variant", "Description": "The product, when opening a file or directory, does not sufficiently handle when the name is associated with a hard link to a target that is outside of the intended control sphere. This could allow an attacker to cause the product to operate on unauthorized files.", "ExtendedDescription": "Failure for a system to check for hard links can result in vulnerability to different types of attacks. For example, an attacker can escalate their privileges if a file used by a privileged program is replaced with a hard link to a sensitive file (e.g. AUTOEXEC.BAT). When the process opens the file, the attacker can assume the privileges of that process, or prevent the program from accurately processing data.", "ObservedExamples": [{"Reference": "CVE-2002-0725", "Description": "File system allows local attackers to hide file usage activities via a hard link to the target file, which causes the link to be recorded in the audit trail instead of the target file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0725"}, {"Reference": "CVE-2003-0844", "Description": "Web server plugin allows local users to overwrite arbitrary files via a symlink attack on predictable temporary filenames.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0844"}], "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "650", "Name": "Trusting HTTP Permission Methods on the Server Side", "Abstraction": "Variant", "Description": "The server contains a protection mechanism that assumes that any URI that is accessed using HTTP GET will not cause a state change to the associated resource. This might allow attackers to bypass intended access restrictions and conduct resource modification and deletion attacks, since some applications allow GET to modify state.", "ExtendedDescription": "The HTTP GET method and some other methods are designed to retrieve resources and not to alter the state of the application or resources on the server side. Furthermore, the HTTP specification requires that GET requests (and other requests) should not have side effects. Believing that it will be enough to prevent unintended resource alterations, an application may disallow the HTTP requests to perform DELETE, PUT and POST operations on the resource representation. However, there is nothing in the HTTP protocol itself that actually prevents the HTTP GET method from performing more than just query of the data. Developers can easily code programs that accept a HTTP GET request that do in fact create, update or delete data on the server. For instance, it is a common practice with REST based Web Services to have HTTP GET requests modifying resources on the server side. However, whenever that happens, the access control needs to be properly enforced in the application. No assumptions should be made that only HTTP DELETE, PUT, POST, and other methods have the power to alter the representation of the resource being accessed in the request.", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No", "Top25Examples": [{"Reference": "CVE-2021-45327", "Description": "Gitea before 1.11.2 is affected by Trusting HTTP Permission Methods on the Server Side when referencing the vulnerable admin or user API. which could let a remote malisious user execute arbitrary code."}]}
{"ID": "651", "Name": "Exposure of WSDL File Containing Sensitive Information", "Abstraction": "Variant", "Description": "The Web services architecture may require exposing a Web Service Definition Language (WSDL) file that contains information on the publicly accessible services and how callers of these services should interact with them (e.g. what parameters they expect and what types they return).", "ExtendedDescription": "\n\nAn information exposure may occur if any of the following apply:\n\n\n  - The WSDL file is accessible to a wider audience than intended.\n\n  - The WSDL file contains information on the methods/services that should not be publicly accessible or information about deprecated methods. This problem is made more likely due to the WSDL often being automatically generated from the code.\n\n  - Information in the WSDL file helps guess names/locations of methods/resources that should not be publicly accessible.\n\n", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
{"ID": "652", "Name": "Improper Neutralization of Data within XQuery Expressions ('XQuery Injection')", "Abstraction": "Base", "Description": "The product uses external input to dynamically construct an XQuery expression used to retrieve data from an XML database, but it does not neutralize or incorrectly neutralizes that input. This allows an attacker to control the structure of the query.", "ExtendedDescription": "The net effect is that the attacker will have control over the information selected from the XML database and may use that ability to control application flow, modify logic, retrieve unauthorized data, or bypass important checks (e.g. authentication).", "MappingNotes": {"Usage": "Allowed"}, "1003_view": "No"}
