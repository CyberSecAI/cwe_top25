{"ID": "163", "Name": "Improper Neutralization of Multiple Trailing Special Elements", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple trailing special elements that could be interpreted in unexpected ways when they are sent to a downstream component.", "ExtendedDescription": "As data is parsed, improperly handled multiple trailing special elements may cause the process to take unexpected actions that result in an attack.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "162", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "PotentialMitigations": [{"Description": "Developers should anticipate that multiple trailing special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-28", "Phase": ["Implementation"], "Strategy": "Output Encoding", "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88)."}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "ObservedExamples": [{"Reference": "CVE-2002-1078", "Description": "Directory listings in web server using multiple trailing slash", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1078"}, {"Reference": "CVE-2004-0281", "Description": "Multiple trailing dot allows directory listing", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0281"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "164", "Name": "Improper Neutralization of Internal Special Elements", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.", "ExtendedDescription": "As data is parsed, improperly handled internal special elements may cause the process to take unexpected actions that result in an attack.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "138", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "PotentialMitigations": [{"Description": "Developers should anticipate that internal special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-28", "Phase": ["Implementation"], "Strategy": "Output Encoding", "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88)."}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "165", "Name": "Improper Neutralization of Multiple Internal Special Elements", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes multiple internal special elements that could be interpreted in unexpected ways when they are sent to a downstream component.", "ExtendedDescription": "As data is parsed, improperly handled multiple internal special elements may cause the process to take unexpected actions that result in an attack.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "164", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "PotentialMitigations": [{"Description": "Developers should anticipate that multiple internal special elements will be injected/removed/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-28", "Phase": ["Implementation"], "Strategy": "Output Encoding", "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88)."}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "166", "Name": "Improper Handling of Missing Special Element", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product receives input from an upstream component, but it does not handle or incorrectly handles when an expected special element is missing.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "159", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "228", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"]}], "PotentialMitigations": [{"Description": "Developers should anticipate that special elements will be removed in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "ObservedExamples": [{"Reference": "CVE-2002-1362", "Description": "Crash via message type without separator character", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1362"}, {"Reference": "CVE-2002-0729", "Description": "Missing special character (separator) causes crash", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0729"}, {"Reference": "CVE-2002-1532", "Description": "HTTP GET without \\r\\n\\r\\n CRLF sequences causes product to wait indefinitely and prevents other users from accessing it", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1532"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "167", "Name": "Improper Handling of Additional Special Element", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product receives input from an upstream component, but it does not handle or incorrectly handles when an additional unexpected special element is provided.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "159", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "228", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "PotentialMitigations": [{"Description": "Developers should anticipate that extra special elements will be injected in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-28", "Phase": ["Implementation"], "Strategy": "Output Encoding", "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88)."}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "ObservedExamples": [{"Reference": "CVE-2000-0116", "Description": "Extra \"<\" in front of SCRIPT tag bypasses XSS prevention.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0116"}, {"Reference": "CVE-2001-1157", "Description": "Extra \"<\" in front of SCRIPT tag.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1157"}, {"Reference": "CVE-2002-2086", "Description": "\"<script\" - probably a cleansing error", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2086"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "168", "Name": "Improper Handling of Inconsistent Special Elements", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product does not properly handle input in which an inconsistency exists between two or more special characters or reserved words.", "ExtendedDescription": "An example of this problem would be if paired characters appear in the wrong order, or if the special characters are not properly nested.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "159", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "228", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability", "Access Control", "Non-Repudiation"], "Impact": ["DoS: Crash, Exit, or Restart", "Bypass Protection Mechanism", "Hide Activities"]}], "PotentialMitigations": [{"Description": "Developers should anticipate that inconsistent special elements will be injected/manipulated in the input vectors of their product. Use an appropriate combination of denylists and allowlists to ensure only valid, expected and appropriate input is processed by the system."}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "170", "Name": "Improper Null Termination", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not terminate or incorrectly terminates a string or array with a null character or equivalent terminator.", "ExtendedDescription": "Null termination errors frequently occur in two different ways. An off-by-one error could cause a null to be written out of bounds, leading to an overflow. Or, a program could use a strncpy() function call incorrectly, which prevents a null terminator from being added at all. Other scenarios are possible.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "707", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "120", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "126", "ViewID": "1000"}, {"Nature": "CanAlsoBe", "CweID": "147", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "464", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "463", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "700", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Read Memory", "Execute Unauthorized Code or Commands"], "Note": "The case of an omitted null character is the most dangerous of the possible issues. This will almost certainly result in information disclosure, and possibly a buffer overflow condition, which may be exploited to execute arbitrary code."}, {"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["DoS: Crash, Exit, or Restart", "Read Memory", "DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)"], "Note": "If a null character is omitted from a string, then most string-copying functions will read data until they locate a null character, even outside of the intended boundaries of the string. This could: cause a crash due to a segmentation fault cause sensitive adjacent memory to be copied and sent to an outsider trigger a buffer overflow when the copy is being written to a fixed-size buffer."}, {"Scope": ["Integrity", "Availability"], "Impact": ["Modify Memory", "DoS: Crash, Exit, or Restart"], "Note": "Misplaced null characters may result in any number of security problems. The biggest issue is a subset of buffer overflow, and write-what-where conditions, where data corruption occurs from the writing of a null character over valid data, or even instructions. A randomly placed null character may put the system into an undefined state, and therefore make it prone to crashing. A misplaced null character may corrupt other data in memory."}, {"Scope": ["Integrity", "Confidentiality", "Availability", "Access Control", "Other"], "Impact": ["Alter Execution Logic", "Execute Unauthorized Code or Commands"], "Note": "Should the null character corrupt the process flow, or affect a flag controlling access, it may lead to logical errors which allow for the execution of arbitrary code."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Requirements"], "Description": "Use a language that is not susceptible to these issues. However, be careful of null byte interaction errors (CWE-626) with lower-level constructs that may be written in a language that is susceptible."}, {"Phase": ["Implementation"], "Description": "Ensure that all string functions used are understood fully as to how they append null characters. Also, be wary of off-by-one errors when appending nulls to the end of strings."}, {"Phase": ["Implementation"], "Description": "If performance constraints permit, special code can be added that validates null-termination of string buffers, this is a rather naive and error-prone solution."}, {"Phase": ["Implementation"], "Description": "Switch to bounded string manipulation functions. Inspect buffer lengths involved in the buffer overrun trace reported with the defect."}, {"Phase": ["Implementation"], "Description": "Add code that fills buffers with nulls (however, the length of buffers still needs to be inspected, to ensure that the non null-terminated string is not written at the physical end of the buffer)."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code reads from cfgfile and copies the input into inputbuf using strcpy(). The code mistakenly assumes that inputbuf will always contain a NULL terminator."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t#define MAXLEN 1024\n\t...\n\tchar *pathbuf[MAXLEN];\n\t...\n\tread(cfgfile,inputbuf,MAXLEN); //does not null terminate\n\tstrcpy(pathbuf,inputbuf); //requires null terminated input\n\t...\n```"}, {"BodyText": "The code above will behave correctly if the data read from cfgfile is null terminated on disk as expected. But if an attacker is able to modify this input so that it does not contain the expected NULL character, the call to strcpy() will continue copying from memory until it encounters an arbitrary NULL character. This will likely overflow the destination buffer and, if the attacker can control the contents of memory immediately following inputbuf, can leave the application susceptible to a buffer overflow attack."}]}, {"Entries": [{"IntroText": "In the following code, readlink() expands the name of a symbolic link stored in pathname and puts the absolute path into buf. The length of the resulting value is then calculated using strlen()."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar buf[MAXPATH];\n\t...\n\treadlink(pathname, buf, MAXPATH);\n\tint length = strlen(buf);\n\t...\n```"}, {"BodyText": "The code above will not always behave correctly as readlink() does not append a NULL byte to buf. Readlink() will stop copying characters once the maximum size of buf has been reached to avoid overflowing the buffer, this will leave the value buf not NULL terminated. In this situation, strlen() will continue traversing memory until it encounters an arbitrary NULL character further on down the stack, resulting in a length value that is much larger than the size of string. Readlink() does return the number of bytes copied, but when this return value is the same as stated buf size (in this case MAXPATH), it is impossible to know whether the pathname is precisely that many bytes long, or whether readlink() has truncated the name to avoid overrunning the buffer. In testing, vulnerabilities like this one might not be caught because the unused contents of buf and the memory immediately following it may be NULL, thereby causing strlen() to appear as if it is behaving correctly."}]}, {"Entries": [{"IntroText": "While the following example is not exploitable, it provides a good example of how nulls can be omitted or misplaced, even when \"safe\" functions are used:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t#include <stdio.h>\n\t#include <string.h>\n\tint main() {\n\t\t\tchar longString[] = \"String signifying nothing\";\n\t\t\tchar shortString[16];\n\t\t\tstrncpy(shortString, longString, 16);\n\t\t\tprintf(\"The last character in shortString is: %c (%1$x)\\n\", shortString[15]);\n\t\t\treturn (0);\n\t}\n```"}, {"BodyText": "The above code gives the following output: \"The last character in shortString is: n (6e)\". So, the shortString array does not end in a NULL character, even though the \"safe\" string function strncpy() was used. The reason is that strncpy() does not impliciitly add a NULL character at the end of the string when the source is equal in length or longer than the provided size."}]}], "ObservedExamples": [{"Reference": "CVE-2000-0312", "Description": "Attacker does not null-terminate argv[] when invoking another program.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0312"}, {"Reference": "CVE-2003-0777", "Description": "Interrupted step causes resultant lack of null termination.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0777"}, {"Reference": "CVE-2004-1072", "Description": "Fault causes resultant lack of null termination, leading to buffer expansion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1072"}, {"Reference": "CVE-2001-1389", "Description": "Multiple vulnerabilities related to improper null termination.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1389"}, {"Reference": "CVE-2003-0143", "Description": "Product does not null terminate a message buffer after snprintf-like call, leading to overflow.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0143"}, {"Reference": "CVE-2009-2523", "Description": "Chain: product does not handle when an input string is not NULL terminated (CWE-170), leading to buffer over-read (CWE-125) or heap-based buffer overflow (CWE-122).", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2523"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "Factors: this is usually resultant from other weaknesses such as off-by-one errors, but it can be primary to boundary condition violations such as buffer overflows. In buffer overflows, it can act as an expander for assumed-immutable data."}, {"Type": "Relationship", "Note": "Overlaps missing input terminator."}, {"Type": "Applicable Platform", "Note": "\n\nConceptually, this does not just apply to the C language; any language or representation that involves a terminator could have this type of problem.\n"}, {"Type": "Maintenance", "Note": "As currently described, this entry is more like a category than a weakness."}], "Top25Examples": [{"Reference": "CVE-2021-31884", "Description": "A vulnerability has been identified in APOGEE MBC (PPC) (BACnet) (All versions), APOGEE MBC (PPC) (P2 Ethernet) (All versions), APOGEE MEC (PPC) (BACnet) (All versions), APOGEE MEC (PPC) (P2 Ethernet) (All versions), APOGEE PXC Compact (BACnet) (All versions < V3.5.4), APOGEE PXC Compact (P2 Ethernet) (All versions < V2.8.19), APOGEE PXC Modular (BACnet) (All versions < V3.5.4), APOGEE PXC Modular (P2 Ethernet) (All versions < V2.8.19), Capital VSTAR (All versions with enabled Ethernet options), Desigo PXC00-E.D (All versions >= V2.3 and < V6.30.016), Desigo PXC00-U (All versions >= V2.3 and < V6.30.016), Desigo PXC001-E.D (All versions >= V2.3 and < V6.30.016), Desigo PXC100-E.D (All versions >= V2.3 and < V6.30.016), Desigo PXC12-E.D (All versions >= V2.3 and < V6.30.016), Desigo PXC128-U (All versions >= V2.3 and < V6.30.016), Desigo PXC200-E.D (All versions >= V2.3 and < V6.30.016), Desigo PXC22-E.D (All versions >= V2.3 and < V6.30.016), Desigo PXC22.1-E.D (All versions >= V2.3 and < V6.30.016), Desigo PXC36.1-E.D (All versions >= V2.3 and < V6.30.016), Desigo PXC50-E.D (All versions >= V2.3 and < V6.30.016), Desigo PXC64-U (All versions >= V2.3 and < V6.30.016), Desigo PXM20-E (All versions >= V2.3 and < V6.30.016), Nucleus NET (All versions), Nucleus ReadyStart V3 (All versions < V2017.02.4), Nucleus Source Code (All versions), TALON TC Compact (BACnet) (All versions < V3.5.4), TALON TC Modular (BACnet) (All versions < V3.5.4). The DHCP client application assumes that the data supplied with the \u201cHostname\u201d DHCP option is NULL terminated. In cases when global hostname variable is not defined, this may lead to Out-of-bound reads, writes, and Denial-of-service conditions. (FSMD-2021-0014)"}, {"Reference": "CVE-2021-36762", "Description": "An issue was discovered in HCC Embedded InterNiche NicheStack through 4.3. The tfshnd():tftpsrv.c TFTP packet processing function doesn't ensure that a filename is adequately '\\\\0' terminated; therefore, a subsequent call to strlen for the filename might read out of bounds of the protocol packet buffer (if no '\\\\0' byte exists within a reasonable range)."}, {"Reference": "CVE-2021-42341", "Description": "checkpath in OpenRC before 0.44.7 uses the direct output of strlen() to allocate strings, which does not account for the '\\\\0' byte at the end of the string. This results in memory corruption. CVE-2021-42341 was introduced in git commit 63db2d99e730547339d1bdd28e8437999c380cae, which was introduced as part of OpenRC 0.44.0 development."}, {"Reference": "CVE-2022-41862", "Description": "In PostgreSQL, a modified, unauthenticated server can send an unterminated string during the establishment of Kerberos transport encryption. In certain conditions a server can cause a libpq client to over-read and report an error message containing uninitialized bytes."}, {"Reference": "CVE-2021-21967", "Description": "An out-of-bounds write vulnerability exists in the OTA update task functionality of Sealevel Systems, Inc. SeaConnect 370W v1.3.34. A specially-crafted MQTT payload can lead to denial of service. An attacker can perform a man-in-the-middle attack to trigger this vulnerability."}, {"Reference": "CVE-2022-26635", "Description": "PHP-Memcached v2.2.0 and below contains an improper NULL termination which allows attackers to execute CLRF injection. Note: Third parties have disputed this as not affecting PHP-Memcached directly."}]}
{"ID": "172", "Name": "Encoding Error", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product does not properly encode or decode the data, resulting in unexpected values.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "707", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "22", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "41", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "PotentialMitigations": [{"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-28", "Phase": ["Implementation"], "Strategy": "Output Encoding", "Description": "While it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88)."}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "ObservedExamples": [{"Reference": "CVE-2004-1315", "Description": "Forum software improperly URL decodes the highlight parameter when extracting text to highlight, which allows remote attackers to execute arbitrary PHP code by double-encoding the highlight value so that special characters are inserted into the result.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1315"}, {"Reference": "CVE-2004-1939", "Description": "XSS protection mechanism attempts to remove \"/\" that could be used to close tags, but it can be bypassed using double encoded slashes (%252F)", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1939"}, {"Reference": "CVE-2001-0709", "Description": "Server allows a remote attacker to obtain source code of ASP files via a URL encoded with Unicode.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0709"}, {"Reference": "CVE-2005-2256", "Description": "Hex-encoded path traversal variants - \"%2e%2e\", \"%2e%2e%2f\", \"%5c%2e%2e\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2256"}], "RelatedAttackPatterns": ["120", "267", "3", "52", "53", "64", "71", "72", "78", "80"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Relationship", "Note": "Partially overlaps path traversal and equivalence weaknesses."}, {"Type": "Maintenance", "Note": "This is more like a category than a weakness."}, {"Type": "Maintenance", "Note": "Many other types of encodings should be listed in this category."}], "Top25Examples": [{"Reference": "CVE-2022-26307", "Description": "LibreOffice supports the storage of passwords for web connections in the user\u2019s configuration database. The stored passwords are encrypted with a single master key provided by the user. A flaw in LibreOffice existed where master key was poorly encoded resulting in weakening its entropy from 128 to 43 bits making the stored passwords vulerable to a brute force attack if an attacker has access to the users stored config. This issue affects: The Document Foundation LibreOffice 7.2 versions prior to 7.2.7; 7.3 versions prior to 7.3.3."}]}
{"ID": "173", "Name": "Improper Handling of Alternate Encoding", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "172", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "289", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"]}], "PotentialMitigations": [{"MitigationID": "MIT-44", "Phase": ["Architecture and Design"], "Strategy": "Input Validation", "Description": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names."}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-30", "Phase": ["Implementation"], "Strategy": "Output Encoding", "Description": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component."}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "RelatedAttackPatterns": ["120", "267", "3", "4", "52", "53", "64", "71", "72", "78", "79", "80"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "174", "Name": "Double Decoding of the Same Data", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product decodes the same input twice, which can limit the effectiveness of any protection mechanism that occurs in between the decoding operations.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "172", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "675", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control", "Confidentiality", "Availability", "Integrity", "Other"], "Impact": ["Bypass Protection Mechanism", "Execute Unauthorized Code or Commands", "Varies by Context"]}], "PotentialMitigations": [{"MitigationID": "MIT-44", "Phase": ["Architecture and Design"], "Strategy": "Input Validation", "Description": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names."}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-30", "Phase": ["Implementation"], "Strategy": "Output Encoding", "Description": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component."}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "ObservedExamples": [{"Reference": "CVE-2004-1315", "Description": "Forum software improperly URL decodes the highlight parameter when extracting text to highlight, which allows remote attackers to execute arbitrary PHP code by double-encoding the highlight value so that special characters are inserted into the result.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1315"}, {"Reference": "CVE-2004-1939", "Description": "XSS protection mechanism attempts to remove \"/\" that could be used to close tags, but it can be bypassed using double encoded slashes (%252F)", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1939"}, {"Reference": "CVE-2001-0333", "Description": "Directory traversal using double encoding.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0333"}, {"Reference": "CVE-2004-1938", "Description": "\"%2527\" (double-encoded single quote) used in SQL injection.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1938"}, {"Reference": "CVE-2005-1945", "Description": "Double hex-encoded data.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1945"}, {"Reference": "CVE-2005-0054", "Description": "Browser executes HTML at higher privileges via URL with hostnames that are double hex encoded, which are decoded twice to generate a malicious hostname.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0054"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "Probably under-studied."}], "Top25Examples": [{"Reference": "CVE-2021-42013", "Description": "It was found that the fix for CVE-2021-41773 in Apache HTTP Server 2.4.50 was insufficient. An attacker could use a path traversal attack to map URLs to files outside the directories configured by Alias-like directives. If files outside of these directories are not protected by the usual default configuration \"require all denied\", these requests can succeed. If CGI scripts are also enabled for these aliased pathes, this could allow for remote code execution. This issue only affects Apache 2.4.49 and Apache 2.4.50 and not earlier versions."}]}
{"ID": "175", "Name": "Improper Handling of Mixed Encoding", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not properly handle when the same input uses several different (mixed) encodings.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "172", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "PotentialMitigations": [{"MitigationID": "MIT-44", "Phase": ["Architecture and Design"], "Strategy": "Input Validation", "Description": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names."}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-30", "Phase": ["Implementation"], "Strategy": "Output Encoding", "Description": "Use and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component."}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "176", "Name": "Improper Handling of Unicode Encoding", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not properly handle when an input contains Unicode encoding.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "172", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "PotentialMitigations": [{"MitigationID": "MIT-44", "Phase": ["Architecture and Design"], "Strategy": "Input Validation", "Description": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names."}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "DemonstrativeExamples": [{"ID": "DX-189", "Entries": [{"IntroText": "Windows provides the MultiByteToWideChar(), WideCharToMultiByte(), UnicodeToBytes(), and BytesToUnicode() functions to convert between arbitrary multibyte (usually ANSI) character strings and Unicode (wide character) strings. The size arguments to these functions are specified in different units, (one in bytes, the other in characters) making their use prone to error."}, {"BodyText": "In a multibyte character string, each character occupies a varying number of bytes, and therefore the size of such strings is most easily specified as a total number of bytes. In Unicode, however, characters are always a fixed size, and string lengths are typically given by the number of characters they contain. Mistakenly specifying the wrong units in a size argument can lead to a buffer overflow."}, {"BodyText": "The following function takes a username specified as a multibyte string and a pointer to a structure for user information and populates the structure with information about the specified user. Since Windows authentication uses Unicode for usernames, the username argument is first converted from a multibyte string to a Unicode string."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid getUserInfo(char *username, struct _USER_INFO_2 info){\n\t\tWCHAR unicodeUser[UNLEN+1];\n\t\tMultiByteToWideChar(CP_ACP, 0, username, -1, unicodeUser, sizeof(unicodeUser));\n\t\tNetUserGetInfo(NULL, unicodeUser, 2, (LPBYTE *)&info);\n\t}\n```"}, {"BodyText": "This function incorrectly passes the size of unicodeUser in bytes instead of characters. The call to MultiByteToWideChar() can therefore write up to (UNLEN+1)*sizeof(WCHAR) wide characters, or (UNLEN+1)*sizeof(WCHAR)*sizeof(WCHAR) bytes, to the unicodeUser array, which has only (UNLEN+1)*sizeof(WCHAR) bytes allocated."}, {"BodyText": "If the username string contains more than UNLEN characters, the call to MultiByteToWideChar() will overflow the buffer unicodeUser."}]}], "ObservedExamples": [{"Reference": "CVE-2000-0884", "Description": "Server allows remote attackers to read documents outside of the web root, and possibly execute arbitrary commands, via malformed URLs that contain Unicode encoded characters.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0884"}, {"Reference": "CVE-2001-0709", "Description": "Server allows a remote attacker to obtain source code of ASP files via a URL encoded with Unicode.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0709"}, {"Reference": "CVE-2001-0669", "Description": "Overlaps interaction error.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0669"}], "RelatedAttackPatterns": ["71"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-0530", "Description": "A flaw was found in Unzip. The vulnerability occurs during the conversion of a wide string to a local string that leads to a heap of out-of-bound write. This flaw allows an attacker to input a specially crafted zip file, leading to a crash or code execution."}, {"Reference": "CVE-2022-25987", "Description": "Improper handling of Unicode encoding in source code to be compiled by the Intel(R) C++ Compiler Classic before version 2021.6 for Intel(R) oneAPI Toolkits before version 2022.2 may allow an unauthenticated user to potentially enable escalation of privilege via network access."}]}
{"ID": "177", "Name": "Improper Handling of URL Encoding (Hex Encoding)", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not properly handle when all or part of an input has been URL encoded.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "172", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "PotentialMitigations": [{"MitigationID": "MIT-44", "Phase": ["Architecture and Design"], "Strategy": "Input Validation", "Description": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names."}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "ObservedExamples": [{"Reference": "CVE-2000-0900", "Description": "Hex-encoded path traversal variants - \"%2e%2e\", \"%2e%2e%2f\", \"%5c%2e%2e\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0900"}, {"Reference": "CVE-2005-2256", "Description": "Hex-encoded path traversal variants - \"%2e%2e\", \"%2e%2e%2f\", \"%5c%2e%2e\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2256"}, {"Reference": "CVE-2004-2121", "Description": "Hex-encoded path traversal variants - \"%2e%2e\", \"%2e%2e%2f\", \"%5c%2e%2e\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2121"}, {"Reference": "CVE-2004-0280", "Description": "\"%20\" (encoded space)", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0280"}, {"Reference": "CVE-2003-0424", "Description": "\"%20\" (encoded space)", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0424"}, {"Reference": "CVE-2001-0693", "Description": "\"%20\" (encoded space)", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0693"}, {"Reference": "CVE-2001-0778", "Description": "\"%20\" (encoded space)", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0778"}, {"Reference": "CVE-2002-1831", "Description": "Crash via hex-encoded space \"%20\".", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1831"}, {"Reference": "CVE-2000-0671", "Description": "\"%00\" (encoded null)", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0671"}, {"Reference": "CVE-2004-0189", "Description": "\"%00\" (encoded null)", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0189"}, {"Reference": "CVE-2002-1291", "Description": "\"%00\" (encoded null)", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1291"}, {"Reference": "CVE-2002-1031", "Description": "\"%00\" (encoded null)", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1031"}, {"Reference": "CVE-2001-1140", "Description": "\"%00\" (encoded null)", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1140"}, {"Reference": "CVE-2004-0760", "Description": "\"%00\" (encoded null)", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0760"}, {"Reference": "CVE-2002-1025", "Description": "\"%00\" (encoded null)", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1025"}, {"Reference": "CVE-2002-1213", "Description": "\"%2f\" (encoded slash)", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1213"}, {"Reference": "CVE-2004-0072", "Description": "\"%5c\" (encoded backslash) and \"%2e\" (encoded dot) sequences", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0072"}, {"Reference": "CVE-2004-0847", "Description": "\"%5c\" (encoded backslash)", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0847"}, {"Reference": "CVE-2002-1575", "Description": "\"%0a\" (overlaps CRLF)", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1575"}], "RelatedAttackPatterns": ["120", "468", "64", "72"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-33604", "Description": "URL encoding error in development mode handler in com.vaadin:flow-server versions 2.0.0 through 2.6.1 (Vaadin 14.0.0 through 14.6.1), 3.0.0 through 6.0.9 (Vaadin 15.0.0 through 19.0.8) allows local user to execute arbitrary JavaScript code by opening crafted URL in browser."}, {"Reference": "CVE-2022-25765", "Description": "The package pdfkit from 0.0.0 are vulnerable to Command Injection where the URL is not properly sanitized."}]}
{"ID": "178", "Name": "Improper Handling of Case Sensitivity", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not properly account for differences in case sensitivity when accessing or determining the properties of a resource, leading to inconsistent results.", "ExtendedDescription": "\n\nImproperly handled case sensitive data can lead to several possible consequences, including:\n\n\n  - case-insensitive passwords reducing the size of the key space, making brute force attacks easier\n\n  - bypassing filters or access controls using alternate names\n\n  - multiple interpretation errors using alternate names.\n\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "706", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "706", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "433", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "289", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"]}], "PotentialMitigations": [{"MitigationID": "MIT-44", "Phase": ["Architecture and Design"], "Strategy": "Input Validation", "Description": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names."}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "DemonstrativeExamples": [{"ID": "DX-141", "Entries": [{"IntroText": "In the following example, an XSS neutralization method intends to replace script tags in user-supplied input with a safe equivalent:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic String preventXSS(String input, String mask) {\n\t\treturn input.replaceAll(\"script\", mask);\n\t}\n```"}, {"BodyText": "The code only works when the \"script\" tag is in all lower-case, forming an incomplete denylist (CWE-184). Equivalent tags such as \"SCRIPT\" or \"ScRiPt\" will not be neutralized by this method, allowing an XSS attack."}]}], "ObservedExamples": [{"Reference": "CVE-2000-0499", "Description": "Application server allows attackers to bypass execution of a jsp page and read the source code using an upper case JSP extension in the request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0499"}, {"Reference": "CVE-2000-0497", "Description": "The server is case sensitive, so filetype handlers treat .jsp and .JSP as different extensions. JSP source code may be read because .JSP defaults to the filetype \"text\".", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0497"}, {"Reference": "CVE-2000-0498", "Description": "The server is case sensitive, so filetype handlers treat .jsp and .JSP as different extensions. JSP source code may be read because .JSP defaults to the filetype \"text\".", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0498"}, {"Reference": "CVE-2001-0766", "Description": "A URL that contains some characters whose case is not matched by the server's filters may bypass access restrictions because the case-insensitive file system will then handle the request after it bypasses the case sensitive filter.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0766"}, {"Reference": "CVE-2001-0795", "Description": "Server allows remote attackers to obtain source code of CGI scripts via URLs that contain MS-DOS conventions such as (1) upper case letters or (2) 8.3 file names.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0795"}, {"Reference": "CVE-2001-1238", "Description": "Task Manager does not allow local users to end processes with uppercase letters named (1) winlogon.exe, (2) csrss.exe, (3) smss.exe and (4) services.exe via the Process tab which could allow local users to install Trojan horses that cannot be stopped.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1238"}, {"Reference": "CVE-2003-0411", "Description": "chain: Code was ported from a case-sensitive Unix platform to a case-insensitive Windows platform where filetype handlers treat .jsp and .JSP as different extensions. JSP source code may be read because .JSP defaults to the filetype \"text\".", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0411"}, {"Reference": "CVE-2002-0485", "Description": "Leads to interpretation error", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0485"}, {"Reference": "CVE-1999-0239", "Description": "Directories may be listed because lower case web requests are not properly handled by the server.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0239"}, {"Reference": "CVE-2005-0269", "Description": "File extension check in forum software only verifies extensions that contain all lowercase letters, which allows remote attackers to upload arbitrary files via file extensions that include uppercase letters.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0269"}, {"Reference": "CVE-2004-1083", "Description": "Web server restricts access to files in a case sensitive manner, but the filesystem accesses files in a case insensitive manner, which allows remote attackers to read privileged files using alternate capitalization.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1083"}, {"Reference": "CVE-2002-2119", "Description": "Case insensitive passwords lead to search space reduction.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2119"}, {"Reference": "CVE-2004-2214", "Description": "HTTP server allows bypass of access restrictions using URIs with mixed case.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2214"}, {"Reference": "CVE-2004-2154", "Description": "Mixed upper/lowercase allows bypass of ACLs.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2154"}, {"Reference": "CVE-2005-4509", "Description": "Bypass malicious script detection by using tokens that aren't case sensitive.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-4509"}, {"Reference": "CVE-2002-1820", "Description": "Mixed case problem allows \"admin\" to have \"Admin\" rights (alternate name property).", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1820"}, {"Reference": "CVE-2007-3365", "Description": "Chain: uppercase file extensions causes web server to return script source code instead of executing the script.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-3365"}, {"Reference": "CVE-2021-39155", "Description": "Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-39155"}], "FunctionalAreas": ["File Processing"], "AffectedResources": ["File or Directory"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "These are probably under-studied in Windows and Mac environments, where file names are case-insensitive and thus are subject to equivalence manipulations involving case."}]}
{"ID": "179", "Name": "Incorrect Behavior Order: Early Validation", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product validates input before applying protection mechanisms that modify the input, which could allow an attacker to bypass the validation via dangerous inputs that only arise after the modification.", "ExtendedDescription": "Product needs to validate data at the proper time, after data has been canonicalized and cleansed. Early validation is susceptible to various manipulations that result in dangerous inputs that are produced by canonicalization and cleansing.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "20", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "696", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "Since early validation errors usually arise from improperly implemented defensive mechanisms, it is likely that these will be introduced more frequently as secure programming becomes implemented more widely."}], "CommonConsequences": [{"Scope": ["Access Control", "Integrity"], "Impact": ["Bypass Protection Mechanism", "Execute Unauthorized Code or Commands"], "Note": "An attacker could include dangerous input that bypasses validation protection mechanisms which can be used to launch various attacks including injection attacks, execute arbitrary code or cause other unintended behavior."}], "PotentialMitigations": [{"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "DemonstrativeExamples": [{"ID": "DX-35", "Entries": [{"IntroText": "The following code attempts to validate a given input path by checking it against an allowlist and then return the canonical path. In this specific case, the path is considered valid if it starts with the string \"/safe_dir/\"."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tString path = getInputPath();\n\tif (path.startsWith(\"/safe_dir/\"))\n\t{\n\t\tFile f = new File(path);\n\t\treturn f.getCanonicalPath();\n\t}\n```"}, {"BodyText": "The problem with the above code is that the validation step occurs before canonicalization occurs. An attacker could provide an input path of \"/safe_dir/../\" that would pass the validation step. However, the canonicalization process sees the double dot as a traversal to the parent directory and hence when canonicized the path would become just \"/\"."}, {"BodyText": "To avoid this problem, validation should occur after canonicalization takes place. In this case canonicalization occurs during the initialization of the File object. The code below fixes the issue."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tString path = getInputPath();\n\tFile f = new File(path);\n\tif (f.getCanonicalPath().startsWith(\"/safe_dir/\"))\n\t{\n\t\treturn f.getCanonicalPath();\n\t}\n```"}]}, {"ID": "DX-36", "Entries": [{"IntroText": "This script creates a subdirectory within a user directory and sets the user as the owner."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\tfunction createDir($userName,$dirName){\n\t\t$userDir = '/users/'. $userName;\n\t\tif(strpos($dirName,'..') !== false){\n\t\t\techo 'Directory name contains invalid sequence';\n\t\t\treturn;\n\t\t}\n```\n//filter out '~' because other scripts identify user directories by this prefix* \n\t\t$dirName = str_replace('~','',$dirName);\n\t\t$newDir = $userDir . $dirName;\n\t\tmkdir($newDir, 0700);\n\t\tchown($newDir,$userName);}"}, {"BodyText": "While the script attempts to screen for '..' sequences, an attacker can submit a directory path including \".~.\", which will then become \"..\" after the filtering step. This allows a Path Traversal (CWE-21) attack to occur."}]}], "ObservedExamples": [{"Reference": "CVE-2002-0433", "Description": "Product allows remote attackers to view restricted files via an HTTP request containing a \"*\" (wildcard or asterisk) character.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0433"}, {"Reference": "CVE-2003-0332", "Description": "Product modifies the first two letters of a filename extension after performing a security check, which allows remote attackers to bypass authentication via a filename with a .ats extension instead of a .hts extension.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0332"}, {"Reference": "CVE-2002-0802", "Description": "Database consumes an extra character when processing a character that cannot be converted, which could remove an escape character from the query and make the application subject to SQL injection attacks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0802"}, {"Reference": "CVE-2000-0191", "Description": "Overlaps \"fakechild/../realchild\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0191"}, {"Reference": "CVE-2004-2363", "Description": "Product checks URI for \"<\" and other literal characters, but does it before hex decoding the URI, so \"%3E\" and other sequences are allowed.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2363"}, {"Reference": "CVE-2002-0934", "Description": "Directory traversal vulnerability allows remote attackers to read or modify arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a \"..\" sequence.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0934"}, {"Reference": "CVE-2003-0282", "Description": "Directory traversal vulnerability allows attackers to overwrite arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a \"..\" sequence.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0282"}], "RelatedAttackPatterns": ["3", "43", "71"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "These errors are mostly reported in path traversal vulnerabilities, but the concept applies whenever validation occurs."}]}
{"ID": "180", "Name": "Incorrect Behavior Order: Validate Before Canonicalize", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product validates input before it is canonicalized, which prevents the product from detecting data that becomes invalid after the canonicalization step.", "ExtendedDescription": "This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "179", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"]}], "PotentialMitigations": [{"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "DemonstrativeExamples": [{"ID": "DX-35", "Entries": [{"IntroText": "The following code attempts to validate a given input path by checking it against an allowlist and then return the canonical path. In this specific case, the path is considered valid if it starts with the string \"/safe_dir/\"."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tString path = getInputPath();\n\tif (path.startsWith(\"/safe_dir/\"))\n\t{\n\t\tFile f = new File(path);\n\t\treturn f.getCanonicalPath();\n\t}\n```"}, {"BodyText": "The problem with the above code is that the validation step occurs before canonicalization occurs. An attacker could provide an input path of \"/safe_dir/../\" that would pass the validation step. However, the canonicalization process sees the double dot as a traversal to the parent directory and hence when canonicized the path would become just \"/\"."}, {"BodyText": "To avoid this problem, validation should occur after canonicalization takes place. In this case canonicalization occurs during the initialization of the File object. The code below fixes the issue."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tString path = getInputPath();\n\tFile f = new File(path);\n\tif (f.getCanonicalPath().startsWith(\"/safe_dir/\"))\n\t{\n\t\treturn f.getCanonicalPath();\n\t}\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2002-0433", "Description": "Product allows remote attackers to view restricted files via an HTTP request containing a \"*\" (wildcard or asterisk) character.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0433"}, {"Reference": "CVE-2003-0332", "Description": "Product modifies the first two letters of a filename extension after performing a security check, which allows remote attackers to bypass authentication via a filename with a .ats extension instead of a .hts extension.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0332"}, {"Reference": "CVE-2002-0802", "Description": "Database consumes an extra character when processing a character that cannot be converted, which could remove an escape character from the query and make the application subject to SQL injection attacks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0802"}, {"Reference": "CVE-2000-0191", "Description": "Overlaps \"fakechild/../realchild\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0191"}, {"Reference": "CVE-2004-2363", "Description": "Product checks URI for \"<\" and other literal characters, but does it before hex decoding the URI, so \"%3E\" and other sequences are allowed.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2363"}], "RelatedAttackPatterns": ["267", "3", "71", "78", "79", "80"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This overlaps other categories."}], "Top25Examples": [{"Reference": "CVE-2022-23553", "Description": "Alpine is a scaffolding library in Java. Alpine prior to version 1.10.4 allows URL access filter bypass. This issue has been fixed in version 1.10.4. There are no known workarounds."}]}
{"ID": "181", "Name": "Incorrect Behavior Order: Validate Before Filter", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product validates data before it has been filtered, which prevents the product from detecting data that becomes invalid after the filtering step.", "ExtendedDescription": "This can be used by an attacker to bypass the validation and launch attacks that expose weaknesses that would otherwise be prevented, such as injection.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "179", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Validate-before-cleanse"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"]}], "PotentialMitigations": [{"Phase": ["Implementation", "Architecture and Design"], "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being filtered."}], "DemonstrativeExamples": [{"ID": "DX-36", "Entries": [{"IntroText": "This script creates a subdirectory within a user directory and sets the user as the owner."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\tfunction createDir($userName,$dirName){\n\t\t$userDir = '/users/'. $userName;\n\t\tif(strpos($dirName,'..') !== false){\n\t\t\techo 'Directory name contains invalid sequence';\n\t\t\treturn;\n\t\t}\n```\n//filter out '~' because other scripts identify user directories by this prefix* \n\t\t$dirName = str_replace('~','',$dirName);\n\t\t$newDir = $userDir . $dirName;\n\t\tmkdir($newDir, 0700);\n\t\tchown($newDir,$userName);}"}, {"BodyText": "While the script attempts to screen for '..' sequences, an attacker can submit a directory path including \".~.\", which will then become \"..\" after the filtering step. This allows a Path Traversal (CWE-21) attack to occur."}]}], "ObservedExamples": [{"Reference": "CVE-2002-0934", "Description": "Directory traversal vulnerability allows remote attackers to read or modify arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a \"..\" sequence.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0934"}, {"Reference": "CVE-2003-0282", "Description": "Directory traversal vulnerability allows attackers to overwrite arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a \"..\" sequence.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0282"}], "FunctionalAreas": ["Protection Mechanism"], "RelatedAttackPatterns": ["120", "267", "3", "43", "78", "79", "80"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "This category is probably under-studied."}]}
{"ID": "182", "Name": "Collapse of Data into Unsafe Value", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product filters data in a way that causes it to be reduced or \"collapsed\" into an unsafe value that violates an expected security property.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "693", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "33", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "34", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "35", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-44", "Phase": ["Architecture and Design"], "Strategy": "Input Validation", "Description": "Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names."}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}, {"Description": "Canonicalize the name to match that of the file system's representation of the name. This can sometimes be achieved with an available API (e.g. in Win32 the GetFullPathName function)."}], "ObservedExamples": [{"Reference": "CVE-2004-0815", "Description": "\"/.////\" in pathname collapses to absolute path.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0815"}, {"Reference": "CVE-2005-3123", "Description": "\"/.//..//////././\" is collapsed into \"/.././\" after \"..\" and \"//\" sequences are removed.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3123"}, {"Reference": "CVE-2002-0325", "Description": "\".../...//\" collapsed to \"...\" due to removal of \"./\" in web server.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0325"}, {"Reference": "CVE-2002-0784", "Description": "chain: HTTP server protects against \"..\" but allows \".\" variants such as \"////./../.../\". If the server removes \"/..\" sequences, the result would collapse into an unsafe value \"////../\" (CWE-182).", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0784"}, {"Reference": "CVE-2005-2169", "Description": "MFV. Regular expression intended to protect against directory traversal reduces \".../...//\" to \"../\".", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2169"}, {"Reference": "CVE-2001-1157", "Description": "XSS protection mechanism strips a script sequence that is nested in another script sequence.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1157"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "Overlaps regular expressions, although an implementation might not necessarily use regexp's."}]}
{"ID": "183", "Name": "Permissive List of Allowed Inputs", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are explicitly allowed by policy because the inputs are assumed to be safe, but the list is too permissive - that is, it allows an input that is unsafe, leading to resultant weaknesses.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "697", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "434", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Allowlist / Allow List", "Description": "This is used by CWE and CAPEC instead of other commonly-used terms. Its counterpart is denylist."}, {"Term": "Safelist / Safe List", "Description": "This is often used by security tools such as firewalls, email or web gateways, proxies, etc."}, {"Term": "Whitelist / White List", "Description": "This term is frequently used, but usage has been declining as organizations have started to adopt other terms."}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "ObservedExamples": [{"Reference": "CVE-2019-12799", "Description": "chain: bypass of untrusted deserialization issue (CWE-502) by using an assumed-trusted class (CWE-183)", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-12799"}, {"Reference": "CVE-2019-10458", "Description": "sandbox bypass using a method that is on an allowlist", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-10458"}, {"Reference": "CVE-2017-1000095", "Description": "sandbox bypass using unsafe methods that are on an allowlist", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-1000095"}, {"Reference": "CVE-2019-10458", "Description": "CI/CD pipeline feature has unsafe elements in allowlist, allowing bypass of script restrictions", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-10458"}, {"Reference": "CVE-2017-1000095", "Description": "Default allowlist includes unsafe methods, allowing bypass of sandbox", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-1000095"}], "RelatedAttackPatterns": ["120", "3", "43", "71"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-43415", "Description": "HashiCorp Nomad and Nomad Enterprise up to 1.0.13, 1.1.7, and 1.2.0, with the QEMU task driver enabled, allowed authenticated users with job submission capabilities to bypass the configured allowed image paths. Fixed in 1.0.14, 1.1.8, and 1.2.1."}, {"Reference": "CVE-2022-25237", "Description": "Bonita Web 2021.2 is affected by a authentication/authorization bypass vulnerability due to an overly broad exclude pattern used in the RestAPIAuthorizationFilter. By appending ;i18ntranslation or /../i18ntranslation/ to the end of a URL, users with no privileges can access privileged API endpoints. This can lead to remote code execution by abusing the privileged API actions."}]}
{"ID": "184", "Name": "Incomplete List of Disallowed Inputs", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete, leading to resultant weaknesses.", "ExtendedDescription": "Developers often try to protect their products against malicious input by performing tests against inputs that are known to be bad, such as special characters that can invoke new commands. However, such lists often only account for the most well-known bad inputs. Attackers may be able to find other malicious inputs that were not expected by the developer, allowing them to bypass the intended protection mechanism.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "693", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "1023", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "79", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "78", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "434", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "98", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Denylist / Deny List", "Description": "This is used by CWE and CAPEC instead of other commonly-used terms. Its counterpart is allowlist."}, {"Term": "Blocklist / Block List", "Description": "This is often used by security tools such as firewalls, email or web gateways, proxies, etc."}, {"Term": "Blacklist / Black List", "Description": "This term is frequently used, but usage has been declining as organizations have started to adopt other terms."}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "Developers might begin to develop a list of bad inputs as a fast way to fix a particular weakness, instead of fixing the root cause. See [REF-141]."}, {"Phase": "Architecture and Design", "Note": "The design might rely solely on detection of malicious inputs as a protection mechanism."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"]}], "DetectionMethods": [{"Method": "Black Box", "Description": "Exploitation of a vulnerability with commonly-used manipulations might fail, but minor variations might succeed."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Do not rely exclusively on detecting disallowed inputs. There are too many variants to encode a character, especially when different environments are used, so there is a high likelihood of missing some variants. Only use detection of disallowed inputs as a mechanism for detecting suspicious activity. Ensure that you are using other protection mechanisms that only identify \"good\" input - such as lists of allowed inputs - and ensure that you are properly encoding your outputs."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code attempts to stop XSS attacks by removing all occurences of \"script\" in an input string."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic String removeScriptTags(String input, String mask) {\n\t\treturn input.replaceAll(\"script\", mask);\n\t}\n```"}, {"BodyText": "Because the code only checks for the lower-case \"script\" string, it can be easily defeated with upper-case script tags."}]}], "ObservedExamples": [{"Reference": "CVE-2024-4315", "Description": "Chain: API for text generation using Large Language Models (LLMs) does not include the \"\\\" Windows folder separator in its denylist (CWE-184) when attempting to prevent Local File Inclusion via path traversal (CWE-22), allowing deletion of arbitrary files on Windows systems.", "Link": "https://www.cve.org/CVERecord?id=CVE-2024-4315"}, {"Reference": "CVE-2008-2309", "Description": "product uses a denylist to identify potentially dangerous content, allowing attacker to bypass a warning", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2309"}, {"Reference": "CVE-2005-2782", "Description": "PHP remote file inclusion in web application that filters \"http\" and \"https\" URLs, but not \"ftp\".", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2782"}, {"Reference": "CVE-2004-0542", "Description": "Programming language does not filter certain shell metacharacters in Windows environment.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0542"}, {"Reference": "CVE-2004-0595", "Description": "XSS filter doesn't filter null characters before looking for dangerous tags, which are ignored by web browsers. MIE and validate-before-cleanse.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0595"}, {"Reference": "CVE-2005-3287", "Description": "Web-based mail product doesn't restrict dangerous extensions such as ASPX on a web server, even though others are prohibited.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3287"}, {"Reference": "CVE-2004-2351", "Description": "Resultant XSS when only script and style are checked.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2351"}, {"Reference": "CVE-2005-2959", "Description": "Privileged program does not clear sensitive environment variables that are used by bash. Overlaps multiple interpretation error.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2959"}, {"Reference": "CVE-2005-1824", "Description": "SQL injection protection scheme does not quote the \"\\\" special character.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1824"}, {"Reference": "CVE-2005-2184", "Description": "Detection of risky filename extensions prevents users from automatically executing .EXE files, but .LNK is accepted, allowing resultant Windows symbolic link.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2184"}, {"Reference": "CVE-2007-1343", "Description": "Product uses list of protected variables, but accidentally omits one dangerous variable, allowing external modification", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1343"}, {"Reference": "CVE-2007-5727", "Description": "Chain: product only removes SCRIPT tags (CWE-184), enabling XSS (CWE-79)", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-5727"}, {"Reference": "CVE-2006-4308", "Description": "Chain: product only checks for use of \"javascript:\" tag (CWE-184), allowing XSS (CWE-79) using other tags", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4308"}, {"Reference": "CVE-2007-3572", "Description": "Chain: OS command injection (CWE-78) enabled by using an unexpected character that is not explicitly disallowed (CWE-184)", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-3572"}, {"Reference": "CVE-2002-0661", "Description": "\"\\\" not in list of disallowed values for web server, allowing path traversal attacks when the server is run on Windows and other OSes.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0661"}], "RelatedAttackPatterns": ["120", "15", "182", "3", "43", "6", "71", "73", "85"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "\n\nMultiple interpretation errors can indirectly introduce inputs that should be disallowed. For example, a list of dangerous shell metacharacters might not include a metacharacter that only has meaning in one particular shell, not all of them; or a check for XSS manipulations might ignore an unusual construct that is supported by one web browser, but not others.\n"}], "Top25Examples": [{"Reference": "CVE-2021-42321", "Description": "Microsoft Exchange Server Remote Code Execution Vulnerability"}, {"Reference": "CVE-2021-31370", "Description": "An Incomplete List of Disallowed Inputs vulnerability in Packet Forwarding Engine (PFE) of Juniper Networks Junos OS on QFX5000 Series and EX4600 Series allows an adjacent unauthenticated attacker which sends a high rate of specific multicast traffic to cause control traffic received from the network to be dropped. This will impact control protocols (including but not limited to routing-protocols) and lead to a Denial of Service (DoS). Continued receipt of this specific multicast traffic will create a sustained Denial of Service (DoS) condition. This issue affects Juniper Networks Junos OS on QFX5000 and EX4600 Series: All versions prior to 17.3R3-S12; 17.4 versions prior to 17.4R3-S5; 18.3 versions prior to 18.3R3-S5; 18.4 versions prior to 18.4R3-S9; 19.1 versions prior to 19.1R3-S6; 19.2 versions prior to 19.2R1-S7, 19.2R3-S3; 19.3 versions prior to 19.3R2-S6, 19.3R3-S3; 19.4 versions prior to 19.4R1-S4, 19.4R3-S3; 20.1 versions prior to 20.1R2-S2, 20.1R3-S1; 20.2 versions prior to 20.2R3-S2; 20.3 versions prior to 20.3R3; 20.4 versions prior to 20.4R2-S2, 20.4R3; 21.1 versions prior to 21.1R1-S1, 21.1R2."}, {"Reference": "CVE-2022-23128", "Description": "Incomplete List of Disallowed Inputs vulnerability in Mitsubishi Electric MC Works64 versions 4.00A (10.95.201.23) to 4.04E (10.95.210.01), ICONICS GENESIS64 versions 10.95.3 to 10.97, ICONICS Hyper Historian versions 10.95.3 to 10.97, ICONICS AnalytiX versions 10.95.3 to 10.97 and ICONICS MobileHMI versions 10.95.3 to 10.97 allows a remote unauthenticated attacker to bypass the authentication of MC Works64, GENESIS64, Hyper Historian, AnalytiX and MobileHMI, and gain unauthorized access to the products, by sending specially crafted WebSocket packets to FrameWorX server, one of the functions of the products."}, {"Reference": "CVE-2022-1874", "Description": "Insufficient policy enforcement in Safe Browsing in Google Chrome on Mac prior to 102.0.5005.61 allowed a remote attacker to bypass downloads protection policy via a crafted HTML page."}, {"Reference": "CVE-2022-43396", "Description": "In the fix for CVE-2022-24697, a blacklist is used to filter user input commands. But there is a risk of being bypassed. The user can control the command by controlling the kylin.engine.spark-cmd parameter of conf."}, {"Reference": "CVE-2021-42576", "Description": "The bluemonday sanitizer before 1.0.16 for Go, and before 0.0.8 for Python (in pybluemonday), does not properly enforce policies associated with the SELECT, STYLE, and OPTION elements."}, {"Reference": "CVE-2021-41133", "Description": "Flatpak is a system for building, distributing, and running sandboxed desktop applications on Linux. In versions prior to 1.10.4 and 1.12.0, Flatpak apps with direct access to AF_UNIX sockets such as those used by Wayland, Pipewire or pipewire-pulse can trick portals and other host-OS services into treating the Flatpak app as though it was an ordinary, non-sandboxed host-OS process. They can do this by manipulating the VFS using recent mount-related syscalls that are not blocked by Flatpak's denylist seccomp filter, in order to substitute a crafted `/.flatpak-info` or make that file disappear entirely. Flatpak apps that act as clients for AF_UNIX sockets such as those used by Wayland, Pipewire or pipewire-pulse can escalate the privileges that the corresponding services will believe the Flatpak app has. Note that protocols that operate entirely over the D-Bus session bus (user bus), system bus or accessibility bus are not affected by this. This is due to the use of a proxy process `xdg-dbus-proxy`, whose VFS cannot be manipulated by the Flatpak app, when interacting with these buses. Patches exist for versions 1.10.4 and 1.12.0, and as of time of publication, a patch for version 1.8.2 is being planned. There are no workarounds aside from upgrading to a patched version."}]}
{"ID": "185", "Name": "Incorrect Regular Expression", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product specifies a regular expression in a way that causes data to be improperly matched or compared.", "ExtendedDescription": "When the regular expression is used in protection mechanisms such as filtering or validation, this may allow an attacker to bypass the intended restrictions on the incoming data.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "697", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "187", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "182", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Unexpected State", "Varies by Context"], "Note": "When the regular expression is not correctly specified, data might have a different format or type than the rest of the program expects, producing resultant weaknesses or errors."}, {"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"], "Note": "In PHP, regular expression checks can sometimes be bypassed with a null byte, leading to any number of weaknesses."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-45", "Phase": ["Architecture and Design"], "Strategy": "Refactoring", "Description": "Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject the regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor the regular expression."}], "DemonstrativeExamples": [{"ID": "DX-37", "Entries": [{"IntroText": "The following code takes phone numbers as input, and uses a regular expression to reject invalid phone numbers."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\t$phone = GetPhoneNumber();\n\tif ($phone =~ /\\d+-\\d+/) {\n```\n# looks like it only has hyphens and digits* \n\t\tsystem(\"lookup-phone $phone\");} \n\telse {\n\t```\n\t\terror(\"malformed number!\");\n\t}\n```"}, {"BodyText": "An attacker could provide an argument such as: \"; ls -l ; echo 123-456\" This would pass the check, since \"123-456\" is sufficient to match the \"\\d+-\\d+\" portion of the regular expression."}]}, {"ID": "DX-154", "Entries": [{"IntroText": "This code uses a regular expression to validate an IP string prior to using it in a call to the \"ping\" command."}, {"Nature": "Bad", "Language": "Python", "ExampleCode": "```\n\t import subprocess\n\t import re\n\t def validate_ip_regex(ip: str):\n\t\t ip_validator = re.compile(r\"((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}\")\n\t\t if ip_validator.match(ip):\n\t\t\t return ip\n\t\t else:\n\t\t\t raise ValueError(\"IP address does not match valid pattern.\")\n\t def run_ping_regex(ip: str):\n\t\t validated = validate_ip_regex(ip)\n```\n# The ping command treats zero-prepended IP addresses as octal* \n\t\t result = subprocess.call([\"ping\", validated])\n\t\t print(result)"}, {"BodyText": "Since the regular expression does not have anchors (CWE-777), i.e. is unbounded without ^ or $ characters, then prepending a 0 or 0x to the beginning of the IP address will still result in a matched regex pattern. Since the ping command supports octal and hex prepended IP addresses, it will use the unexpectedly valid IP address (CWE-1389). For example, \"0x63.63.63.63\" would be considered equivalent to \"99.63.63.63\". As a result, the attacker could potentially ping systems that the attacker cannot reach directly."}]}], "ObservedExamples": [{"Reference": "CVE-2002-2109", "Description": "Regexp isn't \"anchored\" to the beginning or end, which allows spoofed values that have trusted values as substrings.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2109"}, {"Reference": "CVE-2005-1949", "Description": "Regexp for IP address isn't anchored at the end, allowing appending of shell metacharacters.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1949"}, {"Reference": "CVE-2001-1072", "Description": "Bypass access restrictions via multiple leading slash, which causes a regular expression to fail.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1072"}, {"Reference": "CVE-2000-0115", "Description": "Local user DoS via invalid regular expressions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0115"}, {"Reference": "CVE-2002-1527", "Description": "chain: Malformed input generates a regular expression error that leads to information exposure.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1527"}, {"Reference": "CVE-2005-1061", "Description": "Certain strings are later used in a regexp, leading to a resultant crash.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1061"}, {"Reference": "CVE-2005-2169", "Description": "MFV. Regular expression intended to protect against directory traversal reduces \".../...//\" to \"../\".", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2169"}, {"Reference": "CVE-2005-0603", "Description": "Malformed regexp syntax leads to information exposure in error message.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0603"}, {"Reference": "CVE-2005-1820", "Description": "Code injection due to improper quoting of regular expression.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1820"}, {"Reference": "CVE-2005-3153", "Description": "Null byte bypasses PHP regexp check.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3153"}, {"Reference": "CVE-2005-4155", "Description": "Null byte bypasses PHP regexp check.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-4155"}], "RelatedAttackPatterns": ["15", "6", "79"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Relationship", "Note": "While there is some overlap with allowlist/denylist problems, this entry is intended to deal with incorrectly written regular expressions, regardless of their intended use. Not every regular expression is intended for use as an allowlist or denylist. In addition, allowlists and denylists can be implemented using other mechanisms besides regular expressions."}, {"Type": "Research Gap", "Note": "Regexp errors are likely a primary factor in many MFVs, especially those that require multiple manipulations to exploit. However, they are rarely diagnosed at this level of detail."}], "Top25Examples": [{"Reference": "CVE-2022-24891", "Description": "ESAPI (The OWASP Enterprise Security API) is a free, open source, web application security control library. Prior to version 2.3.0.0, there is a potential for a cross-site scripting vulnerability in ESAPI caused by a incorrect regular expression for \"onsiteURL\" in the **antisamy-esapi.xml** configuration file that can cause \"javascript:\" URLs to fail to be correctly sanitized. This issue is patched in ESAPI 2.3.0.0. As a workaround, manually edit the **antisamy-esapi.xml** configuration files to change the \"onsiteURL\" regular expression. More information about remediation of the vulnerability, including the workaround, is available in the maintainers' release notes and security bulletin."}]}
{"ID": "186", "Name": "Overly Restrictive Regular Expression", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "A regular expression is overly restrictive, which prevents dangerous values from being detected.", "ExtendedDescription": "This weakness is not about regular expression complexity. Rather, it is about a regular expression that does not match all values that are intended. Consider the use of a regexp to identify acceptable values or to spot unwanted terms. An overly restrictive regexp misses some potentially security-relevant values leading to either false positives *or* false negatives, depending on how the regexp is being used within the code. Consider the expression /[0-8]/ where the intention was /[0-9]/. This expression is not \"complex\" but the value \"9\" is not matched when maybe the programmer planned to check for it.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "185", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanAlsoBe", "CweID": "184", "ViewID": "1000"}, {"Nature": "CanAlsoBe", "CweID": "183", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Regular expressions can become error prone when defining a complex language even for those experienced in writing grammars. Determine if several smaller regular expressions simplify one large regular expression. Also, subject your regular expression to thorough testing techniques such as equivalence partitioning, boundary value analysis, and robustness. After testing and a reasonable confidence level is achieved, a regular expression may not be foolproof. If an exploit is allowed to slip through, then record the exploit and refactor your regular expression."}], "ObservedExamples": [{"Reference": "CVE-2005-1604", "Description": "MIE. \".php.ns\" bypasses \".php$\" regexp but is still parsed as PHP by Apache. (manipulates an equivalence property under Apache)", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1604"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "Can overlap allowlist/denylist errors (CWE-183/CWE-184)"}], "Top25Examples": [{"Reference": "CVE-2022-41317", "Description": "An issue was discovered in Squid 4.9 through 4.17 and 5.0.6 through 5.6. Due to inconsistent handling of internal URIs, there can be Exposure of Sensitive Information about clients using the proxy via an HTTPS request to an internal cache manager URL. This is fixed in 5.7."}]}
{"ID": "187", "Name": "Partial String Comparison", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product performs a comparison that only examines a portion of a factor before determining whether there is a match, such as a substring, leading to resultant weaknesses.", "ExtendedDescription": "For example, an attacker might succeed in authentication by providing a small password that matches the associated portion of the larger, correct password.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1023", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Access Control"], "Impact": ["Alter Execution Logic", "Bypass Protection Mechanism"]}], "PotentialMitigations": [{"Phase": ["Testing"], "Description": "Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This example defines a fixed username and password. The AuthenticateUser() function is intended to accept a username and a password from an untrusted user, and check to ensure that it matches the username and password. If the username and password match, AuthenticateUser() is intended to indicate that authentication succeeded."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n```\n/* Ignore CWE-259 (hard-coded password) and CWE-309 (use of password system for authentication) for this example. */* \n\t\n\tchar *username = \"admin\";\n\tchar *pass = \"password\";\n\t\n\tint AuthenticateUser(char *inUser, char *inPass) {\n\t```\n\t\tif (strncmp(username, inUser, strlen(inUser))) {\n\t\t\tlogEvent(\"Auth failure of username using strlen of inUser\");\n\t\t\treturn(AUTH_FAIL);\n\t\t}\n\t\tif (! strncmp(pass, inPass, strlen(inPass))) {\n\t\t\tlogEvent(\"Auth success of password using strlen of inUser\");\n\t\t\treturn(AUTH_SUCCESS);\n\t\t}\n\t\telse {\n\t\t\tlogEvent(\"Auth fail of password using sizeof\");\n\t\t\treturn(AUTH_FAIL);\n\t\t}\n\t}\n\tint main (int argc, char **argv) {\n\t\t\tint authResult;\n\t\t\tif (argc < 3) {\n\t\t\t\tExitError(\"Usage: Provide a username and password\");\n\t\t\t}\n\t\t\tauthResult = AuthenticateUser(argv[1], argv[2]);\n\t\t\tif (authResult == AUTH_SUCCESS) {\n\t\t\t\tDoAuthenticatedTask(argv[1]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tExitError(\"Authentication failed\");\n\t\t\t}\n\t}\n```"}, {"BodyText": "In AuthenticateUser(), the strncmp() call uses the string length of an attacker-provided inPass parameter in order to determine how many characters to check in the password. So, if the attacker only provides a password of length 1, the check will only examine the first byte of the application's password before determining success."}, {"BodyText": "As a result, this partial comparison leads to improper authentication (CWE-287)."}, {"BodyText": "Any of these passwords would still cause authentication to succeed for the \"admin\" user:"}, {"Nature": "Attack", "ExampleCode": "```\n\tp\n\tpa\n\tpas\n\tpass\n```"}, {"BodyText": "This significantly reduces the search space for an attacker, making brute force attacks more feasible."}, {"BodyText": "The same problem also applies to the username, so values such as \"a\" and \"adm\" will succeed for the username."}, {"BodyText": "While this demonstrative example may not seem realistic, see the Observed Examples for CVE entries that effectively reflect this same weakness."}]}], "ObservedExamples": [{"Reference": "CVE-2014-6394", "Description": "Product does not prevent access to restricted directories due to partial string comparison with a public directory", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-6394"}, {"Reference": "CVE-2004-1012", "Description": "Argument parser of an IMAP server treats a partial command \"body[p\" as if it is \"body.peek\", leading to index error and out-of-bounds corruption.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1012"}, {"Reference": "CVE-2004-0765", "Description": "Web browser only checks the hostname portion of a certificate when the hostname portion of the URI is not a fully qualified domain name (FQDN), which allows remote attackers to spoof trusted certificates.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0765"}, {"Reference": "CVE-2002-1374", "Description": "One-character password by attacker checks only against first character of real password.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1374"}, {"Reference": "CVE-2000-0979", "Description": "One-character password by attacker checks only against first character of real password.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0979"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This is conceptually similar to other weaknesses, such as insufficient verification and regular expression errors. It is primary to some weaknesses."}], "Top25Examples": [{"Reference": "CVE-2022-2663", "Description": "An issue was found in the Linux kernel in nf_conntrack_irc where the message handling can be confused and incorrectly matches the message. A firewall may be able to be bypassed when users are using unencrypted IRC with nf_conntrack_irc configured."}, {"Reference": "CVE-2022-26691", "Description": "A logic issue was addressed with improved state management. This issue is fixed in Security Update 2022-003 Catalina, macOS Monterey 12.3, macOS Big Sur 11.6.5. An application may be able to gain elevated privileges."}, {"Reference": "CVE-2022-23554", "Description": "Alpine is a scaffolding library in Java. Alpine prior to version 1.10.4 allows Authentication Filter bypass. The AuthenticationFilter relies on the request URI to evaluate if the user is accessing the swagger endpoint. By accessing a URL with a path such as /api/foo;%2fapi%2fswagger the contains condition will hold and will return from the authentication filter without aborting the request. Note that the principal object will not be assigned and therefore the issue wont allow user impersonation. This issue has been fixed in version 1.10.4. There are no known workarounds."}]}
{"ID": "188", "Name": "Reliance on Data/Memory Layout", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product makes invalid assumptions about how protocol data or memory is organized at a lower level, resulting in unintended program behavior.", "ExtendedDescription": "\n\nWhen changing platforms or protocol versions, in-memory organization of data may change in unintended ways. For example, some architectures may place local variables A and B right next to each other with A on top; some may place them next to each other with B on top; and others may add some padding to each. The padding size may vary to ensure that each variable is aligned to a proper word size.\n\n\nIn protocol implementations, it is common to calculate an offset relative to another field to pick out a specific piece of data. Exceptional conditions, often involving new protocol versions, may add corner cases that change the data layout in an unusual way. The result can be that an implementation accesses an unintended field in the packet, treating data of one type as data of another type.\n", "LikelihoodOfExploit": "Low", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1105", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "435", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality"], "Impact": ["Modify Memory", "Read Memory"], "Note": "Can result in unintended modifications or exposure of sensitive memory."}], "DetectionMethods": [{"DetectionMethodID": "DM-13", "Method": "Fuzzing", "Description": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation", "Architecture and Design"], "Description": "In flat address space situations, never allow computing memory addresses as offsets from another memory address."}, {"Phase": ["Architecture and Design"], "Description": "Fully specify protocol layout unambiguously, providing a structured grammar (e.g., a compilable yacc grammar)."}, {"Phase": ["Testing"], "Description": "Testing: Test that the implementation properly handles each case in the protocol grammar."}], "DemonstrativeExamples": [{"ID": "DX-216", "Entries": [{"IntroText": "In this example function, the memory address of variable b is derived by adding 1 to the address of variable a. This derived address is then used to assign the value 0 to b."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid example() {\n\t\tchar a;\n\t\tchar b;\n\t\t*(&a + 1) = 0;\n\t}\n```"}, {"BodyText": "Here, b may not be one byte past a. It may be one byte in front of a. Or, they may have three bytes between them because they are aligned on 32-bit boundaries."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "190", "Name": "Integer Overflow or Wraparound", "Abstraction": "Base", "Structure": "Simple", "Status": "Stable", "Diagram": "/data/images/CWE-190-Diagram.png", "Description": "The product performs a calculation that can\n         produce an integer overflow or wraparound when the logic\n         assumes that the resulting value will always be larger than\n         the original value. This occurs when an integer value is\n         incremented to a value that is too large to store in the\n         associated representation. When this occurs, the value may\n         become a very small or negative number.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "682", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "682", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "700", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "119", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Overflow", "Description": "The terms \"overflow\" and \"wraparound\" are used interchangeably by some people, but they can have more precise distinctions by others. See Terminology Notes."}, {"Term": "Wraparound", "Description": "The terms \"overflow\" and \"wraparound\" are used interchangeably by some people, but they can have more precise distinctions by others. See Terminology Notes."}, {"Term": "wrap, wrap-around, wrap around", "Description": "Alternate spellings of \"wraparound\""}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "This weakness may become security critical when determining the offset or size in behaviors such as memory allocation, copying, and concatenation."}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart", "DoS: Resource Consumption (Memory)", "DoS: Instability"], "Note": "This weakness can generally lead to undefined behavior and therefore crashes. When the calculated result is used for resource allocation, this weakness can cause too many (or too few) resources to be allocated, possibly enabling crashes if the product requests more resources than can be provided."}, {"Scope": ["Integrity"], "Impact": ["Modify Memory"], "Note": "If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the overflow/wraparound results in other conditions such as buffer overflows, further memory corruption may occur."}, {"Scope": ["Confidentiality", "Availability", "Access Control"], "Impact": ["Execute Unauthorized Code or Commands", "Bypass Protection Mechanism"], "Note": "This weakness can sometimes trigger buffer overflows, which can be used to execute arbitrary code. This is usually outside the scope of the product's implicit security policy."}, {"Scope": ["Availability", "Other"], "Impact": ["Alter Execution Logic", "DoS: Crash, Exit, or Restart", "DoS: Resource Consumption (CPU)"], "Note": "If the overflow/wraparound occurs in a loop index variable, this could cause the loop to terminate at the wrong time - too early, too late, or not at all (i.e., infinite loops). With too many iterations, some loops could consume too many resources such as memory, file handles, etc., possibly leading to a crash or other DoS."}, {"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"], "Note": "If integer values are used in security-critical decisions, such as calculating quotas or allocation limits, integer overflows can be used to cause an incorrect security decision."}], "DetectionMethods": [{"DetectionMethodID": "DM-1", "Method": "Automated Static Analysis", "Description": "This weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.", "Effectiveness": "High"}, {"DetectionMethodID": "DM-2", "Method": "Black Box", "Description": "Sometimes, evidence of this weakness can be detected using dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results.", "Effectiveness": "Moderate", "EffectivenessNotes": "Without visibility into the code, black box methods may not be able to sufficiently distinguish this weakness from others, requiring follow-up manual methods to diagnose the underlying problem."}, {"DetectionMethodID": "DM-7", "Method": "Manual Analysis", "Description": "\n\nThis weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\n\n\nSpecifically, manual static analysis is useful for evaluating the correctness of allocation calculations. This can be useful for detecting overflow conditions (CWE-190) or similar weaknesses that might have serious security impacts on the program.\n", "Effectiveness": "High", "EffectivenessNotes": "These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."}, {"Method": "Automated Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis\n\t\tBinary Weakness Analysis - including disassembler + source code weakness analysis", "Effectiveness": "High"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tManual Source Code Review (not inspections)", "Effectiveness": "SOAR Partial"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer", "Effectiveness": "High"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Requirements"], "Description": "Ensure that all protocols are strictly defined, such that all out-of-bounds behavior can be identified simply, and require strict conformance to the protocol."}, {"MitigationID": "MIT-3", "Phase": ["Requirements"], "Strategy": "Language Selection", "Description": "\n\nUse a language that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nIf possible, choose a language or compiler that performs automatic bounds checking.\n"}, {"MitigationID": "MIT-4", "Phase": ["Architecture and Design"], "Strategy": "Libraries or Frameworks", "Description": "\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nUse libraries or frameworks that make it easier to handle numbers without unexpected consequences.\n\n\nExamples include safe integer handling packages such as SafeInt (C++) or IntegerLib (C or C++). [REF-106]\n"}, {"MitigationID": "MIT-8", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nPerform input validation on any numeric input by ensuring that it is within the expected range. Enforce that the input meets both the minimum and maximum requirements for the expected range.\n\n\nUse unsigned integers where possible. This makes it easier to perform validation for integer overflows. When signed integers are required, ensure that the range check includes minimum values as well as maximum values.\n"}, {"MitigationID": "MIT-36", "Phase": ["Implementation"], "Description": "\n\nUnderstand the programming language's underlying representation and how it interacts with numeric calculation (CWE-681). Pay close attention to byte size discrepancies, precision, signed/unsigned distinctions, truncation, conversion and casting between types, \"not-a-number\" calculations, and how the language handles numbers that are too large or too small for its underlying representation. [REF-7]\n\n\nAlso be careful to account for 32-bit, 64-bit, and other potential differences that may affect the numeric representation.\n"}, {"MitigationID": "MIT-15", "Phase": ["Architecture and Design"], "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."}, {"MitigationID": "MIT-26", "Phase": ["Implementation"], "Strategy": "Compilation or Build Hardening", "Description": "Examine compiler warnings closely and eliminate problems with potential security implications, such as signed / unsigned mismatch in memory operations, or use of uninitialized variables. Even if the weakness is rarely exploitable, a single failure may lead to the compromise of the entire system."}], "DemonstrativeExamples": [{"ID": "DX-33", "Entries": [{"IntroText": "The following image processing code allocates a table for images."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\timg_t table_ptr; /*struct containing img data, 10kB each*/\n\tint num_imgs;\n\t...\n\tnum_imgs = get_num_imgs();\n\ttable_ptr = (img_t*)malloc(sizeof(img_t)*num_imgs);\n\t...\n```"}, {"BodyText": "This code intends to allocate a table of size num_imgs, however as num_imgs grows large, the calculation determining the size of the list will eventually overflow (CWE-190). This will result in a very small list to be allocated instead. If the subsequent code operates on the list as if it were num_imgs long, it may result in many types of out-of-bounds problems (CWE-119)."}]}, {"Entries": [{"IntroText": "The following code excerpt from OpenSSH 3.3 demonstrates a classic case of integer overflow:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tnresp = packet_get_int();\n\tif (nresp > 0) {\n\t\tresponse = xmalloc(nresp*sizeof(char*));\n\t\tfor (i = 0; i < nresp; i++) response[i] = packet_get_string(NULL);\n\t}\n```"}, {"BodyText": "If nresp has the value 1073741824 and sizeof(char*) has its typical value of 4, then the result of the operation nresp*sizeof(char*) overflows, and the argument to xmalloc() will be 0. Most malloc() implementations will happily allocate a 0-byte buffer, causing the subsequent loop iterations to overflow the heap buffer response."}]}, {"Entries": [{"IntroText": "Integer overflows can be complicated and difficult to detect. The following example is an attempt to show how an integer overflow may lead to undefined looping behavior:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tshort int bytesRec = 0;\n\tchar buf[SOMEBIGNUM];\n\twhile(bytesRec < MAXGET) {\n\t\tbytesRec += getFromInput(buf+bytesRec);\n\t}\n```"}, {"BodyText": "In the above case, it is entirely possible that bytesRec may overflow, continuously creating a lower number than MAXGET and also overwriting the first MAXGET-1 bytes of buf."}]}, {"Entries": [{"IntroText": "In this example the method determineFirstQuarterRevenue is used to determine the first quarter revenue for an accounting/business application. The method retrieves the monthly sales totals for the first three months of the year, calculates the first quarter sales totals from the monthly sales totals, calculates the first quarter revenue based on the first quarter sales, and finally saves the first quarter revenue results to the database."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t#define JAN 1\n\t#define FEB 2\n\t#define MAR 3\n\tshort getMonthlySales(int month) {...}\n\tfloat calculateRevenueForQuarter(short quarterSold) {...}\n\tint determineFirstQuarterRevenue() {\n```\n// Variable for sales revenue for the quarter* \n\t\t\tfloat quarterRevenue = 0.0f;\n\t\t\t\n\t\t\tshort JanSold = getMonthlySales(JAN); /* Get sales in January */\n\t\t\tshort FebSold = getMonthlySales(FEB); /* Get sales in February */\n\t\t\tshort MarSold = getMonthlySales(MAR); /* Get sales in March */\n\t\t\t\n\t\t\t\n\t\t\t *// Calculate quarterly total* \n\t\t\tshort quarterSold = JanSold + FebSold + MarSold;\n\t\t\t\n\t\t\t\n\t\t\t *// Calculate the total revenue for the quarter* \n\t\t\tquarterRevenue = calculateRevenueForQuarter(quarterSold);\n\t\t\t\n\t\t\tsaveFirstQuarterRevenue(quarterRevenue);\n\t\t\t\n\t\t\treturn 0;}"}, {"BodyText": "However, in this example the primitive type short int is used for both the monthly and the quarterly sales variables. In C the short int primitive type has a maximum value of 32768. This creates a potential integer overflow if the value for the three monthly sales adds up to more than the maximum value for the short int primitive type. An integer overflow can lead to data corruption, unexpected behavior, infinite loops and system crashes. To correct the situation the appropriate primitive type should be used, as in the example below, and/or provide some validation mechanism to ensure that the maximum value for the primitive type is not exceeded."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n\t...\n\tfloat calculateRevenueForQuarter(long quarterSold) {...}\n\tint determineFirstQuarterRevenue() {\n\t\t\t...\n```\n// Calculate quarterly total* \n\t\t\tlong quarterSold = JanSold + FebSold + MarSold;\n\t\t\t\n\t\t\t\n\t\t\t *// Calculate the total revenue for the quarter* \n\t\t\tquarterRevenue = calculateRevenueForQuarter(quarterSold);\n\t\t\t\n\t\t\t...}"}, {"BodyText": "Note that an integer overflow could also occur if the quarterSold variable has a primitive type long but the method calculateRevenueForQuarter has a parameter of type short."}]}], "ObservedExamples": [{"Reference": "CVE-2021-43537", "Description": "Chain: in a web browser, an unsigned 64-bit integer is forcibly cast to a 32-bit integer (CWE-681) and potentially leading to an integer overflow (CWE-190). If an integer overflow occurs, this can cause heap memory corruption (CWE-122)", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-43537"}, {"Reference": "CVE-2022-21668", "Description": "Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-21668"}, {"Reference": "CVE-2022-0545", "Description": "Chain: 3D renderer has an integer overflow (CWE-190) leading to write-what-where condition (CWE-123) using a crafted image.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-0545"}, {"Reference": "CVE-2021-30860", "Description": "Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-30860"}, {"Reference": "CVE-2021-30663", "Description": "Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-30663"}, {"Reference": "CVE-2018-10887", "Description": "Chain: unexpected sign extension (CWE-194) leads to integer overflow (CWE-190), causing an out-of-bounds read (CWE-125)", "Link": "https://www.cve.org/CVERecord?id=CVE-2018-10887"}, {"Reference": "CVE-2019-1010006", "Description": "Chain: compiler optimization (CWE-733) removes or modifies code used to detect integer overflow (CWE-190), allowing out-of-bounds write (CWE-787).", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-1010006"}, {"Reference": "CVE-2010-1866", "Description": "Chain: integer overflow (CWE-190) causes a negative signed value, which later bypasses a maximum-only check (CWE-839), leading to heap-based buffer overflow (CWE-122).", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-1866"}, {"Reference": "CVE-2010-2753", "Description": "Chain: integer overflow leads to use-after-free", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2753"}, {"Reference": "CVE-2005-1513", "Description": "Chain: integer overflow in securely-coded mail program leads to buffer overflow. In 2005, this was regarded as unrealistic to exploit, but in 2020, it was rediscovered to be easier to exploit due to evolutions of the technology.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1513"}, {"Reference": "CVE-2002-0391", "Description": "Integer overflow via a large number of arguments.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0391"}, {"Reference": "CVE-2002-0639", "Description": "Integer overflow in OpenSSH as listed in the demonstrative examples.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0639"}, {"Reference": "CVE-2005-1141", "Description": "Image with large width and height leads to integer overflow.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1141"}, {"Reference": "CVE-2005-0102", "Description": "Length value of -1 leads to allocation of 0 bytes and resultant heap overflow.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0102"}, {"Reference": "CVE-2004-2013", "Description": "Length value of -1 leads to allocation of 0 bytes and resultant heap overflow.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2013"}, {"Reference": "CVE-2017-1000121", "Description": "chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-1000121"}, {"Reference": "CVE-2013-1591", "Description": "Chain: an integer overflow (CWE-190) in the image size calculation causes an infinite loop (CWE-835) which sequentially allocates buffers without limits (CWE-1325) until the stack is full.", "Link": "https://www.cve.org/CVERecord?id=CVE-2013-1591"}], "FunctionalAreas": ["Number Processing", "Memory Management", "Counters"], "RelatedAttackPatterns": ["92"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Be careful of terminology problems with \"overflow,\" \"underflow,\" and \"wraparound\" - see Terminology Notes. Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"], "Suggestions": [{"CweID": "191", "Comment": "Integer Underflow (Wrap or Wraparound). Consider CWE-191 when the result is less than the minimum value that can be represented (sometimes called \"underflows\")."}]}, "Notes": [{"Type": "Relationship", "Note": "Integer overflows can be primary to buffer overflows when they cause less memory to be allocated than expected."}, {"Type": "Terminology", "Note": "\n\n\"Integer overflow\" is sometimes used to cover several types of errors, including signedness errors, or buffer overflows that involve manipulation of integer data types instead of characters. Part of the confusion results from the fact that 0xffffffff is -1 in a signed context. Other confusion also arises because of the role that integer overflows have in chains.\n\n\nA \"wraparound\" is a well-defined, standard behavior that follows specific rules for how to handle situations when the intended numeric value is too large or too small to be represented, as specified in standards such as C11.\n\n\n\"Overflow\" is sometimes conflated with \"wraparound\" but typically indicates a non-standard or undefined behavior.\n\n\nThe \"overflow\" term is sometimes used to indicate cases where either the maximum or the minimum is exceeded, but others might only use \"overflow\" to indicate exceeding the maximum while using \"underflow\" for exceeding the minimum.\n\n\nSome people use \"overflow\" to mean any value outside the representable range - whether greater than the maximum, or less than the minimum - but CWE uses \"underflow\" for cases in which the intended result is less than the minimum.\n\n\nSee [REF-1440] for additional explanation of the ambiguity of terminology.\n"}, {"Type": "Other", "Note": "While there may be circumstances in which the logic intentionally relies on wrapping - such as with modular arithmetic in timers or counters - it can have security consequences if the wrap is unexpected. This is especially the case if the integer overflow can be triggered using user-supplied inputs."}], "Top25Examples": [{"Reference": "CVE-2021-0677", "Description": "In ccu driver, there is a possible out of bounds read due to an integer overflow. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05827154; Issue ID: ALPS05827154."}, {"Reference": "CVE-2021-1047", "Description": "In valid_ipc_dram_addr of cm_access_control.c, there is a possible out of bounds read due to an integer overflow. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-197966306References: N/A"}, {"Reference": "CVE-2021-21832", "Description": "A memory corruption vulnerability exists in the ISO Parsing functionality of Disc Soft Ltd Deamon Tools Pro 8.3.0.0767. A specially crafted malformed file can lead to an out-of-bounds write. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2021-21914", "Description": "A heap-based buffer overflow vulnerability exists in the DecoderStream::Append functionality of Accusoft ImageGear 19.10. A specially-crafted file can lead to code execution. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2021-21948", "Description": "A heap-based buffer overflow vulnerability exists in the readDatHeadVec functionality of AnyCubic Chitubox AnyCubic Plugin 1.0.0. A specially-crafted GF file can lead to a heap buffer overflow. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2021-22437", "Description": "There is a software integer overflow leading to a TOCTOU condition in smartphones. Successful exploitation of this vulnerability may cause random address access."}, {"Reference": "CVE-2021-26347", "Description": "Failure to validate the integer operand in ASP (AMD Secure Processor) bootloader may allow an attacker to introduce an integer overflow in the L2 directory table in SPI flash resulting in a potential denial of service."}, {"Reference": "CVE-2021-3782", "Description": "An internal reference count is held on the buffer pool, incremented every time a new buffer is created from the pool. The reference count is maintained as an int; on LP64 systems this can cause the reference count to overflow if the client creates a large number of wl_shm buffer objects, or if it can coerce the server to create a large number of external references to the buffer storage. With the reference count overflowing, a use-after-free can be constructed on the wl_shm_pool tracking structure, where values may be incremented or decremented; it may also be possible to construct a limited oracle to leak 4 bytes of server-side memory to the attacking client at a time."}, {"Reference": "CVE-2021-39762", "Description": "In tremolo, there is a possible out of bounds read due to an integer overflow. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12LAndroid ID: A-210625816"}, {"Reference": "CVE-2021-40417", "Description": "When parsing a file that is submitted to the DPDecoder service as a job, the service will use the combination of decoding parameters that were submitted with the job along with fields that were parsed for the submitted video by the R3D SDK to calculate the size of a heap buffer. Due to an integer overflow with regards to this calculation, this can result in an undersized heap buffer being allocated. When this heap buffer is written to, a heap-based buffer overflow will occur. This can result in code execution under the context of the application."}, {"Reference": "CVE-2021-4206", "Description": "A flaw was found in the QXL display device emulation in QEMU. An integer overflow in the cursor_alloc() function can lead to the allocation of a small cursor object followed by a subsequent heap-based buffer overflow. This flaw allows a malicious privileged guest user to crash the QEMU process on the host or potentially execute arbitrary code within the context of the QEMU process."}, {"Reference": "CVE-2021-43537", "Description": "An incorrect type conversion of sizes from 64bit to 32bit integers allowed an attacker to corrupt memory leading to a potentially exploitable crash. This vulnerability affects Thunderbird < 91.4.0, Firefox ESR < 91.4.0, and Firefox < 95."}, {"Reference": "CVE-2021-46829", "Description": "GNOME GdkPixbuf (aka GDK-PixBuf) before 2.42.8 allows a heap-based buffer overflow when compositing or clearing frames in GIF files, as demonstrated by io-gif-animation.c composite_frame. This overflow is controllable and could be abused for code execution, especially on 32-bit systems."}, {"Reference": "CVE-2022-0204", "Description": "A heap overflow vulnerability was found in bluez in versions prior to 5.63. An attacker with local network access could pass specially crafted files causing an application to halt or crash, leading to a denial of service."}, {"Reference": "CVE-2022-0545", "Description": "An integer overflow in the processing of loaded 2D images leads to a write-what-where vulnerability and an out-of-bounds read vulnerability, allowing an attacker to leak sensitive information or achieve code execution in the context of the Blender process when a specially crafted image file is loaded. This flaw affects Blender versions prior to 2.83.19, 2.93.8 and 3.1."}, {"Reference": "CVE-2022-0608", "Description": "Integer overflow in Mojo in Google Chrome prior to 98.0.4758.102 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1922", "Description": "DOS / potential heap overwrite in mkv demuxing using zlib decompression. Integer overflow in matroskademux element in gst_matroska_decompress_data function which causes a segfault, or could cause a heap overwrite, depending on libc and OS. Depending on the libc used, and the underlying OS capabilities, it could be just a segfault or a heap overwrite. If the libc uses mmap for large chunks, and the OS supports mmap, then it is just a segfault (because the realloc before the integer overflow will use mremap to reduce the size of the chunk, and it will start to write to unmapped memory). However, if using a libc implementation that does not use mmap, or if the OS does not support mmap while using libc, then this could result in a heap overwrite."}, {"Reference": "CVE-2022-1923", "Description": "DOS / potential heap overwrite in mkv demuxing using bzip decompression. Integer overflow in matroskademux element in bzip decompression function which causes a segfault, or could cause a heap overwrite, depending on libc and OS. Depending on the libc used, and the underlying OS capabilities, it could be just a segfault or a heap overwrite. If the libc uses mmap for large chunks, and the OS supports mmap, then it is just a segfault (because the realloc before the integer overflow will use mremap to reduce the size of the chunk, and it will start to write to unmapped memory). However, if using a libc implementation that does not use mmap, or if the OS does not support mmap while using libc, then this could result in a heap overwrite."}, {"Reference": "CVE-2022-1924", "Description": "DOS / potential heap overwrite in mkv demuxing using lzo decompression. Integer overflow in matroskademux element in lzo decompression function which causes a segfault, or could cause a heap overwrite, depending on libc and OS. Depending on the libc used, and the underlying OS capabilities, it could be just a segfault or a heap overwrite. If the libc uses mmap for large chunks, and the OS supports mmap, then it is just a segfault (because the realloc before the integer overflow will use mremap to reduce the size of the chunk, and it will start to write to unmapped memory). However, if using a libc implementation that does not use mmap, or if the OS does not support mmap while using libc, then this could result in a heap overwrite."}, {"Reference": "CVE-2022-1925", "Description": "DOS / potential heap overwrite in mkv demuxing using HEADERSTRIP decompression. Integer overflow in matroskaparse element in gst_matroska_decompress_data function which causes a heap overflow. Due to restrictions on chunk sizes in the matroskademux element, the overflow can't be triggered, however the matroskaparse element has no size checks."}, {"Reference": "CVE-2022-21729", "Description": "Tensorflow is an Open Source Machine Learning Framework. The implementation of `UnravelIndex` is vulnerable to a division by zero caused by an integer overflow bug. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."}, {"Reference": "CVE-2022-21743", "Description": "In ion, there is a possible use after free due to an integer overflow. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06371108; Issue ID: ALPS06371108."}, {"Reference": "CVE-2022-22074", "Description": "Memory Corruption during wma file playback due to integer overflow in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables"}, {"Reference": "CVE-2022-22081", "Description": "Memory corruption in audio module due to integer overflow in Snapdragon Auto, Snapdragon Connectivity, Snapdragon Mobile, Snapdragon Wearables"}, {"Reference": "CVE-2022-22106", "Description": "Memory corruption in multimedia due to improper length check while copying the data in Snapdragon Auto"}, {"Reference": "CVE-2022-2329", "Description": "A CWE-190: Integer Overflow or Wraparound vulnerability exists that could cause heap-based buffer overflow, leading to denial of service and potentially remote code execution when an attacker sends multiple specially crafted messages. Affected Products: IGSS Data Server - IGSSdataServer.exe (Versions prior to V15.0.0.22073)"}, {"Reference": "CVE-2022-23559", "Description": "Tensorflow is an Open Source Machine Learning Framework. An attacker can craft a TFLite model that would cause an integer overflow in embedding lookup operations. Both `embedding_size` and `lookup_size` are products of values provided by the user. Hence, a malicious user could trigger overflows in the multiplication. In certain scenarios, this can then result in heap OOB read/write. Users are advised to upgrade to a patched version."}, {"Reference": "CVE-2022-24310", "Description": "A CWE-190: Integer Overflow or Wraparound vulnerability exists that could cause heap-based buffer overflow, leading to denial of service and potentially remote code execution when an attacker sends multiple specially crafted messages. Affected Product: Interactive Graphical SCADA System Data Server (V15.0.0.22020 and prior)"}, {"Reference": "CVE-2022-24724", "Description": "cmark-gfm is GitHub's extended version of the C reference implementation of CommonMark. Prior to versions 0.29.0.gfm.3 and 0.28.3.gfm.21, an integer overflow in cmark-gfm's table row parsing `table.c:row_from_string` may lead to heap memory corruption when parsing tables who's marker rows contain more than UINT16_MAX columns. The impact of this heap corruption ranges from Information Leak to Arbitrary Code Execution depending on how and where `cmark-gfm` is used. If `cmark-gfm` is used for rendering remote user controlled markdown, this vulnerability may lead to Remote Code Execution (RCE) in applications employing affected versions of the `cmark-gfm` library. This vulnerability has been patched in the following cmark-gfm versions 0.29.0.gfm.3 and 0.28.3.gfm.21. A workaround is available. The vulnerability exists in the table markdown extensions of cmark-gfm. Disabling the table extension will prevent this vulnerability from being triggered."}, {"Reference": "CVE-2022-24795", "Description": "yajl-ruby is a C binding to the YAJL JSON parsing and generation library. The 1.x branch and the 2.x branch of `yajl` contain an integer overflow which leads to subsequent heap memory corruption when dealing with large (~2GB) inputs. The reallocation logic at `yajl_buf.c#L64` may result in the `need` 32bit integer wrapping to 0 when `need` approaches a value of 0x80000000 (i.e. ~2GB of data), which results in a reallocation of buf->alloc into a small heap chunk. These integers are declared as `size_t` in the 2.x branch of `yajl`, which practically prevents the issue from triggering on 64bit platforms, however this does not preclude this issue triggering on 32bit builds on which `size_t` is a 32bit integer. Subsequent population of this under-allocated heap chunk is based on the original buffer size, leading to heap memory corruption. This vulnerability mostly impacts process availability. Maintainers believe exploitation for arbitrary code execution is unlikely. A patch is available and anticipated to be part of yajl-ruby version 1.4.2. As a workaround, avoid passing large inputs to YAJL."}, {"Reference": "CVE-2022-25291", "Description": "An integer overflow in WatchGuard Firebox and XTM appliances allows an authenticated remote attacker to trigger a heap-based buffer overflow and potentially execute arbitrary code by initiating a firmware update with a malicious upgrade image. This vulnerability impacts Fireware OS before 12.7.2_U2, 12.x before 12.1.3_U8, and 12.2.x through 12.5.x before 12.5.9_U2."}, {"Reference": "CVE-2022-2566", "Description": "A heap out-of-bounds memory write exists in FFMPEG since version 5.1. The size calculation in `build_open_gop_key_points()` goes through all entries in the loop and adds `sc->ctts_data[i].count` to `sc->sample_offsets_count`. This can lead to an integer overflow resulting in a small allocation with `av_calloc()`. An attacker can cause remote code execution via a malicious mp4 file. We recommend upgrading past commit c953baa084607dd1d84c3bfcce3cf6a87c3e6e05"}, {"Reference": "CVE-2022-26459", "Description": "In vow, there is a possible out of bounds read due to an integer overflow. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07032634; Issue ID: ALPS07032634."}, {"Reference": "CVE-2022-26495", "Description": "In nbd-server in nbd before 3.24, there is an integer overflow with a resultant heap-based buffer overflow. A value of 0xffffffff in the name length field will cause a zero-sized buffer to be allocated for the name, resulting in a write to a dangling pointer. This issue exists for the NBD_OPT_INFO, NBD_OPT_GO, and NBD_OPT_EXPORT_NAME messages."}, {"Reference": "CVE-2022-28331", "Description": "On Windows, Apache Portable Runtime 1.7.0 and earlier may write beyond the end of a stack based buffer in apr_socket_sendv(). This is a result of integer overflow."}, {"Reference": "CVE-2022-28471", "Description": "In ffjpeg (commit hash: caade60), the function bmp_load() in bmp.c contains an integer overflow vulnerability, which eventually results in the heap overflow in jfif_encode() in jfif.c. This is due to the incomplete patch for issue 38"}, {"Reference": "CVE-2022-29203", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.SpaceToBatchND` (in all backends such as XLA and handwritten kernels) is vulnerable to an integer overflow: The result of this integer overflow is used to allocate the output tensor, hence we get a denial of service via a `CHECK`-failure (assertion failure), as in TFSA-2021-198. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-29886", "Description": "An integer overflow vulnerability exists in the way ESTsoft Alyac 2.5.8.544 parses OLE files. A specially-crafted OLE file can lead to a heap buffer overflow, which can result in arbitrary code execution. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2022-32543", "Description": "An integer overflow vulnerability exists in the way ESTsoft Alyac 2.5.8.544 parses OLE files. A specially-crafted OLE file can lead to a heap buffer overflow which can result in arbitrary code execution. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2022-33266", "Description": "Memory corruption in Audio due to integer overflow to buffer overflow while music playback of clips like amr,evrc,qcelp with modified content."}, {"Reference": "CVE-2022-33719", "Description": "Improper input validation in baseband prior to SMR Aug-2022 Release 1 allows attackers to cause integer overflow to heap overflow."}, {"Reference": "CVE-2022-35289", "Description": "A write-what-where condition in hermes caused by an integer overflow, prior to commit 5b6255ae049fa4641791e47fad994e8e8c4da374 allows attackers to potentially execute arbitrary code via crafted JavaScript. Note that this is only exploitable if the application using Hermes permits evaluation of untrusted JavaScript. Hence, most React Native applications are not affected."}, {"Reference": "CVE-2022-35951", "Description": "Redis is an in-memory database that persists on disk. Versions 7.0.0 and above, prior to 7.0.5 are vulnerable to an Integer Overflow. Executing an `XAUTOCLAIM` command on a stream key in a specific state, with a specially crafted `COUNT` argument may cause an integer overflow, a subsequent heap overflow, and potentially lead to remote code execution. This has been patched in Redis version 7.0.5. No known workarounds exist."}, {"Reference": "CVE-2022-39343", "Description": "Azure RTOS FileX is a FAT-compatible file system that\u2019s fully integrated with Azure RTOS ThreadX. In versions before 6.2.0, the Fault Tolerant feature of Azure RTOS FileX includes integer under and overflows which may be exploited to achieve buffer overflow and modify memory contents. When a valid log file with correct ID and checksum is detected by the `_fx_fault_tolerant_enable` function an attempt to recover the previous failed write operation is taken by call of `_fx_fault_tolerant_apply_logs`. This function iterates through the log entries and performs required recovery operations. When properly crafted a log including entries of type `FX_FAULT_TOLERANT_DIR_LOG_TYPE` may be utilized to introduce unexpected behavior. This issue has been patched in version 6.2.0. A workaround to fix line 218 in fx_fault_tolerant_apply_logs.c is documented in the GHSA."}, {"Reference": "CVE-2022-41318", "Description": "A buffer over-read was discovered in libntlmauth in Squid 2.5 through 5.6. Due to incorrect integer-overflow protection, the SSPI and SMB authentication helpers are vulnerable to reading unintended memory locations. In some configurations, cleartext credentials from these locations are sent to a client. This is fixed in 5.7."}, {"Reference": "CVE-2022-4172", "Description": "An integer overflow and buffer overflow issues were found in the ACPI Error Record Serialization Table (ERST) device of QEMU in the read_erst_record() and write_erst_record() functions. Both issues may allow the guest to overrun the host buffer allocated for the ERST memory device. A malicious guest could use these flaws to crash the QEMU process on the host."}, {"Reference": "CVE-2022-42898", "Description": "PAC parsing in MIT Kerberos 5 (aka krb5) before 1.19.4 and 1.20.x before 1.20.1 has integer overflows that may lead to remote code execution (in KDC, kadmind, or a GSS or Kerberos application server) on 32-bit platforms (which have a resultant heap-based buffer overflow), and cause a denial of service on other platforms. This occurs in krb5_pac_parse in lib/krb5/krb/pac.c. Heimdal before 7.7.1 has \"a similar bug.\""}, {"Reference": "CVE-2022-44638", "Description": "In libpixman in Pixman before 0.42.2, there is an out-of-bounds write (aka heap-based buffer overflow) in rasterize_edges_8 due to an integer overflow in pixman_sample_floor_y."}, {"Reference": "CVE-2021-30663", "Description": "An integer overflow was addressed with improved input validation. This issue is fixed in iOS 14.5.1 and iPadOS 14.5.1, tvOS 14.6, iOS 12.5.3, Safari 14.1.1, macOS Big Sur 11.3.1. Processing maliciously crafted web content may lead to arbitrary code execution."}, {"Reference": "CVE-2021-30860", "Description": "An integer overflow was addressed with improved input validation. This issue is fixed in Security Update 2021-005 Catalina, iOS 14.8 and iPadOS 14.8, macOS Big Sur 11.6, watchOS 7.6.2. Processing a maliciously crafted PDF may lead to arbitrary code execution. Apple is aware of a report that this issue may have been actively exploited."}, {"Reference": "CVE-2022-3970", "Description": "A vulnerability was found in LibTIFF. It has been classified as critical. This affects the function TIFFReadRGBATileExt of the file libtiff/tif_getimage.c. The manipulation leads to integer overflow. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. The name of the patch is 227500897dfb07fb7d27f7aa570050e62617e3be. It is recommended to apply a patch to fix this issue. The identifier VDB-213549 was assigned to this vulnerability."}, {"Reference": "CVE-2022-4202", "Description": "A vulnerability, which was classified as problematic, was found in GPAC 2.1-DEV-rev490-g68064e101-master. Affected is the function lsr_translate_coords of the file laser/lsr_dec.c. The manipulation leads to integer overflow. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. The name of the patch is b3d821c4ae9ba62b3a194d9dcb5e99f17bd56908. It is recommended to apply a patch to fix this issue. VDB-214518 is the identifier assigned to this vulnerability."}, {"Reference": "CVE-2021-30267", "Description": "Possible integer overflow to buffer overflow due to improper input validation in FTM ARA commands in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile"}, {"Reference": "CVE-2022-25705", "Description": "Memory corruption in modem due to integer overflow to buffer overflow while handling APDU response"}, {"Reference": "CVE-2022-25748", "Description": "Memory corruption in WLAN due to integer overflow to buffer overflow while parsing GTK frames. in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer Electronics Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon IoT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables, Snapdragon Wired Infrastructure and Networking"}, {"Reference": "CVE-2022-33219", "Description": "Memory corruption in Automotive due to integer overflow to buffer overflow while registering a new listener with shared buffer."}, {"Reference": "CVE-2022-39907", "Description": "Integer overflow vulnerability in Samsung decoding library for video thumbnails prior to SMR Dec-2022 Release 1 allows local attacker to perform Out-Of-Bounds Write."}, {"Reference": "CVE-2022-40530", "Description": "Memory corruption in WLAN due to integer overflow to buffer overflow in WLAN during initialization phase."}, {"Reference": "CVE-2021-3607", "Description": "An integer overflow was found in the QEMU implementation of VMWare's paravirtual RDMA device in versions prior to 6.1.0. The issue occurs while handling a \"PVRDMA_REG_DSRHIGH\" write from the guest due to improper input validation. This flaw allows a privileged guest user to make QEMU allocate a large amount of memory, resulting in a denial of service. The highest threat from this vulnerability is to system availability."}, {"Reference": "CVE-2022-44425", "Description": "In wlan driver, there is a possible missing bounds check. This could lead to local denial of service in wlan services."}, {"Reference": "CVE-2021-20268", "Description": "An out-of-bounds access flaw was found in the Linux kernel's implementation of the eBPF code verifier in the way a user running the eBPF script calls dev_map_init_map or sock_map_alloc. This flaw allows a local user to crash the system or possibly escalate their privileges. The highest threat from this vulnerability is to confidentiality, integrity, as well as system availability."}, {"Reference": "CVE-2022-20684", "Description": "A vulnerability in Simple Network Management Protocol (SNMP) trap generation for wireless clients of Cisco IOS XE Wireless Controller Software for the Catalyst 9000 Family could allow an unauthenticated, adjacent attacker to cause an affected device to unexpectedly reload, resulting in a denial of service (DoS) condition on the device. This vulnerability is due to a lack of input validation of the information used to generate an SNMP trap related to a wireless client connection event. An attacker could exploit this vulnerability by sending an 802.1x packet with crafted parameters during the wireless authentication setup phase of a connection. A successful exploit could allow the attacker to cause the device to reload, resulting in a DoS condition."}, {"Reference": "CVE-2022-28937", "Description": "FISCO-BCOS release-3.0.0-rc2 was discovered to contain an issue where a malicious node, via an invalid proposal with an invalid header, will cause normal nodes to stop producing new blocks and processing new clients' requests."}, {"Reference": "CVE-2022-1699", "Description": "Uncontrolled Resource Consumption in GitHub repository causefx/organizr prior to 2.1.2000. This vulnerability can be abused by doing a DDoS attack for which genuine users will not able to access resources/applications."}]}
{"ID": "191", "Name": "Integer Underflow (Wrap or Wraparound)", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product subtracts one value from another, such that the result is less than the minimum allowable integer value, which produces a value that is not equal to the correct result.", "ExtendedDescription": "This can happen in signed and unsigned cases.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "682", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "682", "ViewID": "1003", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C#", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Integer underflow", "Description": "\n\n\"Integer underflow\" is sometimes used to identify signedness errors in which an originally positive number becomes negative as a result of subtraction. However, there are cases of bad subtraction in which unsigned integers are involved, so it's not always a signedness issue.\n\n\n\"Integer underflow\" is occasionally used to describe array index errors in which the index is negative.\n"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart", "DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)", "DoS: Instability"], "Note": "This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high."}, {"Scope": ["Integrity"], "Impact": ["Modify Memory"], "Note": "If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur."}, {"Scope": ["Confidentiality", "Availability", "Access Control"], "Impact": ["Execute Unauthorized Code or Commands", "Bypass Protection Mechanism"], "Note": "This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following example subtracts from a 32 bit signed integer."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t#include <stdio.h>\n\t#include <stdbool.h>\n\tmain (void)\n\t{\n\t\tint i;\n\t\ti = -2147483648;\n\t\ti = i - 1;\n\t\treturn 0;\n\t}\n```"}, {"BodyText": "The example has an integer underflow. The value of i is already at the lowest negative value possible, so after subtracting 1, the new value of i is 2147483647."}]}, {"ID": "DX-137", "Entries": [{"IntroText": "This code performs a stack allocation based on a length calculation."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t int a = 5, b = 6;\n\t size_t len = a - b;\n\t char buf[len]; // Just blows up the stack \n }\n```"}, {"BodyText": "Since a and b are declared as signed ints, the \"a - b\" subtraction gives a negative result (-1). However, since len is declared to be unsigned, len is cast to an extremely large positive number (on 32-bit systems - 4294967295). As a result, the buffer buf[len] declaration uses an extremely large size to allocate on the stack, very likely more than the entire computer's memory space."}, {"BodyText": "Miscalculations usually will not be so obvious. The calculation will either be complicated or the result of an attacker's input to attain the negative value."}]}], "ObservedExamples": [{"Reference": "CVE-2004-0816", "Description": "Integer underflow in firewall via malformed packet.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0816"}, {"Reference": "CVE-2004-1002", "Description": "Integer underflow by packet with invalid length.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1002"}, {"Reference": "CVE-2005-0199", "Description": "Long input causes incorrect length calculation.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0199"}, {"Reference": "CVE-2005-1891", "Description": "Malformed icon causes integer underflow in loop counter variable.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1891"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-4066", "Description": "Integer underflow in ANGLE in Google Chrome prior to 96.0.4664.93 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0185", "Description": "A heap-based buffer overflow flaw was found in the way the legacy_parse_param function in the Filesystem Context functionality of the Linux kernel verified the supplied parameters length. An unprivileged (in case of unprivileged user namespaces enabled, otherwise needs namespaced CAP_SYS_ADMIN privilege) local user able to open a filesystem that does not support the Filesystem Context API (and thus fallbacks to legacy handling) could use this flaw to escalate their privileges on the system."}, {"Reference": "CVE-2022-0544", "Description": "An integer underflow in the DDS loader of Blender leads to an out-of-bounds read, possibly allowing an attacker to read sensitive data using a crafted DDS image file. This flaw affects Blender versions prior to 2.83.19, 2.93.8 and 3.1."}, {"Reference": "CVE-2022-20073", "Description": "In preloader (usb), there is a possible out of bounds write due to a integer underflow. This could lead to local escalation of privilege, for an attacker who has physical access to the device, with no additional execution privileges needed. User interaction is needed for exploitation. Patch ID: ALPS06160841; Issue ID: ALPS06160841."}, {"Reference": "CVE-2022-20393", "Description": "In extract3GPPGlobalDescriptions of TextDescriptions.cpp, there is a possible out of bounds read due to an integer overflow. This could lead to local information disclosure from the media server with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-11 Android-12 Android-12LAndroid ID: A-233735886"}, {"Reference": "CVE-2022-20483", "Description": "In several functions that parse avrc response in avrc_pars_ct.cc and related files, there are possible out of bounds reads due to integer overflows. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12L Android-13Android ID: A-242459126"}, {"Reference": "CVE-2022-20516", "Description": "In rw_t3t_act_handle_check_ndef_rsp of rw_t3t.cc, there is a possible out of bounds read due to an integer overflow. This could lead to remote information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-224002331"}, {"Reference": "CVE-2022-23613", "Description": "xrdp is an open source remote desktop protocol (RDP) server. In affected versions an integer underflow leading to a heap overflow in the sesman server allows any unauthenticated attacker which is able to locally access a sesman server to execute code as root. This vulnerability has been patched in version 0.9.18.1 and above. Users are advised to upgrade. There are no known workarounds."}, {"Reference": "CVE-2022-36063", "Description": "Azure RTOS USBx is a USB host, device, and on-the-go (OTG) embedded stack, fully integrated with Azure RTOS ThreadX and available for all Azure RTOS ThreadX\u2013supported processors. Azure RTOS USBX implementation of host support for USB CDC ECM includes an integer underflow and a buffer overflow in the `_ux_host_class_cdc_ecm_mac_address_get` function which may be potentially exploited to achieve remote code execution or denial of service. Setting mac address string descriptor length to a `0` or `1` allows an attacker to introduce an integer underflow followed (string_length) by a buffer overflow of the `cdc_ecm -> ux_host_class_cdc_ecm_node_id` array. This may allow one to redirect the code execution flow or introduce a denial of service. The fix has been included in USBX release [6.1.12](https://github.com/azure-rtos/usbx/releases/tag/v6.1.12_rel). Improved mac address string descriptor length validation to check for unexpectedly small values may be used as a workaround."}, {"Reference": "CVE-2022-39293", "Description": "Azure RTOS USBX is a high-performance USB host, device, and on-the-go (OTG) embedded stack, that is fully integrated with Azure RTOS ThreadX. The case is, in [_ux_host_class_pima_read](https://github.com/azure-rtos/usbx/blob/master/common/usbx_host_classes/src/ux_host_class_pima_read.c), there is data length from device response, returned in the very first packet, and read by [L165 code](https://github.com/azure-rtos/usbx/blob/082fd9db09a3669eca3358f10b8837a5c1635c0b/common/usbx_host_classes/src/ux_host_class_pima_read.c#L165), as header_length. Then in [L178 code](https://github.com/azure-rtos/usbx/blob/082fd9db09a3669eca3358f10b8837a5c1635c0b/common/usbx_host_classes/src/ux_host_class_pima_read.c#L178), there is a \u201cif\u201d branch, which check the expression of \u201c(header_length - UX_HOST_CLASS_PIMA_DATA_HEADER_SIZE) > data_length\u201d where if header_length is smaller than UX_HOST_CLASS_PIMA_DATA_HEADER_SIZE, calculation could overflow and then [L182 code](https://github.com/azure-rtos/usbx/blob/082fd9db09a3669eca3358f10b8837a5c1635c0b/common/usbx_host_classes/src/ux_host_class_pima_read.c#L182) the calculation of data_length is also overflow, this way the later [while loop start from L192](https://github.com/azure-rtos/usbx/blob/082fd9db09a3669eca3358f10b8837a5c1635c0b/common/usbx_host_classes/src/ux_host_class_pima_read.c#L192) can move data_pointer to unexpected address and cause write buffer overflow. The fix has been included in USBX release [6.1.12](https://github.com/azure-rtos/usbx/releases/tag/v6.1.12_rel). The following can be used as a workaround: Add check of `header_length`: 1. It must be greater than `UX_HOST_CLASS_PIMA_DATA_HEADER_SIZE`. 1. It should be greater or equal to the current returned data length (`transfer_request -> ux_transfer_request_actual_length`)."}, {"Reference": "CVE-2022-39343", "Description": "Azure RTOS FileX is a FAT-compatible file system that\u2019s fully integrated with Azure RTOS ThreadX. In versions before 6.2.0, the Fault Tolerant feature of Azure RTOS FileX includes integer under and overflows which may be exploited to achieve buffer overflow and modify memory contents. When a valid log file with correct ID and checksum is detected by the `_fx_fault_tolerant_enable` function an attempt to recover the previous failed write operation is taken by call of `_fx_fault_tolerant_apply_logs`. This function iterates through the log entries and performs required recovery operations. When properly crafted a log including entries of type `FX_FAULT_TOLERANT_DIR_LOG_TYPE` may be utilized to introduce unexpected behavior. This issue has been patched in version 6.2.0. A workaround to fix line 218 in fx_fault_tolerant_apply_logs.c is documented in the GHSA."}, {"Reference": "CVE-2022-4338", "Description": "An integer underflow in Organization Specific TLV was found in various versions of OpenvSwitch."}, {"Reference": "CVE-2021-31956", "Description": "Windows NTFS Elevation of Privilege Vulnerability"}, {"Reference": "CVE-2022-22715", "Description": "Named Pipe File System Elevation of Privilege Vulnerability"}]}
{"ID": "192", "Name": "Integer Coercion Error", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "Integer coercion refers to a set of flaws pertaining to the type casting, extension, or truncation of primitive data types.", "ExtendedDescription": "Several flaws fall under the category of integer coercion errors. For the most part, these errors in and of themselves result only in availability and data integrity issues. However, in some circumstances, they may result in other, more complicated security related flaws, such as buffer overflow conditions.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "681", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C#", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)", "DoS: Crash, Exit, or Restart"], "Note": "Integer coercion often leads to undefined states of execution resulting in infinite loops or crashes."}, {"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "In some cases, integer coercion errors can lead to exploitable buffer overflow conditions, resulting in the execution of arbitrary code."}, {"Scope": ["Integrity", "Other"], "Impact": ["Other"], "Note": "Integer coercion errors result in an incorrect value being stored for the variable in question."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Requirements"], "Description": "A language which throws exceptions on ambiguous data casts might be chosen."}, {"Phase": ["Architecture and Design"], "Description": "Design objects and program flow such that multiple or complex casts are unnecessary"}, {"Phase": ["Implementation"], "Description": "Ensure that any data type casting that you must used is entirely understood in order to reduce the plausibility of error in use."}], "DemonstrativeExamples": [{"ID": "DX-21", "Entries": [{"IntroText": "The following code is intended to read an incoming packet from a socket and extract one or more headers."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tDataPacket *packet;\n\tint numHeaders;\n\tPacketHeader *headers;\n\tsock=AcceptSocketConnection();\n\tReadPacket(packet, sock);\n\tnumHeaders =packet->headers;\n\tif (numHeaders > 100) {\n\t\tExitError(\"too many headers!\");\n\t}\n\theaders = malloc(numHeaders * sizeof(PacketHeader);\n\tParsePacketHeaders(packet, headers);\n```"}, {"BodyText": "The code performs a check to make sure that the packet does not contain too many headers. However, numHeaders is defined as a signed int, so it could be negative. If the incoming packet specifies a value such as -3, then the malloc calculation will generate a negative number (say, -300 if each header can be a maximum of 100 bytes). When this result is provided to malloc(), it is first converted to a size_t type. This conversion then produces a large value such as 4294966996, which may cause malloc() to fail or to allocate an extremely large amount of memory (CWE-195). With the appropriate negative numbers, an attacker could trick malloc() into using a very small positive number, which then allocates a buffer that is much smaller than expected, potentially leading to a buffer overflow."}]}, {"ID": "DX-23", "Entries": [{"IntroText": "The following code reads a maximum size and performs validation on that size. It then performs a strncpy, assuming it will not exceed the boundaries of the array. While the use of \"short s\" is forced in this particular example, short int's are frequently used within real-world code, such as code that processes structured data."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint GetUntrustedInt () {\n\t\treturn(0x0000FFFF);\n\t}\n\tvoid main (int argc, char **argv) {\n\t\t\tchar path[256];\n\t\t\tchar *input;\n\t\t\tint i;\n\t\t\tshort s;\n\t\t\tunsigned int sz;\n\t\t\ti = GetUntrustedInt();\n\t\t\ts = i;\n\t\t\t/* s is -1 so it passes the safety check - CWE-697 */\n\t\t\tif (s > 256) {\n\t\t\t\tDiePainfully(\"go away!\\n\");\n\t\t\t}\n\t\t\t/* s is sign-extended and saved in sz */\n\t\t\tsz = s;\n\t\t\t/* output: i=65535, s=-1, sz=4294967295 - your mileage may vary */\n\t\t\tprintf(\"i=%d, s=%d, sz=%u\\n\", i, s, sz);\n\t\t\tinput = GetUserInput(\"Enter pathname:\");\n\t\t\t/* strncpy interprets s as unsigned int, so it's treated as MAX_INT\n\t\t\t(CWE-195), enabling buffer overflow (CWE-119) */\n\t\t\tstrncpy(path, input, s);\n\t\t\tpath[255] = '\\0'; /* don't want CWE-170 */\n\t\t\tprintf(\"Path is: %s\\n\", path);\n\t}\n```"}, {"BodyText": "This code first exhibits an example of CWE-839, allowing \"s\" to be a negative number. When the negative short \"s\" is converted to an unsigned integer, it becomes an extremely large positive integer. When this converted integer is used by strncpy() it will lead to a buffer overflow (CWE-119)."}]}], "ObservedExamples": [{"Reference": "CVE-2022-2639", "Description": "Chain: integer coercion error (CWE-192) prevents a return value from indicating an error, leading to out-of-bounds write (CWE-787)", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-2639"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "Within C, it might be that \"coercion\" is semantically different than \"casting\", possibly depending on whether the programmer directly specifies the conversion, or if the compiler does it implicitly. This has implications for the presentation of this entry and others, such as CWE-681, and whether there is enough of a difference for these entries to be split."}], "Top25Examples": [{"Reference": "CVE-2022-2639", "Description": "An integer coercion error was found in the openvswitch kernel module. Given a sufficiently large number of actions, while copying and reserving memory for a new action of a new flow, the reserve_sfa_size() function does not return -EMSGSIZE as expected, potentially leading to an out-of-bounds write access. This flaw allows a local user to crash or potentially escalate their privileges on the system."}]}
{"ID": "193", "Name": "Off-by-one Error", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "A product calculates or uses an incorrect maximum or minimum value that is 1 more, or 1 less, than the correct value.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "682", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "682", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "617", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "170", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "119", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "off-by-five", "Description": "An \"off-by-five\" error was reported for sudo in 2002 (CVE-2002-0184), but that is more like a \"length calculation\" error."}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart", "DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)", "DoS: Instability"], "Note": "This weakness will generally lead to undefined behavior and therefore crashes. In the case of overflows involving loop index variables, the likelihood of infinite loops is also high."}, {"Scope": ["Integrity"], "Impact": ["Modify Memory"], "Note": "If the value in question is important to data (as opposed to flow), simple data corruption has occurred. Also, if the wrap around results in other conditions such as buffer overflows, further memory corruption may occur."}, {"Scope": ["Confidentiality", "Availability", "Access Control"], "Impact": ["Execute Unauthorized Code or Commands", "Bypass Protection Mechanism"], "Note": "This weakness can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "When copying character arrays or using character manipulation methods, the correct size parameter must be used to account for the null terminator that needs to be added at the end of the array. Some examples of functions susceptible to this weakness in C include strcpy(), strncpy(), strcat(), strncat(), printf(), sprintf(), scanf() and sscanf()."}], "DemonstrativeExamples": [{"ID": "DX-20", "Entries": [{"IntroText": "The following code allocates memory for a maximum number of widgets. It then gets a user-specified number of widgets, making sure that the user does not request too many. It then initializes the elements of the array using InitializeWidget(). Because the number of widgets can vary for each request, the code inserts a NULL pointer to signify the location of the last widget."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint i;\n\tunsigned int numWidgets;\n\tWidget **WidgetList;\n\tnumWidgets = GetUntrustedSizeValue();\n\tif ((numWidgets == 0) || (numWidgets > MAX_NUM_WIDGETS)) {\n\t\tExitError(\"Incorrect number of widgets requested!\");\n\t}\n\tWidgetList = (Widget **)malloc(numWidgets * sizeof(Widget *));\n\tprintf(\"WidgetList ptr=%p\\n\", WidgetList);\n\tfor(i=0; i<numWidgets; i++) {\n\t\tWidgetList[i] = InitializeWidget();\n\t}\n\tWidgetList[numWidgets] = NULL;\n\tshowWidgets(WidgetList);\n```"}, {"BodyText": "However, this code contains an off-by-one calculation error (CWE-193). It allocates exactly enough space to contain the specified number of widgets, but it does not include the space for the NULL pointer. As a result, the allocated buffer is smaller than it is supposed to be (CWE-131). So if the user ever requests MAX_NUM_WIDGETS, there is an out-of-bounds write (CWE-787) when the NULL is assigned. Depending on the environment and compilation settings, this could cause memory corruption."}]}, {"Entries": [{"IntroText": "In this example, the code does not account for the terminating null character, and it writes one byte beyond the end of the buffer."}, {"BodyText": "The first call to strncat() appends up to 20 characters plus a terminating null character to fullname[]. There is plenty of allocated space for this, and there is no weakness associated with this first call. However, the second call to strncat() potentially appends another 20 characters. The code does not account for the terminating null character that is automatically added by strncat(). This terminating null character would be written one byte beyond the end of the fullname[] buffer. Therefore an off-by-one error exists with the second strncat() call, as the third argument should be 19."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar firstname[20];\n\tchar lastname[20];\n\tchar fullname[40];\n\tfullname[0] = '\\0';\n\tstrncat(fullname, firstname, 20);\n\tstrncat(fullname, lastname, 20);\n```"}, {"BodyText": "When using a function like strncat() one must leave a free byte at the end of the buffer for a terminating null character, thus avoiding the off-by-one weakness. Additionally, the last argument to strncat() is the number of characters to append, which must be less than the remaining space in the buffer. Be careful not to just use the total size of the buffer."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n\tchar firstname[20];\n\tchar lastname[20];\n\tchar fullname[40];\n\tfullname[0] = '\\0';\n\tstrncat(fullname, firstname, sizeof(fullname)-strlen(fullname)-1);\n\tstrncat(fullname, lastname, sizeof(fullname)-strlen(fullname)-1);\n```"}]}, {"Entries": [{"IntroText": "The Off-by-one error can also be manifested when reading characters from a character array within a for loop that has an incorrect continuation condition."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t#define PATH_SIZE 60\n\tchar filename[PATH_SIZE];\n\tfor(i=0; i<=PATH_SIZE; i++) {\n\t\t\tchar c = getc();\n\t\t\tif (c == 'EOF') {\n\t\t\t\tfilename[i] = '\\0';\n\t\t\t}\n\t\t\tfilename[i] = getc();\n\t}\n```"}, {"BodyText": "In this case, the correct continuation condition is shown below."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n\tfor(i=0; i<PATH_SIZE; i++) {\n\t...\n```"}]}, {"Entries": [{"IntroText": "As another example the Off-by-one error can occur when using the sprintf library function to copy a string variable to a formatted string variable and the original string variable comes from an untrusted source. As in the following example where a local function, setFilename is used to store the value of a filename to a database but first uses sprintf to format the filename. The setFilename function includes an input parameter with the name of the file that is used as the copy source in the sprintf function. The sprintf function will copy the file name to a char array of size 20 and specifies the format of the new variable as 16 characters followed by the file extension .dat."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint setFilename(char *filename) {\n\t\tchar name[20];\n\t\tsprintf(name, \"%16s.dat\", filename);\n\t\tint success = saveFormattedFilenameToDB(name);\n\t\treturn success;\n\t}\n```"}, {"BodyText": "However this will cause an Off-by-one error if the original filename is exactly 16 characters or larger because the format of 16 characters with the file extension is exactly 20 characters and does not take into account the required null terminator that will be placed at the end of the string."}]}], "ObservedExamples": [{"Reference": "CVE-2003-0252", "Description": "Off-by-one error allows remote attackers to cause a denial of service and possibly execute arbitrary code via requests that do not contain newlines.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0252"}, {"Reference": "CVE-2001-1391", "Description": "Off-by-one vulnerability in driver allows users to modify kernel memory.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1391"}, {"Reference": "CVE-2002-0083", "Description": "Off-by-one error allows local users or remote malicious servers to gain privileges.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0083"}, {"Reference": "CVE-2002-0653", "Description": "Off-by-one buffer overflow in function usd by server allows local users to execute arbitrary code as the server user via .htaccess files with long entries.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0653"}, {"Reference": "CVE-2002-0844", "Description": "Off-by-one buffer overflow in version control system allows local users to execute arbitrary code.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0844"}, {"Reference": "CVE-1999-1568", "Description": "Off-by-one error in FTP server allows a remote attacker to cause a denial of service (crash) via a long PORT command.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1568"}, {"Reference": "CVE-2004-0346", "Description": "Off-by-one buffer overflow in FTP server allows local users to gain privileges via a 1024 byte RETR command.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0346"}, {"Reference": "CVE-2004-0005", "Description": "Multiple buffer overflows in chat client allow remote attackers to cause a denial of service and possibly execute arbitrary code.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0005"}, {"Reference": "CVE-2003-0356", "Description": "Multiple off-by-one vulnerabilities in product allow remote attackers to cause a denial of service and possibly execute arbitrary code.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0356"}, {"Reference": "CVE-2001-1496", "Description": "Off-by-one buffer overflow in server allows remote attackers to cause a denial of service and possibly execute arbitrary code.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1496"}, {"Reference": "CVE-2004-0342", "Description": "This is an interesting example that might not be an off-by-one.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0342"}, {"Reference": "CVE-2001-0609", "Description": "An off-by-one enables a terminating null to be overwritten, which causes 2 strings to be merged and enable a format string.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0609"}, {"Reference": "CVE-2002-1745", "Description": "Off-by-one error allows source code disclosure of files with 4 letter extensions that match an accepted 3-letter extension.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1745"}, {"Reference": "CVE-2002-1816", "Description": "Off-by-one buffer overflow.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1816"}, {"Reference": "CVE-2002-1721", "Description": "Off-by-one error causes an snprintf call to overwrite a critical internal variable with a null value.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1721"}, {"Reference": "CVE-2003-0466", "Description": "Off-by-one error in function used in many products leads to a buffer overflow during pathname management, as demonstrated using multiple commands in an FTP server.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0466"}, {"Reference": "CVE-2003-0625", "Description": "Off-by-one error allows read of sensitive memory via a malformed request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0625"}, {"Reference": "CVE-2006-4574", "Description": "Chain: security monitoring product has an off-by-one error that leads to unexpected length values, triggering an assertion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4574"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This is not always a buffer overflow. For example, an off-by-one error could be a factor in a partial comparison, a read from the wrong memory location, an incorrect conditional, etc."}], "Top25Examples": [{"Reference": "CVE-2021-21938", "Description": "A heap-based buffer overflow vulnerability exists in the Palette box parser functionality of Accusoft ImageGear 19.10. A specially-crafted file can lead to code execution. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2021-3999", "Description": "A flaw was found in glibc. An off-by-one buffer overflow and underflow in getcwd() may lead to memory corruption when the size of the buffer is exactly 1. A local attacker who can control the input buffer and size passed to getcwd() in a setuid program could use this flaw to potentially execute arbitrary code and escalate their privileges on the system."}, {"Reference": "CVE-2021-46848", "Description": "GNU Libtasn1 before 4.19.0 has an ETYPE_OK off-by-one array size check that affects asn1_encode_simple_der."}, {"Reference": "CVE-2022-34970", "Description": "Crow before 1.0+4 has a heap-based buffer overflow via the function qs_parse in query_string.h. On successful exploitation this vulnerability allows attackers to remotely execute arbitrary code in the context of the vulnerable service."}, {"Reference": "CVE-2022-3821", "Description": "An off-by-one Error issue was discovered in Systemd in format_timespan() function of time-util.c. An attacker could supply specific values for time and accuracy that leads to buffer overrun in format_timespan(), leading to a Denial of Service."}, {"Reference": "CVE-2022-39274", "Description": "LoRaMac-node is a reference implementation and documentation of a LoRa network node. Versions of LoRaMac-node prior to 4.7.0 are vulnerable to a buffer overflow. Improper size validation of the incoming radio frames can lead to an 65280-byte out-of-bounds write. The function `ProcessRadioRxDone` implicitly expects incoming radio frames to have at least a payload of one byte or more. An empty payload leads to a 1-byte out-of-bounds read of user controlled content when the payload buffer is reused. This allows an attacker to craft a FRAME_TYPE_PROPRIETARY frame with size -1 which results in an 65280-byte out-of-bounds memcopy likely with partially controlled attacker data. Corrupting a large part if the data section is likely to cause a DoS. If the large out-of-bounds write does not immediately crash the attacker may gain control over the execution due to now controlling large parts of the data section. Users are advised to upgrade either by updating their package or by manually applying the patch commit `e851b079`."}, {"Reference": "CVE-2022-47517", "Description": "An issue was discovered in the libsofia-sip fork in drachtio-server before 0.8.19. It allows remote attackers to cause a denial of service (daemon crash) via a crafted UDP message that causes a url_canonize2 heap-based buffer over-read because of an off-by-one error."}, {"Reference": "CVE-2022-36354", "Description": "A heap out-of-bounds read vulnerability exists in the RLA format parser of OpenImageIO master-branch-9aeece7a and v2.3.19.0. More specifically, in the way run-length encoded byte spans are handled. A malformed RLA file can lead to an out-of-bounds read of heap metadata which can result in sensitive information leak. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2022-24988", "Description": "In galois_2p8 before 0.1.2, PrimitivePolynomialField::new has an off-by-one buffer overflow for a vector."}, {"Reference": "CVE-2022-41916", "Description": "Heimdal is an implementation of ASN.1/DER, PKIX, and Kerberos. Versions prior to 7.7.1 are vulnerable to a denial of service vulnerability in Heimdal's PKI certificate validation library, affecting the KDC (via PKINIT) and kinit (via PKINIT), as well as any third-party applications using Heimdal's libhx509. Users should upgrade to Heimdal 7.7.1 or 7.8. There are no known workarounds for this issue."}, {"Reference": "CVE-2021-3156", "Description": "Sudo before 1.9.5p2 contains an off-by-one error that can result in a heap-based buffer overflow, which allows privilege escalation to root via \"sudoedit -s\" and a command-line argument that ends with a single backslash character."}, {"Reference": "CVE-2022-30155", "Description": "Windows Kernel Denial of Service Vulnerability"}]}
{"ID": "194", "Name": "Unexpected Sign Extension", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product performs an operation on a number that causes it to be sign extended when it is transformed into a larger data type. When the original number is negative, this can produce unexpected values that lead to resultant weaknesses.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "681", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "681", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "681", "ViewID": "1340", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability", "Other"], "Impact": ["Read Memory", "Modify Memory", "Other"], "Note": "When an unexpected sign extension occurs in code that operates directly on memory buffers, such as a size value or a memory index, then it could cause the program to write or read outside the boundaries of the intended buffer. If the numeric value is associated with an application-level resource, such as a quantity or price for a product in an e-commerce site, then the sign extension could produce a value that is much higher (or lower) than the application's allowable range."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Avoid using signed variables if you don't need to represent negative values. When negative values are needed, perform validation after you save those values to larger data types, or before passing them to functions that are expecting unsigned values."}], "DemonstrativeExamples": [{"ID": "DX-23", "Entries": [{"IntroText": "The following code reads a maximum size and performs a sanity check on that size. It then performs a strncpy, assuming it will not exceed the boundaries of the array. While the use of \"short s\" is forced in this particular example, short int's are frequently used within real-world code, such as code that processes structured data."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint GetUntrustedInt () {\n\t\treturn(0x0000FFFF);\n\t}\n\tvoid main (int argc, char **argv) {\n\t\t\tchar path[256];\n\t\t\tchar *input;\n\t\t\tint i;\n\t\t\tshort s;\n\t\t\tunsigned int sz;\n\t\t\ti = GetUntrustedInt();\n\t\t\ts = i;\n\t\t\t/* s is -1 so it passes the safety check - CWE-697 */\n\t\t\tif (s > 256) {\n\t\t\t\tDiePainfully(\"go away!\\n\");\n\t\t\t}\n\t\t\t/* s is sign-extended and saved in sz */\n\t\t\tsz = s;\n\t\t\t/* output: i=65535, s=-1, sz=4294967295 - your mileage may vary */\n\t\t\tprintf(\"i=%d, s=%d, sz=%u\\n\", i, s, sz);\n\t\t\tinput = GetUserInput(\"Enter pathname:\");\n\t\t\t/* strncpy interprets s as unsigned int, so it's treated as MAX_INT\n\t\t\t(CWE-195), enabling buffer overflow (CWE-119) */\n\t\t\tstrncpy(path, input, s);\n\t\t\tpath[255] = '\\0'; /* don't want CWE-170 */\n\t\t\tprintf(\"Path is: %s\\n\", path);\n\t}\n```"}, {"BodyText": "This code first exhibits an example of CWE-839, allowing \"s\" to be a negative number. When the negative short \"s\" is converted to an unsigned integer, it becomes an extremely large positive integer. When this converted integer is used by strncpy() it will lead to a buffer overflow (CWE-119)."}]}], "ObservedExamples": [{"Reference": "CVE-2018-10887", "Description": "Chain: unexpected sign extension (CWE-194) leads to integer overflow (CWE-190), causing an out-of-bounds read (CWE-125)", "Link": "https://www.cve.org/CVERecord?id=CVE-2018-10887"}, {"Reference": "CVE-1999-0234", "Description": "Sign extension error produces -1 value that is treated as a command separator, enabling OS command injection.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0234"}, {"Reference": "CVE-2003-0161", "Description": "Product uses \"char\" type for input character. When char is implemented as a signed type, ASCII value 0xFF (255), a sign extension produces a -1 value that is treated as a program-specific separator value, effectively disabling a length check and leading to a buffer overflow. This is also a multiple interpretation error.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0161"}, {"Reference": "CVE-2007-4988", "Description": "chain: signed short width value in image processor is sign extended during conversion to unsigned int, which leads to integer overflow and heap-based buffer overflow.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-4988"}, {"Reference": "CVE-2006-1834", "Description": "chain: signedness error allows bypass of a length check; later sign extension makes exploitation easier.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-1834"}, {"Reference": "CVE-2005-2753", "Description": "Sign extension when manipulating Pascal-style strings leads to integer overflow and improper memory copy.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2753"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "Sign extension errors can lead to buffer overflows and other memory-based problems. They are also likely to be factors in other weaknesses that are not based on memory operations, but rely on numeric calculation."}, {"Type": "Maintenance", "Note": "This entry is closely associated with signed-to-unsigned conversion errors (CWE-195) and other numeric errors. These relationships need to be more closely examined within CWE."}]}
{"ID": "195", "Name": "Signed to Unsigned Conversion Error", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product uses a signed primitive and performs a cast to an unsigned primitive, which can produce an unexpected value if the value of the signed primitive can not be represented using an unsigned primitive.", "ExtendedDescription": "\n\nIt is dangerous to rely on implicit casts between signed and unsigned numbers because the result can take on an unexpected value and violate assumptions made by the program.\n\n\nOften, functions will return negative values to indicate a failure. When the result of a function is to be used as a size parameter, using these negative return values can have unexpected results. For example, if negative size values are passed to the standard memory copy or allocation functions they will be implicitly cast to a large unsigned value. This may lead to an exploitable buffer overflow or underflow condition.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "681", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "681", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "681", "ViewID": "1340", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "119", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"], "Note": "Conversion between signed and unsigned values can lead to a variety of errors, but from a security standpoint is most commonly associated with integer overflow and buffer overflow vulnerabilities."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "DemonstrativeExamples": [{"ID": "DX-73", "Entries": [{"IntroText": "In this example the variable amount can hold a negative value when it is returned. Because the function is declared to return an unsigned int, amount will be implicitly converted to unsigned."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tunsigned int readdata () {\n\t\tint amount = 0;\n\t\t...\n\t\tif (result == ERROR)\n\t\tamount = -1;\n\t\t...\n\t\treturn amount;\n\t}\n```"}, {"BodyText": "If the error condition in the code above is met, then the return value of readdata() will be 4,294,967,295 on a system that uses 32-bit integers."}]}, {"ID": "DX-74", "Entries": [{"IntroText": "In this example, depending on the return value of accecssmainframe(), the variable amount can hold a negative value when it is returned. Because the function is declared to return an unsigned value, amount will be implicitly cast to an unsigned number."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tunsigned int readdata () {\n\t\tint amount = 0;\n\t\t...\n\t\tamount = accessmainframe();\n\t\t...\n\t\treturn amount;\n\t}\n```"}, {"BodyText": "If the return value of accessmainframe() is -1, then the return value of readdata() will be 4,294,967,295 on a system that uses 32-bit integers."}]}, {"ID": "DX-21", "Entries": [{"IntroText": "The following code is intended to read an incoming packet from a socket and extract one or more headers."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tDataPacket *packet;\n\tint numHeaders;\n\tPacketHeader *headers;\n\tsock=AcceptSocketConnection();\n\tReadPacket(packet, sock);\n\tnumHeaders =packet->headers;\n\tif (numHeaders > 100) {\n\t\tExitError(\"too many headers!\");\n\t}\n\theaders = malloc(numHeaders * sizeof(PacketHeader);\n\tParsePacketHeaders(packet, headers);\n```"}, {"BodyText": "The code performs a check to make sure that the packet does not contain too many headers. However, numHeaders is defined as a signed int, so it could be negative. If the incoming packet specifies a value such as -3, then the malloc calculation will generate a negative number (say, -300 if each header can be a maximum of 100 bytes). When this result is provided to malloc(), it is first converted to a size_t type. This conversion then produces a large value such as 4294966996, which may cause malloc() to fail or to allocate an extremely large amount of memory (CWE-195). With the appropriate negative numbers, an attacker could trick malloc() into using a very small positive number, which then allocates a buffer that is much smaller than expected, potentially leading to a buffer overflow."}]}, {"Entries": [{"IntroText": "This example processes user input comprised of a series of variable-length structures. The first 2 bytes of input dictate the size of the structure to be processed."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar* processNext(char* strm) {\n\t\tchar buf[512];\n\t\tshort len = *(short*) strm;\n\t\tstrm += sizeof(len);\n\t\tif (len <= 512) {\n\t\t\tmemcpy(buf, strm, len);\n\t\t\tprocess(buf);\n\t\t\treturn strm + len;\n\t\t}\n\t\telse {\n\t\t\treturn -1;\n\t\t}\n\t}\n```"}, {"BodyText": "The programmer has set an upper bound on the structure size: if it is larger than 512, the input will not be processed. The problem is that len is a signed short, so the check against the maximum structure length is done with signed values, but len is converted to an unsigned integer for the call to memcpy() and the negative bit will be extended to result in a huge value for the unsigned integer. If len is negative, then it will appear that the structure has an appropriate size (the if branch will be taken), but the amount of memory copied by memcpy() will be quite large, and the attacker will be able to overflow the stack with data in strm."}]}, {"ID": "DX-114", "Entries": [{"IntroText": "In the following example, it is possible to request that memcpy move a much larger segment of memory than assumed:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint returnChunkSize(void *) {\n```\n/* if chunk info is valid, return the size of usable memory,* \n\t\t\t\n\t\t\t\n\t\t\t ** else, return -1 to indicate an error* \n\t\t\t\n\t\t\t\n\t\t\t **/* \n\t\t\t...}\n\tint main() {\n\t```\n\t\t...\n\t\tmemcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1));\n\t\t...\n\t}\n```"}, {"BodyText": "If returnChunkSize() happens to encounter an error it will return -1. Notice that the return value is not checked before the memcpy operation (CWE-252), so -1 can be passed as the size argument to memcpy() (CWE-805). Because memcpy() assumes that the value is unsigned, it will be interpreted as MAXINT-1 (CWE-195), and therefore will copy far more memory than is likely available to the destination buffer (CWE-787, CWE-788)."}]}, {"ID": "DX-138", "Entries": [{"IntroText": "This example shows a typical attempt to parse a string with an error resulting from a difference in assumptions between the caller to a function and the function's action."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "int proc_msg(char *s, int msg_len)\n {\n\n```\n```\n// Note space at the end of the string - assume all strings have preamble with space* \n\t int pre_len = sizeof(\"preamble: \");\n\t char buf[pre_len - msg_len];\n\t\n\t *... Do processing here if we get this far*  }\n char *s = \"preamble: message\\n\";\n char *sl = strchr(s, ':'); // Number of characters up to ':' (not including space)\n int jnklen = sl == NULL ? 0 : sl - s; // If undefined pointer, use zero length\n int ret_val = proc_msg (\"s\", jnklen); // Violate assumption of preamble length, end up with negative value, blow out stack"}, {"BodyText": "The buffer length ends up being -1, resulting in a blown out stack. The space character after the colon is included in the function calculation, but not in the caller's calculation. This, unfortunately, is not usually so obvious but exists in an obtuse series of calculations."}]}], "ObservedExamples": [{"Reference": "CVE-2007-4268", "Description": "Chain: integer signedness error (CWE-195) passes signed comparison, leading to heap overflow (CWE-122)", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-4268"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-27882", "Description": "slaacd in OpenBSD 6.9 and 7.0 before 2022-03-22 has an integer signedness error and resultant heap-based buffer overflow triggerable by a crafted IPv6 router advertisement. NOTE: privilege separation and pledge can prevent exploitation."}, {"Reference": "CVE-2022-43663", "Description": "An integer conversion vulnerability exists in the SORBAx64.dll RecvPacket functionality of WellinTech KingHistorian 35.01.00.05. A specially crafted network packet can lead to a buffer overflow. An attacker can send a malicious packet to trigger this vulnerability."}]}
{"ID": "196", "Name": "Unsigned to Signed Conversion Error", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive.", "ExtendedDescription": "Although less frequent an issue than signed-to-unsigned conversion, unsigned-to-signed conversion can be the perfect precursor to dangerous buffer underwrite conditions that allow attackers to move down the stack where they otherwise might not have access in a normal buffer overflow condition. Buffer underwrites occur frequently when large unsigned values are cast to signed values, and then used as indexes into a buffer or for pointer arithmetic.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "681", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "681", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "681", "ViewID": "1340", "Ordinal": "Primary"}, {"Nature": "CanAlsoBe", "CweID": "124", "ViewID": "1000"}, {"Nature": "CanAlsoBe", "CweID": "120", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "Incorrect sign conversions generally lead to undefined behavior, and therefore crashes."}, {"Scope": ["Integrity"], "Impact": ["Modify Memory"], "Note": "If a poor cast lead to a buffer overflow or similar condition, data integrity may be affected."}, {"Scope": ["Integrity", "Confidentiality", "Availability", "Access Control"], "Impact": ["Execute Unauthorized Code or Commands", "Bypass Protection Mechanism"], "Note": "Improper signed-to-unsigned conversions without proper checking can sometimes trigger buffer overflows which can be used to execute arbitrary code. This is usually outside the scope of a program's implicit security policy."}], "PotentialMitigations": [{"Phase": ["Requirements"], "Description": "Choose a language which is not subject to these casting flaws."}, {"Phase": ["Architecture and Design"], "Description": "Design object accessor functions to implicitly check values for valid sizes. Ensure that all functions which will be used as a size are checked previous to use as a size. If the language permits, throw exceptions rather than using in-band errors."}, {"Phase": ["Implementation"], "Description": "Error check the return values of all functions. Be aware of implicit casts made, and use unsigned variables for sizes if at all possible."}], "RelatedAttackPatterns": ["92"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "197", "Name": "Numeric Truncation Error", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "Truncation errors occur when a primitive is cast to a primitive of a smaller size and data is lost in the conversion.", "ExtendedDescription": "When a primitive is cast to a smaller primitive, the high order bits of the large value are lost in the conversion, potentially resulting in an unexpected value that is not equal to the original value. This value may be required as an index into a buffer, a loop iterator, or simply necessary state data. In any case, the value cannot be trusted and the system will be in an undefined state. While this method may be employed viably to isolate the low bits of a value, this usage is rare, and truncation usually implies that an implementation error has occurred.", "LikelihoodOfExploit": "Low", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "681", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "681", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "681", "ViewID": "1340", "Ordinal": "Primary"}, {"Nature": "CanAlsoBe", "CweID": "195", "ViewID": "1000"}, {"Nature": "CanAlsoBe", "CweID": "196", "ViewID": "1000"}, {"Nature": "CanAlsoBe", "CweID": "192", "ViewID": "1000"}, {"Nature": "CanAlsoBe", "CweID": "194", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C#", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Modify Memory"], "Note": "The true value of the data is lost and corrupted data is used."}], "DetectionMethods": [{"DetectionMethodID": "DM-13", "Method": "Fuzzing", "Description": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.", "Effectiveness": "High"}, {"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Ensure that no casts, implicit or explicit, take place that move from a larger size primitive or a smaller size primitive."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This example, while not exploitable, shows the possible mangling of values associated with truncation errors:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint intPrimitive;\n\tshort shortPrimitive;\n\tintPrimitive = (int)(~((int)0) ^ (1 << (sizeof(int)*8-1)));\n\tshortPrimitive = intPrimitive;\n\tprintf(\"Int MAXINT: %d\\nShort MAXINT: %d\\n\", intPrimitive, shortPrimitive);\n```"}, {"BodyText": "The above code, when compiled and run on certain systems, returns the following output:"}, {"Nature": "Result", "ExampleCode": "```\n\tInt MAXINT: 2147483647\n\tShort MAXINT: -1\n```"}, {"BodyText": "This problem may be exploitable when the truncated value is used as an array index, which can happen implicitly when 64-bit values are used as indexes, as they are truncated to 32 bits."}]}, {"Entries": [{"IntroText": "In the following Java example, the method updateSalesForProduct is part of a business application class that updates the sales information for a particular product. The method receives as arguments the product ID and the integer amount sold. The product ID is used to retrieve the total product count from an inventory object which returns the count as an integer. Before calling the method of the sales object to update the sales count the integer values are converted to The primitive type short since the method requires short type for the method arguments."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t...\n```\n// update sales database for number of product sold with product ID* \n\tpublic void updateSalesForProduct(String productID, int amountSold) {\n\t```\n```\n// get the total number of products in inventory database* \n\t\t\tint productCount = inventory.getProductCount(productID);\n\t\t\t\n\t\t\t *// convert integer values to short, the method for the* \n\t\t\t\n\t\t\t\n\t\t\t *// sales object requires the parameters to be of type short* \n\t\t\tshort count = (short) productCount;\n\t\t\tshort sold = (short) amountSold;\n\t\t\t\n\t\t\t *// update sales database for product* \n\t\t\tsales.updateSalesCount(productID, count, sold);}\n\t..."}, {"BodyText": "However, a numeric truncation error can occur if the integer values are higher than the maximum value allowed for the primitive type short. This can cause unexpected results or loss or corruption of data. In this case the sales database may be corrupted with incorrect data. Explicit casting from a from a larger size primitive type to a smaller size primitive type should be prevented. The following example an if statement is added to validate that the integer values less than the maximum value for the primitive type short before the explicit cast and the call to the sales method."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\t...\n```\n// update sales database for number of product sold with product ID* \n\tpublic void updateSalesForProduct(String productID, int amountSold) {\n\t```\n```\n// get the total number of products in inventory database* \n\t\t\tint productCount = inventory.getProductCount(productID);\n\t\t\t\n\t\t\t *// make sure that integer numbers are not greater than* \n\t\t\t\n\t\t\t\n\t\t\t *// maximum value for type short before converting* \n\t\t\tif ((productCount < Short.MAX_VALUE) && (amountSold < Short.MAX_VALUE)) {\n\t\t\t```\n```\n// convert integer values to short, the method for the* \n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t *// sales object requires the parameters to be of type short* \n\t\t\t\t\tshort count = (short) productCount;\n\t\t\t\t\tshort sold = (short) amountSold;\n\t\t\t\t\t\n\t\t\t\t\t *// update sales database for product* \n\t\t\t\t\tsales.updateSalesCount(productID, count, sold);\n\t\t\telse {\n\t\t\t\n\t\t\t *// throw exception or perform other processing* \n\t\t\t\n\t\t\t```\n\t\t\t\t...\n\t\t\t}\n\t}\n\t...\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2020-17087", "Description": "Chain: integer truncation (CWE-197) causes small buffer allocation (CWE-131) leading to out-of-bounds write (CWE-787) in kernel pool, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-17087"}, {"Reference": "CVE-2009-0231", "Description": "Integer truncation of length value leads to heap-based buffer overflow.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0231"}, {"Reference": "CVE-2008-3282", "Description": "Size of a particular type changes for 64-bit platforms, leading to an integer truncation in document processor causes incorrect index to be generated.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3282"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "This weakness has traditionally been under-studied and under-reported, although vulnerabilities in popular software have been published in 2008 and 2009."}], "Top25Examples": [{"Reference": "CVE-2022-34680", "Description": "NVIDIA GPU Display Driver for Linux contains a vulnerability in the kernel mode layer handler, where an integer truncation can lead to an out-of-bounds read, which may lead to denial of service."}, {"Reference": "CVE-2022-41873", "Description": "Contiki-NG is an open-source, cross-platform operating system for Next-Generation IoT devices. Versions prior to 4.9 are vulnerable to an Out-of-bounds read. While processing the L2CAP protocol, the Bluetooth Low Energy stack of Contiki-NG needs to map an incoming channel ID to its metadata structure. While looking up the corresponding channel structure in get_channel_for_cid (in os/net/mac/ble/ble-l2cap.c), a bounds check is performed on the incoming channel ID, which is meant to ensure that the channel ID does not exceed the maximum number of supported channels.However, an integer truncation issue leads to only the lowest byte of the channel ID to be checked, which leads to an incomplete out-of-bounds check. A crafted channel ID leads to out-of-bounds memory to be read and written with attacker-controlled data. The vulnerability has been patched in the \"develop\" branch of Contiki-NG, and will be included in release 4.9. As a workaround, Users can apply the patch in Contiki-NG pull request 2081 on GitHub."}, {"Reference": "CVE-2022-42324", "Description": "Oxenstored 32->31 bit integer truncation issues Integers in Ocaml are 63 or 31 bits of signed precision. The Ocaml Xenbus library takes a C uint32_t out of the ring and casts it directly to an Ocaml integer. In 64-bit Ocaml builds this is fine, but in 32-bit builds, it truncates off the most significant bit, and then creates unsigned/signed confusion in the remainder. This in turn can feed a negative value into logic not expecting a negative value, resulting in unexpected exceptions being thrown. The unexpected exception is not handled suitably, creating a busy-loop trying (and failing) to take the bad packet out of the xenstore ring."}, {"Reference": "CVE-2022-34169", "Description": "The Apache Xalan Java XSLT library is vulnerable to an integer truncation issue when processing malicious XSLT stylesheets. This can be used to corrupt Java class files generated by the internal XSLTC compiler and execute arbitrary Java bytecode. Users are recommended to update to version 2.7.3 or later. Note: Java runtimes (such as OpenJDK) include repackaged copies of Xalan."}]}
{"ID": "198", "Name": "Use of Incorrect Byte Ordering", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product receives input from an upstream component, but it does not account for byte ordering (e.g. big-endian and little-endian) when processing the input, causing an incorrect number or value to be used.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "188", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "DetectionMethods": [{"Method": "Black Box", "Description": "Because byte ordering bugs are usually very noticeable even with normal inputs, this bug is more likely to occur in rarely triggered error conditions, making them difficult to detect using black box methods."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "Under-reported."}]}
{"ID": "20", "Name": "Improper Input Validation", "Abstraction": "Class", "Structure": "Simple", "Status": "Stable", "Description": "The product receives input or data, but it does\n        not validate or incorrectly validates that the input has the\n        properties that are required to process the data safely and\n        correctly.", "ExtendedDescription": "\n\nInput validation is a frequently-used technique for checking potentially dangerous inputs in order to ensure that the inputs are safe for processing within the code, or when communicating with other components. When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.\n\n\nInput validation is not the only technique for processing input, however. Other techniques attempt to transform potentially-dangerous input into something safe, such as filtering (CWE-790) - which attempts to remove dangerous inputs - or encoding/escaping (CWE-116), which attempts to ensure that the input is not misinterpreted when it is included in output to another component. Other techniques exist as well (see CWE-138 for more examples.)\n\n\nInput validation can be applied to:\n\n\n  - raw data - strings, numbers, parameters, file contents, etc.\n\n  - metadata - information about the raw data, such as headers or size\n\nData can be simple or structured. Structured data can be composed of many nested layers, composed of combinations of metadata and raw data, with other simple or structured data.\n\nMany properties of raw data or metadata may need to be validated upon entry into the code, such as:\n\n\n  - specified quantities such as size, length, frequency, price, rate, number of operations, time, etc.\n\n  - implied or derived quantities, such as the actual size of a file instead of a specified size\n\n  - indexes, offsets, or positions into more complex data structures\n\n  - symbolic keys or other elements into hash tables, associative arrays, etc.\n\n  - well-formedness, i.e. syntactic correctness - compliance with expected syntax \n\n  - lexical token correctness - compliance with rules for what is treated as a token\n\n  - specified or derived type - the actual type of the input (or what the input appears to be)\n\n  - consistency - between individual data elements, between raw data and metadata, between references, etc.\n\n  - conformance to domain-specific rules, e.g. business logic \n\n  - equivalence - ensuring that equivalent inputs are treated the same\n\n  - authenticity, ownership, or other attestations about the input, e.g. a cryptographic signature to prove the source of the data\n\nImplied or derived properties of data must often be calculated or inferred by the code itself. Errors in deriving properties may be considered a contributing factor to improper input validation. \n\nNote that \"input validation\" has very different meanings to different people, or within different classification schemes. Caution must be used when referencing this CWE entry or mapping to it. For example, some weaknesses might involve inadvertently giving control to an attacker over an input when they should not be able to provide an input at all, but sometimes this is referred to as input validation.\n\n\nFinally, it is important to emphasize that the distinctions between input validation and output escaping are often blurred, and developers must be careful to understand the difference, including how input validation is not always sufficient to prevent vulnerabilities, especially when less stringent data types must be supported, such as free-form text. Consider a SQL injection scenario in which a person's last name is inserted into a query. The name \"O'Reilly\" would likely pass the validation step since it is a common last name in the English language. However, this valid name cannot be directly inserted into the database because it contains the \"'\" apostrophe character, which would need to be escaped or otherwise transformed. In this case, removing the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.\n", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "707", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "345", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "22", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "41", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "74", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "119", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "770", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Often"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "\n\nREALIZATION: This weakness is caused during implementation of an architectural security tactic.\n\n\nIf a programmer believes that an attacker cannot modify certain inputs, then the programmer might not perform any input validation at all. For example, in web applications, many programmers believe that cookies and hidden form fields can not be modified from a web browser (CWE-472), although they can be altered using a proxy or a custom program. In a client-server architecture, the programmer might assume that client-side security checks cannot be bypassed, even when a custom client could be written that skips those checks (CWE-602).\n"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart", "DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)"], "Note": "An attacker could provide unexpected values and cause a program crash or excessive consumption of resources, such as memory and CPU."}, {"Scope": ["Confidentiality"], "Impact": ["Read Memory", "Read Files or Directories"], "Note": "An attacker could read confidential data if they are able to control resource references."}, {"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Modify Memory", "Execute Unauthorized Code or Commands"], "Note": "An attacker could use malicious input to modify data or possibly alter control flow in unexpected ways, including arbitrary command execution."}], "DetectionMethods": [{"DetectionMethodID": "DM-3", "Method": "Automated Static Analysis", "Description": "\n\nSome instances of improper input validation can be detected using automated static analysis.\n\n\nA static analysis tool might allow the user to specify which application-specific methods or functions perform input validation; the tool might also have built-in knowledge of validation frameworks such as Struts. The tool may then suppress or de-prioritize any associated warnings. This allows the analyst to focus on areas of the software in which input validation does not appear to be present.\n\n\nExcept in the cases described in the previous paragraph, automated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes.\n"}, {"DetectionMethodID": "DM-4", "Method": "Manual Static Analysis", "Description": "When custom input validation is required, such as when enforcing business rules, manual analysis is necessary to ensure that the validation is properly implemented."}, {"DetectionMethodID": "DM-5", "Method": "Fuzzing", "Description": "Fuzzing techniques can be useful for detecting input validation errors. When unexpected inputs are provided to the software, the software should not crash or otherwise become unstable, and it should generate application-controlled error messages. If exceptions or interpreter-generated error messages occur, this indicates that the input was not detected and handled within the application logic itself."}, {"Method": "Automated Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis\n\t\tBinary Weakness Analysis - including disassembler + source code weakness analysis", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Automated Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tWeb Application Scanner\n\t\tWeb Services Scanner\n\t\tDatabase Scanners", "Effectiveness": "High"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tHost Application Interface Scanner\n\t\tMonitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious", "Effectiveness": "High"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source\n\t\tManual Source Code Review (not inspections)", "Effectiveness": "High"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer", "Effectiveness": "High"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tAttack Modeling", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Strategy": "Attack Surface Reduction", "Description": "Consider using language-theoretic security (LangSec) techniques that characterize inputs using a formal language and build \"recognizers\" for that language. This effectively requires parsing to be a distinct layer that effectively enforces a boundary between raw input and internal data representations, instead of allowing parser code to be scattered throughout the program, where it could be subject to errors or inconsistencies that create weaknesses. [REF-1109] [REF-1110] [REF-1111]"}, {"MitigationID": "MIT-7", "Phase": ["Architecture and Design"], "Strategy": "Libraries or Frameworks", "Description": "Use an input validation framework such as Struts or the OWASP ESAPI Validation API. Note that using a framework does not automatically address all input validation problems; be mindful of weaknesses that could arise from misusing the framework itself (CWE-1173)."}, {"MitigationID": "MIT-6", "Phase": ["Architecture and Design", "Implementation"], "Strategy": "Attack Surface Reduction", "Description": "Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls."}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n", "Effectiveness": "High"}, {"Phase": ["Architecture and Design"], "Description": "\n\nFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.\n\n\nEven though client-side checks provide minimal benefits with respect to server-side security, they are still useful. First, they can support intrusion detection. If the server receives input that should have been rejected by the client, then it may be an indication of an attack. Second, client-side error-checking can provide helpful feedback to the user about the expectations for valid input. Third, there may be a reduction in server-side processing time for accidental input errors, although this is typically a small savings.\n"}, {"Phase": ["Implementation"], "Description": "When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined."}, {"MitigationID": "MIT-35", "Phase": ["Implementation"], "Description": "Be especially careful to validate all input when invoking code that crosses language boundaries, such as from an interpreted language to native code. This could create an unexpected interaction between the language boundaries. Ensure that you are not violating any of the expectations of the language with which you are interfacing. For example, even though Java may not be susceptible to buffer overflows, providing a large argument in a call to native code might trigger an overflow."}, {"Phase": ["Implementation"], "Description": "Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained."}, {"Phase": ["Implementation"], "Description": "\n\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.\n\n\nConsider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.\n"}, {"Phase": ["Implementation"], "Description": "When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so."}], "DemonstrativeExamples": [{"ID": "DX-135", "Entries": [{"IntroText": "This example demonstrates a shopping interaction in which the user is free to specify the quantity of items to be purchased and a total is calculated."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t...\n\tpublic static final double price = 20.00;\n\tint quantity = currentUser.getAttribute(\"quantity\");\n\tdouble total = price * quantity;\n\tchargeUser(total);\n\t...\n```"}, {"BodyText": "The user has no control over the price variable, however the code does not prevent a negative value from being specified for quantity. If an attacker were to provide a negative value, then the user would have their account credited instead of debited."}]}, {"ID": "DX-136", "Entries": [{"IntroText": "This example asks the user for a height and width of an m X n game board with a maximum dimension of 100 squares."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t...\n\t#define MAX_DIM 100\n\t...\n```\n/* board dimensions */* \n\t\n\tint m,n, error;\n\tboard_square_t *board;\n\tprintf(\"Please specify the board height: \\n\");\n\terror = scanf(\"%d\", &m);\n\tif ( EOF == error ){\n\t```\n\t\tdie(\"No integer passed: Die evil hacker!\\n\");\n\t}\n\tprintf(\"Please specify the board width: \\n\");\n\terror = scanf(\"%d\", &n);\n\tif ( EOF == error ){\n\t\tdie(\"No integer passed: Die evil hacker!\\n\");\n\t}\n\tif ( m > MAX_DIM || n > MAX_DIM ) {\n\t\tdie(\"Value too large: Die evil hacker!\\n\");\n\t}\n\tboard = (board_square_t*) malloc( m * n * sizeof(board_square_t));\n\t...\n```"}, {"BodyText": "While this code checks to make sure the user cannot specify large, positive integers and consume too much memory, it does not check for negative values supplied by the user. As a result, an attacker can perform a resource consumption (CWE-400) attack against this program by specifying two, large negative values that will not overflow, resulting in a very large memory allocation (CWE-789) and possibly a system crash. Alternatively, an attacker can provide very large negative values which will cause an integer overflow (CWE-190) and unexpected behavior will follow depending on how the values are treated in the remainder of the program."}]}, {"Entries": [{"IntroText": "The following example shows a PHP application in which the programmer attempts to display a user's birthday and homepage."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\t$birthday = $_GET['birthday'];\n\t$homepage = $_GET['homepage'];\n\techo \"Birthday: $birthday<br>Homepage: <a href=$homepage>click here</a>\"\n```"}, {"BodyText": "The programmer intended for $birthday to be in a date format and $homepage to be a valid URL. However, since the values are derived from an HTTP request, if an attacker can trick a victim into clicking a crafted URL with script tags providing the values for birthday and / or homepage, then the script will run on the client's browser when the web server echoes the content. Notice that even if the programmer were to defend the $birthday variable by restricting input to integers and dashes, it would still be possible for an attacker to provide a string of the form:"}, {"Nature": "Attack", "ExampleCode": "```\n\t2009-01-09--\n```"}, {"BodyText": "If this data were used in a SQL statement, it would treat the remainder of the statement as a comment. The comment could disable other security-related logic in the statement. In this case, encoding combined with input validation would be a more useful protection mechanism."}, {"BodyText": "Furthermore, an XSS (CWE-79) attack or SQL injection (CWE-89) are just a few of the potential consequences when input validation is not used. Depending on the context of the code, CRLF Injection (CWE-93), Argument Injection (CWE-88), or Command Injection (CWE-77) may also be possible."}]}, {"ID": "DX-34", "Entries": [{"IntroText": "The following example takes a user-supplied value to allocate an array of objects and then operates on the array."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tprivate void buildList ( int untrustedListSize ){\n\t\tif ( 0 > untrustedListSize ){\n\t\t\tdie(\"Negative value supplied for list size, die evil hacker!\");\n\t\t}\n\t\tWidget[] list = new Widget [ untrustedListSize ];\n\t\tlist[0] = new Widget();\n\t}\n```"}, {"BodyText": "This example attempts to build a list from a user-specified value, and even checks to ensure a non-negative value is supplied. If, however, a 0 value is provided, the code will build an array of size 0 and then try to store a new Widget in the first location, causing an exception to be thrown."}]}, {"ID": "DX-110", "Entries": [{"IntroText": "This Android application has registered to handle a URL when sent an intent:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n```\n...* \n\tIntentFilter filter = new IntentFilter(\"com.example.URLHandler.openURL\");\n\tMyReceiver receiver = new MyReceiver();\n\tregisterReceiver(receiver, filter);\n\t\n\t *...* \n\t\n\tpublic class UrlHandlerReceiver extends BroadcastReceiver {\n\t```\n\t\t\t@Override\n\t\t\tpublic void onReceive(Context context, Intent intent) {\n\t\t\t\t\tif(\"com.example.URLHandler.openURL\".equals(intent.getAction())) {\n\t\t\t\t\t\tString URL = intent.getStringExtra(\"URLToOpen\");\n\t\t\t\t\t\tint length = URL.length();\n```\n...* \n\t\t\t\t\t}}}"}, {"BodyText": "The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called."}]}], "ObservedExamples": [{"Reference": "CVE-2024-37032", "Description": "Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama", "Link": "https://www.cve.org/CVERecord?id=CVE-2024-37032"}, {"Reference": "CVE-2022-45918", "Description": "Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-45918"}, {"Reference": "CVE-2021-30860", "Description": "Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-30860"}, {"Reference": "CVE-2021-30663", "Description": "Chain: improper input validation (CWE-20) leads to integer overflow (CWE-190) in mobile OS, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-30663"}, {"Reference": "CVE-2021-22205", "Description": "Chain: backslash followed by a newline can bypass a validation step (CWE-20), leading to eval injection (CWE-95), as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-22205"}, {"Reference": "CVE-2021-21220", "Description": "Chain: insufficient input validation (CWE-20) in browser allows heap corruption (CWE-787), as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-21220"}, {"Reference": "CVE-2020-9054", "Description": "Chain: improper input validation (CWE-20) in username parameter, leading to OS command injection (CWE-78), as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-9054"}, {"Reference": "CVE-2020-3452", "Description": "Chain: security product has improper input validation (CWE-20) leading to directory traversal (CWE-22), as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-3452"}, {"Reference": "CVE-2020-3161", "Description": "Improper input validation of HTTP requests in IP phone, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-3161"}, {"Reference": "CVE-2020-3580", "Description": "Chain: improper input validation (CWE-20) in firewall product leads to XSS (CWE-79), as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-3580"}, {"Reference": "CVE-2021-37147", "Description": "Chain: caching proxy server has improper input validation (CWE-20) of headers, allowing HTTP response smuggling (CWE-444) using an \"LF line ending\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-37147"}, {"Reference": "CVE-2008-5305", "Description": "Eval injection in Perl program using an ID that should only contain hyphens and numbers.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5305"}, {"Reference": "CVE-2008-2223", "Description": "SQL injection through an ID that was supposed to be numeric.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2223"}, {"Reference": "CVE-2008-3477", "Description": "lack of input validation in spreadsheet program leads to buffer overflows, integer overflows, array index errors, and memory corruption.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3477"}, {"Reference": "CVE-2008-3843", "Description": "insufficient validation enables XSS", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3843"}, {"Reference": "CVE-2008-3174", "Description": "driver in security product allows code execution due to insufficient validation", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3174"}, {"Reference": "CVE-2007-3409", "Description": "infinite loop from DNS packet with a label that points to itself", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-3409"}, {"Reference": "CVE-2006-6870", "Description": "infinite loop from DNS packet with a label that points to itself", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6870"}, {"Reference": "CVE-2008-1303", "Description": "missing parameter leads to crash", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1303"}, {"Reference": "CVE-2007-5893", "Description": "HTTP request with missing protocol version number leads to crash", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-5893"}, {"Reference": "CVE-2006-6658", "Description": "request with missing parameters leads to information exposure", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6658"}, {"Reference": "CVE-2008-4114", "Description": "system crash with offset value that is inconsistent with packet size", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4114"}, {"Reference": "CVE-2006-3790", "Description": "size field that is inconsistent with packet size leads to buffer over-read", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-3790"}, {"Reference": "CVE-2008-2309", "Description": "product uses a denylist to identify potentially dangerous content, allowing attacker to bypass a warning", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2309"}, {"Reference": "CVE-2008-3494", "Description": "security bypass via an extra header", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3494"}, {"Reference": "CVE-2008-3571", "Description": "empty packet triggers reboot", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3571"}, {"Reference": "CVE-2006-5525", "Description": "incomplete denylist allows SQL injection", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-5525"}, {"Reference": "CVE-2008-1284", "Description": "NUL byte in theme name causes directory traversal impact to be worse", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1284"}, {"Reference": "CVE-2008-0600", "Description": "kernel does not validate an incoming pointer before dereferencing it", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0600"}, {"Reference": "CVE-2008-1738", "Description": "anti-virus product has insufficient input validation of hooked SSDT functions, allowing code execution", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1738"}, {"Reference": "CVE-2008-1737", "Description": "anti-virus product allows DoS via zero-length field", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1737"}, {"Reference": "CVE-2008-3464", "Description": "driver does not validate input from userland to the kernel", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3464"}, {"Reference": "CVE-2008-2252", "Description": "kernel does not validate parameters sent in from userland, allowing code execution", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2252"}, {"Reference": "CVE-2008-2374", "Description": "lack of validation of string length fields allows memory consumption or buffer over-read", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2374"}, {"Reference": "CVE-2008-1440", "Description": "lack of validation of length field leads to infinite loop", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1440"}, {"Reference": "CVE-2008-1625", "Description": "lack of validation of input to an IOCTL allows code execution", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1625"}, {"Reference": "CVE-2008-3177", "Description": "zero-length attachment causes crash", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3177"}, {"Reference": "CVE-2007-2442", "Description": "zero-length input causes free of uninitialized pointer", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-2442"}, {"Reference": "CVE-2008-5563", "Description": "crash via a malformed frame structure", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5563"}, {"Reference": "CVE-2008-5285", "Description": "infinite loop from a long SMTP request", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5285"}, {"Reference": "CVE-2008-3812", "Description": "router crashes with a malformed packet", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3812"}, {"Reference": "CVE-2008-3680", "Description": "packet with invalid version number leads to NULL pointer dereference", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3680"}, {"Reference": "CVE-2008-3660", "Description": "crash via multiple \".\" characters in file extension", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3660"}], "RelatedAttackPatterns": ["10", "101", "104", "108", "109", "110", "120", "13", "135", "136", "14", "153", "182", "209", "22", "23", "230", "231", "24", "250", "261", "267", "28", "3", "31", "42", "43", "45", "46", "47", "473", "52", "53", "588", "63", "64", "664", "67", "7", "71", "72", "73", "78", "79", "8", "80", "81", "83", "85", "88", "9"], "MappingNotes": {"Usage": "Discouraged", "Rationale": "CWE-20 is commonly misused in low-information vulnerability reports when lower-level CWEs could be used instead, or when more details about the vulnerability are available [REF-1287]. It is not useful for trend analysis. It is also a level-1 Class (i.e., a child of a Pillar).", "Comments": "Consider lower-level children such as Improper Use of Validation Framework (CWE-1173) or improper validation involving specific types or properties of input such as Specified Quantity (CWE-1284); Specified Index, Position, or Offset (CWE-1285); Syntactic Correctness (CWE-1286); Specified Type (CWE-1287); Consistency within Input (CWE-1288); or Unsafe Equivalence (CWE-1289).", "Reasons": ["Frequent Misuse"], "Suggestions": [{"CweID": "1284", "Comment": "Specified Quantity"}, {"CweID": "1285", "Comment": "Specified Index, Position, or Offset"}, {"CweID": "1286", "Comment": "Syntactic Correctness"}, {"CweID": "1287", "Comment": "Specified Type"}, {"CweID": "1288", "Comment": "Consistency within Input"}, {"CweID": "1289", "Comment": "Unsafe Equivalence"}, {"CweID": "116", "Comment": "Improper Encoding or Escaping of Output"}]}, "Notes": [{"Type": "Relationship", "Note": "\n\nCWE-116 and CWE-20 have a close association because, depending on the nature of the structured message, proper input validation can indirectly prevent special characters from changing the meaning of a structured message. For example, by validating that a numeric ID field should only contain the 0-9 characters, the programmer effectively prevents injection attacks.\n"}, {"Type": "Maintenance", "Note": "As of 2020, this entry is used more often than preferred, and it is a source of frequent confusion. It is being actively modified for CWE 4.1 and subsequent versions."}, {"Type": "Maintenance", "Note": "Concepts such as validation, data transformation, and neutralization are being refined, so relationships between CWE-20 and other entries such as CWE-707 may change in future versions, along with an update to the Vulnerability Theory document."}, {"Type": "Maintenance", "Note": "Input validation - whether missing or incorrect - is such an essential and widespread part of secure development that it is implicit in many different weaknesses. Traditionally, problems such as buffer overflows and XSS have been classified as input validation problems by many security professionals. However, input validation is not necessarily the only protection mechanism available for avoiding such problems, and in some cases it is not even sufficient. The CWE team has begun capturing these subtleties in chains within the Research Concepts view (CWE-1000), but more work is needed."}, {"Type": "Terminology", "Note": "\n\nThe \"input validation\" term is extremely common, but it is used in many different ways. In some cases its usage can obscure the real underlying weakness or otherwise hide chaining and composite relationships.\n\n\nSome people use \"input validation\" as a general term that covers many different neutralization techniques for ensuring that input is appropriate, such as filtering, canonicalization, and escaping. Others use the term in a more narrow context to simply mean \"checking if an input conforms to expectations without changing it.\" CWE uses this more narrow interpretation.\n"}], "Top25Examples": [{"Reference": "CVE-2021-0674", "Description": "In alac decoder, there is a possible out of bounds read due to an incorrect bounds check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06064258; Issue ID: ALPS06064237."}, {"Reference": "CVE-2021-0676", "Description": "In geniezone driver, there is a possible out of bounds read due to an incorrect bounds check. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05863009; Issue ID: ALPS05863009."}, {"Reference": "CVE-2021-0678", "Description": "In apusys, there is a possible out of bounds write due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05672107; Issue ID: ALPS05722511."}, {"Reference": "CVE-2021-0895", "Description": "In apusys, there is a possible out of bounds write due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05672107; Issue ID: ALPS05672003."}, {"Reference": "CVE-2021-0896", "Description": "In apusys, there is a possible out of bounds write due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05672107; Issue ID: ALPS05671206."}, {"Reference": "CVE-2021-0900", "Description": "In apusys, there is a possible out of bounds read due to an incorrect bounds check. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05672107; Issue ID: ALPS05672055."}, {"Reference": "CVE-2021-0902", "Description": "In apusys, there is a possible out of bounds read due to an incorrect bounds check. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05672107; Issue ID: ALPS05656484."}, {"Reference": "CVE-2021-0903", "Description": "In apusys, there is a possible out of bounds write due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05672107; Issue ID: ALPS05656488."}, {"Reference": "CVE-2021-21891", "Description": "A stack-based buffer overflow vulnerability exists in the Web Manager FsBrowseClean functionality of Lantronix PremierWave 2050 8.9.0.0R4 (in QEMU). A specially crafted HTTP request can lead to remote code execution in the vulnerable portion of the branch (deletefile). An attacker can make an authenticated HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-21892", "Description": "A stack-based buffer overflow vulnerability exists in the Web Manager FsUnmount functionality of Lantronix PremierWave 2050 8.9.0.0R4 (in QEMU). A specially crafted HTTP request can lead to remote code execution. An attacker can make an authenticated HTTP request to trigger this vulnerability."}, {"Reference": "CVE-2021-21903", "Description": "A stack-based buffer overflow vulnerability exists in the CMA check_udp_crc function of Garrett Metal Detectors\u2019 iC Module CMA Version 5.0. A specially-crafted packet can lead to a stack-based buffer overflow during a call to strcpy. An attacker can send a malicious packet to trigger this vulnerability."}, {"Reference": "CVE-2021-21905", "Description": "Stack-based buffer overflow vulnerability exists in how the CMA readfile function of Garrett Metal Detectors iC Module CMA Version 5.0 is used at various locations. The Garrett iC Module exposes an authenticated CLI over TCP port 6877. This interface is used by a secondary GUI client, called \u201cCMA Connect\u201d, to interact with the iC Module on behalf of the user. After a client successfully authenticates, they can send plaintext commands to manipulate the device."}, {"Reference": "CVE-2021-23138", "Description": "WECON LeviStudioU Versions 2019-09-21 and prior are vulnerable to a stack-based buffer overflow, which may allow an attacker to remotely execute code."}, {"Reference": "CVE-2021-29568", "Description": "TensorFlow is an end-to-end open source platform for machine learning. An attacker can trigger undefined behavior by binding to null pointer in `tf.raw_ops.ParameterizedTruncatedNormal`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/3f6fe4dfef6f57e768260b48166c27d148f3015f/tensorflow/core/kernels/parameterized_truncated_normal_op.cc#L630) does not validate input arguments before accessing the first element of `shape`. If `shape` argument is empty, then `shape_tensor.flat<T>()` is an empty array. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."}, {"Reference": "CVE-2021-30289", "Description": "Possible buffer overflow due to lack of range check while processing a DIAG command for COEX management in Snapdragon Auto, Snapdragon Compute, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables"}, {"Reference": "CVE-2021-32040", "Description": "It may be possible to have an extremely long aggregation pipeline in conjunction with a specific stage/operator and cause a stack overflow due to the size of the stack frames used by that stage. If an attacker could cause such an aggregation to occur, they could maliciously crash MongoDB in a DoS attack. This vulnerability affects MongoDB Server v4.4 versions prior to and including 4.4.28, MongoDB Server v5.0 versions prior to 5.0.4 and MongoDB Server v4.2 versions prior to 4.2.16. Workaround: >= v4.2.16 users and all v4.4 users can add the --setParameter internalPipelineLengthLimit=50 instead of the default 1000 to mongod at startup to prevent a crash. "}, {"Reference": "CVE-2021-34874", "Description": "This vulnerability allows remote attackers to execute arbitrary code on affected installations of Bentley View 10.15.0.75. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within the processing of 3DS files. The issue results from the lack of proper validation of user-supplied data, which can result in a memory corruption condition. An attacker can leverage this vulnerability to execute code in the context of the current process. Was ZDI-CAN-14736."}, {"Reference": "CVE-2021-34934", "Description": "This vulnerability allows remote attackers to execute arbitrary code on affected installations of Bentley View 10.15.0.75. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within the parsing of JT files. The issue results from the lack of proper validation of user-supplied data, which can result in a memory corruption condition. An attacker can leverage this vulnerability to execute code in the context of the current process. Was ZDI-CAN-14912."}, {"Reference": "CVE-2021-35005", "Description": "This vulnerability allows local attackers to disclose sensitive information on affected installations of TeamViewer. An attacker must first obtain the ability to execute low-privileged code on the target system in order to exploit this vulnerability. The specific flaw exists within the TeamViewer service. The issue results from the lack of proper validation of user-supplied data, which can result in a read past the end of an allocated array. An attacker can leverage this in conjunction with other vulnerabilities to execute arbitrary code in the context of SYSTEM. Was ZDI-CAN-13818."}, {"Reference": "CVE-2021-35098", "Description": "Improper validation of session id in PCM routing process can lead to memory corruption in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables"}, {"Reference": "CVE-2021-35134", "Description": "Due to insufficient validation of ELF headers, an Incorrect Calculation of Buffer Size can occur in Boot leading to memory corruption in Snapdragon Connectivity, Snapdragon Industrial IOT, Snapdragon Mobile"}, {"Reference": "CVE-2021-37404", "Description": "There is a potential heap buffer overflow in Apache Hadoop libhdfs native code. Opening a file path provided by user without validation may result in a denial of service or arbitrary code execution. Users should upgrade to Apache Hadoop 2.10.2, 3.2.3, 3.3.2 or higher."}, {"Reference": "CVE-2021-39623", "Description": "In doRead of SimpleDecodingSource.cpp, there is a possible out of bounds write due to an incorrect bounds check. This could lead to remote escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-9Android ID: A-194105348"}, {"Reference": "CVE-2021-39708", "Description": "In gatt_process_notification of gatt_cl.cc, there is a possible out of bounds write due to an incorrect bounds check. This could lead to remote escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12Android ID: A-206128341"}, {"Reference": "CVE-2021-39805", "Description": "In l2cble_process_sig_cmd of l2c_ble.cc, there is a possible out of bounds read due to a missing bounds check. This could lead to remote information disclosure through Bluetooth with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12 Android-12LAndroid ID: A-212694559"}, {"Reference": "CVE-2021-44016", "Description": "A vulnerability has been identified in JT2Go (All versions < V13.2.0.7), Solid Edge SE2021 (All versions < SE2021MP9), Solid Edge SE2022 (All versions < SE2022MP1), Teamcenter Visualization V13.1 (All versions < V13.1.0.9), Teamcenter Visualization V13.2 (All versions < V13.2.0.7), Teamcenter Visualization V13.3 (All versions < V13.3.0.1). The plmxmlAdapterSE70.dll library is vulnerable to memory corruption condition while parsing specially crafted PAR files. An attacker could leverage this vulnerability to execute code in the context of the current process. (ZDI-CAN-15110)"}, {"Reference": "CVE-2021-44422", "Description": "An Improper Input Validation Vulnerability exists when reading a BMP file using Open Design Alliance Drawings SDK before 2022.12. Crafted data in a BMP file can trigger a write operation past the end of an allocated buffer, or lead to a heap-based buffer overflow. An attacker can leverage this vulnerability to execute code in the context of the current process."}, {"Reference": "CVE-2021-46153", "Description": "A vulnerability has been identified in Simcenter Femap V2020.2 (All versions), Simcenter Femap V2021.1 (All versions). Affected application contains a memory corruption vulnerability while parsing NEU files. This could allow an attacker to execute code in the context of the current process. (ZDI-CAN-14645, ZDI-CAN-15305, ZDI-CAN-15589, ZDI-CAN-15599)"}, {"Reference": "CVE-2021-46154", "Description": "A vulnerability has been identified in Simcenter Femap V2020.2 (All versions), Simcenter Femap V2021.1 (All versions). Affected application contains a stack based buffer overflow vulnerability while parsing NEU files. This could allow an attacker to execute code in the context of the current process. (ZDI-CAN-14646, ZDI-CAN-14679, ZDI-CAN-15084, ZDI-CAN-15304)"}, {"Reference": "CVE-2021-46155", "Description": "A vulnerability has been identified in Simcenter Femap V2020.2 (All versions), Simcenter Femap V2021.1 (All versions). Affected application contains a stack based buffer overflow vulnerability while parsing NEU files. This could allow an attacker to execute code in the context of the current process. (ZDI-CAN-14683, ZDI-CAN-15283, ZDI-CAN-15303, ZDI-CAN-15593)"}, {"Reference": "CVE-2021-46157", "Description": "A vulnerability has been identified in Simcenter Femap V2020.2 (All versions), Simcenter Femap V2021.1 (All versions). Affected application contains a memory corruption vulnerability while parsing NEU files. This could allow an attacker to execute code in the context of the current process. (ZDI-CAN-14757)"}, {"Reference": "CVE-2021-46598", "Description": "This vulnerability allows remote attackers to execute arbitrary code on affected installations of Bentley MicroStation CONNECT 10.16.0.80. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within the parsing of JT files. The issue results from the lack of proper validation of user-supplied data, which can result in a memory corruption condition. An attacker can leverage this vulnerability to execute code in the context of the current process. Was ZDI-CAN-15392."}, {"Reference": "CVE-2021-46768", "Description": "Insufficient input validation in SEV firmware may allow an attacker to perform out-of-bounds memory reads within the ASP boot loader, potentially leading to a denial of service. "}, {"Reference": "CVE-2022-20014", "Description": "In vow driver, there is a possible memory corruption due to improper input validation. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05857308; Issue ID: ALPS05857308."}, {"Reference": "CVE-2022-20038", "Description": "In ccu driver, there is a possible memory corruption due to an incorrect bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06183335; Issue ID: ALPS06183335."}, {"Reference": "CVE-2022-20070", "Description": "In ssmr, there is a possible out of bounds write due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is no needed for exploitation. Patch ID: ALPS06362920; Issue ID: ALPS06362920."}, {"Reference": "CVE-2022-20201", "Description": "In getAppSize of InstalldNativeService.cpp, there is a possible out of bounds read due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12LAndroid ID: A-220733817"}, {"Reference": "CVE-2022-20237", "Description": "In BuildDevIDResponse of miscdatabuilder.cpp, there is a possible out of bounds write due to a missing bounds check. This could lead to remote code execution with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-229621649References: N/A"}, {"Reference": "CVE-2022-20513", "Description": "In decrypt_1_2 of CryptoPlugin.cpp, there is a possible out of bounds read due to a missing bounds check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-244569759"}, {"Reference": "CVE-2022-20569", "Description": "In thermal_cooling_device_stats_update of thermal_sysfs.c, there is a possible out of bounds write due to improper input validation. This could lead to local escalation of privilege in the kernel with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-229258234References: N/A"}, {"Reference": "CVE-2022-20574", "Description": "In sec_sysmmu_info of drm_fw.c, there is a possible out of bounds read due to improper input validation. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-237582191References: N/A"}, {"Reference": "CVE-2022-21765", "Description": "In CCCI, there is a possible out of bounds write due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06641673; Issue ID: ALPS06641673."}, {"Reference": "CVE-2022-21766", "Description": "In CCCI, there is a possible out of bounds write due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06641673; Issue ID: ALPS06641653."}, {"Reference": "CVE-2022-21784", "Description": "In WLAN driver, there is a possible out of bounds write due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06704526; Issue ID: ALPS06704462."}, {"Reference": "CVE-2022-22070", "Description": "Memory corruption in audio due to lack of check of invalid routing address into APR Routing table in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables"}, {"Reference": "CVE-2022-22080", "Description": "Improper validation of backend id in PCM routing process can lead to memory corruption in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music"}, {"Reference": "CVE-2022-22627", "Description": "An out-of-bounds read was addressed with improved bounds checking. This issue is fixed in macOS Big Sur 11.6.5, macOS Monterey 12.3, Security Update 2022-003 Catalina. Processing a maliciously crafted AppleScript binary may result in unexpected application termination or disclosure of process memory."}, {"Reference": "CVE-2022-23095", "Description": "Open Design Alliance Drawings SDK before 2022.12.1 mishandles the loading of JPG files. Unchecked input data from a crafted JPG file leads to memory corruption. An attacker can leverage this vulnerability to execute code in the context of the current process."}, {"Reference": "CVE-2022-24313", "Description": "A CWE-120: Buffer Copy without Checking Size of Input vulnerability exists that could cause a stack-based buffer overflow potentially leading to remote code execution when an attacker sends a specially crafted message. Affected Product: Interactive Graphical SCADA System Data Server (V15.0.0.22020 and prior)"}, {"Reference": "CVE-2022-24949", "Description": "A privilege escalation to root exists in Eternal Terminal prior to version 6.2.0. This is due to the combination of a race condition, buffer overflow, and logic bug all in PipeSocketHandler::listen()."}, {"Reference": "CVE-2022-25654", "Description": "Memory corruption in kernel due to improper input validation while processing ION commands in Snapdragon Auto, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Wearables"}, {"Reference": "CVE-2022-25697", "Description": "Memory corruption in i2c buses due to improper input validation while reading address configuration from i2c driver in Snapdragon Mobile, Snapdragon Wearables"}, {"Reference": "CVE-2022-25698", "Description": "Memory corruption in SPI buses due to improper input validation while reading address configuration from spi buses in Snapdragon Mobile, Snapdragon Wearables"}, {"Reference": "CVE-2022-26447", "Description": "In BT firmware, there is a possible out of bounds write due to a missing bounds check. This could lead to remote code execution with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06784478; Issue ID: ALPS06784478."}, {"Reference": "CVE-2022-26475", "Description": "In wlan, there is a possible out of bounds write due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07310743; Issue ID: ALPS07310743."}, {"Reference": "CVE-2022-26723", "Description": "A memory corruption issue was addressed with improved input validation. This issue is fixed in macOS Monterey 12.4, macOS Big Sur 11.6.6. Mounting a maliciously crafted Samba network share may lead to arbitrary code execution."}, {"Reference": "CVE-2022-26730", "Description": "A memory corruption issue existed in the processing of ICC profiles. This issue was addressed with improved input validation. This issue is fixed in macOS Ventura 13. Processing a maliciously crafted image may lead to arbitrary code execution."}, {"Reference": "CVE-2022-28193", "Description": "NVIDIA Jetson Linux Driver Package contains a vulnerability in the Cboot module tegrabl_cbo.c, where insufficient validation of untrusted data may allow a local attacker with elevated privileges to cause a memory buffer overflow, which may lead to code execution, loss of integrity, limited denial of service, and some impact to confidentiality."}, {"Reference": "CVE-2022-28196", "Description": "NVIDIA Jetson Linux Driver Package contains a vulnerability in the Cboot blob_decompress function, where insufficient validation of untrusted data may allow a local attacker with elevated privileges to cause a memory buffer overflow, which may lead to code execution, limited loss of Integrity, and limited denial of service. The scope of impact can extend to other components."}, {"Reference": "CVE-2022-3045", "Description": "Insufficient validation of untrusted input in V8 in Google Chrome prior to 105.0.5195.52 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-32593", "Description": "In vowe, there is a possible out of bounds write due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07138493; Issue ID: ALPS07138493."}, {"Reference": "CVE-2022-32595", "Description": "In widevine, there is a possible out of bounds read due to an incorrect bounds check. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07446236; Issue ID: ALPS07446236."}, {"Reference": "CVE-2022-32603", "Description": "In gpu drm, there is a possible out of bounds write due to improper input validation. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07310704; Issue ID: ALPS07310704."}, {"Reference": "CVE-2022-32631", "Description": "In Wi-Fi, there is a possible out of bounds write due to improper input validation. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07453613; Issue ID: ALPS07453613."}, {"Reference": "CVE-2022-32632", "Description": "In Wi-Fi, there is a possible out of bounds write due to improper input validation. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07441630; Issue ID: ALPS07441630."}, {"Reference": "CVE-2022-32634", "Description": "In ccci, there is a possible out of bounds write due to improper input validation. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07138646; Issue ID: ALPS07138646."}, {"Reference": "CVE-2022-32635", "Description": "In gps, there is a possible out of bounds write due to a missing bounds check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07573237; Issue ID: ALPS07573237."}, {"Reference": "CVE-2022-32636", "Description": "In keyinstall, there is a possible out of bounds write due to an integer overflow. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07510064; Issue ID: ALPS07510064."}, {"Reference": "CVE-2022-32637", "Description": "In hevc decoder, there is a possible out of bounds write due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07491374; Issue ID: ALPS07491374."}, {"Reference": "CVE-2022-32639", "Description": "In watchdog, there is a possible out of bounds read due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07494487; Issue ID: ALPS07494487."}, {"Reference": "CVE-2022-32640", "Description": "In meta wifi, there is a possible out of bounds write due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07441652; Issue ID: ALPS07441652."}, {"Reference": "CVE-2022-32641", "Description": "In meta wifi, there is a possible out of bounds read due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07453594; Issue ID: ALPS07453594."}, {"Reference": "CVE-2022-32646", "Description": "In gpu drm, there is a possible stack overflow due to a missing bounds check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07363501; Issue ID: ALPS07363501."}, {"Reference": "CVE-2022-32647", "Description": "In ccu, there is a possible out of bounds write due to improper input validation. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07554646; Issue ID: ALPS07554646."}, {"Reference": "CVE-2022-32821", "Description": "A memory corruption issue was addressed with improved validation. This issue is fixed in watchOS 8.7, tvOS 15.6, iOS 15.6 and iPadOS 15.6, macOS Monterey 12.5. An app may be able to execute arbitrary code with kernel privileges."}, {"Reference": "CVE-2022-33218", "Description": "Memory corruption in Automotive due to improper input validation."}, {"Reference": "CVE-2022-33300", "Description": "Memory corruption in Automotive Android OS due to improper input validation."}, {"Reference": "CVE-2022-33719", "Description": "Improper input validation in baseband prior to SMR Aug-2022 Release 1 allows attackers to cause integer overflow to heap overflow."}, {"Reference": "CVE-2022-3377", "Description": "Horner Automation's Cscape version 9.90 SP 6 and prior does not properly validate user-supplied data. If a user opens a maliciously formed FNT file, then an attacker could execute arbitrary code within the current process by accessing an uninitialized pointer, leading to an out-of-bounds memory read. "}, {"Reference": "CVE-2022-3378", "Description": " Horner Automation's Cscape version 9.90 SP 7 and prior does not properly validate user-supplied data. If a user opens a maliciously formed FNT file, then an attacker could execute arbitrary code within the current process by accessing an uninitialized pointer, leading to an out-of-bounds memory write. "}, {"Reference": "CVE-2022-35218", "Description": "The NHI card\u2019s web service component has a heap-based buffer overflow vulnerability due to insufficient validation for packet origin parameter length. A LAN attacker with general user privilege can exploit this vulnerability to disrupt service."}, {"Reference": "CVE-2022-35219", "Description": "The NHI card\u2019s web service component has a stack-based buffer overflow vulnerability due to insufficient validation for network packet key parameter. A LAN attacker with general user privilege can exploit this vulnerability to disrupt service."}, {"Reference": "CVE-2022-42377", "Description": "This vulnerability allows remote attackers to execute arbitrary code on affected installations of PDF-XChange Editor. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within the parsing of U3D files. The issue results from the lack of proper validation of user-supplied data, which can result in a memory corruption condition. An attacker can leverage this vulnerability to execute code in the context of the current process. Was ZDI-CAN-18630."}, {"Reference": "CVE-2022-42498", "Description": "In Pixel cellular firmware, there is a possible out of bounds write due to a missing bounds check. This could lead to remote code execution with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-240662453References: N/A"}, {"Reference": "CVE-2022-48423", "Description": "In the Linux kernel before 6.1.3, fs/ntfs3/record.c does not validate resident attribute names. An out-of-bounds write may occur."}, {"Reference": "CVE-2021-3442", "Description": "A flaw was found in the Red Hat OpenShift API Management product. User input is not validated allowing an authenticated user to inject scripts into some text boxes leading to a XSS attack. The highest threat from this vulnerability is to data confidentiality."}, {"Reference": "CVE-2021-21906", "Description": "Stack-based buffer overflow vulnerability exists in how the CMA readfile function of Garrett Metal Detectors iC Module CMA Version 5.0 is used at various locations. The Garrett iC Module exposes an authenticated CLI over TCP port 6877. This interface is used by a secondary GUI client, called \u201cCMA Connect\u201d, to interact with the iC Module on behalf of the user. Every time a user submits a password to the CLI password prompt, the buffer containing their input is passed as the password parameter to the checkPassword function."}, {"Reference": "CVE-2022-27255", "Description": "In Realtek eCos RSDK 1.5.7p1 and MSDK 4.9.4p1, the SIP ALG function that rewrites SDP data has a stack-based buffer overflow. This allows an attacker to remotely execute code without authentication via a crafted SIP packet that contains malicious SDP data."}, {"Reference": "CVE-2022-43762", "Description": " Lack of verification in B&R APROL Tbase server versions < R 4.2-07 may lead to memory leaks when receiving messages "}, {"Reference": "CVE-2021-1594", "Description": "A vulnerability in the REST API of Cisco Identity Services Engine (ISE) could allow an unauthenticated, remote attacker to perform a command injection attack and elevate privileges to root. This vulnerability is due to insufficient input validation for specific API endpoints. An attacker in a man-in-the-middle position could exploit this vulnerability by intercepting and modifying specific internode communications from one ISE persona to another ISE persona. A successful exploit could allow the attacker to run arbitrary commands with root privileges on the underlying operating system. To exploit this vulnerability, the attacker would need to decrypt HTTPS traffic between two ISE personas that are located on separate nodes."}, {"Reference": "CVE-2021-29854", "Description": "IBM Maximo Asset Management 7.6.1.1 and 7.6.1.2 is vulnerable to HTTP header injection, caused by improper validation of input by the HOST headers. By sending a specially crafted HTTP request, a remote attacker could exploit this vulnerability to inject HTTP HOST header, which will allow the attacker to conduct various attacks against the vulnerable system, including cross-site scripting, cache poisoning or session hijacking. IBM X-Force ID: 205680."}, {"Reference": "CVE-2021-38997", "Description": "IBM API Connect V10.0.0.0 through V10.0.5.0, V10.0.1.0 through V10.0.1.7, and V2018.4.1.0 through 2018.4.1.19 is vulnerable to HTTP header injection, caused by improper validation of input by the HOST headers. This could allow an attacker to conduct various attacks against the vulnerable system, including cross-site scripting, cache poisoning or session hijacking. IBM X-Force ID: 213212."}, {"Reference": "CVE-2021-39028", "Description": "IBM Engineering Lifecycle Optimization - Publishing 6.0.6, 6.0.6.1, 7.0, 7.0.1, and 7.0.2 is vulnerable to HTTP header injection, caused by improper validation of input by the HOST headers. This could allow an attacker to conduct various attacks against the vulnerable system, including cross-site scripting, cache poisoning or session hijacking. IBM X-Force ID: 213866."}, {"Reference": "CVE-2022-0073", "Description": "Improper Input Validation vulnerability in LiteSpeed Technologies OpenLiteSpeed Web Server and LiteSpeed Web Server dashboards allows Command Injection. This affects 1.7.0 versions before 1.7.16.1. "}, {"Reference": "CVE-2022-20713", "Description": "A vulnerability in the VPN web client services component of Cisco Adaptive Security Appliance (ASA) Software and Cisco Firepower Threat Defense (FTD) Software could allow an unauthenticated, remote attacker to conduct browser-based attacks against users of an affected device. This vulnerability is due to improper validation of input that is passed to the VPN web client services component before being returned to the browser that is in use. An attacker could exploit this vulnerability by persuading a user to visit a website that is designed to pass malicious requests to a device that is running Cisco ASA Software or Cisco FTD Software and has web services endpoints supporting VPN features enabled. A successful exploit could allow the attacker to reflect malicious input from the affected device to the browser that is in use and conduct browser-based attacks, including cross-site scripting attacks. The attacker could not directly impact the affected device."}, {"Reference": "CVE-2022-20725", "Description": "Multiple vulnerabilities in the Cisco IOx application hosting environment on multiple Cisco platforms could allow an attacker to inject arbitrary commands into the underlying host operating system, execute arbitrary code on the underlying host operating system, install applications without being authenticated, or conduct a cross-site scripting (XSS) attack against a user of the affected software. For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2022-20727", "Description": "Multiple vulnerabilities in the Cisco IOx application hosting environment on multiple Cisco platforms could allow an attacker to inject arbitrary commands into the underlying host operating system, execute arbitrary code on the underlying host operating system, install applications without being authenticated, or conduct a cross-site scripting (XSS) attack against a user of the affected software. For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2022-20852", "Description": "Multiple vulnerabilities in the web interface of Cisco Webex Meetings could allow a remote attacker to conduct a cross-site scripting (XSS) attack or a frame hijacking attack against a user of the web interface. For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2022-22344", "Description": "IBM Spectrum Copy Data Management 2.2.0.0 through 2.2.14.3 is vulnerable to HTTP header injection, caused by improper validation of input by the HOST headers. This could allow an attacker to conduct various attacks against the vulnerable system, including cross-site scripting, cache poisoning or session hijacking. IBM X-Force ID: 220038"}, {"Reference": "CVE-2022-24881", "Description": "Ballcat Codegen provides the function of online editing code to generate templates. In versions prior to 1.0.0.beta.2, attackers can implement remote code execution through malicious code injection of the template engine. This happens because Velocity and freemarker templates are introduced but input verification is not done. The fault is rectified in version 1.0.0.beta.2."}, {"Reference": "CVE-2022-24926", "Description": "Improper input validation vulnerability in SmartTagPlugin prior to version 1.2.15-6 allows privileged attackers to trigger a XSS on a victim's devices."}, {"Reference": "CVE-2022-26889", "Description": "In Splunk Enterprise versions before 8.1.2, the uri path to load a relative resource within a web page is vulnerable to path traversal. It allows an attacker to potentially inject arbitrary content into the web page (e.g., HTML Injection, XSS) or bypass SPL safeguards for risky commands. The attack is browser-based. An attacker cannot exploit the attack at will and requires the attacker to initiate a request within the victim's browser (e.g., phishing)."}, {"Reference": "CVE-2022-29539", "Description": "resi-calltrace in RESI Gemini-Net 4.2 is affected by OS Command Injection. It does not properly check the parameters sent as input before they are processed on the server. Due to the lack of validation of user input, an unauthenticated attacker can bypass the syntax intended by the software (e.g., concatenate `&|;\\\\r\\\\ commands) and inject arbitrary system commands with the privileges of the application user."}, {"Reference": "CVE-2022-31898", "Description": "gl-inet GL-MT300N-V2 Mango v3.212 and GL-AX1800 Flint v3.214 were discovered to contain multiple command injection vulnerabilities via the ping_addr and trace_addr function parameters."}, {"Reference": "CVE-2022-34165", "Description": "IBM WebSphere Application Server 7.0, 8.0, 8.5, and 9.0 and IBM WebSphere Application Server Liberty 17.0.0.3 through 22.0.0.9 are vulnerable to HTTP header injection, caused by improper validation. This could allow an attacker to conduct various attacks against the vulnerable system, including cache poisoning and cross-site scripting. IBM X-Force ID: 229429."}, {"Reference": "CVE-2022-34306", "Description": "IBM CICS TX Standard and Advanced 11.1 is vulnerable to HTTP header injection, caused by improper validation of input by the HOST headers. This could allow an attacker to conduct various attacks against the vulnerable system, including cross-site scripting, cache poisoning or session hijacking. IBM X-Force ID: 229435."}, {"Reference": "CVE-2022-34362", "Description": " IBM Sterling Secure Proxy 6.0.3 is vulnerable to HTTP header injection, caused by improper validation of input by the HOST headers. This could allow an attacker to conduct various attacks against the vulnerable system, including cross-site scripting, cache poisoning or session hijacking. IBM X-Force ID: 230523. "}, {"Reference": "CVE-2022-35739", "Description": "PRTG Network Monitor through 22.2.77.2204 does not prevent custom input for a device\u2019s icon, which can be modified to insert arbitrary content into the style tag for that device. When the device page loads, the arbitrary Cascading Style Sheets (CSS) data is inserted into the style tag, loading malicious content. Due to PRTG Network Monitor preventing \u201ccharacters, and from modern browsers disabling JavaScript support in style tags, this vulnerability could not be escalated into a Cross-Site Scripting vulnerability."}, {"Reference": "CVE-2022-36775", "Description": "IBM Security Verify Access 10.0.0.0, 10.0.1.0, 10.0.2.0, 10.0.3.0, and10.0.4.0 is vulnerable to HTTP header injection, caused by improper validation of input by the HOST headers. This could allow an attacker to conduct various attacks against the vulnerable system, including cross-site scripting, cache poisoning or session hijacking. IBM X-Force ID: 233576."}, {"Reference": "CVE-2022-36859", "Description": "Improper input validation vulnerability in SmartTagPlugin prior to version 1.2.21-6 allows privileged attackers to trigger a XSS on a victim&#39;s devices."}, {"Reference": "CVE-2022-3721", "Description": "Code Injection in GitHub repository froxlor/froxlor prior to 0.10.39."}, {"Reference": "CVE-2022-39056", "Description": "RAVA certificate validation system has insufficient validation for user input. An unauthenticated remote attacker can inject arbitrary SQL command to access, modify and delete database."}, {"Reference": "CVE-2022-39072", "Description": "There is a SQL injection vulnerability in Some ZTE Mobile Internet products. Due to insufficient validation of the input parameters of the SNTP interface, an authenticated attacker could use the vulnerability to execute stored XSS attacks."}, {"Reference": "CVE-2022-40743", "Description": "Improper Input Validation vulnerability for the xdebug plugin in Apache Software Foundation Apache Traffic Server can lead to cross site scripting and cache poisoning attacks.This issue affects Apache Traffic Server: 9.0.0 to 9.1.3. Users should upgrade to 9.1.4 or later versions. "}, {"Reference": "CVE-2022-41942", "Description": "Sourcegraph is a code intelligence platform. In versions prior to 4.1.0 a command Injection vulnerability existed in the gitserver service, present in all Sourcegraph deployments. This vulnerability was caused by a lack of input validation on the host parameter of the `/list-gitolite` endpoint. It was possible to send a crafted request to gitserver that would execute commands inside the container. Successful exploitation requires the ability to send local requests to gitserver. The issue is patched in version 4.1.0."}, {"Reference": "CVE-2022-43562", "Description": "In Splunk Enterprise versions below 8.1.12, 8.2.9, and 9.0.2, Splunk Enterprise fails to properly validate and escape the Host header, which could let a remote authenticated user conduct various attacks against the system, including cross-site scripting and cache poisoning. "}, {"Reference": "CVE-2022-4427", "Description": "Improper Input Validation vulnerability in OTRS AG OTRS, OTRS AG ((OTRS)) Community Edition allows SQL Injection via TicketSearch Webservice This issue affects OTRS: from 7.0.1 before 7.0.40 Patch 1, from 8.0.1 before 8.0.28 Patch 1; ((OTRS)) Community Edition: from 6.0.1 through 6.0.34. "}, {"Reference": "CVE-2022-4466", "Description": "The WordPress Infinite Scroll WordPress plugin before 5.6.0.3 does not validate and escape some of its shortcode attributes before outputting them back in a page/post where the shortcode is embed, which could allow users with the contributor role and above to perform Stored Cross-Site Scripting attacks."}, {"Reference": "CVE-2022-45470", "Description": "missing input validation in Apache Hama may cause information disclosure through path traversal and XSS. Since Apache Hama is EOL, we do not expect these issues to be fixed."}, {"Reference": "CVE-2022-4557", "Description": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') vulnerability in Group Arge Energy and Control Systems Smartpower Web allows SQL Injection.This issue affects Smartpower Web: before 23.01.01. "}, {"Reference": "CVE-2022-47208", "Description": "The \u201cpuhttpsniff\u201d service, which runs by default, is susceptible to command injection due to improperly sanitized user input. An unauthenticated attacker on the same network segment as the router can execute arbitrary commands on the device without authentication."}, {"Reference": "CVE-2022-48069", "Description": "Totolink A830R V4.1.2cu.5182 was discovered to contain a command injection vulnerability via the QUERY_STRING parameter."}, {"Reference": "CVE-2022-3215", "Description": "NIOHTTP1 and projects using it for generating HTTP responses can be subject to a HTTP Response Injection attack. This occurs when a HTTP/1.1 server accepts user generated input from an incoming request and reflects it into a HTTP/1.1 response header in some form. A malicious user can add newlines to their input (usually in encoded form) and \"inject\" those newlines into the returned HTTP response. This capability allows users to work around security headers and HTTP/1.1 framing headers by injecting entirely false responses or other new headers. The injected false responses may also be treated as the response to subsequent requests, which can lead to XSS, cache poisoning, and a number of other flaws. This issue was resolved by adding validation to the HTTPHeaders type, ensuring that there's no whitespace incorrectly present in the HTTP headers provided by users. As the existing API surface is non-failable, all invalid characters are replaced by linear whitespace."}, {"Reference": "CVE-2022-2180", "Description": "The GREYD.SUITE WordPress theme does not properly validate uploaded custom font packages, and does not perform any authorization or csrf checks, allowing an unauthenticated attacker to upload arbitrary files including php source files, leading to possible remote code execution (RCE)."}, {"Reference": "CVE-2022-28215", "Description": "SAP NetWeaver ABAP Server and ABAP Platform - versions 740, 750, 787, allows an unauthenticated attacker to redirect users to a malicious site due to insufficient URL validation. This could lead to the user being tricked to disclose personal information."}, {"Reference": "CVE-2022-29081", "Description": "Zoho ManageEngine Access Manager Plus before 4302, Password Manager Pro before 12007, and PAM360 before 5401 are vulnerable to access-control bypass on a few Rest API URLs (for SSOutAction. SSLAction. LicenseMgr. GetProductDetails. GetDashboard. FetchEvents. and Synchronize) via the ../RestAPI substring."}, {"Reference": "CVE-2022-34179", "Description": "Jenkins Embeddable Build Status Plugin 2.0.3 and earlier allows specifying a `style` query parameter that is used to choose a different SVG image style without restricting possible values, resulting in a relative path traversal vulnerability that allows attackers without Overall/Read permission to specify paths to other SVG images on the Jenkins controller file system."}, {"Reference": "CVE-2022-35650", "Description": "The vulnerability was found in Moodle, occurs due to input validation error when importing lesson questions. This insufficient path checks results in arbitrary file read risk. This vulnerability allows a remote attacker to perform directory traversal attacks. The capability to access this feature is only available to teachers, managers and admins by default."}, {"Reference": "CVE-2022-35861", "Description": "pyenv 1.2.24 through 2.3.2 allows local users to gain privileges via a .python-version file in the current working directory. An attacker can craft a Python version string in .python-version to execute shims under their control. (Shims are executables that pass a command along to a specific version of pyenv. The version string is used to construct the path to the command, and there is no validation of whether the version specified is a valid version. Thus, relative path traversal can occur.)"}, {"Reference": "CVE-2022-41215", "Description": "SAP NetWeaver ABAP Server and ABAP Platform allows an unauthenticated attacker to redirect users to a malicious site due to insufficient URL validation. This could lead to the user being tricked to disclose personal information. "}, {"Reference": "CVE-2022-27836", "Description": "Improper access control and path traversal vulnerability in Storage Manager and Storage Manager Service prior to SMR Apr-2022 Release 1 allow local attackers to access arbitrary system files without a proper permission. The patch adds proper validation logic to prevent arbitrary files access."}, {"Reference": "CVE-2021-34854", "Description": "This vulnerability allows local attackers to escalate privileges on affected installations of Parallels Desktop 16.1.3 (49160). An attacker must first obtain the ability to execute low-privileged code on the target guest system in order to exploit this vulnerability. The specific flaw exists within the Toolgate component. The issue results from the lack of proper validation of user-supplied data, which can result in an uncontrolled memory allocation. An attacker can leverage this vulnerability to escalate privileges and execute arbitrary code in the context of the hypervisor. Was ZDI-CAN-13544."}, {"Reference": "CVE-2022-20079", "Description": "In vow, there is a possible read of uninitialized data due to a improper input validation. This could lead to local information disclosure with System execution privileges needed. User interaction is no needed for exploitation. Patch ID: ALPS05837742; Issue ID: ALPS05857289."}, {"Reference": "CVE-2022-20176", "Description": "In auth_store of sjtag-driver.c, there is a possible read of uninitialized memory due to a missing bounds check. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-197787879References: N/A"}, {"Reference": "CVE-2022-29204", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.UnsortedSegmentJoin` does not fully validate the input arguments. This results in a `CHECK`-failure which can be used to trigger a denial of service attack. The code assumes `num_segments` is a positive scalar but there is no validation. Since this value is used to allocate the output tensor, a negative value would result in a `CHECK`-failure (assertion failure), as per TFSA-2021-198. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2021-35247", "Description": "Serv-U web login screen to LDAP authentication was allowing characters that were not sufficiently sanitized. SolarWinds has updated the input mechanism to perform additional validation and sanitization. Please Note: No downstream affect has been detected as the LDAP servers ignored improper characters. To insure proper input validation is completed in all environments. SolarWinds recommends scheduling an update to the latest version of Serv-U."}, {"Reference": "CVE-2022-24086", "Description": "Adobe Commerce versions 2.4.3-p1 (and earlier) and 2.3.7-p2 (and earlier) are affected by an improper input validation vulnerability during the checkout process. Exploitation of this issue does not require user interaction and could result in arbitrary code execution."}, {"Reference": "CVE-2022-29499", "Description": "The Service Appliance component in Mitel MiVoice Connect through 19.2 SP3 allows remote code execution because of incorrect data validation. The Service Appliances are SA 100, SA 400, and Virtual SA."}, {"Reference": "CVE-2022-3075", "Description": "Insufficient data validation in Mojo in Google Chrome prior to 105.0.5195.102 allowed a remote attacker who had compromised the renderer process to potentially perform a sandbox escape via a crafted HTML page."}, {"Reference": "CVE-2021-21220", "Description": "Insufficient validation of untrusted input in V8 in Google Chrome prior to 89.0.4389.128 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-21973", "Description": "The vSphere Client (HTML5) contains an SSRF (Server Side Request Forgery) vulnerability due to improper validation of URLs in a vCenter Server plugin. A malicious actor with network access to port 443 may exploit this issue by sending a POST request to vCenter Server plugin leading to information disclosure. This affects: VMware vCenter Server (7.x before 7.0 U1c, 6.7 before 6.7 U3l and 6.5 before 6.5 U3n) and VMware Cloud Foundation (4.x before 4.2 and 3.x before 3.10.1.2)."}, {"Reference": "CVE-2021-22205", "Description": "An issue has been discovered in GitLab CE/EE affecting all versions starting from 11.9. GitLab was not properly validating image files that were passed to a file parser which resulted in a remote command execution."}, {"Reference": "CVE-2021-22502", "Description": "Remote Code execution vulnerability in Micro Focus Operation Bridge Reporter (OBR) product, affecting version 10.40. The vulnerability could be exploited to allow Remote Code Execution on the OBR server."}, {"Reference": "CVE-2021-27102", "Description": "Accellion FTA 9_12_411 and earlier is affected by OS command execution via a local web service call. The fixed version is FTA_9_12_416 and later."}, {"Reference": "CVE-2021-27104", "Description": "Accellion FTA 9_12_370 and earlier is affected by OS command execution via a crafted POST request to various admin endpoints. The fixed version is FTA_9_12_380 and later."}, {"Reference": "CVE-2021-30663", "Description": "An integer overflow was addressed with improved input validation. This issue is fixed in iOS 14.5.1 and iPadOS 14.5.1, tvOS 14.6, iOS 12.5.3, Safari 14.1.1, macOS Big Sur 11.3.1. Processing maliciously crafted web content may lead to arbitrary code execution."}, {"Reference": "CVE-2021-30860", "Description": "An integer overflow was addressed with improved input validation. This issue is fixed in Security Update 2021-005 Catalina, iOS 14.8 and iPadOS 14.8, macOS Big Sur 11.6, watchOS 7.6.2. Processing a maliciously crafted PDF may lead to arbitrary code execution. Apple is aware of a report that this issue may have been actively exploited."}, {"Reference": "CVE-2021-30900", "Description": "An out-of-bounds write issue was addressed with improved bounds checking. This issue is fixed in iOS 14.8.1 and iPadOS 14.8.1, iOS 15.1 and iPadOS 15.1. A malicious application may be able to execute arbitrary code with kernel privileges."}, {"Reference": "CVE-2021-31010", "Description": "A deserialization issue was addressed through improved validation. This issue is fixed in Security Update 2021-005 Catalina, iOS 12.5.5, iOS 14.8 and iPadOS 14.8, macOS Big Sur 11.6, watchOS 7.6.2. A sandboxed process may be able to circumvent sandbox restrictions. Apple was aware of a report that this issue may have been actively exploited at the time of release.."}, {"Reference": "CVE-2021-31207", "Description": "Microsoft Exchange Server Security Feature Bypass Vulnerability"}, {"Reference": "CVE-2021-35395", "Description": "Realtek Jungle SDK version v2.x up to v3.4.14B provides an HTTP web server exposing a management interface that can be used to configure the access point. Two versions of this management interface exists: one based on Go-Ahead named webs and another based on Boa named boa. Both of them are affected by these vulnerabilities. Specifically, these binaries are vulnerable to the following issues: - stack buffer overflow in formRebootCheck due to unsafe copy of submit-url parameter - stack buffer overflow in formWsc due to unsafe copy of submit-url parameter - stack buffer overflow in formWlanMultipleAP due to unsafe copy of submit-url parameter - stack buffer overflow in formWlSiteSurvey due to unsafe copy of ifname parameter - stack buffer overflow in formStaticDHCP due to unsafe copy of hostname parameter - stack buffer overflow in formWsc due to unsafe copy of 'peerPin' parameter - arbitrary command execution in formSysCmd via the sysCmd parameter - arbitrary command injection in formWsc via the 'peerPin' parameter Exploitability of identified issues will differ based on what the end vendor/manufacturer did with the Realtek SDK webserver. Some vendors use it as-is, others add their own authentication implementation, some kept all the features from the server, some remove some of them, some inserted their own set of features. However, given that Realtek SDK implementation is full of insecure calls and that developers tends to re-use those examples in their custom code, any binary based on Realtek SDK webserver will probably contains its own set of issues on top of the Realtek ones (if kept). Successful exploitation of these issues allows remote attackers to gain arbitrary code execution on the device."}, {"Reference": "CVE-2021-36741", "Description": "An improper input validation vulnerability in Trend Micro Apex One, Apex One as a Service, OfficeScan XG, and Worry-Free Business Security 10.0 SP1 allows a remote attached to upload arbitrary files on affected installations. Please note: an attacker must first obtain the ability to logon to the product?s management console in order to exploit this vulnerability."}, {"Reference": "CVE-2021-36742", "Description": "A improper input validation vulnerability in Trend Micro Apex One, Apex One as a Service, OfficeScan XG and Worry-Free Business Security 10.0 SP1 allows a local attacker to escalate privileges on affected installations. Please note: an attacker must first obtain the ability to execute low-privileged code on the target system in order to exploit this vulnerability."}, {"Reference": "CVE-2021-38406", "Description": "Delta Electronic DOPSoft 2 (Version 2.00.07 and prior) lacks proper validation of user-supplied data when parsing specific project files. This could result in multiple out-of-bounds write instances. An attacker could leverage this vulnerability to execute code in the context of the current process."}, {"Reference": "CVE-2021-4034", "Description": "A local privilege escalation vulnerability was found on polkit's pkexec utility. The pkexec application is a setuid tool designed to allow unprivileged users to run commands as privileged users according predefined policies. The current version of pkexec doesn't handle the calling parameters count correctly and ends trying to execute environment variables as commands. An attacker can leverage this by crafting environment variables in such a way it'll induce pkexec to execute arbitrary code. When successfully executed the attack can cause a local privilege escalation given unprivileged users administrative rights on the target machine."}, {"Reference": "CVE-2022-20708", "Description": "Multiple vulnerabilities in Cisco Small Business RV160, RV260, RV340, and RV345 Series Routers could allow an attacker to do any of the following: Execute arbitrary code Elevate privileges Execute arbitrary commands Bypass authentication and authorization protections Fetch and run unsigned software Cause denial of service (DoS) For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2022-22587", "Description": "A memory corruption issue was addressed with improved input validation. This issue is fixed in iOS 15.3 and iPadOS 15.3, macOS Big Sur 11.6.3, macOS Monterey 12.2. A malicious application may be able to execute arbitrary code with kernel privileges. Apple is aware of a report that this issue may have been actively exploited.."}, {"Reference": "CVE-2022-22674", "Description": "An out-of-bounds read issue existed that led to the disclosure of kernel memory. This was addressed with improved input validation. This issue is fixed in macOS Monterey 12.3.1, Security Update 2022-004 Catalina, macOS Big Sur 11.6.6. A local user may be able to read kernel memory."}, {"Reference": "CVE-2022-22675", "Description": "An out-of-bounds write issue was addressed with improved bounds checking. This issue is fixed in tvOS 15.5, watchOS 8.6, macOS Big Sur 11.6.6, macOS Monterey 12.3.1, iOS 15.4.1 and iPadOS 15.4.1. An application may be able to execute arbitrary code with kernel privileges. Apple is aware of a report that this issue may have been actively exploited.."}, {"Reference": "CVE-2022-32893", "Description": "An out-of-bounds write issue was addressed with improved bounds checking. This issue is fixed in iOS 15.6.1 and iPadOS 15.6.1, macOS Monterey 12.5.1, Safari 15.6.1. Processing maliciously crafted web content may lead to arbitrary code execution. Apple is aware of a report that this issue may have been actively exploited."}, {"Reference": "CVE-2022-32894", "Description": "An out-of-bounds write issue was addressed with improved bounds checking. This issue is fixed in iOS 15.6.1 and iPadOS 15.6.1, macOS Monterey 12.5.1. An application may be able to execute arbitrary code with kernel privileges. Apple is aware of a report that this issue may have been actively exploited."}, {"Reference": "CVE-2022-32917", "Description": "The issue was addressed with improved bounds checks. This issue is fixed in macOS Monterey 12.6, iOS 15.7 and iPadOS 15.7, iOS 16, macOS Big Sur 11.7. An application may be able to execute arbitrary code with kernel privileges. Apple is aware of a report that this issue may have been actively exploited.."}, {"Reference": "CVE-2022-37969", "Description": "Windows Common Log File System Driver Elevation of Privilege Vulnerability"}, {"Reference": "CVE-2022-39197", "Description": "An XSS (Cross Site Scripting) vulnerability was found in HelpSystems Cobalt Strike through 4.7 that allowed a remote attacker to execute HTML on the Cobalt Strike teamserver. To exploit the vulnerability, one must first inspect a Cobalt Strike payload, and then modify the username field in the payload (or create a new payload with the extracted information and then modify that username field to be malformed)."}, {"Reference": "CVE-2022-42827", "Description": "An out-of-bounds write issue was addressed with improved bounds checking. This issue is fixed in iOS 15.7.1 and iPadOS 15.7.1, iOS 16.1 and iPadOS 16. An application may be able to execute arbitrary code with kernel privileges. Apple is aware of a report that this issue may have been actively exploited.."}, {"Reference": "CVE-2021-30713", "Description": "A permissions issue was addressed with improved validation. This issue is fixed in macOS Big Sur 11.4. A malicious application may be able to bypass Privacy preferences. Apple is aware of a report that this issue may have been actively exploited.."}, {"Reference": "CVE-2021-42278", "Description": "Active Directory Domain Services Elevation of Privilege Vulnerability"}, {"Reference": "CVE-2022-26019", "Description": "Improper access control vulnerability in pfSense CE and pfSense Plus (pfSense CE software versions prior to 2.6.0 and pfSense Plus software versions prior to 22.01) allows a remote attacker with the privilege to change NTP GPS settings to rewrite existing files on the file system, which may result in arbitrary command execution."}, {"Reference": "CVE-2022-42344", "Description": "Adobe Commerce versions 2.4.3-p2 (and earlier), 2.3.7-p3 (and earlier) and 2.4.4 (and earlier) are affected by an Incorrect Authorization vulnerability. An authenticated attacker can exploit this vulnerability to achieve information exposure and privilege escalation."}, {"Reference": "CVE-2022-22423", "Description": "IBM Common Cryptographic Architecture (CCA 5.x MTM for 4767 and CCA 7.x MTM for 4769) could allow a local user to cause a denial of service due to improper input validation. IBM X-Force ID: 223596."}, {"Reference": "CVE-2022-31036", "Description": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. All versions of Argo CD starting with v1.3.0 are vulnerable to a symlink following bug allowing a malicious user with repository write access to leak sensitive YAML files from Argo CD's repo-server. A malicious Argo CD user with write access for a repository which is (or may be) used in a Helm-type Application may commit a symlink which points to an out-of-bounds file. If the target file is a valid YAML file, the attacker can read the contents of that file. Sensitive files which could be leaked include manifest files from other Applications' source repositories (potentially decrypted files, if you are using a decryption plugin) or any YAML-formatted secrets which have been mounted as files on the repo-server. Patches for this vulnerability has been released in the following Argo CD versions: v2.4.1, v2.3.5, v2.2.10 and v2.1.16. If you are using a version >=v2.3.0 and do not have any Helm-type Applications you may disable the Helm config management tool as a workaround."}, {"Reference": "CVE-2021-26622", "Description": "An remote code execution vulnerability due to SSTI vulnerability and insufficient file name parameter validation was discovered in Genian NAC. Remote attackers are able to execute arbitrary malicious code with SYSTEM privileges on all connected nodes in NAC through this vulnerability."}, {"Reference": "CVE-2022-20958", "Description": "A vulnerability in the web-based management interface of Cisco BroadWorks CommPilot application could allow an unauthenticated, remote attacker to perform a server-side request forgery (SSRF) attack on an affected device. This vulnerability is due to insufficient validation of user-supplied input. An attacker could exploit this vulnerability by sending a crafted HTTP request to the web interface. A successful exploit could allow the attacker to obtain confidential information from the BroadWorks server and other device on the network. {{value}} [\"%7b%7bvalue%7d%7d\"])}]] "}, {"Reference": "CVE-2022-2165", "Description": "Insufficient data validation in URL formatting in Google Chrome prior to 103.0.5060.53 allowed a remote attacker to perform domain spoofing via IDN homographs via a crafted domain name."}, {"Reference": "CVE-2021-0943", "Description": "In MMU_MapPages of TBD, there is a possible out of bounds write due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android SoCAndroid ID: A-238916921"}, {"Reference": "CVE-2021-1573", "Description": "A vulnerability in the web services interface of Cisco Adaptive Security Appliance (ASA) Software and Cisco Firepower Threat Defense (FTD) Software could allow an unauthenticated, remote attacker to trigger a denial of service (DoS) condition. This vulnerability is due to improper input validation when parsing HTTPS requests. An attacker could exploit this vulnerability by sending a malicious HTTPS request to an affected device. A successful exploit could allow the attacker to cause the device to reload, resulting in a DoS condition."}, {"Reference": "CVE-2021-21978", "Description": "VMware View Planner 4.x prior to 4.6 Security Patch 1 contains a remote code execution vulnerability. Improper input validation and lack of authorization leading to arbitrary file upload in logupload web application. An unauthorized attacker with network access to View Planner Harness could upload and execute a specially crafted file leading to remote code execution within the logupload container."}, {"Reference": "CVE-2021-22127", "Description": "An improper input validation vulnerability in FortiClient for Linux 6.4.x before 6.4.3, FortiClient for Linux 6.2.x before 6.2.9 may allow an unauthenticated attacker to execute arbitrary code on the host operating system as root via tricking the user into connecting to a network with a malicious name."}, {"Reference": "CVE-2021-30267", "Description": "Possible integer overflow to buffer overflow due to improper input validation in FTM ARA commands in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile"}, {"Reference": "CVE-2021-34704", "Description": "A vulnerability in the web services interface of Cisco Adaptive Security Appliance (ASA) Software and Cisco Firepower Threat Defense (FTD) Software could allow an unauthenticated, remote attacker to trigger a denial of service (DoS) condition. This vulnerability is due to improper input validation when parsing HTTPS requests. An attacker could exploit this vulnerability by sending a malicious HTTPS request to an affected device. A successful exploit could allow the attacker to cause the device to reload, resulting in a DoS condition."}, {"Reference": "CVE-2021-35105", "Description": "Possible out of bounds access due to improper input validation during graphics profiling in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables"}, {"Reference": "CVE-2021-39666", "Description": "In extract of MediaMetricsItem.h, there is a possible out of bounds read due to improper input validation. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-11 Android-12Android ID: A-204445255"}, {"Reference": "CVE-2021-39733", "Description": "In amcs_cdev_unlocked_ioctl of audiometrics.c, there is a possible out of bounds write due to improper input validation. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-206128522References: N/A"}, {"Reference": "CVE-2021-39970", "Description": "HwPCAssistant has a Improper Input Validation vulnerability.Successful exploitation of this vulnerability may create any file with the system app permission."}, {"Reference": "CVE-2022-1778", "Description": "Improper Input Validation vulnerability in Hitachi Energy MicroSCADA X SYS600 while reading a specific configuration file causes a buffer-overflow that causes a failure to start the SYS600. The configuration file can only be accessed by an administrator access. This issue affects: Hitachi Energy MicroSCADA X SYS600 version 10 to version 10.3.1. cpe:2.3:a:hitachienergy:microscada_x_sys600:10:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.1:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.1.1:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.2:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.2.1:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.3:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.3.1:*:*:*:*:*:*:*"}, {"Reference": "CVE-2022-20099", "Description": "In aee daemon, there is a possible out of bounds write due to improper input validation. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06296442; Issue ID: ALPS06296442."}, {"Reference": "CVE-2022-20132", "Description": "In lg_probe and related functions of hid-lg.c and other USB HID files, there is a possible out of bounds read due to improper input validation. This could lead to local information disclosure if a malicious USB HID device were plugged in, with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-188677105References: Upstream kernel"}, {"Reference": "CVE-2022-20221", "Description": "In avrc_ctrl_pars_vendor_cmd of avrc_pars_ct.cc, there is a possible out of bounds read due to improper input validation. This could lead to remote information disclosure over Bluetooth with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-205571133"}, {"Reference": "CVE-2022-20226", "Description": "In finishDrawingWindow of WindowManagerService.java, there is a possible tapjacking due to improper input validation. This could lead to local escalation of privilege with User execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-12 Android-12LAndroid ID: A-213644870"}, {"Reference": "CVE-2022-20231", "Description": "In smc_intc_request_fiq of arm_gic.c, there is a possible out of bounds write due to improper input validation. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-211485702References: N/A"}, {"Reference": "CVE-2022-20369", "Description": "In v4l2_m2m_querybuf of v4l2-mem2mem.c, there is a possible out of bounds write due to improper input validation. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-223375145References: Upstream kernel"}, {"Reference": "CVE-2022-20427", "Description": "In (TBD) of (TBD), there is a possible way to corrupt memory due to improper input validation. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-239555070References: N/A"}, {"Reference": "CVE-2022-20460", "Description": "In (TBD) mprot_unmap? of (TBD), there is a possible way to corrupt the memory mapping due to improper input validation. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-239557547References: N/A"}, {"Reference": "CVE-2022-20548", "Description": "In setParameter of EqualizerEffect.cpp, there is a possible out of bounds write due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-240919398"}, {"Reference": "CVE-2022-20582", "Description": "In ppmp_unprotect_mfcfw_buf of drm_fw.c, there is a possible out of bounds write due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-233645166References: N/A"}, {"Reference": "CVE-2022-20583", "Description": "In ppmp_unprotect_mfcfw_buf of drm_fw.c, there is a possible out of bounds write due to improper input validation. This could lead to local escalation of privilege in S-EL1 with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-234859169References: N/A"}, {"Reference": "CVE-2022-20824", "Description": "A vulnerability in the Cisco Discovery Protocol feature of Cisco FXOS Software and Cisco NX-OS Software could allow an unauthenticated, adjacent attacker to execute arbitrary code with root privileges or cause a denial of service (DoS) condition on an affected device. This vulnerability is due to improper input validation of specific values that are within a Cisco Discovery Protocol message. An attacker could exploit this vulnerability by sending a malicious Cisco Discovery Protocol packet to an affected device. A successful exploit could allow the attacker to execute arbitrary code with root privileges or cause the Cisco Discovery Protocol process to crash and restart multiple times, which would cause the affected device to reload, resulting in a DoS condition. Note: Cisco Discovery Protocol is a Layer 2 protocol. To exploit this vulnerability, an attacker must be in the same broadcast domain as the affected device (Layer 2 adjacent)."}, {"Reference": "CVE-2022-20934", "Description": "A vulnerability in the CLI of Cisco Firepower Threat Defense (FTD) Software and Cisco FXOS Software could allow an authenticated, local attacker to execute arbitrary commands on the underlying operating system as root. This vulnerability is due to improper input validation for specific CLI commands. An attacker could exploit this vulnerability by injecting operating system commands into a legitimate command. A successful exploit could allow the attacker to escape the restricted command prompt and execute arbitrary commands on the underlying operating system. To successfully exploit this vulnerability, an attacker would need valid Administrator credentials."}, {"Reference": "CVE-2022-22241", "Description": "An Improper Input Validation vulnerability in the J-Web component of Juniper Networks Junos OS may allow an unauthenticated attacker to access data without proper authorization. Utilizing a crafted POST request, deserialization may occur which could lead to unauthorized local file access or the ability to execute arbitrary commands. This issue affects Juniper Networks Junos OS: all versions prior to 19.1R3-S9; 19.2 versions prior to 19.2R3-S6; 19.3 versions prior to 19.3R3-S7; 19.4 versions prior to 19.4R2-S7, 19.4R3-S9; 20.1 versions prior to 20.1R3-S5; 20.2 versions prior to 20.2R3-S5; 20.3 versions prior to 20.3R3-S5; 20.4 versions prior to 20.4R3-S4; 21.1 versions prior to 21.1R3-S2; 21.2 versions prior to 21.2R3-S1; 21.3 versions prior to 21.3R2-S2, 21.3R3; 21.4 versions prior to 21.4R1-S2, 21.4R2-S1, 21.4R3; 22.1 versions prior to 22.1R1-S1, 22.1R2."}, {"Reference": "CVE-2022-22243", "Description": "An XPath Injection vulnerability due to Improper Input Validation in the J-Web component of Juniper Networks Junos OS allows an authenticated attacker to add an XPath command to the XPath stream, which may allow chaining to other unspecified vulnerabilities, leading to a partial loss of confidentiality. This issue affects Juniper Networks Junos OS: all versions prior to 19.1R3-S9; 19.2 versions prior to 19.2R3-S6; 19.3 versions prior to 19.3R3-S7; 19.4 versions prior to 19.4R2-S7, 19.4R3-S8; 20.1 versions prior to 20.1R3-S5; 20.2 versions prior to 20.2R3-S5; 20.3 versions prior to 20.3R3-S5; 20.4 versions prior to 20.4R3-S4; 21.1 versions prior to 21.1R3-S2; 21.2 versions prior to 21.2R3-S1; 21.3 versions prior to 21.3R2-S2, 21.3R3; 21.4 versions prior to 21.4R1-S2, 21.4R2-S1, 21.4R3; 22.1 versions prior to 22.1R1-S1, 22.1R2."}, {"Reference": "CVE-2022-22951", "Description": "VMware Carbon Black App Control (8.5.x prior to 8.5.14, 8.6.x prior to 8.6.6, 8.7.x prior to 8.7.4 and 8.8.x prior to 8.8.2) contains an OS command injection vulnerability. An authenticated, high privileged malicious actor with network access to the VMware App Control administration interface may be able to execute commands on the server due to improper input validation leading to remote code execution."}, {"Reference": "CVE-2022-23766", "Description": "An improper input validation vulnerability leading to arbitrary file execution was discovered in BigFileAgent. In order to cause arbitrary files to be executed, the attacker makes the victim access a web page d by them or inserts a script using XSS into a general website."}, {"Reference": "CVE-2022-2422", "Description": "Due to improper input validation in the Feathers js library, it is possible to perform a SQL injection attack on the back-end database, in case the feathers-sequelize package is used."}, {"Reference": "CVE-2022-24711", "Description": "CodeIgniter4 is the 4.x branch of CodeIgniter, a PHP full-stack web framework. Prior to version 4.1.9, an improper input validation vulnerability allows attackers to execute CLI routes via HTTP request. Version 4.1.9 contains a patch. There are currently no known workarounds for this vulnerability."}, {"Reference": "CVE-2022-26446", "Description": "In Modem 4G RRC, there is a possible system crash due to improper input validation. This could lead to remote denial of service, when concatenating improper SIB12 (CMAS message), with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: MOLY00867883; Issue ID: ALPS07274118."}, {"Reference": "CVE-2022-27573", "Description": "Improper input validation vulnerability in parser_infe and sheifd_find_itemIndexin fuctions of libsimba library prior to SMR Apr-2022 Release 1 allows out of bounds write by privileged attackers."}, {"Reference": "CVE-2022-27574", "Description": "Improper input validation vulnerability in parser_iloc and sheifd_find_itemIndexin fuctions of libsimba library prior to SMR Apr-2022 Release 1 allows out of bounds write by privileged attacker."}, {"Reference": "CVE-2022-27807", "Description": "Improper input validation vulnerability in Link of Cybozu Garoon 4.0.0 to 5.5.1 allows a remote authenticated attacker to disable to add Categories."}, {"Reference": "CVE-2022-27833", "Description": "Improper input validation in DSP driver prior to SMR Apr-2022 Release 1 allows out-of-bounds write by integer overflow."}, {"Reference": "CVE-2022-28692", "Description": "Improper input validation vulnerability in Scheduler of Cybozu Garoon 4.0.0 to 5.5.1 allows a remote authenticated attacker to alter the data of Scheduler."}, {"Reference": "CVE-2022-28811", "Description": "In Carlo Gavazzi UWP3.0 in multiple versions and CPY Car Park Server in Version 2.8.3 a remote, unauthenticated attacker could utilize an improper input validation on an API-submitted parameter to execute arbitrary OS commands."}, {"Reference": "CVE-2022-29494", "Description": "Improper input validation in firmware for OpenBMC in some Intel(R) platforms before versions egs-0.91-179 and bhs-04-45 may allow an authenticated user to potentially enable denial of service via network access."}, {"Reference": "CVE-2022-29892", "Description": "Improper input validation vulnerability in Space of Cybozu Garoon 4.0.0 to 5.5.1 allows a remote authenticated attacker to repeatedly display errors in certain functions and cause a denial-of-service (DoS)."}, {"Reference": "CVE-2022-32664", "Description": "In Config Manager, there is a possible command injection due to improper input validation. This could lead to remote escalation of privilege with User execution privileges needed. User interaction is needed for exploitation. Patch ID: A20220004; Issue ID: OSBNB00140929."}, {"Reference": "CVE-2022-32665", "Description": "In Boa, there is a possible command injection due to improper input validation. This could lead to remote escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: A20220026; Issue ID: OSBNB00144124."}, {"Reference": "CVE-2022-33216", "Description": "Transient Denial-of-service in Automotive due to improper input validation while parsing ELF file."}, {"Reference": "CVE-2022-33690", "Description": "Improper input validation in Contacts Storage prior to SMR Jul-2022 Release 1 allows attacker to access arbitrary file."}, {"Reference": "CVE-2022-33708", "Description": "Improper input validation vulnerability in AppsPackageInstaller in Galaxy Store prior to version 4.5.41.8 allows local attackers to launch activities as Galaxy Store privilege."}, {"Reference": "CVE-2022-33709", "Description": "Improper input validation vulnerability in ApexPackageInstaller in Galaxy Store prior to version 4.5.41.8 allows local attackers to launch activities as Galaxy Store privilege."}, {"Reference": "CVE-2022-33710", "Description": "Improper input validation vulnerability in BillingPackageInsraller in Galaxy Store prior to version 4.5.41.8 allows local attackers to launch activities as Galaxy Store privilege."}, {"Reference": "CVE-2022-33876", "Description": "Multiple instances of improper input validation vulnerability in Fortinet FortiADC version 7.1.0, version 7.0.0 through 7.0.2 and version 6.2.4 and below allows an authenticated attacker to retrieve files with specific extension from the underlying Linux system via crafted HTTP requests."}, {"Reference": "CVE-2022-34146", "Description": "Transient DOS due to improper input validation in WLAN Host while parsing frame during defragmentation."}, {"Reference": "CVE-2022-34391", "Description": "Dell Client BIOS Versions prior to the remediated version contain an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution in SMRAM."}, {"Reference": "CVE-2022-35942", "Description": "Improper input validation on the `contains` LoopBack filter may allow for arbitrary SQL injection. When the extended filter property `contains` is permitted to be interpreted by the Postgres connector, it is possible to inject arbitrary SQL which may affect the confidentiality and integrity of data stored on the connected database. A patch was released in version 5.5.1. This affects users who does any of the following: - Connect to the database via the DataSource with `allowExtendedProperties: true` setting OR - Uses the connector's CRUD methods directly OR - Uses the connector's other methods to interpret the LoopBack filter. Users who are unable to upgrade should do the following if applicable: - Remove `allowExtendedProperties: true` DataSource setting - Add `allowExtendedProperties: false` DataSource setting - When passing directly to the connector functions, manually sanitize the user input for the `contains` LoopBack filter beforehand."}, {"Reference": "CVE-2022-36960", "Description": "SolarWinds Platform was susceptible to Improper Input Validation. This vulnerability allows a remote adversary with valid access to SolarWinds Web Console to escalate user privileges. "}, {"Reference": "CVE-2022-38099", "Description": "Improper input validation in BIOS firmware for some Intel(R) NUC 11 Compute Elements before version EBTGL357.0065 may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-39017", "Description": " Improper input validation and output encoding in all comments fields, in M-Files Hubshare before 3.3.10.9 allows authenticated attackers to introduce cross-site scripting attacks via specially crafted comments. "}, {"Reference": "CVE-2022-39836", "Description": "An issue was discovered in Connected Vehicle Systems Alliance (COVESA) dlt-daemon through 2.18.8. Due to a faulty DLT file parser, a crafted DLT file that crashes the process can be created. This is due to missing validation checks. There is a heap-based buffer over-read of one byte."}, {"Reference": "CVE-2022-39881", "Description": "Improper input validation vulnerability for processing SIB12 PDU in Exynos modems prior to SMR Sep-2022 Release allows remote attacker to read out of bounds memory."}, {"Reference": "CVE-2022-40502", "Description": "Transient DOS due to improper input validation in WLAN Host."}, {"Reference": "CVE-2022-42500", "Description": "In OEM_OnRequest of sced.cpp, there is a possible shell command execution due to improper input validation. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-239701389References: N/A"}, {"Reference": "CVE-2022-42510", "Description": "In StringsRequestData::encode of requestdata.cpp, there is a possible out of bounds read due to improper input validation. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-241762656References: N/A"}, {"Reference": "CVE-2022-42521", "Description": "In encode of wlandata.cpp, there is a possible out of bounds write due to improper input validation. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-243130019References: N/A"}, {"Reference": "CVE-2022-45089", "Description": "Improper Input Validation vulnerability in Group Arge Energy and Control Systems Smartpower Web allows SQL Injection.This issue affects Smartpower Web: before 23.01.01. "}, {"Reference": "CVE-2022-45090", "Description": "Improper Input Validation vulnerability in Group Arge Energy and Control Systems Smartpower Web allows SQL Injection.This issue affects Smartpower Web: before 23.01.01. "}, {"Reference": "CVE-2022-45725", "Description": "Improper Input Validation in Comfast router CF-WR6110N V2.3.1 allows a remote attacker on the same network to execute arbitrary code on the target via an HTTP POST request"}, {"Reference": "CVE-2022-45918", "Description": "ILIAS before 7.16 allows External Control of File Name or Path."}, {"Reference": "CVE-2021-0928", "Description": "In createFromParcel of OutputConfiguration.java, there is a possible parcel serialization/deserialization mismatch due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-9Android ID: A-188675581"}, {"Reference": "CVE-2021-3607", "Description": "An integer overflow was found in the QEMU implementation of VMWare's paravirtual RDMA device in versions prior to 6.1.0. The issue occurs while handling a \"PVRDMA_REG_DSRHIGH\" write from the guest due to improper input validation. This flaw allows a privileged guest user to make QEMU allocate a large amount of memory, resulting in a denial of service. The highest threat from this vulnerability is to system availability."}, {"Reference": "CVE-2021-39676", "Description": "In writeThrowable of AndroidFuture.java, there is a possible parcel serialization/deserialization mismatch due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-11Android ID: A-197228210"}, {"Reference": "CVE-2022-1107", "Description": "During an internal product security audit a potential vulnerability due to use of Boot Services in the SmmOEMInt15 SMI handler was discovered in some ThinkPad models could be exploited by an attacker with elevated privileges that could allow for execution of code."}, {"Reference": "CVE-2022-1108", "Description": "A potential vulnerability due to improper buffer validation in the SMI handler LenovoFlashDeviceInterface in Thinkpad X1 Fold Gen 1 could be exploited by an attacker with local access and elevated privileges to execute arbitrary code."}, {"Reference": "CVE-2022-20906", "Description": "Multiple vulnerabilities in Cisco Nexus Dashboard could allow an authenticated, local attacker to elevate privileges on an affected device. These vulnerabilities are due to insufficient input validation during CLI command execution on an affected device. An attacker could exploit these vulnerabilities by authenticating as the rescue-user and executing vulnerable CLI commands using a malicious payload. A successful exploit could allow the attacker to elevate privileges to root on an affected device."}, {"Reference": "CVE-2022-20907", "Description": "Multiple vulnerabilities in Cisco Nexus Dashboard could allow an authenticated, local attacker to elevate privileges on an affected device. These vulnerabilities are due to insufficient input validation during CLI command execution on an affected device. An attacker could exploit these vulnerabilities by authenticating as the rescue-user and executing vulnerable CLI commands using a malicious payload. A successful exploit could allow the attacker to elevate privileges to root on an affected device."}, {"Reference": "CVE-2021-39633", "Description": "In gre_handle_offloads of ip_gre.c, there is a possible page fault due to an invalid memory access. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-150694665References: Upstream kernel"}, {"Reference": "CVE-2021-45116", "Description": "An issue was discovered in Django 2.2 before 2.2.26, 3.2 before 3.2.11, and 4.0 before 4.0.1. Due to leveraging the Django Template Language's variable resolution logic, the dictsort template filter was potentially vulnerable to information disclosure, or an unintended method call, if passed a suitably crafted key."}, {"Reference": "CVE-2022-43566", "Description": "In Splunk Enterprise versions below 8.2.9, 8.1.12, and 9.0.2, an authenticated user can run risky commands using a more privileged user\u2019s permissions to bypass SPL safeguards for risky commands https://docs.splunk.com/Documentation/SplunkCloud/latest/Security/SPLsafeguards in the Analytics Workspace. The vulnerability requires the attacker to phish the victim by tricking them into initiating a request within their browser. The attacker cannot exploit the vulnerability at will. "}, {"Reference": "CVE-2022-2479", "Description": "Insufficient validation of untrusted input in File in Google Chrome on Android prior to 103.0.5060.134 allowed an attacker who convinced a user to install a malicious app to obtain potentially sensitive information from internal file directories via a crafted HTML page."}, {"Reference": "CVE-2022-23992", "Description": "XCOM Data Transport for Windows, Linux, and UNIX 11.6 releases contain a vulnerability due to insufficient input validation that could potentially allow remote attackers to execute arbitrary commands with elevated privileges."}, {"Reference": "CVE-2022-26707", "Description": "An issue in the handling of environment variables was addressed with improved validation. This issue is fixed in macOS Monterey 12.4. A user may be able to view sensitive user information."}, {"Reference": "CVE-2022-27421", "Description": "Chamilo LMS v1.11.13 lacks validation on the user modification form, allowing attackers to escalate privileges to Platform Admin."}, {"Reference": "CVE-2022-39266", "Description": "isolated-vm is a library for nodejs which gives the user access to v8's Isolate interface. In versions 4.3.6 and prior, if the untrusted v8 cached data is passed to the API through CachedDataOptions, attackers can bypass the sandbox and run arbitrary code in the nodejs process. Version 4.3.7 changes the documentation to warn users that they should not accept `cachedData` payloads from a user."}, {"Reference": "CVE-2021-21126", "Description": "Insufficient policy enforcement in extensions in Google Chrome prior to 88.0.4324.96 allowed a remote attacker to bypass site isolation via a crafted Chrome Extension."}, {"Reference": "CVE-2022-0270", "Description": "Prior to v0.6.1, bored-agent failed to sanitize incoming kubernetes impersonation headers allowing a user to override assigned user name and groups."}, {"Reference": "CVE-2021-24890", "Description": "The Scripts Organizer WordPress plugin before 3.0 does not have capability and CSRF checks in the saveScript AJAX action, available to both unauthenticated and authenticated users, and does not validate user input in any way, which could allow unauthenticated users to put arbitrary PHP code in a file"}, {"Reference": "CVE-2022-1020", "Description": "The Product Table for WooCommerce (wooproducttable) WordPress plugin before 3.1.2 does not have authorisation and CSRF checks in the wpt_admin_update_notice_option AJAX action (available to both unauthenticated and authenticated users), as well as does not validate the callback parameter, allowing unauthenticated attackers to call arbitrary functions with either none or one user controlled argument"}, {"Reference": "CVE-2022-29154", "Description": "An issue was discovered in rsync before 3.2.5 that allows malicious remote servers to write arbitrary files inside the directories of connecting peers. The server chooses which files/directories are sent to the client. However, the rsync client performs insufficient validation of file names. A malicious rsync server (or Man-in-The-Middle attacker) can overwrite arbitrary files in the rsync client target directory and subdirectories (for example, overwrite the .ssh/authorized_keys file)."}, {"Reference": "CVE-2022-40773", "Description": "Zoho ManageEngine ServiceDesk Plus MSP before 10609 and SupportCenter Plus before 11025 are vulnerable to privilege escalation. This allows users to obtain sensitive data during an exportMickeyList export of requests from the list view."}, {"Reference": "CVE-2022-3124", "Description": "The Frontend File Manager Plugin WordPress plugin before 21.3 allows any unauthenticated user to rename uploaded files from users. Furthermore, due to the lack of validation in the destination filename, this could allow allow them to change the content of arbitrary files on the web server"}, {"Reference": "CVE-2022-1509", "Description": "Sed Injection Vulnerability in GitHub repository hestiacp/hestiacp prior to 1.5.12. An authenticated remote attacker with low privileges can execute arbitrary code under root context."}, {"Reference": "CVE-2022-20693", "Description": "A vulnerability in the web UI feature of Cisco IOS XE Software could allow an authenticated, remote attacker to perform an injection attack against an affected device. This vulnerability is due to insufficient input validation. An attacker could exploit this vulnerability by sending crafted input to the web UI API. A successful exploit could allow the attacker to inject commands to the underlying operating system with root privileges."}, {"Reference": "CVE-2022-3967", "Description": "A vulnerability, which was classified as critical, was found in Vesta Control Panel. Affected is an unknown function of the file func/main.sh of the component sed Handler. The manipulation leads to argument injection. An attack has to be approached locally. The name of the patch is 39561c32c12cabe563de48cc96eccb9e2c655e25. It is recommended to apply a patch to fix this issue. VDB-213546 is the identifier assigned to this vulnerability."}, {"Reference": "CVE-2022-42797", "Description": "An injection issue was addressed with improved input validation. This issue is fixed in Xcode 14.1. An app may be able to gain root privileges."}, {"Reference": "CVE-2022-24734", "Description": "MyBB is a free and open source forum software. In affected versions the Admin CP's Settings management module does not validate setting types correctly on insertion and update, making it possible to add settings of supported type `php` with PHP code, executed on on _Change Settings_ pages. This results in a Remote Code Execution (RCE) vulnerability. The vulnerable module requires Admin CP access with the `Can manage settings?` permission. MyBB's Settings module, which allows administrators to add, edit, and delete non-default settings, stores setting data in an options code string ($options_code; mybb_settings.optionscode database column) that identifies the setting type and its options, separated by a new line character (\\\\n). In MyBB 1.2.0, support for setting type php was added, for which the remaining part of the options code is PHP code executed on Change Settings pages (reserved for plugins and internal use). MyBB 1.8.30 resolves this issue. There are no known workarounds."}, {"Reference": "CVE-2022-24816", "Description": "JAI-EXT is an open-source project which aims to extend the Java Advanced Imaging (JAI) API. Programs allowing Jiffle script to be provided via network request can lead to a Remote Code Execution as the Jiffle script is compiled into Java code via Janino, and executed. In particular, this affects the downstream GeoServer project. Version 1.2.22 will contain a patch that disables the ability to inject malicious code into the resulting script. Users unable to upgrade may negate the ability to compile Jiffle scripts from the final application, by removing janino-x.y.z.jar from the classpath."}, {"Reference": "CVE-2022-24828", "Description": "Composer is a dependency manager for the PHP programming language. Integrators using Composer code to call `VcsDriver::getFileContent` can have a code injection vulnerability if the user can control the `$file` or `$identifier` argument. This leads to a vulnerability on packagist.org for example where the composer.json's `readme` field can be used as a vector for injecting parameters into hg/Mercurial via the `$file` argument, or git via the `$identifier` argument if you allow arbitrary data there (Packagist does not, but maybe other integrators do). Composer itself should not be affected by the vulnerability as it does not call `getFileContent` with arbitrary data into `$file`/`$identifier`. To the best of our knowledge this was not abused, and the vulnerability has been patched on packagist.org and Private Packagist within a day of the vulnerability report."}, {"Reference": "CVE-2021-41144", "Description": "OpenMage LTS is an e-commerce platform. Prior to versions 19.4.22 and 20.0.19, a layout block was able to bypass the block blacklist to execute remote code. Versions 19.4.22 and 20.0.19 contain a patch for this issue. "}, {"Reference": "CVE-2022-20665", "Description": "A vulnerability in the CLI of Cisco StarOS could allow an authenticated, local attacker to elevate privileges on an affected device. This vulnerability is due to insufficient input validation of CLI commands. An attacker could exploit this vulnerability by sending crafted commands to the CLI. A successful exploit could allow the attacker to execute arbitrary code with the privileges of the root user. To exploit this vulnerability, an attacker would need to have valid administrative credentials on an affected device."}, {"Reference": "CVE-2022-20799", "Description": "Multiple vulnerabilities in the web-based management interface of Cisco Small Business RV340 and RV345 Routers could allow an authenticated, remote attacker to inject and execute arbitrary commands on the underlying operating system of an affected device. These vulnerabilities are due to insufficient validation of user-supplied input. An attacker could exploit these vulnerabilities by sending malicious input to an affected device. A successful exploit could allow the attacker to execute arbitrary commands on the underlying Linux operating system of the affected device. To exploit these vulnerabilities, an attacker would need to have valid Administrator credentials on the affected device."}, {"Reference": "CVE-2022-20801", "Description": "Multiple vulnerabilities in the web-based management interface of Cisco Small Business RV340 and RV345 Routers could allow an authenticated, remote attacker to inject and execute arbitrary commands on the underlying operating system of an affected device. These vulnerabilities are due to insufficient validation of user-supplied input. An attacker could exploit these vulnerabilities by sending malicious input to an affected device. A successful exploit could allow the attacker to execute arbitrary commands on the underlying Linux operating system of the affected device. To exploit these vulnerabilities, an attacker would need to have valid Administrator credentials on the affected device."}, {"Reference": "CVE-2022-20925", "Description": "A vulnerability in the web management interface of the Cisco Firepower Management Center (FMC) Software could allow an authenticated, remote attacker to execute arbitrary commands on the underlying operating system. The vulnerability is due to insufficient validation of user-supplied parameters for certain API endpoints. An attacker could exploit this vulnerability by sending crafted input to an affected API endpoint. A successful exploit could allow an attacker to execute arbitrary commands on the device with low system privileges. To successfully exploit this vulnerability, an attacker would need valid credentials for a user with Device permissions: by default, only Administrators, Security Approvers and Network Admins user accounts have these permissions."}, {"Reference": "CVE-2022-20926", "Description": "A vulnerability in the web management interface of the Cisco Firepower Management Center (FMC) Software could allow an authenticated, remote attacker to execute arbitrary commands on the underlying operating system. The vulnerability is due to insufficient validation of user-supplied parameters for certain API endpoints. An attacker could exploit this vulnerability by sending crafted input to an affected API endpoint. A successful exploit could allow an attacker to execute arbitrary commands on the device with low system privileges. To successfully exploit this vulnerability, an attacker would need valid credentials for a user with Device permissions: by default, only Administrators, Security Approvers and Network Admins user accounts have these permissions."}, {"Reference": "CVE-2022-22991", "Description": "A malicious user on the same LAN could use DNS spoofing followed by a command injection attack to trick a NAS device into loading through an unsecured HTTP call. Addressed this vulnerability by disabling checks for internet connectivity using HTTP."}, {"Reference": "CVE-2022-24552", "Description": "A flaw was found in the REST API in StarWind Stack. REST command, which manipulates a virtual disk, doesn\u2019t check input parameters. Some of them go directly to bash as part of a script. An attacker with non-root user access can inject arbitrary data into the command that will be executed with root privileges. This affects StarWind SAN and NAS v0.2 build 1633."}, {"Reference": "CVE-2022-28171", "Description": "The web module in some Hikvision Hybrid SAN/Cluster Storage products have the following security vulnerability. Due to the insufficient input validation, attacker can exploit the vulnerability to execute restricted commands by sending messages with malicious commands to the affected device."}, {"Reference": "CVE-2022-29558", "Description": "Realtek rtl819x-SDK before v3.6.1 allows command injection over the web interface."}, {"Reference": "CVE-2022-36482", "Description": "TOTOLINK N350RT V9.3.5u.6139_B20201216 was discovered to contain a command injection vulnerability via the lang parameter in the function setLanguageCfg."}, {"Reference": "CVE-2022-39073", "Description": "There is a command injection vulnerability in ZTE MF286R, Due to insufficient validation of the input parameters, an attacker could use the vulnerability to execute arbitrary commands."}, {"Reference": "CVE-2022-41870", "Description": "AP Manager in Innovaphone before 13r2 Service Release 17 allows command injection via a modified service ID during app upload."}, {"Reference": "CVE-2022-43550", "Description": "A command injection vulnerability exists in Jitsi before commit 8aa7be58522f4264078d54752aae5483bfd854b2 when launching browsers on Windows which could allow an attacker to insert an arbitrary URL which opens up the opportunity to remote execution."}, {"Reference": "CVE-2022-45600", "Description": "Aztech WMB250AC Mesh Routers Firmware Version 016 2020 devices improperly manage sessions, which allows remote attackers to bypass authentication in opportunistic circumstances and execute arbitrary commands with administrator privileges by leveraging an existing web portal login."}, {"Reference": "CVE-2022-46303", "Description": "Command injection in SMS notifications in Tribe29 Checkmk <= 2.1.0p10, Checkmk <= 2.0.0p27, and Checkmk <= 1.6.0p29 allows an attacker with User Management permissions, as well as LDAP administrators in certain scenarios, to perform arbitrary commands within the context of the application's local permissions."}, {"Reference": "CVE-2022-29560", "Description": "A vulnerability has been identified in RUGGEDCOM ROX MX5000 (All versions < 2.15.1), RUGGEDCOM ROX MX5000RE (All versions < 2.15.1), RUGGEDCOM ROX RX1400 (All versions < 2.15.1), RUGGEDCOM ROX RX1500 (All versions < 2.15.1), RUGGEDCOM ROX RX1501 (All versions < 2.15.1), RUGGEDCOM ROX RX1510 (All versions < 2.15.1), RUGGEDCOM ROX RX1511 (All versions < 2.15.1), RUGGEDCOM ROX RX1512 (All versions < 2.15.1), RUGGEDCOM ROX RX1524 (All versions < 2.15.1), RUGGEDCOM ROX RX1536 (All versions < 2.15.1), RUGGEDCOM ROX RX5000 (All versions < 2.15.1). Affected devices do not properly validate user input, making them susceptible to command injection. An attacker with access to either the shell or the web CLI with administrator privileges could access the underlying operating system as the root user."}, {"Reference": "CVE-2021-26373", "Description": "Insufficient bound checks in the System Management Unit (SMU) may result in a system voltage malfunction that could result in denial of resources and/or possibly denial of service."}, {"Reference": "CVE-2021-26378", "Description": "Insufficient bound checks in the System Management Unit (SMU) may result in access to an invalid address space that could result in denial of service."}, {"Reference": "CVE-2022-20017", "Description": "In ion driver, there is a possible information disclosure due to an incorrect bounds check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05862991; Issue ID: ALPS05862991."}, {"Reference": "CVE-2022-20019", "Description": "In libMtkOmxGsmDec, there is a possible information disclosure due to an incorrect bounds check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05917620; Issue ID: ALPS05917620."}, {"Reference": "CVE-2022-20020", "Description": "In libvcodecdrv, there is a possible information disclosure due to a missing bounds check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05943906; Issue ID: ALPS05943906."}, {"Reference": "CVE-2022-20036", "Description": "In ion driver, there is a possible information disclosure due to an incorrect bounds check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06171689; Issue ID: ALPS06171689."}, {"Reference": "CVE-2022-20037", "Description": "In ion driver, there is a possible information disclosure due to an incorrect bounds check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06171705; Issue ID: ALPS06171705."}, {"Reference": "CVE-2022-20064", "Description": "In ccci, there is a possible leak of kernel pointer due to an incorrect bounds check. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06108617; Issue ID: ALPS06108617."}, {"Reference": "CVE-2022-20507", "Description": "In onMulticastListUpdateNotificationReceived of UwbEventManager.java, there is a possible arbitrary code execution due to a missing bounds check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-246649179"}, {"Reference": "CVE-2022-20683", "Description": "A vulnerability in the Application Visibility and Control (AVC-FNF) feature of Cisco IOS XE Software for Cisco Catalyst 9800 Series Wireless Controllers could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition on an affected device. This vulnerability is due to insufficient packet verification for traffic inspected by the AVC feature. An attacker could exploit this vulnerability by sending crafted packets from the wired network to a wireless client, resulting in the crafted packets being processed by the wireless controller. A successful exploit could allow the attacker to cause a crash and reload of the affected device, resulting in a DoS condition."}, {"Reference": "CVE-2022-25818", "Description": "Improper boundary check in UWB stack prior to SMR Mar-2022 Release 1 allows arbitrary code execution."}, {"Reference": "CVE-2022-26763", "Description": "An out-of-bounds access issue was addressed with improved bounds checking. This issue is fixed in tvOS 15.5, iOS 15.5 and iPadOS 15.5, Security Update 2022-004 Catalina, watchOS 8.6, macOS Big Sur 11.6.6, macOS Monterey 12.4. A malicious application may be able to execute arbitrary code with system privileges."}, {"Reference": "CVE-2022-27835", "Description": "Improper boundary check in UWB firmware prior to SMR Apr-2022 Release 1 allows arbitrary memory write."}, {"Reference": "CVE-2022-42396", "Description": "This vulnerability allows remote attackers to execute arbitrary code on affected installations of PDF-XChange Editor. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within the parsing of XPS files. The issue results from the lack of proper validation of a user-supplied value prior to dereferencing it as a pointer. An attacker can leverage this vulnerability to execute code in the context of the current process. Was ZDI-CAN-18278."}, {"Reference": "CVE-2022-42418", "Description": "This vulnerability allows remote attackers to execute arbitrary code on affected installations of PDF-XChange Editor. User interaction is required to exploit this vulnerability in that the target must visit a malicious page or open a malicious file. The specific flaw exists within the parsing of TIF files. The issue results from the lack of proper validation of a user-supplied value prior to dereferencing it as a pointer. An attacker can leverage this vulnerability to execute code in the context of the current process. Was ZDI-CAN-18677."}, {"Reference": "CVE-2022-44425", "Description": "In wlan driver, there is a possible missing bounds check. This could lead to local denial of service in wlan services."}, {"Reference": "CVE-2022-46701", "Description": "The issue was addressed with improved bounds checks. This issue is fixed in iOS 16.2 and iPadOS 16.2, macOS Ventura 13.1, tvOS 16.2. Connecting to a malicious NFS server may lead to arbitrary code execution with kernel privileges."}, {"Reference": "CVE-2021-0013", "Description": "Improper input validation for Intel(R) EMA before version 1.5.0 may allow an unauthenticated user to potentially enable denial of service via network access."}, {"Reference": "CVE-2021-0051", "Description": "Improper input validation in the Intel(R) SPS versions before SPS_E5_04.04.04.023.0, SPS_E5_04.04.03.228.0 or SPS_SoC-A_05.00.03.098.0 may allow a privileged user to potentially enable denial of service via local access."}, {"Reference": "CVE-2021-0062", "Description": "Improper input validation in some Intel(R) Graphics Drivers before version 27.20.100.8935 may allow an authenticated user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2021-0063", "Description": "Improper input validation in firmware for some Intel(R) PROSet/Wireless WiFi and Killer(TM) WiFi in Windows 10 may allow an unauthenticated user to potentially enable denial of service via adjacent access."}, {"Reference": "CVE-2021-0066", "Description": "Improper input validation in firmware for Intel(R) PROSet/Wireless Wi-Fi in multiple operating systems and Killer(TM) Wi-Fi in Windows 10 and 11 may allow an unauthenticated user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2021-0069", "Description": "Improper input validation in firmware for some Intel(R) PROSet/Wireless WiFi in multiple operating systems and some Killer(TM) WiFi in Windows 10 may allow an unauthenticated user to potentially enable denial of service via adjacent access."}, {"Reference": "CVE-2021-0070", "Description": "Improper input validation in the BMC firmware for Intel(R) Server Board M10JNP2SB before version EFI BIOS 7215, BMC 8100.01.08 may allow an unauthenticated user to potentially enable an escalation of privilege via adjacent access."}, {"Reference": "CVE-2021-0071", "Description": "Improper input validation in firmware for some Intel(R) PROSet/Wireless WiFi in UEFI may allow an unauthenticated user to potentially enable escalation of privilege via adjacent access."}, {"Reference": "CVE-2021-0072", "Description": "Improper input validation in firmware for some Intel(R) PROSet/Wireless Wi-Fi in multiple operating systems and some Killer(TM) Wi-Fi in Windows 10 and 11 may allow a privileged user to potentially enable information disclosure via local access."}, {"Reference": "CVE-2021-0078", "Description": "Improper input validation in software for some Intel(R) PROSet/Wireless WiFi and Killer(TM) WiFi in Windows 10 may allow an unauthenticated user to potentially enable denial of service or information disclosure via adjacent access."}, {"Reference": "CVE-2021-0079", "Description": "Improper input validation in software for some Intel(R) PROSet/Wireless WiFi and Killer(TM) WiFi in Windows 10 may allow an unauthenticated user to potentially enable denial of service via adjacent access."}, {"Reference": "CVE-2021-0083", "Description": "Improper input validation in some Intel(R) Optane(TM) PMem versions before versions 1.2.0.5446 or 2.2.0.1547 may allow a privileged user to potentially enable denial of service via local access."}, {"Reference": "CVE-2021-0084", "Description": "Improper input validation in the Intel(R) Ethernet Controllers X722 and 800 series Linux RMDA driver before version 1.3.19 may allow an authenticated user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2021-0126", "Description": "Improper input validation for the Intel(R) Manageability Commander before version 2.2 may allow an authenticated user to potentially enable escalation of privilege via adjacent access."}, {"Reference": "CVE-2021-0134", "Description": "Improper input validation in an API for the Intel(R) Security Library before version 3.3 may allow a privileged user to potentially enable denial of service via network access."}, {"Reference": "CVE-2021-0135", "Description": "Improper input validation in the Intel(R) Ethernet Diagnostic Driver for Windows before version 1.4.0.10 may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2021-0154", "Description": "Improper input validation in the BIOS firmware for some Intel(R) Processors may allow a privileged user to potentially enable aescalation of privilege via local access."}, {"Reference": "CVE-2021-0156", "Description": "Improper input validation in the firmware for some Intel(R) Processors may allow an authenticated user to potentially enable an escalation of privilege via local access."}, {"Reference": "CVE-2021-0158", "Description": "Improper input validation in the BIOS firmware for some Intel(R) Processors may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2021-0159", "Description": "Improper input validation in the BIOS authenticated code module for some Intel(R) Processors may allow a privileged user to potentially enable aescalation of privilege via local access."}, {"Reference": "CVE-2021-0161", "Description": "Improper input validation in firmware for Intel(R) PROSet/Wireless Wi-Fi in multiple operating systems and Killer(TM) Wi-Fi in Windows 10 and 11 may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2021-0162", "Description": "Improper input validation in software for Intel(R) PROSet/Wireless Wi-Fi and Killer(TM) Wi-Fi in Windows 10 and 11 may allow an unauthenticated user to potentially enable escalation of privilege via adjacent access."}, {"Reference": "CVE-2021-0165", "Description": "Improper input validation in firmware for Intel(R) PROSet/Wireless Wi-Fi in multiple operating systems and Killer(TM) Wi-Fi in Windows 10 and 11 may allow an unauthenticated user to potentially enable denial of service via adjacent access."}, {"Reference": "CVE-2021-0168", "Description": "Improper input validation in firmware for some Intel(R) PROSet/Wireless Wi-Fi in multiple operating systems and some Killer(TM) Wi-Fi in Windows 10 and 11 may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2021-0172", "Description": "Improper input validation in firmware for some Intel(R) PROSet/Wireless Wi-Fi in multiple operating systems and some Killer(TM) Wi-Fi in Windows 10 and 11 may allow an unauthenticated user to potentially enable denial of service via adjacent access."}, {"Reference": "CVE-2021-0176", "Description": "Improper input validation in firmware for some Intel(R) PROSet/Wireless Wi-Fi in multiple operating systems and some Killer(TM) Wi-Fi in Windows 10 and 11 may allow a privileged user to potentially enable denial of service via local access."}, {"Reference": "CVE-2021-0178", "Description": "Improper input validation in software for Intel(R) PROSet/Wireless Wi-Fi and Killer(TM) Wi-Fi in Windows 10 and 11 may allow an unauthenticated user to potentially enable denial of service via adjacent access."}, {"Reference": "CVE-2021-0185", "Description": "Improper input validation in the firmware for some Intel(R) Server Board M10JNP Family before version 7.216 may allow a privileged user to potentially enable an escalation of privilege via local access."}, {"Reference": "CVE-2021-0186", "Description": "Improper input validation in the Intel(R) SGX SDK applications compiled for SGX2 enabled processors may allow a privileged user to potentially escalation of privilege via local access."}, {"Reference": "CVE-2021-0199", "Description": "Improper input validation in the firmware for the Intel(R) Ethernet Network Controller E810 before version 1.6.0.6 may allow a privileged user to potentially enable a denial of service via local access."}, {"Reference": "CVE-2021-0208", "Description": "An improper input validation vulnerability in the Routing Protocol Daemon (RPD) service of Juniper Networks Junos OS allows an attacker to send a malformed RSVP packet when bidirectional LSPs are in use, which when received by an egress router crashes the RPD causing a Denial of Service (DoS) condition. Continued receipt of the packet will sustain the Denial of Service. This issue affects: Juniper Networks Junos OS: All versions prior to 17.3R3-S10 except 15.1X49-D240 for SRX series; 17.4 versions prior to 17.4R3-S2; 18.1 versions prior to 18.1R3-S10; 18.2 versions prior to 18.2R2-S7, 18.2R3-S4; 18.3 versions prior to 18.3R3-S2; 18.4 versions prior to 18.4R1-S8, 18.4R2-S6, 18.4R3-S2; 19.1 versions prior to 19.1R1-S5, 19.1R3-S3; 19.2 versions prior to 19.2R3; 19.3 versions prior to 19.3R2-S5, 19.3R3; 19.4 versions prior to 19.4R2-S2, 19.4R3-S1; 20.1 versions prior to 20.1R1-S4, 20.1R2; 15.1X49 versions prior to 15.1X49-D240 on SRX Series. Juniper Networks Junos OS Evolved: 19.3 versions prior to 19.3R2-S5-EVO; 19.4 versions prior to 19.4R2-S2-EVO; 20.1 versions prior to 20.1R1-S4-EVO."}, {"Reference": "CVE-2021-0214", "Description": "A vulnerability in the distributed or centralized periodic packet management daemon (PPMD) of Juniper Networks Junos OS may cause receipt of a malformed packet to crash and restart the PPMD process, leading to network destabilization, service interruption, and a Denial of Service (DoS) condition. Continued receipt and processing of these malformed packets will repeatedly crash the PPMD process and sustain the Denial of Service (DoS) condition. Due to the nature of the specifically crafted packet, exploitation of this issue requires direct, adjacent connectivity to the vulnerable component. This issue affects Juniper Networks Junos OS: 17.3 versions prior to 17.3R3-S11; 17.4 versions prior to 17.4R2-S12, 17.4R3-S4; 18.1 versions prior to 18.1R3-S12; 18.2 versions prior to 18.2R2-S8, 18.2R3-S7; 18.3 versions prior to 18.3R3-S4; 18.4 versions prior to 18.4R1-S8, 18.4R2-S7, 18.4R3-S6; 19.1 versions prior to 19.1R1-S6, 19.1R2-S2, 19.1R3-S4; 19.2 versions prior to 19.2R1-S5, 19.2R3-S1; 19.3 versions prior to 19.3R2-S5, 19.3R3-S1; 19.4 versions prior to 19.4R2-S2, 19.4R3; 20.1 versions prior to 20.1R2; 20.2 versions prior to 20.2R1-S2, 20.2R2."}, {"Reference": "CVE-2021-0267", "Description": "An Improper Input Validation vulnerability in the active-lease query portion in JDHCPD's DHCP Relay Agent of Juniper Networks Junos OS allows an attacker to cause a Denial of Service (DoS) by sending a crafted DHCP packet to the device thereby crashing the jdhcpd DHCP service. This is typically configured for Broadband Subscriber Sessions. Continued receipt and processing of this crafted packet will create a sustained Denial of Service (DoS) condition. This issue affects Juniper Networks Junos OS: 19.4 versions prior to 19.4R3-S1; 20.1 versions prior to 20.1R2-S1, 20.1R3; 20.2 versions prior to 20.2R3; 20.3 versions prior to 20.3R2. This issue does not affect Junos OS Evolved."}, {"Reference": "CVE-2021-0278", "Description": "An Improper Input Validation vulnerability in J-Web of Juniper Networks Junos OS allows a locally authenticated attacker to escalate their privileges to root over the target device. junos:18.3R3-S5 junos:18.4R3-S9 junos:19.1R3-S6 junos:19.3R2-S6 junos:19.3R3-S3 junos:19.4R1-S4 junos:19.4R3-S4 junos:20.1R2-S2 junos:20.1R3 junos:20.2R3-S1 junos:20.3X75-D20 junos:20.3X75-D30 junos:20.4R2-S1 junos:20.4R3 junos:21.1R1-S1 junos:21.1R2 junos:21.2R1 junos:21.3R1 This issue affects: Juniper Networks Junos OS 19.3 versions 19.3R1 and above prior to 19.3R2-S6, 19.3R3-S3; 19.4 versions prior to 19.4R3-S5; 20.1 versions prior to 20.1R2-S2, 20.1R3-S1; 20.2 versions prior to 20.2R3-S2; 20.3 versions prior to 20.3R3; 20.4 versions prior to 20.4R2-S1, 20.4R3; 21.1 versions prior to 21.1R1-S1, 21.1R2. This issue does not affect Juniper Networks Junos OS versions prior to 19.3R1."}, {"Reference": "CVE-2021-0313", "Description": "In isWordBreakAfter of LayoutUtils.cpp, there is a possible way to slow or crash a TextView due to improper input validation. This could lead to remote denial of service with no additional execution privileges needed. User interaction is not needed for exploitation. Product: Android; Versions: Android-9, Android-10, Android-11, Android-8.0, Android-8.1; Android ID: A-170968514."}, {"Reference": "CVE-2021-0350", "Description": "In ged, there is a possible system crash due to an improper input validation. This could lead to local denial of service with System execution privileges needed. User interaction is not needed for exploitation. Product: Android; Versions: Android-8.1, Android-9, Android-10, Android-11; Patch ID: ALPS05342338."}, {"Reference": "CVE-2021-0416", "Description": "In memory management driver, there is a possible system crash due to improper input validation. This could lead to local denial of service with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05403499; Issue ID: ALPS05336700."}, {"Reference": "CVE-2021-0418", "Description": "In memory management driver, there is a possible system crash due to improper input validation. This could lead to local denial of service with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05403499; Issue ID: ALPS05336706."}, {"Reference": "CVE-2021-0419", "Description": "In memory management driver, there is a possible system crash due to improper input validation. This could lead to local denial of service with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05403499; Issue ID: ALPS05336713."}, {"Reference": "CVE-2021-0511", "Description": "In Dex2oat of dex2oat.cc, there is a possible way to inject bytecode into an app due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-9 Android-10 Android-11Android ID: A-178055795"}, {"Reference": "CVE-2021-1053", "Description": "NVIDIA GPU Display Driver for Windows and Linux, all versions, contains a vulnerability in the kernel mode layer (nvlddmkm.sys) handler for DxgkDdiEscape or IOCTL in which improper validation of a user pointer may lead to denial of service."}, {"Reference": "CVE-2021-1065", "Description": "NVIDIA vGPU manager contains a vulnerability in the vGPU plugin, in which input data is not validated, which may lead to tampering of data or denial of service. This affects vGPU version 8.x (prior to 8.6) and version 11.0 (prior to 11.3)."}, {"Reference": "CVE-2021-1080", "Description": "NVIDIA vGPU software contains a vulnerability in the Virtual GPU Manager (vGPU plugin), in which certain input data is not validated, which may lead to information disclosure, tampering of data, or denial of service. This affects vGPU version 12.x (prior to 12.2), version 11.x (prior to 11.4) and version 8.x (prior 8.7)."}, {"Reference": "CVE-2021-21123", "Description": "Insufficient data validation in File System API in Google Chrome prior to 88.0.4324.96 allowed a remote attacker to bypass filesystem restrictions via a crafted HTML page."}, {"Reference": "CVE-2021-21968", "Description": "A file write vulnerability exists in the OTA update task functionality of Sealevel Systems, Inc. SeaConnect 370W v1.3.34. A specially-crafted MQTT payload can lead to arbitrary file overwrite. An attacker can perform a man-in-the-middle attack to trigger this vulnerability."}, {"Reference": "CVE-2021-22277", "Description": "Improper Input Validation vulnerability in ABB 800xA, Control Software for AC 800M, Control Builder Safe, Compact Product Suite - Control and I/O, ABB Base Software for SoftControl allows an attacker to cause the denial of service."}, {"Reference": "CVE-2021-22286", "Description": "Improper Input Validation vulnerability in the ABB SPIET800 and PNI800 module allows an attacker to cause the denial of service or make the module unresponsive."}, {"Reference": "CVE-2021-22288", "Description": "Improper Input Validation vulnerability in the ABB SPIET800 and PNI800 module allows an attacker to cause the denial of service or make the module unresponsive."}, {"Reference": "CVE-2021-22289", "Description": "Improper Input Validation vulnerability in the project upload mechanism in B&R Automation Studio version >=4.0 may allow an unauthenticated network attacker to execute code."}, {"Reference": "CVE-2021-22787", "Description": "A CWE-20: Improper Input Validation vulnerability exists that could cause denial of service of the device when an attacker sends a specially crafted HTTP request to the web server of the device. Affected Product: Modicon M340 CPUs: BMXP34 (Versions prior to V3.40), Modicon M340 X80 Ethernet Communication Modules: BMXNOE0100 (H), BMXNOE0110 (H), BMXNOC0401, BMXNOR0200H RTU (All Versions), Modicon Premium Processors with integrated Ethernet (Copro): TSXP574634, TSXP575634, TSXP576634 (All Versions), Modicon Quantum Processors with Integrated Ethernet (Copro): 140CPU65xxxxx (All Versions), Modicon Quantum Communication Modules: 140NOE771x1, 140NOC78x00, 140NOC77101 (All Versions), Modicon Premium Communication Modules: TSXETY4103, TSXETY5103 (All Versions)"}, {"Reference": "CVE-2021-22800", "Description": "A CWE-20: Improper Input Validation vulnerability exists that could cause a Denial of Service when a crafted packet is sent to the controller over network port 1105/TCP. Affected Product: Modicon M218 Logic Controller (V5.1.0.6 and prior)"}, {"Reference": "CVE-2021-22826", "Description": "A CWE-20: Improper Input Validation vulnerability exists that could cause arbitrary code execution when the user visits a page containing the injected payload. This CVE is unique from CVE-2021-22827. Affected Product: EcoStruxure? Power Monitoring Expert 9.0 and prior versions"}, {"Reference": "CVE-2021-22827", "Description": "A CWE-20: Improper Input Validation vulnerability exists that could cause arbitrary code execution when the user visits a page containing the injected payload. This CVE is unique from CVE-2021-22826. Affected Product: EcoStruxure? Power Monitoring Expert 9.0 and prior versions"}, {"Reference": "CVE-2021-24209", "Description": "The WP Super Cache WordPress plugin before 1.7.2 was affected by an authenticated (admin+) RCE in the settings page due to input validation failure and weak $cache_path check in the WP Super Cache Settings -> Cache Location option. Direct access to the wp-cache-config.php file is not prohibited, so this vulnerability can be exploited for a web shell injection."}, {"Reference": "CVE-2021-25510", "Description": "An improper validation vulnerability in FilterProvider prior to SMR Dec-2021 Release 1 allows local arbitrary code execution."}, {"Reference": "CVE-2021-25512", "Description": "An improper validation vulnerability in telephony prior to SMR Dec-2021 Release 1 allows attackers to launch certain activities."}, {"Reference": "CVE-2021-25517", "Description": "An improper input validation vulnerability in LDFW prior to SMR Dec-2021 Release 1 allows attackers to perform arbitrary code execution."}, {"Reference": "CVE-2021-25745", "Description": "A security issue was discovered in ingress-nginx where a user that can create or update ingress objects can use the spec.rules[].http.paths[].path field of an Ingress object (in the networking.k8s.io or extensions API group) to obtain the credentials of the ingress-nginx controller. In the default configuration, that credential has access to all secrets in the cluster."}, {"Reference": "CVE-2021-26251", "Description": "Improper input validation in the Intel(R) Distribution of OpenVINO(TM) Toolkit may allow an authenticated user to potentially enable denial of service via network access."}, {"Reference": "CVE-2021-26398", "Description": "Insufficient input validation in SYS_KEY_DERIVE system call in a compromised user application or ABL may allow an attacker to corrupt ASP (AMD Secure Processor) OS memory which may lead to potential arbitrary code execution. "}, {"Reference": "CVE-2021-26404", "Description": "Improper input validation and bounds checking in SEV firmware may leak scratch buffer bytes leading to potential information disclosure. "}, {"Reference": "CVE-2021-26613", "Description": "improper input validation vulnerability in nexacro permits copying file to the startup folder using rename method."}, {"Reference": "CVE-2021-26617", "Description": "This issues due to insufficient verification of the various input values from user\u2019s input. The vulnerability allows remote attackers to execute malicious code in Firstmall via navercheckout_add function."}, {"Reference": "CVE-2021-26618", "Description": "An improper input validation leading to arbitrary file creation was discovered in ToWord of ToOffice. Remote attackers use this vulnerability to execute arbitrary file included malicious code."}, {"Reference": "CVE-2021-26624", "Description": "An local privilege escalation vulnerability due to a \"runasroot\" command in eScan Anti-Virus. This vulnerability is due to invalid arguments and insufficient execution conditions related to \"runasroot\" command. This vulnerability can induce remote attackers to exploit root privileges by manipulating parameter values."}, {"Reference": "CVE-2021-26639", "Description": "This vulnerability is caused by the lack of validation of input values for specific functions if WISA Smart Wing CMS. Remote attackers can use this vulnerability to leak all files in the server without logging in system."}, {"Reference": "CVE-2021-27420", "Description": "GE UR firmware versions prior to version 8.1x web server task does not properly handle receipt of unsupported HTTP verbs, resulting in the web server becoming temporarily unresponsive after receiving a series of unsupported HTTP requests. When unresponsive, the web server is inaccessible. By itself, this is not particularly significant as the relay remains effective in all other functionality and communication channels."}, {"Reference": "CVE-2021-28655", "Description": "The improper Input Validation vulnerability in \"\u201dMove folder to Trash\u201d feature of Apache Zeppelin allows an attacker to delete the arbitrary files. This issue affects Apache Zeppelin Apache Zeppelin version 0.9.0 and prior versions."}, {"Reference": "CVE-2021-29845", "Description": "IBM Security Guardium Insights 3.0 could allow an authenticated user to perform unauthorized actions due to improper input validation. IBM X-Force ID: 205255."}, {"Reference": "CVE-2021-30278", "Description": "Improper input validation in TrustZone memory transfer interface can lead to information disclosure in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Voice & Music, Snapdragon Wired Infrastructure and Networking"}, {"Reference": "CVE-2021-30285", "Description": "Improper validation of memory region in Hypervisor can lead to incorrect region mapping in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Voice & Music, Snapdragon Wired Infrastructure and Networking"}, {"Reference": "CVE-2021-30338", "Description": "Improper input validation in TrustZone memory transfer interface can lead to information disclosure in Snapdragon Compute"}, {"Reference": "CVE-2021-30589", "Description": "Insufficient validation of untrusted input in Sharing in Google Chrome prior to 92.0.4515.107 allowed a remote attacker to bypass navigation restrictions via a crafted click-to-call link."}, {"Reference": "CVE-2021-32545", "Description": "Pexip Infinity before 26 allows remote denial of service because of missing RTMP input validation."}, {"Reference": "CVE-2021-32586", "Description": "An improper input validation vulnerability in the web server CGI facilities of FortiMail before 7.0.1 may allow an unauthenticated attacker to alter the environment of the underlying script interpreter via specifically crafted HTTP requests."}, {"Reference": "CVE-2021-32970", "Description": "Data can be copied without validation in the built-in web server in Moxa NPort IAW5000A-I/O series firmware version 2.2 or earlier, which may allow a remote attacker to cause denial-of-service conditions."}, {"Reference": "CVE-2021-32974", "Description": "Improper input validation in the built-in web server in Moxa NPort IAW5000A-I/O series firmware version 2.2 or earlier may allow a remote attacker to execute commands."}, {"Reference": "CVE-2021-33108", "Description": "Improper input validation in the Intel(R) In-Band Manageability software before version 2.13.0 may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2021-33110", "Description": "Improper input validation for some Intel(R) Wireless Bluetooth(R) products and Killer(TM) Bluetooth(R) products in Windows 10 and 11 before version 22.80 may allow an unauthenticated user to potentially enable denial of service via adjacent access."}, {"Reference": "CVE-2021-33113", "Description": "Improper input validation for some Intel(R) PROSet/Wireless WiFi in multiple operating systems and Killer(TM) WiFi in Windows 10 and 11 may allow an unauthenticated user to potentially enable denial of service or information disclosure via adjacent access."}, {"Reference": "CVE-2021-33114", "Description": "Improper input validation for some Intel(R) PROSet/Wireless WiFi in multiple operating systems and Killer(TM) WiFi in Windows 10 and 11 may allow an authenticated user to potentially enable denial of service via adjacent access."}, {"Reference": "CVE-2021-33115", "Description": "Improper input validation for some Intel(R) PROSet/Wireless WiFi in UEFI may allow an unauthenticated user to potentially enable escalation of privilege via adjacent access."}, {"Reference": "CVE-2021-33155", "Description": "Improper input validation in firmware for some Intel(R) Wireless Bluetooth(R) and Killer(TM) Bluetooth(R) products before version 22.100 may allow an authenticated user to potentially enable denial of service via adjacent access."}, {"Reference": "CVE-2021-33498", "Description": "Pexip Infinity before 26 allows remote denial of service because of missing H.264 input validation (issue 1 of 2)."}, {"Reference": "CVE-2021-33499", "Description": "Pexip Infinity before 26 allows remote denial of service because of missing H.264 input validation (issue 2 of 2)."}, {"Reference": "CVE-2021-3422", "Description": "The lack of validation of a key-value field in the Splunk-to-Splunk protocol results in a denial-of-service in Splunk Enterprise instances configured to index Universal Forwarder traffic. The vulnerability impacts Splunk Enterprise versions before 7.3.9, 8.0 versions before 8.0.9, and 8.1 versions before 8.1.3. It does not impact Universal Forwarders. When Splunk forwarding is secured using TLS or a Token, the attack requires compromising the certificate or token, or both. Implementation of either or both reduces the severity to Medium."}, {"Reference": "CVE-2021-34994", "Description": "This vulnerability allows remote attackers to execute arbitrary code on affected installations of Commvault CommCell 11.22.22. Although authentication is required to exploit this vulnerability, the existing authentication mechanism can be bypassed. The specific flaw exists within the DataProvider class. The issue results from the lack of proper validation of a user-supplied string before executing it as JavaScript code. An attacker can leverage this vulnerability to escape the JavaScript sandbox and execute Java code in the context of NETWORK SERVICE. Was ZDI-CAN-13755."}, {"Reference": "CVE-2021-35109", "Description": "Possible address manipulation from APP-NS while APP-S is configuring an RG where it tries to merge the address ranges in Snapdragon Connectivity, Snapdragon Mobile"}, {"Reference": "CVE-2021-35116", "Description": "APK can load a crafted model into the CDSP which can lead to a compromise of CDSP and other APK`s data executing there in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Wearables"}, {"Reference": "CVE-2021-35122", "Description": "Non-secure region can try modifying RG permissions of IO space xPUs due to improper input validation in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Wearables"}, {"Reference": "CVE-2021-35531", "Description": "Improper Input Validation vulnerability in a particular configuration setting field of Hitachi Energy TXpert Hub CoreTec 4 product, allows an attacker with access to an authorized user with ADMIN or ENGINEER role rights to inject an OS command that is executed by the system. This issue affects: Hitachi Energy TXpert Hub CoreTec 4 version 2.0.0; 2.0.1; 2.1.0; 2.1.1; 2.1.2; 2.1.3; 2.2.0; 2.2.1."}, {"Reference": "CVE-2021-35969", "Description": "Pexip Infinity before 26 allows temporary remote Denial of Service (abort) because of missing call-setup input validation."}, {"Reference": "CVE-2021-36342", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution in SMRAM."}, {"Reference": "CVE-2021-36343", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution in SMRAM."}, {"Reference": "CVE-2021-3675", "Description": "Improper Input Validation vulnerability in synaTEE.signed.dll of Synaptics Fingerprint Driver allows a local authorized attacker to overwrite a heap tag, with potential loss of confidentiality. This issue affects: Synaptics Synaptics Fingerprint Driver 5.1.xxx.26 versions prior to xxx=340 on x86/64; 5.2.xxxx.26 versions prior to xxxx=3541 on x86/64; 5.2.2xx.26 versions prior to xx=29 on x86/64; 5.2.3xx.26 versions prior to xx=25 on x86/64; 5.3.xxxx.26 versions prior to xxxx=3543 on x86/64; 5.5.xx.1058 versions prior to xx=44 on x86/64; 5.5.xx.1102 versions prior to xx=34 on x86/64; 5.5.xx.1116 versions prior to xx=14 on x86/64; 6.0.xx.1104 versions prior to xx=50 on x86/64; 6.0.xx.1108 versions prior to xx=31 on x86/64; 6.0.xx.1111 versions prior to xx=58 on x86/64."}, {"Reference": "CVE-2021-37039", "Description": "There is an Input verification vulnerability in Huawei Smartphone.Successful exploitation of this vulnerability may cause Bluetooth DoS."}, {"Reference": "CVE-2021-37047", "Description": "There is an Input verification vulnerability in Huawei Smartphone.Successful exploitation of this vulnerability may cause some services to restart."}, {"Reference": "CVE-2021-37048", "Description": "There is a Improper Input Validation vulnerability in Huawei Smartphone.Successful exploitation of this vulnerability may lead to fake visitors to control PC,play a video,etc."}, {"Reference": "CVE-2021-37060", "Description": "There is a Improper Input Validation vulnerability in Huawei Smartphone.Successful exploitation of this vulnerability may lead to SAMGR Heap Address Leakage."}, {"Reference": "CVE-2021-37079", "Description": "There is a Improper Input Validation vulnerability in Huawei Smartphone.Successful exploitation of this vulnerability may lead to delete arbitrary file by system_app permission."}, {"Reference": "CVE-2021-37081", "Description": "There is a Improper Input Validation vulnerability in Huawei Smartphone.Successful exploitation of this vulnerability may lead to nearby crash."}, {"Reference": "CVE-2021-37084", "Description": "There is a Improper Input Validation vulnerability in Huawei Smartphone.Successful exploitation of this vulnerability may lead to malicious invoking other functions of the Smart Assistant through text messages."}, {"Reference": "CVE-2021-37094", "Description": "There is a Improper Input Validation vulnerability in Huawei Smartphone.Successful exploitation of this vulnerability may lead to system denial of service."}, {"Reference": "CVE-2021-37096", "Description": "There is a Improper Input Validation vulnerability in Huawei Smartphone.Successful exploitation of this vulnerability may lead to user privacy disclosed."}, {"Reference": "CVE-2021-37116", "Description": "PCManager has a Weaknesses Introduced During Design vulnerability .Successful exploitation of this vulnerability may cause that the PIN of the subscriber is changed."}, {"Reference": "CVE-2021-37150", "Description": "Improper Input Validation vulnerability in header parsing of Apache Traffic Server allows an attacker to request secure resources. This issue affects Apache Traffic Server 8.0.0 to 9.1.2."}, {"Reference": "CVE-2021-37788", "Description": "A vulnerability in the web UI of Gurock TestRail v5.3.0.3603 could allow an unauthenticated, remote attacker to affect the integrity of a device via a clickjacking attack. The vulnerability is due to insufficient input validation of iFrame data in HTTP requests that are sent to an affected device. An attacker could exploit this vulnerability by sending crafted HTTP packets with malicious iFrame data. A successful exploit could allow the attacker to perform a clickjacking attack where the user is tricked into clicking a malicious link."}, {"Reference": "CVE-2021-3781", "Description": "A trivial sandbox (enabled with the `-dSAFER` option) escape flaw was found in the ghostscript interpreter by injecting a specially crafted pipe command. This flaw allows a specially crafted document to execute arbitrary commands on the system in the context of the ghostscript interpreter. The highest threat from this vulnerability is to confidentiality, integrity, as well as system availability."}, {"Reference": "CVE-2021-37863", "Description": "Mattermost 6.0 and earlier fails to sufficiently validate parameters during post creation, which allows authenticated attackers to cause a client-side crash of the web application via a maliciously crafted post."}, {"Reference": "CVE-2021-37909", "Description": "WriteRegistry function in TSSServiSign component does not filter and verify users\u2019 input, remote attackers can rewrite to the registry without permissions thus perform hijack attacks to execute arbitrary code."}, {"Reference": "CVE-2021-37996", "Description": "Insufficient validation of untrusted input Downloads in Google Chrome prior to 95.0.4638.54 allowed a remote attacker to bypass navigation restrictions via a malicious file."}, {"Reference": "CVE-2021-38304", "Description": "Improper input validation in the National Instruments NI-PAL driver in versions 20.0.0 and prior may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2021-38485", "Description": "The affected product is vulnerable to improper input validation in the restore file. This enables an attacker to provide malicious config files to replace any file on disk."}, {"Reference": "CVE-2021-38910", "Description": "IBM DataPower Gateway V10CD, 10.0.1, and 2108.4.1 could allow a remote attacker to bypass security restrictions, caused by the improper validation of input. By sending a specially crafted JSON message, an attacker could exploit this vulnerability to modify structure and fields. IBM X-Force ID: 209824."}, {"Reference": "CVE-2021-38957", "Description": "IBM Security Verify 10.0.0, 10.0.1.0, and 10.0.2.0 could disclose sensitive information due to hazardous input validation during QR code generation. IBM X-Force ID: 212040."}, {"Reference": "CVE-2021-3943", "Description": "A flaw was found in Moodle in versions 3.11 to 3.11.3, 3.10 to 3.10.7, 3.9 to 3.9.10 and earlier unsupported versions. A remote code execution risk when restoring backup files was identified."}, {"Reference": "CVE-2021-3970", "Description": "A potential vulnerability in LenovoVariable SMI Handler due to insufficient validation in some Lenovo Notebook models BIOS may allow an attacker with local access and elevated privileges to execute arbitrary code."}, {"Reference": "CVE-2021-39701", "Description": "In serviceConnection of ControlsProviderLifecycleManager.kt, there is a possible way to keep service running in foreground without notification or permission due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-11 Android-12Android ID: A-212286849"}, {"Reference": "CVE-2021-39740", "Description": "In Messaging, there is a possible way to bypass attachment restrictions due to improper input validation. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12LAndroid ID: A-209965112"}, {"Reference": "CVE-2021-39763", "Description": "In Settings, there is a possible way to make the user enable WiFi due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12LAndroid ID: A-199176115"}, {"Reference": "CVE-2021-39764", "Description": "In Settings, there is a possible way to display an incorrect app name due to improper input validation. This could lead to local escalation of privilege via app spoofing with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-12LAndroid ID: A-170642995"}, {"Reference": "CVE-2021-39771", "Description": "In Settings, there is a possible way to misrepresent which app wants to add a wifi network due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-12LAndroid ID: A-198661951"}, {"Reference": "CVE-2021-39997", "Description": "There is a vulnerability of unstrict input parameter verification in the audio assembly.Successful exploitation of this vulnerability may cause out-of-bounds access."}, {"Reference": "CVE-2021-40365", "Description": "Affected devices don't process correctly certain special crafted packets sent to port 102/tcp, which could allow an attacker to cause a denial of service in the device."}, {"Reference": "CVE-2021-4047", "Description": "The release of OpenShift 4.9.6 included four CVE fixes for the haproxy package, however the patch for CVE-2021-39242 was missing. This issue only affects Red Hat OpenShift 4.9."}, {"Reference": "CVE-2021-4211", "Description": "A potential vulnerability in the SMI callback function used in the SMBIOS event log driver in some Lenovo Desktop, ThinkStation, and ThinkEdge models may allow an attacker with local access and elevated privileges to execute arbitrary code."}, {"Reference": "CVE-2021-4212", "Description": "A potential vulnerability in the SMI callback function used in the Legacy BIOS mode driver in some Lenovo Notebook models may allow an attacker with local access and elevated privileges to execute arbitrary code."}, {"Reference": "CVE-2021-42121", "Description": "Insufficient Input Validation in Web Applications operating on Business-DNA Solutions GmbH\u2019s TopEase\u00ae Platform Version <= 7.1.27 on an object\u2019s date attribute(s) allows an authenticated remote attacker with Object Modification privileges to insert an unexpected format into date fields, which leads to breaking the object page that the date field is present."}, {"Reference": "CVE-2021-42122", "Description": "Insufficient Input Validation in Web Applications operating on Business-DNA Solutions GmbH\u2019s TopEase\u00ae Platform Version <= 7.1.27 on an object\u2019s attributes with numeric format allows an authenticated remote attacker with Object Modification privileges to insert an unexpected format, which makes the affected attribute non-editable."}, {"Reference": "CVE-2021-4219", "Description": "A flaw was found in ImageMagick. The vulnerability occurs due to improper use of open functions and leads to a denial of service. This flaw allows an attacker to crash the system."}, {"Reference": "CVE-2021-42555", "Description": "Pexip Infinity before 26.2 allows temporary remote Denial of Service (abort) because of missing call-setup input validation."}, {"Reference": "CVE-2021-42786", "Description": "It was discovered that the SteelCentral AppInternals Dynamic Sampling Agent (DSA) has Remote Code Execution vulnerabilities in multiple instances of the API requests. The affected endpoints do not have any input validation of the user's input that allowed a malicious payload to be injected."}, {"Reference": "CVE-2021-43548", "Description": "Patient Information Center iX (PIC iX) Versions C.02 and C.03 receives input or data, but does not validate or incorrectly validates that the input has the properties required to process the data safely and correctly."}, {"Reference": "CVE-2021-43588", "Description": "Dell EMC Data Protection Central version 19.5 contains an Improper Input Validation Vulnerability. A remote unauthenticated attacker could potentially exploit this vulnerability, leading to denial of service."}, {"Reference": "CVE-2021-43762", "Description": "AEM's Cloud Service offering, as well as version 6.5.10.0 (and below) are affected by a dispatcher bypass vulnerability that could be abused to evade security controls. Sensitive areas of the web application may be exposed through exploitation of the vulnerability."}, {"Reference": "CVE-2021-44040", "Description": "Improper Input Validation vulnerability in request line parsing of Apache Traffic Server allows an attacker to send invalid requests. This issue affects Apache Traffic Server 8.0.0 to 8.1.3 and 9.0.0 to 9.1.1."}, {"Reference": "CVE-2021-44221", "Description": "A vulnerability has been identified in SIMATIC eaSie Core Package (All versions < V22.00). The affected systems do not properly validate input that is sent to the underlying message passing framework. This could allow an remote attacker to trigger a denial of service of the affected system."}, {"Reference": "CVE-2021-44454", "Description": "Improper input validation in a third-party component for Intel(R) Quartus(R) Prime Pro Edition before version 21.3 may allow an authenticated user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2021-44462", "Description": "This vulnerability can be exploited by parsing maliciously crafted project files with Horner Automation Cscape EnvisionRV v4.50.3.1 and prior. The issues result from the lack of proper validation of user-supplied data, which can result in reads and writes past the end of allocated data structures. User interaction is required to exploit this vulnerability as an attacker must trick a valid user to open a malicious HMI project file."}, {"Reference": "CVE-2021-44545", "Description": "Improper input validation for some Intel(R) PROSet/Wireless WiFi and Killer(TM) WiFi products may allow an unauthenticated user to potentially enable denial of service via adjacent access."}, {"Reference": "CVE-2021-44734", "Description": "Embedded web server input sanitization vulnerability in Lexmark devices through 2021-12-07, which can which can lead to remote code execution on the device."}, {"Reference": "CVE-2021-44769", "Description": "An improper input validation vulnerability in the TLS certificate generation function allows an attacker to cause a Denial-of-Service (DoS) condition which can only be reverted via a factory reset. This issue affects: Lanner Inc IAC-AST2500A standard firmware version 1.10.0."}, {"Reference": "CVE-2021-45916", "Description": "The programming function of Shockwall system has an improper input validation vulnerability. An authenticated attacker within the local area network can send malicious response to the server to disrupt the service partially."}, {"Reference": "CVE-2021-46767", "Description": "Insufficient input validation in the ASP may allow an attacker with physical access, unauthorized write access to memory potentially leading to a loss of integrity or denial of service. "}, {"Reference": "CVE-2021-46779", "Description": "Insufficient input validation in SVC_ECC_PRIMITIVE system call in a compromised user application or ABL may allow an attacker to corrupt ASP (AMD Secure Processor) OS memory which may lead to potential loss of integrity and availability. "}, {"Reference": "CVE-2021-46791", "Description": "Insufficient input validation during parsing of the System Management Mode (SMM) binary may allow a maliciously crafted SMM executable binary to corrupt Dynamic Root of Trust for Measurement (DRTM) user application memory that may result in a potential denial of service. "}, {"Reference": "CVE-2022-0484", "Description": "Lack of validation of URLs causes Mirantis Container Cloud Lens Extension before v3.1.1 to open external programs other than the default browser to perform sign on to a new cluster. An attacker could host a webserver which serves a malicious Mirantis Container Cloud configuration file and induce the victim to add a new cluster via its URL. This issue affects: Mirantis Mirantis Container Cloud Lens Extension v3 versions prior to v3.1.1."}, {"Reference": "CVE-2022-0550", "Description": "Improper Input Validation vulnerability in custom report logo upload in Nozomi Networks Guardian, and CMC allows an authenticated attacker with admin or report manager roles to execute unattended commands on the appliance using web server user privileges. This issue affects: Nozomi Networks Guardian versions prior to 22.0.0. Nozomi Networks CMC versions prior to 22.0.0."}, {"Reference": "CVE-2022-0551", "Description": "Improper Input Validation vulnerability in project file upload in Nozomi Networks Guardian and CMC allows an authenticated attacker with admin or import manager roles to execute unattended commands on the appliance using web server user privileges. This issue affects: Nozomi Networks Guardian versions prior to 22.0.0. Nozomi Networks CMC versions prior to 22.0.0."}, {"Reference": "CVE-2022-1053", "Description": "Keylime does not enforce that the agent registrar data is the same when the tenant uses it for validation of the EK and identity quote and the verifier for validating the integrity quote. This allows an attacker to use one AK, EK pair from a real TPM to pass EK validation and give the verifier an AK of a software TPM. A successful attack breaks the entire chain of trust because a not validated AK is used by the verifier. This issue is worse if the validation happens first and then the agent gets added to the verifier because the timing is easier and the verifier does not validate the regcount entry being equal to 1,"}, {"Reference": "CVE-2022-1406", "Description": "Improper input validation in GitLab CE/EE affecting all versions from 8.12 prior to 14.8.6, all versions from 14.9.0 prior to 14.9.4, and 14.10.0 allows a Developer to read protected Group or Project CI/CD variables by importing a malicious project"}, {"Reference": "CVE-2022-1727", "Description": "Improper Input Validation in GitHub repository jgraph/drawio prior to 18.0.6."}, {"Reference": "CVE-2022-20129", "Description": "In registerPhoneAccount of PhoneAccountRegistrar.java, there is a possible way to prevent the user from selecting a phone account due to improper input validation. This could lead to local denial of service with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-217934478"}, {"Reference": "CVE-2022-20134", "Description": "In readArguments of CallSubjectDialog.java, there is a possible way to trick the user to call the wrong phone number due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-218341397"}, {"Reference": "CVE-2022-20156", "Description": "In unflatten of GraphicBuffer.cpp, there is a possible arbitrary code execution due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-212803946References: N/A"}, {"Reference": "CVE-2022-20186", "Description": "In kbase_mem_alias of mali_kbase_mem_linux.c, there is a possible arbitrary code execution due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-215001024References: N/A"}, {"Reference": "CVE-2022-20205", "Description": "In isFileUri of FileUtil.java, there is a possible way to bypass the check for a file:// scheme due to improper input validation. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12LAndroid ID: A-215212561"}, {"Reference": "CVE-2022-20241", "Description": "In Messaging, there is a possible way to attach a private file to an SMS message due to improper input validation. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-217185011"}, {"Reference": "CVE-2022-20266", "Description": "In Companion, there is a possible way to keep a service running with elevated importance without showing foreground service notification due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-211757348"}, {"Reference": "CVE-2022-20314", "Description": "In KeyChain, there is a possible spoof keychain chooser activity request due to improper input validation. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-191876118"}, {"Reference": "CVE-2022-20338", "Description": "In HierarchicalUri.readFrom of Uri.java, there is a possible way to craft a malformed Uri object due to improper input validation. This could lead to a local escalation of privilege, preventing processes from validating URIs correctly, with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-11 Android-12 Android-12LAndroid ID: A-171966843"}, {"Reference": "CVE-2022-20350", "Description": "In onCreate of NotificationAccessConfirmationActivity.java, there is a possible way to trick the victim to grant notification access to the wrong app due to improper input validation. This could lead to local information disclosure with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-228178437"}, {"Reference": "CVE-2022-20353", "Description": "In onSaveRingtone of DefaultRingtonePreference.java, there is a possible inappropriate file read due to improper input validation. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-221041256"}, {"Reference": "CVE-2022-20355", "Description": "In get of PacProxyService.java, there is a possible system service crash due to improper input validation. This could lead to local denial of service with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-219498290"}, {"Reference": "CVE-2022-20459", "Description": "In (TBD) of (TBD), there is a possible way to redirect code execution due to improper input validation. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-239556260References: N/A"}, {"Reference": "CVE-2022-2047", "Description": "In Eclipse Jetty versions 9.4.0 thru 9.4.46, and 10.0.0 thru 10.0.9, and 11.0.0 thru 11.0.9 versions, the parsing of the authority segment of an http scheme URI, the Jetty HttpURI class improperly detects an invalid input as a hostname. This can lead to failures in a Proxy scenario."}, {"Reference": "CVE-2022-20512", "Description": "In navigateUpTo of Task.java, there is a possible way to launch an intent handler with a mismatched intent due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-238602879"}, {"Reference": "CVE-2022-20584", "Description": "In page_number of shared_mem.c, there is a possible code execution in secure world due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-238366009References: N/A"}, {"Reference": "CVE-2022-20585", "Description": "In valid_out_of_special_sec_dram_addr of drm_access_control.c, there is a possible EoP due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-238716781References: N/A"}, {"Reference": "CVE-2022-20586", "Description": "In valid_out_of_special_sec_dram_addr of drm_access_control.c, there is a possible EoP due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-238718854References: N/A"}, {"Reference": "CVE-2022-20587", "Description": "In ppmp_validate_wsm of drm_fw.c, there is a possible EoP due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-238720411References: N/A"}, {"Reference": "CVE-2022-20589", "Description": "In valid_va_secbuf_check of drm_access_control.c, there is a possible ID due to improper input validation. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-238841928References: N/A"}, {"Reference": "CVE-2022-20590", "Description": "In valid_va_sec_mfc_check of drm_access_control.c, there is a possible information disclosure due to improper input validation. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-238932493References: N/A"}, {"Reference": "CVE-2022-20592", "Description": "In ppmp_validate_secbuf of drm_fw.c, there is a possible information disclosure due to improper input validation. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-238976908References: N/A"}, {"Reference": "CVE-2022-20624", "Description": "A vulnerability in the Cisco Fabric Services over IP (CFSoIP) feature of Cisco NX-OS Software could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition on an affected device. This vulnerability is due to insufficient validation of incoming CFSoIP packets. An attacker could exploit this vulnerability by sending crafted CFSoIP packets to an affected device. A successful exploit could allow the attacker to cause the affected device to reload, resulting in a DoS condition."}, {"Reference": "CVE-2022-20676", "Description": "A vulnerability in the Tool Command Language (Tcl) interpreter of Cisco IOS XE Software could allow an authenticated, local attacker to escalate from privilege level 15 to root-level privileges. This vulnerability is due to insufficient input validation of data that is passed into the Tcl interpreter. An attacker could exploit this vulnerability by loading malicious Tcl code on an affected device. A successful exploit could allow the attacker to execute arbitrary commands as root. By default, Tcl shell access requires privilege level 15."}, {"Reference": "CVE-2022-20684", "Description": "A vulnerability in Simple Network Management Protocol (SNMP) trap generation for wireless clients of Cisco IOS XE Wireless Controller Software for the Catalyst 9000 Family could allow an unauthenticated, adjacent attacker to cause an affected device to unexpectedly reload, resulting in a denial of service (DoS) condition on the device. This vulnerability is due to a lack of input validation of the information used to generate an SNMP trap related to a wireless client connection event. An attacker could exploit this vulnerability by sending an 802.1x packet with crafted parameters during the wireless authentication setup phase of a connection. A successful exploit could allow the attacker to cause the device to reload, resulting in a DoS condition."}, {"Reference": "CVE-2022-20698", "Description": "A vulnerability in the OOXML parsing module in Clam AntiVirus (ClamAV) Software version 0.104.1 and LTS version 0.103.4 and prior versions could allow an unauthenticated, remote attacker to cause a denial of service condition on an affected device. The vulnerability is due to improper checks that may result in an invalid pointer read. An attacker could exploit this vulnerability by sending a crafted OOXML file to an affected device. An exploit could allow the attacker to cause the ClamAV scanning process to crash, resulting in a denial of service condition."}, {"Reference": "CVE-2022-20715", "Description": "A vulnerability in the remote access SSL VPN features of Cisco Adaptive Security Appliance (ASA) Software and Cisco Firepower Threat Defense (FTD) Software could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition on an affected device. This vulnerability is due to improper validation of errors that are logged as a result of client connections that are made using remote access VPN. An attacker could exploit this vulnerability by sending crafted requests to an affected system. A successful exploit could allow the attacker to cause the affected device to restart, resulting in a DoS condition."}, {"Reference": "CVE-2022-20745", "Description": "A vulnerability in the web services interface for remote access VPN features of Cisco Adaptive Security Appliance (ASA) Software and Cisco Firepower Threat Defense (FTD) Software could allow an unauthenticated, remote attacker to cause a denial of service (DoS) condition. This vulnerability is due to improper input validation when parsing HTTPS requests. An attacker could exploit this vulnerability by sending a crafted HTTPS request to an affected device. A successful exploit could allow the attacker to cause the device to reload, resulting in a DoS condition."}, {"Reference": "CVE-2022-20750", "Description": "A vulnerability in the checkpoint manager implementation of Cisco Redundancy Configuration Manager (RCM) for Cisco StarOS Software could allow an unauthenticated, remote attacker to cause the checkpoint manager process to restart upon receipt of malformed TCP data. This vulnerability is due to improper input validation of an ingress TCP packet. An attacker could exploit this vulnerability by sending crafted TCP data to the affected application. A successful exploit could allow the attacker to cause a denial of service (DoS) condition due to the checkpoint manager process restarting."}, {"Reference": "CVE-2022-20761", "Description": "A vulnerability in the integrated wireless access point (AP) packet processing of the Cisco 1000 Series Connected Grid Router (CGR1K) could allow an unauthenticated, adjacent attacker to cause a denial of service condition on an affected device. This vulnerability is due to insufficient input validation of received traffic. An attacker could exploit this vulnerability by sending crafted traffic to an affected device. A successful exploit could allow the attacker to cause the integrated AP to stop processing traffic, resulting in a DoS condition. It may be necessary to manually reload the CGR1K to restore AP operation."}, {"Reference": "CVE-2022-20822", "Description": "A vulnerability in the web-based management interface of Cisco Identity Services Engine (ISE) could allow an authenticated, remote attacker to read and delete files on an affected device. This vulnerability is due to insufficient validation of user-supplied input. An attacker could exploit this vulnerability by sending a crafted HTTP request that contains certain character sequences to an affected system. A successful exploit could allow the attacker to read or delete specific files on the device that their configured administrative level should not have access to. Cisco plans to release software updates that address this vulnerability."}, {"Reference": "CVE-2022-20825", "Description": "A vulnerability in the web-based management interface of Cisco Small Business RV110W, RV130, RV130W, and RV215W Routers could allow an unauthenticated, remote attacker to execute arbitrary code or cause an affected device to restart unexpectedly, resulting in a denial of service (DoS) condition. This vulnerability is due to insufficient user input validation of incoming HTTP packets. An attacker could exploit this vulnerability by sending a crafted request to the web-based management interface. A successful exploit could allow the attacker to execute arbitrary commands on an affected device using root-level privileges. Cisco has not released software updates that address this vulnerability."}, {"Reference": "CVE-2022-20841", "Description": "Multiple vulnerabilities in Cisco Small Business RV160, RV260, RV340, and RV345 Series Routers could allow an unauthenticated, remote attacker to execute arbitrary code or cause a denial of service (DoS) condition on an affected device. For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2022-20842", "Description": "Multiple vulnerabilities in Cisco Small Business RV160, RV260, RV340, and RV345 Series Routers could allow an unauthenticated, remote attacker to execute arbitrary code or cause a denial of service (DoS) condition on an affected device. For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2022-20850", "Description": "A vulnerability in the CLI of stand-alone Cisco IOS XE SD-WAN Software and Cisco SD-WAN Software could allow an authenticated, local attacker to delete arbitrary files from the file system of an affected device. This vulnerability is due to insufficient input validation. An attacker could exploit this vulnerability by injecting arbitrary file path information when using commands in the CLI of an affected device. A successful exploit could allow the attacker to delete arbitrary files from the file system of the affected device."}, {"Reference": "CVE-2022-20908", "Description": "Multiple vulnerabilities in Cisco Nexus Dashboard could allow an authenticated, local attacker to elevate privileges on an affected device. These vulnerabilities are due to insufficient input validation during CLI command execution on an affected device. An attacker could exploit these vulnerabilities by authenticating as the rescue-user and executing vulnerable CLI commands using a malicious payload. A successful exploit could allow the attacker to elevate privileges to root on an affected device."}, {"Reference": "CVE-2022-20909", "Description": "Multiple vulnerabilities in Cisco Nexus Dashboard could allow an authenticated, local attacker to elevate privileges on an affected device. These vulnerabilities are due to insufficient input validation during CLI command execution on an affected device. An attacker could exploit these vulnerabilities by authenticating as the rescue-user and executing vulnerable CLI commands using a malicious payload. A successful exploit could allow the attacker to elevate privileges to root on an affected device."}, {"Reference": "CVE-2022-20913", "Description": "A vulnerability in Cisco Nexus Dashboard could allow an authenticated, remote attacker to write arbitrary files on an affected device. This vulnerability is due to insufficient input validation in the web-based management interface of Cisco Nexus Dashboard. An attacker with Administrator credentials could exploit this vulnerability by uploading a crafted file. A successful exploit could allow the attacker to overwrite arbitrary files on an affected device."}, {"Reference": "CVE-2022-20919", "Description": "A vulnerability in the processing of malformed Common Industrial Protocol (CIP) packets that are sent to Cisco IOS Software and Cisco IOS XE Software could allow an unauthenticated, remote attacker to cause an affected device to unexpectedly reload, resulting in a denial of service (DoS) condition. This vulnerability is due to insufficient input validation during processing of CIP packets. An attacker could exploit this vulnerability by sending a malformed CIP packet to an affected device. A successful exploit could allow the attacker to cause the affected device to unexpectedly reload, resulting in a DoS condition."}, {"Reference": "CVE-2022-20924", "Description": "A vulnerability in the Simple Network Management Protocol (SNMP) feature of Cisco Adaptive Security Appliance (ASA) Software and Cisco Firepower Threat Defense (FTD) Software could allow an authenticated, remote attacker to cause a denial of service (DoS) condition on an affected device. This vulnerability is due to insufficient input validation. An attacker could exploit this vulnerability by sending a crafted SNMP request to an affected device. A successful exploit could allow the attacker to cause the affected device to reload, resulting in a DoS condition."}, {"Reference": "CVE-2022-20945", "Description": "A vulnerability in the 802.11 association frame validation of Cisco Catalyst 9100 Series Access Points (APs) could allow an unauthenticated, adjacent attacker to cause a denial of service (DoS) condition on an affected device. This vulnerability is due to insufficient input validation of certain parameters within association request frames received by the AP. An attacker could exploit this vulnerability by sending a crafted 802.11 association request to a nearby device. An exploit could allow the attacker to unexpectedly reload the device, resulting in a DoS condition."}, {"Reference": "CVE-2022-20962", "Description": "A vulnerability in the Localdisk Management feature of Cisco Identity Services Engine (ISE) could allow an authenticated, remote attacker to make unauthorized changes to the file system of an affected device. This vulnerability is due to insufficient input validation. An attacker could exploit this vulnerability by sending a crafted HTTP request with absolute path sequences. A successful exploit could allow the attacker to upload malicious files to arbitrary locations within the file system. Using this method, it is possible to access the underlying operating system and execute commands with system privileges."}, {"Reference": "CVE-2022-21136", "Description": "Improper input validation for some Intel(R) Xeon(R) Processors may allow a privileged user to potentially enable denial of service via local access."}, {"Reference": "CVE-2022-21180", "Description": "Improper input validation for some Intel(R) Processors may allow an authenticated user to potentially cause a denial of service via local access."}, {"Reference": "CVE-2022-21181", "Description": "Improper input validation for some Intel(R) PROSet/Wireless WiFi and Killer(TM) WiFi products may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-21197", "Description": "Improper input validation for some Intel(R) PROSet/Wireless WiFi products may allow an unauthenticated user to potentially enable denial of service via network access."}, {"Reference": "CVE-2022-21212", "Description": "Improper input validation for some Intel(R) PROSet/Wireless WiFi products may allow an unauthenticated user to potentially enable denial of service via adjacent access."}, {"Reference": "CVE-2022-21933", "Description": "ASUS VivoMini/Mini PC device has an improper input validation vulnerability. A local attacker with system privilege can use system management interrupt (SMI) to modify memory, resulting in arbitrary code execution for controlling the system or disrupting service."}, {"Reference": "CVE-2022-22163", "Description": "An Improper Input Validation vulnerability in the Juniper DHCP daemon (jdhcpd) of Juniper Networks Junos OS allows an adjacent unauthenticated attacker to cause a crash of jdhcpd and thereby a Denial of Service (DoS). If a device is configured as DHCPv6 local server and persistent storage is enabled, jdhcpd will crash when receiving a specific DHCPv6 message. This issue affects: Juniper Networks Junos OS All versions prior to 15.1R7-S11; 18.4 versions prior to 18.4R3-S9; 19.1 versions prior to 19.1R2-S3, 19.1R3-S7; 19.2 versions prior to 19.2R1-S8, 19.2R3-S3; 19.4 versions prior to 19.4R3-S5; 20.1 versions prior to 20.1R3-S1; 20.2 versions prior to 20.2R3-S2; 20.3 versions prior to 20.3R3-S1; 20.4 versions prior to 20.4R3; 21.1 versions prior to 21.1R2; 21.2 versions prior to 21.2R2."}, {"Reference": "CVE-2022-22184", "Description": "An Improper Input Validation vulnerability in the Routing Protocol Daemon (rpd) of Juniper Networks Junos OS and Junos OS Evolved allows an unauthenticated network-based attacker to cause a Denial of Service (DoS). If a BGP update message is received over an established BGP session, and that message contains a specific, optional transitive attribute, this session will be torn down with an update message error. This issue cannot propagate beyond an affected system as the processing error occurs as soon as the update is received. This issue is exploitable remotely as the respective attribute will propagate through unaffected systems and intermediate AS (if any). Continuous receipt of a BGP update containing this attribute will create a sustained Denial of Service (DoS) condition. Since this issue only affects 22.3R1, Juniper strongly encourages customers to move to 22.3R1-S1. Juniper SIRT felt that the need to promptly warn customers about this issue affecting the 22.3R1 versions of Junos OS and Junos OS Evolved warranted an Out of Cycle JSA. This issue affects: Juniper Networks Junos OS version 22.3R1. Juniper Networks Junos OS Evolved version 22.3R1-EVO. This issue does not affect: Juniper Networks Junos OS versions prior to 22.3R1. Juniper Networks Junos OS Evolved versions prior to 22.3R1-EVO."}, {"Reference": "CVE-2022-22214", "Description": "An Improper Input Validation vulnerability in the Packet Forwarding Engine (PFE) of Juniper Networks Junos OS and Junos OS Evolved allows an adjacent attacker to cause a PFE crash and thereby a Denial of Service (DoS). An FPC will crash and reboot after receiving a specific transit IPv6 packet over MPLS. Continued receipt of this packet will create a sustained Denial of Service (DoS) condition. This issue does not affect systems configured for IPv4 only. This issue affects: Juniper Networks Junos OS All versions prior to 12.3R12-S21; 15.1 versions prior to 15.1R7-S10; 17.3 versions prior to 17.3R3-S12; 18.3 versions prior to 18.3R3-S6; 18.4 versions prior to 18.4R2-S9, 18.4R3-S9; 19.1 versions prior to 19.1R2-S3, 19.1R3-S7; 19.2 versions prior to 19.2R1-S7, 19.2R3-S3; 19.3 versions prior to 19.3R2-S7, 19.3R3-S4; 19.4 versions prior to 19.4R3-S5; 20.1 versions prior to 20.1R3; 20.2 versions prior to 20.2R3-S2; 20.3 versions prior to 20.3R3; 20.4 versions prior to 20.4R2-S2, 20.4R3; 21.1 versions prior to 21.1R2. Juniper Networks Junos OS Evolved All versions prior to 20.4R3-S3-EVO; 21.2 versions prior to 21.2R3-EVO; 21.3 versions prior to 21.3R2-S1-EVO, 21.3R3-EVO; 21.4 versions prior to 21.4R2-EVO."}, {"Reference": "CVE-2022-22230", "Description": "An Improper Input Validation vulnerability in the Routing Protocol Daemon (rpd) of Juniper Networks Junos OS and Junos OS Evolved allows an adjacent unauthenticated attacker to cause DoS (Denial of Service). If another router generates more than one specific valid OSPFv3 LSA then rpd will crash while processing these LSAs. This issue only affects systems configured with OSPFv3, while OSPFv2 is not affected. This issue affects: Juniper Networks Junos OS 19.2 versions prior to 19.2R3-S6; 19.3 version 19.3R2 and later versions; 19.4 versions prior to 19.4R2-S8, 19.4R3-S9; 20.1 version 20.1R1 and later versions; 20.2 versions prior to 20.2R3-S5; 20.3 versions prior to 20.3R3-S5; 20.4 versions prior to 20.4R3-S4; 21.1 versions prior to 21.1R3-S2; 21.2 versions prior to 21.2R3-S1; 21.3 versions prior to 21.3R3-S2; 21.4 versions prior to 21.4R2. Juniper Networks Junos OS Evolved All versions prior to 20.4R3-S5-EVO; 21.1-EVO versions prior to 21.1R3-S2-EVO; 21.2-EVO versions prior to 21.2R3-S1-EVO; 21.3-EVO versions prior to 21.3R3-S2-EVO; 21.4-EVO versions prior to 21.4R2-EVO; 22.1-EVO versions prior to 22.1R2-EVO; 22.2-EVO versions prior to 22.2R2-EVO. This issue does not affect Juniper Networks Junos OS 19.2 versions prior to 19.2R2."}, {"Reference": "CVE-2022-22247", "Description": "An Improper Input Validation vulnerability in ingress TCP segment processing of Juniper Networks Junos OS Evolved allows a network-based unauthenticated attacker to send a crafted TCP segment to the device, triggering a kernel panic, leading to a Denial of Service (DoS) condition. Continued receipt and processing of this TCP segment could create a sustained Denial of Service (DoS) condition. This issue affects Juniper Networks Junos OS Evolved: 21.3 versions prior to 21.3R3-EVO; 21.4 versions prior to 21.4R2-EVO; 22.1 versions prior to 22.1R2-EVO. This issue does not affect Juniper Networks Junos OS Evolved versions prior to 21.3R1-EVO."}, {"Reference": "CVE-2022-22264", "Description": "Improper sanitization of incoming intent in Dressroom prior to SMR Jan-2022 Release 1 allows local attackers to read and write arbitrary files without permission."}, {"Reference": "CVE-2022-22271", "Description": "A missing input validation before memory copy in TIMA trustlet prior to SMR Jan-2022 Release 1 allows attackers to copy data from arbitrary memory."}, {"Reference": "CVE-2022-22311", "Description": "IBM Security Verify Access could allow a user, using man in the middle techniques, to obtain sensitive information or possibly change some information due to improper validiation of JWT tokens."}, {"Reference": "CVE-2022-22433", "Description": "IBM Robotic Process Automation 21.0.1 and 21.0.2 is vulnerable to External Service Interaction attack, caused by improper validation of user-supplied input. A remote attacker could exploit this vulnerability to induce the application to perform server-side DNS lookups or HTTP requests to arbitrary domain names. By submitting suitable payloads, an attacker can cause the application server to attack other systems that it can interact with. IBM X-Force ID: 224156."}, {"Reference": "CVE-2022-22525", "Description": "In Carlo Gavazzi UWP3.0 in multiple versions and CPY Car Park Server in Version 2.8.3 an remote attacker with admin rights could execute arbitrary commands due to missing input sanitization in the backup restore function"}, {"Reference": "CVE-2022-22538", "Description": "When a user opens a manipulated Adobe Illustrator file format (.ai, ai.x3d) received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9.0, the application crashes and becomes temporarily unavailable to the user until restart of the application. The file format details along with their CVE relevant information can be found below."}, {"Reference": "CVE-2022-22539", "Description": "When a user opens a manipulated JPEG file format (.jpg, 2d.x3d) received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9.0, the application crashes and becomes temporarily unavailable to the user until restart of the application. The file format details along with their CVE relevant information can be found below."}, {"Reference": "CVE-2022-22658", "Description": "An input validation issue was addressed with improved input validation. This issue is fixed in iOS 16.0.3. Processing a maliciously crafted email message may lead to a denial-of-service."}, {"Reference": "CVE-2022-22726", "Description": "A CWE-20: Improper Input Validation vulnerability exists that could allow arbitrary files on the server to be read by authenticated users through a limited operating system service account. Affected Product: EcoStruxure Power Monitoring Expert (Versions 2020 and prior)"}, {"Reference": "CVE-2022-22727", "Description": "A CWE-20: Improper Input Validation vulnerability exists that could allow an unauthenticated attacker to view data, change settings, impact availability of the software, or potentially impact a user?s local machine when the user clicks a specially crafted link. Affected Product: EcoStruxure Power Monitoring Expert (Versions 2020 and prior)"}, {"Reference": "CVE-2022-23014", "Description": "On versions 16.1.x before 16.1.2 and 15.1.x before 15.1.4.1, when BIG-IP APM portal access is configured on a virtual server, undisclosed requests can cause the Traffic Management Microkernel (TMM) to terminate. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated."}, {"Reference": "CVE-2022-23019", "Description": "On BIG-IP version 16.1.x before 16.1.2, 15.1.x before 15.1.4.1, 14.1.x before 14.1.4.4, and all versions of 13.1.x and 12.1.x, when a message routing type virtual server is configured with both Diameter Session and Router Profiles, undisclosed traffic can cause an increase in memory resource utilization. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated."}, {"Reference": "CVE-2022-23403", "Description": "Improper input validation in the Intel(R) Data Center Manager software before version 4.1 may allow an authenticated user to potentially enable denial of service via local access."}, {"Reference": "CVE-2022-23425", "Description": "Improper input validation in Exynos baseband prior to SMR Feb-2022 Release 1 allows attackers to send arbitrary NAS signaling messages with fake base station."}, {"Reference": "CVE-2022-23432", "Description": "An improper input validation in SMC_SRPMB_WSM handler of RPMB ldfw prior to SMR Feb-2022 Release 1 allows arbitrary memory write and code execution."}, {"Reference": "CVE-2022-23623", "Description": "Frourio is a full stack framework, for TypeScript. Frourio users who uses frourio version prior to v0.26.0 and integration with class-validator through `validators/` folder are subject to a input validation vulnerability. Validators do not work properly for request bodies and queries in specific situations and some input is not validated at all. Users are advised to update frourio to v0.26.0 or later and to install `class-transformer` and `reflect-metadata`."}, {"Reference": "CVE-2022-23624", "Description": "Frourio-express is a minimal full stack framework, for TypeScript. Frourio-express users who uses frourio-express version prior to v0.26.0 and integration with class-validator through `validators/` folder are subject to a input validation vulnerability. Validators do not work properly for request bodies and queries in specific situations and some input is not validated at all. Users are advised to update frourio to v0.26.0 or later and to install `class-transformer` and `reflect-metadata`."}, {"Reference": "CVE-2022-24098", "Description": "Adobe Photoshop versions 22.5.6 (and earlier)and 23.2.2 (and earlier) are affected by an improper input validation vulnerability when parsing a PCX file that could result in arbitrary code execution in the context of the current user. Exploitation of this issue requires user interaction in that a victim must open a malicious PCX file."}, {"Reference": "CVE-2022-2417", "Description": "Insufficient validation in GitLab CE/EE affecting all versions from 12.10 prior to 15.0.5, 15.1 prior to 15.1.4, and 15.2 prior to 15.2.1 allows an authenticated and authorised user to import a project that includes branch names which are 40 hexadecimal characters, which could be abused in supply chain attacks where a victim pinned to a specific Git commit of the project."}, {"Reference": "CVE-2022-24280", "Description": "Improper Input Validation vulnerability in Proxy component of Apache Pulsar allows an attacker to make TCP/IP connection attempts that originate from the Pulsar Proxy's IP address. When the Apache Pulsar Proxy component is used, it is possible to attempt to open TCP/IP connections to any IP address and port that the Pulsar Proxy can connect to. An attacker could use this as a way for DoS attacks that originate from the Pulsar Proxy's IP address. It hasn\u2019t been detected that the Pulsar Proxy authentication can be bypassed. The attacker will have to have a valid token to a properly secured Pulsar Proxy. This issue affects Apache Pulsar Proxy versions 2.7.0 to 2.7.4; 2.8.0 to 2.8.2; 2.9.0 to 2.9.1; 2.6.4 and earlier."}, {"Reference": "CVE-2022-25751", "Description": "A vulnerability has been identified in SCALANCE X302-7 EEC (230V), SCALANCE X302-7 EEC (230V, coated), SCALANCE X302-7 EEC (24V), SCALANCE X302-7 EEC (24V, coated), SCALANCE X302-7 EEC (2x 230V), SCALANCE X302-7 EEC (2x 230V, coated), SCALANCE X302-7 EEC (2x 24V), SCALANCE X302-7 EEC (2x 24V, coated), SCALANCE X304-2FE, SCALANCE X306-1LD FE, SCALANCE X307-2 EEC (230V), SCALANCE X307-2 EEC (230V, coated), SCALANCE X307-2 EEC (24V), SCALANCE X307-2 EEC (24V, coated), SCALANCE X307-2 EEC (2x 230V), SCALANCE X307-2 EEC (2x 230V, coated), SCALANCE X307-2 EEC (2x 24V), SCALANCE X307-2 EEC (2x 24V, coated), SCALANCE X307-3, SCALANCE X307-3, SCALANCE X307-3LD, SCALANCE X307-3LD, SCALANCE X308-2, SCALANCE X308-2, SCALANCE X308-2LD, SCALANCE X308-2LD, SCALANCE X308-2LH, SCALANCE X308-2LH, SCALANCE X308-2LH+, SCALANCE X308-2LH+, SCALANCE X308-2M, SCALANCE X308-2M, SCALANCE X308-2M PoE, SCALANCE X308-2M PoE, SCALANCE X308-2M TS, SCALANCE X308-2M TS, SCALANCE X310, SCALANCE X310, SCALANCE X310FE, SCALANCE X310FE, SCALANCE X320-1 FE, SCALANCE X320-1-2LD FE, SCALANCE X408-2, SCALANCE XR324-12M (230V, ports on front), SCALANCE XR324-12M (230V, ports on front), SCALANCE XR324-12M (230V, ports on rear), SCALANCE XR324-12M (230V, ports on rear), SCALANCE XR324-12M (24V, ports on front), SCALANCE XR324-12M (24V, ports on front), SCALANCE XR324-12M (24V, ports on rear), SCALANCE XR324-12M (24V, ports on rear), SCALANCE XR324-12M TS (24V), SCALANCE XR324-12M TS (24V), SCALANCE XR324-4M EEC (100-240VAC/60-250VDC, ports on front), SCALANCE XR324-4M EEC (100-240VAC/60-250VDC, ports on front), SCALANCE XR324-4M EEC (100-240VAC/60-250VDC, ports on rear), SCALANCE XR324-4M EEC (100-240VAC/60-250VDC, ports on rear), SCALANCE XR324-4M EEC (24V, ports on front), SCALANCE XR324-4M EEC (24V, ports on front), SCALANCE XR324-4M EEC (24V, ports on rear), SCALANCE XR324-4M EEC (24V, ports on rear), SCALANCE XR324-4M EEC (2x 100-240VAC/60-250VDC, ports on front), SCALANCE XR324-4M EEC (2x 100-240VAC/60-250VDC, ports on front), SCALANCE XR324-4M EEC (2x 100-240VAC/60-250VDC, ports on rear), SCALANCE XR324-4M EEC (2x 100-240VAC/60-250VDC, ports on rear), SCALANCE XR324-4M EEC (2x 24V, ports on front), SCALANCE XR324-4M EEC (2x 24V, ports on front), SCALANCE XR324-4M EEC (2x 24V, ports on rear), SCALANCE XR324-4M EEC (2x 24V, ports on rear), SCALANCE XR324-4M PoE (230V, ports on front), SCALANCE XR324-4M PoE (230V, ports on rear), SCALANCE XR324-4M PoE (24V, ports on front), SCALANCE XR324-4M PoE (24V, ports on rear), SCALANCE XR324-4M PoE TS (24V, ports on front), SIPLUS NET SCALANCE X308-2. Affected devices do not properly validate the HTTP headers of incoming requests. This could allow an unauthenticated remote attacker to crash affected devices."}, {"Reference": "CVE-2022-25757", "Description": "In Apache APISIX before 2.13.0, when decoding JSON with duplicate keys, lua-cjson will choose the last occurred value as the result. By passing a JSON with a duplicate key, the attacker can bypass the body_schema validation in the request-validation plugin. For example, `{\"string_payload\":\"bad\",\"string_payload\":\"good\"}` can be used to hide the \"bad\" input. Systems satisfy three conditions below are affected by this attack: 1. use body_schema validation in the request-validation plugin 2. upstream application uses a special JSON library that chooses the first occurred value, like jsoniter or gojay 3. upstream application does not validate the input anymore. The fix in APISIX is to re-encode the validated JSON input back into the request body at the side of APISIX. Improper Input Validation vulnerability in __COMPONENT__ of Apache APISIX allows an attacker to __IMPACT__. This issue affects Apache APISIX Apache APISIX version 2.12.1 and prior versions."}, {"Reference": "CVE-2022-25763", "Description": "Improper Input Validation vulnerability in HTTP/2 request validation of Apache Traffic Server allows an attacker to create smuggle or cache poison attacks. This issue affects Apache Traffic Server 8.0.0 to 9.1.2."}, {"Reference": "CVE-2022-25894", "Description": "All versions of the package com.bstek.uflo:uflo-core are vulnerable to Remote Code Execution (RCE) in the ExpressionContextImpl class via jexl.createExpression(expression).evaluate(context); functionality, due to improper user input validation."}, {"Reference": "CVE-2022-26006", "Description": "Improper input validation in the BIOS firmware for some Intel(R) Processors may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-26047", "Description": "Improper input validation for some Intel(R) PROSet/Wireless WiFi, Intel vPro(R) CSME WiFi and Killer(TM) WiFi products may allow unauthenticated user to potentially enable denial of service via local access."}, {"Reference": "CVE-2022-26100", "Description": "SAPCAR - version 7.22, does not contain sufficient input validation on the SAPCAR archive. As a result, the SAPCAR process may crash, and the attacker may obtain privileged access to the system."}, {"Reference": "CVE-2022-26106", "Description": "When a user opens a manipulated Computer Graphics Metafile (.cgm, CgmCore.dll) received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9.0, the application crashes and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-26107", "Description": "When a user opens a manipulated Jupiter Tesselation (.jt, JTReader.x3d) received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9.0, the application crashes and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-26108", "Description": "When a user opens a manipulated Picture Exchange (.pcx, 2d.x3d) received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9.0, the application crashes and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-26109", "Description": "When a user opens a manipulated Portable Document Format (.pdf, PDFView.x3d) received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9.0, the application crashes and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-26336", "Description": "A shortcoming in the HMEF package of poi-scratchpad (Apache POI) allows an attacker to cause an Out of Memory exception. This package is used to read TNEF files (Microsoft Outlook and Microsoft Exchange Server). If an application uses poi-scratchpad to parse TNEF files and the application allows untrusted users to supply them, then a carefully crafted file can cause an Out of Memory exception. This issue affects poi-scratchpad version 5.2.0 and prior versions. Users are recommended to upgrade to poi-scratchpad 5.2.1."}, {"Reference": "CVE-2022-2636", "Description": "Improper Control of Generation of Code ('Code Injection') in GitHub repository hestiacp/hestiacp prior to 1.6.6. "}, {"Reference": "CVE-2022-26655", "Description": "Pexip Infinity 27.x before 27.3 has Improper Input Validation. The client API allows remote attackers to trigger a software abort via a gateway call into Teams."}, {"Reference": "CVE-2022-26780", "Description": "Multiple improper input validation vulnerabilities exists in the libnvram.so nvram_import functionality of InHand Networks InRouter302 V3.5.4. A specially-crafted file can lead to remote code execution. An attacker can send a sequence of requests to trigger this vulnerability.An improper input validation vulnerability exists in the `httpd`'s `user_define_init` function. Controlling the `user_define_timeout` nvram variable can lead to remote code execution."}, {"Reference": "CVE-2022-26781", "Description": "Multiple improper input validation vulnerabilities exists in the libnvram.so nvram_import functionality of InHand Networks InRouter302 V3.5.4. A specially-crafted file can lead to remote code execution. An attacker can send a sequence of requests to trigger this vulnerability.An improper input validation vulnerability exists in the `httpd`'s `user_define_print` function. Controlling the `user_define_timeout` nvram variable can lead to remote code execution."}, {"Reference": "CVE-2022-26782", "Description": "Multiple improper input validation vulnerabilities exists in the libnvram.so nvram_import functionality of InHand Networks InRouter302 V3.5.4. A specially-crafted file can lead to remote code execution. An attacker can send a sequence of requests to trigger this vulnerability.An improper input validation vulnerability exists in the `httpd`'s `user_define_set_item` function. Controlling the `user_define_timeout` nvram variable can lead to remote code execution."}, {"Reference": "CVE-2022-26837", "Description": "Improper input validation in the BIOS firmware for some Intel(R) Processors may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-26862", "Description": "Prior Dell BIOS versions contain an Input Validation vulnerability. A locally authenticated malicious user could potentially exploit this vulnerability by sending malicious input to an SMI in order to bypass security controls in SMM."}, {"Reference": "CVE-2022-26863", "Description": "Prior Dell BIOS versions contain an Input Validation vulnerability. A locally authenticated malicious user could potentially exploit this vulnerability by sending malicious input to an SMI in order to bypass security controls in SMM."}, {"Reference": "CVE-2022-26864", "Description": "Prior Dell BIOS versions contain an Input Validation vulnerability. A locally authenticated malicious user could potentially exploit this vulnerability by sending malicious input to an SMI in order to bypass security controls in SMM."}, {"Reference": "CVE-2022-27228", "Description": "In the vote (aka \"Polls, Votes\") module before 21.0.100 of Bitrix Site Manager, a remote unauthenticated attacker can execute arbitrary code."}, {"Reference": "CVE-2022-27634", "Description": "On 16.1.x versions prior to 16.1.2.2 and 15.1.x versions prior to 15.1.5.1, BIG-IP APM does not properly validate configurations, allowing an authenticated attacker with high privileges to manipulate the APM policy leading to privilege escalation/remote code execution. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated"}, {"Reference": "CVE-2022-27654", "Description": "When a user opens a manipulated Photoshop Document (.psd, 2d.x3d) received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9.0, the application crashes and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-27655", "Description": "When a user opens a manipulated Universal 3D (.u3d, 3difr.x3d) received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9.0, the application crashes and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-27803", "Description": "Improper input validation vulnerability in Space of Cybozu Garoon 4.0.0 to 5.5.1 allows a remote authenticated attacker to alter the data of Space."}, {"Reference": "CVE-2022-27826", "Description": "Improper validation vulnerability in SemSuspendDialogInfo prior to SMR Apr-2022 Release 1 allows attackers to launch certain activities."}, {"Reference": "CVE-2022-27827", "Description": "Improper validation vulnerability in MediaMonitorDimension prior to SMR Apr-2022 Release 1 allows attackers to launch certain activities."}, {"Reference": "CVE-2022-27828", "Description": "Improper validation vulnerability in MediaMonitorEvent prior to SMR Apr-2022 Release 1 allows attackers to launch certain activities."}, {"Reference": "CVE-2022-27829", "Description": "Improper validation vulnerability in VerifyCredentialResponse prior to SMR Apr-2022 Release 1 allows attackers to launch certain activities."}, {"Reference": "CVE-2022-27830", "Description": "Improper validation vulnerability in SemBlurInfo prior to SMR Apr-2022 Release 1 allows attackers to launch certain activities."}, {"Reference": "CVE-2022-27897", "Description": "Palantir Gotham versions prior to 3.22.11.2 included an unauthenticated endpoint that would load portions of maliciously crafted zip files to memory. An attacker could repeatedly upload a malicious zip file, which would allow them to exhaust memory resources on the dispatch server."}, {"Reference": "CVE-2022-28126", "Description": "Improper input validation in some Intel(R) XMM(TM) 7560 Modem software before version M2_7560_R_01.2146.00 may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-28127", "Description": "A data removal vulnerability exists in the web_server /action/remove/ API functionality of Robustel R1510 3.3.0. A specially-crafted network request can lead to arbitrary file deletion. An attacker can send a sequence of requests to trigger this vulnerability."}, {"Reference": "CVE-2022-28129", "Description": "Improper Input Validation vulnerability in HTTP/1.1 header parsing of Apache Traffic Server allows an attacker to send invalid headers. This issue affects Apache Traffic Server 8.0.0 to 9.1.2."}, {"Reference": "CVE-2022-28186", "Description": "NVIDIA GPU Display Driver for Windows contains a vulnerability in the kernel mode layer (nvlddmkm.sys) handler for DxgkDdiEscape, where the product receives input or data, but does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly, which may lead to denial of service or data tampering."}, {"Reference": "CVE-2022-28188", "Description": "NVIDIA GPU Display Driver for Windows contains a vulnerability in the kernel mode layer (nvlddmkm.sys) handler for DxgkDdiEscape, where the product receives input or data, but does not validate or incorrectly validates that the input has the properties that are required to process the data safely and correctly, which may lead to denial of service."}, {"Reference": "CVE-2022-28190", "Description": "NVIDIA GPU Display Driver for Windows contains a vulnerability in the kernel mode layer (nvlddmkm.sys) handler for DxgkDdiEscape, where improper input validation can cause denial of service."}, {"Reference": "CVE-2022-28224", "Description": "Clusters using Calico (version 3.22.1 and below), Calico Enterprise (version 3.12.0 and below), may be vulnerable to route hijacking with the floating IP feature. Due to insufficient validation, a privileged attacker may be able to set a floating IP annotation to a pod even if the feature is not enabled. This may allow the attacker to intercept and reroute traffic to their compromised pod."}, {"Reference": "CVE-2022-28328", "Description": "A vulnerability has been identified in SCALANCE W1788-1 M12 (All versions < V3.0.0), SCALANCE W1788-2 EEC M12 (All versions < V3.0.0), SCALANCE W1788-2 M12 (All versions < V3.0.0), SCALANCE W1788-2IA M12 (All versions < V3.0.0). Affected devices do not properly handle malformed Multicast LLC frames. This could allow an attacker to trigger a denial of service condition."}, {"Reference": "CVE-2022-28329", "Description": "A vulnerability has been identified in SCALANCE W1788-1 M12 (All versions < V3.0.0), SCALANCE W1788-2 EEC M12 (All versions < V3.0.0), SCALANCE W1788-2 M12 (All versions < V3.0.0), SCALANCE W1788-2IA M12 (All versions < V3.0.0). Affected devices do not properly handle malformed TCP packets received over the RemoteCapture feature. This could allow an attacker to lead to a denial of service condition which only affects the port used by the RemoteCapture feature."}, {"Reference": "CVE-2022-28611", "Description": "Improper input validation in some Intel(R) XMM(TM) 7560 Modem software before version M2_7560_R_01.2146.00 may allow a privileged user to potentially enable escalation of privilege via physical access."}, {"Reference": "CVE-2022-28708", "Description": "On F5 BIG-IP 16.1.x versions prior to 16.1.2.2 and 15.1.x versions prior to 15.1.5.1, when a BIG-IP DNS resolver-enabled, HTTP-Explicit or SOCKS profile is configured on a virtual server, an undisclosed DNS response can cause the Traffic Management Microkernel (TMM) process to terminate. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated"}, {"Reference": "CVE-2022-28741", "Description": "aEnrich a+HRD 5.x Learning Management Key Performance Indicator System has a local file inclusion (LFI) vulnerability that occurs due to missing input validation in v5.x"}, {"Reference": "CVE-2022-28781", "Description": "Improper input validation in Settings prior to SMR-May-2022 Release 1 allows attackers to launch arbitrary activity with system privilege. The patch adds proper validation logic to check the caller."}, {"Reference": "CVE-2022-28783", "Description": "Improper validation of removing package name in Galaxy Themes prior to SMR May-2022 Release 1 allows attackers to uninstall arbitrary packages without permission. The patch adds proper validation logic for removing package name."}, {"Reference": "CVE-2022-28791", "Description": "Improper input validation vulnerability in InstallAgent in Galaxy Store prior to version 4.5.41.8 allows attacker to overwrite files stored in a specific path. The patch adds proper protection to prevent overwrite to existing files."}, {"Reference": "CVE-2022-29049", "Description": "Jenkins promoted builds Plugin 873.v6149db_d64130 and earlier, except 3.10.1, does not validate the names of promotions defined in Job DSL, allowing attackers with Job/Configure permission to create a promotion with an unsafe name."}, {"Reference": "CVE-2022-30535", "Description": "In versions 2.x before 2.3.0 and all versions of 1.x, An attacker authorized to create or update ingress objects can obtain the secrets available to the NGINX Ingress Controller. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated."}, {"Reference": "CVE-2022-30542", "Description": "Improper input validation in the firmware for some Intel(R) Server Board S2600WF, Intel(R) Server System R1000WF and Intel(R) Server System R2000WF families before version R02.01.0014 may allow a privileged user to potentially enable an escalation of privilege via local access."}, {"Reference": "CVE-2022-30709", "Description": "Improper input validation check logic vulnerability in SECRIL prior to SMR Jun-2022 Release 1 allows attackers to trigger crash."}, {"Reference": "CVE-2022-30710", "Description": "Improper validation vulnerability in RemoteViews prior to SMR Jun-2022 Release 1 allows attackers to launch certain activities."}, {"Reference": "CVE-2022-30711", "Description": "Improper validation vulnerability in FeedsInfo prior to SMR Jun-2022 Release 1 allows attackers to launch certain activities."}, {"Reference": "CVE-2022-30712", "Description": "Improper validation vulnerability in KfaOptions prior to SMR Jun-2022 Release 1 allows attackers to launch certain activities."}, {"Reference": "CVE-2022-30713", "Description": "Improper validation vulnerability in LSOItemData prior to SMR Jun-2022 Release 1 allows attackers to launch certain activities."}, {"Reference": "CVE-2022-30719", "Description": "Improper input validation check logic vulnerability in libsmkvextractor prior to SMR Jun-2022 Release 1 allows attackers to trigger crash."}, {"Reference": "CVE-2022-30720", "Description": "Improper input validation check logic vulnerability in libsmkvextractor prior to SMR Jun-2022 Release 1 allows attackers to trigger crash."}, {"Reference": "CVE-2022-30721", "Description": "Improper input validation check logic vulnerability in libsmkvextractor prior to SMR Jun-2022 Release 1 allows attackers to trigger crash."}, {"Reference": "CVE-2022-31321", "Description": "The foldername parameter in Bolt 5.1.7 was discovered to have incorrect input validation, allowing attackers to perform directory enumeration or cause a Denial of Service (DoS) via a crafted input."}, {"Reference": "CVE-2022-31607", "Description": "NVIDIA GPU Display Driver for Linux contains a vulnerability in the kernel mode layer (nvidia.ko), where a local user with basic capabilities can cause improper input validation, which may lead to denial of service, escalation of privileges, data tampering, and limited information disclosure."}, {"Reference": "CVE-2022-31762", "Description": "The AMS module has a vulnerability in input validation. Successful exploitation of this vulnerability may cause privilege escalation."}, {"Reference": "CVE-2022-31766", "Description": "A vulnerability has been identified in RUGGEDCOM RM1224 LTE(4G) EU (All versions < V7.1.2), RUGGEDCOM RM1224 LTE(4G) NAM (All versions < V7.1.2), SCALANCE M804PB (All versions < V7.1.2), SCALANCE M812-1 ADSL-Router (Annex A) (All versions < V7.1.2), SCALANCE M812-1 ADSL-Router (Annex B) (All versions < V7.1.2), SCALANCE M816-1 ADSL-Router (Annex A) (All versions < V7.1.2), SCALANCE M816-1 ADSL-Router (Annex B) (All versions < V7.1.2), SCALANCE M826-2 SHDSL-Router (All versions < V7.1.2), SCALANCE M874-2 (All versions < V7.1.2), SCALANCE M874-3 (All versions < V7.1.2), SCALANCE M876-3 (EVDO) (All versions < V7.1.2), SCALANCE M876-3 (ROK) (All versions < V7.1.2), SCALANCE M876-4 (All versions < V7.1.2), SCALANCE M876-4 (EU) (All versions < V7.1.2), SCALANCE M876-4 (NAM) (All versions < V7.1.2), SCALANCE MUM853-1 (EU) (All versions < V7.1.2), SCALANCE MUM856-1 (EU) (All versions < V7.1.2), SCALANCE MUM856-1 (RoW) (All versions < V7.1.2), SCALANCE S615 (All versions < V7.1.2), SCALANCE S615 EEC (All versions < V7.1.2), SCALANCE WAM763-1 (All versions >= V1.1.0 < V2.0), SCALANCE WAM766-1 (EU) (All versions >= V1.1.0 < V2.0), SCALANCE WAM766-1 (US) (All versions >= V1.1.0 < V2.0), SCALANCE WAM766-1 EEC (EU) (All versions >= V1.1.0 < V2.0), SCALANCE WAM766-1 EEC (US) (All versions >= V1.1.0 < V2.0), SCALANCE WUM763-1 (All versions >= V1.1.0 < V2.0), SCALANCE WUM763-1 (All versions >= V1.1.0 < V2.0), SCALANCE WUM766-1 (EU) (All versions >= V1.1.0 < V2.0), SCALANCE WUM766-1 (US) (All versions >= V1.1.0 < V2.0). Affected devices with TCP Event service enabled do not properly handle malformed packets. This could allow an unauthenticated remote attacker to cause a denial of service condition and reboot the device thus possibly affecting other network resources."}, {"Reference": "CVE-2022-31772", "Description": " IBM MQ 8.0, 9.0 LTS, 9.1 CD, 9.1 LTS, 9.2 CD, and 9.2 LTS could allow an authenticated and authorized user to cause a denial of service to the MQTT channels. IBM X-Force ID: 228335. "}, {"Reference": "CVE-2022-31778", "Description": "Improper Input Validation vulnerability in handling the Transfer-Encoding header of Apache Traffic Server allows an attacker to poison the cache. This issue affects Apache Traffic Server 8.0.0 to 9.0.2."}, {"Reference": "CVE-2022-31779", "Description": "Improper Input Validation vulnerability in HTTP/2 header parsing of Apache Traffic Server allows an attacker to smuggle requests. This issue affects Apache Traffic Server 8.0.0 to 9.1.2."}, {"Reference": "CVE-2022-31780", "Description": "Improper Input Validation vulnerability in HTTP/2 frame handling of Apache Traffic Server allows an attacker to smuggle requests. This issue affects Apache Traffic Server 8.0.0 to 9.1.2."}, {"Reference": "CVE-2022-3181", "Description": "An Improper Input Validation vulnerability exists in Trihedral VTScada version 12.0.38 and prior. A specifically malformed HTTP request could cause the affected VTScada to crash. Both local area network (LAN)-only and internet facing systems are affected. "}, {"Reference": "CVE-2022-3201", "Description": "Insufficient validation of untrusted input in DevTools in Google Chrome on Chrome OS prior to 105.0.5195.125 allowed an attacker who convinced a user to install a malicious extension to bypass navigation restrictions via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-32235", "Description": "When a user opens manipulated AutoCAD (.dwg, TeighaTranslator.exe) files received from untrusted sources in SAP 3D Visual Enterprise Viewer, the application crashes and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-32236", "Description": "When a user opens manipulated Windows Bitmap (.bmp, 2d.x3d) files received from untrusted sources in SAP 3D Visual Enterprise Viewer, the application crashes and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-32237", "Description": "When a user opens manipulated Computer Graphics Metafile (.cgm, CgmCore.dll) files received from untrusted sources in SAP 3D Visual Enterprise Viewer, the application crashes and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-32238", "Description": "When a user opens manipulated Encapsulated Post Script (.eps, ai.x3d) files received from untrusted sources in SAP 3D Visual Enterprise Viewer, the application crashes and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-32239", "Description": "When a user opens manipulated JPEG 2000 (.jp2, jp2k.x3d) files received from untrusted sources in SAP 3D Visual Enterprise Viewer, the application crashes and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-32240", "Description": "When a user opens manipulated Jupiter Tesselation (.jt, JTReader.x3d) files received from untrusted sources in SAP 3D Visual Enterprise Viewer, the application crashes and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-32241", "Description": "When a user opens manipulated Portable Document Format (.pdf, PDFView.x3d) files received from untrusted sources in SAP 3D Visual Enterprise Viewer, the application crashes and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-32242", "Description": "When a user opens manipulated Radiance Picture (.hdr, hdr.x3d) files received from untrusted sources in SAP 3D Visual Enterprise Viewer, the application crashes and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-32243", "Description": "When a user opens manipulated Scalable Vector Graphics (.svg, svg.x3d) files received from untrusted sources in SAP 3D Visual Enterprise Viewer, the application crashes and becomes temporarily unavailable to the user until restart of the application."}, {"Reference": "CVE-2022-32248", "Description": "Due to missing input validation in the Manage Checkbooks component of SAP S/4HANA - version 101, 102, 103, 104, 105, 106, an attacker could insert or edit the value of an existing field in the database. This leads to an impact on the integrity of the data."}, {"Reference": "CVE-2022-32253", "Description": "A vulnerability has been identified in SINEMA Remote Connect Server (All versions < V3.1). Due to improper input validation, the OpenSSL certificate's password could be printed to a file reachable by an attacker."}, {"Reference": "CVE-2022-32482", "Description": " Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user with admin privileges may potentially exploit this vulnerability in order to modify a UEFI variable. "}, {"Reference": "CVE-2022-32483", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user with admin privileges may potentially exploit this vulnerability in order to modify a UEFI variable."}, {"Reference": "CVE-2022-32484", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user with admin privileges may potentially exploit this vulnerability in order to modify a UEFI variable."}, {"Reference": "CVE-2022-32485", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution in SMRAM."}, {"Reference": "CVE-2022-32486", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution in SMRAM."}, {"Reference": "CVE-2022-32487", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution in SMRAM."}, {"Reference": "CVE-2022-32488", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution in SMRAM."}, {"Reference": "CVE-2022-32489", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution in SMRAM."}, {"Reference": "CVE-2022-32490", "Description": " Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution in SMRAM. "}, {"Reference": "CVE-2022-32492", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution in SMRAM."}, {"Reference": "CVE-2022-32591", "Description": "In ril, there is a possible system crash due to an incorrect bounds check. This could lead to remote denial of service with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07257259; Issue ID: ALPS07257259."}, {"Reference": "CVE-2022-33176", "Description": "Improper input validation in BIOS firmware for some Intel(R) NUC 11 Performance kits and Intel(R) NUC 11 Performance Mini PCs before version PATGL357.0042 may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-33178", "Description": "A vulnerability in the radius authentication system of Brocade Fabric OS before Brocade Fabric OS 9.0 could allow a remote attacker to execute arbitrary code on the Brocade switch."}, {"Reference": "CVE-2022-33190", "Description": "Improper input validation in the Intel(R) SUR software before version 2.4.8902 may allow an authenticated user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-33209", "Description": "Improper input validation in the firmware for some Intel(R) NUC Laptop Kits before version BC0076 may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-33703", "Description": "Improper validation vulnerability in CACertificateInfo prior to SMR Jul-2022 Release 1 allows attackers to launch certain activities."}, {"Reference": "CVE-2022-33704", "Description": "Improper validation vulnerability in ucmRetParcelable of KnoxSDK prior to SMR Jul-2022 Release 1 allows attackers to launch certain activities."}, {"Reference": "CVE-2022-33752", "Description": "CA Automic Automation 12.2 and 12.3 contain an insufficient input validation vulnerability in the Automic agent that could allow a remote attacker to potentially execute arbitrary code."}, {"Reference": "CVE-2022-33754", "Description": "CA Automic Automation 12.2 and 12.3 contain an insufficient input validation vulnerability in the Automic agent that could allow a remote attacker to potentially execute arbitrary code."}, {"Reference": "CVE-2022-3388", "Description": " An input validation vulnerability exists in the Monitor Pro interface of MicroSCADA Pro and MicroSCADA X SYS600. An authenticated user can launch an administrator level remote code execution irrespective of the authenticated user's role. "}, {"Reference": "CVE-2022-33964", "Description": "Improper input validation in the Intel(R) SUR software before version 2.4.8902 may allow an unauthenticated user to potentially enable escalation of privilege via network access."}, {"Reference": "CVE-2022-34152", "Description": "Improper input validation in BIOS firmware for some Intel(R) NUC Boards, Intel(R) NUC Kits before version TY0070 may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-34164", "Description": "IBM CICS TX 11.1 could allow a local user to impersonate another legitimate user due to improper input validation. IBM X-Force ID: 229338."}, {"Reference": "CVE-2022-34345", "Description": "Improper input validation in the firmware for some Intel(R) NUC Laptop Kits before version BC0076 may allow a privileged user to potentially enable escalation of privilege via physical access."}, {"Reference": "CVE-2022-34350", "Description": "IBM API Connect 10.0.0.0 through 10.0.5.0, 10.0.1.0 through 10.0.1.7, and 2018.4.1.0 through 2018.4.1.20 is vulnerable to External Service Interaction attack, caused by improper validation of user-supplied input. A remote attacker could exploit this vulnerability to induce the application to perform server-side DNS lookups or HTTP requests to arbitrary domain names. By submitting suitable payloads, an attacker can cause the application server to attack other systems that it can interact with. IBM X-Force ID: 230264."}, {"Reference": "CVE-2022-34376", "Description": " Dell PowerEdge BIOS and Dell Precision BIOS contain an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by manipulating an SMI to cause a denial of service during SMM. "}, {"Reference": "CVE-2022-34393", "Description": " Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution in SMRAM. "}, {"Reference": "CVE-2022-34435", "Description": " Dell iDRAC9 version 6.00.02.00 and prior contain an improper input validation vulnerability in Racadm when the firmware lock-down configuration is set. A remote high privileged attacker could exploit this vulnerability to bypass the firmware lock-down configuration and perform a firmware update. "}, {"Reference": "CVE-2022-34436", "Description": " Dell iDRAC8 version 2.83.83.83 and prior contain an improper input validation vulnerability in Racadm when the firmware lock-down configuration is set. A remote high privileged attacker could exploit this vulnerability to bypass the firmware lock-down configuration and perform a firmware update. "}, {"Reference": "CVE-2022-3444", "Description": "Insufficient data validation in File System API in Google Chrome prior to 106.0.5249.62 allowed a remote attacker to bypass File System restrictions via a crafted HTML page and malicious file. (Chromium security severity: Low)"}, {"Reference": "CVE-2022-34443", "Description": " Dell Rugged Control Center, versions prior to 4.5, contain an Improper Input Validation in the Service EndPoint. A Local Low Privilege attacker could potentially exploit this vulnerability, leading to an Escalation of privileges. "}, {"Reference": "CVE-2022-34460", "Description": " Prior Dell BIOS versions contain an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution in SMRAM. "}, {"Reference": "CVE-2022-34681", "Description": "NVIDIA GPU Display Driver for Windows contains a vulnerability in the kernel mode layer (nvlddmkm.sys) handler, where improper input validation of a display-related data structure may lead to denial of service."}, {"Reference": "CVE-2022-34758", "Description": "A CWE-20: Improper Input Validation vulnerability exists that could cause the device watchdog function to be disabled if the attacker had access to privileged user credentials. Affected Products: Easergy P5 (V01.401.102 and prior)"}, {"Reference": "CVE-2022-34851", "Description": "In BIG-IP Versions 17.0.x before 17.0.0.1, 16.1.x before 16.1.3.1, 15.1.x before 15.1.6.1, 14.1.x before 14.1.5.1, and all versions of 13.1.x, and BIG-IQ Centralized Management all versions of 8.x, an authenticated attacker may cause iControl SOAP to become unavailable through undisclosed requests. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated."}, {"Reference": "CVE-2022-34866", "Description": "Passage Drive versions v1.4.0 to v1.5.1.0 and Passage Drive for Box version v1.0.0 contain an insufficient data verification vulnerability for interprocess communication. By running a malicious program, an arbitrary OS command may be executed with LocalSystem privilege of the Windows system where the product is running."}, {"Reference": "CVE-2022-35171", "Description": "When a user opens manipulated JPEG 2000 (.jp2, jp2k.x3d) files received from untrusted sources in SAP 3D Visual Enterprise Viewer, the application crashes and becomes temporarily unavailable to the user until restart of the application. The file format details along with their CVE relevant information can be found below"}, {"Reference": "CVE-2022-35239", "Description": "The image file management page of SolarView Compact SV-CPT-MC310 Ver.7.23 and earlier, and SV-CPT-MC310F Ver.7.23 and earlier contains an insufficient verification vulnerability when uploading files. If this vulnerability is exploited, arbitrary PHP code may be executed if a remote authenticated attacker uploads a specially crafted PHP file."}, {"Reference": "CVE-2022-35415", "Description": "An improper input validation in NI System Configuration Manager before 22.5 may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-35666", "Description": "Adobe Acrobat Reader versions 22.001.20169 (and earlier), 20.005.30362 (and earlier) and 17.012.30249 (and earlier) are affected by an Improper Input Validation vulnerability that could result in arbitrary code execution in the context of the current user. Exploitation of this issue requires user interaction in that a victim must open a malicious file."}, {"Reference": "CVE-2022-35668", "Description": "Adobe Acrobat Reader versions 22.001.20169 (and earlier), 20.005.30362 (and earlier) and 17.012.30249 (and earlier) are affected by an Improper Input Validation vulnerability that could lead to disclosure of sensitive memory. An attacker could leverage this vulnerability to bypass mitigations such as ASLR. Exploitation of this issue requires user interaction in that a victim must open a malicious file."}, {"Reference": "CVE-2022-36058", "Description": "Elrond go is the go implementation for the Elrond Network protocol. In versions prior to 1.3.34, anyone who uses elrond-go to process blocks (historical or actual) could encounter a `MultiESDTNFTTransfer` transaction like this: `MultiESDTNFTTransfer` with a missing function name. Basic functionality like p2p messaging, storage, API requests and such are unaffected. Version 1.3.34 contains a fix for this issue. There are no known workarounds."}, {"Reference": "CVE-2022-36450", "Description": "Obsidian 0.14.x and 0.15.x before 0.15.5 allows obsidian://hook-get-address remote code execution because window.open is used without checking the URL."}, {"Reference": "CVE-2022-37010", "Description": "In JetBrains IntelliJ IDEA before 2022.2 email address validation in the \"Git User Name Is Not Defined\" dialog was missed"}, {"Reference": "CVE-2022-37395", "Description": "A Huawei device has an input verification vulnerability. Successful exploitation of this vulnerability may lead to DoS attacks.Affected product versions include:CV81-WDM FW versions 01.70.49.29.46."}, {"Reference": "CVE-2022-38385", "Description": " IBM Cloud Pak for Security (CP4S) 1.10.0.0 through 1.10.2.0 could allow an authenticated user to obtain highly sensitive information or perform unauthorized actions due to improper input validation. IBM X-Force ID: 233777. "}, {"Reference": "CVE-2022-38408", "Description": "Adobe Illustrator versions 26.4 (and earlier) and 25.4.7 (and earlier) are affected by an Improper Input Validation vulnerability that could result in arbitrary code execution in the context of the current user. Exploitation of this issue requires user interaction in that a victim must open a malicious file. requires user interaction in that a victim must open a malicious file."}, {"Reference": "CVE-2022-38435", "Description": "Adobe Illustrator versions 26.4 (and earlier) and 25.4.7 (and earlier) are affected by an Improper Input Validation vulnerability that could result in arbitrary code execution in the context of the current user. Exploitation of this issue requires user interaction in that a victim must open a malicious file."}, {"Reference": "CVE-2022-38778", "Description": "A flaw (CVE-2022-38900) was discovered in one of Kibana\u2019s third party dependencies, that could allow an authenticated user to perform a request that crashes the Kibana server process."}, {"Reference": "CVE-2022-38985", "Description": "The facial recognition module has a vulnerability in input validation.Successful exploitation of this vulnerability may affect data confidentiality."}, {"Reference": "CVE-2022-39012", "Description": "Huawei Aslan Children's Watch has an improper input validation vulnerability. Successful exploitation may cause the watch's application service abnormal."}, {"Reference": "CVE-2022-39060", "Description": "ChangingTech MegaServiSignAdapter component has a vulnerability of improper input validation. An unauthenticated remote attacker can exploit this vulnerability to access and modify HKEY_CURRENT_USER subkey (ex: AutoRUN) in Registry where malicious scripts can be executed to take control of the system or to terminate the service."}, {"Reference": "CVE-2022-39306", "Description": "Grafana is an open-source platform for monitoring and observability. Versions prior to 9.2.4, or 8.5.15 on the 8.X branch, are subject to Improper Input Validation. Grafana admins can invite other members to the organization they are an admin for. When admins add members to the organization, non existing users get an email invite, existing members are added directly to the organization. When an invite link is sent, it allows users to sign up with whatever username/email address the user chooses and become a member of the organization. This introduces a vulnerability which can be used with malicious intent. This issue is patched in version 9.2.4, and has been backported to 8.5.15. There are no known workarounds."}, {"Reference": "CVE-2022-39318", "Description": "FreeRDP is a free remote desktop protocol library and clients. Affected versions of FreeRDP are missing input validation in `urbdrc` channel. A malicious server can trick a FreeRDP based client to crash with division by zero. This issue has been addressed in version 2.9.0. All users are advised to upgrade. Users unable to upgrade should not use the `/usb` redirection switch."}, {"Reference": "CVE-2022-39338", "Description": "user_oidc is an OpenID Connect user backend for Nextcloud. Versions prior to 1.2.1 did not properly validate discovery urls which may lead to a stored cross site scripting attack vector. The impact is limited due to the restrictive CSP that is applied on this endpoint. Additionally this vulnerability has only been shown to be exploitable in the Safari web browser. This issue has been addressed in version 1.2.1. Users are advised to upgrade. Users unable to upgrade should urge their users to avoid using the Safari web browser."}, {"Reference": "CVE-2022-39880", "Description": "Improper input validation vulnerability in DualOutFocusViewer prior to SMR Nov-2022 Release 1 allows local attacker to perform an arbitrary code execution."}, {"Reference": "CVE-2022-40227", "Description": "A vulnerability has been identified in SIMATIC HMI Comfort Panels (incl. SIPLUS variants) (All versions < V17 Update 4), SIMATIC HMI KTP Mobile Panels (All versions < V17 Update 4), SIMATIC HMI KTP1200 Basic (All versions < V17 Update 5), SIMATIC HMI KTP400 Basic (All versions < V17 Update 5), SIMATIC HMI KTP700 Basic (All versions < V17 Update 5), SIMATIC HMI KTP900 Basic (All versions < V17 Update 5), SIPLUS HMI KTP1200 BASIC (All versions < V17 Update 5), SIPLUS HMI KTP400 BASIC (All versions < V17 Update 5), SIPLUS HMI KTP700 BASIC (All versions < V17 Update 5), SIPLUS HMI KTP900 BASIC (All versions < V17 Update 5). Affected devices do not properly validate input sent to certain services over TCP. This could allow an unauthenticated remote attacker to cause a permanent denial of service condition (requiring a device reboot) by sending specially crafted TCP packets."}, {"Reference": "CVE-2022-40235", "Description": "\"IBM InfoSphere Information Server 11.7 could allow a user to cause a denial of service by removing the ability to run jobs due to improper input validation. IBM X-Force ID: 235725.\""}, {"Reference": "CVE-2022-40237", "Description": "IBM MQ for HPE NonStop 8.1.0 is vulnerable to a denial of service attack due to an error within the CCDT and channel synchronization logic. IBM X-Force ID: 235727."}, {"Reference": "CVE-2022-40265", "Description": "Improper Input Validation vulnerability in Mitsubishi Electric Corporation MELSEC iQ-R Series RJ71EN71 Firmware version \"65\" and prior and Mitsubishi Electric Corporation MELSEC iQ-R Series R04/08/16/32/120ENCPU Network Part Firmware version \"65\" and prior allows a remote unauthenticated attacker to cause a Denial of Service condition by sending specially crafted packets. A system reset is required for recovery."}, {"Reference": "CVE-2022-40266", "Description": "Improper Input Validation vulnerability in Mitsubishi Electric GOT2000 Series GT27 model FTP server versions 01.39.000 and prior, Mitsubishi Electric GOT2000 Series GT25 model FTP server versions 01.39.000 and prior and Mitsubishi Electric GOT2000 Series GT23 model FTP server versions 01.39.000 and prior allows a remote authenticated attacker to cause a Denial of Service condition by sending specially crafted command."}, {"Reference": "CVE-2022-40276", "Description": "Zettlr version 2.3.0 allows an external attacker to remotely obtain arbitrary local files on any client that attempts to view a malicious markdown file through Zettlr. This is possible because the application does not have a CSP policy (or at least not strict enough) and/or does not properly validate the contents of markdown files before rendering them."}, {"Reference": "CVE-2022-41214", "Description": "Due to insufficient input validation, SAP NetWeaver Application Server ABAP and ABAP Platform allows an attacker with high level privileges to use a remote enabled function to delete a file which is otherwise restricted. On successful exploitation an attacker can completely compromise the integrity and availability of the application. "}, {"Reference": "CVE-2022-41694", "Description": "In BIG-IP versions 16.1.x before 16.1.3, 15.1.x before 15.1.6.1, 14.1.x before 14.1.5, and all versions of 13.1.x, and BIG-IQ versions 8.x before 8.2.0.1 and all versions of 7.x, when an SSL key is imported on a BIG-IP or BIG-IQ system, undisclosed input can cause MCPD to terminate."}, {"Reference": "CVE-2022-41733", "Description": " IBM InfoSphere Information Server 11.7 could allow a remote attacked to cause some of the components to be unusable until the process is restarted. IBM X-Force ID: 237583. "}, {"Reference": "CVE-2022-41813", "Description": "In versions 16.1.x before 16.1.3.1, 15.1.x before 15.1.6.1, 14.1.x before 14.1.5, and all versions of 13.1.x, when BIG-IP is provisioned with PEM or AFM module, an undisclosed input can cause Traffic Management Microkernel (TMM) to terminate."}, {"Reference": "CVE-2022-41888", "Description": "TensorFlow is an open source platform for machine learning. When running on GPU, `tf.image.generate_bounding_box_proposals` receives a `scores` input that must be of rank 4 but is not checked. We have patched the issue in GitHub commit cf35502463a88ca7185a99daa7031df60b3c1c98. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range."}, {"Reference": "CVE-2022-41891", "Description": "TensorFlow is an open source platform for machine learning. If `tf.raw_ops.TensorListConcat` is given `element_shape=[]`, it results segmentation fault which can be used to trigger a denial of service attack. We have patched the issue in GitHub commit fc33f3dc4c14051a83eec6535b608abe1d355fde. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range."}, {"Reference": "CVE-2022-41898", "Description": "TensorFlow is an open source platform for machine learning. If `SparseFillEmptyRowsGrad` is given empty inputs, TensorFlow will crash. We have patched the issue in GitHub commit af4a6a3c8b95022c351edae94560acc61253a1b8. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range."}, {"Reference": "CVE-2022-41899", "Description": "TensorFlow is an open source platform for machine learning. Inputs `dense_features` or `example_state_data` not of rank 2 will trigger a `CHECK` fail in `SdcaOptimizer`. We have patched the issue in GitHub commit 80ff197d03db2a70c6a111f97dcdacad1b0babfa. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range."}, {"Reference": "CVE-2022-41901", "Description": "TensorFlow is an open source platform for machine learning. An input `sparse_matrix` that is not a matrix with a shape with rank 0 will trigger a `CHECK` fail in `tf.raw_ops.SparseMatrixNNZ`. We have patched the issue in GitHub commit f856d02e5322821aad155dad9b3acab1e9f5d693. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range."}, {"Reference": "CVE-2022-41909", "Description": "TensorFlow is an open source platform for machine learning. An input `encoded` that is not a valid `CompositeTensorVariant` tensor will trigger a segfault in `tf.raw_ops.CompositeTensorVariantToComponents`. We have patched the issue in GitHub commits bf594d08d377dc6a3354d9fdb494b32d45f91971 and 660ce5a89eb6766834bdc303d2ab3902aef99d3d. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range."}, {"Reference": "CVE-2022-42269", "Description": "NVIDIA Trusted OS contains a vulnerability in an SMC call handler, where failure to validate untrusted input may allow a highly privileged local attacker to cause information disclosure and compromise integrity. The scope of the impact can extend to other components."}, {"Reference": "CVE-2022-42340", "Description": "Adobe ColdFusion versions Update 14 (and earlier) and Update 4 (and earlier) are affected by an Improper Input Validation vulnerability that could result in arbitrary file system read. Exploitation of this issue does not require user interaction."}, {"Reference": "CVE-2022-42468", "Description": "Apache Flume versions 1.4.0 through 1.10.1 are vulnerable to a remote code execution (RCE) attack when a configuration uses a JMS Source with an unsafe providerURL. This issue is fixed by limiting JNDI to allow only the use of the java protocol or no protocol."}, {"Reference": "CVE-2022-42534", "Description": "In trusty_ffa_mem_reclaim of shared-mem-smcall.c, there is a possible privilege escalation due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-237838301References: N/A"}, {"Reference": "CVE-2022-42544", "Description": "In getView of AddAppNetworksFragment.java, there is a possible way to mislead the user about network add requests due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-224545390"}, {"Reference": "CVE-2022-43439", "Description": "A vulnerability has been identified in POWER METER SICAM Q100 (All versions < V2.50), POWER METER SICAM Q100 (All versions < V2.50), POWER METER SICAM Q100 (All versions < V2.50), POWER METER SICAM Q100 (All versions < V2.50), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10). Affected devices do not properly validate the Language-parameter in requests to the web interface on port 443/tcp. This could allow an authenticated remote attacker to crash the device (followed by an automatic reboot) or to execute arbitrary code on the device."}, {"Reference": "CVE-2022-43455", "Description": "Sewio\u2019s Real-Time Location System (RTLS) Studio version 2.0.0 up to and including version 2.6.2 is vulnerable to improper input validation of user input to the service_start, service_stop, and service_restart modules of the software. This could allow an attacker to start, stop, or restart arbitrary services running on the server. "}, {"Reference": "CVE-2022-43545", "Description": "A vulnerability has been identified in POWER METER SICAM Q100 (All versions < V2.50), POWER METER SICAM Q100 (All versions < V2.50), POWER METER SICAM Q100 (All versions < V2.50), POWER METER SICAM Q100 (All versions < V2.50), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10). Affected devices do not properly validate the RecordType-parameter in requests to the web interface on port 443/tcp. This could allow an authenticated remote attacker to crash the device (followed by an automatic reboot) or to execute arbitrary code on the device."}, {"Reference": "CVE-2022-43546", "Description": "A vulnerability has been identified in POWER METER SICAM Q100 (All versions < V2.50), POWER METER SICAM Q100 (All versions < V2.50), POWER METER SICAM Q100 (All versions < V2.50), POWER METER SICAM Q100 (All versions < V2.50), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P850 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10), SICAM P855 (All versions < V3.10). Affected devices do not properly validate the EndTime-parameter in requests to the web interface on port 443/tcp. This could allow an authenticated remote attacker to crash the device (followed by an automatic reboot) or to execute arbitrary code on the device."}, {"Reference": "CVE-2022-43563", "Description": "In Splunk Enterprise versions below 8.2.9 and 8.1.12, the way that the rex search command handles field names lets an attacker bypass SPL safeguards for risky commands https://docs.splunk.com/Documentation/SplunkCloud/latest/Security/SPLsafeguards . The vulnerability requires the attacker to phish the victim by tricking them into initiating a request within their browser. The attacker cannot exploit the vulnerability at will. "}, {"Reference": "CVE-2022-43565", "Description": "In Splunk Enterprise versions below 8.2.9 and 8.1.12, the way that the \u2018tstats command handles Javascript Object Notation (JSON) lets an attacker bypass SPL safeguards for risky commands https://docs.splunk.com/Documentation/SplunkCloud/latest/Security/SPLsafeguards . The vulnerability requires the attacker to phish the victim by tricking them into initiating a request within their browser. "}, {"Reference": "CVE-2022-43863", "Description": "IBM QRadar SIEM 7.4 and 7.5 is vulnerable to privilege escalation, allowing a user with some admin capabilities to gain additional admin capabilities. IBM X-Force ID: 239425."}, {"Reference": "CVE-2022-43875", "Description": "IBM Financial Transaction Manager for SWIFT Services for Multiplatforms 3.2.4 could allow an authenticated user to lock additional RM authorizations, resulting in a denial of service on displaying or managing these authorizations. IBM X-Force ID: 240034."}, {"Reference": "CVE-2022-43929", "Description": " IBM Db2 for Linux, UNIX and Windows 11.1 and 11.5 may be vulnerable to a Denial of Service when executing a specially crafted 'Load' command. IBM X-Force ID: 241676. "}, {"Reference": "CVE-2022-4428", "Description": "support_uri parameter in the WARP client local settings file (mdm.xml) lacked proper validation which allowed for privilege escalation and launching an arbitrary executable on the local machine upon clicking on the \"Send feedback\" option. An attacker with access to the local file system could use a crafted XML config file pointing to a malicious file or set a local path to the executable using Cloudflare Zero Trust Dashboard (for Zero Trust enrolled clients). "}, {"Reference": "CVE-2022-44756", "Description": "Insights for Vulnerability Remediation (IVR) is vulnerable to improper input validation. This may lead to information disclosure. This requires privileged access.? "}, {"Reference": "CVE-2022-45088", "Description": "Improper Input Validation vulnerability in Group Arge Energy and Control Systems Smartpower Web allows PHP Local File Inclusion.This issue affects Smartpower Web: before 23.01.01. "}, {"Reference": "CVE-2022-45770", "Description": "Improper input validation in adgnetworkwfpdrv.sys in Adguard For Windows x86 through 7.11 allows local privilege escalation."}, {"Reference": "CVE-2022-45875", "Description": "Improper validation of script alert plugin parameters in Apache DolphinScheduler to avoid remote command execution vulnerability. This issue affects Apache DolphinScheduler version 3.0.1 and prior versions; version 3.1.0 and prior versions. This attack can be performed only by authenticated users which can login to DS. "}, {"Reference": "CVE-2022-46328", "Description": "Some smartphones have the input validation vulnerability. Successful exploitation of this vulnerability may affect data confidentiality."}, {"Reference": "CVE-2022-46363", "Description": "A vulnerability in Apache CXF before versions 3.5.5 and 3.4.10 allows an attacker to perform a remote directory listing or code exfiltration. The vulnerability only applies when the CXFServlet is configured with both the static-resources-list and redirect-query-check attributes. These attributes are not supposed to be used together, and so the vulnerability can only arise if the CXF service is misconfigured. "}, {"Reference": "CVE-2022-46372", "Description": "Alotcer - AR7088H-A firmware version 16.10.3 Command execution Improper validation of unspecified input field may allow Authenticated command execution."}, {"Reference": "CVE-2022-46705", "Description": "A spoofing issue existed in the handling of URLs. This issue was addressed with improved input validation. This issue is fixed in iOS 16.2 and iPadOS 16.2, macOS Ventura 13.1, Safari 16.2. Visiting a malicious website may lead to address bar spoofing."}, {"Reference": "CVE-2022-46768", "Description": "Arbitrary file read vulnerability exists in Zabbix Web Service Report Generation, which listens on the port 10053. The service does not have proper validation for URL parameters before reading the files."}, {"Reference": "CVE-2022-47917", "Description": "Sewio\u2019s Real-Time Location System (RTLS) Studio version 2.0.0 up to and including version 2.6.2 is vulnerable to improper input validation of user input to several modules and services of the software. This could allow an attacker to delete arbitrary files and cause a denial-of-service condition. "}, {"Reference": "CVE-2022-2939", "Description": "The WP Cerber Security plugin for WordPress is vulnerable to security protection bypass in versions up to, and including 9.0, that makes user enumeration possible. This is due to improper validation on the value supplied through the 'author' parameter found in the ~/cerber-load.php file. In vulnerable versions, the plugin only blocks requests if the value supplied is numeric, making it possible for attackers to supply additional non-numeric characters to bypass the protection. The non-numeric characters are stripped and the user requested is displayed. This can be used by unauthenticated attackers to gather information about users that can targeted in further attacks."}, {"Reference": "CVE-2022-32218", "Description": "An information disclosure vulnerability exists in Rocket.Chat <v5, <v4.8.2 and <v4.7.5 due to the actionLinkHandler method was found to allow Message ID Enumeration with Regex MongoDB queries."}, {"Reference": "CVE-2022-45103", "Description": " Dell Unisphere for PowerMax vApp, VASA Provider vApp, and Solution Enabler vApp version 9.2.3.x contain an information disclosure vulnerability. A low privileged remote attacker could potentially exploit this vulnerability, leading to read arbitrary files on the underlying file system. "}, {"Reference": "CVE-2021-1275", "Description": "Multiple vulnerabilities in Cisco SD-WAN vManage Software could allow an unauthenticated, remote attacker to execute arbitrary code or gain access to sensitive information, or allow an authenticated, local attacker to gain escalated privileges or gain unauthorized access to the application. For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2022-21698", "Description": "client_golang is the instrumentation library for Go applications in Prometheus, and the promhttp package in client_golang provides tooling around HTTP servers and clients. In client_golang prior to version 1.11.1, HTTP server is susceptible to a Denial of Service through unbounded cardinality, and potential memory exhaustion, when handling requests with non-standard HTTP methods. In order to be affected, an instrumented software must use any of `promhttp.InstrumentHandler*` middleware except `RequestsInFlight`; not filter any specific methods (e.g GET) before middleware; pass metric with `method` label name to our middleware; and not have any firewall/LB/proxy that filters away requests with unknown `method`. client_golang version 1.11.1 contains a patch for this issue. Several workarounds are available, including removing the `method` label name from counter/gauge used in the InstrumentHandler; turning off affected promhttp handlers; adding custom middleware before promhttp handler that will sanitize the request method given by Go http.Request; and using a reverse proxy or web application firewall, configured to only allow a limited set of methods."}, {"Reference": "CVE-2022-22543", "Description": "SAP NetWeaver Application Server for ABAP (Kernel) and ABAP Platform (Kernel) - versions KERNEL 7.22, 8.04, 7.49, 7.53, 7.77, 7.81, 7.85, 7.86, 7.87, KRNL64UC 8.04, 7.22, 7.22EXT, 7.49, 7.53, KRNL64NUC 7.22, 7.22EXT, 7.49, does not sufficiently validate sap-passport information, which could lead to a Denial-of-Service attack. This allows an unauthorized remote user to provoke a breakdown of the SAP Web Dispatcher or Kernel work process. The crashed process can be restarted immediately, other processes are not affected."}, {"Reference": "CVE-2022-22588", "Description": "A resource exhaustion issue was addressed with improved input validation. This issue is fixed in iOS 15.2.1 and iPadOS 15.2.1. Processing a maliciously crafted HomeKit accessory name may cause a denial of service."}, {"Reference": "CVE-2022-22820", "Description": "Due to the lack of media file checks before rendering, it was possible for an attacker to cause abnormal CPU consumption for message recipient by sending specially crafted gif image in LINE for Windows before 7.4."}, {"Reference": "CVE-2022-31110", "Description": "RSSHub is an open source, extensible RSS feed generator. In commits prior to 5c4177441417 passing some special values to the `filter` and `filterout` parameters can cause an abnormally high CPU. This results in an impact on the performance of the servers and RSSHub services which may lead to a denial of service. This issue has been fixed in commit 5c4177441417 and all users are advised to upgrade. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-35404", "Description": "ManageEngine Password Manager Pro 12100 and prior and OPManager 126100 and prior are vulnerable to unauthorized file and directory creation on a server machine."}, {"Reference": "CVE-2022-36055", "Description": "Helm is a tool for managing Charts. Charts are packages of pre-configured Kubernetes resources. Fuzz testing, provided by the CNCF, identified input to functions in the _strvals_ package that can cause an out of memory panic. The _strvals_ package contains a parser that turns strings in to Go structures. The _strvals_ package converts these strings into structures Go can work with. Some string inputs can cause array data structures to be created causing an out of memory panic. Applications that use the _strvals_ package in the Helm SDK to parse user supplied input can suffer a Denial of Service when that input causes a panic that cannot be recovered from. The Helm Client will panic with input to `--set`, `--set-string`, and other value setting flags that causes an out of memory panic. Helm is not a long running service so the panic will not affect future uses of the Helm client. This issue has been resolved in 3.9.4. SDK users can validate strings supplied by users won't create large arrays causing significant memory usage before passing them to the _strvals_ functions."}, {"Reference": "CVE-2022-24299", "Description": "Improper input validation vulnerability in pfSense CE and pfSense Plus (pfSense CE software versions prior to 2.6.0 and pfSense Plus software versions prior to 22.01) allows a remote attacker with the privilege to change OpenVPN client or server settings to execute an arbitrary command."}, {"Reference": "CVE-2022-24382", "Description": "Improper input validation in firmware for some Intel(R) NUCs may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-24415", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution during SMM."}, {"Reference": "CVE-2022-24416", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution during SMM."}, {"Reference": "CVE-2022-24417", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution during SMM."}, {"Reference": "CVE-2022-24418", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution during SMM."}, {"Reference": "CVE-2022-24419", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution during SMM."}, {"Reference": "CVE-2022-24420", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution during SMM."}, {"Reference": "CVE-2022-24421", "Description": "Dell BIOS contains an improper input validation vulnerability. A local authenticated malicious user may potentially exploit this vulnerability by using an SMI to gain arbitrary code execution during SMM."}, {"Reference": "CVE-2022-24423", "Description": "Dell iDRAC8 versions prior to 2.83.83.83 contain a denial of service vulnerability. A remote unauthenticated attacker could potentially exploit this vulnerability to cause resource exhaustion in the webserver, resulting in a denial of service condition."}, {"Reference": "CVE-2022-24774", "Description": "CycloneDX BOM Repository Server is a bill of materials (BOM) repository server for distributing CycloneDX BOMs. CycloneDX BOM Repository Server before version 2.0.1 has an improper input validation vulnerability leading to path traversal. A malicious user may potentially exploit this vulnerability to create arbitrary directories or a denial of service by deleting arbitrary directories. The vulnerability is resolved in version 2.0.1. The vulnerability is not exploitable with the default configuration with the post and delete methods disabled. This can be configured by modifying the `appsettings.json` file, or alternatively, setting the environment variables `ALLOWEDMETHODS__POST` and `ALLOWEDMETHODS__DELETE` to `false`."}, {"Reference": "CVE-2022-24861", "Description": "Databasir is a team-oriented relational database model document management platform. Databasir 1.01 has remote code execution vulnerability. JDBC drivers are not validated prior to use and may be provided by users of the system. This can lead to code execution by any basic user who has access to the system. Users are advised to upgrade. There are no known workarounds to this issue."}, {"Reference": "CVE-2022-24925", "Description": "Improper input validation vulnerability in SettingsProvider prior to Android S(12) allows privileged attackers to trigger a permanent denial of service attack on a victim's devices."}, {"Reference": "CVE-2022-24952", "Description": "Several denial of service vulnerabilities exist in Eternal Terminal prior to version 6.2.0, including a DoS triggered remotely by an invalid sequence number and a local bug triggered by invalid input sent directly to the IPC socket."}, {"Reference": "CVE-2022-25161", "Description": "Improper Input Validation vulnerability in Mitsubishi Electric MELSEC iQ-F series FX5U-xMy/z(x=32,64,80, y=T,R, z=ES,DS,ESS,DSS) with serial number 17X**** or later and versions prior to 1.270, Mitsubishi Electric Mitsubishi Electric MELSEC iQ-F series FX5U-xMy/z(x=32,64,80, y=T,R, z=ES,DS,ESS,DSS) with serial number 179**** and prior and versions prior to 1.073, MELSEC iQ-F series FX5UC-xMy/z(x=32,64,96, y=T,R, z=D,DSS) with serial number 17X**** or later and versions prior to 1.270, Mitsubishi Electric MELSEC iQ-F series FX5UC-xMy/z(x=32,64,96, y=T,R, z=D,DSS) with serial number 179**** and prior and versions prior to 1.073, Mitsubishi Electric MELSEC iQ-F series FX5UC-32MT/DS-TS versions prior to 1.270, Mitsubishi Electric MELSEC iQ-F series FX5UC-32MT/DSS-TS versions prior to 1.270, Mitsubishi Electric MELSEC iQ-F series FX5UC-32MR/DS-TS versions prior to 1.270, Mitsubishi Electric MELSEC iQ-F series FX5UJ-xMy/z(x=24,40,60, y=T,R, z=ES,ESS) versions prior to 1.030, Mitsubishi Electric MELSEC iQ-F series FX5UJ-xMy/ES-A(x=24,40,60, y=T,R) versions prior to 1.031 and Mitsubishi Electric MELSEC iQ-F series FX5S-xMy/z(x=30,40,60,80, y=T,R, z=ES,ESS) version 1.000 allows a remote unauthenticated attacker to cause a DoS condition for the product's program execution or communication by sending specially crafted packets. System reset of the product is required for recovery."}, {"Reference": "CVE-2022-25162", "Description": "Improper Input Validation vulnerability in Mitsubishi Electric MELSEC iQ-F series FX5U-xMy/z(x=32,64,80, y=T,R, z=ES,DS,ESS,DSS) with serial number 17X**** or later and versions prior to 1.270, Mitsubishi Electric Mitsubishi Electric MELSEC iQ-F series FX5U-xMy/z(x=32,64,80, y=T,R, z=ES,DS,ESS,DSS) with serial number 179**** and prior and versions prior to 1.073, MELSEC iQ-F series FX5UC-xMy/z(x=32,64,96, y=T,R, z=D,DSS) with serial number 17X**** or later and versions prior to 1.270, Mitsubishi Electric MELSEC iQ-F series FX5UC-xMy/z(x=32,64,96, y=T,R, z=D,DSS) with serial number 179**** and prior and versions prior to 1.073, Mitsubishi Electric MELSEC iQ-F series FX5UC-32MT/DS-TS versions prior to 1.270, Mitsubishi Electric MELSEC iQ-F series FX5UC-32MT/DSS-TS versions prior to 1.270, Mitsubishi Electric MELSEC iQ-F series FX5UC-32MR/DS-TS versions prior to 1.270, Mitsubishi Electric MELSEC iQ-F series FX5UJ-xMy/z(x=24,40,60, y=T,R, z=ES,ESS) versions prior to 1.030, Mitsubishi Electric MELSEC iQ-F series FX5UJ-xMy/ES-A(x=24,40,60, y=T,R) versions prior to 1.031 and Mitsubishi Electric MELSEC iQ-F series FX5S-xMy/z(x=30,40,60,80, y=T,R, z=ES,ESS) version 1.000 allows a remote unauthenticated attacker to cause a temporary DoS condition for the product's communication by sending specially crafted packets."}, {"Reference": "CVE-2022-25163", "Description": "Improper Input Validation vulnerability in Mitsubishi Electric MELSEC-Q Series QJ71E71-100 first 5 digits of serial number \"24061\" or prior, Mitsubishi Electric MELSEC-L series LJ71E71-100 first 5 digits of serial number \"24061\" or prior and Mitsubishi Electric MELSEC iQ-R Series RD81MES96N firmware version \"08\" or prior allows a remote unauthenticated attacker to cause a denial of service (DoS) condition or execute malicious code on the target products by sending specially crafted packets."}, {"Reference": "CVE-2022-25271", "Description": "Drupal core's form API has a vulnerability where certain contributed or custom modules' forms may be vulnerable to improper input validation. This could allow an attacker to inject disallowed values or overwrite data. Affected forms are uncommon, but in certain cases an attacker could alter critical or sensitive data."}, {"Reference": "CVE-2022-25595", "Description": "ASUS RT-AC86U has improper user request handling, which allows an unauthenticated LAN attacker to cause a denial of service by sending particular request a server-to-client reply attempt."}, {"Reference": "CVE-2021-40712", "Description": "Adobe Experience Manager version 6.5.9.0 (and earlier) is affected by a improper input validation vulnerability via the path parameter. An authenticated attacker can send a malformed POST request to achieve server-side denial of service."}, {"Reference": "CVE-2021-41114", "Description": "TYPO3 is an open source PHP based web content management system released under the GNU GPL. It has been discovered that TYPO3 CMS is susceptible to host spoofing due to improper validation of the HTTP Host header. TYPO3 uses the HTTP Host header, for example, to generate absolute URLs during the frontend rendering process. Since the host header itself is provided by the client, it can be forged to any value, even in a name-based virtual hosts environment. This vulnerability is the same as described in TYPO3-CORE-SA-2014-001 (CVE-2014-3941). A regression, introduced during TYPO3 v11 development, led to this situation. The already existing setting $GLOBALS['TYPO3_CONF_VARS']['SYS']['trustedHostsPattern'] (used as an effective mitigation strategy in previous TYPO3 versions) was not evaluated anymore, and reintroduced the vulnerability."}, {"Reference": "CVE-2021-41138", "Description": "Frontier is Substrate's Ethereum compatibility layer. In the newly introduced signed Frontier-specific extrinsic for `pallet-ethereum`, a large part of transaction validation logic was only called in transaction pool validation, but not in block execution. Malicious validators can take advantage of this to put invalid transactions into a block. The attack is limited in that the signature is always validated, and the majority of the validation is done again in the subsequent `pallet-evm` execution logic. However, do note that a chain ID replay attack was possible. In addition, spamming attacks are of main concerns, while they are limited by Substrate block size limits and other factors. The issue is patched in commit `146bb48849e5393004be5c88beefe76fdf009aba`."}, {"Reference": "CVE-2021-4120", "Description": "snapd 2.54.2 fails to perform sufficient validation of snap content interface and layout paths, resulting in the ability for snaps to inject arbitrary AppArmor policy rules via malformed content interface and layout declarations and hence escape strict snap confinement. Fixed in snapd versions 2.54.3+18.04, 2.54.3+20.04 and 2.54.3+21.10.1"}, {"Reference": "CVE-2021-41561", "Description": "Improper Input Validation vulnerability in Parquet-MR of Apache Parquet allows an attacker to DoS by malicious Parquet files. This issue affects Apache Parquet-MR version 1.9.0 and later versions."}, {"Reference": "CVE-2021-41583", "Description": "vpn-user-portal (aka eduVPN or Let's Connect!) before 2.3.14, as packaged for Debian 10, Debian 11, and Fedora, allows remote authenticated users to obtain OS filesystem access, because of the interaction of QR codes with an exec that uses the -r option. This can be leveraged to obtain additional VPN access."}, {"Reference": "CVE-2021-41585", "Description": "Improper Input Validation vulnerability in accepting socket connections in Apache Traffic Server allows an attacker to make the server stop accepting new connections. This issue affects Apache Traffic Server 5.0.0 to 9.1.0."}, {"Reference": "CVE-2021-41769", "Description": "A vulnerability has been identified in SIPROTEC 5 6MD85 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 6MD86 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 6MD89 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 6MU85 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 7KE85 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 7SA82 devices (CPU variant CP100) (All versions < V8.83), SIPROTEC 5 7SA86 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 7SA87 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 7SD82 devices (CPU variant CP100) (All versions < V8.83), SIPROTEC 5 7SD86 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 7SD87 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 7SJ81 devices (CPU variant CP100) (All versions < V8.83), SIPROTEC 5 7SJ82 devices (CPU variant CP100) (All versions < V8.83), SIPROTEC 5 7SJ85 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 7SJ86 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 7SK82 devices (CPU variant CP100) (All versions < V8.83), SIPROTEC 5 7SK85 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 7SL82 devices (CPU variant CP100) (All versions < V8.83), SIPROTEC 5 7SL86 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 7SL87 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 7SS85 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 7ST85 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 7SX85 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 7UM85 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 7UT82 devices (CPU variant CP100) (All versions < V8.83), SIPROTEC 5 7UT85 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 7UT86 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 7UT87 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 7VE85 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 7VK87 devices (CPU variant CP300) (All versions < V8.83), SIPROTEC 5 Compact 7SX800 devices (CPU variant CP050) (All versions < V8.83). An improper input validation vulnerability in the web server could allow an unauthenticated user to access device information."}, {"Reference": "CVE-2021-41772", "Description": "Go before 1.16.10 and 1.17.x before 1.17.3 allows an archive/zip Reader.Open panic via a crafted ZIP archive containing an invalid name or an empty filename field."}, {"Reference": "CVE-2021-41788", "Description": "MediaTek microchips, as used in NETGEAR devices through 2021-12-13 and other devices, mishandle attempts at Wi-Fi authentication flooding. (Affected Chipsets MT7603E, MT7612, MT7613, MT7615, MT7622, MT7628, MT7629, MT7915; Affected Software Versions 7.4.0.0)."}, {"Reference": "CVE-2021-41789", "Description": "In wifi driver, there is a possible system crash due to a missing validation check. This could lead to remote denial of service from a proximal attacker with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: GN20190426015; Issue ID: GN20190426015."}, {"Reference": "CVE-2021-41844", "Description": "Crocoblock JetEngine before 2.9.1 does not properly validate and sanitize form data."}, {"Reference": "CVE-2021-42009", "Description": "An authenticated Apache Traffic Control Traffic Ops user with Portal-level privileges can send a request with a specially-crafted email subject to the /deliveryservices/request Traffic Ops endpoint to send an email, from the Traffic Ops server, with an arbitrary body to an arbitrary email address. Apache Traffic Control 5.1.x users should upgrade to 5.1.3 or 6.0.0. 4.1.x users should upgrade to 5.1.3."}, {"Reference": "CVE-2021-4204", "Description": "An out-of-bounds (OOB) memory access flaw was found in the Linux kernel's eBPF due to an Improper Input Validation. This flaw allows a local attacker with a special privilege to crash the system or leak internal information."}, {"Reference": "CVE-2021-0417", "Description": "In memory management driver, there is a possible system crash due to improper input validation. This could lead to local denial of service with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05403499; Issue ID: ALPS05336702."}, {"Reference": "CVE-2021-0933", "Description": "In onCreate of CompanionDeviceActivity.java or DeviceChooserActivity.java, there is a possible way for HTML tags to interfere with a consent dialog due to improper input validation. This could lead to remote escalation of privilege, confusing the user into accepting pairing of a malicious Bluetooth device, with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-9Android ID: A-172251622"}, {"Reference": "CVE-2021-32697", "Description": "neos/forms is an open source framework to build web forms. By crafting a special `GET` request containing a valid form state, a form can be submitted without invoking any validators. Form state is secured with an HMAC that is still verified. That means that this issue can only be exploited if Form Finishers cause side effects even if no form values have been sent. Form Finishers can be adjusted in a way that they only execute an action if the submitted form contains some expected data. Alternatively a custom Finisher can be added as first finisher. This regression was introduced with https://github.com/neos/form/commit/049d415295be8d4a0478ccba97dba1bb81649567"}, {"Reference": "CVE-2021-26316", "Description": "Failure to validate the communication buffer and communication service in the BIOS may allow an attacker to tamper with the buffer resulting in potential SMM (System Management Mode) arbitrary code execution."}, {"Reference": "CVE-2022-31041", "Description": "Open Forms is an application for creating and publishing smart forms. Open Forms supports file uploads as one of the form field types. These fields can be configured to allow only certain file extensions to be uploaded by end users (e.g. only PDF / Excel / ...). The input validation of uploaded files is insufficient in versions prior to 1.0.9 and 1.1.1. Users could alter or strip file extensions to bypass this validation. This results in files being uploaded to the server that are of a different file type than indicated by the file name extension. These files may be downloaded (manually or automatically) by staff and/or other applications for further processing. Malicious files can therefore find their way into internal/trusted networks. Versions 1.0.9 and 1.1.1 contain patches for this issue. As a workaround, an API gateway or intrusion detection solution in front of open-forms may be able to scan for and block malicious content before it reaches the Open Forms application."}, {"Reference": "CVE-2022-29206", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.SparseTensorDenseAdd` does not fully validate the input arguments. In this case, a reference gets bound to a `nullptr` during kernel execution. This is undefined behavior. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-20250", "Description": "In Messaging, there is a possible way to attach files to a message without proper access checks due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-226134095"}, {"Reference": "CVE-2022-20470", "Description": "In bindRemoteViewsService of AppWidgetServiceImpl.java, there is a possible way to bypass background activity launch due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12L Android-13Android ID: A-234013191"}, {"Reference": "CVE-2022-38123", "Description": "Improper Input Validation of plugin files in Administrator Interface of Secomea GateManager allows a server administrator to inject code into the GateManager interface. This issue affects: Secomea GateManager versions prior to 10.0. "}, {"Reference": "CVE-2022-4186", "Description": "Insufficient validation of untrusted input in Downloads in Google Chrome prior to 108.0.5359.71 allowed an attacker who convinced a user to install a malicious extension to bypass Downloads restrictions via a crafted HTML page. (Chromium security severity: Medium)"}, {"Reference": "CVE-2022-29201", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.QuantizedConv2D` does not fully validate the input arguments. In this case, references get bound to `nullptr` for each argument that is empty. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-29213", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the `tf.compat.v1.signal.rfft2d` and `tf.compat.v1.signal.rfft3d` lack input validation and under certain condition can result in crashes (due to `CHECK`-failures). Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}, {"Reference": "CVE-2022-29281", "Description": "Notable before 1.9.0-beta.8 doesn't effectively prevent the opening of executable files when clicking on a link. There is improper validation of the file URI scheme. A hyperlink to an SMB share could lead to execution of an arbitrary program (or theft of NTLM credentials via an SMB relay attack, because the application resolves UNC paths)."}, {"Reference": "CVE-2022-29466", "Description": "Improper input validation in firmware for Intel(R) SPS before version SPS_E3_04.01.04.700.0 may allow an authenticated user to potentially enable denial of service via local access."}, {"Reference": "CVE-2022-29479", "Description": "On F5 BIG-IP 15.1.x versions prior to 15.1.5.1, 14.1.x versions prior to 14.1.4.6, 13.1.x versions prior to 13.1.5, and all versions of 12.1.x and 11.6.x, and F5 BIG-IQ Centralized Management all versions of 8.x and 7.x, when an IPv6 self IP address is configured and the ipv6.strictcompliance database key is enabled (disabled by default) on a BIG-IP system, undisclosed packets may cause decreased performance. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated"}, {"Reference": "CVE-2022-29492", "Description": "Improper Input Validation vulnerability in the handling of a malformed IEC 104 TCP packet in the Hitachi Energy MicroSCADA X SYS600, MicroSCADA Pro SYS600. Upon receiving a malformed IEC 104 TCP packet, the malformed packet is dropped, however the TCP connection is left open. This may cause a denial-of-service if the affected connection is left open. This issue affects: Hitachi Energy MicroSCADA Pro SYS600 version 9.4 FP2 Hotfix 4 and earlier versions Hitachi Energy MicroSCADA X SYS600 version 10 to version 10.3.1. cpe:2.3:a:hitachienergy:microscada_pro_sys600:9.0:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_pro_sys600:9.1:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_pro_sys600:9.2:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_pro_sys600:9.3:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_pro_sys600:9.4:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.1:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.1.1:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.2:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.2.1:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.3:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.3.1:*:*:*:*:*:*:*"}, {"Reference": "CVE-2022-29613", "Description": "Due to insufficient input validation, SAP Employee Self Service allows an authenticated attacker with user privileges to alter employee number. On successful exploitation, the attacker can view personal details of other users causing a limited impact on confidentiality of the application."}, {"Reference": "CVE-2022-29850", "Description": "Various Lexmark products through 2022-04-27 allow an attacker who has already compromised an affected Lexmark device to maintain persistence across reboots."}, {"Reference": "CVE-2022-29872", "Description": "A vulnerability has been identified in SICAM P850 (All versions < V3.00), SICAM P850 (All versions < V3.00), SICAM P850 (All versions < V3.00), SICAM P850 (All versions < V3.00), SICAM P850 (All versions < V3.00), SICAM P850 (All versions < V3.00), SICAM P850 (All versions < V3.00), SICAM P850 (All versions < V3.00), SICAM P850 (All versions < V3.00), SICAM P850 (All versions < V3.00), SICAM P850 (All versions < V3.00), SICAM P850 (All versions < V3.00), SICAM P850 (All versions < V3.00), SICAM P850 (All versions < V3.00), SICAM P850 (All versions < V3.00), SICAM P850 (All versions < V3.00), SICAM P850 (All versions < V3.00), SICAM P850 (All versions < V3.00), SICAM P855 (All versions < V3.00), SICAM P855 (All versions < V3.00), SICAM P855 (All versions < V3.00), SICAM P855 (All versions < V3.00), SICAM P855 (All versions < V3.00), SICAM P855 (All versions < V3.00), SICAM P855 (All versions < V3.00), SICAM P855 (All versions < V3.00), SICAM P855 (All versions < V3.00), SICAM P855 (All versions < V3.00), SICAM P855 (All versions < V3.00), SICAM P855 (All versions < V3.00), SICAM P855 (All versions < V3.00), SICAM P855 (All versions < V3.00), SICAM P855 (All versions < V3.00), SICAM P855 (All versions < V3.00), SICAM P855 (All versions < V3.00), SICAM P855 (All versions < V3.00). Affected devices do not properly validate parameters of POST requests. This could allow an authenticated attacker to set the device to a denial of service state or to control the program counter and, thus, execute arbitrary code on the device."}, {"Reference": "CVE-2022-29897", "Description": "On various RAD-ISM-900-EN-* devices by PHOENIX CONTACT an admin user could use the traceroute utility integrated in the WebUI to execute arbitrary code with root privileges on the OS due to an improper input validation in all versions of the firmware."}, {"Reference": "CVE-2022-29922", "Description": "Improper Input Validation vulnerability in the handling of a specially crafted IEC 61850 packet with a valid data item but with incorrect data type in the IEC 61850 OPC Server in the Hitachi Energy MicroSCADA X SYS600, MicroSCADA Pro SYS600. The vulnerability may cause a denial-of-service on the IEC 61850 OPC Server part of the SYS600 product. This issue affects: Hitachi Energy MicroSCADA Pro SYS600 version 9.4 FP2 Hotfix 4 and earlier versions Hitachi Energy MicroSCADA X SYS600 version 10 to version 10.3.1. cpe:2.3:a:hitachienergy:microscada_pro_sys600:9.0:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_pro_sys600:9.1:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_pro_sys600:9.2:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_pro_sys600:9.3:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_pro_sys600:9.4:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.1:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.1.1:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.2:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.2.1:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.3:*:*:*:*:*:*:* cpe:2.3:a:hitachienergy:microscada_x_sys600:10.3.1:*:*:*:*:*:*:*"}, {"Reference": "CVE-2022-3001", "Description": "This vulnerability exists in Milesight Video Management Systems (VMS), all firmware versions prior to 40.7.0.79-r1, due to improper input handling at camera\u2019s web-based management interface. A remote attacker could exploit this vulnerability by sending a specially crafted http request on the targeted network camera. Successful exploitation of this vulnerability could allow the attacker to cause a Denial of Service condition on the targeted device."}, {"Reference": "CVE-2022-30232", "Description": "A CWE-20: Improper Input Validation vulnerability exists that could cause potential remote code execution when an attacker is able to intercept and modify a request on the same network or has configuration access to an ION device on the network. Affected Products: Wiser Smart, EER21000 & EER21001 (V4.5 and prior)"}, {"Reference": "CVE-2022-30233", "Description": "A CWE-20: Improper Input Validation vulnerability exists that could allow the product to be maliciously manipulated when the user is tricked into performing certain actions on a webpage. Affected Products: Wiser Smart, EER21000 & EER21001 (V4.5 and prior)"}]}
{"ID": "200", "Name": "Exposure of Sensitive Information to an Unauthorized Actor", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product exposes sensitive information to an actor that is not explicitly authorized to have access to that information.", "ExtendedDescription": "\n\nThere are many different kinds of mistakes that introduce information exposures. The severity of the error can range widely, depending on the context in which the product operates, the type of sensitive information that is revealed, and the benefits it may provide to an attacker. Some kinds of sensitive information include:\n\n\n  - private, personal information, such as personal messages, financial data, health records, geographic location, or contact details\n\n  - system status and environment, such as the operating system and installed packages\n\n  - business secrets and intellectual property\n\n  - network status and configuration\n\n  - the product's own code or internal state\n\n  - metadata, e.g. logging of connections or message headers\n\n  - indirect information, such as a discrepancy between two internal operations that can be observed by an outsider\n\nInformation might be sensitive to different parties, each of which may have their own expectations for whether the information should be protected. These parties include:\n\n  - the product's own users\n\n  - people or organizations whose information is created or used by the product, even if they are not direct product users\n\n  - the product's administrators, including the admins of the system(s) and/or networks on which the product operates\n\n  - the developer\n\nInformation exposures can occur in different ways:\n\n  - the code  **explicitly inserts**  sensitive information into resources or messages that are intentionally made accessible to unauthorized actors, but should not contain the information - i.e., the information should have been \"scrubbed\" or \"sanitized\"\n\n  - a different weakness or mistake  **indirectly inserts**  the sensitive information into resources, such as a web script error revealing the full system path of the program.\n\n  - the code manages resources that intentionally contain sensitive information, but the resources are  **unintentionally made accessible**  to unauthorized actors. In this case, the information exposure is resultant - i.e., a different weakness enabled the access to the information in the first place.\n\nIt is common practice to describe any loss of confidentiality as an \"information exposure,\" but this can lead to overuse of CWE-200 in CWE mapping. From the CWE perspective, loss of confidentiality is a technical impact that can arise from dozens of different weaknesses, such as insecure file permissions or out-of-bounds read. CWE-200 and its lower-level descendants are intended to cover the mistakes that occur in behaviors that explicitly manage, store, transfer, or cleanse sensitive information.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "668", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary", "Description": "Developers may insert sensitive information that they do not believe, or they might forget to remove the sensitive information after it has been processed"}, {"Ordinality": "Resultant", "Description": "Separate mistakes or weaknesses could inadvertently make the sensitive information available to an attacker, such as in a detailed error message that can be read by an unauthorized party"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Mobile", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Information Disclosure", "Description": "This term is frequently used in vulnerability advisories to describe a consequence or technical impact, for any vulnerability that has a loss of confidentiality. Often, CWE-200 can be misused to represent the loss of confidentiality, even when the mistake - i.e., the weakness - is not directly related to the mishandling of the information itself, such as an out-of-bounds read that accesses sensitive memory contents; here, the out-of-bounds read is the primary weakness, not the disclosure of the memory. In addition, this phrase is also used frequently in policies and legal documents, but it does not refer to any disclosure of security-relevant information."}, {"Term": "Information Leak", "Description": "This is a frequently used term, however the \"leak\" term has multiple uses within security. In some cases it deals with the accidental exposure of information from a different weakness, but in other cases (such as \"memory leak\"), this deals with improper tracking of resources, which can lead to exhaustion. As a result, CWE is actively avoiding usage of the \"leak\" term."}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"]}], "DetectionMethods": [{"Method": "Automated Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis\n\t\tInter-application Flow Analysis", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Automated Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tWeb Application Scanner\n\t\tWeb Services Scanner\n\t\tDatabase Scanners", "Effectiveness": "High"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer\n\t\tAutomated Monitored Execution\n\t\tMonitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tManual Source Code Review (not inspections)", "Effectiveness": "High"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tContext-configured Source Code Weakness Analyzer\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tSource code Weakness Analyzer", "Effectiveness": "High"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tAttack Modeling\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-46", "Phase": ["Architecture and Design"], "Strategy": "Separation of Privilege", "Description": "\n\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\n\n\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n"}], "DemonstrativeExamples": [{"ID": "DX-38", "Entries": [{"IntroText": "The following code checks validity of the supplied username and password and notifies the user of a successful or failed login."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\tmy $username=param('username'); \n\tmy $password=param('password'); \n\tif (IsValidUsername($username) == 1) \n\t{ \n\t\tif (IsValidPassword($username, $password) == 1) \n\t\t{ \n\t\t\tprint \"Login Successful\"; \n\t\t} \n\t\telse \n\t\t{ \n\t\t\tprint \"Login Failed - incorrect password\"; \n\t\t} \n\t} \n\telse \n\t{ \n\t\tprint \"Login Failed - unknown username\"; \n\t} \n```"}, {"BodyText": "In the above code, there are different messages for when an incorrect username is supplied, versus when the username is correct but the password is wrong. This difference enables a potential attacker to understand the state of the login function, and could allow an attacker to discover a valid username by trying different values until the incorrect password message is returned. In essence, this makes it easier for an attacker to obtain half of the necessary authentication credentials."}, {"BodyText": "While this type of information may be helpful to a user, it is also useful to a potential attacker. In the above example, the message for both failed cases should be the same, such as:"}, {"Nature": "Result", "ExampleCode": "```\n\t\"Login Failed - incorrect username or password\"\n```"}]}, {"ID": "DX-118", "Entries": [{"IntroText": "This code tries to open a database connection, and prints any exceptions that occur."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\ttry {\n\t\topenDbConnection();\n\t}\n```\n//print exception message that includes exception message and configuration file location* \n\tcatch (Exception $e) {\n\t```\n\t\techo 'Caught exception: ', $e->getMessage(), '\\n';\n\t\techo 'Check credentials in config file at: ', $Mysql_config_location, '\\n';\n\t}\n```"}, {"BodyText": "If an exception occurs, the printed message exposes the location of the configuration file the script is using. An attacker can use this information to target the configuration file (perhaps exploiting a Path Traversal weakness). If the file can be read, the attacker could gain credentials for accessing the database. The attacker may also be able to replace the file with a malicious one, causing the application to use an arbitrary database."}]}, {"ID": "DX-119", "Entries": [{"IntroText": "In the example below, the method getUserBankAccount retrieves a bank account object from a database using the supplied username and account number to query the database. If an SQLException is raised when querying the database, an error message is created and output to a log file."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic BankAccount getUserBankAccount(String username, String accountNumber) {\n\t\t\tBankAccount userAccount = null;\n\t\t\tString query = null;\n\t\t\ttry {\n\t\t\t\tif (isAuthorizedUser(username)) {\n\t\t\t\t\tquery = \"SELECT * FROM accounts WHERE owner = \"\n\t\t\t\t\t+ username + \" AND accountID = \" + accountNumber;\n\t\t\t\t\tDatabaseManager dbManager = new DatabaseManager();\n\t\t\t\t\tConnection conn = dbManager.getConnection();\n\t\t\t\t\tStatement stmt = conn.createStatement();\n\t\t\t\t\tResultSet queryResult = stmt.executeQuery(query);\n\t\t\t\t\tuserAccount = (BankAccount)queryResult.getObject(accountNumber);\n\t\t\t\t}\n\t\t\t} catch (SQLException ex) {\n\t\t\t\tString logMessage = \"Unable to retrieve account information from database,\\nquery: \" + query;\n\t\t\t\tLogger.getLogger(BankManager.class.getName()).log(Level.SEVERE, logMessage, ex);\n\t\t\t}\n\t\t\treturn userAccount;\n\t}\n```"}, {"BodyText": "The error message that is created includes information about the database query that may contain sensitive information about the database or query logic. In this case, the error message will expose the table name and column names used in the database. This data could be used to simplify other attacks, such as SQL injection (CWE-89) to directly access the database."}]}, {"ID": "DX-120", "Entries": [{"IntroText": "This code stores location information about the current user:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tlocationClient = new LocationClient(this, this, this);\n\tlocationClient.connect();\n\tcurrentUser.setLocation(locationClient.getLastLocation());\n```\n...* \n\t\n\tcatch (Exception e) {\n\t```\n\t\tAlertDialog.Builder builder = new AlertDialog.Builder(this);\n\t\tbuilder.setMessage(\"Sorry, this application has experienced an error.\");\n\t\tAlertDialog alert = builder.create();\n\t\talert.show();\n\t\tLog.e(\"ExampleActivity\", \"Caught exception: \" + e + \" While on User:\" + User.toString());\n\t}\n```"}, {"BodyText": "When the application encounters an exception it will write the user object to the log. Because the user object contains location information, the user's location is also written to the log."}]}, {"ID": "DX-129", "Entries": [{"IntroText": "The following is an actual MySQL error statement:"}, {"Nature": "Result", "Language": "SQL", "ExampleCode": "```\n\tWarning: mysql_pconnect(): Access denied for user: 'root@localhost' (Using password: N1nj4) in /usr/local/www/wi-data/includes/database.inc on line 4\n```"}, {"BodyText": "The error clearly exposes the database credentials."}]}, {"ID": "DX-130", "Entries": [{"IntroText": "This code displays some information on a web page."}, {"Nature": "Bad", "Language": "JSP", "ExampleCode": "```\n\tSocial Security Number: <%= ssn %></br>Credit Card Number: <%= ccn %>\n```"}, {"BodyText": "The code displays a user's credit card and social security numbers, even though they aren't absolutely necessary."}]}, {"ID": "DX-131", "Entries": [{"IntroText": "The following program changes its behavior based on a debug flag."}, {"Nature": "Bad", "Language": "JSP", "ExampleCode": "```\n\t<% if (Boolean.getBoolean(\"debugEnabled\")) {\n\t\t\t%>\n\t\t\tUser account number: <%= acctNo %>\n\t\t\t<%\n\t\t\t} %>\n```"}, {"BodyText": "The code writes sensitive debug information to the client browser if the \"debugEnabled\" flag is set to true ."}]}, {"ID": "DX-111", "Entries": [{"IntroText": "This code uses location to determine the user's current US State location."}, {"BodyText": "First the application must declare that it requires the ACCESS_FINE_LOCATION permission in the application's manifest.xml:"}, {"Nature": "Bad", "Language": "XML", "ExampleCode": "```\n\t<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>\n```"}, {"BodyText": "During execution, a call to getLastLocation() will return a location based on the application's location permissions. In this case the application has permission for the most accurate location possible:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tlocationClient = new LocationClient(this, this, this);\n\tlocationClient.connect();\n\tLocation userCurrLocation;\n\tuserCurrLocation = locationClient.getLastLocation();\n\tderiveStateFromCoords(userCurrLocation);\n```"}, {"BodyText": "While the application needs this information, it does not need to use the ACCESS_FINE_LOCATION permission, as the ACCESS_COARSE_LOCATION permission will be sufficient to identify which US state the user is in."}]}], "ObservedExamples": [{"Reference": "CVE-2022-31162", "Description": "Rust library leaks Oauth client details in application debug logs", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-31162"}, {"Reference": "CVE-2021-25476", "Description": "Digital Rights Management (DRM) capability for mobile platform leaks pointer information, simplifying ASLR bypass", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-25476"}, {"Reference": "CVE-2001-1483", "Description": "Enumeration of valid usernames based on inconsistent responses", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1483"}, {"Reference": "CVE-2001-1528", "Description": "Account number enumeration via inconsistent responses.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1528"}, {"Reference": "CVE-2004-2150", "Description": "User enumeration via discrepancies in error messages.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2150"}, {"Reference": "CVE-2005-1205", "Description": "Telnet protocol allows servers to obtain sensitive environment information from clients.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1205"}, {"Reference": "CVE-2002-1725", "Description": "Script calls phpinfo(), revealing system configuration to web user", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1725"}, {"Reference": "CVE-2002-0515", "Description": "Product sets a different TTL when a port is being filtered than when it is not being filtered, which allows remote attackers to identify filtered ports by comparing TTLs.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0515"}, {"Reference": "CVE-2004-0778", "Description": "Version control system allows remote attackers to determine the existence of arbitrary files and directories via the -X command for an alternate history file, which causes different error messages to be returned.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0778"}, {"Reference": "CVE-2000-1117", "Description": "Virtual machine allows malicious web site operators to determine the existence of files on the client by measuring delays in the execution of the getSystemResource method.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1117"}, {"Reference": "CVE-2003-0190", "Description": "Product immediately sends an error message when a user does not exist, which allows remote attackers to determine valid usernames via a timing attack.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0190"}, {"Reference": "CVE-2008-2049", "Description": "POP3 server reveals a password in an error message after multiple APOP commands are sent. Might be resultant from another weakness.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2049"}, {"Reference": "CVE-2007-5172", "Description": "Program reveals password in error message if attacker can trigger certain database errors.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-5172"}, {"Reference": "CVE-2008-4638", "Description": "Composite: application running with high privileges (CWE-250) allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file (CWE-209).", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4638"}, {"Reference": "CVE-2007-1409", "Description": "Direct request to library file in web application triggers pathname leak in error message.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1409"}, {"Reference": "CVE-2005-0603", "Description": "Malformed regexp syntax leads to information exposure in error message.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0603"}, {"Reference": "CVE-2004-2268", "Description": "Password exposed in debug information.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2268"}, {"Reference": "CVE-2003-1078", "Description": "FTP client with debug option enabled shows password to the screen.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1078"}, {"Reference": "CVE-2022-0708", "Description": "Collaboration platform does not clear team emails in a response, allowing leak of email addresses", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-0708"}], "RelatedAttackPatterns": ["116", "13", "169", "22", "224", "285", "287", "290", "291", "292", "293", "294", "295", "296", "297", "298", "299", "300", "301", "302", "303", "304", "305", "306", "307", "308", "309", "310", "312", "313", "317", "318", "319", "320", "321", "322", "323", "324", "325", "326", "327", "328", "329", "330", "472", "497", "508", "573", "574", "575", "576", "577", "59", "60", "616", "643", "646", "651", "79"], "MappingNotes": {"Usage": "Discouraged", "Rationale": "CWE-200 is commonly misused to represent the loss of confidentiality in a vulnerability, but confidentiality loss is a technical impact - not a root cause error. As of CWE 4.9, over 400 CWE entries can lead to a loss of confidentiality. Other options are often available. [REF-1287].", "Comments": "If an error or mistake causes information to be disclosed, then use the CWE ID for that error. Consider starting with improper authorization (CWE-285), insecure permissions (CWE-732), improper authentication (CWE-287), etc. Also consider children such as Insertion of Sensitive Information Into Sent Data (CWE-201), Observable Discrepancy (CWE-203), Insertion of Sensitive Information into Externally-Accessible File or Directory (CWE-538), or others.", "Reasons": ["Frequent Misuse"]}, "Notes": [{"Type": "Maintenance", "Note": "As a result of mapping analysis in the 2020 Top 25 and more recent versions, this weakness is under review, since it is frequently misused in mapping to cover many problems that lead to loss of confidentiality. See Mapping Notes, Extended Description, and Alternate Terms."}], "Top25Examples": [{"Reference": "CVE-2022-29241", "Description": "Jupyter Server provides the backend (i.e. the core services, APIs, and REST endpoints) for Jupyter web applications like Jupyter Notebook. Prior to version 1.17.1, if notebook server is started with a value of `root_dir` that contains the starting user's home directory, then the underlying REST API can be used to leak the access token assigned at start time by guessing/brute forcing the PID of the jupyter server. While this requires an authenticated user session, this URL can be used from a cross-site scripting payload or from a hooked or otherwise compromised browser to leak this access token to a malicious third party. This token can be used along with the REST API to interact with Jupyter services/notebooks such as modifying or overwriting critical files, such as .bashrc or .ssh/authorized_keys, allowing a malicious user to read potentially sensitive data and possibly gain control of the impacted system. This issue is patched in version 1.17.1."}, {"Reference": "CVE-2021-4076", "Description": "A flaw exists in tang, a network-based cryptographic binding server, which could result in leak of private keys."}, {"Reference": "CVE-2022-32540", "Description": "Information Disclosure in Operator Client application in BVMS 10.1.1, 11.0 and 11.1.0 and VIDEOJET Decoder VJD-7513 versions 10.23 and 10.30 allows man-in-the-middle attacker to compromise confidential video stream. This is only applicable for UDP encryption when target system contains cameras with platform CPP13 or CPP14 and firmware version 8.x."}, {"Reference": "CVE-2022-33878", "Description": "An exposure of sensitive information to an unauthorized actor vulnerabiltiy [CWE-200] in FortiClient for Mac versions 7.0.0 through 7.0.5 may allow a local authenticated attacker to obtain the SSL-VPN password in cleartext via running a logstream for the FortiTray process in the terminal."}, {"Reference": "CVE-2022-35169", "Description": "SAP BusinessObjects Business Intelligence Platform (LCM) - versions 420, 430, allows an attacker with an admin privilege to read and decrypt LCMBIAR file's password under certain conditions, enabling the attacker to modify the password or import the file into another system causing high impact on confidentiality but a limited impact on the availability and integrity of the application."}, {"Reference": "CVE-2022-35842", "Description": "An exposure of sensitive information to an unauthorized actor vulnerabiltiy [CWE-200] in FortiOS SSL-VPN versions 7.2.0, versions 7.0.0 through 7.0.6 and versions 6.4.0 through 6.4.9 may allow a remote unauthenticated attacker to gain information about LDAP and SAML settings configured in FortiOS."}, {"Reference": "CVE-2022-22680", "Description": "Exposure of sensitive information to an unauthorized actor vulnerability in Web Server in Synology DiskStation Manager (DSM) before 7.0.1-42218-2 allows remote attackers to obtain sensitive information via unspecified vectors."}, {"Reference": "CVE-2022-27490", "Description": "A exposure of sensitive information to an unauthorized actor in Fortinet FortiManager version 6.0.0 through 6.0.4, FortiAnalyzer version 6.0.0 through 6.0.4, FortiPortal version 6.0.0 through 6.0.9, 5.3.0 through 5.3.8, 5.2.x, 5.1.0, 5.0.x, 4.2.x, 4.1.x, FortiSwitch version 7.0.0 through 7.0.4, 6.4.0 through 6.4.10, 6.2.x, 6.0.x allows an attacker which has obtained access to a restricted administrative account to obtain sensitive information via `diagnose debug` commands."}, {"Reference": "CVE-2022-29512", "Description": "Exposure of sensitive information to an unauthorized actor issue in multiple applications of Cybozu Garoon 4.0.0 to 5.9.1 allows a remote authenticated attacker to obtain the data without the viewing privilege."}, {"Reference": "CVE-2022-39913", "Description": "Exposure of Sensitive Information to an Unauthorized Actor in Persona Manager prior to Android T(13) allows local attacker to access user profiles information."}, {"Reference": "CVE-2022-46355", "Description": "A vulnerability has been identified in SCALANCE X204RNA (HSR) (All versions < V3.2.7), SCALANCE X204RNA (PRP) (All versions < V3.2.7), SCALANCE X204RNA EEC (HSR) (All versions < V3.2.7), SCALANCE X204RNA EEC (PRP) (All versions < V3.2.7), SCALANCE X204RNA EEC (PRP/HSR) (All versions < V3.2.7). The affected products are vulnerable to an \"Exposure of Sensitive Information to an Unauthorized Actor\" vulnerability by leaking sensitive data in the HTTP Referer."}, {"Reference": "CVE-2022-1332", "Description": "One of the API in Mattermost version 6.4.1 and earlier fails to properly protect the permissions, which allows the authenticated members with restricted custom admin role to bypass the restrictions and view the server logs and server config.json file contents."}, {"Reference": "CVE-2021-27424", "Description": "GE UR firmware versions prior to version 8.1x shares MODBUS memory map as part of the communications guide. GE was made aware a \u201cLast-key pressed\u201d MODBUS register can be used to gain unauthorized information."}, {"Reference": "CVE-2021-36198", "Description": "Successful exploitation of this vulnerability could allow an unauthorized user to access sensitive data."}, {"Reference": "CVE-2021-43536", "Description": "Under certain circumstances, asynchronous functions could have caused a navigation to fail but expose the target URL. This vulnerability affects Thunderbird < 91.4.0, Firefox ESR < 91.4.0, and Firefox < 95."}, {"Reference": "CVE-2022-29467", "Description": "Address information disclosure vulnerability in Cybozu Garoon 4.2.0 to 5.5.1 allows a remote authenticated attacker to obtain some data of Address."}, {"Reference": "CVE-2022-37438", "Description": "In Splunk Enterprise versions in the following table, an authenticated user can craft a dashboard that could potentially leak information (for example, username, email, and real name) about Splunk users, when visited by another user through the drilldown component. The vulnerability requires user access to create and share dashboards using Splunk Web."}, {"Reference": "CVE-2022-38400", "Description": "Mailform Pro CGI 4.3.1 and earlier allow a remote unauthenticated attacker to obtain the user input data by having a use of the product to access a specially crafted URL."}, {"Reference": "CVE-2021-24775", "Description": "The Document Embedder WordPress plugin before 1.7.5 contains a REST endpoint, which could allow unauthenticated users to enumerate the title of arbitrary private and draft posts."}, {"Reference": "CVE-2021-24868", "Description": "The Document Embedder WordPress plugin before 1.7.9 contains a AJAX action endpoint, which could allow any authenticated user, such as subscriber to enumerate the title of arbitrary private and draft posts."}, {"Reference": "CVE-2021-30314", "Description": "Lack of validation for third party application accessing the service can lead to information disclosure in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Wearables"}, {"Reference": "CVE-2022-1911", "Description": "Error in parser function in M-Files Server versions before 22.6.11534.1 and before 22.6.11505.0 allowed unauthenticated access to some information of the underlying operating system. "}, {"Reference": "CVE-2022-26869", "Description": "Dell PowerStore versions 2.0.0.x, 2.0.1.x and 2.1.0.x contains an open port vulnerability. A remote unauthenticated attacker could potentially exploit this vulnerability, leading to information disclosure and arbitrary code execution."}, {"Reference": "CVE-2022-27576", "Description": "Information exposure vulnerability in Samsung DeX Home prior to SMR April-2022 Release 1 allows to access currently launched foreground app information without permission"}, {"Reference": "CVE-2022-43901", "Description": " IBM WebSphere Automation for IBM Cloud Pak for Watson AIOps 1.4.3 could disclose sensitive information. An authenticated local attacker could exploit this vulnerability to possibly gain information to other IBM WebSphere Automation for IBM Cloud Pak for Watson AIOps components. IBM X-Force ID: 240829. "}, {"Reference": "CVE-2022-30607", "Description": "IBM Robotic Process Automation 20.10.0, 20.12.5, 21.0.0, 21.0.1, and 21.0.2 contains a vulnerability that could allow a user to obtain sensitive information due to information properly masked in the control center UI. IBM X-Force ID: 227294."}, {"Reference": "CVE-2022-30732", "Description": "Exposure of Sensitive Information vulnerability in Samsung Account prior to version 13.2.00.6 allows attacker to access sensitive information via onActivityResult."}, {"Reference": "CVE-2022-30734", "Description": "Sensitive information exposure in Sign-out log in Samsung Account prior to version 13.2.00.6 allows attackers to get an user email or phone number without permission."}, {"Reference": "CVE-2022-33698", "Description": "Exposure of Sensitive Information in Telecom application prior to SMR Jul-2022 Release 1 allows local attackers to access ICCID via log."}, {"Reference": "CVE-2022-33699", "Description": "Exposure of Sensitive Information in getDsaSimImsi in TelephonyUI prior to SMR Jul-2022 Release 1 allows local attacker to access imsi via log."}, {"Reference": "CVE-2022-33700", "Description": "Exposure of Sensitive Information in putDsaSimImsi in TelephonyUI prior to SMR Jul-2022 Release 1 allows local attacker to access imsi via log."}, {"Reference": "CVE-2022-23726", "Description": "PingCentral versions prior to listed versions expose Spring Boot actuator endpoints that with administrative authentication return large amounts of sensitive environmental and application information."}, {"Reference": "CVE-2022-39914", "Description": "Exposure of Sensitive Information from an Unauthorized Actor vulnerability in Samsung DisplayManagerService prior to Android T(13) allows local attacker to access connected DLNA device information."}, {"Reference": "CVE-2021-25392", "Description": "Improper protection of backup path configuration in Samsung Dex prior to SMR MAY-2021 Release 1 allows local attackers to get sensitive information via changing the path."}, {"Reference": "CVE-2022-46825", "Description": "In JetBrains IntelliJ IDEA before 2022.3 the built-in web server leaked information about open projects."}, {"Reference": "CVE-2021-39089", "Description": "IBM Cloud Pak for Security (CP4S) 1.10.0.0 through 1.10.6.0 could allow an authenticated user to obtain sensitive information from a specially crafted HTTP request. IBM X-Force ID: 216387."}, {"Reference": "CVE-2021-45475", "Description": "Yordam Library Information Document Automation product before version 19.02 has an unauthenticated Information disclosure vulnerability. "}, {"Reference": "CVE-2022-0708", "Description": "Mattermost 6.3.0 and earlier fails to protect email addresses of the creator of the team via one of the APIs, which allows authenticated team members to access this information resulting in sensitive & private information disclosure."}, {"Reference": "CVE-2022-0813", "Description": "PhpMyAdmin 5.1.1 and before allows an attacker to retrieve potentially sensitive information by creating invalid requests. This affects the lang parameter, the pma_parameter, and the cookie section."}, {"Reference": "CVE-2022-1004", "Description": "Accounted time is shown in the Ticket Detail View (External Interface), even if ExternalFrontend::TicketDetailView###AccountedTimeDisplay is disabled."}, {"Reference": "CVE-2022-1186", "Description": "The WordPress plugin Be POPIA Compliant exposed sensitive information to unauthenticated users consisting of site visitors emails and usernames via an API route, in versions up to an including 1.1.5."}, {"Reference": "CVE-2022-2117", "Description": "The GiveWP plugin for WordPress is vulnerable to Sensitive Information Disclosure in versions up to, and including, 2.20.2 via the /donor-wall REST-API endpoint which provides unauthenticated users with donor information even when the donor wall is not enabled. This functionality has been completely removed in version 2.20.2."}, {"Reference": "CVE-2022-22276", "Description": "A vulnerability in SonicOS SNMP service resulting exposure of sensitive information to an unauthorized user."}, {"Reference": "CVE-2022-22287", "Description": "Abitrary file access vulnerability in Samsung Email prior to 6.1.60.16 allows attacker to read isolated data in sandbox."}, {"Reference": "CVE-2022-22542", "Description": "S/4HANA Supplier Factsheet exposes the private address and bank details of an Employee Business Partner with Supplier Role, AND Enterprise Search for Customer, Supplier and Business Partner objects exposes the private address fields of Employee Business Partners, to an actor that is not explicitly authorized to have access to that information, which could compromise Confidentiality."}, {"Reference": "CVE-2022-22545", "Description": "A high privileged user who has access to transaction SM59 can read connection details stored with the destination for http calls in SAP NetWeaver Application Server ABAP and ABAP Platform - versions 700, 701, 702, 710, 711, 730, 731, 740, 750, 751, 752, 753, 754, 755, 756."}, {"Reference": "CVE-2022-22733", "Description": "Exposure of Sensitive Information to an Unauthorized Actor vulnerability in Apache ShardingSphere ElasticJob-UI allows an attacker who has guest account to do privilege escalation. This issue affects Apache ShardingSphere ElasticJob-UI Apache ShardingSphere ElasticJob-UI 3.x version 3.0.0 and prior versions."}, {"Reference": "CVE-2022-23157", "Description": "Wyse Device Agent version 14.6.1.4 and below contain a sensitive data exposure vulnerability. A authenticated malicious user could potentially exploit this vulnerability in order to view sensitive information from the WMS Server."}, {"Reference": "CVE-2022-23648", "Description": "containerd is a container runtime available as a daemon for Linux and Windows. A bug was found in containerd prior to versions 1.6.1, 1.5.10, and 1.14.12 where containers launched through containerd\u2019s CRI implementation on Linux with a specially-crafted image configuration could gain access to read-only copies of arbitrary files and directories on the host. This may bypass any policy-based enforcement on container setup (including a Kubernetes Pod Security Policy) and expose potentially sensitive information. Kubernetes and crictl can both be configured to use containerd\u2019s CRI implementation. This bug has been fixed in containerd 1.6.1, 1.5.10, and 1.4.12. Users should update to these versions to resolve the issue."}, {"Reference": "CVE-2022-23982", "Description": "The vulnerability discovered in WordPress Perfect Brands for WooCommerce plugin (versions <= 2.0.4) allows server information exposure."}, {"Reference": "CVE-2022-23984", "Description": "Sensitive information disclosure discovered in wpDiscuz WordPress plugin (versions <= 7.3.11)."}, {"Reference": "CVE-2022-2401", "Description": "Unrestricted information disclosure of all users in Mattermost version 6.7.0 and earlier allows team members to access some sensitive information by directly accessing the APIs."}, {"Reference": "CVE-2022-24850", "Description": "Discourse is an open source platform for community discussion. A category's group permissions settings can be viewed by anyone that has access to the category. As a result, a normal user is able to see whether a group has read/write permissions in the category even though the information should only be available to the users that can manage a category. This issue is patched in the latest stable, beta and tests-passed versions of Discourse. There are no workarounds for this problem."}, {"Reference": "CVE-2022-25248", "Description": "When connecting to a certain port Axeda agent (All versions) and Axeda Desktop Server for Windows (All versions) supplies the event log of the specific service."}, {"Reference": "CVE-2022-25990", "Description": "On 1.0.x versions prior to 1.0.1, systems running F5OS-A software may expose certain registry ports externally. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated"}, {"Reference": "CVE-2022-27241", "Description": "A vulnerability has been identified in Mendix Applications using Mendix 7 (All versions < V7.23.31), Mendix Applications using Mendix 8 (All versions < V8.18.18), Mendix Applications using Mendix 9 (All versions < V9.11), Mendix Applications using Mendix 9 (V9.6) (All versions < V9.6.12). Applications built with an affected system publicly expose the internal project structure. This could allow an unauthenticated remote attacker to read confidential information."}, {"Reference": "CVE-2022-27614", "Description": "Exposure of sensitive information to an unauthorized actor vulnerability in web server in Synology Media Server before 1.8.1-2876 allows remote attackers to obtain sensitive information via unspecified vectors."}, {"Reference": "CVE-2022-27667", "Description": "Under certain conditions, SAP BusinessObjects Business Intelligence platform, Client Management Console (CMC) - version 430, allows an attacker to access information which would otherwise be restricted, leading to Information Disclosure."}, {"Reference": "CVE-2022-27849", "Description": "Sensitive Information Disclosure (sac-export.csv) in Simple Ajax Chat (WordPress plugin) <= 20220115"}, {"Reference": "CVE-2022-27875", "Description": "On F5 Access for Android 3.x versions prior to 3.0.8, a Task Hijacking vulnerability exists in the F5 Access for Android application, which may allow an attacker to steal sensitive user information. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated"}, {"Reference": "CVE-2022-29244", "Description": "npm pack ignores root-level .gitignore and .npmignore file exclusion directives when run in a workspace or with a workspace flag (ie. `--workspaces`, `--workspace=<name>`). Anyone who has run `npm pack` or `npm publish` inside a workspace, as of v7.9.0 and v7.13.0 respectively, may be affected and have published files into the npm registry they did not intend to include. Users should upgrade to the latest, patched version of npm v8.11.0, run: npm i -g npm@latest . Node.js versions v16.15.1, v17.19.1, and v18.3.0 include the patched v8.11.0 version of npm."}, {"Reference": "CVE-2022-29567", "Description": "The default configuration of a TreeGrid component uses Object::toString as a key on the client-side and server communication in Vaadin 14.8.5 through 14.8.9, 22.0.6 through 22.0.14, 23.0.0.beta2 through 23.0.8 and 23.1.0.alpha1 through 23.1.0.alpha4, resulting in potential information disclosure of values that should not be available on the client-side."}, {"Reference": "CVE-2022-30693", "Description": "Information disclosure vulnerability in the system configuration of Cybozu Office 10.0.0 to 10.8.5 allows a remote attacker to obtain the data of the product via unspecified vectors."}, {"Reference": "CVE-2022-3091", "Description": "RONDS EPM version 1.19.5 has a vulnerability in which a function could allow unauthenticated users to leak credentials. In some circumstances, an attacker can exploit this vulnerability to execute operating system (OS) commands. "}, {"Reference": "CVE-2022-31221", "Description": "Dell BIOS versions contain an Information Exposure vulnerability. A local authenticated administrator user could potentially exploit this vulnerability in order access sensitive state information on the system."}, {"Reference": "CVE-2022-34659", "Description": "A vulnerability has been identified in Simcenter STAR-CCM+ (All versions only if the Power-on-Demand public license server is used). Affected applications expose user, host and display name of users, when the public license server is used. This could allow an attacker to retrieve this information."}, {"Reference": "CVE-2022-35296", "Description": "Under certain conditions, the application SAP BusinessObjects Business Intelligence Platform (Version Management System) exposes sensitive information to an actor over the network with high privileges that is not explicitly authorized to have access to that information, leading to a high impact on Confidentiality."}, {"Reference": "CVE-2022-36834", "Description": "Exposure of Sensitive Information vulnerability in Game Launcher prior to version 6.0.07 allows local attacker to access app data with user interaction."}, {"Reference": "CVE-2022-36878", "Description": "Exposure of Sensitive Information in Find My Mobile prior to version 7.2.25.14 allows local attacker to access IMEI via log."}, {"Reference": "CVE-2022-38456", "Description": "Exposure of Sensitive Information to an Unauthorized Actor vulnerability in Ernest Marcinko Ajax Search Lite plugin <= 4.10.3 versions."}, {"Reference": "CVE-2022-39230", "Description": "fhir-works-on-aws-authz-smart is an implementation of the authorization interface from the FHIR Works interface. Versions 3.1.1 and 3.1.2 are subject to Exposure of Sensitive Information to an Unauthorized Actor. This issue allows a client of the API to retrieve more information than the client\u2019s OAuth scope permits when making \u201csearch-type\u201d requests. This issue would not allow a client to retrieve information about individuals other than those the client was already authorized to access. Users of fhir-works-on-aws-authz-smart 3.1.1 or 3.1.2 should upgrade to version 3.1.3 or higher immediately. Versions 3.1.0 and below are unaffected. There is no workaround for this issue."}, {"Reference": "CVE-2022-39904", "Description": "Exposure of Sensitive Information vulnerability in Samsung Settings prior to SMR Dec-2022 Release 1 allows local attackers to access the Network Access Identifier via log."}, {"Reference": "CVE-2022-40177", "Description": "A vulnerability has been identified in Desigo PXM30-1 (All versions < V02.20.126.11-41), Desigo PXM30.E (All versions < V02.20.126.11-41), Desigo PXM40-1 (All versions < V02.20.126.11-41), Desigo PXM40.E (All versions < V02.20.126.11-41), Desigo PXM50-1 (All versions < V02.20.126.11-41), Desigo PXM50.E (All versions < V02.20.126.11-41), PXG3.W100-1 (All versions < V02.20.126.11-37), PXG3.W100-2 (All versions < V02.20.126.11-41), PXG3.W200-1 (All versions < V02.20.126.11-37), PXG3.W200-2 (All versions < V02.20.126.11-41). Endpoints of the \u201cOperation\u201d web application that interpret and execute Axon language queries allow file read access to the device file system with root privileges. By supplying specific I/O related Axon queries, a remote low-privileged attacker can read sensitive files on the device."}, {"Reference": "CVE-2022-40194", "Description": "Unauthenticated Sensitive Information Disclosure vulnerability in Customer Reviews for WooCommerce plugin <= 5.3.5 at WordPress"}, {"Reference": "CVE-2022-41329", "Description": "An exposure of sensitive information to an unauthorized actor vulnerability [CWE-200] in Fortinet FortiProxy version 7.2.0 through 7.2.1 and 7.0.0 through 7.0.7, FortiOS version 7.2.0 through 7.2.3 and 7.0.0 through 7.0.9 allows an unauthenticated attackers to obtain sensitive logging informations on the device via crafted HTTP GET requests."}, {"Reference": "CVE-2022-41917", "Description": "OpenSearch is a community-driven, open source fork of Elasticsearch and Kibana. OpenSearch allows users to specify a local file when defining text analyzers to process data for text analysis. An issue in the implementation of this feature allows certain specially crafted queries to return a response containing the first line of text from arbitrary files. The list of potentially impacted files is limited to text files with read permissions allowed in the Java Security Manager policy configuration. OpenSearch version 1.3.7 and 2.4.0 contain a fix for this issue. Users are advised to upgrade. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-42266", "Description": "NVIDIA GPU Display Driver for Windows contains a vulnerability in the kernel mode layer (nvlddmkm.sys) handler for DxgkDdiEscape, where an unprivileged regular user can cause exposure of sensitive information to an actor that is not explicitly authorized to have access to that information, which may lead to limited information disclosure."}, {"Reference": "CVE-2022-43573", "Description": "IBM Robotic Process Automation 20.12 through 21.0.6 is vulnerable to exposure of the name and email for the creator/modifier of platform level objects. IBM X-Force ID: 238678."}, {"Reference": "CVE-2022-46650", "Description": "Acemanager in ALEOS before version 4.16 allows a user with valid credentials to reconfigure the device to expose the ACEManager credentials on the pre-login status page."}, {"Reference": "CVE-2021-22786", "Description": "A CWE-200: Information Exposure vulnerability exists that could cause the exposure of sensitive information stored on the memory of the controller when communicating over the Modbus TCP protocol. Affected Products: Modicon M340 CPU (part numbers BMXP34*) (Versions prior to V3.30), Modicon M580 CPU (part numbers BMEP* and BMEH*) (Versions prior to SV3.20), Modicon MC80 (BMKC80) (Versions prior to V1.6), Modicon M580 CPU Safety (part numbers BMEP58*S and BMEH58*S) (All Versions), Modicon Momentum MDI (171CBU*) (Versions prior to V2.3), Legacy Modicon Quantum (All Versions)"}, {"Reference": "CVE-2021-34749", "Description": "A vulnerability in Server Name Identification (SNI) request filtering of Cisco Web Security Appliance (WSA), Cisco Firepower Threat Defense (FTD), and the Snort detection engine could allow an unauthenticated, remote attacker to bypass filtering technology on an affected device and exfiltrate data from a compromised host. This vulnerability is due to inadequate filtering of the SSL handshake. An attacker could exploit this vulnerability by using data from the SSL client hello packet to communicate with an external server. A successful exploit could allow the attacker to execute a command-and-control attack on a compromised host and perform additional data exfiltration attacks."}, {"Reference": "CVE-2021-35070", "Description": "RPM secure Stream can access any secure resource due to improper SMMU configuration and can lead to information disclosure in Snapdragon Industrial IOT, Snapdragon Mobile"}, {"Reference": "CVE-2021-35080", "Description": "Disabled SMMU from secure side while RPM is assigned a secure stream can lead to information disclosure in Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Wearables"}, {"Reference": "CVE-2021-3677", "Description": "A flaw was found in postgresql. A purpose-crafted query can read arbitrary bytes of server memory. In the default configuration, any authenticated database user can complete this attack at will. The attack does not require the ability to create objects. If server settings include max_worker_processes=0, the known versions of this attack are infeasible. However, undiscovered variants of the attack may be independent of that setting."}]}
{"ID": "201", "Name": "Insertion of Sensitive Information Into Sent Data", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The code transmits data to another actor, but a portion of the data includes sensitive information that should not be accessible to that actor.", "ExtendedDescription": "Sensitive information could include data that is sensitive in and of itself (such as credentials or private messages), or otherwise useful in the further exploitation of the system (such as internal file system structure).", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "200", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanAlsoBe", "CweID": "209", "ViewID": "1000"}, {"Nature": "CanAlsoBe", "CweID": "202", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Files or Directories", "Read Memory", "Read Application Data"], "Note": "Sensitive data may be exposed to attackers."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Requirements"], "Description": "Specify which data in the software should be regarded as sensitive. Consider which types of users should have access to which types of data."}, {"Phase": ["Implementation"], "Description": "Ensure that any possibly sensitive data specified in the requirements is verified with designers to ensure that it is either a calculated risk or mitigated elsewhere. Any information that is not necessary to the functionality should be removed in order to lower both the overhead and the possibility of security sensitive data being sent."}, {"Phase": ["System Configuration"], "Description": "Setup default error messages so that unexpected errors do not disclose sensitive information."}, {"MitigationID": "MIT-46", "Phase": ["Architecture and Design"], "Strategy": "Separation of Privilege", "Description": "\n\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\n\n\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n"}], "DemonstrativeExamples": [{"ID": "DX-129", "Entries": [{"IntroText": "The following is an actual MySQL error statement:"}, {"Nature": "Result", "Language": "SQL", "ExampleCode": "```\n\tWarning: mysql_pconnect(): Access denied for user: 'root@localhost' (Using password: N1nj4) in /usr/local/www/wi-data/includes/database.inc on line 4\n```"}, {"BodyText": "The error clearly exposes the database credentials."}]}], "ObservedExamples": [{"Reference": "CVE-2022-0708", "Description": "Collaboration platform does not clear team emails in a response, allowing leak of email addresses", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-0708"}], "RelatedAttackPatterns": ["12", "217", "612", "613", "618", "619", "621", "622", "623"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-27671", "Description": "A CSRF token visible in the URL may possibly lead to information disclosure vulnerability."}, {"Reference": "CVE-2022-24719", "Description": "Fluture-Node is a FP-style HTTP and streaming utils for Node based on Fluture. Using `followRedirects` or `followRedirectsWith` with any of the redirection strategies built into fluture-node 4.0.0 or 4.0.1, paired with a request that includes confidential headers such as Authorization or Cookie, exposes you to a vulnerability where, if the destination server were to redirect the request to a server on a third-party domain, or the same domain over unencrypted HTTP, the headers would be included in the follow-up request and be exposed to the third party, or potential http traffic sniffing. The redirection strategies made available in version 4.0.2 automatically redact confidential headers when a redirect is followed across to another origin. A workaround has been identified by using a custom redirection strategy via the `followRedirectsWith` function. The custom strategy can be based on the new strategies available in fluture-node@4.0.2."}, {"Reference": "CVE-2021-31955", "Description": "Windows Kernel Information Disclosure Vulnerability"}, {"Reference": "CVE-2022-36101", "Description": "Shopware is an open source e-commerce software. In affected versions the request for the customer detail view in the backend administration contained sensitive data like the hashed password and the session ID. These fields are now explicitly unset in version 5.7.15. Users are advised to update and may get the update either via the Auto-Updater or directly via the download overview. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-0654", "Description": "Exposure of Sensitive Information to an Unauthorized Actor in GitHub repository fgribreau/node-request-retry prior to 7.0.0."}, {"Reference": "CVE-2022-2818", "Description": "Improper Removal of Sensitive Information Before Storage or Transfer in GitHub repository cockpit-hq/cockpit prior to 2.2.2. "}, {"Reference": "CVE-2022-0577", "Description": "Exposure of Sensitive Information to an Unauthorized Actor in GitHub repository scrapy/scrapy prior to 2.6.1."}, {"Reference": "CVE-2022-27779", "Description": "libcurl wrongly allows cookies to be set for Top Level Domains (TLDs) if thehost name is provided with a trailing dot.curl can be told to receive and send cookies. curl's \"cookie engine\" can bebuilt with or without [Public Suffix List](https://publicsuffix.org/)awareness. If PSL support not provided, a more rudimentary check exists to atleast prevent cookies from being set on TLDs. This check was broken if thehost name in the URL uses a trailing dot.This can allow arbitrary sites to set cookies that then would get sent to adifferent and unrelated site or domain."}, {"Reference": "CVE-2022-30334", "Description": "Brave before 1.34, when a Private Window with Tor Connectivity is used, leaks .onion URLs in Referer and Origin headers. NOTE: although this was fixed by Brave, the Brave documentation still advises \"Note that Private Windows with Tor Connectivity in Brave are just regular private windows that use Tor as a proxy. Brave does NOT implement most of the privacy protections from Tor Browser.\""}, {"Reference": "CVE-2022-39193", "Description": "An issue was discovered in the CheckUser extension for MediaWiki through 1.39.x. Various components of this extension can expose information on the performer of edits and logged actions. This information should not allow public viewing: it is supposed to be viewable only by users with suppression rights."}, {"Reference": "CVE-2022-31308", "Description": "A vulnerability in live_mfg.shtml of WAVLINK AERIAL X 1200M M79X3.V5030.191012 allows attackers to obtain sensitive router information via execution of the exec cmd function."}, {"Reference": "CVE-2022-31309", "Description": "A vulnerability in live_check.shtml of WAVLINK AERIAL X 1200M M79X3.V5030.180719 allows attackers to obtain sensitive router information via execution of the exec cmd function."}, {"Reference": "CVE-2022-35147", "Description": "DoraCMS v2.18 and earlier allows attackers to bypass login authentication via a crafted HTTP request."}, {"Reference": "CVE-2021-20260", "Description": "A flaw was found in the Foreman project. The Datacenter plugin exposes the password through the API to an authenticated local attacker with view_hosts permission. The highest threat from this vulnerability is to data confidentiality and integrity as well as system availability."}, {"Reference": "CVE-2022-23538", "Description": "github.com/sylabs/scs-library-client is the Go client for the Singularity Container Services (SCS) Container Library Service. When the scs-library-client is used to pull a container image, with authentication, the HTTP Authorization header sent by the client to the library service may be incorrectly leaked to an S3 backing storage provider. This occurs in a specific flow, where the library service redirects the client to a backing S3 storage server, to perform a multi-part concurrent download. Depending on site configuration, the S3 service may be provided by a third party. An attacker with access to the S3 service may be able to extract user credentials, allowing them to impersonate the user. The vulnerable multi-part concurrent download flow, with redirect to S3, is only used when communicating with a Singularity Enterprise 1.x installation, or third party server implementing this flow. Interaction with Singularity Enterprise 2.x, and Singularity Container Services (cloud.sylabs.io), does not trigger the vulnerable flow. We encourage all users to update. Users who interact with a Singularity Enterprise 1.x installation, using a 3rd party S3 storage service, are advised to revoke and recreate their authentication tokens within Singularity Enterprise. There is no workaround available at this time."}, {"Reference": "CVE-2022-31130", "Description": "Grafana is an open source observability and data visualization platform. Versions of Grafana for endpoints prior to 9.1.8 and 8.5.14 could leak authentication tokens to some destination plugins under some conditions. The vulnerability impacts data source and plugin proxy endpoints with authentication tokens. The destination plugin could receive a user's Grafana authentication token. Versions 9.1.8 and 8.5.14 contain a patch for this issue. As a workaround, do not use API keys, JWT authentication, or any HTTP Header based authentication."}, {"Reference": "CVE-2022-42132", "Description": "The Test LDAP Users functionality in Liferay Portal 7.0.0 through 7.4.3.4, and Liferay DXP 7.0 fix pack 102 and earlier, 7.1 before fix pack 27, 7.2 before fix pack 17, 7.3 before update 4, and DXP 7.4 GA includes the LDAP credential in the page URL when paginating through the list of users, which allows man-in-the-middle attackers or attackers with access to the request logs to see the LDAP credential."}, {"Reference": "CVE-2022-31746", "Description": "Internal URLs are protected by a secret UUID key, which could have been leaked to web page through the Referrer header. This vulnerability affects Firefox for iOS < 102."}, {"Reference": "CVE-2021-23937", "Description": "A DNS proxy and possible amplification attack vulnerability in WebClientInfo of Apache Wicket allows an attacker to trigger arbitrary DNS lookups from the server when the X-Forwarded-For header is not properly sanitized. This DNS lookup can be engineered to overload an internal DNS server or to slow down request processing of the Apache Wicket application causing a possible denial of service on either the internal infrastructure or the web application itself. This issue affects Apache Wicket Apache Wicket 9.x version 9.2.0 and prior versions; Apache Wicket 8.x version 8.11.0 and prior versions; Apache Wicket 7.x version 7.17.0 and prior versions and Apache Wicket 6.x version 6.2.0 and later versions."}, {"Reference": "CVE-2022-0235", "Description": "node-fetch is vulnerable to Exposure of Sensitive Information to an Unauthorized Actor"}, {"Reference": "CVE-2022-0355", "Description": "Improper Removal of Sensitive Information Before Storage or Transfer in NPM simple-get prior to 4.0.1. "}, {"Reference": "CVE-2022-0474", "Description": "Full list of recipients from customer users in a contact field could be disclosed in notification emails event when the notification is set to be sent to each recipient individually. This issue affects: OTRS AG OTRSCustomContactFields 8.0.x version: 8.0.11 and prior versions."}, {"Reference": "CVE-2022-0536", "Description": "Improper Removal of Sensitive Information Before Storage or Transfer in NPM follow-redirects prior to 1.14.8. "}, {"Reference": "CVE-2022-1595", "Description": "The HC Custom WP-Admin URL WordPress plugin through 1.4 leaks the secret login URL when sending a specific crafted request"}, {"Reference": "CVE-2022-1650", "Description": "Improper Removal of Sensitive Information Before Storage or Transfer in GitHub repository eventsource/eventsource prior to v2.0.2. "}, {"Reference": "CVE-2022-21642", "Description": "Discourse is an open source platform for community discussion. In affected versions when composing a message from topic the composer user suggestions reveals whisper participants. The issue has been patched in stable version 2.7.13 and beta version 2.8.0.beta11. There is no workaround for this issue and users are advised to upgrade."}, {"Reference": "CVE-2022-21712", "Description": "twisted is an event-driven networking engine written in Python. In affected versions twisted exposes cookies and authorization headers when following cross-origin redirects. This issue is present in the `twited.web.RedirectAgent` and `twisted.web. BrowserLikeRedirectAgent` functions. Users are advised to upgrade. There are no known workarounds."}, {"Reference": "CVE-2022-2462", "Description": "The Transposh WordPress Translation plugin for WordPress is vulnerable to sensitive information disclosure to unauthenticated users in versions up to, and including, 1.0.8.1. This is due to insufficient permissions checking on the 'tp_history' AJAX action and insufficient restriction on the data returned in the response. This makes it possible for unauthenticated users to exfiltrate usernames of individuals who have translated text."}, {"Reference": "CVE-2022-24737", "Description": "HTTPie is a command-line HTTP client. HTTPie has the practical concept of sessions, which help users to persistently store some of the state that belongs to the outgoing requests and incoming responses on the disk for further usage. Before 3.1.0, HTTPie didn\u2018t distinguish between cookies and hosts they belonged. This behavior resulted in the exposure of some cookies when there are redirects originating from the actual host to a third party website. Users are advised to upgrade. There are no known workarounds."}, {"Reference": "CVE-2022-27630", "Description": "An information disclosure vulnerability exists in the confctl_get_master_wlan functionality of TCL LinkHub Mesh Wi-Fi MS1G_00_01.00_14. A specially-crafted network packet can lead to information disclosure. An attacker can send packets to trigger this vulnerability."}, {"Reference": "CVE-2022-27633", "Description": "An information disclosure vulnerability exists in the confctl_get_guest_wlan functionality of TCL LinkHub Mesh Wifi MS1G_00_01.00_14. A specially-crafted network packet can lead to information disclosure. An attacker can send packets to trigger this vulnerability."}, {"Reference": "CVE-2022-27891", "Description": "Palantir Gotham included an unauthenticated endpoint that listed all active usernames on the stack with an active session. The affected services have been patched and automatically deployed to all Apollo-managed Gotham instances. It is highly recommended that customers upgrade all affected services to the latest version. This issue affects: Palantir Gotham versions prior to 103.30221005.0."}, {"Reference": "CVE-2022-29232", "Description": "BigBlueButton is an open source web conferencing system. Starting with version 2.2 and prior to versions 2.3.9 and 2.4-beta-1, an attacker can circumvent access controls to obtain the content of public chat messages from different meetings on the server. The attacker must be a participant in a meeting on the server. BigBlueButton versions 2.3.9 and 2.4-beta-1 contain a patch for this issue. There are currently no known workarounds."}, {"Reference": "CVE-2022-31042", "Description": "Guzzle is an open source PHP HTTP client. In affected versions the `Cookie` headers on requests are sensitive information. On making a request using the `https` scheme to a server which responds with a redirect to a URI with the `http` scheme, or on making a request to a server which responds with a redirect to a a URI to a different host, we should not forward the `Cookie` header on. Prior to this fix, only cookies that were managed by our cookie middleware would be safely removed, and any `Cookie` header manually added to the initial request would not be stripped. We now always strip it, and allow the cookie middleware to re-add any cookies that it deems should be there. Affected Guzzle 7 users should upgrade to Guzzle 7.4.4 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.7 or 7.4.4. Users unable to upgrade may consider an alternative approach to use your own redirect middleware, rather than ours. If you do not require or expect redirects to be followed, one should simply disable redirects all together."}, {"Reference": "CVE-2022-31043", "Description": "Guzzle is an open source PHP HTTP client. In affected versions `Authorization` headers on requests are sensitive information. On making a request using the `https` scheme to a server which responds with a redirect to a URI with the `http` scheme, we should not forward the `Authorization` header on. This is much the same as to how we don't forward on the header if the host changes. Prior to this fix, `https` to `http` downgrades did not result in the `Authorization` header being removed, only changes to the host. Affected Guzzle 7 users should upgrade to Guzzle 7.4.4 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.7 or 7.4.4. Users unable to upgrade may consider an alternative approach which would be to use their own redirect middleware. Alternately users may simply disable redirects all together if redirects are not expected or required."}, {"Reference": "CVE-2022-31069", "Description": "NestJS Proxy is a NestJS module to decorate and proxy calls. Prior to version 0.7.0, the nestjs-proxy library did not have a way to control when Authorization headers should should be forwarded for specific backend services configured by the application developer. This could have resulted in sensitive information such as OAuth bearer access tokens being inadvertently exposed to such services that should not see them. A new feature has been introduced in the patched version of nestjs-proxy that allows application developers to opt out of forwarding the Authorization headers on a per service basis using the `forwardToken` config setting. Developers are advised to review the README for this library on Github or NPM for further details on how this configuration can be applied. This issue has been fixed in version 0.7.0 of `@finastra/nestjs-proxy`. Users of `@ffdc/nestjs-proxy` are advised that this package has been deprecated and is no longer being maintained or receiving updates. Such users should update their package.json file to use `@finastra/nestjs-proxy` instead."}, {"Reference": "CVE-2022-31070", "Description": "NestJS Proxy is a NestJS module to decorate and proxy calls. Prior to version 0.7.0, the nestjs-proxy library did not have a way to block sensitive cookies (e.g. session cookies) from being forwarded to backend services configured by the application developer. This could have led to sensitive cookies being inadvertently exposed to such services that should not see them. The patched version now blocks cookies from being forwarded by default. However developers can configure an allow-list of cookie names by using the `allowedCookies` config setting. This issue has been fixed in version 0.7.0 of `@finastra/nestjs-proxy`. Users of `@ffdc/nestjs-proxy` are advised that this package has been deprecated and is no longer being maintained or receiving updates. Such users should update their package.json file to use `@finastra/nestjs-proxy` instead."}, {"Reference": "CVE-2022-31090", "Description": "Guzzle, an extensible PHP HTTP client. `Authorization` headers on requests are sensitive information. In affected versions when using our Curl handler, it is possible to use the `CURLOPT_HTTPAUTH` option to specify an `Authorization` header. On making a request which responds with a redirect to a URI with a different origin (change in host, scheme or port), if we choose to follow it, we should remove the `CURLOPT_HTTPAUTH` option before continuing, stopping curl from appending the `Authorization` header to the new request. Affected Guzzle 7 users should upgrade to Guzzle 7.4.5 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.8 or 7.4.5. Note that a partial fix was implemented in Guzzle 7.4.2, where a change in host would trigger removal of the curl-added Authorization header, however this earlier fix did not cover change in scheme or change in port. If you do not require or expect redirects to be followed, one should simply disable redirects all together. Alternatively, one can specify to use the Guzzle steam handler backend, rather than curl."}, {"Reference": "CVE-2022-31112", "Description": "Parse Server is an open source backend that can be deployed to any infrastructure that can run Node.js. In affected versions parse Server LiveQuery does not remove protected fields in classes, passing them to the client. The LiveQueryController now removes protected fields from the client response. Users are advised to upgrade. Users unable t upgrade should use `Parse.Cloud.afterLiveQueryEvent` to manually remove protected fields."}, {"Reference": "CVE-2022-3348", "Description": "Just like in the previous report, an attacker could steal the account of different users. But in this case, it's a little bit more specific, because it is needed to be an editor in the same app as the victim."}, {"Reference": "CVE-2022-3460", "Description": "In affected versions of Octopus Deploy it is possible for certain types of sensitive variables to inadvertently become unmasked when viewed in variable preview."}, {"Reference": "CVE-2022-38113", "Description": "This vulnerability discloses build and services versions in the server response header. "}, {"Reference": "CVE-2022-46150", "Description": "Discourse is an open-source discussion platform. Prior to version 2.8.13 of the `stable` branch and version 2.9.0.beta14 of the `beta` and `tests-passed` branches, unauthorized users may learn of the existence of hidden tags and that they have been applied to topics that they have access to. This issue is patched in version 2.8.13 of the `stable` branch and version 2.9.0.beta14 of the `beta` and `tests-passed` branches. As a workaround, use the `disable_email` site setting to disable all emails to non-staff users."}]}
{"ID": "202", "Name": "Exposure of Sensitive Information Through Data Queries", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "When trying to keep information confidential, an attacker can often infer some of the information by using statistics.", "ExtendedDescription": "In situations where data should not be tied to individual users, but a large number of users should be able to make queries that \"scrub\" the identity of users, it may be possible to get information about a user -- e.g., by specifying search terms that are known to be unique to that user.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1230", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Files or Directories", "Read Application Data"], "Note": "Sensitive information may possibly be leaked through data queries accidentally."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "This is a complex topic. See the book Translucent Databases for a good discussion of best practices."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "See the book Translucent Databases for examples."}]}], "ObservedExamples": [{"Reference": "CVE-2022-41935", "Description": "Wiki product allows an adversary to discover filenames via a series of queries starting with one letter and then iteratively extending the match.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-41935"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "\n\nThe relationship between CWE-202 and CWE-612 needs to be investigated more closely, as they may be different descriptions of the same kind of problem. CWE-202 is also being considered for deprecation, as it is not clearly described and may have been misunderstood by CWE users. It could be argued that this issue is better covered by CAPEC; an attacker can utilize their data-query privileges to perform this kind of operation, and if the attacker should not be allowed to perform the operation - or if the sensitive data should not have been made accessible at all - then that is more appropriately classified as a separate CWE related to authorization (see the parent, CWE-1230).\n"}], "Top25Examples": [{"Reference": "CVE-2022-31177", "Description": "Flask-AppBuilder is an application development framework built on top of Flask python framework. In versions prior to 4.1.3 an authenticated Admin user could query other users by their salted and hashed passwords strings. These filters could be made by using partial hashed password strings. The response would not include the hashed passwords, but an attacker could infer partial password hashes and their respective users. This issue has been fixed in version 4.1.3. Users are advised to upgrade. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-41935", "Description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Users without the right to view documents can deduce their existence by repeated Livetable queries. The issue has been patched in XWiki 14.6RC1, 13.10.8, and 14.4.3, the response is not properly cleaned up of obfuscated entries. As a workaround, The patch for the document `XWiki.LiveTableResultsMacros` can be manually applied or a XAR archive of a patched version can be imported, on versions 12.10.11, 13.9-rc-1, and 13.4.4. There are no known workarounds for this issue."}]}
{"ID": "203", "Name": "Observable Discrepancy", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which exposes security-relevant information about the state of the product, such as whether a particular operation was successful or not.", "ExtendedDescription": "Discrepancies can take many forms, and variations may be detectable in timing, control flow, communications such as replies or requests, or general behavior. These discrepancies can reveal information about the product's operation or internal state to an unauthorized actor. In some cases, discrepancies can be used by attackers to form a side channel.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "200", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "200", "ViewID": "1003", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Side Channel Attack", "Description": "Observable Discrepancies are at the root of side channel attacks."}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Access Control"], "Impact": ["Read Application Data", "Bypass Protection Mechanism"], "Note": "An attacker can gain access to sensitive information about the system, including authentication information that may allow an attacker to gain access to the system."}, {"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "When cryptographic primitives are vulnerable to side-channel-attacks, this could be used to reveal unencrypted plaintext in the worst case."}], "PotentialMitigations": [{"MitigationID": "MIT-46", "Phase": ["Architecture and Design"], "Strategy": "Separation of Privilege", "Description": "\n\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\n\n\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n"}, {"MitigationID": "MIT-39", "Phase": ["Implementation"], "Description": "\n\nEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.\n\n\nIf errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.\n\n\nAvoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n"}], "DemonstrativeExamples": [{"ID": "DX-38", "Entries": [{"IntroText": "The following code checks validity of the supplied username and password and notifies the user of a successful or failed login."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\tmy $username=param('username'); \n\tmy $password=param('password'); \n\tif (IsValidUsername($username) == 1) \n\t{ \n\t\tif (IsValidPassword($username, $password) == 1) \n\t\t{ \n\t\t\tprint \"Login Successful\"; \n\t\t} \n\t\telse \n\t\t{ \n\t\t\tprint \"Login Failed - incorrect password\"; \n\t\t} \n\t} \n\telse \n\t{ \n\t\tprint \"Login Failed - unknown username\"; \n\t} \n```"}, {"BodyText": "In the above code, there are different messages for when an incorrect username is supplied, versus when the username is correct but the password is wrong. This difference enables a potential attacker to understand the state of the login function, and could allow an attacker to discover a valid username by trying different values until the incorrect password message is returned. In essence, this makes it easier for an attacker to obtain half of the necessary authentication credentials."}, {"BodyText": "While this type of information may be helpful to a user, it is also useful to a potential attacker. In the above example, the message for both failed cases should be the same, such as:"}, {"Nature": "Result", "ExampleCode": "```\n\t\"Login Failed - incorrect username or password\"\n```"}]}, {"ID": "DX-193", "Entries": [{"IntroText": "In this example, the attacker observes how long an authentication takes when the user types in the correct password."}, {"BodyText": "When the attacker tries their own values, they can first try strings of various length. When they find a string of the right length, the computation will take a bit longer, because the for loop will run at least once. Additionally, with this code, the attacker can possibly learn one character of the password at a time, because when they guess the first character right, the computation will take longer than a wrong guesses. Such an attack can break even the most sophisticated password with a few hundred guesses."}, {"Nature": "Bad", "Language": "Python", "ExampleCode": "```\n\tdef validate_password(actual_pw, typed_pw): \n\t\t\tif len(actual_pw) <> len(typed_pw): \n\t\t\t\treturn 0\n\t\t\tfor i in len(actual_pw): \n\t\t\t\tif actual_pw[i] <> typed_pw[i]: \n\t\t\t\t\treturn 0\n\t\t\treturn 1\n```"}, {"BodyText": "Note that in this example, the actual password must be handled in constant time as far as the attacker is concerned, even if the actual password is of an unusual length. This is one reason why it is good to use an algorithm that, among other things, stores a seeded cryptographic one-way hash of the password, then compare the hashes, which will always be of the same length."}]}, {"Entries": [{"IntroText": "Non-uniform processing time causes timing channel."}, {"Nature": "Bad", "ExampleCode": "Suppose an algorithm for implementing an encryption routine works fine per se, but the time taken to output the result of the encryption routine depends on a relationship between the input plaintext and the key (e.g., suppose, if the plaintext is similar to the key, it would run very fast)."}, {"BodyText": "In the example above, an attacker may vary the inputs, then observe differences between processing times (since different plaintexts take different time). This could be used to infer information about the key."}, {"Nature": "Good", "ExampleCode": "Artificial delays may be added to ensured all calculations take equal time to execute."}]}, {"Entries": [{"IntroText": "Suppose memory access patterns for an encryption routine are dependent on the secret key."}, {"BodyText": "An attacker can recover the key by knowing if specific memory locations have been accessed or not. The value stored at those memory locations is irrelevant. The encryption routine's memory accesses will affect the state of the processor cache. If cache resources are shared across contexts, after the encryption routine completes, an attacker in different execution context can discover which memory locations the routine accessed by measuring the time it takes for their own memory accesses to complete."}]}], "ObservedExamples": [{"Reference": "CVE-2020-8695", "Description": "Observable discrepancy in the RAPL interface for some Intel processors allows information disclosure.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-8695"}, {"Reference": "CVE-2019-14353", "Description": "Crypto hardware wallet's power consumption relates to total number of pixels illuminated, creating a side channel in the USB connection that allows attackers to determine secrets displayed such as PIN numbers and passwords", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-14353"}, {"Reference": "CVE-2019-10071", "Description": "Java-oriented framework compares HMAC signatures using String.equals() instead of a constant-time algorithm, causing timing discrepancies", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-10071"}, {"Reference": "CVE-2002-2094", "Description": "This, and others, use \"..\" attacks and monitor error responses, so there is overlap with directory traversal.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2094"}, {"Reference": "CVE-2001-1483", "Description": "Enumeration of valid usernames based on inconsistent responses", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1483"}, {"Reference": "CVE-2001-1528", "Description": "Account number enumeration via inconsistent responses.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1528"}, {"Reference": "CVE-2004-2150", "Description": "User enumeration via discrepancies in error messages.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2150"}, {"Reference": "CVE-2005-1650", "Description": "User enumeration via discrepancies in error messages.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1650"}, {"Reference": "CVE-2004-0294", "Description": "Bulletin Board displays different error messages when a user exists or not, which makes it easier for remote attackers to identify valid users and conduct a brute force password guessing attack.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0294"}, {"Reference": "CVE-2004-0243", "Description": "Operating System, when direct remote login is disabled, displays a different message if the password is correct, which allows remote attackers to guess the password via brute force methods.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0243"}, {"Reference": "CVE-2002-0514", "Description": "Product allows remote attackers to determine if a port is being filtered because the response packet TTL is different than the default TTL.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0514"}, {"Reference": "CVE-2002-0515", "Description": "Product sets a different TTL when a port is being filtered than when it is not being filtered, which allows remote attackers to identify filtered ports by comparing TTLs.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0515"}, {"Reference": "CVE-2002-0208", "Description": "Product modifies TCP/IP stack and ICMP error messages in unusual ways that show the product is in use.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0208"}, {"Reference": "CVE-2004-2252", "Description": "Behavioral infoleak by responding to SYN-FIN packets.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2252"}, {"Reference": "CVE-2001-1387", "Description": "Product may generate different responses than specified by the administrator, possibly leading to an information leak.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1387"}, {"Reference": "CVE-2004-0778", "Description": "Version control system allows remote attackers to determine the existence of arbitrary files and directories via the -X command for an alternate history file, which causes different error messages to be returned.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0778"}, {"Reference": "CVE-2004-1428", "Description": "FTP server generates an error message if the user name does not exist instead of prompting for a password, which allows remote attackers to determine valid usernames.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1428"}, {"Reference": "CVE-2003-0078", "Description": "SSL implementation does not perform a MAC computation if an incorrect block cipher padding is used, which causes an information leak (timing discrepancy) that may make it easier to launch cryptographic attacks that rely on distinguishing between padding and MAC verification errors, possibly leading to extraction of the original plaintext, aka the \"Vaudenay timing attack.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0078"}, {"Reference": "CVE-2000-1117", "Description": "Virtual machine allows malicious web site operators to determine the existence of files on the client by measuring delays in the execution of the getSystemResource method.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1117"}, {"Reference": "CVE-2003-0637", "Description": "Product uses a shorter timeout for a non-existent user than a valid user, which makes it easier for remote attackers to guess usernames and conduct brute force password guessing.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0637"}, {"Reference": "CVE-2003-0190", "Description": "Product immediately sends an error message when a user does not exist, which allows remote attackers to determine valid usernames via a timing attack.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0190"}, {"Reference": "CVE-2004-1602", "Description": "FTP server responds in a different amount of time when a given username exists, which allows remote attackers to identify valid usernames by timing the server response.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1602"}, {"Reference": "CVE-2005-0918", "Description": "Browser allows remote attackers to determine the existence of arbitrary files by setting the src property to the target filename and using Javascript to determine if the web page immediately stops loading, which indicates whether the file exists or not.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0918"}], "RelatedAttackPatterns": ["189"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-39021", "Description": "IBM Guardium Data Encryption (GDE) 5.0.0.2 behaves differently or sends different responses under different circumstances in a way that is observable to an unauthorized actor, which could facilitate username enumeration. IBM X-Force ID: 213856."}, {"Reference": "CVE-2021-46744", "Description": "An attacker with access to a malicious hypervisor may be able to infer data values used in a SEV guest on AMD CPUs by monitoring ciphertext values over time."}, {"Reference": "CVE-2022-1318", "Description": "Hills ComNav version 3002-19 suffers from a weak communication channel. Traffic across the local network for the configuration pages can be viewed by a malicious actor. The size of certain communications packets are predictable. This would allow an attacker to learn the state of the system if they can observe the traffic. This would be possible even if the traffic were encrypted, e.g., using WPA2, as the packet sizes would remain observable. The communication encryption scheme is theoretically sound, but is not strong enough for the level of protection required."}, {"Reference": "CVE-2022-20866", "Description": "A vulnerability in the handling of RSA keys on devices running Cisco Adaptive Security Appliance (ASA) Software and Cisco Firepower Threat Defense (FTD) Software could allow an unauthenticated, remote attacker to retrieve an RSA private key. This vulnerability is due to a logic error when the RSA key is stored in memory on a hardware platform that performs hardware-based cryptography. An attacker could exploit this vulnerability by using a Lenstra side-channel attack against the targeted device. A successful exploit could allow the attacker to retrieve the RSA private key. The following conditions may be observed on an affected device: This vulnerability will apply to approximately 5 percent of the RSA keys on a device that is running a vulnerable release of Cisco ASA Software or Cisco FTD Software; not all RSA keys are expected to be affected due to mathematical calculations applied to the RSA key. The RSA key could be valid but have specific characteristics that make it vulnerable to the potential leak of the RSA private key. If an attacker obtains the RSA private key, they could use the key to impersonate a device that is running Cisco ASA Software or Cisco FTD Software or to decrypt the device traffic. See the Indicators of Compromise section for more information on the detection of this type of RSA key. The RSA key could be malformed and invalid. A malformed RSA key is not functional, and a TLS client connection to a device that is running Cisco ASA Software or Cisco FTD Software that uses the malformed RSA key will result in a TLS signature failure, which means a vulnerable software release created an invalid RSA signature that failed verification. If an attacker obtains the RSA private key, they could use the key to impersonate a device that is running Cisco ASA Software or Cisco FTD Software or to decrypt the device traffic."}, {"Reference": "CVE-2022-20940", "Description": "A vulnerability in the TLS handler of Cisco Firepower Threat Defense (FTD) Software could allow an unauthenticated, remote attacker to gain access to sensitive information. This vulnerability is due to improper implementation of countermeasures against a Bleichenbacher attack on a device that uses SSL decryption policies. An attacker could exploit this vulnerability by sending crafted TLS messages to an affected device, which would act as an oracle and allow the attacker to carry out a chosen-ciphertext attack. A successful exploit could allow the attacker to perform cryptanalytic operations that may allow decryption of previously captured TLS sessions to the affected device."}, {"Reference": "CVE-2022-27221", "Description": "A vulnerability has been identified in SINEMA Remote Connect Server (All versions < V3.1). An attacker in machine-in-the-middle could obtain plaintext secret values by observing length differences during a series of guesses in which a string in an HTTP request URL potentially matches an unknown string in an HTTP response body, aka a \"BREACH\" attack."}, {"Reference": "CVE-2022-32296", "Description": "The Linux kernel before 5.17.9 allows TCP servers to identify clients by observing what source ports are used. This occurs because of use of Algorithm 4 (\"Double-Hash Port Selection Algorithm\") of RFC 6056."}, {"Reference": "CVE-2022-0823", "Description": "An improper control of interaction frequency vulnerability in Zyxel GS1200 series switches could allow a local attacker to guess the password by using a timing side-channel attack."}, {"Reference": "CVE-2022-20275", "Description": "In DevicePolicyManager, there is a possible way to determine whether an app is installed, without query permissions, due to side channel information disclosure. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-205836975"}, {"Reference": "CVE-2022-20276", "Description": "In DevicePolicyManager, there is a possible way to determine whether an app is installed, without query permissions, due to side channel information disclosure. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-205706731"}, {"Reference": "CVE-2022-20277", "Description": "In DevicePolicyManager, there is a possible way to determine whether an app is installed, without query permissions, due to side channel information disclosure. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-205145497"}, {"Reference": "CVE-2022-20279", "Description": "In DevicePolicyManager, there is a possible way to determine whether an app is installed, without query permissions, due to side channel information disclosure. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-204877302"}, {"Reference": "CVE-2022-4087", "Description": "A vulnerability was found in iPXE. It has been declared as problematic. This vulnerability affects the function tls_new_ciphertext of the file src/net/tls.c of the component TLS. The manipulation of the argument pad_len leads to information exposure through discrepancy. The name of the patch is 186306d6199096b7a7c4b4574d4be8cdb8426729. It is recommended to apply a patch to fix this issue. VDB-214054 is the identifier assigned to this vulnerability."}, {"Reference": "CVE-2021-33838", "Description": "Luca through 1.7.4 on Android allows remote attackers to obtain sensitive information about COVID-19 tracking because requests related to Check-In State occur shortly after requests for Phone Number Registration."}]}
{"ID": "204", "Name": "Observable Response Discrepancy", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product provides different responses to incoming requests in a way that reveals internal state information to an unauthorized actor outside of the intended control sphere.", "ExtendedDescription": "This issue frequently occurs during authentication, where a difference in failed-login messages could allow an attacker to determine if the username is valid or not. These exposures can be inadvertent (bug) or intentional (design).", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "203", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Access Control"], "Impact": ["Read Application Data", "Bypass Protection Mechanism"]}], "PotentialMitigations": [{"MitigationID": "MIT-46", "Phase": ["Architecture and Design"], "Strategy": "Separation of Privilege", "Description": "\n\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\n\n\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n"}, {"MitigationID": "MIT-39", "Phase": ["Implementation"], "Description": "\n\nEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.\n\n\nIf errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.\n\n\nAvoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n"}], "DemonstrativeExamples": [{"ID": "DX-38", "Entries": [{"IntroText": "The following code checks validity of the supplied username and password and notifies the user of a successful or failed login."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\tmy $username=param('username'); \n\tmy $password=param('password'); \n\tif (IsValidUsername($username) == 1) \n\t{ \n\t\tif (IsValidPassword($username, $password) == 1) \n\t\t{ \n\t\t\tprint \"Login Successful\"; \n\t\t} \n\t\telse \n\t\t{ \n\t\t\tprint \"Login Failed - incorrect password\"; \n\t\t} \n\t} \n\telse \n\t{ \n\t\tprint \"Login Failed - unknown username\"; \n\t} \n```"}, {"BodyText": "In the above code, there are different messages for when an incorrect username is supplied, versus when the username is correct but the password is wrong. This difference enables a potential attacker to understand the state of the login function, and could allow an attacker to discover a valid username by trying different values until the incorrect password message is returned. In essence, this makes it easier for an attacker to obtain half of the necessary authentication credentials."}, {"BodyText": "While this type of information may be helpful to a user, it is also useful to a potential attacker. In the above example, the message for both failed cases should be the same, such as:"}, {"Nature": "Result", "ExampleCode": "```\n\t\"Login Failed - incorrect username or password\"\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2002-2094", "Description": "This, and others, use \"..\" attacks and monitor error responses, so there is overlap with directory traversal.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2094"}, {"Reference": "CVE-2001-1483", "Description": "Enumeration of valid usernames based on inconsistent responses", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1483"}, {"Reference": "CVE-2001-1528", "Description": "Account number enumeration via inconsistent responses.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1528"}, {"Reference": "CVE-2004-2150", "Description": "User enumeration via discrepancies in error messages.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2150"}, {"Reference": "CVE-2005-1650", "Description": "User enumeration via discrepancies in error messages.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1650"}, {"Reference": "CVE-2004-0294", "Description": "Bulletin Board displays different error messages when a user exists or not, which makes it easier for remote attackers to identify valid users and conduct a brute force password guessing attack.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0294"}, {"Reference": "CVE-2004-0243", "Description": "Operating System, when direct remote login is disabled, displays a different message if the password is correct, which allows remote attackers to guess the password via brute force methods.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0243"}, {"Reference": "CVE-2002-0514", "Description": "Product allows remote attackers to determine if a port is being filtered because the response packet TTL is different than the default TTL.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0514"}, {"Reference": "CVE-2002-0515", "Description": "Product sets a different TTL when a port is being filtered than when it is not being filtered, which allows remote attackers to identify filtered ports by comparing TTLs.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0515"}, {"Reference": "CVE-2001-1387", "Description": "Product may generate different responses than specified by the administrator, possibly leading to an information leak.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1387"}, {"Reference": "CVE-2004-0778", "Description": "Version control system allows remote attackers to determine the existence of arbitrary files and directories via the -X command for an alternate history file, which causes different error messages to be returned.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0778"}, {"Reference": "CVE-2004-1428", "Description": "FTP server generates an error message if the user name does not exist instead of prompting for a password, which allows remote attackers to determine valid usernames.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1428"}], "RelatedAttackPatterns": ["331", "332", "541", "580"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "can overlap errors related to escalated privileges"}], "Top25Examples": [{"Reference": "CVE-2022-24784", "Description": "Statamic is a Laravel and Git powered CMS. Before versions 3.2.39 and 3.3.2, it is possible to confirm a single character of a user's password hash using a specially crafted regular expression filter in the users endpoint of the REST API. Multiple such requests can eventually uncover the entire hash. The hash is not present in the response, however the presence or absence of a result confirms if the character is in the right position. The API has throttling enabled by default, making this a time intensive task. Both the REST API and the users endpoint need to be enabled, as they are disabled by default. The issue has been fixed in versions 3.2.39 and above, and 3.3.2 and above."}, {"Reference": "CVE-2021-20147", "Description": "ManageEngine ADSelfService Plus below build 6116 contains an observable response discrepancy in the UMCP operation of the ChangePasswordAPI. This allows an unauthenticated remote attacker to determine whether a Windows domain user exists."}, {"Reference": "CVE-2021-38009", "Description": "Inappropriate implementation in cache in Google Chrome prior to 96.0.4664.45 allowed a remote attacker to leak cross-origin data via a crafted HTML page."}, {"Reference": "CVE-2022-1139", "Description": "Inappropriate implementation in Background Fetch API in Google Chrome prior to 100.0.4896.60 allowed a remote attacker to leak cross-origin data via a crafted HTML page."}, {"Reference": "CVE-2022-27814", "Description": "SWHKD 1.1.5 allows arbitrary file-existence tests via the -c option."}, {"Reference": "CVE-2022-47952", "Description": "lxc-user-nic in lxc through 5.0.1 is installed setuid root, and may allow local users to infer whether any file exists, even within a protected directory tree, because \"Failed to open\" often indicates that a file does not exist, whereas \"does not refer to a network namespace path\" often indicates that a file exists. NOTE: this is different from CVE-2018-6556 because the CVE-2018-6556 fix design was based on the premise that \"we will report back to the user that the open() failed but the user has no way of knowing why it failed\"; however, in many realistic cases, there are no plausible reasons for failing except that the file does not exist."}, {"Reference": "CVE-2022-24032", "Description": "Adenza AxiomSL ControllerView through 10.8.1 is vulnerable to user enumeration. An attacker can identify valid usernames on the platform because a failed login attempt produces a different error message when the username is valid."}, {"Reference": "CVE-2022-0569", "Description": "Observable Discrepancy in Packagist snipe/snipe-it prior to v5.3.9. "}, {"Reference": "CVE-2022-32218", "Description": "An information disclosure vulnerability exists in Rocket.Chat <v5, <v4.8.2 and <v4.7.5 due to the actionLinkHandler method was found to allow Message ID Enumeration with Regex MongoDB queries."}]}
{"ID": "205", "Name": "Observable Behavioral Discrepancy", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product's behaviors indicate important differences that may be observed by unauthorized actors in a way that reveals (1) its internal state or decision process, or (2) differences from other products with equivalent functionality.", "ExtendedDescription": "Ideally, a product should provide as little information about its internal operations as possible. Otherwise, attackers could use knowledge of these internal operations to simplify or optimize their attack. In some cases, behavioral discrepancies can be used by attackers to form a side channel.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "203", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "514", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Access Control"], "Impact": ["Read Application Data", "Bypass Protection Mechanism"]}], "ObservedExamples": [{"Reference": "CVE-2002-0208", "Description": "Product modifies TCP/IP stack and ICMP error messages in unusual ways that show the product is in use.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0208"}, {"Reference": "CVE-2004-2252", "Description": "Behavioral infoleak by responding to SYN-FIN packets.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2252"}], "RelatedAttackPatterns": ["541", "580"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-32528", "Description": "Observable behavioral discrepancy vulnerability in QSAN Storage Manager allows remote attackers to obtain the system information without permissions. Suggest contacting with QSAN and refer to recommendations in QSAN Document."}]}
{"ID": "206", "Name": "Observable Internal Behavioral Discrepancy", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product performs multiple behaviors that are combined to produce a single result, but the individual behaviors are observable separately in a way that allows attackers to reveal internal state or internal decision points.", "ExtendedDescription": "Ideally, a product should provide as little information as possible to an attacker. Any hints that the attacker may be making progress can then be used to simplify or optimize the attack. For example, in a login procedure that requires a username and password, ultimately there is only one decision: success or failure. However, internally, two separate actions are performed: determining if the username exists, and checking if the password is correct. If the product behaves differently based on whether the username exists or not, then the attacker only needs to concentrate on the password.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "205", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Access Control"], "Impact": ["Read Application Data", "Bypass Protection Mechanism"]}], "PotentialMitigations": [{"Description": "Setup generic response pages for error conditions. The error page should not disclose information about the success or failure of a sensitive operation. For instance, the login page should not confirm that the login is correct and the password incorrect. The attacker who tries random account name may be able to guess some of them. Confirming that the account exists would make the login page more susceptible to brute force attack."}], "ObservedExamples": [{"Reference": "CVE-2002-2031", "Description": "File existence via infoleak monitoring whether \"onerror\" handler fires or not.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2031"}, {"Reference": "CVE-2005-2025", "Description": "Valid groupname enumeration via behavioral infoleak (sends response if valid, doesn't respond if not).", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2025"}, {"Reference": "CVE-2001-1497", "Description": "Behavioral infoleak in GUI allows attackers to distinguish between alphanumeric and non-alphanumeric characters in a password, thus reducing the search space.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1497"}, {"Reference": "CVE-2003-0190", "Description": "Product immediately sends an error message when user does not exist instead of waiting until the password is provided, allowing username enumeration.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0190"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "207", "Name": "Observable Behavioral Discrepancy With Equivalent Products", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product operates in an environment in which its existence or specific identity should not be known, but it behaves differently than other products with equivalent functionality, in a way that is observable to an attacker.", "ExtendedDescription": "For many kinds of products, multiple products may be available that perform the same functionality, such as a web server, network interface, or intrusion detection system. Attackers often perform \"fingerprinting,\" which uses discrepancies in order to identify which specific product is in use. Once the specific product has been identified, the attacks can be made more customized and efficient. Often, an organization might intentionally allow the specific product to be identifiable. However, in some environments, the ability to identify a distinct product is unacceptable, and it is expected that every product would behave in exactly the same way. In these more restricted environments, a behavioral difference might pose an unacceptable risk if it makes it easier to identify the product's vendor, model, configuration, version, etc.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "205", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Access Control"], "Impact": ["Read Application Data", "Bypass Protection Mechanism"]}], "ObservedExamples": [{"Reference": "CVE-2002-0208", "Description": "Product modifies TCP/IP stack and ICMP error messages in unusual ways that show the product is in use.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0208"}, {"Reference": "CVE-2004-2252", "Description": "Behavioral infoleak by responding to SYN-FIN packets.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2252"}, {"Reference": "CVE-2000-1142", "Description": "Honeypot generates an error with a \"pwd\" command in a particular directory, allowing attacker to know they are in a honeypot system.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1142"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "208", "Name": "Observable Timing Discrepancy", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "Two separate operations in a product require different amounts of time to complete, in a way that is observable to an actor and reveals security-relevant information about the state of the product, such as whether a particular operation was successful or not.", "ExtendedDescription": "In security-relevant contexts, even small variations in timing can be exploited by attackers to indirectly infer certain details about the product's internal operations. For example, in some cryptographic algorithms, attackers can use timing differences to infer certain properties about a private key, making the key easier to guess. Timing discrepancies effectively form a timing side channel.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "203", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "385", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "327", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."}, {"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Access Control"], "Impact": ["Read Application Data", "Bypass Protection Mechanism"]}], "DemonstrativeExamples": [{"ID": "DX-173", "Entries": [{"IntroText": "Consider an example hardware module that checks a user-provided password to grant access to a user. The user-provided password is compared against a golden value in a byte-by-byte manner."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "always_comb @ (posedge clk)\n\n begin\n\n```\n\t assign check_pass[3:0] = 4'b0;\n\t for (i = 0; i < 4; i++) begin\n\t\t if (entered_pass[(i*8 - 1) : i] eq golden_pass([i*8 - 1) : i])\n\t\t\t assign check_pass[i] = 1;\n\t\t\t continue;\n\t\t else\n\t\t\t assign check_pass[i] = 0;\n\t\t\t break;\n\t\t end\n\t assign grant_access = (check_pass == 4'b1111) ? 1'b1: 1'b0;\n end\n```"}, {"BodyText": "Since the code breaks on an incorrect entry of password, an attacker can guess the correct password for that byte-check iteration with few repeat attempts."}, {"BodyText": "To fix this weakness, either the comparison of the entire string should be done all at once, or the attacker is not given an indication whether pass or fail happened by allowing the comparison to run through all bits before the grant_access signal is set."}, {"Nature": "Good", "ExampleCode": "always_comb @ (posedge clk)\n begin\n\n```\n\t assign check_pass[3:0] = 4'b0;\n\t for (i = 0; i < 4; i++) begin\n\t\t if (entered_pass[(i*8 - 1) : i] eq golden_pass([i*8 -1) : i])\n\t\t\t assign check_pass[i] = 1;\n\t\t\t continue;\n\t\t else\n\t\t\t assign check_pass[i] = 0;\n\t\t\t continue;\n\t\t end\n\t assign grant_access = (check_pass == 4'b1111) ? 1'b1: 1'b0;\n end\n```"}]}, {"ID": "DX-193", "Entries": [{"IntroText": "In this example, the attacker observes how long an authentication takes when the user types in the correct password."}, {"BodyText": "When the attacker tries their own values, they can first try strings of various length. When they find a string of the right length, the computation will take a bit longer, because the for loop will run at least once. Additionally, with this code, the attacker can possibly learn one character of the password at a time, because when they guess the first character right, the computation will take longer than a wrong guesses. Such an attack can break even the most sophisticated password with a few hundred guesses."}, {"Nature": "Bad", "Language": "Python", "ExampleCode": "```\n\tdef validate_password(actual_pw, typed_pw): \n\t\t\tif len(actual_pw) <> len(typed_pw): \n\t\t\t\treturn 0\n\t\t\tfor i in len(actual_pw): \n\t\t\t\tif actual_pw[i] <> typed_pw[i]: \n\t\t\t\t\treturn 0\n\t\t\treturn 1\n```"}, {"BodyText": "Note that in this example, the actual password must be handled in constant time as far as the attacker is concerned, even if the actual password is of an unusual length. This is one reason why it is good to use an algorithm that, among other things, stores a seeded cryptographic one-way hash of the password, then compare the hashes, which will always be of the same length."}]}], "ObservedExamples": [{"Reference": "CVE-2019-10071", "Description": "Java-oriented framework compares HMAC signatures using String.equals() instead of a constant-time algorithm, causing timing discrepancies", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-10071"}, {"Reference": "CVE-2019-10482", "Description": "Smartphone OS uses comparison functions that are not in constant time, allowing side channels", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-10482"}, {"Reference": "CVE-2014-0984", "Description": "Password-checking function in router terminates validation of a password entry when it encounters the first incorrect character, which allows remote attackers to obtain passwords via a brute-force attack that relies on timing differences in responses to incorrect password guesses, aka a timing side-channel attack.", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-0984"}, {"Reference": "CVE-2003-0078", "Description": "SSL implementation does not perform a MAC computation if an incorrect block cipher padding is used, which causes an information leak (timing discrepancy) that may make it easier to launch cryptographic attacks that rely on distinguishing between padding and MAC verification errors, possibly leading to extraction of the original plaintext, aka the \"Vaudenay timing attack.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0078"}, {"Reference": "CVE-2000-1117", "Description": "Virtual machine allows malicious web site operators to determine the existence of files on the client by measuring delays in the execution of the getSystemResource method.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1117"}, {"Reference": "CVE-2003-0637", "Description": "Product uses a shorter timeout for a non-existent user than a valid user, which makes it easier for remote attackers to guess usernames and conduct brute force password guessing.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0637"}, {"Reference": "CVE-2003-0190", "Description": "Product immediately sends an error message when a user does not exist, which allows remote attackers to determine valid usernames via a timing attack.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0190"}, {"Reference": "CVE-2004-1602", "Description": "FTP server responds in a different amount of time when a given username exists, which allows remote attackers to identify valid usernames by timing the server response.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1602"}, {"Reference": "CVE-2005-0918", "Description": "Browser allows remote attackers to determine the existence of arbitrary files by setting the src property to the target filename and using Javascript to determine if the web page immediately stops loading, which indicates whether the file exists or not.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0918"}], "FunctionalAreas": ["Cryptography", "Authentication"], "RelatedAttackPatterns": ["462", "541", "580"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "Often primary in cryptographic applications and algorithms."}], "Top25Examples": [{"Reference": "CVE-2021-42016", "Description": "A vulnerability has been identified in RUGGEDCOM i800, RUGGEDCOM i801, RUGGEDCOM i802, RUGGEDCOM i803, RUGGEDCOM M2100, RUGGEDCOM M2100F, RUGGEDCOM M2200, RUGGEDCOM M2200F, RUGGEDCOM M969, RUGGEDCOM M969F, RUGGEDCOM RMC30, RUGGEDCOM RMC8388 V4.X, RUGGEDCOM RMC8388 V5.X, RUGGEDCOM RP110, RUGGEDCOM RS1600, RUGGEDCOM RS1600F, RUGGEDCOM RS1600T, RUGGEDCOM RS400, RUGGEDCOM RS400F, RUGGEDCOM RS401, RUGGEDCOM RS416, RUGGEDCOM RS416F, RUGGEDCOM RS416P, RUGGEDCOM RS416PF, RUGGEDCOM RS416Pv2 V4.X, RUGGEDCOM RS416Pv2 V5.X, RUGGEDCOM RS416v2 V4.X, RUGGEDCOM RS416v2 V5.X, RUGGEDCOM RS8000, RUGGEDCOM RS8000A, RUGGEDCOM RS8000H, RUGGEDCOM RS8000T, RUGGEDCOM RS900, RUGGEDCOM RS900 (32M) V4.X, RUGGEDCOM RS900 (32M) V5.X, RUGGEDCOM RS900F, RUGGEDCOM RS900G, RUGGEDCOM RS900G (32M) V4.X, RUGGEDCOM RS900G (32M) V5.X, RUGGEDCOM RS900GF, RUGGEDCOM RS900GP, RUGGEDCOM RS900GPF, RUGGEDCOM RS900L, RUGGEDCOM RS900M-GETS-C01, RUGGEDCOM RS900M-GETS-XX, RUGGEDCOM RS900M-STND-C01, RUGGEDCOM RS900M-STND-XX, RUGGEDCOM RS900W, RUGGEDCOM RS910, RUGGEDCOM RS910L, RUGGEDCOM RS910W, RUGGEDCOM RS920L, RUGGEDCOM RS920W, RUGGEDCOM RS930L, RUGGEDCOM RS930W, RUGGEDCOM RS940G, RUGGEDCOM RS940GF, RUGGEDCOM RS969, RUGGEDCOM RSG2100, RUGGEDCOM RSG2100 (32M) V4.X, RUGGEDCOM RSG2100 (32M) V5.X, RUGGEDCOM RSG2100F, RUGGEDCOM RSG2100P, RUGGEDCOM RSG2100PF, RUGGEDCOM RSG2200, RUGGEDCOM RSG2200F, RUGGEDCOM RSG2288 V4.X, RUGGEDCOM RSG2288 V5.X, RUGGEDCOM RSG2300 V4.X, RUGGEDCOM RSG2300 V5.X, RUGGEDCOM RSG2300F, RUGGEDCOM RSG2300P V4.X, RUGGEDCOM RSG2300P V5.X, RUGGEDCOM RSG2300PF, RUGGEDCOM RSG2488 V4.X, RUGGEDCOM RSG2488 V5.X, RUGGEDCOM RSG2488F, RUGGEDCOM RSG907R, RUGGEDCOM RSG908C, RUGGEDCOM RSG909R, RUGGEDCOM RSG910C, RUGGEDCOM RSG920P V4.X, RUGGEDCOM RSG920P V5.X, RUGGEDCOM RSL910, RUGGEDCOM RST2228, RUGGEDCOM RST2228P, RUGGEDCOM RST916C, RUGGEDCOM RST916P. A timing attack, in a third-party component, could make the retrieval of the private key possible, used for encryption of sensitive data. If a threat actor were to exploit this, the data integrity and security could be compromised."}, {"Reference": "CVE-2022-4304", "Description": "A timing based side channel exists in the OpenSSL RSA Decryption implementation which could be sufficient to recover a plaintext across a network in a Bleichenbacher style attack. To achieve a successful decryption an attacker would have to be able to send a very large number of trial messages for decryption. The vulnerability affects all RSA padding modes: PKCS#1 v1.5, RSA-OEAP and RSASVE. For example, in a TLS connection, RSA is commonly used by a client to send an encrypted pre-master secret to the server. An attacker that had observed a genuine connection between a client and a server could use this flaw to send trial messages to the server and record the time taken to process them. After a sufficiently large number of messages the attacker could recover the pre-master secret used for the original connection and thus be able to decrypt the application data sent over that connection. "}, {"Reference": "CVE-2021-33880", "Description": "The aaugustin websockets library before 9.1 for Python has an Observable Timing Discrepancy on servers when HTTP Basic Authentication is enabled with basic_auth_protocol_factory(credentials=...). An attacker may be able to guess a password via a timing attack."}, {"Reference": "CVE-2021-4294", "Description": "A vulnerability was found in OpenShift OSIN. It has been classified as problematic. This affects the function ClientSecretMatches/CheckClientSecret. The manipulation of the argument secret leads to observable timing discrepancy. The name of the patch is 8612686d6dda34ae9ef6b5a974e4b7accb4fea29. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-216987."}, {"Reference": "CVE-2022-34174", "Description": "In Jenkins 2.355 and earlier, LTS 2.332.3 and earlier, an observable timing discrepancy on the login form allows distinguishing between login attempts with an invalid username, and login attempts with a valid username and wrong password, when using the Jenkins user database security realm."}, {"Reference": "CVE-2022-4823", "Description": "A vulnerability, which was classified as problematic, was found in InSTEDD Nuntium. Affected is an unknown function of the file app/controllers/geopoll_controller.rb. The manipulation of the argument signature leads to observable timing discrepancy. It is possible to launch the attack remotely. The name of the patch is 77236f7fd71a0e2eefeea07f9866b069d612cf0d. It is recommended to apply a patch to fix this issue. VDB-217002 is the identifier assigned to this vulnerability."}, {"Reference": "CVE-2021-26314", "Description": "Potential floating point value injection in all supported CPU products, in conjunction with software vulnerabilities relating to speculative execution with incorrect floating point results, may cause the use of incorrect data from FPVI and may result in data leakage."}, {"Reference": "CVE-2022-1146", "Description": "Inappropriate implementation in Resource Timing in Google Chrome prior to 100.0.4896.60 allowed a remote attacker to leak cross-origin data via a crafted HTML page."}, {"Reference": "CVE-2022-37146", "Description": "The PlexTrac platform prior to version 1.28.0 allows for username enumeration via HTTP response times on invalid login attempts for users configured to use the PlexTrac authentication provider. Login attempts for valid, unlocked users configured to use PlexTrac as their authentication provider take significantly longer than those for invalid users, allowing for valid users to be enumerated by an unauthenticated remote attacker. Note that the lockout policy implemented in Plextrac version 1.17.0 makes it impossible to distinguish between valid, locked user accounts and user accounts that do not exist, but does not prevent valid, unlocked users from being enumerated."}, {"Reference": "CVE-2021-37606", "Description": "Meow hash 0.5/calico does not sufficiently thwart key recovery by an attacker who can query whether there's a collision in the bottom bits of the hashes of two messages, as demonstrated by an attack against a long-running web service that allows the attacker to infer collisions by measuring timing differences."}, {"Reference": "CVE-2022-2891", "Description": "The WP 2FA WordPress plugin before 2.3.0 uses comparison operators that don't mitigate time-based attacks, which could be abused to leak information about the authentication codes being compared."}, {"Reference": "CVE-2022-3907", "Description": "The Clerk WordPress plugin before 4.0.0 is affected by time-based attacks in the validation function for all API requests due to the usage of comparison operators to verify API keys against the ones stored in the site options."}]}
{"ID": "209", "Name": "Generation of Error Message Containing Sensitive Information", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product generates an error message that includes sensitive information about its environment, users, or associated data.", "ExtendedDescription": "\n\nThe sensitive information may be valuable information on its own (such as a password), or it may be useful for launching other, more serious attacks. The error message may be created in different ways:\n\n\n  - self-generated: the source code explicitly constructs the error message and delivers it\n\n  - externally-generated: the external environment, such as a language interpreter, handles the error and constructs its own message, whose contents are not under direct control by the programmer\n\nAn attacker may use the contents of error messages to help launch another, more focused attack. For example, an attempt to exploit a path traversal weakness (CWE-22) might yield the full pathname of the installed application. In turn, this could be used to select the proper number of \"..\" sequences to navigate to the targeted file. An attack using SQL injection (CWE-89) might not initially succeed, but an error message could reveal the malformed query, which would expose query logic and possibly even passwords or other sensitive information used within the query.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "200", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "200", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "755", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}, {"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "PHP", "Prevalence": "Often"}, {"Type": "Language", "Name": "Java", "Prevalence": "Often"}, {"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}, {"Phase": "System Configuration"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "Often this will either reveal sensitive information which may be used for a later attack or private information stored in the server."}], "DetectionMethods": [{"Method": "Manual Analysis", "Description": "This weakness generally requires domain-specific interpretation using manual analysis. However, the number of potential error conditions may be too large to cover completely within limited time constraints.", "Effectiveness": "High"}, {"Method": "Automated Analysis", "Description": "Automated methods may be able to detect certain idioms automatically, such as exposed stack traces or pathnames, but violation of business rules or privacy requirements is not typically feasible.", "Effectiveness": "Moderate"}, {"DetectionMethodID": "DM-2", "Method": "Automated Dynamic Analysis", "Description": "\n\nThis weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.\n\n\nError conditions may be triggered with a stress-test by calling the software simultaneously from a large number of threads or processes, and look for evidence of any unexpected behavior.\n", "Effectiveness": "Moderate"}, {"DetectionMethodID": "DM-12", "Method": "Manual Dynamic Analysis", "Description": "Identify error conditions that are not likely to occur during normal usage and trigger them. For example, run the program under low memory conditions, run with insufficient privileges or permissions, interrupt a transaction before it is completed, or disable connectivity to basic network services such as DNS. Monitor the software for any unexpected behavior. If you trigger an unhandled exception or similar error that was discovered and handled by the application's environment, it may still indicate unexpected conditions that were not handled by the application itself."}, {"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)"}], "PotentialMitigations": [{"MitigationID": "MIT-39", "Phase": ["Implementation"], "Description": "\n\nEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.\n\n\nIf errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.\n\n\nAvoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n"}, {"Phase": ["Implementation"], "Description": "Handle exceptions internally and do not display errors containing potentially sensitive information to a user."}, {"MitigationID": "MIT-33", "Phase": ["Implementation"], "Strategy": "Attack Surface Reduction", "Description": "Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.", "Effectiveness": "Defense in Depth", "EffectivenessNotes": "This makes it easier to spot places in the code where data is being used that is unencrypted."}, {"MitigationID": "MIT-40", "Phase": ["Implementation", "Build and Compilation"], "Strategy": "Compilation or Build Hardening", "Description": "Debugging information should not make its way into a production release."}, {"MitigationID": "MIT-40", "Phase": ["Implementation", "Build and Compilation"], "Strategy": "Environment Hardening", "Description": "Debugging information should not make its way into a production release."}, {"Phase": ["System Configuration"], "Description": "Where available, configure the environment to use less verbose error messages. For example, in PHP, disable the display_errors setting during configuration, or at runtime using the error_reporting() function."}, {"Phase": ["System Configuration"], "Description": "Create default error pages or messages that do not leak any information."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following example, sensitive information might be printed depending on the exception that occurs."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\ttry {\n\t\t/.../\n\t}\n\tcatch (Exception e) {\n\t\tSystem.out.println(e);\n\t}\n```"}, {"BodyText": "If an exception related to SQL is handled by the catch, then the output might contain sensitive information such as SQL query structure or private information. If this output is redirected to a web user, this may represent a security problem."}]}, {"ID": "DX-118", "Entries": [{"IntroText": "This code tries to open a database connection, and prints any exceptions that occur."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\ttry {\n\t\topenDbConnection();\n\t}\n```\n//print exception message that includes exception message and configuration file location* \n\tcatch (Exception $e) {\n\t```\n\t\techo 'Caught exception: ', $e->getMessage(), '\\n';\n\t\techo 'Check credentials in config file at: ', $Mysql_config_location, '\\n';\n\t}\n```"}, {"BodyText": "If an exception occurs, the printed message exposes the location of the configuration file the script is using. An attacker can use this information to target the configuration file (perhaps exploiting a Path Traversal weakness). If the file can be read, the attacker could gain credentials for accessing the database. The attacker may also be able to replace the file with a malicious one, causing the application to use an arbitrary database."}]}, {"Entries": [{"IntroText": "The following code generates an error message that leaks the full pathname of the configuration file."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\t$ConfigDir = \"/home/myprog/config\";\n\t$uname = GetUserInput(\"username\");\n```\n# avoid CWE-22, CWE-78, others.* \n\tExitError(\"Bad hacker!\") if ($uname !~ /^\\w+$/);\n\t$file = \"$ConfigDir/$uname.txt\";\n\tif (! (-e $file)) {\n\t```\n\t\tExitError(\"Error: $file does not exist\");\n\t}\n\t...\n```"}, {"BodyText": "If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that does not produce a $file that exists, an attacker could get this pathname. It could then be used to exploit path traversal or symbolic link following problems that may exist elsewhere in the application."}]}, {"ID": "DX-119", "Entries": [{"IntroText": "In the example below, the method getUserBankAccount retrieves a bank account object from a database using the supplied username and account number to query the database. If an SQLException is raised when querying the database, an error message is created and output to a log file."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic BankAccount getUserBankAccount(String username, String accountNumber) {\n\t\t\tBankAccount userAccount = null;\n\t\t\tString query = null;\n\t\t\ttry {\n\t\t\t\tif (isAuthorizedUser(username)) {\n\t\t\t\t\tquery = \"SELECT * FROM accounts WHERE owner = \"\n\t\t\t\t\t+ username + \" AND accountID = \" + accountNumber;\n\t\t\t\t\tDatabaseManager dbManager = new DatabaseManager();\n\t\t\t\t\tConnection conn = dbManager.getConnection();\n\t\t\t\t\tStatement stmt = conn.createStatement();\n\t\t\t\t\tResultSet queryResult = stmt.executeQuery(query);\n\t\t\t\t\tuserAccount = (BankAccount)queryResult.getObject(accountNumber);\n\t\t\t\t}\n\t\t\t} catch (SQLException ex) {\n\t\t\t\tString logMessage = \"Unable to retrieve account information from database,\\nquery: \" + query;\n\t\t\t\tLogger.getLogger(BankManager.class.getName()).log(Level.SEVERE, logMessage, ex);\n\t\t\t}\n\t\t\treturn userAccount;\n\t}\n```"}, {"BodyText": "The error message that is created includes information about the database query that may contain sensitive information about the database or query logic. In this case, the error message will expose the table name and column names used in the database. This data could be used to simplify other attacks, such as SQL injection (CWE-89) to directly access the database."}]}], "ObservedExamples": [{"Reference": "CVE-2008-2049", "Description": "POP3 server reveals a password in an error message after multiple APOP commands are sent. Might be resultant from another weakness.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2049"}, {"Reference": "CVE-2007-5172", "Description": "Program reveals password in error message if attacker can trigger certain database errors.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-5172"}, {"Reference": "CVE-2008-4638", "Description": "Composite: application running with high privileges (CWE-250) allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file (CWE-209).", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4638"}, {"Reference": "CVE-2008-1579", "Description": "Existence of user names can be determined by requesting a nonexistent blog and reading the error message.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1579"}, {"Reference": "CVE-2007-1409", "Description": "Direct request to library file in web application triggers pathname leak in error message.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1409"}, {"Reference": "CVE-2008-3060", "Description": "Malformed input to login page causes leak of full path when IMAP call fails.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3060"}, {"Reference": "CVE-2005-0603", "Description": "Malformed regexp syntax leads to information exposure in error message.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0603"}, {"Reference": "CVE-2017-9615", "Description": "verbose logging stores admin credentials in a world-readablelog file", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-9615"}, {"Reference": "CVE-2018-1999036", "Description": "SSH password for private key stored in build log", "Link": "https://www.cve.org/CVERecord?id=CVE-2018-1999036"}], "RelatedAttackPatterns": ["215", "463", "54", "7"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-39023", "Description": "IBM Guardium Data Encryption (GDE) 4.0.0 and 5.0.0 could allow a remote attacker to obtain sensitive information when a detailed technical error message is returned in the browser. This information could be used in further attacks against the system. IBM X-Force ID: 213860."}, {"Reference": "CVE-2022-31047", "Description": "TYPO3 is an open source web content management system. Prior to versions 7.6.57 ELTS, 8.7.47 ELTS, 9.5.34 ELTS, 10.4.29, and 11.5.11, system internal credentials or keys (e.g. database credentials) can be logged as plaintext in exception handlers, when logging the complete exception stack trace. TYPO3 versions 7.6.57 ELTS, 8.7.47 ELTS, 9.5.34 ELTS, 10.4.29, 11.5.11 contain a fix for the problem."}, {"Reference": "CVE-2022-2062", "Description": "Generation of Error Message Containing Sensitive Information in GitHub repository nocodb/nocodb prior to 0.91.7+."}, {"Reference": "CVE-2022-3175", "Description": "Missing Custom Error Page in GitHub repository ikus060/rdiffweb prior to 2.4.2."}, {"Reference": "CVE-2021-38924", "Description": "IBM Maximo Asset Management 7.6.1.1 and 7.6.1.2 could allow a remote attacker to obtain sensitive information when a detailed technical error message is returned in the browser. This information could be used in further attacks against the system. IBM X-Force ID: 210163."}, {"Reference": "CVE-2022-39315", "Description": "Kirby is a Content Management System. Prior to versions 3.5.8.2, 3.6.6.2, 3.7.5.1, and 3.8.1, a user enumeration vulnerability affects all Kirby sites with user accounts unless Kirby's API and Panel are disabled in the config. It can only be exploited for targeted attacks because the attack does not scale to brute force. The problem has been patched in Kirby 3.5.8.2, Kirby 3.6.6.2, Kirby 3.7.5.1, and Kirby 3.8.1. In all of the mentioned releases, the maintainers have rewritten the affected code so that the delay is also inserted after the brute force limit is reached."}, {"Reference": "CVE-2022-20525", "Description": "In enforceVisualVoicemailPackage of PhoneInterfaceManager.java, there is a possible leak of visual voicemail package name due to a permissions bypass. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-229742768"}, {"Reference": "CVE-2022-24906", "Description": "Nextcloud Deck is a Kanban-style project & personal management tool for Nextcloud, similar to Trello. The full path of the application is exposed to unauthorized users. It is recommended that the Nextcloud Deck app is upgraded to 1.2.11, 1.4.6, or 1.5.4. There is no workaround available."}, {"Reference": "CVE-2022-39307", "Description": "Grafana is an open-source platform for monitoring and observability. When using the forget password on the login page, a POST request is made to the `/api/user/password/sent-reset-email` URL. When the username or email does not exist, a JSON response contains a \u201cuser not found\u201d message. This leaks information to unauthenticated users and introduces a security risk. This issue has been patched in 9.2.4 and backported to 8.5.15. There are no known workarounds."}]}
{"ID": "210", "Name": "Self-generated Error Message Containing Sensitive Information", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product identifies an error condition and creates its own diagnostic or error messages that contain sensitive information.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "209", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"]}], "PotentialMitigations": [{"MitigationID": "MIT-40", "Phase": ["Implementation", "Build and Compilation"], "Strategy": "Compilation or Build Hardening", "Description": "Debugging information should not make its way into a production release."}, {"MitigationID": "MIT-40", "Phase": ["Implementation", "Build and Compilation"], "Strategy": "Environment Hardening", "Description": "Debugging information should not make its way into a production release."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code uses custom configuration files for each user in the application. It checks to see if the file exists on the system before attempting to open and use the file. If the configuration file does not exist, then an error is generated, and the application exits."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\t$uname = GetUserInput(\"username\");\n```\n# avoid CWE-22, CWE-78, others.* \n\tif ($uname !~ /^\\w+$/)\n\t{\n\t```\n\t\tExitError(\"Bad hacker!\") ;\n\t}\n\t$filename = \"/home/myprog/config/\" . $uname . \".txt\";\n\tif (!(-e $filename))\n\t{\n\t\tExitError(\"Error: $filename does not exist\");\n\t}\n```"}, {"BodyText": "If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that is not associated with a configuration file, an attacker could get this pathname from the error message. It could then be used to exploit path traversal, symbolic link following, or other problems that may exist elsewhere in the application."}]}], "ObservedExamples": [{"Reference": "CVE-2005-1745", "Description": "Infoleak of sensitive information in error message (physical access required).", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1745"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "211", "Name": "Externally-Generated Error Message Containing Sensitive Information", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product performs an operation that triggers an external diagnostic or error message that is not directly generated or controlled by the product, such as an error generated by the programming language interpreter that a software application uses. The error can contain sensitive system information.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "209", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "PHP", "Prevalence": "Often"}, {"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "PHP applications are often targeted for having this issue when the PHP interpreter generates the error outside of the application's control. However, other languages/environments exhibit the same issue."}, {"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"]}], "PotentialMitigations": [{"Phase": ["System Configuration"], "Description": "Configure the application's environment in a way that prevents errors from being generated. For example, in PHP, disable display_errors."}, {"MitigationID": "MIT-40", "Phase": ["Implementation", "Build and Compilation"], "Strategy": "Compilation or Build Hardening", "Description": "Debugging information should not make its way into a production release."}, {"MitigationID": "MIT-40", "Phase": ["Implementation", "Build and Compilation"], "Strategy": "Environment Hardening", "Description": "Debugging information should not make its way into a production release."}, {"Phase": ["Implementation"], "Description": "Handle exceptions internally and do not display errors containing potentially sensitive information to a user. Create default error pages if necessary."}, {"Phase": ["Implementation"], "Description": "The best way to prevent this weakness during implementation is to avoid any bugs that could trigger the external error message. This typically happens when the program encounters fatal errors, such as a divide-by-zero. You will not always be able to control the use of error pages, and you might not be using a language that handles exceptions."}], "DemonstrativeExamples": [{"ID": "DX-190", "Entries": [{"IntroText": "The following servlet code does not catch runtime exceptions, meaning that if such an exception were to occur, the container may display potentially dangerous information (such as a full stack trace)."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\tString username = request.getParameter(\"username\");\n```\n// May cause unchecked NullPointerException.* \n\t\t\tif (username.length() < 10) {\n\t\t\t```\n\t\t\t\t...\n\t\t\t}\n\t}\n```"}]}, {"ID": "DX-191", "Entries": [{"IntroText": "In the following Java example the class InputFileRead enables an input file to be read using a FileReader object. In the constructor of this class a default input file path is set to some directory on the local file system and the method setInputFile must be called to set the name of the input file to be read in the default directory. The method readInputFile will create the FileReader object and will read the contents of the file. If the method setInputFile is not called prior to calling the method readInputFile then the File object will remain null when initializing the FileReader object. A Java RuntimeException will be raised, and an error message will be output to the user."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class InputFileRead {\n\t\t\tprivate File readFile = null;\n\t\t\tprivate FileReader reader = null;\n\t\t\tprivate String inputFilePath = null;\n\t\t\tprivate final String DEFAULT_FILE_PATH = \"c:\\\\somedirectory\\\\\";\n\t\t\tpublic InputFileRead() {\n\t\t\t\tinputFilePath = DEFAULT_FILE_PATH;\n\t\t\t}\n\t\t\tpublic void setInputFile(String inputFile) {\n```\n/* Assume appropriate validation / encoding is used and privileges / permissions are preserved */* \n\t\t\t\t\t}\n\t\t\t\n\t\t\tpublic void readInputFile() {\n\t\t\t```\n\t\t\t\t\ttry {\n\t\t\t\t\t\treader = new FileReader(readFile);\n\t\t\t\t\t\t...\n\t\t\t\t\t} catch (RuntimeException rex) {\n\t\t\t\t\t\tSystem.err.println(\"Error: Cannot open input file in the directory \" + inputFilePath);\n\t\t\t\t\t\tSystem.err.println(\"Input file has not been set, call setInputFile method before calling readInputFile\");\n\t\t\t\t\t} catch (FileNotFoundException ex) {...}\n\t\t\t}\n\t}\n```"}, {"BodyText": "However, the error message output to the user contains information regarding the default directory on the local file system. This information can be exploited and may lead to unauthorized access or use of the system. Any Java RuntimeExceptions that are handled should not expose sensitive information to the user."}]}], "ObservedExamples": [{"Reference": "CVE-2004-1581", "Description": "chain: product does not protect against direct request of an include file, leading to resultant path disclosure when the include file does not successfully execute.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1581"}, {"Reference": "CVE-2004-1579", "Description": "Single \"'\" inserted into SQL query leads to invalid SQL query execution, triggering full path disclosure. Possibly resultant from more general SQL injection issue.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1579"}, {"Reference": "CVE-2005-0459", "Description": "chain: product does not protect against direct request of a library file, leading to resultant path disclosure when the file does not successfully execute.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0459"}, {"Reference": "CVE-2005-0443", "Description": "invalid parameter triggers a failure to find an include file, leading to infoleak in error message.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0443"}, {"Reference": "CVE-2005-0433", "Description": "Various invalid requests lead to information leak in verbose error messages describing the failure to instantiate a class, open a configuration file, or execute an undefined function.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0433"}, {"Reference": "CVE-2004-1101", "Description": "Improper handling of filename request with trailing \"/\" causes multiple consequences, including information leak in Visual Basic error message.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1101"}], "FunctionalAreas": ["Error Handling"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This is inherently a resultant vulnerability from a weakness within the product or an interaction error."}]}
{"ID": "212", "Name": "Improper Removal of Sensitive Information Before Storage or Transfer", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product stores, transfers, or shares a resource that contains sensitive information, but it does not properly remove that information before the product makes the resource available to unauthorized actors.", "ExtendedDescription": "\n\nResources that may contain sensitive data include documents, packets, messages, databases, etc. While this data may be useful to an individual user or small set of users who share the resource, it may need to be removed before the resource can be shared outside of the trusted group. The process of removal is sometimes called cleansing or scrubbing.\n\n\nFor example, a product for editing documents might not remove sensitive data such as reviewer comments or the local pathname where the document is stored. Or, a proxy might not remove an internal IP address from headers before making an outgoing request to an Internet site.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "669", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "669", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "201", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}, {"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Files or Directories", "Read Application Data"], "Note": "Sensitive data may be exposed to an unauthorized actor in another control sphere. This may have a wide range of secondary consequences which will depend on what data is exposed. One possibility is the exposure of system data allowing an attacker to craft a specific, more effective attack."}], "PotentialMitigations": [{"Phase": ["Requirements"], "Description": "Clearly specify which information should be regarded as private or sensitive, and require that the product offers functionality that allows the user to cleanse the sensitive information from the resource before it is published or exported to other parties."}, {"MitigationID": "MIT-46", "Phase": ["Architecture and Design"], "Strategy": "Separation of Privilege", "Description": "\n\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\n\n\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n"}, {"MitigationID": "MIT-33", "Phase": ["Implementation"], "Strategy": "Attack Surface Reduction", "Description": "Use naming conventions and strong types to make it easier to spot when sensitive data is being used. When creating structures, objects, or other complex entities, separate the sensitive and non-sensitive data as much as possible.", "Effectiveness": "Defense in Depth", "EffectivenessNotes": "This makes it easier to spot places in the code where data is being used that is unencrypted."}, {"Phase": ["Implementation"], "Description": "Avoid errors related to improper resource shutdown or release (CWE-404), which may leave the sensitive data within the resource if it is in an incomplete state."}], "DemonstrativeExamples": [{"ID": "DX-220", "Entries": [{"IntroText": "This code either generates a public HTML user information page or a JSON response containing the same user information."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n```\n// API flag, output JSON if set* \n\t$json = $_GET['json']\n\t$username = $_GET['user']\n\tif(!$json)\n\t{\n\t```\n\t\t\t$record = getUserRecord($username);\n\t\t\tforeach($record as $fieldName => $fieldValue)\n\t\t\t{\n\t\t\t\t\tif($fieldName == \"email_address\") {\n```\n// skip displaying user emails* \n\t\t\t\t\t\t\tcontinue;}\n\t\t\t\t\telse{\n\t\t\t\t\t```\n\t\t\t\t\t\twriteToHtmlPage($fieldName,$fieldValue);\n\t\t\t\t\t}\n\t\t\t}\n\t}\n\telse\n\t{\n\t\t$record = getUserRecord($username);\n\t\techo json_encode($record);\n\t}\n```"}, {"BodyText": "The programmer is careful to not display the user's e-mail address when displaying the public HTML page. However, the e-mail address is not removed from the JSON response, exposing the user's e-mail address."}]}], "ObservedExamples": [{"Reference": "CVE-2019-3733", "Description": "Cryptography library does not clear heap memory before release", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-3733"}, {"Reference": "CVE-2005-0406", "Description": "Some image editors modify a JPEG image, but the original EXIF thumbnail image is left intact within the JPEG. (Also an interaction error).", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0406"}, {"Reference": "CVE-2002-0704", "Description": "NAT feature in firewall leaks internal IP addresses in ICMP error messages.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0704"}], "RelatedAttackPatterns": ["168"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This entry is intended to be different from resultant information leaks, including those that occur from improper buffer initialization and reuse, improper encryption, interaction errors, and multiple interpretation errors. This entry could be regarded as a privacy leak, depending on the type of information that is leaked."}, {"Type": "Relationship", "Note": "There is a close association between CWE-226 and CWE-212. The difference is partially that of perspective. CWE-226 is geared towards the final stage of the resource lifecycle, in which the resource is deleted, eliminated, expired, or otherwise released for reuse. Technically, this involves a transfer to a different control sphere, in which the original contents of the resource are no longer relevant. CWE-212, however, is intended for sensitive data in resources that are intentionally shared with others, so they are still active. This distinction is useful from the perspective of the CWE research view (CWE-1000)."}, {"Type": "Terminology", "Note": "The terms \"cleansing\" and \"scrubbing\" have multiple uses within computing. In information security, these are used for the removal of sensitive data, but they are also used for the modification of incoming/outgoing data so that it conforms to specifications."}], "Top25Examples": [{"Reference": "CVE-2022-24719", "Description": "Fluture-Node is a FP-style HTTP and streaming utils for Node based on Fluture. Using `followRedirects` or `followRedirectsWith` with any of the redirection strategies built into fluture-node 4.0.0 or 4.0.1, paired with a request that includes confidential headers such as Authorization or Cookie, exposes you to a vulnerability where, if the destination server were to redirect the request to a server on a third-party domain, or the same domain over unencrypted HTTP, the headers would be included in the follow-up request and be exposed to the third party, or potential http traffic sniffing. The redirection strategies made available in version 4.0.2 automatically redact confidential headers when a redirect is followed across to another origin. A workaround has been identified by using a custom redirection strategy via the `followRedirectsWith` function. The custom strategy can be based on the new strategies available in fluture-node@4.0.2."}, {"Reference": "CVE-2022-24798", "Description": "Internet Routing Registry daemon version 4 is an IRR database server, processing IRR objects in the RPSL format. IRRd did not always filter password hashes in query responses relating to `mntner` objects and database exports. This may have allowed adversaries to retrieve some of these hashes, perform a brute-force search for the clear-text passphrase, and use these to make unauthorised changes to affected IRR objects. This issue only affected instances that process password hashes, which means it is limited to IRRd instances that serve authoritative databases. IRRd instances operating solely as mirrors of other IRR databases are not affected. This has been fixed in IRRd 4.2.3 and the main branch. Versions in the 4.1.x series never were affected. Users of the 4.2.x series are strongly recommended to upgrade. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-2818", "Description": "Improper Removal of Sensitive Information Before Storage or Transfer in GitHub repository cockpit-hq/cockpit prior to 2.2.2. "}, {"Reference": "CVE-2022-25187", "Description": "Jenkins Support Core Plugin 2.79 and earlier does not redact some sensitive information in the support bundle."}, {"Reference": "CVE-2022-0355", "Description": "Improper Removal of Sensitive Information Before Storage or Transfer in NPM simple-get prior to 4.0.1. "}, {"Reference": "CVE-2022-0536", "Description": "Improper Removal of Sensitive Information Before Storage or Transfer in NPM follow-redirects prior to 1.14.8. "}, {"Reference": "CVE-2022-1650", "Description": "Improper Removal of Sensitive Information Before Storage or Transfer in GitHub repository eventsource/eventsource prior to v2.0.2. "}, {"Reference": "CVE-2022-1893", "Description": "Improper Removal of Sensitive Information Before Storage or Transfer in GitHub repository polonel/trudesk prior to 1.2.3."}, {"Reference": "CVE-2022-31042", "Description": "Guzzle is an open source PHP HTTP client. In affected versions the `Cookie` headers on requests are sensitive information. On making a request using the `https` scheme to a server which responds with a redirect to a URI with the `http` scheme, or on making a request to a server which responds with a redirect to a a URI to a different host, we should not forward the `Cookie` header on. Prior to this fix, only cookies that were managed by our cookie middleware would be safely removed, and any `Cookie` header manually added to the initial request would not be stripped. We now always strip it, and allow the cookie middleware to re-add any cookies that it deems should be there. Affected Guzzle 7 users should upgrade to Guzzle 7.4.4 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.7 or 7.4.4. Users unable to upgrade may consider an alternative approach to use your own redirect middleware, rather than ours. If you do not require or expect redirects to be followed, one should simply disable redirects all together."}, {"Reference": "CVE-2022-31043", "Description": "Guzzle is an open source PHP HTTP client. In affected versions `Authorization` headers on requests are sensitive information. On making a request using the `https` scheme to a server which responds with a redirect to a URI with the `http` scheme, we should not forward the `Authorization` header on. This is much the same as to how we don't forward on the header if the host changes. Prior to this fix, `https` to `http` downgrades did not result in the `Authorization` header being removed, only changes to the host. Affected Guzzle 7 users should upgrade to Guzzle 7.4.4 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.7 or 7.4.4. Users unable to upgrade may consider an alternative approach which would be to use their own redirect middleware. Alternately users may simply disable redirects all together if redirects are not expected or required."}, {"Reference": "CVE-2022-31090", "Description": "Guzzle, an extensible PHP HTTP client. `Authorization` headers on requests are sensitive information. In affected versions when using our Curl handler, it is possible to use the `CURLOPT_HTTPAUTH` option to specify an `Authorization` header. On making a request which responds with a redirect to a URI with a different origin (change in host, scheme or port), if we choose to follow it, we should remove the `CURLOPT_HTTPAUTH` option before continuing, stopping curl from appending the `Authorization` header to the new request. Affected Guzzle 7 users should upgrade to Guzzle 7.4.5 as soon as possible. Affected users using any earlier series of Guzzle should upgrade to Guzzle 6.5.8 or 7.4.5. Note that a partial fix was implemented in Guzzle 7.4.2, where a change in host would trigger removal of the curl-added Authorization header, however this earlier fix did not cover change in scheme or change in port. If you do not require or expect redirects to be followed, one should simply disable redirects all together. Alternatively, one can specify to use the Guzzle steam handler backend, rather than curl."}, {"Reference": "CVE-2022-31112", "Description": "Parse Server is an open source backend that can be deployed to any infrastructure that can run Node.js. In affected versions parse Server LiveQuery does not remove protected fields in classes, passing them to the client. The LiveQueryController now removes protected fields from the client response. Users are advised to upgrade. Users unable t upgrade should use `Parse.Cloud.afterLiveQueryEvent` to manually remove protected fields."}, {"Reference": "CVE-2022-33740", "Description": "Linux disk/nic frontends data leaks T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] Linux Block and Network PV device frontends don't zero memory regions before sharing them with the backend (CVE-2022-26365, CVE-2022-33740). Additionally the granularity of the grant table doesn't allow sharing less than a 4K page, leading to unrelated data residing in the same 4K page as data shared with a backend being accessible by such backend (CVE-2022-33741, CVE-2022-33742)."}, {"Reference": "CVE-2022-3460", "Description": "In affected versions of Octopus Deploy it is possible for certain types of sensitive variables to inadvertently become unmasked when viewed in variable preview."}, {"Reference": "CVE-2022-4734", "Description": "Improper Removal of Sensitive Information Before Storage or Transfer in GitHub repository usememos/memos prior to 0.9.1. "}]}
{"ID": "213", "Name": "Exposure of Sensitive Information Due to Incompatible Policies", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product's intended functionality exposes information to certain actors in accordance with the developer's security policy, but this information is regarded as sensitive according to the intended security policies of other stakeholders such as the product's administrator, users, or others whose information is being processed.", "ExtendedDescription": "\n\nWhen handling information, the developer must consider whether the information is regarded as sensitive by different stakeholders, such as users or administrators. Each stakeholder effectively has its own intended security policy that the product is expected to uphold. When a developer does not treat that information as sensitive, this can introduce a vulnerability that violates the expectations of the product's users.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "200", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Policy", "Note": "This can occur when the product's policy does not account for all relevant stakeholders, or when the policies of other stakeholders are not interpreted properly."}, {"Phase": "Requirements", "Note": "This can occur when requirements do not explicitly account for all relevant stakeholders."}, {"Phase": "Architecture and Design", "Note": "Communications or data exchange frameworks may be chosen that exchange or provide access to more information than strictly needed."}, {"Phase": "Implementation", "Note": "This can occur when the developer does not properly track the flow of sensitive information and how it is exposed, e.g., via an API."}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"]}], "DemonstrativeExamples": [{"ID": "DX-130", "Entries": [{"IntroText": "This code displays some information on a web page."}, {"Nature": "Bad", "Language": "JSP", "ExampleCode": "```\n\tSocial Security Number: <%= ssn %></br>Credit Card Number: <%= ccn %>\n```"}, {"BodyText": "The code displays a user's credit card and social security numbers, even though they aren't absolutely necessary."}]}], "ObservedExamples": [{"Reference": "CVE-2002-1725", "Description": "Script calls phpinfo()", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1725"}, {"Reference": "CVE-2004-0033", "Description": "Script calls phpinfo()", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0033"}, {"Reference": "CVE-2003-1181", "Description": "Script calls phpinfo()", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1181"}, {"Reference": "CVE-2004-1422", "Description": "Script calls phpinfo()", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1422"}, {"Reference": "CVE-2004-1590", "Description": "Script calls phpinfo()", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1590"}, {"Reference": "CVE-2003-1038", "Description": "Product lists DLLs and full pathnames.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1038"}, {"Reference": "CVE-2005-1205", "Description": "Telnet protocol allows servers to obtain sensitive environment information from clients.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1205"}, {"Reference": "CVE-2005-0488", "Description": "Telnet protocol allows servers to obtain sensitive environment information from clients.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0488"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry is being considered for deprecation. It overlaps many other entries related to information exposures. It might not be essential to preserve this entry, since other key stakeholder policies are covered elsewhere, e.g. personal privacy leaks (CWE-359) and system-level exposures that are important to system administrators (CWE-497)."}, {"Type": "Theoretical", "Note": "In vulnerability theory terms, this covers cases in which the developer's Intended Policy allows the information to be made available, but the information might be in violation of a Universal Policy in which the product's administrator should have control over which information is considered sensitive and therefore should not be exposed."}], "Top25Examples": [{"Reference": "CVE-2022-28794", "Description": "Sensitive information exposure in low-battery dumpstate log prior to SMR Jun-2022 Release 1 allows local attackers to get SIM card information."}, {"Reference": "CVE-2022-30714", "Description": "Information exposure vulnerability in SemIWCMonitor prior to SMR Jun-2022 Release 1 allows local attackers to get MAC address information."}, {"Reference": "CVE-2022-30728", "Description": "Information exposure vulnerability in ScanPool prior to SMR Jun-2022 Release 1 allows local attackers to get MAC address information."}, {"Reference": "CVE-2022-33692", "Description": "Exposure of Sensitive Information in Messaging application prior to SMR Jul-2022 Release 1 allows local attacker to access imsi and iccid via log."}, {"Reference": "CVE-2022-33694", "Description": "Exposure of Sensitive Information in CSC application prior to SMR Jul-2022 Release 1 allows local attacker to access wifi information via unprotected intent broadcasting."}, {"Reference": "CVE-2022-33696", "Description": "Exposure of Sensitive Information in Telephony service prior to SMR Jul-2022 Release 1 allows local attacker to access imsi and iccid via log."}, {"Reference": "CVE-2022-39848", "Description": "Exposure of sensitive information in AT_Distributor prior to SMR Oct-2022 Release 1 allows local attacker to access SerialNo via log."}]}
{"ID": "214", "Name": "Invocation of Process Using Visible Sensitive Information", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "A process is invoked with sensitive command-line arguments, environment variables, or other elements that can be seen by other processes on the operating system.", "ExtendedDescription": "Many operating systems allow a user to list information about processes that are owned by other users. Other users could see information such as command line arguments or environment variable settings. When this data contains sensitive information such as credentials, it might allow other users to launch an attack against the product or related resources.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "497", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"]}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the example below, the password for a keystore file is read from a system property."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tString keystorePass = System.getProperty(\"javax.net.ssl.keyStorePassword\");\n\tif (keystorePass == null) {\n\t\tSystem.err.println(\"ERROR: Keystore password not specified.\");\n\t\tSystem.exit(-1);\n\t}\n\t...\n```"}, {"BodyText": "If the property is defined on the command line when the program is invoked (using the -D... syntax), the password may be displayed in the OS process list."}]}], "ObservedExamples": [{"Reference": "CVE-2005-1387", "Description": "password passed on command line", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1387"}, {"Reference": "CVE-2005-2291", "Description": "password passed on command line", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2291"}, {"Reference": "CVE-2001-1565", "Description": "username/password on command line allows local users to view via \"ps\" or other process listing programs", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1565"}, {"Reference": "CVE-2004-1948", "Description": "Username/password on command line allows local users to view via \"ps\" or other process listing programs.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1948"}, {"Reference": "CVE-1999-1270", "Description": "PGP passphrase provided as command line argument.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1270"}, {"Reference": "CVE-2004-1058", "Description": "Kernel race condition allows reading of environment variables of a process that is still spawning.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1058"}, {"Reference": "CVE-2021-32638", "Description": "Code analysis product passes access tokens as a command-line parameter or through an environment variable, making them visible to other processes via the ps command.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-32638"}], "AffectedResources": ["System Process"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "Under-studied, especially environment variables."}], "Top25Examples": [{"Reference": "CVE-2022-31238", "Description": "Dell PowerScale OneFS, versions 9.0.0 up to and including 9.1.0.19, 9.2.1.12, 9.3.0.6, and 9.4.0.2, contain a process invoked with sensitive information vulnerability. A CLI user may potentially exploit this vulnerability, leading to information disclosure."}, {"Reference": "CVE-2022-30586", "Description": "Gradle Enterprise through 2022.2.2 has Incorrect Access Control that leads to code execution."}, {"Reference": "CVE-2022-0235", "Description": "node-fetch is vulnerable to Exposure of Sensitive Information to an Unauthorized Actor"}, {"Reference": "CVE-2022-0851", "Description": "There is a flaw in convert2rhel. When the --activationkey option is used with convert2rhel, the activation key is subsequently passed to subscription-manager via the command line, which could allow unauthorized users locally on the machine to view the activation key via the process command line via e.g. htop or ps. The specific impact varies upon the subscription, but generally this would allow an attacker to register systems purchased by the victim until discovered; a form of fraud. This could occur regardless of how the activation key is supplied to convert2rhel because it involves how convert2rhel provides it to subscription-manager."}, {"Reference": "CVE-2022-1662", "Description": "In convert2rhel, there's an ansible playbook named ansible/run-convert2rhel.yml which passes the Red Hat Subscription Manager user password via the CLI to convert2rhel. This could allow unauthorized local users to view the password via the process list while convert2rhel is running. However, this ansible playbook is only an example in the upstream repository and it is not shipped in officially supported versions of convert2rhel."}]}
{"ID": "215", "Name": "Insertion of Sensitive Information Into Debugging Code", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product inserts sensitive information into debugging code, which could expose this information if the debugging code is not disabled in production.", "ExtendedDescription": "When debugging, it may be necessary to report detailed information to the programmer. However, if the debugging code is not disabled when the product is operating in a production environment, then this sensitive information may be exposed to attackers.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "200", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Do not leave debug statements that could be executed in the source code. Ensure that all debug information is eradicated before releasing the software."}, {"MitigationID": "MIT-46", "Phase": ["Architecture and Design"], "Strategy": "Separation of Privilege", "Description": "\n\nCompartmentalize the system to have \"safe\" areas where trust boundaries can be unambiguously drawn. Do not allow sensitive data to go outside of the trust boundary and always be careful when interfacing with a compartment outside of the safe area.\n\n\nEnsure that appropriate compartmentalization is built into the system design, and the compartmentalization allows for and reinforces privilege separation functionality. Architects and designers should rely on the principle of least privilege to decide the appropriate time to use privileges and the time to drop privileges.\n"}], "DemonstrativeExamples": [{"ID": "DX-131", "Entries": [{"IntroText": "The following program changes its behavior based on a debug flag."}, {"Nature": "Bad", "Language": "JSP", "ExampleCode": "```\n\t<% if (Boolean.getBoolean(\"debugEnabled\")) {\n\t\t\t%>\n\t\t\tUser account number: <%= acctNo %>\n\t\t\t<%\n\t\t\t} %>\n```"}, {"BodyText": "The code writes sensitive debug information to the client browser if the \"debugEnabled\" flag is set to true ."}]}], "ObservedExamples": [{"Reference": "CVE-2004-2268", "Description": "Password exposed in debug information.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2268"}, {"Reference": "CVE-2002-0918", "Description": "CGI script includes sensitive information in debug messages when an error is triggered.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0918"}, {"Reference": "CVE-2003-1078", "Description": "FTP client with debug option enabled shows password to the screen.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1078"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This overlaps other categories."}], "Top25Examples": [{"Reference": "CVE-2022-0721", "Description": "Insertion of Sensitive Information Into Debugging Code in GitHub repository microweber/microweber prior to 1.3."}, {"Reference": "CVE-2022-27912", "Description": "An issue was discovered in Joomla! 4.0.0 through 4.2.3. Sites with publicly enabled debug mode exposed data of previous requests."}]}
{"ID": "216", "Name": "DEPRECATED: Containment Errors (Container Errors)", "Abstraction": "Class", "Structure": "Simple", "Status": "Deprecated", "Description": "This entry has been deprecated, as it was not effective as a weakness and was structured more like a category. In addition, the name is inappropriate, since the \"container\" term is widely understood by developers in different ways than originally intended by PLOVER, the original source for this entry.", "MappingNotes": {"Usage": "Prohibited", "Rationale": "This CWE has been deprecated.", "Comments": "See description and name for possible suggestions of other CWEs to consider.", "Reasons": ["Deprecated"]}}
{"ID": "217", "Name": "DEPRECATED: Failure to Protect Stored Data from Modification", "Abstraction": "Base", "Structure": "Simple", "Status": "Deprecated", "Description": "This entry has been deprecated because it incorporated and confused multiple weaknesses. The issues formerly covered in this entry can be found at CWE-766 and CWE-767.", "MappingNotes": {"Usage": "Prohibited", "Rationale": "This CWE has been deprecated.", "Comments": "See description and name for possible suggestions of other CWEs to consider.", "Reasons": ["Deprecated"]}}
{"ID": "218", "Name": "DEPRECATED: Failure to provide confidentiality for stored data", "Abstraction": "Base", "Structure": "Simple", "Status": "Deprecated", "Description": "This weakness has been deprecated because it was a duplicate of CWE-493. All content has been transferred to CWE-493.", "MappingNotes": {"Usage": "Prohibited", "Rationale": "This CWE has been deprecated.", "Comments": "See description and name for possible suggestions of other CWEs to consider.", "Reasons": ["Deprecated"]}}
{"ID": "219", "Name": "Storage of File with Sensitive Data Under Web Root", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product stores sensitive data under the web document root with insufficient access control, which might make it accessible to untrusted parties.", "ExtendedDescription": "Besides public-facing web pages and code, products may store sensitive data, code that is not directly invoked, or other files under the web document root of the web server. If the server is not configured or otherwise used to prevent direct access to those files, then attackers may obtain this sensitive data.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "552", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Operation", "Note": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."}, {"Phase": "Implementation", "Note": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"]}], "PotentialMitigations": [{"Phase": ["Implementation", "System Configuration"], "Description": "Avoid storing information under the web root directory."}, {"Phase": ["System Configuration"], "Description": "Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the web directory."}], "ObservedExamples": [{"Reference": "CVE-2005-1835", "Description": "Data file under web root.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1835"}, {"Reference": "CVE-2005-2217", "Description": "Data file under web root.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2217"}, {"Reference": "CVE-2002-1449", "Description": "Username/password in data file under web root.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1449"}, {"Reference": "CVE-2002-0943", "Description": "Database file under web root.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0943"}, {"Reference": "CVE-2005-1645", "Description": "database file under web root.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1645"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-20148", "Description": "ManageEngine ADSelfService Plus below build 6116 stores the password policy file for each domain under the html/ web root with a predictable filename based on the domain name. When ADSSP is configured with multiple Windows domains, a user from one domain can obtain the password policy for another domain by authenticating to the service and then sending a request specifying the password policy file of the other domain."}]}
{"ID": "22", "Name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')", "Abstraction": "Base", "Structure": "Simple", "Status": "Stable", "Diagram": "/data/images/CWE-22-Diagram.png", "Description": "The product uses external input to construct a pathname that is intended to identify a file or directory that is located underneath a restricted parent directory, but the product does not properly neutralize special elements within the pathname that can cause the pathname to resolve to a location that is outside of the restricted directory.", "ExtendedDescription": "\n\nMany file operations are intended to take place within a restricted directory. By using special elements such as \"..\" and \"/\" separators, attackers can escape outside of the restricted location to access files or directories that are elsewhere on the system. One of the most common special elements is the \"../\" sequence, which in most modern operating systems is interpreted as the parent directory of the current location. This is referred to as relative path traversal. Path traversal also covers the use of absolute pathnames such as \"/usr/local/bin\" to access unexpected files. This is referred to as absolute path traversal.\n", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "706", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "706", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "668", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}, {"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Directory traversal"}, {"Term": "Path traversal", "Description": "\"Path traversal\" is preferred over \"directory traversal,\" but both terms are attack-focused."}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries."}, {"Scope": ["Integrity"], "Impact": ["Modify Files or Directories"], "Note": "The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication."}, {"Scope": ["Confidentiality"], "Impact": ["Read Files or Directories"], "Note": "The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of protection mechanisms such as authentication, it has the potential to lock out product users."}], "DetectionMethods": [{"Method": "Automated Static Analysis", "Description": "Automated techniques can find areas where path traversal weaknesses exist. However, tuning or customization may be required to remove or de-prioritize path-traversal problems that are only exploitable by the product's administrator - or other privileged users - and thus potentially valid behavior or, at worst, a bug instead of a vulnerability.", "Effectiveness": "High"}, {"Method": "Manual Static Analysis", "Description": "Manual white box techniques may be able to provide sufficient code coverage and reduction of false positives if all file access operations can be assessed within limited time constraints.", "Effectiveness": "High"}, {"Method": "Automated Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary Weakness Analysis - including disassembler + source code weakness analysis", "Effectiveness": "High"}, {"Method": "Manual Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Automated Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tWeb Application Scanner\n\t\tWeb Services Scanner\n\t\tDatabase Scanners", "Effectiveness": "High"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer", "Effectiveness": "High"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tManual Source Code Review (not inspections)\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source", "Effectiveness": "High"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer", "Effectiveness": "High"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-5.1", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\n\n\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n"}, {"MitigationID": "MIT-15", "Phase": ["Architecture and Design"], "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."}, {"MitigationID": "MIT-20.1", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\n\nUse a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes:\n\n\n  - realpath() in C\n\n  - getCanonicalPath() in Java\n\n  - GetFullPath() in ASP.NET\n\n  - realpath() or abs_path() in Perl\n\n  - realpath() in PHP\n\n"}, {"MitigationID": "MIT-4", "Phase": ["Architecture and Design"], "Strategy": "Libraries or Frameworks", "Description": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid."}, {"MitigationID": "MIT-29", "Phase": ["Operation"], "Strategy": "Firewall", "Description": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.", "Effectiveness": "Moderate", "EffectivenessNotes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."}, {"MitigationID": "MIT-17", "Phase": ["Architecture and Design", "Operation"], "Strategy": "Environment Hardening", "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."}, {"MitigationID": "MIT-21.1", "Phase": ["Architecture and Design"], "Strategy": "Enforcement by Conversion", "Description": "\n\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\n\nFor example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.\n"}, {"MitigationID": "MIT-22", "Phase": ["Architecture and Design", "Operation"], "Strategy": "Sandbox or Jail", "Description": "\n\nRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\n\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\n\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\n\n\nBe careful to avoid CWE-243 and other weaknesses related to jails.\n", "Effectiveness": "Limited", "EffectivenessNotes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."}, {"MitigationID": "MIT-34", "Phase": ["Architecture and Design", "Operation"], "Strategy": "Attack Surface Reduction", "Description": "\n\nStore library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.\n\n\nThis significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.\n"}, {"MitigationID": "MIT-39", "Phase": ["Implementation"], "Description": "\n\nEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.\n\n\nIf errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.\n\n\nAvoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n\n\nIn the context of path traversal, error messages which disclose path information can help attackers craft the appropriate attack strings to move through the file system hierarchy.\n"}, {"MitigationID": "MIT-16", "Phase": ["Operation", "Implementation"], "Strategy": "Environment Hardening", "Description": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."}], "DemonstrativeExamples": [{"ID": "DX-27", "Entries": [{"IntroText": "The following code could be for a social networking application in which each user's profile information is stored in a separate file. All files are stored in a single directory."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\tmy $dataPath = \"/users/cwe/profiles\";\n\tmy $username = param(\"user\");\n\tmy $profilePath = $dataPath . \"/\" . $username;\n\topen(my $fh, \"<\", $profilePath) || ExitError(\"profile read error: $profilePath\");\n\tprint \"<ul>\\n\";\n\twhile (<$fh>) {\n\t\tprint \"<li>$_</li>\\n\";\n\t}\n\tprint \"</ul>\\n\";\n```"}, {"BodyText": "While the programmer intends to access files such as \"/users/cwe/profiles/alice\" or \"/users/cwe/profiles/bob\", there is no verification of the incoming user parameter. An attacker could provide a string such as:"}, {"Nature": "Attack", "ExampleCode": "```\n\t../../../etc/passwd\n```"}, {"BodyText": "The program would generate a profile pathname like this:"}, {"Nature": "Result", "ExampleCode": "```\n\t/users/cwe/profiles/../../../etc/passwd\n```"}, {"BodyText": "When the file is opened, the operating system resolves the \"../\" during path canonicalization and actually accesses this file:"}, {"Nature": "Result", "ExampleCode": "```\n\t/etc/passwd\n```"}, {"BodyText": "As a result, the attacker could read the entire text of the password file."}, {"BodyText": "Notice how this code also contains an error message information leak (CWE-209) if the user parameter does not produce a file that exists: the full pathname is provided. Because of the lack of output encoding of the file that is retrieved, there might also be a cross-site scripting problem (CWE-79) if profile contains any HTML, but other code would need to be examined."}]}, {"ID": "DX-18", "Entries": [{"IntroText": "In the example below, the path to a dictionary file is read from a system property and used to initialize a File object."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tString filename = System.getProperty(\"com.domain.application.dictionaryFile\");\n\tFile dictionaryFile = new File(filename);\n```"}, {"BodyText": "However, the path is not validated or modified to prevent it from containing relative or absolute path sequences before creating the File object. This allows anyone who can control the system property to determine what file is used. Ideally, the path should be resolved relative to some kind of application or user home directory."}]}, {"ID": "DX-2", "Entries": [{"IntroText": "The following code takes untrusted input and uses a regular expression to filter \"../\" from the input. It then appends this result to the /home/user/ directory and attempts to read the file in the final resulting path."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\tmy $Username = GetUntrustedInput();\n\t$Username =~ s/\\.\\.\\///;\n\tmy $filename = \"/home/user/\" . $Username;\n\tReadAndSendFile($filename);\n```"}, {"BodyText": "Since the regular expression does not have the /g global match modifier, it only removes the first instance of \"../\" it comes across. So an input value such as:"}, {"Nature": "Attack", "ExampleCode": "```\n\t../../../etc/passwd\n```"}, {"BodyText": "will have the first \"../\" stripped, resulting in:"}, {"Nature": "Result", "ExampleCode": "```\n\t../../etc/passwd\n```"}, {"BodyText": "This value is then concatenated with the /home/user/ directory:"}, {"Nature": "Result", "ExampleCode": "```\n\t/home/user/../../etc/passwd\n```"}, {"BodyText": "which causes the /etc/passwd file to be retrieved once the operating system has resolved the ../ sequences in the pathname. This leads to relative path traversal (CWE-23)."}]}, {"Entries": [{"IntroText": "The following code attempts to validate a given input path by checking it against an allowlist and once validated delete the given file. In this specific case, the path is considered valid if it starts with the string \"/safe_dir/\"."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tString path = getInputPath();\n\tif (path.startsWith(\"/safe_dir/\"))\n\t{\n\t\tFile f = new File(path);\n\t\tf.delete()\n\t}\n```"}, {"BodyText": "An attacker could provide an input such as this:"}, {"Nature": "Attack", "ExampleCode": "```\n\t/safe_dir/../important.dat\n```"}, {"BodyText": "The software assumes that the path is valid because it starts with the \"/safe_path/\" sequence, but the \"../\" sequence will cause the program to delete the important.dat file in the parent directory"}]}, {"ID": "DX-22", "Entries": [{"IntroText": "The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet."}, {"Nature": "Good", "Language": "HTML", "ExampleCode": "```\n\t<form action=\"FileUploadServlet\" method=\"post\" enctype=\"multipart/form-data\">\n\tChoose a file to upload:\n\t<input type=\"file\" name=\"filename\"/>\n\t<br/>\n\t<input type=\"submit\" name=\"submit\" value=\"Submit\"/>\n\t</form>\n```"}, {"BodyText": "When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class FileUploadServlet extends HttpServlet {\n\t\t\t...\n\t\t\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\t\t\tresponse.setContentType(\"text/html\");\n\t\t\t\t\tPrintWriter out = response.getWriter();\n\t\t\t\t\tString contentType = request.getContentType();\n\t\t\t\t\t// the starting position of the boundary header\n\t\t\t\t\tint ind = contentType.indexOf(\"boundary=\");\n\t\t\t\t\tString boundary = contentType.substring(ind+9);\n\t\t\t\t\tString pLine = new String();\n\t\t\t\t\tString uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value\n\t\t\t\t\t// verify that content type is multipart form data\n\t\t\t\t\tif (contentType != null && contentType.indexOf(\"multipart/form-data\") != -1) {\n\t\t\t\t\t\t\t// extract the filename from the Http header\n\t\t\t\t\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));\n\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\tpLine = br.readLine();\n\t\t\t\t\t\t\tString filename = pLine.substring(pLine.lastIndexOf(\"\\\\\"), pLine.lastIndexOf(\"\\\"\"));\n\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t// output the file to the local upload directory\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));\n\t\t\t\t\t\t\t\t\tfor (String line; (line=br.readLine())!=null; ) {\n\t\t\t\t\t\t\t\t\t\tif (line.indexOf(boundary) == -1) {\n\t\t\t\t\t\t\t\t\t\t\tbw.write(line);\n\t\t\t\t\t\t\t\t\t\t\tbw.newLine();\n\t\t\t\t\t\t\t\t\t\t\tbw.flush();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} //end of for loop\n\t\t\t\t\t\t\t\t\tbw.close();\n\t\t\t\t\t\t\t} catch (IOException ex) {...}\n\t\t\t\t\t\t\t// output successful upload response HTML page\n\t\t\t\t\t}\n\t\t\t\t\t// output unsuccessful upload response HTML page\n\t\t\t\t\telse\n\t\t\t\t\t{...}\n\t\t\t}\n\t\t\t\t...\n\t}\n```"}, {"BodyText": "This code does not perform a check on the type of the file being uploaded (CWE-434). This could allow an attacker to upload any executable file or other file with malicious code."}, {"BodyText": "Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-23). Since the code does not check the filename that is provided in the header, an attacker can use \"../\" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash."}]}, {"ID": "DX-159", "Entries": [{"IntroText": "This script intends to read a user-supplied file from the current directory. The user inputs the relative path to the file and the script uses Python's os.path.join() function to combine the path to the current working directory with the provided path to the specified file. This results in an absolute path to the desired file. If the file does not exist when the script attempts to read it, an error is printed to the user."}, {"Nature": "Bad", "Language": "Python", "ExampleCode": "```\n\t import os\n\t import sys\n\t def main():\n\t\t filename = sys.argv[1]\n\t\t path = os.path.join(os.getcwd(), filename)\n\t\t try:\n\t\t\t with open(path, 'r') as f:\n\t\t\t\t file_data = f.read()\n\t\t except FileNotFoundError as e:\n\t\t\t print(\"Error - file not found\")\n\t main() \n```"}, {"BodyText": "However, if the user supplies an absolute path, the os.path.join() function will discard the path to the current working directory and use only the absolute path provided. For example, if the current working directory is /home/user/documents, but the user inputs /etc/passwd, os.path.join() will use only /etc/passwd, as it is considered an absolute path. In the above scenario, this would cause the script to access and read the /etc/passwd file."}, {"Nature": "Good", "Language": "Python", "ExampleCode": "```\n\t import os\n\t import sys\n\t def main():\n\t\t filename = sys.argv[1]\n\t\t path = os.path.normpath(f\"{os.getcwd()}{os.sep}{filename}\")\n\t\t try:\n\t\t\t with open(path, 'r') as f:\n\t\t\t\t file_data = f.read()\n\t\t except FileNotFoundError as e:\n\t\t\t print(\"Error - file not found\")\n\t main() \n```"}, {"BodyText": "The constructed path string uses os.sep to add the appropriate separation character for the given operating system (e.g. '\\' or '/') and the call to os.path.normpath() removes any additional slashes that may have been entered - this may occur particularly when using a Windows path. By putting the pieces of the path string together in this fashion, the script avoids a call to os.path.join() and any potential issues that might arise if an absolute path is entered. With this version of the script, if the current working directory is /home/user/documents, and the user inputs /etc/passwd, the resulting path will be /home/user/documents/etc/passwd. The user is therefore contained within the current working directory as intended."}]}], "ObservedExamples": [{"Reference": "CVE-2024-37032", "Description": "Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama", "Link": "https://www.cve.org/CVERecord?id=CVE-2024-37032"}, {"Reference": "CVE-2024-4315", "Description": "Chain: API for text generation using Large Language Models (LLMs) does not include the \"\\\" Windows folder separator in its denylist (CWE-184) when attempting to prevent Local File Inclusion via path traversal (CWE-22), allowing deletion of arbitrary files on Windows systems.", "Link": "https://www.cve.org/CVERecord?id=CVE-2024-4315"}, {"Reference": "CVE-2022-45918", "Description": "Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-45918"}, {"Reference": "CVE-2019-20916", "Description": "Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as \"../\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-20916"}, {"Reference": "CVE-2022-31503", "Description": "Python package constructs filenames using an unsafe os.path.join call on untrusted input, allowing absolute path traversal because os.path.join resets the pathname to an absolute path that is specified as part of the input.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-31503"}, {"Reference": "CVE-2022-24877", "Description": "directory traversal in Go-based Kubernetes operator app allows accessing data from the controller's pod file system via ../ sequences in a yaml file", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-24877"}, {"Reference": "CVE-2021-21972", "Description": "Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-21972"}, {"Reference": "CVE-2020-4053", "Description": "a Kubernetes package manager written in Go allows malicious plugins to inject path traversal sequences into a plugin archive (\"Zip slip\") to copy a file outside the intended directory", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-4053"}, {"Reference": "CVE-2020-3452", "Description": "Chain: security product has improper input validation (CWE-20) leading to directory traversal (CWE-22), as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-3452"}, {"Reference": "CVE-2019-10743", "Description": "Go-based archive library allows extraction of files to locations outside of the target folder with \"../\" path traversal sequences in filenames in a zip file, aka \"Zip Slip\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-10743"}, {"Reference": "CVE-2010-0467", "Description": "Newsletter module allows reading arbitrary files using \"../\" sequences.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-0467"}, {"Reference": "CVE-2006-7079", "Description": "Chain: PHP app uses extract for register_globals compatibility layer (CWE-621), enabling path traversal (CWE-22)", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-7079"}, {"Reference": "CVE-2009-4194", "Description": "FTP server allows deletion of arbitrary files using \"..\" in the DELE command.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-4194"}, {"Reference": "CVE-2009-4053", "Description": "FTP server allows creation of arbitrary directories using \"..\" in the MKD command.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-4053"}, {"Reference": "CVE-2009-0244", "Description": "FTP service for a Bluetooth device allows listing of directories, and creation or reading of files using \"..\" sequences.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0244"}, {"Reference": "CVE-2009-4013", "Description": "Software package maintenance program allows overwriting arbitrary files using \"../\" sequences.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-4013"}, {"Reference": "CVE-2009-4449", "Description": "Bulletin board allows attackers to determine the existence of files using the avatar.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-4449"}, {"Reference": "CVE-2009-4581", "Description": "PHP program allows arbitrary code execution using \"..\" in filenames that are fed to the include() function.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-4581"}, {"Reference": "CVE-2010-0012", "Description": "Overwrite of files using a .. in a Torrent file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-0012"}, {"Reference": "CVE-2010-0013", "Description": "Chat program allows overwriting files using a custom smiley request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-0013"}, {"Reference": "CVE-2008-5748", "Description": "Chain: external control of values for user's desired language and theme enables path traversal.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5748"}, {"Reference": "CVE-2009-1936", "Description": "Chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1936"}], "FunctionalAreas": ["File Processing"], "AffectedResources": ["File or Directory"], "RelatedAttackPatterns": ["126", "64", "76", "78", "79"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Other", "Note": "In many programming languages, the injection of a null byte (the 0 or NUL) may allow an attacker to truncate a generated filename to apply to a wider range of files. For example, the product may add \".txt\" to any pathname, thus limiting the attacker to text files, but a null injection may effectively remove this restriction."}, {"Type": "Relationship", "Note": "Pathname equivalence can be regarded as a type of canonicalization error."}, {"Type": "Relationship", "Note": "Some pathname equivalence issues are not directly related to directory traversal, rather are used to bypass security-relevant checks for whether a file/directory can be accessed by the attacker (e.g. a trailing \"/\" on a filename could bypass access rules that don't expect a trailing /, causing a server to provide the file when it normally would not)."}, {"Type": "Terminology", "Note": "\n\nLike other weaknesses, terminology is often based on the types of manipulations used, instead of the underlying weaknesses. Some people use \"directory traversal\" only to refer to the injection of \"..\" and equivalent sequences whose specific meaning is to traverse directories.\n\n\nOther variants like \"absolute pathname\" and \"drive letter\" have the *effect* of directory traversal, but some people may not call it such, since it doesn't involve \"..\" or equivalent.\n"}, {"Type": "Research Gap", "Note": "Many variants of path traversal attacks are probably under-studied with respect to root cause. CWE-790 and CWE-182 begin to cover part of this gap."}, {"Type": "Research Gap", "Note": "\n\nIncomplete diagnosis or reporting of vulnerabilities can make it difficult to know which variant is affected. For example, a researcher might say that \"..\\\" is vulnerable, but not test \"../\" which may also be vulnerable.\n\n\nAny combination of directory separators (\"/\", \"\\\", etc.) and numbers of \".\" (e.g. \"....\") can produce unique variants; for example, the \"//../\" variant is not listed (CVE-2004-0325). See this entry's children and lower-level descendants.\n"}], "Top25Examples": [{"Reference": "CVE-2022-1390", "Description": "The Admin Word Count Column WordPress plugin through 2.2 does not validate the path parameter given to readfile(), which could allow unauthenticated attackers to read arbitrary files on server running old version of PHP susceptible to the null byte technique. This could also lead to RCE by using a Phar Deserialization technique"}, {"Reference": "CVE-2022-20721", "Description": "Multiple vulnerabilities in the Cisco IOx application hosting environment on multiple Cisco platforms could allow an attacker to inject arbitrary commands into the underlying host operating system, execute arbitrary code on the underlying host operating system, install applications without being authenticated, or conduct a cross-site scripting (XSS) attack against a user of the affected software. For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2022-20722", "Description": "Multiple vulnerabilities in the Cisco IOx application hosting environment on multiple Cisco platforms could allow an attacker to inject arbitrary commands into the underlying host operating system, execute arbitrary code on the underlying host operating system, install applications without being authenticated, or conduct a cross-site scripting (XSS) attack against a user of the affected software. For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2022-20727", "Description": "Multiple vulnerabilities in the Cisco IOx application hosting environment on multiple Cisco platforms could allow an attacker to inject arbitrary commands into the underlying host operating system, execute arbitrary code on the underlying host operating system, install applications without being authenticated, or conduct a cross-site scripting (XSS) attack against a user of the affected software. For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2022-23620", "Description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. In affected versions AbstractSxExportURLFactoryActionHandler#processSx does not escape anything from SSX document references when serializing it on filesystem, it is possible to for the HTML export process to contain reference elements containing filesystem syntax like \"../\", \"./\". or \"/\" in general. The referenced elements are not properly escaped. This issue has been resolved in version 13.6-rc-1. This issue can be worked around by limiting or disabling document export."}, {"Reference": "CVE-2022-26889", "Description": "In Splunk Enterprise versions before 8.1.2, the uri path to load a relative resource within a web page is vulnerable to path traversal. It allows an attacker to potentially inject arbitrary content into the web page (e.g., HTML Injection, XSS) or bypass SPL safeguards for risky commands. The attack is browser-based. An attacker cannot exploit the attack at will and requires the attacker to initiate a request within the victim's browser (e.g., phishing)."}, {"Reference": "CVE-2022-30321", "Description": "go-getter up to 1.5.11 and 2.0.2 allowed arbitrary host access via go-getter path traversal, symlink processing, and command injection flaws. Fixed in 1.6.1 and 2.1.0."}, {"Reference": "CVE-2022-34254", "Description": "Adobe Commerce versions 2.4.3-p2 (and earlier), 2.3.7-p3 (and earlier) and 2.4.4 (and earlier) are affected by an Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability that could be abused by an attacker to inject malicious scripts into the vulnerable endpoint. A low privileged attacker could leverage this vulnerability to read local files and to perform Stored XSS. Exploitation of this issue does not require user interaction."}, {"Reference": "CVE-2022-34426", "Description": "Dell Container Storage Modules 1.2 contains an Improper Limitation of a Pathname to a Restricted Directory in goiscsi and gobrick libraries which could lead to OS command injection. A remote unauthenticated attacker could exploit this vulnerability leading to unintentional access to path outside of restricted directory."}, {"Reference": "CVE-2022-45470", "Description": "missing input validation in Apache Hama may cause information disclosure through path traversal and XSS. Since Apache Hama is EOL, we do not expect these issues to be fixed."}, {"Reference": "CVE-2022-20723", "Description": "Multiple vulnerabilities in the Cisco IOx application hosting environment on multiple Cisco platforms could allow an attacker to inject arbitrary commands into the underlying host operating system, execute arbitrary code on the underlying host operating system, install applications without being authenticated, or conduct a cross-site scripting (XSS) attack against a user of the affected software. For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2021-45427", "Description": "Emerson XWEB 300D EVO 3.0.7--3ee403 is affected by: unauthenticated arbitrary file deletion due to path traversal. An attacker can browse and delete files without any authentication due to incorrect access control and directory traversal."}, {"Reference": "CVE-2022-0959", "Description": "A malicious, but authorised and authenticated user can construct an HTTP request using their existing CSRF token and session cookie to manually upload files to any location that the operating system user account under which pgAdmin is running has permission to write."}, {"Reference": "CVE-2022-22914", "Description": "An incorrect access control issue in the component FileManager of Ovidentia CMS 6.0 allows authenticated attackers to to view and download content in the upload directory via path traversal."}, {"Reference": "CVE-2022-24730", "Description": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. Argo CD starting with version 1.3.0 but before versions 2.1.11, 2.2.6, and 2.3.0 is vulnerable to a path traversal bug, compounded by an improper access control bug, allowing a malicious user with read-only repository access to leak sensitive files from Argo CD's repo-server. A malicious Argo CD user who has been granted `get` access for a repository containing a Helm chart can craft an API request to the `/api/v1/repositories/{repo_url}/appdetails` endpoint to leak the contents of out-of-bounds files from the repo-server. The malicious payload would reference an out-of-bounds file, and the contents of that file would be returned as part of the response. Contents from a non-YAML file may be returned as part of an error message. The attacker would have to know or guess the location of the target file. Sensitive files which could be leaked include files from other Applications' source repositories or any secrets which have been mounted as files on the repo-server. This vulnerability is patched in Argo CD versions 2.1.11, 2.2.6, and 2.3.0. The patches prevent path traversal and limit access to users who either A) have been granted Application `create` privileges or B) have been granted Application `get` privileges and are requesting details for a `repo_url` that has already been used for the given Application. There are currently no known workarounds."}, {"Reference": "CVE-2022-27925", "Description": "Zimbra Collaboration (aka ZCS) 8.8.15 and 9.0 has mboximport functionality that receives a ZIP archive and extracts files from it. An authenticated user with administrator rights has the ability to upload arbitrary files to the system, leading to directory traversal."}, {"Reference": "CVE-2022-29081", "Description": "Zoho ManageEngine Access Manager Plus before 4302, Password Manager Pro before 12007, and PAM360 before 5401 are vulnerable to access-control bypass on a few Rest API URLs (for SSOutAction. SSLAction. LicenseMgr. GetProductDetails. GetDashboard. FetchEvents. and Synchronize) via the ../RestAPI substring."}, {"Reference": "CVE-2022-29836", "Description": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability was discovered via an HTTP API on Western Digital My Cloud Home; My Cloud Home Duo; and SanDisk ibi devices that could allow an attacker to abuse certain parameters to point to random locations on the file system. This could also allow the attacker to initiate the installation of custom packages at these locations. This can only be exploited once the attacker has been authenticated to the device. This issue affects: Western Digital My Cloud Home and My Cloud Home Duo versions prior to 8.11.0-113 on Linux; SanDisk ibi versions prior to 8.11.0-113 on Linux."}, {"Reference": "CVE-2022-3090", "Description": "Red Lion Controls Crimson 3.0 versions 707.000 and prior, Crimson 3.1 versions 3126.001 and prior, and Crimson 3.2 versions 3.2.0044.0 and prior are vulnerable to path traversal. When attempting to open a file using a specific path, the user's password hash is sent to an arbitrary host. This could allow an attacker to obtain user credential hashes."}, {"Reference": "CVE-2022-31255", "Description": "An Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in spacewalk/Uyuni of SUSE Linux Enterprise Module for SUSE Manager Server 4.2, SUSE Linux Enterprise Module for SUSE Manager Server 4.3, SUSE Manager Server 4.2 allows remote attackers to read files available to the user running the process, typically tomcat. This issue affects: SUSE Linux Enterprise Module for SUSE Manager Server 4.2 hub-xmlrpc-api-0.7-150300.3.9.2, inter-server-sync-0.2.4-150300.8.25.2, locale-formula-0.3-150300.3.3.2, py27-compat-salt-3000.3-150300.7.7.26.2, python-urlgrabber-3.10.2.1py2_3-150300.3.3.2, spacecmd-4.2.20-150300.4.30.2, spacewalk-backend-4.2.25-150300.4.32.4, spacewalk-client-tools-4.2.21-150300.4.27.3, spacewalk-java-4.2.43-150300.3.48.2, spacewalk-utils-4.2.18-150300.3.21.2, spacewalk-web-4.2.30-150300.3.30.3, susemanager-4.2.38-150300.3.44.3, susemanager-doc-indexes-4.2-150300.12.36.3, susemanager-docs_en-4.2-150300.12.36.2, susemanager-schema-4.2.25-150300.3.30.3, susemanager-sls versions prior to 4.2.28. SUSE Linux Enterprise Module for SUSE Manager Server 4.3 spacewalk-java versions prior to 4.3.39. SUSE Manager Server 4.2 release-notes-susemanager versions prior to 4.2.10."}, {"Reference": "CVE-2022-33715", "Description": "Improper access control and path traversal vulnerability in LauncherProvider prior to SMR Aug-2022 Release 1 allow local attacker to access files of One UI."}, {"Reference": "CVE-2022-3560", "Description": "A flaw was found in pesign. The pesign package provides a systemd service used to start the pesign daemon. This service unit runs a script to set ACLs for /etc/pki/pesign and /run/pesign directories to grant access privileges to users in the 'pesign' group. However, the script doesn't check for symbolic links. This could allow an attacker to gain access to privileged files and directories via a path traversal attack."}, {"Reference": "CVE-2022-35650", "Description": "The vulnerability was found in Moodle, occurs due to input validation error when importing lesson questions. This insufficient path checks results in arbitrary file read risk. This vulnerability allows a remote attacker to perform directory traversal attacks. The capability to access this feature is only available to teachers, managers and admins by default."}, {"Reference": "CVE-2022-42280", "Description": "NVIDIA BMC contains a vulnerability in SPX REST auth handler, where an un-authorized attacker can exploit a path traversal, which may lead to authentication bypass."}, {"Reference": "CVE-2022-27836", "Description": "Improper access control and path traversal vulnerability in Storage Manager and Storage Manager Service prior to SMR Apr-2022 Release 1 allow local attackers to access arbitrary system files without a proper permission. The patch adds proper validation logic to prevent arbitrary files access."}, {"Reference": "CVE-2021-1256", "Description": "A vulnerability in the CLI of Cisco Firepower Threat Defense (FTD) Software could allow an authenticated, local attacker to overwrite files on the file system of an affected device by using directory traversal techniques. A successful exploit could cause system instability if important system files are overwritten. This vulnerability is due to insufficient validation of user input for the file path in a specific CLI command. An attacker could exploit this vulnerability by logging in to a targeted device and issuing a specific CLI command with crafted user input. A successful exploit could allow the attacker to overwrite arbitrary files on the file system of the affected device. The attacker would need valid user credentials on the device."}, {"Reference": "CVE-2022-29580", "Description": "There exists a path traversal vulnerability in the Android Google Search app. This is caused by the incorrect usage of uri.getLastPathSegment. A symbolic encoded string can bypass the path logic to get access to unintended directories. An attacker can manipulate paths that could lead to code execution on the device. We recommend upgrading beyond version 13.41"}, {"Reference": "CVE-2021-20023", "Description": "SonicWall Email Security version 10.0.9.x contains a vulnerability that allows a post-authenticated attacker to read an arbitrary file on the remote host."}, {"Reference": "CVE-2021-20090", "Description": "A path traversal vulnerability in the web interfaces of Buffalo WSR-2533DHPL2 firmware version <= 1.02 and WSR-2533DHP3 firmware version <= 1.24 could allow unauthenticated remote attackers to bypass authentication."}, {"Reference": "CVE-2021-42013", "Description": "It was found that the fix for CVE-2021-41773 in Apache HTTP Server 2.4.50 was insufficient. An attacker could use a path traversal attack to map URLs to files outside the directories configured by Alias-like directives. If files outside of these directories are not protected by the usual default configuration \"require all denied\", these requests can succeed. If CGI scripts are also enabled for these aliased pathes, this could allow for remote code execution. This issue only affects Apache 2.4.49 and Apache 2.4.50 and not earlier versions."}, {"Reference": "CVE-2022-26352", "Description": "An issue was discovered in the ContentResource API in dotCMS 3.0 through 22.02. Attackers can craft a multipart form request to post a file whose filename is not initially sanitized. This allows directory traversal, in which the file is saved outside of the intended storage location. If anonymous content creation is enabled, this allows an unauthenticated attacker to upload an executable file, such as a .jsp file, that can lead to remote code execution."}, {"Reference": "CVE-2022-30333", "Description": "RARLAB UnRAR before 6.12 on Linux and UNIX allows directory traversal to write to files during an extract (aka unpack) operation, as demonstrated by creating a ~/.ssh/authorized_keys file. NOTE: WinRAR and Android RAR are unaffected."}, {"Reference": "CVE-2022-41328", "Description": "A improper limitation of a pathname to a restricted directory vulnerability ('path traversal') [CWE-22] in Fortinet FortiOS version 7.2.0 through 7.2.3, 7.0.0 through 7.0.9 and before 6.4.11 allows a privileged attacker to read and write files on the underlying Linux system via crafted CLI commands."}, {"Reference": "CVE-2021-41773", "Description": "A flaw was found in a change made to path normalization in Apache HTTP Server 2.4.49. An attacker could use a path traversal attack to map URLs to files outside the directories configured by Alias-like directives. If files outside of these directories are not protected by the usual default configuration \"require all denied\", these requests can succeed. If CGI scripts are also enabled for these aliased pathes, this could allow for remote code execution. This issue is known to be exploited in the wild. This issue only affects Apache 2.4.49 and not earlier versions. The fix in Apache HTTP Server 2.4.50 was found to be incomplete, see CVE-2021-42013."}, {"Reference": "CVE-2022-41352", "Description": "An issue was discovered in Zimbra Collaboration (ZCS) 8.8.15 and 9.0. An attacker can upload arbitrary files through amavis via a cpio loophole (extraction to /opt/zimbra/jetty/webapps/zimbra/public) that can lead to incorrect access to any other user accounts. Zimbra recommends pax over cpio. Also, pax is in the prerequisites of Zimbra on Ubuntu; however, pax is no longer part of a default Red Hat installation after RHEL 6 (or CentOS 6). Once pax is installed, amavis automatically prefers it over cpio."}, {"Reference": "CVE-2022-3966", "Description": "A vulnerability, which was classified as critical, has been found in Ultimate Member Plugin up to 2.5.0. This issue affects the function load_template of the file includes/core/class-shortcodes.php of the component Template Handler. The manipulation of the argument tpl leads to pathname traversal. The attack may be initiated remotely. Upgrading to version 2.5.1 is able to address this issue. The name of the patch is e1bc94c1100f02a129721ba4be5fbc44c3d78ec4. It is recommended to upgrade the affected component. The identifier VDB-213545 was assigned to this vulnerability."}, {"Reference": "CVE-2021-37126", "Description": "Arbitrary file has a Exposure of Sensitive Information to an Unauthorized Actor vulnerability .Successful exploitation of this vulnerability may cause the directory is traversed."}, {"Reference": "CVE-2021-39970", "Description": "HwPCAssistant has a Improper Input Validation vulnerability.Successful exploitation of this vulnerability may create any file with the system app permission."}, {"Reference": "CVE-2022-0902", "Description": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal'), Improper Neutralization of Special Elements used in a Command ('Command Injection') vulnerability in flow computer and remote controller products of ABB ( RMC-100 (Standard), RMC-100-LITE, XIO, XFCG5 , XRCG5 , uFLOG5 , UDC) allows an attacker who successfully exploited this vulnerability could insert and run arbitrary code in an affected system node."}, {"Reference": "CVE-2022-33690", "Description": "Improper input validation in Contacts Storage prior to SMR Jul-2022 Release 1 allows attacker to access arbitrary file."}, {"Reference": "CVE-2021-23484", "Description": "The package zip-local before 0.3.5 are vulnerable to Arbitrary File Write via Archive Extraction (Zip Slip) which can lead to an extraction of a crafted file outside the intended extraction directory."}, {"Reference": "CVE-2022-37703", "Description": "In Amanda 3.5.1, an information leak vulnerability was found in the calcsize SUID binary. An attacker can abuse this vulnerability to know if a directory exists or not anywhere in the fs. The binary will use `opendir()` as root directly without checking the path, letting the attacker provide an arbitrary path."}, {"Reference": "CVE-2022-24897", "Description": "APIs to evaluate content with Velocity is a package for APIs to evaluate content with Velocity. Starting with version 2.3 and prior to 12.6.7, 12.10.3, and 13.0, the velocity scripts are not properly sandboxed against using the Java File API to perform read or write operations on the filesystem. Writing an attacking script in Velocity requires the Script rights in XWiki so not all users can use it, and it also requires finding an XWiki API which returns a File. The problem has been patched in versions 12.6.7, 12.10.3, and 13.0. There is no easy workaround for fixing this vulnerability other than upgrading and being careful when giving Script rights."}, {"Reference": "CVE-2022-31475", "Description": "Authenticated (custom plugin role) Arbitrary File Read via Export function vulnerability in GiveWP's GiveWP plugin <= 2.20.2 at WordPress."}, {"Reference": "CVE-2022-35235", "Description": "Authenticated (admin+) Arbitrary File Read vulnerability in XplodedThemes WPide plugin <= 2.6 at WordPress."}, {"Reference": "CVE-2022-4779", "Description": "StreamX applications from versions 6.02.01 to 6.04.34 are affected by a logic bug that allows to bypass the implemented authentication scheme. StreamX applications using StreamView HTML component with the public web server feature activated are affected. "}, {"Reference": "CVE-2022-25371", "Description": "Apache OFBiz uses the Birt project plugin (https://eclipse.github.io/birt-website/) to create data visualizations and reports. By leveraging a bug in Birt (https://bugs.eclipse.org/bugs/show_bug.cgi?id=538142) it is possible to perform a remote code execution (RCE) attack in Apache OFBiz, release 18.12.05 and earlier."}, {"Reference": "CVE-2022-41158", "Description": "Remote code execution vulnerability can be achieved by using cookie values as paths to a file by this builder program. A remote attacker could exploit the vulnerability to execute or inject malicious code."}, {"Reference": "CVE-2021-41143", "Description": "OpenMage LTS is an e-commerce platform. Prior to versions 19.4.22 and 20.0.19, Magento admin users with access to the customer media could execute code on the server. Versions 19.4.22 and 20.0.19 contain a patch for this issue. "}, {"Reference": "CVE-2022-20822", "Description": "A vulnerability in the web-based management interface of Cisco Identity Services Engine (ISE) could allow an authenticated, remote attacker to read and delete files on an affected device. This vulnerability is due to insufficient validation of user-supplied input. An attacker could exploit this vulnerability by sending a crafted HTTP request that contains certain character sequences to an affected system. A successful exploit could allow the attacker to read or delete specific files on the device that their configured administrative level should not have access to. Cisco plans to release software updates that address this vulnerability."}, {"Reference": "CVE-2022-20850", "Description": "A vulnerability in the CLI of stand-alone Cisco IOS XE SD-WAN Software and Cisco SD-WAN Software could allow an authenticated, local attacker to delete arbitrary files from the file system of an affected device. This vulnerability is due to insufficient input validation. An attacker could exploit this vulnerability by injecting arbitrary file path information when using commands in the CLI of an affected device. A successful exploit could allow the attacker to delete arbitrary files from the file system of the affected device."}, {"Reference": "CVE-2021-21469", "Description": "When security guidelines for SAP NetWeaver Master Data Management running on windows have not been thoroughly reviewed, it might be possible for an external operator to try and set custom paths in the MDS server configuration. When no adequate protection has been enforced on any level (e.g., MDS Server password not set, network and OS configuration not properly secured, etc.), a malicious user might define UNC paths which could then be exploited to put the system at risk using a so-called SMB relay attack and obtain highly sensitive data, which leads to Information Disclosure."}, {"Reference": "CVE-2021-41277", "Description": "Metabase is an open source data analytics platform. In affected versions a security issue has been discovered with the custom GeoJSON map (`admin->settings->maps->custom maps->add a map`) support and potential local file inclusion (including environment variables). URLs were not validated prior to being loaded. This issue is fixed in a new maintenance release (0.40.5 and 1.40.5), and any subsequent release after that. If you\u2019re unable to upgrade immediately, you can mitigate this by including rules in your reverse proxy or load balancer or WAF to provide a validation filter before the application."}]}
{"ID": "220", "Name": "Storage of File With Sensitive Data Under FTP Root", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product stores sensitive data under the FTP server root with insufficient access control, which might make it accessible to untrusted parties.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "552", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "BackgroundDetails": ["Various Unix FTP servers require a password file that is under the FTP root, due to use of chroot."], "ModesOfIntroduction": [{"Phase": "Operation"}, {"Phase": "Architecture and Design", "Note": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"]}], "PotentialMitigations": [{"Phase": ["Implementation", "System Configuration"], "Description": "Avoid storing information under the FTP root directory."}, {"Phase": ["System Configuration"], "Description": "Access control permissions should be set to prevent reading/writing of sensitive files inside/outside of the FTP directory."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "221", "Name": "Information Loss or Omission", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not record, or improperly records, security-relevant information that leads to an incorrect decision or hampers later analysis.", "ExtendedDescription": "This can be resultant, e.g. a buffer overflow might trigger a crash before the product can log the event.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "664", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Non-Repudiation"], "Impact": ["Hide Activities"]}], "DemonstrativeExamples": [{"ID": "DX-174", "Entries": [{"IntroText": "This code logs suspicious multiple login attempts."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\tfunction login($userName,$password){\n\t\t\tif(authenticate($userName,$password)){\n\t\t\t\treturn True;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tincrementLoginAttempts($userName);\n\t\t\t\tif(recentLoginAttempts($userName) > 5){\n\t\t\t\t\twriteLog(\"Failed login attempt by User: \" . $userName . \" at \" + date('r') );\n\t\t\t\t}\n\t\t\t}\n\t}\n```"}, {"BodyText": "This code only logs failed login attempts when a certain limit is reached. If an attacker knows this limit, they can stop their attack from being discovered by avoiding the limit."}]}], "ObservedExamples": [{"Reference": "CVE-2004-2227", "Description": "Web browser's filename selection dialog only shows the beginning portion of long filenames, which can trick users into launching executables with dangerous extensions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2227"}, {"Reference": "CVE-2003-0412", "Description": "application server does not log complete URI of a long request (truncation).", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0412"}, {"Reference": "CVE-1999-1029", "Description": "Login attempts are not recorded if the user disconnects before the maximum number of tries.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1029"}, {"Reference": "CVE-2002-0725", "Description": "Attacker performs malicious actions on a hard link to a file, obscuring the real target file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0725"}, {"Reference": "CVE-1999-1055", "Description": "Product does not warn user when document contains certain dangerous functions or macros.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1055"}], "RelatedAttackPatterns": ["81"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}}
{"ID": "222", "Name": "Truncation of Security-relevant Information", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product truncates the display, recording, or processing of security-relevant information in a way that can obscure the source or nature of an attack.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "221", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Non-Repudiation"], "Impact": ["Hide Activities"], "Note": "The source of an attack will be difficult or impossible to determine. This can allow attacks to the system to continue without notice."}], "ObservedExamples": [{"Reference": "CVE-2005-0585", "Description": "Web browser truncates long sub-domains or paths, facilitating phishing.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0585"}, {"Reference": "CVE-2004-2032", "Description": "Bypass URL filter via a long URL with a large number of trailing hex-encoded space characters.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2032"}, {"Reference": "CVE-2003-0412", "Description": "application server does not log complete URI of a long request (truncation).", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0412"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "223", "Name": "Omission of Security-relevant Information", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product does not record or display information that would be important for identifying the source or nature of an attack, or determining if an action is safe.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "221", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."}, {"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Non-Repudiation"], "Impact": ["Hide Activities"], "Note": "The source of an attack will be difficult or impossible to determine. This can allow attacks to the system to continue without notice."}], "DemonstrativeExamples": [{"ID": "DX-174", "Entries": [{"IntroText": "This code logs suspicious multiple login attempts."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\tfunction login($userName,$password){\n\t\t\tif(authenticate($userName,$password)){\n\t\t\t\treturn True;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tincrementLoginAttempts($userName);\n\t\t\t\tif(recentLoginAttempts($userName) > 5){\n\t\t\t\t\twriteLog(\"Failed login attempt by User: \" . $userName . \" at \" + date('r') );\n\t\t\t\t}\n\t\t\t}\n\t}\n```"}, {"BodyText": "This code only logs failed login attempts when a certain limit is reached. If an attacker knows this limit, they can stop their attack from being discovered by avoiding the limit."}]}, {"ID": "DX-175", "Entries": [{"IntroText": "This code prints the contents of a file if a user has permission."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\tfunction readFile($filename){\n\t\t\t$user = getCurrentUser();\n\t\t\t$realFile = $filename;\n```\n//resolve file if its a symbolic link* \n\t\t\tif(is_link($filename)){\n\t\t\t```\n\t\t\t\t$realFile = readlink($filename);\n\t\t\t}\n\t\t\tif(fileowner($realFile) == $user){\n\t\t\t\techo file_get_contents($realFile);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse{\n\t\t\t\techo 'Access denied';\n\t\t\t\twriteLog($user . ' attempted to access the file '. $filename . ' on '. date('r'));\n\t\t\t}\n\t}\n```"}, {"BodyText": "While the code logs a bad access attempt, it logs the user supplied name for the file, not the canonicalized file name. An attacker can obscure their target by giving the script the name of a link to the file they are attempting to access. Also note this code contains a race condition between the is_link() and readlink() functions (CWE-363)."}]}], "ObservedExamples": [{"Reference": "CVE-1999-1029", "Description": "Login attempts are not recorded if the user disconnects before the maximum number of tries.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1029"}, {"Reference": "CVE-2002-1839", "Description": "Sender's IP address not recorded in outgoing e-mail.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1839"}, {"Reference": "CVE-2000-0542", "Description": "Failed authentication attempts are not recorded if later attempt succeeds.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0542"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-45289", "Description": "A vulnerability exists in GPAC 1.0.1 due to an omission of security-relevant Information, which could cause a Denial of Service. The program terminates with signal SIGKILL."}]}
{"ID": "224", "Name": "Obscured Security-relevant Information by Alternate Name", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product records security-relevant information according to an alternate name of the affected entity, instead of the canonical name.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "221", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Non-Repudiation", "Access Control"], "Impact": ["Hide Activities", "Gain Privileges or Assume Identity"]}], "DemonstrativeExamples": [{"ID": "DX-175", "Entries": [{"IntroText": "This code prints the contents of a file if a user has permission."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\tfunction readFile($filename){\n\t\t\t$user = getCurrentUser();\n\t\t\t$realFile = $filename;\n```\n//resolve file if its a symbolic link* \n\t\t\tif(is_link($filename)){\n\t\t\t```\n\t\t\t\t$realFile = readlink($filename);\n\t\t\t}\n\t\t\tif(fileowner($realFile) == $user){\n\t\t\t\techo file_get_contents($realFile);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse{\n\t\t\t\techo 'Access denied';\n\t\t\t\twriteLog($user . ' attempted to access the file '. $filename . ' on '. date('r'));\n\t\t\t}\n\t}\n```"}, {"BodyText": "While the code logs a bad access attempt, it logs the user supplied name for the file, not the canonicalized file name. An attacker can obscure their target by giving the script the name of a link to the file they are attempting to access. Also note this code contains a race condition between the is_link() and readlink() functions (CWE-363)."}]}], "ObservedExamples": [{"Reference": "CVE-2002-0725", "Description": "Attacker performs malicious actions on a hard link to a file, obscuring the real target file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0725"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "225", "Name": "DEPRECATED: General Information Management Problems", "Abstraction": "Base", "Structure": "Simple", "Status": "Deprecated", "Description": "This weakness can be found at CWE-199.", "MappingNotes": {"Usage": "Prohibited", "Rationale": "This CWE has been deprecated.", "Comments": "See description and name for possible suggestions of other CWEs to consider.", "Reasons": ["Deprecated"]}}
{"ID": "226", "Name": "Sensitive Information in Resource Not Removed Before Reuse", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product releases a resource such as memory or a file so that it can be made available for reuse, but it does not clear or \"zeroize\" the information contained in the resource before the product performs a critical state transition or makes the resource available for reuse by other entities.", "ExtendedDescription": "\n\nWhen resources are released, they can be made available for reuse. For example, after memory is de-allocated, an operating system may make the memory available to another process, or disk space may be reallocated when a file is deleted. As removing information requires time and additional resources, operating systems do not usually clear the previously written information.\n\n\nEven when the resource is reused by the same process, this weakness can arise when new data is not as large as the old data, which leaves portions of the old data still available. Equivalent errors can occur in other situations where the length of data is variable but the associated data structure is not. If memory is not cleared after use, the information may be read by less trustworthy parties when the memory is reallocated.\n\n\nThis weakness can apply in hardware, such as when a device or system switches between power, sleep, or debug states during normal operation, or when execution changes to different users or privilege levels.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "459", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "212", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "201", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"]}], "DetectionMethods": [{"Method": "Manual Analysis", "Description": "Write a known pattern into each sensitive location. Trigger the release of the resource or cause the desired state transition to occur. Read data back from the sensitive locations. If the reads are successful, and the data is the same as the pattern that was originally written, the test fails and the product needs to be fixed. Note that this test can likely be automated.", "Effectiveness": "High"}, {"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "During critical state transitions, information not needed in the next state should be removed or overwritten with fixed patterns (such as all 0's) or random data, before the transition to the next state.", "Effectiveness": "High"}, {"Phase": ["Architecture and Design", "Implementation"], "Description": "When releasing, de-allocating, or deleting a resource, overwrite its data and relevant metadata with fixed patterns or random data. Be cautious about complex resource types whose underlying representation might be non-contiguous or change at a low level, such as how a file might be split into different chunks on a file system, even though \"logical\" file positions are contiguous at the application layer. Such resource types might require invocation of special modes or APIs to tell the underlying operating system to perform the necessary clearing, such as SDelete (Secure Delete) on Windows, although the appropriate functionality might not be available at the application layer.", "Effectiveness": "High"}], "DemonstrativeExamples": [{"ID": "DX-147", "Entries": [{"IntroText": "This example shows how an attacker can take advantage of an incorrect state transition."}, {"BodyText": "Suppose a device is transitioning from state A to state B. During state A, it can read certain private keys from the hidden fuses that are only accessible in state A but not in state B. The device reads the keys, performs operations using those keys, then transitions to state B, where those private keys should no longer be accessible."}, {"Nature": "Bad", "ExampleCode": "During the transition from A to B, the device does not scrub the memory."}, {"BodyText": "After the transition to state B, even though the private keys are no longer accessible directly from the fuses in state B, they can be accessed indirectly by reading the memory that contains the private keys."}, {"Nature": "Good", "ExampleCode": "For transition from state A to state B, remove information which should not be available once the transition is complete."}]}, {"ID": "DX-148", "Entries": [{"IntroText": "The following code calls realloc() on a buffer containing sensitive data:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tcleartext_buffer = get_secret();...\n\tcleartext_buffer = realloc(cleartext_buffer, 1024);\n\t...\n\tscrub_memory(cleartext_buffer, 1024);\n```"}, {"BodyText": "There is an attempt to scrub the sensitive data from memory, but realloc() is used, so it could return a pointer to a different part of memory. The memory that was originally allocated for cleartext_buffer could still contain an uncleared copy of the data."}]}, {"Entries": [{"IntroText": "The following example code is excerpted from the AES wrapper/interface, aes0_wrapper, module of one of the AES engines (AES0) in the Hack@DAC'21 buggy OpenPiton System-on-Chip (SoC). Note that this SoC contains three distinct AES engines. Within this wrapper module, four 32-bit registers are utilized to store the message intended for encryption, referred to as p_c[i]. Using the AXI Lite interface, these registers are filled with the 128-bit message to be encrypted."}, {"Nature": "Bad", "Language": "Verilog", "ExampleCode": "module aes0_wrapper #(...)(...);\n ...\n always @(posedge clk_i)\n\n```\n\t begin\n\t\t if(~(rst_ni && ~rst_1)) //clear p_c[i] at reset\n\t\t\t begin\n\t\t\t\t start <= 0;\n\t\t\t\t p_c[0] <= 0;\n\t\t\t\t p_c[1] <= 0;\n\t\t\t\t p_c[2] <= 0;\n\t\t\t\t p_c[3] <= 0;\n\t\t\t\t ...\n\t\t\t end\n\t\t else if(en && we)\n\t\t\t case(address[8:3])\n\t\t\t\t 0:\n\t\t\t\t\t start <= reglk_ctrl_i[1] ? start : wdata[0];\n\t\t\t\t 1:\n```\np_c[3] <= reglk_ctrl_i[3] ? p_c[3] : wdata[31:0];** \n\t\t\t\t\t 2:\n\t\t\t\t\n\t\t\t\t```\n```\np_c[2] <= reglk_ctrl_i[3] ? p_c[2] : wdata[31:0];** \n\t\t\t\t\t 3:\n\t\t\t\t\n\t\t\t\t```\n```\np_c[1] <= reglk_ctrl_i[3] ? p_c[1] : wdata[31:0];** \n\t\t\t\t\t 4:\n\t\t\t\t\n\t\t\t\t```\n```\np_c[0] <= reglk_ctrl_i[3] ? p_c[0] : wdata[31:0];** \n\t\t\t\t\t ...\n\t\t\t\t endcase\n\t\t\t end // always @ (posedge wb_clk_i)\n\t\t endmodule"}, {"BodyText": "The above code snippet [REF-1402] illustrates an instance of a vulnerable implementation of the AES wrapper module, where p_c[i] registers are cleared at reset. Otherwise, p_c[i]registers either maintain their old values (if reglk_ctrl_i[3]is true) or get filled through the AXI signal wdata. Note that p_c[i]registers can be read through the AXI Lite interface (not shown in snippet). However, p_c[i] registers are never cleared after their usage once the AES engine has completed the encryption process of the message. In a multi-user or multi-process environment, not clearing registers may result in the attacker process accessing data left by the victim, leading to data leakage or unintentional information disclosure.\n\n\nTo fix this issue, it is essential to ensure that these internal registers are cleared in a timely manner after their usage, i.e., the encryption process is complete. This is illustrated below by monitoring the assertion of the cipher text valid signal, ct_valid [REF-1403]."}, {"Nature": "Good", "Language": "Verilog", "ExampleCode": "module aes0_wrapper #(...)(...);\n ...\n always @(posedge clk_i)\n\n```\n\t begin\n\t\t if(~(rst_ni && ~rst_1)) //clear p_c[i] at reset\n\t\t\t ...\n```\nelse if(ct_valid) //encryption process complete, clear p_c[i]** \n\t\t\n\t\t```\n```\nbegin** \n\t\t\t\n\t\t\t```\n```\np_c[0] <= 0;** \n\t\t\t\t\n\t\t\t\t **p_c[1] <= 0;** \n\t\t\t\t\n\t\t\t\t **p_c[2] <= 0;** \n\t\t\t\t\n\t\t\t\t **p_c[3] <= 0;** \n\t\t\t\t\n\t\t\t **end** \n\t\t\t else if(en && we)\n\t\t\n\t\t```\n\t\t\t case(address[8:3])\n\t\t\t ...\n\t\t\t endcase\n\t\t end // always @ (posedge wb_clk_i)\n\t endmodule\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2019-3733", "Description": "Cryptography library does not clear heap memory before release", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-3733"}, {"Reference": "CVE-2003-0001", "Description": "Ethernet NIC drivers do not pad frames with null bytes, leading to infoleak from malformed packets.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0001"}, {"Reference": "CVE-2003-0291", "Description": "router does not clear information from DHCP packets that have been previously used", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0291"}, {"Reference": "CVE-2005-1406", "Description": "Products do not fully clear memory buffers when less data is stored into the buffer than previous.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1406"}, {"Reference": "CVE-2005-1858", "Description": "Products do not fully clear memory buffers when less data is stored into the buffer than previous.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1858"}, {"Reference": "CVE-2005-3180", "Description": "Products do not fully clear memory buffers when less data is stored into the buffer than previous.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3180"}, {"Reference": "CVE-2005-3276", "Description": "Product does not clear a data structure before writing to part of it, yielding information leak of previously used memory.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3276"}, {"Reference": "CVE-2002-2077", "Description": "Memory not properly cleared before reuse.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2077"}], "FunctionalAreas": ["Memory Management", "Networking"], "AffectedResources": ["Memory"], "RelatedAttackPatterns": ["37"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "There is a close association between CWE-226 and CWE-212. The difference is partially that of perspective. CWE-226 is geared towards the final stage of the resource lifecycle, in which the resource is deleted, eliminated, expired, or otherwise released for reuse. Technically, this involves a transfer to a different control sphere, in which the original contents of the resource are no longer relevant. CWE-212, however, is intended for sensitive data in resources that are intentionally shared with others, so they are still active. This distinction is useful from the perspective of the CWE research view (CWE-1000)."}, {"Type": "Maintenance", "Note": "This entry needs modification to clarify the differences with CWE-212. The description also combines two problems that are distinct from the CWE research perspective: the inadvertent transfer of information to another sphere, and improper initialization/shutdown. Some of the associated taxonomy mappings reflect these different uses."}, {"Type": "Research Gap", "Note": "This is frequently found for network packets, but it can also exist in local memory allocation, files, etc."}], "Top25Examples": [{"Reference": "CVE-2022-0171", "Description": "A flaw was found in the Linux kernel. The existing KVM SEV API has a vulnerability that allows a non-root (host) user-level application to crash the host kernel by creating a confidential guest VM instance in AMD CPU that supports Secure Encrypted Virtualization (SEV)."}, {"Reference": "CVE-2022-22779", "Description": "The Keybase Clients for macOS and Windows before version 5.9.0 fails to properly remove exploded messages initiated by a user. This can occur if the receiving user switches to a non-chat feature and places the host in a sleep state before the sending user explodes the messages. This could lead to disclosure of sensitive information which was meant to be deleted from a user\u2019s filesystem."}, {"Reference": "CVE-2022-23633", "Description": "Action Pack is a framework for handling and responding to web requests. Under certain circumstances response bodies will not be closed. In the event a response is *not* notified of a `close`, `ActionDispatch::Executor` will not know to reset thread local state for the next request. This can lead to data being leaked to subsequent requests.This has been fixed in Rails 7.0.2.1, 6.1.4.5, 6.0.4.5, and 5.2.6.1. Upgrading is highly recommended, but to work around this problem a middleware described in GHSA-wh98-p28r-vrc9 can be used."}]}
{"ID": "228", "Name": "Improper Handling of Syntactically Invalid Structure", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not handle or incorrectly handles input that is not syntactically well-formed with respect to the associated specification.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "703", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "707", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Availability"], "Impact": ["Unexpected State", "DoS: Crash, Exit, or Restart", "DoS: Resource Consumption (CPU)"], "Note": "If an input is syntactically invalid, then processing the input could place the system in an unexpected state that could lead to a crash, consume available system resources or other unintended behaviors."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "DemonstrativeExamples": [{"ID": "DX-110", "Entries": [{"IntroText": "This Android application has registered to handle a URL when sent an intent:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n```\n...* \n\tIntentFilter filter = new IntentFilter(\"com.example.URLHandler.openURL\");\n\tMyReceiver receiver = new MyReceiver();\n\tregisterReceiver(receiver, filter);\n\t\n\t *...* \n\t\n\tpublic class UrlHandlerReceiver extends BroadcastReceiver {\n\t```\n\t\t\t@Override\n\t\t\tpublic void onReceive(Context context, Intent intent) {\n\t\t\t\t\tif(\"com.example.URLHandler.openURL\".equals(intent.getAction())) {\n\t\t\t\t\t\tString URL = intent.getStringExtra(\"URLToOpen\");\n\t\t\t\t\t\tint length = URL.length();\n```\n...* \n\t\t\t\t\t}}}"}, {"BodyText": "The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called."}]}], "ObservedExamples": [{"Reference": "CVE-2004-0270", "Description": "Anti-virus product has assert error when line length is non-numeric.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0270"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry needs more investigation. Public vulnerability research generally focuses on the manipulations that generate invalid structure, instead of the weaknesses that are exploited by those manipulations. For example, a common attack involves making a request that omits a required field, which can trigger a crash in some cases. The crash could be due to a named chain such as CWE-690 (Unchecked Return Value to NULL Pointer Dereference), but public reports rarely cover this aspect of a vulnerability."}, {"Type": "Theoretical", "Note": "The validity of input could be roughly classified along \"syntactic\", \"semantic\", and \"lexical\" dimensions. If the specification requires that an input value should be delimited with the \"[\" and \"]\" square brackets, then any input that does not follow this specification would be syntactically invalid. If the input between the brackets is expected to be a number, but the letters \"aaa\" are provided, then the input is syntactically invalid. If the input is a number and enclosed in brackets, but the number is outside of the allowable range, then it is semantically invalid. The inter-relationships between these properties - and their associated weaknesses- need further exploration."}], "Top25Examples": [{"Reference": "CVE-2022-38381", "Description": "An improper handling of malformed request vulnerability [CWE-228] exists in FortiADC 5.0 all versions, 6.0.0 all versions, 6.1.0 all versions, 6.2.0 through 6.2.3, and 7.0.0 through 7.0.2. This may allow a remote attacker without privileges to bypass some Web Application Firewall (WAF) protection such as the SQL Injection and XSS filters via a malformed HTTP request."}, {"Reference": "CVE-2022-41783", "Description": "tdpServer of TP-Link RE300 V1 improperly processes its input, which may allow an attacker to cause a denial-of-service (DoS) condition of the product's OneMesh function."}, {"Reference": "CVE-2022-38100", "Description": "The CMS800 device fails while attempting to parse malformed network data sent by a threat actor. A threat actor with network access can remotely issue a specially formatted UDP request that will cause the entire device to crash and require a physical reboot. A UDP broadcast request could be sent that causes a mass denial-of-service attack on all CME8000 devices connected to the same network."}]}
{"ID": "229", "Name": "Improper Handling of Values", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not properly handle when the expected number of values for parameters, fields, or arguments is not provided in input, or if those values are undefined.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "228", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "23", "Name": "Relative Path Traversal", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize sequences such as \"..\" that can resolve to a location that is outside of that directory.", "ExtendedDescription": "This allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "22", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "22", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "22", "ViewID": "1340", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Zip Slip", "Description": "\"Zip slip\" is an attack that uses file archives (e.g., ZIP, tar, rar, etc.) that contain filenames with path traversal sequences that cause the files to be written outside of the directory under which the archive is expected to be extracted [REF-1282]. It is most commonly used for relative path traversal (CWE-23) and link following (CWE-59)."}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries."}, {"Scope": ["Integrity"], "Impact": ["Modify Files or Directories"], "Note": "The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication."}, {"Scope": ["Confidentiality"], "Impact": ["Read Files or Directories"], "Note": "The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the product from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the product."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-5.1", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\n\n\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n"}, {"MitigationID": "MIT-20.1", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked.\n\n\nUse a built-in path canonicalization function (such as realpath() in C) that produces the canonical version of the pathname, which effectively removes \"..\" sequences and symbolic links (CWE-23, CWE-59). This includes:\n\n\n  - realpath() in C\n\n  - getCanonicalPath() in Java\n\n  - GetFullPath() in ASP.NET\n\n  - realpath() or abs_path() in Perl\n\n  - realpath() in PHP\n\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following URLs are vulnerable to this attack:"}, {"Nature": "Bad", "ExampleCode": "```\n\thttp://example.com.br/get-files.jsp?file=report.pdf\n\thttp://example.com.br/get-page.php?home=aaa.html\n\thttp://example.com.br/some-page.asp?page=index.html\n```"}, {"BodyText": "A simple way to execute this attack is like this:"}, {"Nature": "Attack", "ExampleCode": "```\n\thttp://example.com.br/get-files?file=../../../../somedir/somefile\n\thttp://example.com.br/../../../../etc/shadow\n\thttp://example.com.br/get-files?file=../../../../etc/passwd\n```"}]}, {"ID": "DX-27", "Entries": [{"IntroText": "The following code could be for a social networking application in which each user's profile information is stored in a separate file. All files are stored in a single directory."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\tmy $dataPath = \"/users/cwe/profiles\";\n\tmy $username = param(\"user\");\n\tmy $profilePath = $dataPath . \"/\" . $username;\n\topen(my $fh, \"<\", $profilePath) || ExitError(\"profile read error: $profilePath\");\n\tprint \"<ul>\\n\";\n\twhile (<$fh>) {\n\t\tprint \"<li>$_</li>\\n\";\n\t}\n\tprint \"</ul>\\n\";\n```"}, {"BodyText": "While the programmer intends to access files such as \"/users/cwe/profiles/alice\" or \"/users/cwe/profiles/bob\", there is no verification of the incoming user parameter. An attacker could provide a string such as:"}, {"Nature": "Attack", "ExampleCode": "```\n\t../../../etc/passwd\n```"}, {"BodyText": "The program would generate a profile pathname like this:"}, {"Nature": "Result", "ExampleCode": "```\n\t/users/cwe/profiles/../../../etc/passwd\n```"}, {"BodyText": "When the file is opened, the operating system resolves the \"../\" during path canonicalization and actually accesses this file:"}, {"Nature": "Result", "ExampleCode": "```\n\t/etc/passwd\n```"}, {"BodyText": "As a result, the attacker could read the entire text of the password file."}, {"BodyText": "Notice how this code also contains an error message information leak (CWE-209) if the user parameter does not produce a file that exists: the full pathname is provided. Because of the lack of output encoding of the file that is retrieved, there might also be a cross-site scripting problem (CWE-79) if profile contains any HTML, but other code would need to be examined."}]}, {"ID": "DX-22", "Entries": [{"IntroText": "The following code demonstrates the unrestricted upload of a file with a Java servlet and a path traversal vulnerability. The action attribute of an HTML form is sending the upload file request to the Java servlet."}, {"Nature": "Good", "Language": "HTML", "ExampleCode": "```\n\t<form action=\"FileUploadServlet\" method=\"post\" enctype=\"multipart/form-data\">\n\tChoose a file to upload:\n\t<input type=\"file\" name=\"filename\"/>\n\t<br/>\n\t<input type=\"submit\" name=\"submit\" value=\"Submit\"/>\n\t</form>\n```"}, {"BodyText": "When submitted the Java servlet's doPost method will receive the request, extract the name of the file from the Http request header, read the file contents from the request and output the file to the local upload directory."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class FileUploadServlet extends HttpServlet {\n\t\t\t...\n\t\t\tprotected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\t\t\t\t\tresponse.setContentType(\"text/html\");\n\t\t\t\t\tPrintWriter out = response.getWriter();\n\t\t\t\t\tString contentType = request.getContentType();\n\t\t\t\t\t// the starting position of the boundary header\n\t\t\t\t\tint ind = contentType.indexOf(\"boundary=\");\n\t\t\t\t\tString boundary = contentType.substring(ind+9);\n\t\t\t\t\tString pLine = new String();\n\t\t\t\t\tString uploadLocation = new String(UPLOAD_DIRECTORY_STRING); //Constant value\n\t\t\t\t\t// verify that content type is multipart form data\n\t\t\t\t\tif (contentType != null && contentType.indexOf(\"multipart/form-data\") != -1) {\n\t\t\t\t\t\t\t// extract the filename from the Http header\n\t\t\t\t\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(request.getInputStream()));\n\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\tpLine = br.readLine();\n\t\t\t\t\t\t\tString filename = pLine.substring(pLine.lastIndexOf(\"\\\\\"), pLine.lastIndexOf(\"\\\"\"));\n\t\t\t\t\t\t\t...\n\t\t\t\t\t\t\t// output the file to the local upload directory\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tBufferedWriter bw = new BufferedWriter(new FileWriter(uploadLocation+filename, true));\n\t\t\t\t\t\t\t\t\tfor (String line; (line=br.readLine())!=null; ) {\n\t\t\t\t\t\t\t\t\t\tif (line.indexOf(boundary) == -1) {\n\t\t\t\t\t\t\t\t\t\t\tbw.write(line);\n\t\t\t\t\t\t\t\t\t\t\tbw.newLine();\n\t\t\t\t\t\t\t\t\t\t\tbw.flush();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} //end of for loop\n\t\t\t\t\t\t\t\t\tbw.close();\n\t\t\t\t\t\t\t} catch (IOException ex) {...}\n\t\t\t\t\t\t\t// output successful upload response HTML page\n\t\t\t\t\t}\n\t\t\t\t\t// output unsuccessful upload response HTML page\n\t\t\t\t\telse\n\t\t\t\t\t{...}\n\t\t\t}\n\t\t\t\t...\n\t}\n```"}, {"BodyText": "This code does not perform a check on the type of the file being uploaded (CWE-434). This could allow an attacker to upload any executable file or other file with malicious code."}, {"BodyText": "Additionally, the creation of the BufferedWriter object is subject to relative path traversal (CWE-23). Since the code does not check the filename that is provided in the header, an attacker can use \"../\" sequences to write to files outside of the intended directory. Depending on the executing environment, the attacker may be able to specify arbitrary files to write to, leading to a wide variety of consequences, from code execution, XSS (CWE-79), or system crash."}]}], "ObservedExamples": [{"Reference": "CVE-2024-37032", "Description": "Large language model (LLM) management tool does not validate the format of a digest value (CWE-1287) from a private, untrusted model registry, enabling relative path traversal (CWE-23), a.k.a. Probllama", "Link": "https://www.cve.org/CVERecord?id=CVE-2024-37032"}, {"Reference": "CVE-2022-45918", "Description": "Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-45918"}, {"Reference": "CVE-2019-20916", "Description": "Python package manager does not correctly restrict the filename specified in a Content-Disposition header, allowing arbitrary file read using path traversal sequences such as \"../\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-20916"}, {"Reference": "CVE-2022-24877", "Description": "directory traversal in Go-based Kubernetes operator app allows accessing data from the controller's pod file system via ../ sequences in a yaml file", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-24877"}, {"Reference": "CVE-2020-4053", "Description": "a Kubernetes package manager written in Go allows malicious plugins to inject path traversal sequences into a plugin archive (\"Zip slip\") to copy a file outside the intended directory", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-4053"}, {"Reference": "CVE-2021-21972", "Description": "Chain: Cloud computing virtualization platform does not require authentication for upload of a tar format file (CWE-306), then uses .. path traversal sequences (CWE-23) in the file to access unexpected files, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-21972"}, {"Reference": "CVE-2019-10743", "Description": "Go-based archive library allows extraction of files to locations outside of the target folder with \"../\" path traversal sequences in filenames in a zip file, aka \"Zip Slip\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-10743"}, {"Reference": "CVE-2002-0298", "Description": "Server allows remote attackers to cause a denial of service via certain HTTP GET requests containing a %2e%2e (encoded dot-dot), several \"/../\" sequences, or several \"../\" in a URI.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0298"}, {"Reference": "CVE-2002-0661", "Description": "\"\\\" not in denylist for web server, allowing path traversal attacks when the server is run in Windows and other OSes.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0661"}, {"Reference": "CVE-2002-0946", "Description": "Arbitrary files may be read files via ..\\ (dot dot) sequences in an HTTP request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0946"}, {"Reference": "CVE-2002-1042", "Description": "Directory traversal vulnerability in search engine for web server allows remote attackers to read arbitrary files via \"..\\\" sequences in queries.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1042"}, {"Reference": "CVE-2002-1209", "Description": "Directory traversal vulnerability in FTP server allows remote attackers to read arbitrary files via \"..\\\" sequences in a GET request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1209"}, {"Reference": "CVE-2002-1178", "Description": "Directory traversal vulnerability in servlet allows remote attackers to execute arbitrary commands via \"..\\\" sequences in an HTTP request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1178"}, {"Reference": "CVE-2002-1987", "Description": "Protection mechanism checks for \"/..\" but doesn't account for Windows-specific \"\\..\" allowing read of arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1987"}, {"Reference": "CVE-2005-2142", "Description": "Directory traversal vulnerability in FTP server allows remote authenticated attackers to list arbitrary directories via a \"\\..\" sequence in an LS command.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2142"}, {"Reference": "CVE-2002-0160", "Description": "The administration function in Access Control Server allows remote attackers to read HTML, Java class, and image files outside the web root via a \"..\\..\" sequence in the URL to port 2002.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0160"}, {"Reference": "CVE-2001-0467", "Description": "\"\\...\" in web server", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0467"}, {"Reference": "CVE-2001-0963", "Description": "\"...\" in cd command in FTP server", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0963"}, {"Reference": "CVE-2001-1193", "Description": "\"...\" in cd command in FTP server", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1193"}, {"Reference": "CVE-2001-1131", "Description": "\"...\" in cd command in FTP server", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1131"}, {"Reference": "CVE-2001-0480", "Description": "read of arbitrary files and directories using GET or CD with \"...\" in Windows-based FTP server.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0480"}, {"Reference": "CVE-2002-0288", "Description": "read files using \".\" and Unicode-encoded \"/\" or \"\\\" characters in the URL.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0288"}, {"Reference": "CVE-2003-0313", "Description": "Directory listing of web server using \"...\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0313"}, {"Reference": "CVE-2005-1658", "Description": "Triple dot", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1658"}, {"Reference": "CVE-2000-0240", "Description": "read files via \"/........../\" in URL", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0240"}, {"Reference": "CVE-2000-0773", "Description": "read files via \"....\" in web server", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0773"}, {"Reference": "CVE-1999-1082", "Description": "read files via \"......\" in web server (doubled triple dot?)", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1082"}, {"Reference": "CVE-2004-2121", "Description": "read files via \"......\" in web server (doubled triple dot?)", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2121"}, {"Reference": "CVE-2001-0491", "Description": "multiple attacks using \"..\", \"...\", and \"....\" in different commands", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0491"}, {"Reference": "CVE-2001-0615", "Description": "\"...\" or \"....\" in chat server", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0615"}, {"Reference": "CVE-2005-2169", "Description": "chain: \".../...//\" bypasses protection mechanism using regexp's that remove \"../\" resulting in collapse into an unsafe value \"../\" (CWE-182) and resultant path traversal.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2169"}, {"Reference": "CVE-2005-0202", "Description": "\".../....///\" bypasses regexp's that remove \"./\" and \"../\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0202"}, {"Reference": "CVE-2004-1670", "Description": "Mail server allows remote attackers to create arbitrary directories via a \"..\" or rename arbitrary files via a \"....//\" in user supplied parameters.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1670"}], "RelatedAttackPatterns": ["139", "76"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-20719", "Description": "Multiple vulnerabilities in the Cisco IOx application hosting environment on multiple Cisco platforms could allow an attacker to inject arbitrary commands into the underlying host operating system, execute arbitrary code on the underlying host operating system, install applications without being authenticated, or conduct a cross-site scripting (XSS) attack against a user of the affected software. For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2021-32964", "Description": "The AGG Software Web Server version 4.0.40.1014 and prior is vulnerable to a path traversal attack, which may allow an attacker to read arbitrary files from the file system."}, {"Reference": "CVE-2021-38399", "Description": "Honeywell Experion PKS C200, C200E, C300, and ACE controllers are vulnerable to relative path traversal, which may allow an attacker access to unauthorized files and directories."}, {"Reference": "CVE-2021-41031", "Description": "A relative path traversal vulnerability [CWE-23] in FortiClient for Windows versions 7.0.2 and prior, 6.4.6 and prior and 6.2.9 and below may allow a local unprivileged attacker to escalate their privileges to SYSTEM via the named pipe responsible for FortiESNAC service."}, {"Reference": "CVE-2022-1648", "Description": "Pandora FMS v7.0NG.760 and below allows a relative path traversal in File Manager where a privileged user could upload a .php file outside the intended images directory which is restricted to execute the .php file. The impact could lead to a Remote Code Execution with running application privilege."}, {"Reference": "CVE-2022-1661", "Description": "The affected products are vulnerable to directory traversal, which may allow an attacker to obtain arbitrary operating system files."}, {"Reference": "CVE-2022-2106", "Description": "Elcomplus SmartICS v2.3.4.0 does not validate the filenames sufficiently, which enables authenticated administrator-level users to perform path traversal attacks and specify arbitrary files."}, {"Reference": "CVE-2022-2120", "Description": "OFFIS DCMTK's (All versions prior to 3.6.7) service class user (SCU) is vulnerable to relative path traversal, allowing an attacker to write DICOM files into arbitrary directories under controlled names. This could allow remote code execution."}, {"Reference": "CVE-2022-23531", "Description": "GuardDog is a CLI tool to identify malicious PyPI packages. Versions prior to 0.1.5 are vulnerable to Relative Path Traversal when scanning a specially-crafted local PyPI package. Running GuardDog against a specially-crafted package can allow an attacker to write an arbitrary file on the machine where GuardDog is executed due to a path traversal vulnerability when extracting the .tar.gz file of the package being scanned, which exists by design in the tarfile.TarFile.extractall function. This issue is patched in version 0.1.5."}, {"Reference": "CVE-2022-23732", "Description": "A path traversal vulnerability was identified in GitHub Enterprise Server management console that allowed the bypass of CSRF protections. This could potentially lead to privilege escalation. To exploit this vulnerability, an attacker would need to target a user that was actively logged into the management console. This vulnerability affected all versions of GitHub Enterprise Server prior to 3.5 and was fixed in versions 3.1.19, 3.2.11, 3.3.6, 3.4.1. This vulnerability was reported via the GitHub Bug Bounty program."}, {"Reference": "CVE-2022-23854", "Description": " AVEVA InTouch Access Anywhere versions 2020 R2 and older are vulnerable to a path traversal exploit that could allow an unauthenticated user with network access to read files on the system outside of the secure gateway web server. "}, {"Reference": "CVE-2022-25856", "Description": "The package github.com/argoproj/argo-events/sensors/artifacts before 1.7.1 are vulnerable to Directory Traversal in the (g *GitArtifactReader).Read() API in git.go. This could allow arbitrary file reads if the GitArtifactReader is provided a pathname containing a symbolic link or an implicit directory name such as ..."}, {"Reference": "CVE-2022-2712", "Description": "In Eclipse GlassFish versions 5.1.0 to 6.2.5, there is a vulnerability in relative path traversal because it does not filter request path starting with './'. Successful exploitation could allow an remote unauthenticated attacker to access critical data, such as configuration files and deployed application source code."}, {"Reference": "CVE-2022-28814", "Description": "Carlo Gavazzi UWP3.0 in multiple versions and CPY Car Park Server in Version 2.8.3 was discovered to be vulnerable to a relative path traversal vulnerability which enables remote attackers to read arbitrary files and gain full control of the device."}, {"Reference": "CVE-2022-29062", "Description": "Multiple relative path traversal vulnerabilities [CWE-23] in Fortinet FortiSOAR before 7.2.1 allows an authenticated attacker to write to the underlying filesystem with nginx permissions via crafted HTTP requests."}, {"Reference": "CVE-2022-2922", "Description": "Relative Path Traversal in GitHub repository dnnsoftware/dnn.platform prior to 9.11.0."}, {"Reference": "CVE-2022-30299", "Description": "A path traversal vulnerability [CWE-23] in the API of FortiWeb 7.0.0 through 7.0.1, 6.3.0 through 6.3.19, 6.4 all versions, 6.2 all versions, 6.1 all versions, 6.0 all versions may allow an authenticated attacker to retrieve specific parts of files from the underlying file system via specially crafted web requests."}, {"Reference": "CVE-2022-30300", "Description": "A relative path traversal vulnerability [CWE-23] in FortiWeb 7.0.0 through 7.0.1, 6.3.6 through 6.3.18, 6.4 all versions may allow an authenticated attacker to obtain unauthorized access to files and data via specifically crafted HTTP GET requests."}, {"Reference": "CVE-2022-30302", "Description": "Multiple relative path traversal vulnerabilities [CWE-23] in FortiDeceptor management interface 1.0.0 through 3.2.x, 3.3.0 through 3.3.2, 4.0.0 through 4.0.1 may allow a remote and authenticated attacker to retrieve and delete arbitrary files from the underlying filesystem via specially crafted web requests."}, {"Reference": "CVE-2022-31582", "Description": "The shaolo1/VideoServer repository through 2019-09-21 on GitHub allows absolute path traversal because the Flask send_file function is used unsafely."}, {"Reference": "CVE-2022-32199", "Description": "db_convert.php in ScriptCase through 9.9.008 is vulnerable to Arbitrary File Deletion by an admin via a directory traversal sequence in the file parameter."}, {"Reference": "CVE-2022-32287", "Description": "A relative path traversal vulnerability in a FileUtil class used by the PEAR management component of Apache UIMA allows an attacker to create files outside the designated target directory using carefully crafted ZIP entry names. This issue affects Apache UIMA Apache UIMA version 3.3.0 and prior versions. Note that PEAR files should never be installed into an UIMA installation from untrusted sources because PEAR archives are executable plugins that will be able to perform any actions with the same privileges as the host Java Virtual Machine."}, {"Reference": "CVE-2022-34179", "Description": "Jenkins Embeddable Build Status Plugin 2.0.3 and earlier allows specifying a `style` query parameter that is used to choose a different SVG image style without restricting possible values, resulting in a relative path traversal vulnerability that allows attackers without Overall/Read permission to specify paths to other SVG images on the Jenkins controller file system."}, {"Reference": "CVE-2022-34378", "Description": "Dell PowerScale OneFS, versions 9.0.0 up to and including 9.1.0.20, 9.2.1.13, 9.3.0.6, and 9.4.0.3, contain a relative path traversal vulnerability. A low privileged local attacker could potentially exploit this vulnerability, leading to denial of service."}, {"Reference": "CVE-2022-34836", "Description": "Relative Path Traversal vulnerability in ABB Zenon 8.20 allows the user to access files on the Zenon system and user also can add own log messages and e.g., flood the log entries. An attacker who successfully exploit the vulnerability could access the Zenon runtime activities such as the start and stop of various activity and the last error code etc."}, {"Reference": "CVE-2022-35861", "Description": "pyenv 1.2.24 through 2.3.2 allows local users to gain privileges via a .python-version file in the current working directory. An attacker can craft a Python version string in .python-version to execute shims under their control. (Shims are executables that pass a command along to a specific version of pyenv. The version string is used to construct the path to the command, and there is no validation of whether the version specified is a valid version. Thus, relative path traversal can occur.)"}, {"Reference": "CVE-2022-40713", "Description": "An issue was discovered in NOKIA 1350OMS R14.2. Multiple Relative Path Traversal issues exist in different specific endpoints via the file parameter, allowing a remote authenticated attacker to read files on the filesystem arbitrarily."}, {"Reference": "CVE-2022-41335", "Description": "A relative path traversal vulnerability [CWE-23] in Fortinet FortiOS version 7.2.0 through 7.2.2, 7.0.0 through 7.0.8 and before 6.4.10, FortiProxy version 7.2.0 through 7.2.1, 7.0.0 through 7.0.7 and before 2.0.10, FortiSwitchManager 7.2.0 and before 7.0.0 allows an authenticated attacker to read and write files on the underlying Linux system via crafted HTTP requests."}, {"Reference": "CVE-2022-42188", "Description": "In Lavalite 9.0.0, the XSRF-TOKEN cookie is vulnerable to path traversal attacks, enabling read access to arbitrary files on the server."}, {"Reference": "CVE-2022-42476", "Description": "A relative path traversal vulnerability [CWE-23] in Fortinet FortiOS version 7.2.0 through 7.2.2, 7.0.0 through 7.0.8 and before 6.4.11, FortiProxy version 7.2.0 through 7.2.2 and 7.0.0 through 7.0.8 allows privileged VDOM administrators to escalate their privileges to super admin of the box via crafted CLI requests."}, {"Reference": "CVE-2022-43753", "Description": "A Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal') vulnerability in spacewalk/Uyuni of SUSE Linux Enterprise Module for SUSE Manager Server 4.2, SUSE Linux Enterprise Module for SUSE Manager Server 4.3, SUSE Manager Server 4.2 allows remote attackers to read files available to the user running the process, typically tomcat. This issue affects: SUSE Linux Enterprise Module for SUSE Manager Server 4.2 hub-xmlrpc-api-0.7-150300.3.9.2, inter-server-sync-0.2.4-150300.8.25.2, locale-formula-0.3-150300.3.3.2, py27-compat-salt-3000.3-150300.7.7.26.2, python-urlgrabber-3.10.2.1py2_3-150300.3.3.2, spacecmd-4.2.20-150300.4.30.2, spacewalk-backend-4.2.25-150300.4.32.4, spacewalk-client-tools-4.2.21-150300.4.27.3, spacewalk-java-4.2.43-150300.3.48.2, spacewalk-utils-4.2.18-150300.3.21.2, spacewalk-web-4.2.30-150300.3.30.3, susemanager-4.2.38-150300.3.44.3, susemanager-doc-indexes-4.2-150300.12.36.3, susemanager-docs_en-4.2-150300.12.36.2, susemanager-schema-4.2.25-150300.3.30.3, susemanager-sls versions prior to 4.2.28. SUSE Linux Enterprise Module for SUSE Manager Server 4.3 spacewalk-java versions prior to 4.3.39. SUSE Manager Server 4.2 release-notes-susemanager versions prior to 4.2.10."}, {"Reference": "CVE-2022-29464", "Description": "Certain WSO2 products allow unrestricted file upload with resultant remote code execution. The attacker must use a /fileupload endpoint with a Content-Disposition directory traversal sequence to reach a directory under the web root, such as a ../../../../repository/deployment/server/webapps directory. This affects WSO2 API Manager 2.2.0 up to 4.0.0, WSO2 Identity Server 5.2.0 up to 5.11.0, WSO2 Identity Server Analytics 5.4.0, 5.4.1, 5.5.0 and 5.6.0, WSO2 Identity Server as Key Manager 5.3.0 up to 5.11.0, WSO2 Enterprise Integrator 6.2.0 up to 6.6.0, WSO2 Open Banking AM 1.4.0 up to 2.0.0 and WSO2 Open Banking KM 1.4.0, up to 2.0.0."}, {"Reference": "CVE-2022-37042", "Description": "Zimbra Collaboration Suite (ZCS) 8.8.15 and 9.0 has mboximport functionality that receives a ZIP archive and extracts files from it. By bypassing authentication (i.e., not having an authtoken), an attacker can upload arbitrary files to the system, leading to directory traversal and remote code execution. NOTE: this issue exists because of an incomplete fix for CVE-2022-27925."}, {"Reference": "CVE-2021-21972", "Description": "The vSphere Client (HTML5) contains a remote code execution vulnerability in a vCenter Server plugin. A malicious actor with network access to port 443 may exploit this issue to execute commands with unrestricted privileges on the underlying operating system that hosts vCenter Server. This affects VMware vCenter Server (7.x before 7.0 U1c, 6.7 before 6.7 U3l and 6.5 before 6.5 U3n) and VMware Cloud Foundation (4.x before 4.2 and 3.x before 3.10.1.2)."}, {"Reference": "CVE-2021-22005", "Description": "The vCenter Server contains an arbitrary file upload vulnerability in the Analytics service. A malicious actor with network access to port 443 on vCenter Server may exploit this issue to execute code on vCenter Server by uploading a specially crafted file."}, {"Reference": "CVE-2021-38163", "Description": "SAP NetWeaver (Visual Composer 7.0 RT) versions - 7.30, 7.31, 7.40, 7.50, without restriction, an attacker authenticated as a non-administrative user can upload a malicious file over a network and trigger its processing, which is capable of running operating system commands with the privilege of the Java Server process. These commands can be used to read or modify any information on the server or shut the server down making it unavailable. "}, {"Reference": "CVE-2022-26019", "Description": "Improper access control vulnerability in pfSense CE and pfSense Plus (pfSense CE software versions prior to 2.6.0 and pfSense Plus software versions prior to 22.01) allows a remote attacker with the privilege to change NTP GPS settings to rewrite existing files on the file system, which may result in arbitrary command execution."}, {"Reference": "CVE-2021-3856", "Description": "ClassLoaderTheme and ClasspathThemeResourceProviderFactory allows reading any file available as a resource to the classloader. By sending requests for theme resources with a relative path from an external HTTP client, the client will receive the content of random files if available."}, {"Reference": "CVE-2022-30804", "Description": "elitecms v1.01 is vulnerable to Delete any file via /admin/delete_image.php?file=."}, {"Reference": "CVE-2022-38258", "Description": "A local file inclusion (LFI) vulnerability in D-Link DIR 819 v1.06 allows attackers to cause a Denial of Service (DoS) or access sensitive server information via manipulation of the getpage parameter in a crafted web request."}, {"Reference": "CVE-2022-22279", "Description": "A post-authentication arbitrary file read vulnerability impacting end-of-life Secure Remote Access (SRA) products and older firmware versions of Secure Mobile Access (SMA) 100 series products, specifically the SRA appliances running all 8.x, 9.0.0.5-19sv and earlier versions and Secure Mobile Access (SMA) 100 series products running older firmware 9.0.0.9-26sv and earlier versions"}, {"Reference": "CVE-2022-23602", "Description": "Nimforum is a lightweight alternative to Discourse written in Nim. In versions prior to 2.2.0 any forum user can create a new thread/post with an include referencing a file local to the host operating system. Nimforum will render the file if able. This can also be done silently by using NimForum's post \"preview\" endpoint. Even if NimForum is running as a non-critical user, the forum.json secrets can be stolen. Version 2.2.0 of NimForum includes patches for this vulnerability. Users are advised to upgrade as soon as is possible. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-38638", "Description": "Casdoor v1.97.3 was discovered to contain an arbitrary file write vulnerability via the fullFilePath parameter at /api/upload-resource."}, {"Reference": "CVE-2022-20913", "Description": "A vulnerability in Cisco Nexus Dashboard could allow an authenticated, remote attacker to write arbitrary files on an affected device. This vulnerability is due to insufficient input validation in the web-based management interface of Cisco Nexus Dashboard. An attacker with Administrator credentials could exploit this vulnerability by uploading a crafted file. A successful exploit could allow the attacker to overwrite arbitrary files on an affected device."}, {"Reference": "CVE-2022-28741", "Description": "aEnrich a+HRD 5.x Learning Management Key Performance Indicator System has a local file inclusion (LFI) vulnerability that occurs due to missing input validation in v5.x"}, {"Reference": "CVE-2022-42977", "Description": "The Netic User Export add-on before 1.3.5 for Atlassian Confluence has the functionality to generate a list of users in the application, and export it. During export, the HTTP request has a fileName parameter that accepts any file on the system (e.g., an SSH private key) to be downloaded."}]}
{"ID": "230", "Name": "Improper Handling of Missing Values", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not handle or incorrectly handles when a parameter, field, or argument name is specified, but the associated value is missing, i.e. it is empty, blank, or null.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "229", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "DemonstrativeExamples": [{"ID": "DX-110", "Entries": [{"IntroText": "This Android application has registered to handle a URL when sent an intent:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n```\n...* \n\tIntentFilter filter = new IntentFilter(\"com.example.URLHandler.openURL\");\n\tMyReceiver receiver = new MyReceiver();\n\tregisterReceiver(receiver, filter);\n\t\n\t *...* \n\t\n\tpublic class UrlHandlerReceiver extends BroadcastReceiver {\n\t```\n\t\t\t@Override\n\t\t\tpublic void onReceive(Context context, Intent intent) {\n\t\t\t\t\tif(\"com.example.URLHandler.openURL\".equals(intent.getAction())) {\n\t\t\t\t\t\tString URL = intent.getStringExtra(\"URLToOpen\");\n\t\t\t\t\t\tint length = URL.length();\n```\n...* \n\t\t\t\t\t}}}"}, {"BodyText": "The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called."}]}], "ObservedExamples": [{"Reference": "CVE-2002-0422", "Description": "Blank Host header triggers resultant infoleak.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0422"}, {"Reference": "CVE-2000-1006", "Description": "Blank \"charset\" attribute in MIME header triggers crash.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1006"}, {"Reference": "CVE-2004-1504", "Description": "Blank parameter causes external error infoleak.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1504"}, {"Reference": "CVE-2005-2053", "Description": "Blank parameter causes external error infoleak.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2053"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "Some \"crash by port scan\" bugs are probably due to this, but lack of diagnosis makes it difficult to be certain."}], "Top25Examples": [{"Reference": "CVE-2022-22562", "Description": "Dell PowerScale OneFS, versions 8.2.0-9.3.0, contain a improper handling of missing values exploit. An unauthenticated network attacker could potentially exploit this denial-of-service vulnerability."}, {"Reference": "CVE-2021-40866", "Description": "Certain NETGEAR smart switches are affected by a remote admin password change by an unauthenticated attacker via the (disabled by default) /sqfs/bin/sccd daemon, which fails to check authentication when the authentication TLV is missing from a received NSDP packet. This affects GC108P before 1.0.8.2, GC108PP before 1.0.8.2, GS108Tv3 before 7.0.7.2, GS110TPP before 7.0.7.2, GS110TPv3 before 7.0.7.2, GS110TUP before 1.0.5.3, GS308T before 1.0.3.2, GS310TP before 1.0.3.2, GS710TUP before 1.0.5.3, GS716TP before 1.0.4.2, GS716TPP before 1.0.4.2, GS724TPP before 2.0.6.3, GS724TPv2 before 2.0.6.3, GS728TPPv2 before 6.0.8.2, GS728TPv2 before 6.0.8.2, GS750E before 1.0.1.10, GS752TPP before 6.0.8.2, GS752TPv2 before 6.0.8.2, MS510TXM before 1.0.4.2, and MS510TXUP before 1.0.4.2."}, {"Reference": "CVE-2022-24882", "Description": "FreeRDP is a free implementation of the Remote Desktop Protocol (RDP). In versions prior to 2.7.0, NT LAN Manager (NTLM) authentication does not properly abort when someone provides and empty password value. This issue affects FreeRDP based RDP Server implementations. RDP clients are not affected. The vulnerability is patched in FreeRDP 2.7.0. There are currently no known workarounds."}, {"Reference": "CVE-2022-25226", "Description": "ThinVNC version 1.0b1 allows an unauthenticated user to bypass the authentication process via 'http://thin-vnc:8080/cmd?cmd=connect' by obtaining a valid SID without any kind of authentication. It is possible to achieve code execution on the server by sending keyboard or mouse events to the server."}, {"Reference": "CVE-2022-47003", "Description": "A vulnerability in the Remember Me function of Mura CMS before v10.0.580 allows attackers to bypass authentication via a crafted web request."}, {"Reference": "CVE-2022-41891", "Description": "TensorFlow is an open source platform for machine learning. If `tf.raw_ops.TensorListConcat` is given `element_shape=[]`, it results segmentation fault which can be used to trigger a denial of service attack. We have patched the issue in GitHub commit fc33f3dc4c14051a83eec6535b608abe1d355fde. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range."}, {"Reference": "CVE-2022-41898", "Description": "TensorFlow is an open source platform for machine learning. If `SparseFillEmptyRowsGrad` is given empty inputs, TensorFlow will crash. We have patched the issue in GitHub commit af4a6a3c8b95022c351edae94560acc61253a1b8. The fix will be included in TensorFlow 2.11. We will also cherrypick this commit on TensorFlow 2.10.1, 2.9.3, and TensorFlow 2.8.4, as these are also affected and still in supported range."}, {"Reference": "CVE-2022-29201", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, the implementation of `tf.raw_ops.QuantizedConv2D` does not fully validate the input arguments. In this case, references get bound to `nullptr` for each argument that is empty. Versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4 contain a patch for this issue."}]}
{"ID": "231", "Name": "Improper Handling of Extra Values", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not handle or incorrectly handles when more values are provided than expected.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "229", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "120", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "This typically occurs in situations when only one value is expected."}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This can overlap buffer overflows."}]}
{"ID": "232", "Name": "Improper Handling of Undefined Values", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not handle or incorrectly handles when a value is not defined or supported for the associated parameter, field, or argument name.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "229", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In this example, an address parameter is read and trimmed of whitespace."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tString address = request.getParameter(\"address\");\n\taddress = address.trim();\n\tString updateString = \"UPDATE shippingInfo SET address='?' WHERE email='cwe@example.com'\";\n\temailAddress = con.prepareStatement(updateString);\n\temailAddress.setString(1, address);\n```"}, {"BodyText": "If the value of the address parameter is null (undefined), the servlet will throw a NullPointerException when the trim() is attempted."}]}], "ObservedExamples": [{"Reference": "CVE-2000-1003", "Description": "Client crash when server returns unknown driver type.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1003"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "233", "Name": "Improper Handling of Parameters", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "228", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "DetectionMethods": [{"DetectionMethodID": "DM-13", "Method": "Fuzzing", "Description": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.", "Effectiveness": "High"}, {"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "DemonstrativeExamples": [{"ID": "DX-110", "Entries": [{"IntroText": "This Android application has registered to handle a URL when sent an intent:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n```\n...* \n\tIntentFilter filter = new IntentFilter(\"com.example.URLHandler.openURL\");\n\tMyReceiver receiver = new MyReceiver();\n\tregisterReceiver(receiver, filter);\n\t\n\t *...* \n\t\n\tpublic class UrlHandlerReceiver extends BroadcastReceiver {\n\t```\n\t\t\t@Override\n\t\t\tpublic void onReceive(Context context, Intent intent) {\n\t\t\t\t\tif(\"com.example.URLHandler.openURL\".equals(intent.getAction())) {\n\t\t\t\t\t\tString URL = intent.getStringExtra(\"URLToOpen\");\n\t\t\t\t\t\tint length = URL.length();\n```\n...* \n\t\t\t\t\t}}}"}, {"BodyText": "The application assumes the URL will always be included in the intent. When the URL is not present, the call to getStringExtra() will return null, thus causing a null pointer exception when length() is called."}]}], "RelatedAttackPatterns": ["39"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-22792", "Description": "MobiSoft - MobiPlus User Take Over and Improper Handling of url Parameters Attacker can navigate to specific url which will expose all the users and password in clear text. http://IP/MobiPlusWeb/Handlers/MainHandler.ashx?MethodName=GridData&amp;GridName=Users"}, {"Reference": "CVE-2021-45477", "Description": "Improper Handling of Parameters vulnerability in Bordam Information Technologies Library Automation System allows Collect Data as Provided by Users.This issue affects Library Automation System: before 19.2. "}, {"Reference": "CVE-2021-45478", "Description": "Improper Handling of Parameters vulnerability in Bordam Information Technologies Library Automation System allows Collect Data as Provided by Users.This issue affects Library Automation System: before 19.2. "}, {"Reference": "CVE-2021-4105", "Description": "Improper Handling of Parameters vulnerability in BG-TEK COSLAT Firewall allows Remote Code Inclusion.This issue affects COSLAT Firewall: from 5.24.0.R.20180630 before 5.24.0.R.20210727. "}]}
{"ID": "234", "Name": "Failure to Handle Missing Parameter", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "If too few arguments are sent to a function, the function will still pop the expected number of arguments from the stack. Potentially, a variable number of arguments could be exhausted in a function as well.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "233", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability", "Access Control"], "Impact": ["Execute Unauthorized Code or Commands", "Gain Privileges or Assume Identity"], "Note": "There is the potential for arbitrary code execution with privileges of the vulnerable program if function parameter list is exhausted."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "Potentially a program could fail if it needs more arguments then are available."}], "PotentialMitigations": [{"Phase": ["Build and Compilation"], "Description": "This issue can be simply combated with the use of proper build process."}, {"Phase": ["Implementation"], "Description": "Forward declare all functions. This is the recommended solution. Properly forward declaration of all used functions will result in a compiler error if too few arguments are sent to a function."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following example demonstrates the weakness."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tfoo_funct(one, two);\n\tvoid foo_funct(int one, int two, int three) {\n\t\tprintf(\"1) %d\\n2) %d\\n3) %d\\n\", one, two, three);\n\t}\n```"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid some_function(int foo, ...) {\n\t\tint a[3], i;\n\t\tva_list ap;\n\t\tva_start(ap, foo);\n\t\tfor (i = 0; i < sizeof(a) / sizeof(int); i++) a[i] = va_arg(ap, int);\n\t\tva_end(ap);\n\t}\n\tint main(int argc, char *argv[]) {\n\t\tsome_function(17, 42);\n\t}\n```"}, {"BodyText": "This can be exploited to disclose information with no work whatsoever. In fact, each time this function is run, it will print out the next 4 bytes on the stack after the two numbers sent to it."}]}], "ObservedExamples": [{"Reference": "CVE-2004-0276", "Description": "Server earlier allows remote attackers to cause a denial of service (crash) via an HTTP request with a sequence of \"%\" characters and a missing Host field.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0276"}, {"Reference": "CVE-2002-1488", "Description": "Chat client allows remote malicious IRC servers to cause a denial of service (crash) via a PART message with (1) a missing channel or (2) a channel that the user is not in.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1488"}, {"Reference": "CVE-2002-1169", "Description": "Proxy allows remote attackers to cause a denial of service (crash) via an HTTP request to helpout.exe with a missing HTTP version numbers.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1169"}, {"Reference": "CVE-2000-0521", "Description": "Web server allows disclosure of CGI source code via an HTTP request without the version number.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0521"}, {"Reference": "CVE-2001-0590", "Description": "Application server allows a remote attacker to read the source code to arbitrary 'jsp' files via a malformed URL request which does not end with an HTTP protocol specification.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0590"}, {"Reference": "CVE-2003-0239", "Description": "Chat software allows remote attackers to cause a denial of service via malformed GIF89a headers that do not contain a GCT (Global Color Table) or an LCT (Local Color Table) after an Image Descriptor.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0239"}, {"Reference": "CVE-2002-1023", "Description": "Server allows remote attackers to cause a denial of service (crash) via an HTTP GET request without a URI.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1023"}, {"Reference": "CVE-2002-1236", "Description": "CGI crashes when called without any arguments.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1236"}, {"Reference": "CVE-2003-0422", "Description": "CGI crashes when called without any arguments.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0422"}, {"Reference": "CVE-2002-1531", "Description": "Crash in HTTP request without a Content-Length field.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1531"}, {"Reference": "CVE-2002-1077", "Description": "Crash in HTTP request without a Content-Length field.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1077"}, {"Reference": "CVE-2002-1358", "Description": "Empty elements/strings in protocol test suite affect many SSH2 servers/clients.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1358"}, {"Reference": "CVE-2003-0477", "Description": "FTP server crashes in PORT command without an argument.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0477"}, {"Reference": "CVE-2002-0107", "Description": "Resultant infoleak in web server via GET requests without HTTP/1.0 version string.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0107"}, {"Reference": "CVE-2002-0596", "Description": "GET request with empty parameter leads to error message infoleak (path disclosure).", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0596"}], "MappingNotes": {"Usage": "Discouraged", "Rationale": "This CWE entry could be deprecated in a future version of CWE.", "Comments": "See maintenance notes.", "Reasons": ["Potential Deprecation", "Multiple Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry will be deprecated in a future version of CWE. The term \"missing parameter\" was used in both PLOVER and CLASP, with completely different meanings. However, data from both taxonomies was merged into this entry. In PLOVER, it was meant to cover malformed inputs that do not contain required parameters, such as a missing parameter in a CGI request. This entry's observed examples and classification came from PLOVER. However, the description, demonstrative example, and other information are derived from CLASP. They are related to an incorrect number of function arguments, which is already covered by CWE-685."}]}
{"ID": "235", "Name": "Improper Handling of Extra Parameters", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not handle or incorrectly handles when the number of parameters, fields, or arguments with the same name exceeds the expected amount.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "233", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "This typically occurs in situations when only one element is expected to be specified."}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "ObservedExamples": [{"Reference": "CVE-2003-1014", "Description": "MIE. multiple gateway/security products allow restriction bypass using multiple MIME fields with the same name, which are interpreted differently by clients.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1014"}], "RelatedAttackPatterns": ["460"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This type of problem has a big role in multiple interpretation vulnerabilities and various HTTP attacks."}], "Top25Examples": [{"Reference": "CVE-2022-31683", "Description": "Concourse (7.x.y prior to 7.8.3 and 6.x.y prior to 6.7.9) contains an authorization bypass issue. A Concourse user can send a request with body including :team_name=team2 to bypass team scope check to gain access to certain resources belong to any other team."}]}
{"ID": "236", "Name": "Improper Handling of Undefined Parameters", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not handle or incorrectly handles when a particular parameter, field, or argument name is not defined or supported by the product.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "233", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "ObservedExamples": [{"Reference": "CVE-2002-1488", "Description": "Crash in IRC client via PART message from a channel the user is not in.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1488"}, {"Reference": "CVE-2001-0650", "Description": "Router crash or bad route modification using BGP updates with invalid transitive attribute.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0650"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "237", "Name": "Improper Handling of Structural Elements", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not handle or incorrectly handles inputs that are related to complex structures.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "228", "ViewID": "1000", "Ordinal": "Primary"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "238", "Name": "Improper Handling of Incomplete Structural Elements", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not handle or incorrectly handles when a particular structural element is not completely specified.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "237", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "Can be primary to other problems."}]}
{"ID": "239", "Name": "Failure to Handle Incomplete Element", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not properly handle when a particular element is not completely specified.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "237", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "404", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Varies by Context", "Unexpected State"]}], "ObservedExamples": [{"Reference": "CVE-2002-1532", "Description": "HTTP GET without \\r\\n\\r\\n CRLF sequences causes product to wait indefinitely and prevents other users from accessing it.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1532"}, {"Reference": "CVE-2003-0195", "Description": "Partial request is not timed out.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0195"}, {"Reference": "CVE-2005-2526", "Description": "MFV. CPU exhaustion in printer via partial printing request then early termination of connection.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2526"}, {"Reference": "CVE-2002-1906", "Description": "CPU consumption by sending incomplete HTTP requests and leaving the connections open.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1906"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "24", "Name": "Path Traversal: '../filedir'", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"../\" sequences that can resolve to a location that is outside of that directory.", "ExtendedDescription": "\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nThe \"../\" manipulation is the canonical manipulation for operating systems that use \"/\" as directory separators, such as UNIX- and Linux-based systems. In some cases, it is useful for bypassing protection schemes in environments for which \"/\" is supported but not the primary separator, such as Windows, which uses \"\\\" but can also accept \"/\".\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "23", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Modify Files or Directories"]}], "PotentialMitigations": [{"MitigationID": "MIT-5.1", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\n\n\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n"}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "ObservedExamples": [{"Reference": "CVE-2022-45918", "Description": "Chain: a learning management tool debugger uses external input to locate previous session logs (CWE-73) and does not properly validate the given path (CWE-20), allowing for filesystem path traversal using \"../\" sequences (CWE-24)", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-45918"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-47945", "Description": "ThinkPHP Framework before 6.0.14 allows local file inclusion via the lang parameter when the language pack feature is enabled (lang_switch_on=true). An unauthenticated and remote attacker can exploit this to execute arbitrary operating system commands, as demonstrated by including pearcmd.php."}, {"Reference": "CVE-2022-2945", "Description": "The WordPress Infinite Scroll \u2013 Ajax Load More plugin for WordPress is vulnerable to Directory Traversal in versions up to, and including, 5.5.3 via the 'type' parameter found in the alm_get_layout() function. This makes it possible for authenticated attackers, with administrative permissions, to read the contents of arbitrary files on the server, which can contain sensitive information."}, {"Reference": "CVE-2022-36065", "Description": "GrowthBook is an open-source platform for feature flagging and A/B testing. With some self-hosted configurations in versions prior to 2022-08-29, attackers can register new accounts and upload files to arbitrary directories within the container. If the attacker uploads a Python script to the right location, they can execute arbitrary code within the container. To be affected, ALL of the following must be true: Self-hosted deployment (GrowthBook Cloud is unaffected); using local file uploads (as opposed to S3 or Google Cloud Storage); NODE_ENV set to a non-production value and JWT_SECRET set to an easily guessable string like `dev`. This issue is patched in commit 1a5edff8786d141161bf880c2fd9ccbe2850a264 (2022-08-29). As a workaround, set `JWT_SECRET` environment variable to a long random string. This will stop arbitrary file uploads, but the only way to stop attackers from registering accounts is by updating to the latest build."}, {"Reference": "CVE-2022-45918", "Description": "ILIAS before 7.16 allows External Control of File Name or Path."}, {"Reference": "CVE-2022-3124", "Description": "The Frontend File Manager Plugin WordPress plugin before 21.3 allows any unauthenticated user to rename uploaded files from users. Furthermore, due to the lack of validation in the destination filename, this could allow allow them to change the content of arbitrary files on the web server"}, {"Reference": "CVE-2022-3060", "Description": "Improper control of a resource identifier in Error Tracking in GitLab CE/EE affecting all versions from 12.7 allows an authenticated attacker to generate content which could cause a victim to make unintended arbitrary requests"}, {"Reference": "CVE-2022-32409", "Description": "A local file inclusion (LFI) vulnerability in the component codemirror.php of Portal do Software Publico Brasileiro i3geo v7.0.5 allows attackers to execute arbitrary PHP code via a crafted HTTP request."}]}
{"ID": "240", "Name": "Improper Handling of Inconsistent Structural Elements", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product does not handle or incorrectly handles when two or more structural elements should be consistent, but are not.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "237", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "707", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Varies by Context", "Unexpected State"]}], "DemonstrativeExamples": [{"ID": "DX-91", "Entries": [{"IntroText": "In the following C/C++ example the method processMessageFromSocket() will get a message from a socket, placed into a buffer, and will parse the contents of the buffer into a structure that contains the message length and the message body. A for loop is used to copy the message body into a local character string which will be passed to another method for processing."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint processMessageFromSocket(int socket) {\n\t\t\tint success;\n\t\t\tchar buffer[BUFFER_SIZE];\n\t\t\tchar message[MESSAGE_SIZE];\n```\n// get message from socket and store into buffer* \n\t\t\t\n\t\t\t\n\t\t\t *//Ignoring possibliity that buffer > BUFFER_SIZE* \n\t\t\tif (getMessage(socket, buffer, BUFFER_SIZE) > 0) {\n\t\t\t```\n```\n// place contents of the buffer into message structure* \n\t\t\t\t\tExMessage *msg = recastBuffer(buffer);\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t *// copy message body into string for processing* \n\t\t\t\t\tint index;\n\t\t\t\t\tfor (index = 0; index < msg->msgLength; index++) {\n\t\t\t\t\t```\n\t\t\t\t\t\tmessage[index] = msg->msgBody[index];\n\t\t\t\t\t}\n\t\t\t\t\tmessage[index] = '\\0';\n```\n// process message* \n\t\t\t\t\tsuccess = processMessage(message);}\n\t\t\treturn success;}"}, {"BodyText": "However, the message length variable from the structure is used as the condition for ending the for loop without validating that the message length variable accurately reflects the length of the message body (CWE-606). This can result in a buffer over-read (CWE-125) by reading from memory beyond the bounds of the buffer if the message length variable indicates a length that is longer than the size of a message body (CWE-130)."}]}], "ObservedExamples": [{"Reference": "CVE-2014-0160", "Description": "Chain: \"Heartbleed\" bug receives an inconsistent length parameter (CWE-130) enabling an out-of-bounds read (CWE-126), returning memory that could include private cryptographic keys and other sensitive data.", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-0160"}, {"Reference": "CVE-2009-2299", "Description": "Web application firewall consumes excessive memory when an HTTP request contains a large Content-Length value but no POST data.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2299"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "241", "Name": "Improper Handling of Unexpected Data Type", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product does not handle or incorrectly handles when a particular element is not the expected type, e.g. it expects a digit (0-9) but is provided with a letter (A-Z).", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "228", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Other"], "Impact": ["Varies by Context", "Unexpected State"]}], "PotentialMitigations": [{"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "ObservedExamples": [{"Reference": "CVE-1999-1156", "Description": "FTP server crash via PORT command with non-numeric character.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1156"}, {"Reference": "CVE-2004-0270", "Description": "Anti-virus product has assert error when line length is non-numeric.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0270"}], "RelatedAttackPatterns": ["48"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "Probably under-studied."}]}
{"ID": "242", "Name": "Use of Inherently Dangerous Function", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product calls a function that can never be guaranteed to work safely.", "ExtendedDescription": "Certain functions behave in dangerous ways regardless of how they are used. Functions in this category were often implemented without taking security concerns into account. The gets() function is unsafe because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to gets() and overflow the destination buffer. Similarly, the >> operator is unsafe to use when reading into a statically-allocated character array because it does not perform bounds checking on the size of its input. An attacker can easily send arbitrarily-sized input to the >> operator and overflow the destination buffer.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1177", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Varies by Context"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation", "Requirements"], "Description": "Ban the use of dangerous functions. Use their safe equivalent."}, {"Phase": ["Testing"], "Description": "Use grep or static analysis tools to spot usage of dangerous functions."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The code below calls gets() to read information into a buffer."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar buf[BUFSIZE];\n\tgets(buf);\n```"}, {"BodyText": "The gets() function in C is inherently unsafe."}]}, {"ID": "DX-5", "Entries": [{"IntroText": "The code below calls the gets() function to read in data from the command line."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t\tchar buf[24];\n\t\tprintf(\"Please enter your name and press <Enter>\\n\");\n\t\tgets(buf);\n\t\t...\n\t}\n```"}, {"BodyText": "However, gets() is inherently unsafe, because it copies all input from STDIN to the buffer without checking size. This allows the user to provide a string that is larger than the buffer size, resulting in an overflow condition."}]}], "ObservedExamples": [{"Reference": "CVE-2007-4004", "Description": "FTP client uses inherently insecure gets() function and is setuid root on some systems, allowing buffer overflow", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-4004"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "243", "Name": "Creation of chroot Jail Without Changing Working Directory", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product uses the chroot() system call to create a jail, but does not change the working directory afterward. This does not prevent access to files outside of the jail.", "ExtendedDescription": "Improper use of chroot() may allow attackers to escape from the chroot jail. The chroot() function call does not change the process's current working directory, so relative paths may still refer to file system resources outside of the chroot jail after chroot() has been called.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "573", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "669", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Unix", "Prevalence": "Undetermined"}], "BackgroundDetails": ["The chroot() system call allows a process to change its perception of the root directory of the file system. After properly invoking chroot(), a process cannot access any files outside the directory tree defined by the new root directory. Such an environment is called a chroot jail and is commonly used to prevent the possibility that a processes could be subverted and used to access unauthorized files. For instance, many FTP servers run in chroot jails to prevent an attacker who discovers a new vulnerability in the server from being able to download the password file or other sensitive files on the system."], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Files or Directories"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Consider the following source code from a (hypothetical) FTP server:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchroot(\"/var/ftproot\");\n\t...\n\tfgets(filename, sizeof(filename), network);\n\tlocalfile = fopen(filename, \"r\");\n\twhile ((len = fread(buf, 1, sizeof(buf), localfile)) != EOF) {\n\t\tfwrite(buf, 1, sizeof(buf), network);\n\t}\n\tfclose(localfile);\n```"}, {"BodyText": "This code is responsible for reading a filename from the network, opening the corresponding file on the local machine, and sending the contents over the network. This code could be used to implement the FTP GET command. The FTP server calls chroot() in its initialization routines in an attempt to prevent access to files outside of /var/ftproot. But because the server does not change the current working directory by calling chdir(\"/\"), an attacker could request the file \"../../../../../etc/passwd\" and obtain a copy of the system password file."}]}], "AffectedResources": ["File or Directory"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "244", "Name": "Improper Clearing of Heap Memory Before Release ('Heap Inspection')", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "Using realloc() to resize buffers that store sensitive information can leave the sensitive information exposed to attack, because it is not removed from memory.", "ExtendedDescription": "When sensitive data such as a password or an encryption key is not removed from memory, it could be exposed to an attacker using a \"heap inspection\" attack that reads the sensitive data using memory dumps or other methods. The realloc() function is commonly used to increase the size of a block of allocated memory. This operation often requires copying the contents of the old memory block into a new and larger block. This operation leaves the contents of the original block intact but inaccessible to the program, preventing the program from being able to scrub sensitive data from memory. If an attacker can later examine the contents of a memory dump, the sensitive data could be exposed.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "226", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "669", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Other"], "Impact": ["Read Memory", "Other"], "Note": "Be careful using vfork() and fork() in security sensitive code. The process state will not be cleaned up and will contain traces of data from past use."}], "DemonstrativeExamples": [{"ID": "DX-148", "Entries": [{"IntroText": "The following code calls realloc() on a buffer containing sensitive data:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tcleartext_buffer = get_secret();...\n\tcleartext_buffer = realloc(cleartext_buffer, 1024);\n\t...\n\tscrub_memory(cleartext_buffer, 1024);\n```"}, {"BodyText": "There is an attempt to scrub the sensitive data from memory, but realloc() is used, so it could return a pointer to a different part of memory. The memory that was originally allocated for cleartext_buffer could still contain an uncleared copy of the data."}]}], "ObservedExamples": [{"Reference": "CVE-2019-3733", "Description": "Cryptography library does not clear heap memory before release", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-3733"}], "AffectedResources": ["Memory"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "245", "Name": "J2EE Bad Practices: Direct Management of Connections", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The J2EE application directly manages connections, instead of using the container's connection management facilities.", "ExtendedDescription": "The J2EE standard forbids the direct management of connections. It requires that applications use the container's resource management facilities to obtain connections to resources. Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "695", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Quality Degradation"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following example, the class DatabaseConnection opens and manages a connection to a database for a J2EE application. The method openDatabaseConnection opens a connection to the database using a DriverManager to create the Connection object conn to the database specified in the string constant CONNECT_STRING."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class DatabaseConnection {\n\t\t\tprivate static final String CONNECT_STRING = \"jdbc:mysql://localhost:3306/mysqldb\";\n\t\t\tprivate Connection conn = null;\n\t\t\tpublic DatabaseConnection() {\n\t\t\t}\n\t\t\tpublic void openDatabaseConnection() {\n\t\t\t\ttry {\n\t\t\t\t\tconn = DriverManager.getConnection(CONNECT_STRING);\n\t\t\t\t} catch (SQLException ex) {...}\n\t\t\t}\n\t\t\t// Member functions for retrieving database connection and accessing database\n\t\t\t...\n\t}\n```"}, {"BodyText": "The use of the DriverManager class to directly manage the connection to the database violates the J2EE restriction against the direct management of connections. The J2EE application should use the web application container's resource management facilities to obtain a connection to the database as shown in the following example."}, {"Nature": "Good", "ExampleCode": "```\n\tpublic class DatabaseConnection {\n\t\t\tprivate static final String DB_DATASRC_REF = \"jdbc:mysql://localhost:3306/mysqldb\";\n\t\t\tprivate Connection conn = null;\n\t\t\tpublic DatabaseConnection() {\n\t\t\t}\n\t\t\tpublic void openDatabaseConnection() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t\tInitialContext ctx = new InitialContext();\n\t\t\t\t\t\t\tDataSource datasource = (DataSource) ctx.lookup(DB_DATASRC_REF);\n\t\t\t\t\t\t\tconn = datasource.getConnection();\n\t\t\t\t\t} catch (NamingException ex) {...}\n\t\t\t\t\t} catch (SQLException ex) {...}\n\t\t\t}\n\t\t\t// Member functions for retrieving database connection and accessing database\n\t\t\t...\n\t}\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "246", "Name": "J2EE Bad Practices: Direct Use of Sockets", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The J2EE application directly uses sockets instead of using framework method calls.", "ExtendedDescription": "\n\nThe J2EE standard permits the use of sockets only for the purpose of communication with legacy systems when no higher-level protocol is available. Authoring your own communication protocol requires wrestling with difficult security issues.\n\n\nWithout significant scrutiny by a security expert, chances are good that a custom communication protocol will suffer from security problems. Many of the same issues apply to a custom implementation of a standard protocol. While there are usually more resources available that address security concerns related to implementing a standard protocol, these resources are also available to attackers.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "695", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Quality Degradation"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Use framework method calls instead of using sockets directly."}], "DemonstrativeExamples": [{"ID": "DX-197", "Entries": [{"IntroText": "The following example opens a socket to connect to a remote server."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n```\n// Perform servlet tasks.* \n\t\t\t...\n\t\t\t\n\t\t\t\n\t\t\t *// Open a socket to a remote server (bad).* \n\t\t\tSocket sock = null;\n\t\t\t\n\t\t\ttry {\n\t\t\t```\n\t\t\t\t\tsock = new Socket(remoteHostname, 3000);\n```\n// Do something with the socket.* \n\t\t\t\t\t...} catch (Exception e) {\n\t\t\t```\n\t\t\t\t...\n\t\t\t}\n\t}\n```"}, {"BodyText": "A Socket object is created directly within the Java servlet, which is a dangerous way to manage remote connections."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "247", "Name": "DEPRECATED: Reliance on DNS Lookups in a Security Decision", "Abstraction": "Base", "Structure": "Simple", "Status": "Deprecated", "Description": "This entry has been deprecated because it was a duplicate of CWE-350. All content has been transferred to CWE-350.", "MappingNotes": {"Usage": "Prohibited", "Rationale": "This CWE has been deprecated.", "Comments": "See description for suggestions for other CWE IDs to use.", "Reasons": ["Deprecated"]}}
{"ID": "248", "Name": "Uncaught Exception", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "An exception is thrown from a function, but it is not caught.", "ExtendedDescription": "When an exception is not caught, it may cause the program to crash or expose sensitive information.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "705", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "755", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "703", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "703", "ViewID": "1340", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C#", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability", "Confidentiality"], "Impact": ["DoS: Crash, Exit, or Restart", "Read Application Data"], "Note": "An uncaught exception could cause the system to be placed in a state that could lead to a crash, exposure of sensitive information or other unintended behaviors."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "DemonstrativeExamples": [{"ID": "DX-39", "Entries": [{"IntroText": "The following example attempts to resolve a hostname."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tprotected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException {\n\t\tString ip = req.getRemoteAddr();\n\t\tInetAddress addr = InetAddress.getByName(ip);\n\t\t...\n\t\tout.println(\"hello \" + addr.getHostName());\n\t}\n```"}, {"BodyText": "A DNS lookup failure will cause the Servlet to throw an exception."}]}, {"Entries": [{"IntroText": "The _alloca() function allocates memory on the stack. If an allocation request is too large for the available stack space, _alloca() throws an exception. If the exception is not caught, the program will crash, potentially enabling a denial of service attack. _alloca() has been deprecated as of Microsoft Visual Studio 2005(R). It has been replaced with the more secure _alloca_s()."}]}, {"Entries": [{"IntroText": "EnterCriticalSection() can raise an exception, potentially causing the program to crash. Under operating systems prior to Windows 2000, the EnterCriticalSection() function can raise an exception in low memory situations. If the exception is not caught, the program will crash, potentially enabling a denial of service attack."}]}], "ObservedExamples": [{"Reference": "CVE-2023-41151", "Description": "SDK for OPC Unified Architecture (OPC UA) server has uncaught exception when a socket is blocked for writing but the server tries to send an error", "Link": "https://www.cve.org/CVERecord?id=CVE-2023-41151"}, {"Reference": "CVE-2023-21087", "Description": "Java code in a smartphone OS can encounter a \"boot loop\" due to an uncaught exception", "Link": "https://www.cve.org/CVERecord?id=CVE-2023-21087"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-0478", "Description": "In updateDrawable of StatusBarIconView.java, there is a possible permission bypass due to an uncaught exception. This could lead to local escalation of privilege by running foreground services without notifying the user, with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-8.1 Android-9Android ID: A-169255797"}, {"Reference": "CVE-2021-22406", "Description": "There is an Uncaught Exception vulnerability in Huawei Smartphone.Successful exploitation of this vulnerability will cause the app to exit unexpectedly."}, {"Reference": "CVE-2021-25971", "Description": "In Camaleon CMS, versions 2.0.1 to 2.6.0 are vulnerable to an Uncaught Exception. The app's media upload feature crashes permanently when an attacker with a low privileged access uploads a specially crafted .svg file"}, {"Reference": "CVE-2021-37078", "Description": "There is a Uncaught Exception vulnerability in Huawei Smartphone.Successful exploitation of this vulnerability may lead to remote Denial of Service."}, {"Reference": "CVE-2022-20253", "Description": "In Bluetooth, there is a possible cleanup failure due to an uncaught exception. This could lead to remote denial of service in Bluetooth with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-224545125"}, {"Reference": "CVE-2022-20414", "Description": "In setImpl of AlarmManagerService.java, there is a possible way to put a device into a boot loop due to an uncaught exception. This could lead to local denial of service with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12L Android-13Android ID: A-234441463"}, {"Reference": "CVE-2022-20500", "Description": "In loadFromXml of ShortcutPackage.java, there is a possible crash on boot due to an uncaught exception. This could lead to local denial of service with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12L Android-13Android ID: A-246540168"}, {"Reference": "CVE-2022-21218", "Description": "Uncaught exception in the Intel(R) Trace Analyzer and Collector before version 2021.5 may allow an authenticated user to potentially enable information disclosure via local access."}, {"Reference": "CVE-2022-21676", "Description": "Engine.IO is the implementation of transport-based cross-browser/cross-device bi-directional communication layer for Socket.IO. A specially crafted HTTP request can trigger an uncaught exception on the Engine.IO server, thus killing the Node.js process. This impacts all the users of the `engine.io` package starting from version `4.0.0`, including those who uses depending packages like `socket.io`. Versions prior to `4.0.0` are not impacted. A fix has been released for each major branch, namely `4.1.2` for the `4.x.x` branch, `5.2.1` for the `5.x.x` branch, and `6.1.1` for the `6.x.x` branch. There is no known workaround except upgrading to a safe version."}, {"Reference": "CVE-2022-25917", "Description": "Uncaught exception in the firmware for some Intel(R) Server Board M50CYP Family before version R01.01.0005 may allow a privileged user to potentially enable a denial of service via local access."}, {"Reference": "CVE-2022-29493", "Description": "Uncaught exception in webserver for the Integrated BMC in some Intel(R) platforms before versions 2.86, 2.09 and 2.78 may allow a privileged user to potentially enable denial of service via network access."}, {"Reference": "CVE-2022-34849", "Description": "Uncaught exception in the Intel(R) Iris(R) Xe MAX drivers for Windows before version 100.0.5.1436(v2) may allow a privileged user to potentially enable denial of service via local access."}, {"Reference": "CVE-2022-36287", "Description": "Uncaught exception in the FCS Server software maintained by Intel before version 1.1.79.3 may allow a privileged user to potentially enable denial of service via physical access."}, {"Reference": "CVE-2022-47933", "Description": "Brave Browser before 1.42.51 allowed a remote attacker to cause a denial of service via a crafted HTML file that references the IPFS scheme. This vulnerability is caused by an uncaught exception in the function ipfs::OnBeforeURLRequest_IPFSRedirectWork() in ipfs_redirect_network_delegate_helper.cc."}, {"Reference": "CVE-2022-20761", "Description": "A vulnerability in the integrated wireless access point (AP) packet processing of the Cisco 1000 Series Connected Grid Router (CGR1K) could allow an unauthenticated, adjacent attacker to cause a denial of service condition on an affected device. This vulnerability is due to insufficient input validation of received traffic. An attacker could exploit this vulnerability by sending crafted traffic to an affected device. A successful exploit could allow the attacker to cause the integrated AP to stop processing traffic, resulting in a DoS condition. It may be necessary to manually reload the CGR1K to restore AP operation."}, {"Reference": "CVE-2022-20919", "Description": "A vulnerability in the processing of malformed Common Industrial Protocol (CIP) packets that are sent to Cisco IOS Software and Cisco IOS XE Software could allow an unauthenticated, remote attacker to cause an affected device to unexpectedly reload, resulting in a denial of service (DoS) condition. This vulnerability is due to insufficient input validation during processing of CIP packets. An attacker could exploit this vulnerability by sending a malformed CIP packet to an affected device. A successful exploit could allow the attacker to cause the affected device to unexpectedly reload, resulting in a DoS condition."}]}
{"ID": "249", "Name": "DEPRECATED: Often Misused: Path Manipulation", "Abstraction": "Variant", "Structure": "Simple", "Status": "Deprecated", "Description": "This entry has been deprecated because of name\n\tconfusion and an accidental combination of multiple\n\tweaknesses. Most of its content has been transferred to\n\tCWE-785.", "ExtendedDescription": "\n\nThis entry was deprecated for several reasons. The primary reason is over-loading of the \"path manipulation\" term and the description. The original description for this entry was the same as that for the \"Often Misused: File System\" item in the original Seven Pernicious Kingdoms paper. However, Seven Pernicious Kingdoms also has a \"Path Manipulation\" phrase that is for external control of pathnames (CWE-73), which is a factor in symbolic link following and path traversal, neither of which is explicitly mentioned in 7PK. Fortify uses the phrase \"Often Misused: Path Manipulation\" for a broader range of problems, generally for issues related to buffer management. Given the multiple conflicting uses of this term, there is a chance that CWE users may have incorrectly mapped to this entry.\n\n\nThe second reason for deprecation is an implied combination of multiple weaknesses within buffer-handling functions. The focus of this entry was generally on the path-conversion functions and their association with buffer overflows. However, some of Fortify's Vulncat entries have the term \"path manipulation\" but describe a non-overflow weakness in which the buffer is not guaranteed to contain the entire pathname, i.e., there is information truncation (see CWE-222 for a similar concept). A new entry for this non-overflow weakness may be created in a future version of CWE.\n", "MappingNotes": {"Usage": "Prohibited", "Rationale": "This CWE has been deprecated.", "Comments": "See description for suggestions for other CWE IDs to use.", "Reasons": ["Deprecated"]}}
{"ID": "25", "Name": "Path Traversal: '/../filedir'", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"/../\" sequences that can resolve to a location that is outside of that directory.", "ExtendedDescription": "\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nSometimes a program checks for \"../\" at the beginning of the input, so a \"/../\" can bypass that check.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "23", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Modify Files or Directories"]}], "PotentialMitigations": [{"MitigationID": "MIT-5.1", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\n\n\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n"}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "ObservedExamples": [{"Reference": "CVE-2022-20775", "Description": "A cloud management tool allows attackers to bypass the restricted shell using path traversal sequences like \"/../\" in the USER environment variable.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-20775"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-20775", "Description": "Multiple vulnerabilities in the CLI of Cisco SD-WAN Software could allow an authenticated, local attacker to gain elevated privileges. These vulnerabilities are due to improper access controls on commands within the application CLI. An attacker could exploit these vulnerabilities by running a malicious command on the application CLI. A successful exploit could allow the attacker to execute arbitrary commands as the root user."}, {"Reference": "CVE-2022-20818", "Description": "Multiple vulnerabilities in the CLI of Cisco SD-WAN Software could allow an authenticated, local attacker to gain elevated privileges. These vulnerabilities are due to improper access controls on commands within the application CLI. An attacker could exploit these vulnerabilities by running a malicious command on the application CLI. A successful exploit could allow the attacker to execute arbitrary commands as the root user."}, {"Reference": "CVE-2022-29596", "Description": "MicroStrategy Enterprise Manager 2022 allows authentication bypass by triggering a login failure and then entering the Uid=/../../../../../../../../../../../windows/win.ini%00.jpg&Pwd=_any_password_&ConnMode=1&3054=Login substring for directory traversal."}, {"Reference": "CVE-2021-40870", "Description": "An issue was discovered in Aviatrix Controller 6.x before 6.5-1804.1922. Unrestricted upload of a file with a dangerous type is possible, which allows an unauthenticated user to execute arbitrary code via directory traversal."}, {"Reference": "CVE-2022-29457", "Description": "Zoho ManageEngine ADSelfService Plus before 6121, ADAuditPlus 7060, Exchange Reporter Plus 5701, and ADManagerPlus 7131 allow NTLM Hash disclosure during certain storage-path configuration steps."}]}
{"ID": "250", "Name": "Execution with Unnecessary Privileges", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product performs an operation at a privilege level that is higher than the minimum level required, which creates new weaknesses or amplifies the consequences of other weaknesses.", "ExtendedDescription": "\n\nNew weaknesses can be exposed because running with extra privileges, such as root or Administrator, can disable the normal security checks being performed by the operating system or surrounding environment. Other pre-existing weaknesses can turn into security vulnerabilities if they occur while operating at raised privileges.\n\n\nPrivilege management functions can behave in some less-than-obvious ways, and they have different quirks on different platforms. These inconsistencies are particularly pronounced if you are transitioning from one non-root user to another. Signal handlers and spawned processes run at the privilege of the owning process, so if a process is running as root when a signal fires or a sub-process is executed, the signal handler or sub-process will operate with root privileges.\n", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "269", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "657", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Mobile", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "\n\nREALIZATION: This weakness is caused during implementation of an architectural security tactic.\n"}, {"Phase": "Installation"}, {"Phase": "Architecture and Design", "Note": "\n\nIf an application has this design problem, then it can be easier for the developer to make implementation-related errors such as CWE-271 (Privilege Dropping / Lowering Errors). In addition, the consequences of Privilege Chaining (CWE-268) can become more severe.\n"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control"], "Impact": ["Gain Privileges or Assume Identity", "Execute Unauthorized Code or Commands", "Read Application Data", "DoS: Crash, Exit, or Restart"], "Note": "An attacker will be able to gain access to any resources that are allowed by the extra privileges. Common results include executing code, disabling services, and reading restricted data."}], "DetectionMethods": [{"Method": "Manual Analysis", "Description": "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.", "EffectivenessNotes": "These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."}, {"DetectionMethodID": "DM-11.7", "Method": "Black Box", "Description": "\n\nUse monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.\n\n\nAttach the monitor to the process and perform a login. Look for library functions and system calls that indicate when privileges are being raised or dropped. Look for accesses of resources that are restricted to normal users.\n", "EffectivenessNotes": "Note that this technique is only useful for privilege issues related to system resources. It is not likely to detect application-level business rules that are related to privileges, such as if a blog system allows a user to delete a blog entry without first checking that the user has administrator privileges."}, {"Method": "Automated Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tCompare binary / bytecode to application permission manifest\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis\n\t\tBinary Weakness Analysis - including disassembler + source code weakness analysis", "Effectiveness": "High"}, {"Method": "Manual Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Automated Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tHost-based Vulnerability Scanners - Examine configuration for flaws, verifying that audit mechanisms work, ensure host configuration meets certain predefined criteria", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tHost Application Interface Scanner", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tManual Source Code Review (not inspections)\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source", "Effectiveness": "High"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer", "Effectiveness": "SOAR Partial"}, {"Method": "Automated Static Analysis", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tConfiguration Checker\n\t\tPermission Manifest Analysis", "Effectiveness": "SOAR Partial"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tAttack Modeling", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-17", "Phase": ["Architecture and Design", "Operation"], "Strategy": "Environment Hardening", "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."}, {"MitigationID": "MIT-18", "Phase": ["Architecture and Design"], "Strategy": "Separation of Privilege", "Description": "Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators."}, {"MitigationID": "MIT-18", "Phase": ["Architecture and Design"], "Strategy": "Attack Surface Reduction", "Description": "Identify the functionality that requires additional privileges, such as access to privileged operating system resources. Wrap and centralize this functionality if possible, and isolate the privileged code as much as possible from other code [REF-76]. Raise privileges as late as possible, and drop them as soon as possible to avoid CWE-271. Avoid weaknesses such as CWE-288 and CWE-420 by protecting all possible communication channels that could interact with the privileged code, such as a secondary socket that is only intended to be accessed by administrators."}, {"Phase": ["Implementation"], "Description": "Perform extensive input validation for any privileged code that must be exposed to the user and reject anything that does not fit your strict requirements."}, {"MitigationID": "MIT-19", "Phase": ["Implementation"], "Description": "When dropping privileges, ensure that they have been dropped successfully to avoid CWE-273. As protection mechanisms in the environment get stronger, privilege-dropping calls may fail even if it seems like they would always succeed."}, {"Phase": ["Implementation"], "Description": "If circumstances force you to run with extra privileges, then determine the minimum access level necessary. First identify the different permissions that the software and its users will need to perform their actions, such as file read and write permissions, network socket permissions, and so forth. Then explicitly allow those actions while denying all else [REF-76]. Perform extensive input validation and canonicalization to minimize the chances of introducing a separate vulnerability. This mitigation is much more prone to error than dropping the privileges in the first place."}, {"MitigationID": "MIT-37", "Phase": ["Operation", "System Configuration"], "Strategy": "Environment Hardening", "Description": "Ensure that the software runs properly under the United States Government Configuration Baseline (USGCB) [REF-199] or an equivalent hardening configuration guide, which many organizations use to limit the attack surface and potential risk of deployed software."}], "DemonstrativeExamples": [{"ID": "DX-126", "Entries": [{"IntroText": "This code temporarily raises the program's privileges to allow creation of a new user folder."}, {"Nature": "Bad", "Language": "Python", "ExampleCode": "```\n\tdef makeNewUserDir(username):\n\t\t\tif invalidUsername(username):\n```\n#avoid CWE-22 and CWE-78* \n\t\t\t\t\tprint('Usernames cannot contain invalid characters')\n\t\t\t\t\treturn False\n\t\t\ttry:\n\t\t\t```\n\t\t\t\traisePrivileges()\n\t\t\t\tos.mkdir('/home/' + username)\n\t\t\t\tlowerPrivileges()\n\t\t\texcept OSError:\n\t\t\t\tprint('Unable to create new user directory for user:' + username)\n\t\t\t\treturn False\n\t\t\treturn True\n```"}, {"BodyText": "While the program only raises its privilege level to create the folder and immediately lowers it again, if the call to os.mkdir() throws an exception, the call to lowerPrivileges() will not occur. As a result, the program is indefinitely operating in a raised privilege state, possibly allowing further exploitation to occur."}]}, {"Entries": [{"IntroText": "The following code calls chroot() to restrict the application to a subset of the filesystem below APP_HOME in order to prevent an attacker from using the program to gain unauthorized access to files located elsewhere. The code then opens a file specified by the user and processes the contents of the file."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchroot(APP_HOME);\n\tchdir(\"/\");\n\tFILE* data = fopen(argv[1], \"r+\");\n\t...\n```"}, {"BodyText": "Constraining the process inside the application's home directory before opening any files is a valuable security measure. However, the absence of a call to setuid() with some non-zero value means the application is continuing to operate with unnecessary root privileges. Any successful exploit carried out by an attacker against the application can now result in a privilege escalation attack because any malicious operations will be performed with the privileges of the superuser. If the application drops to the privilege level of a non-root user, the potential for damage is substantially reduced."}]}, {"Entries": [{"IntroText": "This application intends to use a user's location to determine the timezone the user is in:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tlocationClient = new LocationClient(this, this, this);\n\tlocationClient.connect();\n\tLocation userCurrLocation;\n\tuserCurrLocation = locationClient.getLastLocation();\n\tsetTimeZone(userCurrLocation);\n```"}, {"BodyText": "This is unnecessary use of the location API, as this information is already available using the Android Time API. Always be sure there is not another way to obtain needed information before resorting to using the location API."}]}, {"ID": "DX-111", "Entries": [{"IntroText": "This code uses location to determine the user's current US State location."}, {"BodyText": "First the application must declare that it requires the ACCESS_FINE_LOCATION permission in the application's manifest.xml:"}, {"Nature": "Bad", "Language": "XML", "ExampleCode": "```\n\t<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\"/>\n```"}, {"BodyText": "During execution, a call to getLastLocation() will return a location based on the application's location permissions. In this case the application has permission for the most accurate location possible:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tlocationClient = new LocationClient(this, this, this);\n\tlocationClient.connect();\n\tLocation userCurrLocation;\n\tuserCurrLocation = locationClient.getLastLocation();\n\tderiveStateFromCoords(userCurrLocation);\n```"}, {"BodyText": "While the application needs this information, it does not need to use the ACCESS_FINE_LOCATION permission, as the ACCESS_COARSE_LOCATION permission will be sufficient to identify which US state the user is in."}]}], "ObservedExamples": [{"Reference": "CVE-2007-4217", "Description": "FTP client program on a certain OS runs with setuid privileges and has a buffer overflow. Most clients do not need extra privileges, so an overflow is not a vulnerability for those clients.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-4217"}, {"Reference": "CVE-2008-1877", "Description": "Program runs with privileges and calls another program with the same privileges, which allows read of arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1877"}, {"Reference": "CVE-2007-5159", "Description": "OS incorrectly installs a program with setuid privileges, allowing users to gain privileges.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-5159"}, {"Reference": "CVE-2008-4638", "Description": "Composite: application running with high privileges (CWE-250) allows user to specify a restricted file to process, which generates a parsing error that leaks the contents of the file (CWE-209).", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4638"}, {"Reference": "CVE-2008-0162", "Description": "Program does not drop privileges before calling another program, allowing code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0162"}, {"Reference": "CVE-2008-0368", "Description": "setuid root program allows creation of arbitrary files through command line argument.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0368"}, {"Reference": "CVE-2007-3931", "Description": "Installation script installs some programs as setuid when they shouldn't be.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-3931"}, {"Reference": "CVE-2020-3812", "Description": "mail program runs as root but does not drop its privileges before attempting to access a file. Attacker can use a symlink from their home directory to a directory only readable by root, then determine whether the file exists based on the response.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-3812"}, {"Reference": "CVE-2003-0908", "Description": "Product launches Help functionality while running with raised privileges, allowing command execution using Windows message to access \"open file\" dialog.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0908"}], "RelatedAttackPatterns": ["104", "470", "69"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "There is a close association with CWE-653 (Insufficient Separation of Privileges). CWE-653 is about providing separate components for each privilege; CWE-250 is about ensuring that each component has the least amount of privileges possible."}, {"Type": "Maintenance", "Note": "CWE-271, CWE-272, and CWE-250 are all closely related and possibly overlapping. CWE-271 is probably better suited as a category. Both CWE-272 and CWE-250 are in active use by the community. The \"least privilege\" phrase has multiple interpretations."}, {"Type": "Maintenance", "Note": "The Taxonomy_Mappings to ISA/IEC 62443 were added in CWE 4.10, but they are still under review and might change in future CWE versions. These draft mappings were performed by members of the \"Mapping CWE to 62443\" subgroup of the CWE-CAPEC ICS/OT Special Interest Group (SIG), and their work is incomplete as of CWE 4.10. The mappings are included to facilitate discussion and review by the broader ICS/OT community, and they are likely to change in future CWE versions."}], "Top25Examples": [{"Reference": "CVE-2022-20701", "Description": "Multiple vulnerabilities in Cisco Small Business RV160, RV260, RV340, and RV345 Series Routers could allow an attacker to do any of the following: Execute arbitrary code Elevate privileges Execute arbitrary commands Bypass authentication and authorization protections Fetch and run unsigned software Cause denial of service (DoS) For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2021-37167", "Description": "An insecure permissions issue was discovered in HMI3 Control Panel in Swisslog Healthcare Nexus Panel operated by released versions of software before Nexus Software 7.2.5.7. A user logged in using the default credentials can gain root access to the device, which provides permissions for all of the functionality of the device."}, {"Reference": "CVE-2022-26113", "Description": "An execution with unnecessary privileges vulnerability [CWE-250] in FortiClientWindows 7.0.0 through 7.0.3, 6.4.0 through 6.4.7, 6.2.0 through 6.2.9, 6.0.0 through 6.0.10 may allow a local attacker to perform an arbitrary file write on the system."}, {"Reference": "CVE-2022-22239", "Description": "An Execution with Unnecessary Privileges vulnerability in Management Daemon (mgd) of Juniper Networks Junos OS Evolved allows a locally authenticated attacker with low privileges to escalate their privileges on the device and potentially remote systems. This vulnerability allows a locally authenticated attacker with access to the ssh operational command to escalate their privileges on the system to root, or if there is user interaction on the local device to potentially escalate privileges on a remote system to root. This issue affects Juniper Networks Junos OS Evolved: All versions prior to 20.4R3-S5-EVO; 21.1-EVO versions prior to 21.1R3-EVO; 21.2-EVO versions prior to 21.2R2-S1-EVO, 21.2R3-EVO; 21.3-EVO versions prior to 21.3R2-EVO. This issue does not affect Juniper Networks Junos OS."}, {"Reference": "CVE-2022-1808", "Description": "Execution with Unnecessary Privileges in GitHub repository polonel/trudesk prior to 1.2.3."}, {"Reference": "CVE-2022-22704", "Description": "The zabbix-agent2 package before 5.4.9-r1 for Alpine Linux sometimes allows privilege escalation to root because the design incorrectly expected that systemd would (in effect) determine part of the configuration."}, {"Reference": "CVE-2022-25372", "Description": "Pritunl Client through 1.2.3019.52 on Windows allows local privilege escalation, related to an ACL entry for CREATOR OWNER in platform_windows.go."}, {"Reference": "CVE-2022-30526", "Description": "A privilege escalation vulnerability was identified in the CLI command of Zyxel USG FLEX 100(W) firmware versions 4.50 through 5.30, USG FLEX 200 firmware versions 4.50 through 5.30, USG FLEX 500 firmware versions 4.50 through 5.30, USG FLEX 700 firmware versions 4.50 through 5.30, USG FLEX 50(W) firmware versions 4.16 through 5.30, USG20(W)-VPN firmware versions 4.16 through 5.30, ATP series firmware versions 4.32 through 5.30, VPN series firmware versions 4.30 through 5.30, USG/ZyWALL series firmware versions 4.09 through 4.72, which could allow a local attacker to execute some OS commands with root privileges in some directories on a vulnerable device."}, {"Reference": "CVE-2022-30695", "Description": "Local privilege escalation due to excessive permissions assigned to child processes. The following products are affected: Acronis Snap Deploy (Windows) before build 3640"}, {"Reference": "CVE-2022-32535", "Description": "The Bosch Ethernet switch PRA-ES8P2S with software version 1.01.05 runs its web server with root privilege. In combination with CVE-2022-23534 this could give an attacker root access to the switch."}, {"Reference": "CVE-2022-34384", "Description": " Dell SupportAssist Client Consumer (version 3.11.1 and prior), SupportAssist Client Commercial (version 3.2 and prior), Dell Command | Update, Dell Update, and Alienware Update versions before 4.5 contain a Local Privilege Escalation Vulnerability in the Advanced Driver Restore component. A local malicious user may potentially exploit this vulnerability, leading to privilege escalation. "}, {"Reference": "CVE-2022-3569", "Description": "Due to an issue with incorrect sudo permissions, Zimbra Collaboration Suite (ZCS) suffers from a local privilege escalation issue in versions 9.0.0 and prior, where the 'zimbra' user can effectively coerce postfix into running arbitrary commands as 'root'."}, {"Reference": "CVE-2022-41290", "Description": "IBM AIX 7.1, 7.2, 7.3, and VIOS 3.1 could allow a non-privileged local user to exploit a vulnerability in the rm_rlcache_file command to obtain root privileges. IBM X-Force ID: 236690."}, {"Reference": "CVE-2022-29587", "Description": "Konica Minolta bizhub MFP devices before 2022-04-14 have an internal Chromium browser that executes with root (aka superuser) access privileges."}, {"Reference": "CVE-2022-34006", "Description": "An issue was discovered in TitanFTP (aka Titan FTP) NextGen before 1.2.1050. When installing, Microsoft SQL Express 2019 installs by default with an SQL instance running as SYSTEM with BUILTIN\\\\Users as sysadmin, thus enabling unprivileged Windows users to execute commands locally as NT AUTHORITY\\\\SYSTEM, aka NX-I674 (sub-issue 2). NOTE: as of 2022-06-21, the 1.2.1050 release corrects this vulnerability in a new installation, but not in an upgrade installation."}, {"Reference": "CVE-2022-38065", "Description": "A privilege escalation vulnerability exists in the oslo.privsep functionality of OpenStack git master 05194e7618 and prior. Overly permissive functionality within tools leveraging this library within a container can lead increased privileges."}, {"Reference": "CVE-2022-1517", "Description": "LRM utilizes elevated privileges. An unauthenticated malicious actor can upload and execute code remotely at the operating system level, which can allow an attacker to change settings, configurations, software, or access sensitive data on the affected produc. An attacker could also exploit this vulnerability to access APIs not intended for general use and interact through the network."}, {"Reference": "CVE-2021-3020", "Description": "An issue was discovered in ClusterLabs Hawk (aka HA Web Konsole) through 2.3.0-15. It ships the binary hawk_invoke (built from tools/hawk_invoke.c), intended to be used as a setuid program. This allows the hacluster user to invoke certain commands as root (with an attempt to limit this to safe combinations). This user is able to execute an interactive \"shell\" that isn't limited to the commands specified in hawk_invoke, allowing escalation to root."}, {"Reference": "CVE-2022-20676", "Description": "A vulnerability in the Tool Command Language (Tcl) interpreter of Cisco IOS XE Software could allow an authenticated, local attacker to escalate from privilege level 15 to root-level privileges. This vulnerability is due to insufficient input validation of data that is passed into the Tcl interpreter. An attacker could exploit this vulnerability by loading malicious Tcl code on an affected device. A successful exploit could allow the attacker to execute arbitrary commands as root. By default, Tcl shell access requires privilege level 15."}]}
{"ID": "252", "Name": "Unchecked Return Value", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product does not check the return value from a method or function, which can prevent it from detecting unexpected states and conditions.", "ExtendedDescription": "Two common programmer assumptions are \"this function call can never fail\" and \"it doesn't matter if this function call fails\". If an attacker can force the function to fail or otherwise return a value that is not expected, then the subsequent program logic could lead to a vulnerability, because the product is not in a state that the programmer assumes. For example, if the program calls a function to drop privileges but does not check the return code to ensure that privileges were successfully dropped, then the program will continue to operate with the higher privileges.", "LikelihoodOfExploit": "Low", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "754", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "754", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "476", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "BackgroundDetails": ["Many functions will return some value about the success of their actions. This will alert the program whether or not to handle any errors caused by that function."], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability", "Integrity"], "Impact": ["Unexpected State", "DoS: Crash, Exit, or Restart"], "Note": "An unexpected return value could place the system in a state that could lead to a crash or other unintended behaviors."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-53", "Phase": ["Implementation"], "Description": "Check the results of all functions that return a value and verify that the value is expected.", "Effectiveness": "High", "EffectivenessNotes": "Checking the return value of the function will typically be sufficient, however beware of race conditions (CWE-362) in a concurrent environment."}, {"Phase": ["Implementation"], "Description": "Ensure that you account for all possible return values from the function."}, {"Phase": ["Implementation"], "Description": "When designing a function, make sure you return a value or throw an exception in case of an error."}], "DemonstrativeExamples": [{"ID": "DX-7", "Entries": [{"IntroText": "Consider the following code segment:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar buf[10], cp_buf[10];\n\tfgets(buf, 10, stdin);\n\tstrcpy(cp_buf, buf);\n```"}, {"BodyText": "The programmer expects that when fgets() returns, buf will contain a null-terminated string of length 9 or less. But if an I/O error occurs, fgets() will not null-terminate buf. Furthermore, if the end of the file is reached before any characters are read, fgets() returns without writing anything to buf. In both of these situations, fgets() signals that something unusual has happened by returning NULL, but in this code, the warning will not be noticed. The lack of a null terminator in buf can result in a buffer overflow in the subsequent call to strcpy()."}]}, {"ID": "DX-114", "Entries": [{"IntroText": "In the following example, it is possible to request that memcpy move a much larger segment of memory than assumed:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint returnChunkSize(void *) {\n```\n/* if chunk info is valid, return the size of usable memory,* \n\t\t\t\n\t\t\t\n\t\t\t ** else, return -1 to indicate an error* \n\t\t\t\n\t\t\t\n\t\t\t **/* \n\t\t\t...}\n\tint main() {\n\t```\n\t\t...\n\t\tmemcpy(destBuf, srcBuf, (returnChunkSize(destBuf)-1));\n\t\t...\n\t}\n```"}, {"BodyText": "If returnChunkSize() happens to encounter an error it will return -1. Notice that the return value is not checked before the memcpy operation (CWE-252), so -1 can be passed as the size argument to memcpy() (CWE-805). Because memcpy() assumes that the value is unsigned, it will be interpreted as MAXINT-1 (CWE-195), and therefore will copy far more memory than is likely available to the destination buffer (CWE-787, CWE-788)."}]}, {"ID": "DX-8", "Entries": [{"IntroText": "The following code does not check to see if memory allocation succeeded before attempting to use the pointer returned by malloc()."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tbuf = (char*) malloc(req_size);\n\tstrncpy(buf, xfer, req_size);\n```"}, {"BodyText": "The traditional defense of this coding error is: \"If my program runs out of memory, it will fail. It doesn't matter whether I handle the error or allow the program to die with a segmentation fault when it tries to dereference the null pointer.\" This argument ignores three important considerations:"}, {"BodyText": "- Depending upon the type and size of the application, it may be possible to free memory that is being used elsewhere so that execution can continue.\n\n  - It is impossible for the program to perform a graceful exit if required. If the program is performing an atomic operation, it can leave the system in an inconsistent state.\n\n  - The programmer has lost the opportunity to record diagnostic information. Did the call to malloc() fail because req_size was too large or because there were too many requests being handled at the same time? Or was it caused by a memory leak that has built up over time? Without handling the error, there is no way to know."}]}, {"ID": "DX-9", "Entries": [{"IntroText": "The following examples read a file into a byte array."}, {"Nature": "Bad", "Language": "C#", "ExampleCode": "```\n\tchar[] byteArray = new char[1024];\n\tfor (IEnumerator i=users.GetEnumerator(); i.MoveNext() ;i.Current()) {\n\t\tString userName = (String) i.Current();\n\t\tString pFileName = PFILE_ROOT + \"/\" + userName;\n\t\tStreamReader sr = new StreamReader(pFileName);\n\t\tsr.Read(byteArray,0,1024);//the file is always 1k bytes\n\t\tsr.Close();\n\t\tprocessPFile(userName, byteArray);\n\t}\n```"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tFileInputStream fis;\n\tbyte[] byteArray = new byte[1024];\n\tfor (Iterator i=users.iterator(); i.hasNext();) {\n\t\t\tString userName = (String) i.next();\n\t\t\tString pFileName = PFILE_ROOT + \"/\" + userName;\n\t\t\tFileInputStream fis = new FileInputStream(pFileName);\n\t\t\tfis.read(byteArray); // the file is always 1k bytes\n\t\t\tfis.close();\n\t\t\tprocessPFile(userName, byteArray);\n```"}, {"BodyText": "The code loops through a set of users, reading a private data file for each user. The programmer assumes that the files are always 1 kilobyte in size and therefore ignores the return value from Read(). If an attacker can create a smaller file, the program will recycle the remainder of the data from the previous user and treat it as though it belongs to the attacker."}]}, {"ID": "DX-10", "Entries": [{"IntroText": "The following code does not check to see if the string returned by getParameter() is null before calling the member function compareTo(), potentially causing a NULL dereference."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tString itemName = request.getParameter(ITEM_NAME);\n\tif (itemName.compareTo(IMPORTANT_ITEM) == 0) {\n\t\t...\n\t}\n\t...\n```"}, {"BodyText": "The following code does not check to see if the string returned by the Item property is null before calling the member function Equals(), potentially causing a NULL dereference."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tString itemName = request.Item(ITEM_NAME);\n\tif (itemName.Equals(IMPORTANT_ITEM)) {\n\t\t...\n\t}\n\t...\n```"}, {"BodyText": "The traditional defense of this coding error is: \"I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or allow the program to die dereferencing a null value.\" But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved."}]}, {"ID": "DX-11", "Entries": [{"IntroText": "The following code shows a system property that is set to null and later dereferenced by a programmer who mistakenly assumes it will always be defined."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tSystem.clearProperty(\"os.name\");\n\t...\n\tString os = System.getProperty(\"os.name\");\n\tif (os.equalsIgnoreCase(\"Windows 95\")) System.out.println(\"Not supported\");\n```"}, {"BodyText": "The traditional defense of this coding error is: \"I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or allow the program to die dereferencing a null value.\" But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved."}]}, {"ID": "DX-12", "Entries": [{"IntroText": "The following VB.NET code does not check to make sure that it has read 50 bytes from myfile.txt. This can cause DoDangerousOperation() to operate on an unexpected value."}, {"Nature": "Bad", "Language": "C#", "ExampleCode": "```\n\tDim MyFile As New FileStream(\"myfile.txt\", FileMode.Open, FileAccess.Read, FileShare.Read)\n\tDim MyArray(50) As Byte\n\tMyFile.Read(MyArray, 0, 50)\n\tDoDangerousOperation(MyArray(20))\n```"}, {"BodyText": "In .NET, it is not uncommon for programmers to misunderstand Read() and related methods that are part of many System.IO classes. The stream and reader classes do not consider it to be unusual or exceptional if only a small amount of data becomes available. These classes simply add the small amount of data to the return buffer, and set the return value to the number of bytes or characters read. There is no guarantee that the amount of data returned is equal to the amount of data requested."}]}, {"Entries": [{"IntroText": "It is not uncommon for Java programmers to misunderstand read() and related methods that are part of many java.io classes. Most errors and unusual events in Java result in an exception being thrown. But the stream and reader classes do not consider it unusual or exceptional if only a small amount of data becomes available. These classes simply add the small amount of data to the return buffer, and set the return value to the number of bytes or characters read. There is no guarantee that the amount of data returned is equal to the amount of data requested. This behavior makes it important for programmers to examine the return value from read() and other IO methods to ensure that they receive the amount of data they expect."}]}, {"ID": "DX-1", "Entries": [{"IntroText": "This example takes an IP address from a user, verifies that it is well formed and then looks up the hostname and copies it into a buffer."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid host_lookup(char *user_supplied_addr){\n\t\t\tstruct hostent *hp;\n\t\t\tin_addr_t *addr;\n\t\t\tchar hostname[64];\n\t\t\tin_addr_t inet_addr(const char *cp);\n```\n/*routine that ensures user_supplied_addr is in the right format for conversion */* \n\t\t\t\n\t\t\tvalidate_addr_form(user_supplied_addr);\n\t\t\taddr = inet_addr(user_supplied_addr);\n\t\t\thp = gethostbyaddr( addr, sizeof(struct in_addr), AF_INET);\n\t\t\tstrcpy(hostname, hp->h_name);}"}, {"BodyText": "If an attacker provides an address that appears to be well-formed, but the address does not resolve to a hostname, then the call to gethostbyaddr() will return NULL. Since the code does not check the return value from gethostbyaddr (CWE-252), a NULL pointer dereference (CWE-476) would then occur in the call to strcpy()."}, {"BodyText": "Note that this code is also vulnerable to a buffer overflow (CWE-119)."}]}, {"ID": "DX-24", "Entries": [{"IntroText": "The following function attempts to acquire a lock in order to perform operations on a shared resource."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid f(pthread_mutex_t *mutex) {\n\t\t\tpthread_mutex_lock(mutex);\n```\n/* access shared resource */* \n\t\t\t\n\t\t\t\n\t\t\tpthread_mutex_unlock(mutex);}"}, {"BodyText": "However, the code does not check the value returned by pthread_mutex_lock() for errors. If pthread_mutex_lock() cannot acquire the mutex for any reason, the function may introduce a race condition into the program and result in undefined behavior."}, {"BodyText": "In order to avoid data races, correctly written programs must check the result of thread synchronization functions and appropriately handle all errors, either by attempting to recover from them or reporting them to higher levels."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n\tint f(pthread_mutex_t *mutex) {\n\t\t\tint result;\n\t\t\tresult = pthread_mutex_lock(mutex);\n\t\t\tif (0 != result)\n\t\t\t\treturn result;\n```\n/* access shared resource */* \n\t\t\t\n\t\t\t\n\t\t\treturn pthread_mutex_unlock(mutex);}"}]}], "ObservedExamples": [{"Reference": "CVE-2020-17533", "Description": "Chain: unchecked return value (CWE-252) of some functions for policy enforcement leads to authorization bypass (CWE-862)", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-17533"}, {"Reference": "CVE-2020-6078", "Description": "Chain: The return value of a function returning a pointer is not checked for success (CWE-252) resulting in the later use of an uninitialized variable (CWE-456) and a null pointer dereference (CWE-476)", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-6078"}, {"Reference": "CVE-2019-15900", "Description": "Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-15900"}, {"Reference": "CVE-2007-3798", "Description": "Unchecked return value leads to resultant integer overflow and code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-3798"}, {"Reference": "CVE-2006-4447", "Description": "Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4447"}, {"Reference": "CVE-2006-2916", "Description": "Program does not check return value when invoking functions to drop privileges, which could leave users with higher privileges than expected by forcing those functions to fail.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-2916"}, {"Reference": "CVE-2008-5183", "Description": "chain: unchecked return value can lead to NULL dereference", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5183"}, {"Reference": "CVE-2010-0211", "Description": "chain: unchecked return value (CWE-252) leads to free of invalid, uninitialized pointer (CWE-824).", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-0211"}, {"Reference": "CVE-2017-6964", "Description": "Linux-based device mapper encryption program does not check the return value of setuid and setgid allowing attackers to execute code with unintended privileges.", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-6964"}, {"Reference": "CVE-2002-1372", "Description": "Chain: Return values of file/socket operations are not checked (CWE-252), allowing resultant consumption of file descriptors (CWE-772).", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1372"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-32845", "Description": "HyperKit is a toolkit for embedding hypervisor capabilities in an application. In versions 0.20210107 and prior of HyperKit, the implementation of `qnotify` at `pci_vtrnd_notify` fails to check the return value of `vq_getchain`. This leads to `struct iovec iov;` being uninitialized and used to read memory in `len = (int) read(sc->vrsc_fd, iov.iov_base, iov.iov_len);` when an attacker is able to make `vq_getchain` fail. This issue may lead to a guest crashing the host causing a denial of service and, under certain circumstance, memory corruption. This issue is fixed in commit 41272a980197917df8e58ff90642d14dec8fe948."}, {"Reference": "CVE-2021-40401", "Description": "A use-after-free vulnerability exists in the RS-274X aperture definition tokenization functionality of Gerbv 2.7.0 and dev (commit b5f1eacd) and Gerbv forked 2.7.1. A specially-crafted gerber file can lead to code execution. An attacker can provide a malicious file to trigger this vulnerability."}, {"Reference": "CVE-2022-25718", "Description": "Cryptographic issue in WLAN due to improper check on return value while authentication handshake in Snapdragon Auto, Snapdragon Connectivity, Snapdragon Consumer Electronics Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon IoT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables, Snapdragon Wired Infrastructure and Networking"}, {"Reference": "CVE-2021-34405", "Description": "NVIDIA Linux distributions contain a vulnerability in TrustZone\u2019s TEE_Malloc function, where an unchecked return value causing a null pointer dereference may lead to denial of service."}, {"Reference": "CVE-2022-0907", "Description": "Unchecked Return Value to NULL Pointer Dereference in tiffcrop in libtiff 4.3.0 allows attackers to cause a denial-of-service via a crafted tiff file. For users that compile libtiff from sources, the fix is available with commit f2b656e2."}, {"Reference": "CVE-2022-22231", "Description": "An Unchecked Return Value to NULL Pointer Dereference vulnerability in Packet Forwarding Engine (PFE) of Juniper Networks Junos OS allows an unauthenticated, network-based attacker to cause a Denial of Service (DoS). On SRX Series if Unified Threat Management (UTM) Enhanced Content Filtering (CF) and AntiVirus (AV) are enabled together and the system processes specific valid transit traffic the Packet Forwarding Engine (PFE) will crash and restart. This issue affects Juniper Networks Junos OS 21.4 versions prior to 21.4R1-S2, 21.4R2 on SRX Series. This issue does not affect Juniper Networks Junos OS versions prior to 21.4R1."}, {"Reference": "CVE-2022-22233", "Description": "An Unchecked Return Value to NULL Pointer Dereference vulnerability in Routing Protocol Daemon (rpd) of Juniper Networks Junos OS and Junos OS Evolved allows a locally authenticated attacker with low privileges to cause a Denial of Service (DoS). In Segment Routing (SR) to Label Distribution Protocol (LDP) interworking scenario, configured with Segment Routing Mapping Server (SRMS) at any node, when an Area Border Router (ABR) leaks the SRMS entries having \"S\" flag set from IS-IS Level 2 to Level 1, an rpd core might be observed when a specific low privileged CLI command is issued. This issue affects: Juniper Networks Junos OS 21.4 versions prior to 21.4R1-S2, 21.4R2-S1, 21.4R3; 22.1 versions prior to 22.1R2. Juniper Networks Junos OS Evolved 21.4-EVO versions prior to 21.4R1-S2-EVO, 21.4R2-S1-EVO, 21.4R3-EVO; 22.1-EVO versions prior to 22.1R2-EVO. This issue does not affect: Juniper Networks Junos OS versions prior to 21.4R1. Juniper Networks Junos OS Evolved versions prior to 21.4R1-EVO."}, {"Reference": "CVE-2022-23626", "Description": "m1k1o/blog is a lightweight self-hosted facebook-styled PHP blog. Errors from functions `imagecreatefrom*` and `image*` have not been checked properly. Although PHP issued warnings and the upload function returned `false`, the original file (that could contain a malicious payload) was kept on the disk. Users are advised to upgrade as soon as possible. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-3807", "Description": "A vulnerability was found in Axiomatic Bento4. It has been rated as problematic. Affected by this issue is some unknown functionality of the component Incomplete Fix CVE-2019-13238. The manipulation leads to resource consumption. The attack may be launched remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-212660."}]}
{"ID": "253", "Name": "Incorrect Check of Function Return Value", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product incorrectly checks a return value from a function, which prevents it from detecting errors or exceptional conditions.", "ExtendedDescription": "Important and common functions will return some value about the success of its actions. This will alert the program whether or not to handle any errors caused by that function.", "LikelihoodOfExploit": "Low", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "573", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "754", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability", "Integrity"], "Impact": ["Unexpected State", "DoS: Crash, Exit, or Restart"], "Note": "An unexpected return value could place the system in a state that could lead to a crash or other unintended behaviors."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Strategy": "Language Selection", "Description": "Use a language or compiler that uses exceptions and requires the catching of those exceptions."}, {"Phase": ["Implementation"], "Description": "Properly check all functions which return a value."}, {"Phase": ["Implementation"], "Description": "When designing any function make sure you return a value or throw an exception in case of an error."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This code attempts to allocate memory for 4 integers and checks if the allocation succeeds."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\ttmp = malloc(sizeof(int) * 4);\n\tif (tmp < 0 ) {\n\t\t\tperror(\"Failure\");\n```\n//should have checked if the call returned 0* \n\t\t\t}"}, {"BodyText": "The code assumes that only a negative return value would indicate an error, but malloc() may return a null pointer when there is an error. The value of tmp could then be equal to 0, and the error would be missed."}]}], "ObservedExamples": [{"Reference": "CVE-2023-49286", "Description": "Chain: function in web caching proxy does not correctly check a return value (CWE-253) leading to a reachable assertion (CWE-617)", "Link": "https://www.cve.org/CVERecord?id=CVE-2023-49286"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-32590", "Description": "In wlan, there is a possible use after free due to an incorrect status check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07299425; Issue ID: ALPS07299425."}]}
{"ID": "256", "Name": "Plaintext Storage of a Password", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "Storing a password in plaintext may result in a system compromise.", "ExtendedDescription": "Password management issues occur when a password is stored in plaintext in an application's properties, configuration file, or memory. Storing a plaintext password in a configuration file allows anyone who can read the file access to the password-protected resource. In some contexts, even storage of a plaintext password in memory is considered a security risk if the password is not cleared immediately after it is used.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "522", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "ICS/OT", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."}, {"Phase": "Architecture and Design", "Note": "Developers sometimes believe that they cannot defend the application from someone who has access to the configuration, but this belief makes an attacker's job easier."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Avoid storing passwords in easily accessible locations."}, {"Phase": ["Architecture and Design"], "Description": "Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext."}, {"Description": "A programmer might attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password because the encoding can be detected and decoded easily.", "Effectiveness": "None"}], "DemonstrativeExamples": [{"ID": "DX-57", "Entries": [{"IntroText": "The following code reads a password from a properties file and uses the password to connect to a database."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t...\n\tProperties prop = new Properties();\n\tprop.load(new FileInputStream(\"config.properties\"));\n\tString password = prop.getProperty(\"password\");\n\tDriverManager.getConnection(url, usr, password);\n\t...\n```"}, {"BodyText": "This code will run successfully, but anyone who has access to config.properties can read the value of password. If a devious employee has access to this information, they can use it to break into the system."}]}, {"ID": "DX-58", "Entries": [{"IntroText": "The following code reads a password from the registry and uses the password to create a new network credential."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t...\n\tString password = regKey.GetValue(passKey).toString();\n\tNetworkCredential netCred = new NetworkCredential(username,password,domain);\n\t...\n```"}, {"BodyText": "This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the system"}]}, {"ID": "DX-43", "Entries": [{"IntroText": "The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext."}, {"BodyText": "This Java example shows a properties file with a cleartext username / password pair."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n```\n# Java Web App ResourceBundle properties file* \n\t...\n\twebapp.ldap.username=secretUsername\n\twebapp.ldap.password=secretPassword\n\t..."}, {"BodyText": "The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext."}, {"Nature": "Bad", "Language": "ASP.NET", "ExampleCode": "```\n\t...\n\t<connectionStrings>\n\t\t<add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" />\n\t</connectionStrings>\n\t...\n```"}, {"BodyText": "Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information."}]}, {"ID": "DX-153", "Entries": [{"IntroText": "In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were \"insecure by design\" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications."}, {"BodyText": "At least one OT product stored a password in plaintext."}]}], "ObservedExamples": [{"Reference": "CVE-2022-30275", "Description": "Remote Terminal Unit (RTU) uses a driver that relies on a password stored in plaintext.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-30275"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-31085", "Description": "LDAP Account Manager (LAM) is a webfrontend for managing entries (e.g. users, groups, DHCP settings) stored in an LDAP directory. In versions prior to 8.0 the session files include the LDAP user name and password in clear text if the PHP OpenSSL extension is not installed or encryption is disabled by configuration. This issue has been fixed in version 8.0. Users unable to upgrade should install the PHP OpenSSL extension and make sure session encryption is enabled in LAM main configuration."}, {"Reference": "CVE-2021-28498", "Description": "In Arista's MOS (Metamako Operating System) software which is supported on the 7130 product line, user enable passwords set in clear text could result in unprivileged users getting complete access to the systems. This issue affects: Arista Metamako Operating System MOS-0.13 and post releases in the MOS-0.1x train MOS-0.26.6 and prior releases in the MOS-0.2x train MOS-0.31.1 and prior releases in the MOS-0.3x train"}, {"Reference": "CVE-2021-42913", "Description": "The SyncThru Web Service on Samsung SCX-6x55X printers allows an attacker to gain access to a list of SMB users and cleartext passwords by reading the HTML source code. Authentication is not required."}, {"Reference": "CVE-2022-28167", "Description": "Brocade SANnav before Brocade SANvav v. 2.2.0.2 and Brocade SANanv v.2.1.1.8 logs the Brocade Fabric OS switch password in plain text in asyncjobscheduler-manager.log"}, {"Reference": "CVE-2022-39816", "Description": "In NOKIA 1350 OMS R14.2, Insufficiently Protected Credentials (cleartext administrator password) occur in the edit configuration page. Exploitation requires an authenticated attacker."}, {"Reference": "CVE-2022-41575", "Description": "A credential-exposure vulnerability in the support-bundle mechanism in Gradle Enterprise 2022.3 through 2022.3.3 allows remote attackers to access a subset of application data (e.g., cleartext credentials). This is fixed in 2022.3.3."}, {"Reference": "CVE-2022-41933", "Description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. When the `reset a forgotten password` feature of XWiki was used, the password was then stored in plain text in database. This only concerns XWiki 13.1RC1 and newer versions. Note that it only concerns the reset password feature available from the \"Forgot your password\" link in the login view: the features allowing a user to change their password, or for an admin to change a user password are not impacted. This vulnerability is particularly dangerous in combination with other vulnerabilities allowing to perform data leak of personal data from users, such as GHSA-599v-w48h-rjrm. Note that this vulnerability only concerns the users of the main wiki: in case of farms, the users registered on subwiki are not impacted thanks to a bug we discovered when investigating this. The problem has been patched in version 14.6RC1, 14.4.3 and 13.10.8. The patch involves a migration of the impacted users as well as the history of the page, to ensure no password remains in plain text in the database. This migration also involves to inform the users about the possible disclosure of their passwords: by default, two emails are automatically sent to the impacted users. A first email to inform about the possibility that their password have been leaked, and a second email using the reset password feature to ask them to set a new password. It's also possible for administrators to set some properties for the migration: it's possible to decide if the user password should be reset (default) or if the passwords should be kept but only hashed. Note that in the first option, the users won't be able to login anymore until they set a new password if they were impacted. Note that in both options, mails will be sent to users to inform them and encourage them to change their passwords."}, {"Reference": "CVE-2022-4312", "Description": " A cleartext storage of sensitive information vulnerability exists in PcVue versions 8.10 through 15.2.3. This could allow an unauthorized user with access the email and short messaging service (SMS) accounts configuration files to discover the associated simple mail transfer protocol (SMTP) account credentials and the SIM card PIN code. Successful exploitation of this vulnerability could allow an unauthorized user access to the underlying email account and SIM card. "}, {"Reference": "CVE-2022-1794", "Description": "The CODESYS OPC DA Server prior V3.5.18.20 stores PLC passwords as plain text in its configuration file so that it is visible to all authorized Microsoft Windows users of the system."}, {"Reference": "CVE-2022-22458", "Description": " IBM Security Verify Governance, Identity Manager 10.0.1 stores user credentials in plain clear text which can be read by a remote authenticated user. IBM X-Force ID: 225009. "}, {"Reference": "CVE-2022-23114", "Description": "Jenkins Publish Over SSH Plugin 1.22 and earlier stores password unencrypted in its global configuration file on the Jenkins controller where it can be viewed by users with access to the Jenkins controller file system."}, {"Reference": "CVE-2022-27206", "Description": "Jenkins GitLab Authentication Plugin 1.13 and earlier stores the GitLab client secret unencrypted in the global config.xml file on the Jenkins controller where it can be viewed by users with access to the Jenkins controller file system."}, {"Reference": "CVE-2022-27216", "Description": "Jenkins dbCharts Plugin 0.5.2 and earlier stores JDBC connection passwords unencrypted in its global configuration file on the Jenkins controller where they can be viewed by users with access to the Jenkins controller file system."}, {"Reference": "CVE-2022-27217", "Description": "Jenkins Vmware vRealize CodeStream Plugin 1.2 and earlier stores passwords unencrypted in job config.xml files on the Jenkins controller where they can be viewed by users with Extended Read permission, or access to the Jenkins controller file system."}, {"Reference": "CVE-2022-27548", "Description": "HCL Launch stores user credentials in plain clear text which can be read by a local user."}, {"Reference": "CVE-2022-28135", "Description": "Jenkins instant-messaging Plugin 1.41 and earlier stores passwords for group chats unencrypted in the global configuration file of plugins based on Jenkins instant-messaging Plugin on the Jenkins controller where they can be viewed by users with access to the Jenkins controller file system."}, {"Reference": "CVE-2022-28141", "Description": "Jenkins Proxmox Plugin 0.5.0 and earlier stores the Proxmox Datacenter password unencrypted in the global config.xml file on the Jenkins controller where it can be viewed by users with access to the Jenkins controller file system."}, {"Reference": "CVE-2022-29052", "Description": "Jenkins Google Compute Engine Plugin 4.3.8 and earlier stores private keys unencrypted in cloud agent config.xml files on the Jenkins controller where they can be viewed by users with Extended Read permission, or access to the Jenkins controller file system."}, {"Reference": "CVE-2022-29085", "Description": "Dell Unity, Dell UnityVSA, and Dell Unity XT versions prior to 5.2.0.0.5.173 contain a plain-text password storage vulnerability when certain off-array tools are run on the system. The credentials of a user with high privileges are stored in plain text. A local malicious user with high privileges may use the exposed password to gain access with the privileges of the compromised user."}, {"Reference": "CVE-2022-29588", "Description": "Konica Minolta bizhub MFP devices before 2022-04-14 use cleartext password storage for the /var/log/nginx/html/ADMINPASS and /etc/shadow files."}, {"Reference": "CVE-2022-34199", "Description": "Jenkins Convertigo Mobile Platform Plugin 1.1 and earlier stores passwords unencrypted in job config.xml files on the Jenkins controller where they can be viewed by users with Extended Read permission, or access to the Jenkins controller file system."}, {"Reference": "CVE-2022-34213", "Description": "Jenkins Squash TM Publisher (Squash4Jenkins) Plugin 1.0.0 and earlier stores passwords unencrypted in its global configuration file on the Jenkins controller where they can be viewed by users with access to the Jenkins controller file system."}, {"Reference": "CVE-2022-34807", "Description": "Jenkins Elasticsearch Query Plugin 1.2 and earlier stores a password unencrypted in its global configuration file on the Jenkins controller where it can be viewed by users with access to the Jenkins controller file system."}, {"Reference": "CVE-2022-41732", "Description": " IBM Maximo Mobile 8.7 and 8.8 stores user credentials in plain clear text which can be read by a local user. IBM X-Force ID: 237407. "}, {"Reference": "CVE-2022-43419", "Description": "Jenkins Katalon Plugin 1.0.32 and earlier stores API keys unencrypted in job config.xml files on the Jenkins controller where they can be viewed by users with Extended Read permission, or access to the Jenkins controller file system."}, {"Reference": "CVE-2022-43442", "Description": "Plaintext storage of a password vulnerability exists in +F FS040U software versions v2.3.4 and earlier, which may allow an attacker to obtain the login password of +F FS040U and log in to the management console."}, {"Reference": "CVE-2022-45384", "Description": "Jenkins Reverse Proxy Auth Plugin 1.7.3 and earlier stores the LDAP manager password unencrypted in the global config.xml file on the Jenkins controller where it can be viewed by attackers with access to the Jenkins controller file system."}, {"Reference": "CVE-2022-45392", "Description": "Jenkins NS-ND Integration Performance Publisher Plugin 4.8.0.143 and earlier stores passwords unencrypted in job config.xml files on the Jenkins controller where they can be viewed by attackers with Extended Read permission, or access to the Jenkins controller file system."}, {"Reference": "CVE-2022-38121", "Description": "UPSMON PRO configuration file stores user password in plaintext under public user directory. A remote attacker with general user privilege can access all users\u2018 and administrators' account names and passwords via this unprotected configuration file."}, {"Reference": "CVE-2022-38665", "Description": "Jenkins CollabNet Plugins Plugin 2.0.8 and earlier stores a RabbitMQ password unencrypted in its global configuration file on the Jenkins controller where it can be viewed by users with access to the Jenkins controller file system."}, {"Reference": "CVE-2022-41247", "Description": "Jenkins BigPanda Notifier Plugin 1.4.0 and earlier stores the BigPanda API key unencrypted in its global configuration file on the Jenkins controller where they can be viewed by users with access to the Jenkins controller file system."}, {"Reference": "CVE-2022-22554", "Description": "Dell EMC System Update, version 1.9.2 and prior, contain an Unprotected Storage of Credentials vulnerability. A local attacker with user privleges could potentially exploit this vulnerability leading to the disclosure of user passwords."}, {"Reference": "CVE-2022-22983", "Description": "VMware Workstation (16.x prior to 16.2.4) contains an unprotected storage of credentials vulnerability. A malicious actor with local user privileges to the victim machine may exploit this vulnerability leading to the disclosure of user passwords of the remote server connected through VMware Workstation."}, {"Reference": "CVE-2022-22557", "Description": "PowerStore contains Plain-Text Password Storage Vulnerability in PowerStore X & T environments running versions 2.0.0.x and 2.0.1.x A locally authenticated attacker could potentially exploit this vulnerability, leading to the disclosure of certain user credentials. The attacker may be able to use the exposed credentials to access the vulnerable application with privileges of the compromised account."}, {"Reference": "CVE-2021-36317", "Description": "Dell EMC Avamar Server version 19.4 contains a plain-text password storage vulnerability in AvInstaller. A local attacker could potentially exploit this vulnerability, leading to the disclosure of certain user credentials. The attacker may be able to use the exposed credentials to access the vulnerable application with privileges of the compromised account."}, {"Reference": "CVE-2022-1766", "Description": "Anchore Enterprise anchorectl version 0.1.4 improperly stored credentials when generating a Software Bill of Materials. anchorectl will add the credentials used to access Anchore Enterprise API in the Software Bill of Materials (SBOM) generated by anchorectl. Users of anchorectl version 0.1.4 should upgrade to anchorectl version 0.1.5 to resolve this issue."}, {"Reference": "CVE-2022-26856", "Description": "Dell EMC Repository Manager version 3.4.0 contains a plain-text password storage vulnerability. A local attacker could potentially exploit this vulnerability, leading to the disclosure of certain user credentials. The attacker may be able to use the exposed credentials to access the vulnerable application's database with privileges of the compromised account."}, {"Reference": "CVE-2022-3781", "Description": "Dashlane password and Keepass Server password in My Account Settings are not encrypted in the database in Devolutions Remote Desktop Manager 2022.2.26 and prior versions and Devolutions Server 2022.3.1 and prior versions which allows database users to read the data. This issue affects : Remote Desktop Manager 2022.2.26 and prior versions. Devolutions Server 2022.3.1 and prior versions. "}, {"Reference": "CVE-2022-3206", "Description": "The Passster WordPress plugin before 3.5.5.5.2 stores the password inside a cookie named \"passster\" using base64 encoding method which is easy to decode. This puts the password at risk in case the cookies get leaked."}]}
{"ID": "257", "Name": "Storing Passwords in a Recoverable Format", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The storage of passwords in a recoverable format makes them subject to password reuse attacks by malicious users. In fact, it should be noted that recoverable encrypted passwords provide no significant benefit over plaintext passwords since they are subject not only to reuse by malicious attackers but also by malicious insiders. If a system administrator can recover a password directly, or use a brute force search on the available information, the administrator can use the password on other accounts.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "522", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "259", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "User's passwords may be revealed."}, {"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "Revealed passwords may be reused elsewhere to impersonate the users in question."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Use strong, non-reversible encryption to protect stored passwords."}], "DemonstrativeExamples": [{"ID": "DX-59", "Entries": [{"IntroText": "Both of these examples verify a password by comparing it to a stored compressed version."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint VerifyAdmin(char *password) {\n\t\tif (strcmp(compress(password), compressed_password)) {\n\t\t\tprintf(\"Incorrect Password!\\n\");\n\t\t\treturn(0);\n\t\t}\n\t\tprintf(\"Entering Diagnostic Mode...\\n\");\n\t\treturn(1);\n\t}\n```"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tint VerifyAdmin(String password) {\n\t\tif (passwd.Equals(compress(password), compressed_password)) {\n\t\t\treturn(0);\n\t\t}\n```\n//Diagnostic Mode* \n\t\treturn(1);}"}, {"BodyText": "Because a compression algorithm is used instead of a one way hashing algorithm, an attacker can recover compressed passwords stored in the database."}]}, {"ID": "DX-43", "Entries": [{"IntroText": "The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext."}, {"BodyText": "This Java example shows a properties file with a cleartext username / password pair."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n```\n# Java Web App ResourceBundle properties file* \n\t...\n\twebapp.ldap.username=secretUsername\n\twebapp.ldap.password=secretPassword\n\t..."}, {"BodyText": "The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext."}, {"Nature": "Bad", "Language": "ASP.NET", "ExampleCode": "```\n\t...\n\t<connectionStrings>\n\t\t<add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" />\n\t</connectionStrings>\n\t...\n```"}, {"BodyText": "Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information."}]}], "ObservedExamples": [{"Reference": "CVE-2022-30018", "Description": "A messaging platform serializes all elements of User/Group objects, making private information available to adversaries", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-30018"}], "RelatedAttackPatterns": ["49"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "The meaning of this entry needs to be investigated more closely, especially with respect to what is meant by \"recoverable.\""}], "Top25Examples": [{"Reference": "CVE-2022-43460", "Description": "Driver Distributor v2.2.3.1 and earlier contains a vulnerability where passwords are stored in a recoverable format. If an attacker obtains a configuration file of Driver Distributor, the encrypted administrator's credentials may be decrypted."}, {"Reference": "CVE-2022-46142", "Description": "Affected devices store the CLI user passwords encrypted in flash memory. Attackers with physical access to the device could retrieve the file and decrypt the CLI user passwords."}, {"Reference": "CVE-2022-32519", "Description": "A CWE-257: Storing Passwords in a Recoverable Format vulnerability exists that could result in unwanted access to a DCE instance when performed over a network by a malicious third-party. Affected Products: Data Center Expert (Versions prior to V7.9.0)"}, {"Reference": "CVE-2022-22251", "Description": "On cSRX Series devices software permission issues in the container filesystem and stored files combined with storing passwords in a recoverable format in Juniper Networks Junos OS allows a local, low-privileged attacker to elevate their permissions to take control of any instance of a cSRX software deployment. This issue affects Juniper Networks Junos OS 20.2 version 20.2R1 and later versions prior to 21.2R1 on cSRX Series."}, {"Reference": "CVE-2022-30018", "Description": "Mobotix Control Center (MxCC) through 2.5.4.5 has Insufficiently Protected Credentials, Storing Passwords in a Recoverable Format via the MxCC.ini config file. The credential storage method in this software enables an attacker/user of the machine to gain admin access to the software and gain access to recordings/recording locations."}, {"Reference": "CVE-2022-34837", "Description": "Storing Passwords in a Recoverable Format vulnerability in ABB Zenon 8.20 allows an attacker who successfully exploit the vulnerability may add more network clients that may monitor various activities of the Zenon."}, {"Reference": "CVE-2022-34838", "Description": "Storing Passwords in a Recoverable Format vulnerability in ABB Zenon 8.20 allows an attacker who successfully exploit the vulnerability may add or alter data points and corresponding attributes. Once such engineering data is used the data visualization will be altered for the end user."}]}
{"ID": "258", "Name": "Empty Password in Configuration File", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "Using an empty string as a password is insecure.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "260", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "521", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"]}], "PotentialMitigations": [{"Phase": ["System Configuration"], "Description": "Passwords should be at least eight characters long -- the longer the better. Avoid passwords that are in any way similar to other passwords you have. Avoid using words that may be found in a dictionary, names book, on a map, etc. Consider incorporating numbers and/or punctuation into your password. If you do use common words, consider replacing letters in that word with numbers and punctuation. However, do not use \"similar-looking\" punctuation. For example, it is not a good idea to change cat to c@t, ca+, (@+, or anything similar. Finally, it is never appropriate to use an empty string as a password."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but the password is provided as an empty string."}, {"BodyText": "This Java example shows a properties file with an empty password string."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n```\n# Java Web App ResourceBundle properties file* \n\t...\n\twebapp.ldap.username=secretUsername\n\twebapp.ldap.password=\n\t..."}, {"BodyText": "The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database and the password is provided as an empty string."}, {"Nature": "Bad", "Language": "ASP.NET", "ExampleCode": "```\n\t...\n\t<connectionStrings>\n\t<add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=; dbalias=uDB;\" providerName=\"System.Data.Odbc\" />\n\t</connectionStrings>\n\t...\n```"}, {"BodyText": "An empty string should never be used as a password as this can allow unauthorized access to the application. Username and password information should not be included in a configuration file or a properties file in clear text. If possible, encrypt this information and avoid CWE-260 and CWE-13."}]}], "ObservedExamples": [{"Reference": "CVE-2022-26117", "Description": "Network access control (NAC) product has a configuration file with an empty password", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-26117"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-26117", "Description": "An empty password in configuration file vulnerability [CWE-258] in FortiNAC version 8.3.7 and below, 8.5.2 and below, 8.5.4, 8.6.0, 8.6.5 and below, 8.7.6 and below, 8.8.11 and below, 9.1.5 and below, 9.2.3 and below may allow an authenticated attacker to access the MySQL databases via the CLI."}]}
{"ID": "259", "Name": "Use of Hard-coded Password", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product contains a hard-coded password, which it uses for its own inbound authentication or for outbound communication to external components.", "ExtendedDescription": "\n\nA hard-coded password typically leads to a significant authentication failure that can be difficult for the system administrator to detect. Once detected, it can be difficult to fix, so the administrator may be forced into disabling the product entirely. There are two main variations:\n\n```\n\t\tInbound: the product contains an authentication mechanism that checks for a hard-coded password.\n\t\tOutbound: the product connects to another system or component, and it contains hard-coded password for connecting to that component.\n```\nIn the Inbound variant, a default administration account is created, and a simple password is hard-coded into the product and associated with that account. This hard-coded password is the same for each installation of the product, and it usually cannot be changed or disabled by system administrators without manually modifying the program, or otherwise patching the product. If the password is ever discovered or published (a common occurrence on the Internet), then anybody with knowledge of this password can access the product. Finally, since all installations of the product will have the same password, even across different organizations, this enables massive attacks such as worms to take place.\n\nThe Outbound variant applies to front-end systems that authenticate with a back-end service. The back-end service may require a fixed password which can be easily discovered. The programmer may simply hard-code those back-end credentials into the front-end product. Any user of that program may be able to extract the password. Client-side systems with hard-coded passwords pose even more of a threat, since the extraction of a password from a binary is usually very simple.\n", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "798", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "798", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "798", "ViewID": "1340", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "321", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "257", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "ICS/OT", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}, {"Phase": "Architecture and Design"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "If hard-coded passwords are used, it is almost certain that malicious users will gain access through the account in question."}], "DetectionMethods": [{"Method": "Manual Analysis", "Description": "This weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.", "EffectivenessNotes": "These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules."}, {"DetectionMethodID": "DM-11.6", "Method": "Black Box", "Description": "\n\nUse monitoring tools that examine the software's process as it interacts with the operating system and the network. This technique is useful in cases when source code is unavailable, if the software was not developed by you, or if you want to verify that the build phase did not introduce any new weaknesses. Examples include debuggers that directly attach to the running process; system-call tracing utilities such as truss (Solaris) and strace (Linux); system activity monitors such as FileMon, RegMon, Process Monitor, and other Sysinternals utilities (Windows); and sniffers and protocol analyzers that monitor network traffic.\n\n\nAttach the monitor to the process and perform a login. Using disassembled code, look at the associated instructions and see if any of them appear to be comparing the input to a fixed string or value.\n"}, {"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "For outbound authentication: store passwords outside of the code in a strongly-protected, encrypted configuration file or database that is protected from access by all outsiders, including other local users on the same system. Properly protect the key (CWE-320). If you cannot use encryption to protect the file, then make sure that the permissions are as restrictive as possible."}, {"Phase": ["Architecture and Design"], "Description": "For inbound authentication: Rather than hard-code a default username and password for first time logins, utilize a \"first login\" mode that requires the user to enter a unique strong password."}, {"Phase": ["Architecture and Design"], "Description": "Perform access control checks and limit which entities can access the feature that requires the hard-coded password. For example, a feature might only be enabled through the system console instead of through a network connection."}, {"Phase": ["Architecture and Design"], "Description": "\n\nFor inbound authentication: apply strong one-way hashes to your passwords and store those hashes in a configuration file or database with appropriate access control. That way, theft of the file/database still requires the attacker to try to crack the password. When receiving an incoming password during authentication, take the hash of the password and compare it to the hash that you have saved.\n\n\nUse randomly assigned salts for each separate hash that you generate. This increases the amount of computation that an attacker needs to conduct a brute-force attack, possibly limiting the effectiveness of the rainbow table method.\n"}, {"Phase": ["Architecture and Design"], "Description": "\n\nFor front-end to back-end connections: Three solutions are possible, although none are complete.\n\n```\n\t\tThe first suggestion involves the use of generated passwords which are changed automatically and must be entered at given time intervals by a system administrator. These passwords will be held in memory and only be valid for the time intervals.\n\t\tNext, the passwords used should be limited at the back end to only performing actions valid for the front end, as opposed to having full access.\n\t\tFinally, the messages sent should be tagged and checksummed with time sensitive values so as to prevent replay style attacks.\n```\n"}], "DemonstrativeExamples": [{"ID": "DX-13", "Entries": [{"IntroText": "The following code uses a hard-coded password to connect to a database:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t...\n\tDriverManager.getConnection(url, \"scott\", \"tiger\");\n\t...\n```"}, {"BodyText": "This is an example of an external hard-coded password on the client-side of a connection. This code will run successfully, but anyone who has access to it will have access to the password. Once the program has shipped, there is no going back from the database user \"scott\" with a password of \"tiger\" unless the program is patched. A devious employee with access to this information can use it to break into the system. Even worse, if attackers have access to the bytecode for application, they can use the javap -c command to access the disassembled code, which will contain the values of the passwords used. The result of this operation might look something like the following for the example above:"}, {"Nature": "Attack", "ExampleCode": "```\n\tjavap -c ConnMngr.class\n\t\t22: ldc #36; //String jdbc:mysql://ixne.com/rxsql\n\t\t24: ldc #38; //String scott\n\t\t26: ldc #17; //String tiger\n```"}]}, {"ID": "DX-14", "Entries": [{"IntroText": "The following code is an example of an internal hard-coded password in the back-end:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint VerifyAdmin(char *password) {\n\t\t\tif (strcmp(password, \"Mew!\")) {\n\t\t\t\t\t printf(\"Incorrect Password!\\n\");\n\t\t\t\t\treturn(0)\n\t\t\t}\n\t\t\tprintf(\"Entering Diagnostic Mode...\\n\");\n\t\t\treturn(1);\n\t}\n```"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tint VerifyAdmin(String password) {\n\t\tif (!password.equals(\"Mew!\")) {\n\t\t\treturn(0)\n\t\t}\n\t\t//Diagnostic Mode\n\t\treturn(1);\n\t}\n```"}, {"BodyText": "Every instance of this program can be placed into diagnostic mode with the same password. Even worse is the fact that if this program is distributed as a binary-only distribution, it is very difficult to change that password or disable this \"functionality.\""}]}, {"ID": "DX-43", "Entries": [{"IntroText": "The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext."}, {"BodyText": "This Java example shows a properties file with a cleartext username / password pair."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n```\n# Java Web App ResourceBundle properties file* \n\t...\n\twebapp.ldap.username=secretUsername\n\twebapp.ldap.password=secretPassword\n\t..."}, {"BodyText": "The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext."}, {"Nature": "Bad", "Language": "ASP.NET", "ExampleCode": "```\n\t...\n\t<connectionStrings>\n\t\t<add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" />\n\t</connectionStrings>\n\t...\n```"}, {"BodyText": "Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information."}]}, {"ID": "DX-153", "Entries": [{"IntroText": "In 2022, the OT:ICEFALL study examined products by 10 different Operational Technology (OT) vendors. The researchers reported 56 vulnerabilities and said that the products were \"insecure by design\" [REF-1283]. If exploited, these vulnerabilities often allowed adversaries to change how the products operated, ranging from denial of service to changing the code that the products executed. Since these products were often used in industries such as power, electrical, water, and others, there could even be safety implications."}, {"BodyText": "Multiple vendors used hard-coded credentials in their OT products."}]}], "ObservedExamples": [{"Reference": "CVE-2022-29964", "Description": "Distributed Control System (DCS) has hard-coded passwords for local shell access", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-29964"}, {"Reference": "CVE-2021-37555", "Description": "Telnet service for IoT feeder for dogs and cats has hard-coded password [REF-1288]", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-37555"}, {"Reference": "CVE-2021-35033", "Description": "Firmware for a WiFi router uses a hard-coded password for a BusyBox shell, allowing bypass of authentication through the UART port", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-35033"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry could be split into multiple variants: an inbound variant (as seen in the second demonstrative example) and an outbound variant (as seen in the first demonstrative example). These variants are likely to have different consequences, detectability, etc. More importantly, from a vulnerability theory perspective, they could be characterized as different behaviors."}], "Top25Examples": [{"Reference": "CVE-2022-26138", "Description": "The Atlassian Questions For Confluence app for Confluence Server and Data Center creates a Confluence user account in the confluence-users group with the username disabledsystemuser and a hardcoded password. A remote, unauthenticated attacker with knowledge of the hardcoded password could exploit this to log into Confluence and access all content accessible to users in the confluence-users group. This user account is created when installing versions 2.7.34, 2.7.35, and 3.0.2 of the app."}, {"Reference": "CVE-2022-28810", "Description": "Zoho ManageEngine ADSelfService Plus before build 6122 allows a remote authenticated administrator to execute arbitrary operating OS commands as SYSTEM via the policy custom script feature. Due to the use of a default administrator password, attackers may be able to abuse this functionality with minimal effort. Additionally, a remote and partially authenticated attacker may be able to inject arbitrary commands into the custom script due to an unsanitized password field."}, {"Reference": "CVE-2021-31477", "Description": "This vulnerability allows remote attackers to execute arbitrary code on affected installations of GE Reason RPV311 14A03. Authentication is not required to exploit this vulnerability. The specific flaw exists within the firmware and filesystem of the device. The firmware and filesystem contain hard-coded default credentials. An attacker can leverage this vulnerability to execute code in the context of the download user. Was ZDI-CAN-11852."}, {"Reference": "CVE-2022-1162", "Description": "A hardcoded password was set for accounts registered using an OmniAuth provider (e.g. OAuth, LDAP, SAML) in GitLab CE/EE versions 14.7 prior to 14.7.7, 14.8 prior to 14.8.5, and 14.9 prior to 14.9.2 allowing attackers to potentially take over accounts"}, {"Reference": "CVE-2022-22144", "Description": "A hard-coded password vulnerability exists in the libcommonprod.so prod_change_root_passwd functionality of TCL LinkHub Mesh Wi-Fi MS1G_00_01.00_14. During system startup this functionality is always called, leading to a known root password. An attacker does not have to do anything to trigger this vulnerability."}, {"Reference": "CVE-2022-25577", "Description": "ALF-BanCO v8.2.5 and below was discovered to use a hardcoded password to encrypt the SQLite database containing the user's data. Attackers who are able to gain remote or local access to the system are able to read and modify the data."}, {"Reference": "CVE-2022-26119", "Description": "A improper authentication vulnerability in Fortinet FortiSIEM before 6.5.0 allows a local attacker with CLI access to perform operations on the Glassfish server directly via a hardcoded password."}, {"Reference": "CVE-2022-27172", "Description": "A hard-coded password vulnerability exists in the console infactory functionality of InHand Networks InRouter302 V3.5.37. A specially-crafted network request can lead to privileged operation execution. An attacker can send a sequence of requests to trigger this vulnerability."}, {"Reference": "CVE-2022-29644", "Description": "TOTOLINK A3100R V4.1.2cu.5050_B20200504 and V4.1.2cu.5247_B20211129 were discovered to contain a hard coded password for the telnet service stored in the component /web_cste/cgi-bin/product.ini."}, {"Reference": "CVE-2022-29645", "Description": "TOTOLINK A3100R V4.1.2cu.5050_B20200504 and V4.1.2cu.5247_B20211129 were discovered to contain a hard coded password for root stored in the component /etc/shadow.sample."}, {"Reference": "CVE-2022-29825", "Description": "Use of Hard-coded Password vulnerability in Mitsubishi Electric GX Works3 versions from 1.000A to 1.090U and GT Designer3 Version1 (GOT2000) versions from 1.122C to 1.290C allows an unauthenticated attacker to disclose sensitive information. As a result, unauthenticated users may view programs and project files or execute programs illegally."}, {"Reference": "CVE-2022-29831", "Description": "Use of Hard-coded Password vulnerability in Mitsubishi Electric Corporation GX Works3 versions from 1.015R to 1.095Z allows a remote unauthenticated attacker to obtain information about the project file for MELSEC safety CPU modules."}, {"Reference": "CVE-2022-29889", "Description": "A hard-coded password vulnerability exists in the telnet functionality of Abode Systems, Inc. iota All-In-One Security Kit 6.9Z. Use of a hard-coded root password can lead to arbitrary command execution. An attacker can authenticate with hard-coded credentials to trigger this vulnerability."}, {"Reference": "CVE-2022-32967", "Description": "RTL8111EP-CG/RTL8111FP-CG DASH function has hard-coded password. An unauthenticated physical attacker can use the hard-coded default password during system reboot triggered by other user, to acquire partial system information such as serial number and server information."}, {"Reference": "CVE-2022-34005", "Description": "An issue was discovered in TitanFTP (aka Titan FTP) NextGen before 1.2.1050. There is Remote Code Execution due to a hardcoded password for the sa account on the Microsoft SQL Express 2019 instance installed by default during TitanFTP NextGen installation, aka NX-I674 (sub-issue 1). NOTE: as of 2022-06-21, the 1.2.1050 release corrects this vulnerability in a new installation, but not in an upgrade installation."}, {"Reference": "CVE-2022-34462", "Description": " Dell EMC SCG Policy Manager, versions from 5.10 to 5.12, contain(s) a Hard-coded Password Vulnerability. An attacker, with the knowledge of the hard-coded credentials, could potentially exploit this vulnerability to login to the system to gain admin privileges. "}, {"Reference": "CVE-2022-35491", "Description": "TOTOLINK A3002RU V3.0.0-B20220304.1804 has a hardcoded password for root in /etc/shadow.sample."}, {"Reference": "CVE-2022-35866", "Description": "This vulnerability allows remote attackers to bypass authentication on affected installations of Vinchin Backup and Recovery 6.5.0.17561. Authentication is not required to exploit this vulnerability. The specific flaw exists within the configuration of the MySQL server. The server uses a hard-coded password for the administrator user. An attacker can leverage this vulnerability to bypass authentication on the system. Was ZDI-CAN-17139."}, {"Reference": "CVE-2022-36610", "Description": "TOTOLINK A720R V4.1.5cu.532_B20210610 was discovered to contain a hardcoded password for root at /etc/shadow.sample."}, {"Reference": "CVE-2022-36611", "Description": "TOTOLINK A800R V4.1.2cu.5137_B20200730 was discovered to contain a hardcoded password for root at /etc/shadow.sample."}, {"Reference": "CVE-2022-36612", "Description": "TOTOLINK A950RG V4.1.2cu.5204_B20210112 was discovered to contain a hardcoded password for root at /etc/shadow.sample."}, {"Reference": "CVE-2022-36613", "Description": "TOTOLINK N600R V4.3.0cu.7647_B20210106 was discovered to contain a hardcoded password for root at /etc/shadow.sample."}, {"Reference": "CVE-2022-36614", "Description": "TOTOLINK A860R V4.1.2cu.5182_B20201027 was discovered to contain a hardcoded password for root at /etc/shadow.sample."}, {"Reference": "CVE-2022-36615", "Description": "TOTOLINK A3000RU V4.1.2cu.5185_B20201128 was discovered to contain a hardcoded password for root at /etc/shadow.sample."}, {"Reference": "CVE-2022-36616", "Description": "TOTOLINK A810R V4.1.2cu.5182_B20201026 and V5.9c.4050_B20190424 was discovered to contain a hardcoded password for root at /etc/shadow.sample."}, {"Reference": "CVE-2022-37841", "Description": "In TOTOLINK A860R V4.1.2cu.5182_B20201027 there is a hard coded password for root in /etc/shadow.sample."}, {"Reference": "CVE-2022-37857", "Description": "bilde2910 Hauk v1.6.1 requires a hardcoded password which by default is blank. This hardcoded password is hashed but stored within the config.php file server-side as well as in clear-text on the android client device by default."}, {"Reference": "CVE-2022-38823", "Description": "In TOTOLINK T6 V4.1.5cu.709_B20210518, there is a hard coded password for root in /etc/shadow.sample."}, {"Reference": "CVE-2022-45444", "Description": "Sewio\u2019s Real-Time Location System (RTLS) Studio version 2.0.0 up to and including version 2.6.2 contains hard-coded passwords for select users in the application\u2019s database. This could allow a remote attacker to login to the database with unrestricted access. "}, {"Reference": "CVE-2022-36159", "Description": "Contec FXA3200 version 1.13 and under were discovered to contain a hard coded hash password for root stored in the component /etc/shadow. As the password strength is weak, it can be cracked in few minutes. Through this credential, a malicious actor can access the Wireless LAN Manager interface and open the telnet port then sniff the traffic or inject any malware."}, {"Reference": "CVE-2022-41653", "Description": "Daikin SVMPC1 version 2.1.22 and prior and SVMPC2 version 1.2.3 and prior are vulnerable to an attacker obtaining user login credentials and control the system."}, {"Reference": "CVE-2022-48067", "Description": "An information disclosure vulnerability in Totolink A830R V4.1.2cu.5182 allows attackers to obtain the root password via a brute-force attack."}]}
{"ID": "26", "Name": "Path Traversal: '/dir/../filename'", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product uses external input to construct a pathname that should be within a restricted directory, but it does not properly neutralize \"/dir/../filename\" sequences that can resolve to a location that is outside of that directory.", "ExtendedDescription": "\n\nThis allows attackers to traverse the file system to access files or directories that are outside of the restricted directory.\n\n\nThe '/dir/../filename' manipulation is useful for bypassing some path traversal protection schemes. Sometimes a program only checks for \"../\" at the beginning of the input, so a \"/../\" can bypass that check.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "23", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Web Server", "Prevalence": "Often"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Files or Directories", "Modify Files or Directories"]}], "PotentialMitigations": [{"MitigationID": "MIT-5.1", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\n\n\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n"}, {"MitigationID": "MIT-20", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Inputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180). Make sure that the application does not decode the same input twice (CWE-174). Such errors could be used to bypass allowlist validation schemes by introducing dangerous inputs after they have been checked."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "260", "Name": "Password in Configuration File", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product stores a password in a configuration file that might be accessible to actors who do not know the password.", "ExtendedDescription": "This can result in compromise of the system for which the password is used. An attacker could gain access to this file and learn the stored password or worse yet, change the password to one of their choosing.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "522", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Avoid storing passwords in easily accessible locations."}, {"Phase": ["Architecture and Design"], "Description": "Consider storing cryptographic hashes of passwords as an alternative to storing in plaintext."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "Below is a snippet from a Java properties file."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\twebapp.ldap.username = secretUsername\n\twebapp.ldap.password = secretPassword\n```"}, {"BodyText": "Because the LDAP credentials are stored in plaintext, anyone with access to the file can gain access to the resource."}]}, {"ID": "DX-43", "Entries": [{"IntroText": "The following examples show a portion of properties and configuration files for Java and ASP.NET applications. The files include username and password information but they are stored in cleartext."}, {"BodyText": "This Java example shows a properties file with a cleartext username / password pair."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n```\n# Java Web App ResourceBundle properties file* \n\t...\n\twebapp.ldap.username=secretUsername\n\twebapp.ldap.password=secretPassword\n\t..."}, {"BodyText": "The following example shows a portion of a configuration file for an ASP.Net application. This configuration file includes username and password information for a connection to a database but the pair is stored in cleartext."}, {"Nature": "Bad", "Language": "ASP.NET", "ExampleCode": "```\n\t...\n\t<connectionStrings>\n\t\t<add name=\"ud_DEV\" connectionString=\"connectDB=uDB; uid=db2admin; pwd=password; dbalias=uDB;\" providerName=\"System.Data.Odbc\" />\n\t</connectionStrings>\n\t...\n```"}, {"BodyText": "Username and password information should not be included in a configuration file or a properties file in cleartext as this will allow anyone who can read the file access to the resource. If possible, encrypt this information."}]}], "ObservedExamples": [{"Reference": "CVE-2022-38665", "Description": "A continuous delivery pipeline management tool stores an unencypted password in a configuration file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-38665"}], "AffectedResources": ["File or Directory"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-34213", "Description": "Jenkins Squash TM Publisher (Squash4Jenkins) Plugin 1.0.0 and earlier stores passwords unencrypted in its global configuration file on the Jenkins controller where they can be viewed by users with access to the Jenkins controller file system."}, {"Reference": "CVE-2022-38121", "Description": "UPSMON PRO configuration file stores user password in plaintext under public user directory. A remote attacker with general user privilege can access all users\u2018 and administrators' account names and passwords via this unprotected configuration file."}, {"Reference": "CVE-2022-38665", "Description": "Jenkins CollabNet Plugins Plugin 2.0.8 and earlier stores a RabbitMQ password unencrypted in its global configuration file on the Jenkins controller where it can be viewed by users with access to the Jenkins controller file system."}, {"Reference": "CVE-2022-41247", "Description": "Jenkins BigPanda Notifier Plugin 1.4.0 and earlier stores the BigPanda API key unencrypted in its global configuration file on the Jenkins controller where they can be viewed by users with access to the Jenkins controller file system."}]}
{"ID": "261", "Name": "Weak Encoding for Password", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "Obscuring a password with a trivial encoding does not protect the password.", "ExtendedDescription": "Password management issues occur when a password is stored in plaintext in an application's properties or configuration file. A programmer can attempt to remedy the password management problem by obscuring the password with an encoding function, such as base 64 encoding, but this effort does not adequately protect the password.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "522", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Description": "Passwords should be encrypted with keys that are at least 128 bits in length for adequate security."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code reads a password from a properties file and uses the password to connect to a database."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\t...\n\tProperties prop = new Properties();\n\tprop.load(new FileInputStream(\"config.properties\"));\n\tString password = Base64.decode(prop.getProperty(\"password\"));\n\tDriverManager.getConnection(url, usr, password);\n\t...\n```"}, {"BodyText": "This code will run successfully, but anyone with access to config.properties can read the value of password and easily determine that the value has been base 64 encoded. If a devious employee has access to this information, they can use it to break into the system."}]}, {"Entries": [{"IntroText": "The following code reads a password from the registry and uses the password to create a new network credential."}, {"Nature": "Bad", "Language": "C#", "ExampleCode": "```\n\t...\n\tstring value = regKey.GetValue(passKey).ToString();\n\tbyte[] decVal = Convert.FromBase64String(value);\n\tNetworkCredential netCred = newNetworkCredential(username,decVal.toString(),domain);\n\t...\n```"}, {"BodyText": "This code will run successfully, but anyone who has access to the registry key used to store the password can read the value of password. If a devious employee has access to this information, they can use it to break into the system."}]}], "RelatedAttackPatterns": ["55"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Other", "Note": "\n\nThe \"crypt\" family of functions uses weak cryptographic algorithms and should be avoided. It may be present in some projects for compatibility.\n"}], "Top25Examples": [{"Reference": "CVE-2022-38469", "Description": " An unauthorized user with network access and the decryption key could decrypt sensitive data, such as usernames and passwords. "}, {"Reference": "CVE-2022-34445", "Description": " Dell PowerScale OneFS, versions 8.2.x through 9.3.x contain a weak encoding for a password. A malicious local privileged attacker may potentially exploit this vulnerability, leading to information disclosure. "}]}
{"ID": "262", "Name": "Not Using Password Aging", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product does not have a mechanism in place for managing password aging.", "ExtendedDescription": "\n\nPassword aging (or password rotation) is a policy that forces users to change their passwords after a defined time period passes, such as every 30 or 90 days. Without mechanisms such as aging, users might not change their passwords in a timely manner.\n\n\nNote that while password aging was once considered an important security feature, it has since fallen out of favor by many, because it is not as effective against modern threats compared to other mechanisms such as slow hashes. In addition, forcing frequent changes can unintentionally encourage users to select less-secure passwords. However, password aging is still in use due to factors such as compliance requirements, e.g., Payment Card Industry Data Security Standard (PCI DSS).\n", "LikelihoodOfExploit": "Low", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1390", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "309", "ViewID": "1000"}, {"Nature": "PeerOf", "CweID": "324", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "As passwords age, the probability that they are compromised grows."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "As part of a product's design, require users to change their passwords regularly and avoid reusing previous passwords."}, {"Phase": ["Implementation"], "Description": "Developers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].", "Effectiveness": "Discouraged Common Practice"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "A system does not enforce the changing of passwords every certain period."}]}], "RelatedAttackPatterns": ["16", "49", "509", "55", "555", "560", "561", "565", "600", "652", "653", "70"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "263", "Name": "Password Aging with Long Expiration", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product supports password aging, but the expiration period is too long.", "ExtendedDescription": "\n\nPassword aging (or password rotation) is a policy that forces users to change their passwords after a defined time period passes, such as every 30 or 90 days. A long expiration provides more time for attackers to conduct password cracking before users are forced to change to a new password.\n\n\nNote that while password aging was once considered an important security feature, it has since fallen out of favor by many, because it is not as effective against modern threats compared to other mechanisms such as slow hashes. In addition, forcing frequent changes can unintentionally encourage users to select less-secure passwords. However, password aging is still in use due to factors such as compliance requirements, e.g., Payment Card Industry Data Security Standard (PCI DSS).\n", "LikelihoodOfExploit": "Low", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1390", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "As passwords age, the probability that they are compromised grows."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Ensure that password aging is limited so that there is a defined maximum age for passwords. Note that if the expiration window is too short, it can cause users to generate poor or predictable passwords."}, {"Phase": ["Architecture and Design"], "Description": "Ensure that the user is notified several times leading up to the password expiration."}, {"Phase": ["Architecture and Design"], "Description": "Create mechanisms to prevent users from reusing passwords or creating similar passwords."}, {"Phase": ["Implementation"], "Description": "Developers might disable clipboard paste operations into password fields as a way to discourage users from pasting a password into a clipboard. However, this might encourage users to choose less-secure passwords that are easier to type, and it can reduce the usability of password managers [REF-1294].", "Effectiveness": "Discouraged Common Practice"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "A system requires the changing of passwords every five years."}]}], "RelatedAttackPatterns": ["16", "49", "509", "55", "555", "560", "561", "565", "600", "652", "653", "70"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "266", "Name": "Incorrect Privilege Assignment", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "A product incorrectly assigns a privilege to a particular actor, creating an unintended sphere of control for that actor.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "269", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanAlsoBe", "CweID": "286", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "A user can access restricted functionality and/or sensitive information that may include administrative functionality and user accounts."}], "PotentialMitigations": [{"MitigationID": "MIT-1", "Phase": ["Architecture and Design", "Operation"], "Description": "Very carefully manage the setting, management, and handling of privileges. Explicitly manage trust zones in the software."}, {"MitigationID": "MIT-17", "Phase": ["Architecture and Design", "Operation"], "Strategy": "Environment Hardening", "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."}], "DemonstrativeExamples": [{"ID": "DX-97", "Entries": [{"IntroText": "The following example demonstrates the weakness."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tseteuid(0);\n```\n/* do some stuff */* \n\t\n\tseteuid(getuid());"}]}, {"ID": "DX-142", "Entries": [{"IntroText": "The following example demonstrates the weakness."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tAccessController.doPrivileged(new PrivilegedAction() {\n\t\t\tpublic Object run() {\n```\n// privileged code goes here, for example:* \n\t\t\t\tSystem.loadLibrary(\"awt\");\n\t\t\t\treturn null;\n\t\t\t\t\n\t\t\t\t *// nothing to return* \n\t\t\t\t}"}]}, {"ID": "DX-108", "Entries": [{"IntroText": "This application sends a special intent with a flag that allows the receiving application to read a data file for backup purposes."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tIntent intent = new Intent();\n\tintent.setAction(\"com.example.BackupUserData\");\n\tintent.setData(file_uri);\n\tintent.addFlags(FLAG_GRANT_READ_URI_PERMISSION);\n\tsendBroadcast(intent);\n```"}, {"Nature": "Attack", "Language": "Java", "ExampleCode": "```\n\tpublic class CallReceiver extends BroadcastReceiver {\n\t\t@Override\n\t\tpublic void onReceive(Context context, Intent intent) {\n\t\t\tUri userData = intent.getData();\n\t\t\tstealUserData(userData);\n\t\t}\n\t}\n```"}, {"BodyText": "Any malicious application can register to receive this intent. Because of the FLAG_GRANT_READ_URI_PERMISSION included with the intent, the malicious receiver code can read the user's data."}]}], "ObservedExamples": [{"Reference": "CVE-1999-1193", "Description": "untrusted user placed in unix \"wheel\" group", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1193"}, {"Reference": "CVE-2005-2741", "Description": "Product allows users to grant themselves certain rights that can be used to escalate privileges.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2741"}, {"Reference": "CVE-2005-2496", "Description": "Product uses group ID of a user instead of the group, causing it to run with different privileges. This is resultant from some other unknown issue.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2496"}, {"Reference": "CVE-2004-0274", "Description": "Product mistakenly assigns a particular status to an entity, leading to increased privileges.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0274"}], "AffectedResources": ["System Process"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-3496", "Description": "A vulnerability was found in SourceCodester Human Resource Management System 1.0 and classified as critical. This issue affects some unknown processing of the file employeeadd.php of the component Admin Panel. The manipulation leads to improper access controls. The attack may be initiated remotely. The identifier VDB-210785 was assigned to this vulnerability."}, {"Reference": "CVE-2021-24859", "Description": "The User Meta Shortcodes WordPress plugin through 0.5 registers a shortcode that allows any user with a role as low as contributor to access other users metadata by specifying the user login as a parameter. This makes the WP instance vulnerable to data extrafiltration, including password hashes"}, {"Reference": "CVE-2022-1606", "Description": "Incorrect privilege assignment in M-Files Server versions before 22.3.11164.0 and before 22.3.11237.1 allows user to read unmanaged objects."}, {"Reference": "CVE-2022-20051", "Description": "In ims service, there is a possible unexpected application behavior due to incorrect privilege assignment. This could lead to local denial of service with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06219127; Issue ID: ALPS06219127."}, {"Reference": "CVE-2022-22509", "Description": "In Phoenix Contact FL SWITCH Series 2xxx in version 3.00 an incorrect privilege assignment allows an low privileged user to enable full access to the device configuration."}, {"Reference": "CVE-2022-2637", "Description": "Incorrect Privilege Assignment vulnerability in Hitachi Hitachi Storage Plug-in for VMware vCenter allows remote authenticated users to cause privilege escalation.This issue affects Hitachi Storage Plug-in for VMware vCenter: from 04.8.0 before 04.9.0. "}, {"Reference": "CVE-2022-29526", "Description": "Go before 1.17.10 and 1.18.x before 1.18.2 has Incorrect Privilege Assignment. When called with a non-zero flags parameter, the Faccessat function could incorrectly report that a file is accessible."}, {"Reference": "CVE-2022-4041", "Description": "Incorrect Privilege Assignment vulnerability in Hitachi Storage Plug-in for VMware vCenter allows remote authenticated users to cause privilege escalation. This issue affects Hitachi Storage Plug-in for VMware vCenter: from 04.8.0 before 04.9.1. "}, {"Reference": "CVE-2022-4264", "Description": "Incorrect Privilege Assignment in M-Files Web (Classic) in M-Files before 22.8.11691.0 allows low privilege user to change some configuration."}, {"Reference": "CVE-2022-4270", "Description": "Incorrect privilege assignment issue in M-Files Web in M-Files Web versions before 22.5.11436.1 could have changed permissions accidentally."}, {"Reference": "CVE-2022-4441", "Description": "Incorrect Privilege Assignment vulnerability in Hitachi Storage Plug-in for VMware vCenter allows remote authenticated users to cause privilege escalation. This issue affects Hitachi Storage Plug-in for VMware vCenter: from 04.9.0 before 04.9.1. "}, {"Reference": "CVE-2022-48283", "Description": "A piece of Huawei whole-home intelligence software has an Incorrect Privilege Assignment vulnerability. Successful exploitation of this vulnerability could allow attackers to access restricted functions."}, {"Reference": "CVE-2022-48284", "Description": "A piece of Huawei whole-home intelligence software has an Incorrect Privilege Assignment vulnerability. Successful exploitation of this vulnerability could allow attackers to access restricted functions."}, {"Reference": "CVE-2022-23296", "Description": "Windows Installer Elevation of Privilege Vulnerability"}, {"Reference": "CVE-2022-21946", "Description": "A Incorrect Permission Assignment for Critical Resource vulnerability in the sudoers configuration in cscreen of openSUSE Factory allows any local users to gain the privileges of the tty and dialout groups and access and manipulate any running cscreen seesion. This issue affects: openSUSE Factory cscreen version 1.2-1.3 and prior versions."}]}
